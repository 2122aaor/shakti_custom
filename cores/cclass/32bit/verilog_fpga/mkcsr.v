//
// Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
//
// On Tue Mar 28 10:39:33 IST 2017
//
//
// Ports:
// Name                         I/O  size props
// csr_access                     O    65
// RDY_csr_access                 O     1 const
// RDY_sin                        O     1 const
// sout                           O     1 reg
// RDY_sout                       O     1 const
// RDY_mtip                       O     1 const
// meip                           I     1
// ueip                           I     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// csr_access_data                I   139
// sin_in                         I     1 reg
// mtip_mtip1                     I     1
// EN_sin                         I     1
// EN_mtip                        I     1
// EN_csr_access                  I     1
//
// Combinational paths from inputs to outputs:
//   (mtip_mtip1,
//    csr_access_data,
//    EN_mtip,
//    EN_csr_access,
//    meip,
//    ueip) -> csr_access
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkcsr(meip,
	     ueip,
	     CLK,
	     RST_N,

	     csr_access_data,
	     EN_csr_access,
	     csr_access,
	     RDY_csr_access,

	     sin_in,
	     EN_sin,
	     RDY_sin,

	     sout,
	     RDY_sout,

	     mtip_mtip1,
	     EN_mtip,
	     RDY_mtip);
  input  meip;
  input  ueip;
  input  CLK;
  input  RST_N;

  // actionvalue method csr_access
  input  [138 : 0] csr_access_data;
  input  EN_csr_access;
  output [64 : 0] csr_access;
  output RDY_csr_access;

  // action method sin
  input  sin_in;
  input  EN_sin;
  output RDY_sin;

  // value method sout
  output sout;
  output RDY_sout;

  // action method mtip
  input  mtip_mtip1;
  input  EN_mtip;
  output RDY_mtip;

  // signals for module outputs
  wire [64 : 0] csr_access;
  wire RDY_csr_access, RDY_mtip, RDY_sin, RDY_sout, sout;

  // inlined wires
  reg [7 : 0] rg_tx$port0__write_1;
  reg [4 : 0] rg_fflags$port1__write_1;
  wire [31 : 0] csr_mcycle$port0__write_1,
		csr_mcycle$port2__read,
		csr_mcycleh$port0__write_1,
		csr_mcycleh$port2__read,
		csr_minstret$port0__write_1,
		csr_minstret$port2__read,
		csr_minstreth$port0__write_1,
		csr_minstreth$port2__read;
  wire [8 : 0] rg_rx$port1__read, rg_rx$port1__write_1, rg_rx$port2__read;
  wire [7 : 0] rg_tx$port1__read;
  wire [4 : 0] rg_fflags$port2__read;
  wire csr_mcycle$EN_port1__write,
       csr_mcycleh$EN_port1__write,
       csr_minstret$EN_port0__write,
       csr_minstret$EN_port1__write,
       csr_minstreth$EN_port0__write,
       csr_minstreth$EN_port1__write,
       rg_fflags$EN_port0__write,
       rg_fflags$EN_port1__write,
       rg_rx$EN_port0__write,
       rg_tx$EN_port0__write,
       uart_pwRecvCellCountReset$whas,
       uart_pwRecvEnableBitCount$whas,
       uart_pwRecvResetBitCount$whas,
       uart_pwXmitCellCountReset$whas,
       uart_pwXmitEnableBitCount$whas,
       uart_pwXmitLoadBuffer$whas,
       wr_send_to_uart$whas;

  // register csr_mbadaddr
  reg [31 : 0] csr_mbadaddr;
  wire [31 : 0] csr_mbadaddr$D_IN;
  wire csr_mbadaddr$EN;

  // register csr_mbase
  reg [31 : 0] csr_mbase;
  wire [31 : 0] csr_mbase$D_IN;
  wire csr_mbase$EN;

  // register csr_mbound
  reg [31 : 0] csr_mbound;
  wire [31 : 0] csr_mbound$D_IN;
  wire csr_mbound$EN;

  // register csr_mcause
  reg [31 : 0] csr_mcause;
  wire [31 : 0] csr_mcause$D_IN;
  wire csr_mcause$EN;

  // register csr_mcycle
  reg [31 : 0] csr_mcycle;
  wire [31 : 0] csr_mcycle$D_IN;
  wire csr_mcycle$EN;

  // register csr_mcycleh
  reg [31 : 0] csr_mcycleh;
  wire [31 : 0] csr_mcycleh$D_IN;
  wire csr_mcycleh$EN;

  // register csr_mdbase
  reg [31 : 0] csr_mdbase;
  wire [31 : 0] csr_mdbase$D_IN;
  wire csr_mdbase$EN;

  // register csr_mdbound
  reg [31 : 0] csr_mdbound;
  wire [31 : 0] csr_mdbound$D_IN;
  wire csr_mdbound$EN;

  // register csr_mepc
  reg [31 : 0] csr_mepc;
  wire [31 : 0] csr_mepc$D_IN;
  wire csr_mepc$EN;

  // register csr_mibase
  reg [31 : 0] csr_mibase;
  wire [31 : 0] csr_mibase$D_IN;
  wire csr_mibase$EN;

  // register csr_mibound
  reg [31 : 0] csr_mibound;
  wire [31 : 0] csr_mibound$D_IN;
  wire csr_mibound$EN;

  // register csr_minstret
  reg [31 : 0] csr_minstret;
  wire [31 : 0] csr_minstret$D_IN;
  wire csr_minstret$EN;

  // register csr_minstreth
  reg [31 : 0] csr_minstreth;
  wire [31 : 0] csr_minstreth$D_IN;
  wire csr_minstreth$EN;

  // register csr_misa
  reg [31 : 0] csr_misa;
  wire [31 : 0] csr_misa$D_IN;
  wire csr_misa$EN;

  // register csr_mscratch
  reg [31 : 0] csr_mscratch;
  wire [31 : 0] csr_mscratch$D_IN;
  wire csr_mscratch$EN;

  // register csr_ubadaddr
  reg [31 : 0] csr_ubadaddr;
  wire [31 : 0] csr_ubadaddr$D_IN;
  wire csr_ubadaddr$EN;

  // register csr_ucause
  reg [31 : 0] csr_ucause;
  wire [31 : 0] csr_ucause$D_IN;
  wire csr_ucause$EN;

  // register csr_uepc
  reg [31 : 0] csr_uepc;
  wire [31 : 0] csr_uepc$D_IN;
  wire csr_uepc$EN;

  // register csr_uscratch
  reg [31 : 0] csr_uscratch;
  wire [31 : 0] csr_uscratch$D_IN;
  wire csr_uscratch$EN;

  // register rg_fflags
  reg [4 : 0] rg_fflags;
  wire [4 : 0] rg_fflags$D_IN;
  wire rg_fflags$EN;

  // register rg_frm
  reg [2 : 0] rg_frm;
  reg [2 : 0] rg_frm$D_IN;
  wire rg_frm$EN;

  // register rg_fs
  reg [1 : 0] rg_fs;
  reg [1 : 0] rg_fs$D_IN;
  wire rg_fs$EN;

  // register rg_medeleg
  reg [11 : 0] rg_medeleg;
  reg [11 : 0] rg_medeleg$D_IN;
  wire rg_medeleg$EN;

  // register rg_meie
  reg rg_meie;
  reg rg_meie$D_IN;
  wire rg_meie$EN;

  // register rg_mideleg
  reg [11 : 0] rg_mideleg;
  wire [11 : 0] rg_mideleg$D_IN;
  wire rg_mideleg$EN;

  // register rg_mie
  reg rg_mie;
  wire rg_mie$D_IN, rg_mie$EN;

  // register rg_mpie
  reg rg_mpie;
  wire rg_mpie$D_IN, rg_mpie$EN;

  // register rg_mpp
  reg [1 : 0] rg_mpp;
  wire [1 : 0] rg_mpp$D_IN;
  wire rg_mpp$EN;

  // register rg_mprv
  reg rg_mprv;
  reg rg_mprv$D_IN;
  wire rg_mprv$EN;

  // register rg_msie
  reg rg_msie;
  reg rg_msie$D_IN;
  wire rg_msie$EN;

  // register rg_mtie
  reg rg_mtie;
  wire rg_mtie$D_IN, rg_mtie$EN;

  // register rg_mtvec
  reg [29 : 0] rg_mtvec;
  reg [29 : 0] rg_mtvec$D_IN;
  wire rg_mtvec$EN;

  // register rg_mxr
  reg rg_mxr;
  reg rg_mxr$D_IN;
  wire rg_mxr$EN;

  // register rg_prv
  reg [1 : 0] rg_prv;
  wire [1 : 0] rg_prv$D_IN;
  wire rg_prv$EN;

  // register rg_pum
  reg rg_pum;
  reg rg_pum$D_IN;
  wire rg_pum$EN;

  // register rg_rx
  reg [8 : 0] rg_rx;
  wire [8 : 0] rg_rx$D_IN;
  wire rg_rx$EN;

  // register rg_tx
  reg [7 : 0] rg_tx;
  wire [7 : 0] rg_tx$D_IN;
  wire rg_tx$EN;

  // register rg_u_cy
  reg rg_u_cy;
  reg rg_u_cy$D_IN;
  wire rg_u_cy$EN;

  // register rg_u_ir
  reg rg_u_ir;
  reg rg_u_ir$D_IN;
  wire rg_u_ir$EN;

  // register rg_u_tm
  reg rg_u_tm;
  reg rg_u_tm$D_IN;
  wire rg_u_tm$EN;

  // register rg_ueie
  reg rg_ueie;
  reg rg_ueie$D_IN;
  wire rg_ueie$EN;

  // register rg_uie
  reg rg_uie;
  wire rg_uie$D_IN, rg_uie$EN;

  // register rg_upie
  reg rg_upie;
  wire rg_upie$D_IN, rg_upie$EN;

  // register rg_usie
  reg rg_usie;
  wire rg_usie$D_IN, rg_usie$EN;

  // register rg_usip
  reg rg_usip;
  wire rg_usip$D_IN, rg_usip$EN;

  // register rg_utie
  reg rg_utie;
  wire rg_utie$D_IN, rg_utie$EN;

  // register rg_utip
  reg rg_utip;
  wire rg_utip$D_IN, rg_utip$EN;

  // register rg_utvec
  reg [29 : 0] rg_utvec;
  wire [29 : 0] rg_utvec$D_IN;
  wire rg_utvec$EN;

  // register rg_vm
  reg [4 : 0] rg_vm;
  reg [4 : 0] rg_vm$D_IN;
  wire rg_vm$EN;

  // register uart_fifoRecv_countReg
  reg [1 : 0] uart_fifoRecv_countReg;
  wire [1 : 0] uart_fifoRecv_countReg$D_IN;
  wire uart_fifoRecv_countReg$EN;

  // register uart_fifoXmit_countReg
  reg [1 : 0] uart_fifoXmit_countReg;
  wire [1 : 0] uart_fifoXmit_countReg$D_IN;
  wire uart_fifoXmit_countReg$EN;

  // register uart_rRecvBitCount
  reg [3 : 0] uart_rRecvBitCount;
  wire [3 : 0] uart_rRecvBitCount$D_IN;
  wire uart_rRecvBitCount$EN;

  // register uart_rRecvCellCount
  reg [3 : 0] uart_rRecvCellCount;
  wire [3 : 0] uart_rRecvCellCount$D_IN;
  wire uart_rRecvCellCount$EN;

  // register uart_rRecvData
  reg uart_rRecvData;
  wire uart_rRecvData$D_IN, uart_rRecvData$EN;

  // register uart_rRecvParity
  reg uart_rRecvParity;
  wire uart_rRecvParity$D_IN, uart_rRecvParity$EN;

  // register uart_rRecvState
  reg [2 : 0] uart_rRecvState;
  reg [2 : 0] uart_rRecvState$D_IN;
  wire uart_rRecvState$EN;

  // register uart_rXmitBitCount
  reg [3 : 0] uart_rXmitBitCount;
  wire [3 : 0] uart_rXmitBitCount$D_IN;
  wire uart_rXmitBitCount$EN;

  // register uart_rXmitCellCount
  reg [3 : 0] uart_rXmitCellCount;
  wire [3 : 0] uart_rXmitCellCount$D_IN;
  wire uart_rXmitCellCount$EN;

  // register uart_rXmitDataOut
  reg uart_rXmitDataOut;
  reg uart_rXmitDataOut$D_IN;
  wire uart_rXmitDataOut$EN;

  // register uart_rXmitParity
  reg uart_rXmitParity;
  wire uart_rXmitParity$D_IN, uart_rXmitParity$EN;

  // register uart_rXmitState
  reg [2 : 0] uart_rXmitState;
  reg [2 : 0] uart_rXmitState$D_IN;
  wire uart_rXmitState$EN;

  // register uart_vrRecvBuffer_0
  reg uart_vrRecvBuffer_0;
  wire uart_vrRecvBuffer_0$D_IN, uart_vrRecvBuffer_0$EN;

  // register uart_vrRecvBuffer_1
  reg uart_vrRecvBuffer_1;
  wire uart_vrRecvBuffer_1$D_IN, uart_vrRecvBuffer_1$EN;

  // register uart_vrRecvBuffer_2
  reg uart_vrRecvBuffer_2;
  wire uart_vrRecvBuffer_2$D_IN, uart_vrRecvBuffer_2$EN;

  // register uart_vrRecvBuffer_3
  reg uart_vrRecvBuffer_3;
  wire uart_vrRecvBuffer_3$D_IN, uart_vrRecvBuffer_3$EN;

  // register uart_vrRecvBuffer_4
  reg uart_vrRecvBuffer_4;
  wire uart_vrRecvBuffer_4$D_IN, uart_vrRecvBuffer_4$EN;

  // register uart_vrRecvBuffer_5
  reg uart_vrRecvBuffer_5;
  wire uart_vrRecvBuffer_5$D_IN, uart_vrRecvBuffer_5$EN;

  // register uart_vrRecvBuffer_6
  reg uart_vrRecvBuffer_6;
  wire uart_vrRecvBuffer_6$D_IN, uart_vrRecvBuffer_6$EN;

  // register uart_vrRecvBuffer_7
  reg uart_vrRecvBuffer_7;
  wire uart_vrRecvBuffer_7$D_IN, uart_vrRecvBuffer_7$EN;

  // register uart_vrXmitBuffer_0
  reg uart_vrXmitBuffer_0;
  wire uart_vrXmitBuffer_0$D_IN, uart_vrXmitBuffer_0$EN;

  // register uart_vrXmitBuffer_1
  reg uart_vrXmitBuffer_1;
  wire uart_vrXmitBuffer_1$D_IN, uart_vrXmitBuffer_1$EN;

  // register uart_vrXmitBuffer_2
  reg uart_vrXmitBuffer_2;
  wire uart_vrXmitBuffer_2$D_IN, uart_vrXmitBuffer_2$EN;

  // register uart_vrXmitBuffer_3
  reg uart_vrXmitBuffer_3;
  wire uart_vrXmitBuffer_3$D_IN, uart_vrXmitBuffer_3$EN;

  // register uart_vrXmitBuffer_4
  reg uart_vrXmitBuffer_4;
  wire uart_vrXmitBuffer_4$D_IN, uart_vrXmitBuffer_4$EN;

  // register uart_vrXmitBuffer_5
  reg uart_vrXmitBuffer_5;
  wire uart_vrXmitBuffer_5$D_IN, uart_vrXmitBuffer_5$EN;

  // register uart_vrXmitBuffer_6
  reg uart_vrXmitBuffer_6;
  wire uart_vrXmitBuffer_6$D_IN, uart_vrXmitBuffer_6$EN;

  // register uart_vrXmitBuffer_7
  reg uart_vrXmitBuffer_7;
  wire uart_vrXmitBuffer_7$D_IN, uart_vrXmitBuffer_7$EN;

  // ports of submodule uart_baudGen_rBaudCounter
  wire [15 : 0] uart_baudGen_rBaudCounter$DATA_A,
		uart_baudGen_rBaudCounter$DATA_B,
		uart_baudGen_rBaudCounter$DATA_C,
		uart_baudGen_rBaudCounter$DATA_F,
		uart_baudGen_rBaudCounter$Q_OUT;
  wire uart_baudGen_rBaudCounter$ADDA,
       uart_baudGen_rBaudCounter$ADDB,
       uart_baudGen_rBaudCounter$SETC,
       uart_baudGen_rBaudCounter$SETF;

  // ports of submodule uart_baudGen_rBaudTickCounter
  wire [2 : 0] uart_baudGen_rBaudTickCounter$DATA_A,
	       uart_baudGen_rBaudTickCounter$DATA_B,
	       uart_baudGen_rBaudTickCounter$DATA_C,
	       uart_baudGen_rBaudTickCounter$DATA_F,
	       uart_baudGen_rBaudTickCounter$Q_OUT;
  wire uart_baudGen_rBaudTickCounter$ADDA,
       uart_baudGen_rBaudTickCounter$ADDB,
       uart_baudGen_rBaudTickCounter$SETC,
       uart_baudGen_rBaudTickCounter$SETF;

  // ports of submodule uart_fifoRecv
  wire [7 : 0] uart_fifoRecv$D_IN, uart_fifoRecv$D_OUT;
  wire uart_fifoRecv$CLR,
       uart_fifoRecv$DEQ,
       uart_fifoRecv$EMPTY_N,
       uart_fifoRecv$ENQ;

  // ports of submodule uart_fifoXmit
  wire [7 : 0] uart_fifoXmit$D_IN, uart_fifoXmit$D_OUT;
  wire uart_fifoXmit$CLR,
       uart_fifoXmit$DEQ,
       uart_fifoXmit$EMPTY_N,
       uart_fifoXmit$ENQ,
       uart_fifoXmit$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_increment_cycle_counter,
       CAN_FIRE_RL_send_transimission_data0,
       CAN_FIRE_RL_uart_baudGen_assert_2x_baud_tick,
       CAN_FIRE_RL_uart_baudGen_baud_count_wire,
       CAN_FIRE_RL_uart_baudGen_baud_tick_count_wire,
       CAN_FIRE_RL_uart_baudGen_count_baudtick_16x,
       CAN_FIRE_RL_uart_baud_generator_clock_enable,
       CAN_FIRE_RL_uart_fifoRecv__updateLevelCounter,
       CAN_FIRE_RL_uart_fifoXmit__updateLevelCounter,
       CAN_FIRE_RL_uart_receive_bit_cell_time_counter,
       CAN_FIRE_RL_uart_receive_bit_counter,
       CAN_FIRE_RL_uart_receive_buffer_shift,
       CAN_FIRE_RL_uart_receive_find_center_of_bit_cell,
       CAN_FIRE_RL_uart_receive_parity_bit,
       CAN_FIRE_RL_uart_receive_sample_pin,
       CAN_FIRE_RL_uart_receive_stop_first_bit,
       CAN_FIRE_RL_uart_receive_stop_last_bit,
       CAN_FIRE_RL_uart_receive_wait_bit_cell_time_for_sample,
       CAN_FIRE_RL_uart_receive_wait_for_start_bit,
       CAN_FIRE_RL_uart_rx_connectionif,
       CAN_FIRE_RL_uart_transmit_bit_cell_time_counter,
       CAN_FIRE_RL_uart_transmit_bit_counter,
       CAN_FIRE_RL_uart_transmit_buffer_load,
       CAN_FIRE_RL_uart_transmit_buffer_shift,
       CAN_FIRE_RL_uart_transmit_send_parity_bit,
       CAN_FIRE_RL_uart_transmit_send_start_bit,
       CAN_FIRE_RL_uart_transmit_send_stop_bit,
       CAN_FIRE_RL_uart_transmit_send_stop_bit1_5,
       CAN_FIRE_RL_uart_transmit_send_stop_bit2,
       CAN_FIRE_RL_uart_transmit_shift_next_bit,
       CAN_FIRE_RL_uart_transmit_wait_1_bit_cell_time,
       CAN_FIRE_RL_uart_transmit_wait_for_start_command,
       CAN_FIRE_RL_uart_tx_connection,
       CAN_FIRE_csr_access,
       CAN_FIRE_mtip,
       CAN_FIRE_sin,
       WILL_FIRE_RL_increment_cycle_counter,
       WILL_FIRE_RL_send_transimission_data0,
       WILL_FIRE_RL_uart_baudGen_assert_2x_baud_tick,
       WILL_FIRE_RL_uart_baudGen_baud_count_wire,
       WILL_FIRE_RL_uart_baudGen_baud_tick_count_wire,
       WILL_FIRE_RL_uart_baudGen_count_baudtick_16x,
       WILL_FIRE_RL_uart_baud_generator_clock_enable,
       WILL_FIRE_RL_uart_fifoRecv__updateLevelCounter,
       WILL_FIRE_RL_uart_fifoXmit__updateLevelCounter,
       WILL_FIRE_RL_uart_receive_bit_cell_time_counter,
       WILL_FIRE_RL_uart_receive_bit_counter,
       WILL_FIRE_RL_uart_receive_buffer_shift,
       WILL_FIRE_RL_uart_receive_find_center_of_bit_cell,
       WILL_FIRE_RL_uart_receive_parity_bit,
       WILL_FIRE_RL_uart_receive_sample_pin,
       WILL_FIRE_RL_uart_receive_stop_first_bit,
       WILL_FIRE_RL_uart_receive_stop_last_bit,
       WILL_FIRE_RL_uart_receive_wait_bit_cell_time_for_sample,
       WILL_FIRE_RL_uart_receive_wait_for_start_bit,
       WILL_FIRE_RL_uart_rx_connectionif,
       WILL_FIRE_RL_uart_transmit_bit_cell_time_counter,
       WILL_FIRE_RL_uart_transmit_bit_counter,
       WILL_FIRE_RL_uart_transmit_buffer_load,
       WILL_FIRE_RL_uart_transmit_buffer_shift,
       WILL_FIRE_RL_uart_transmit_send_parity_bit,
       WILL_FIRE_RL_uart_transmit_send_start_bit,
       WILL_FIRE_RL_uart_transmit_send_stop_bit,
       WILL_FIRE_RL_uart_transmit_send_stop_bit1_5,
       WILL_FIRE_RL_uart_transmit_send_stop_bit2,
       WILL_FIRE_RL_uart_transmit_shift_next_bit,
       WILL_FIRE_RL_uart_transmit_wait_1_bit_cell_time,
       WILL_FIRE_RL_uart_transmit_wait_for_start_command,
       WILL_FIRE_RL_uart_tx_connection,
       WILL_FIRE_csr_access,
       WILL_FIRE_mtip,
       WILL_FIRE_sin;

  // inputs to muxes for submodule ports
  reg [2 : 0] MUX_uart_rRecvState$write_1__VAL_3;
  wire [2 : 0] MUX_uart_rRecvState$write_1__VAL_1,
	       MUX_uart_rRecvState$write_1__VAL_2,
	       MUX_uart_rRecvState$write_1__VAL_4,
	       MUX_uart_rXmitState$write_1__VAL_1,
	       MUX_uart_rXmitState$write_1__VAL_2,
	       MUX_uart_rXmitState$write_1__VAL_3,
	       MUX_uart_rXmitState$write_1__VAL_4,
	       MUX_uart_rXmitState$write_1__VAL_5,
	       MUX_uart_rXmitState$write_1__VAL_6,
	       MUX_uart_rXmitState$write_1__VAL_7;
  wire MUX_uart_rRecvState$write_1__SEL_6,
       MUX_uart_rXmitDataOut$write_1__SEL_1,
       MUX_uart_rXmitDataOut$write_1__SEL_2,
       MUX_uart_rXmitDataOut$write_1__SEL_3;

  // remaining internal signals
  reg [63 : 0] v__h13489,
	       v__h13754,
	       v__h14267,
	       v__h15270,
	       v__h15962,
	       v__h17046,
	       v__h17453,
	       v__h17494;
  reg [31 : 0] IF_csr_access_data_BITS_24_TO_22_74_EQ_1_83_TH_ETC___d766,
	       csr__read__h18075,
	       x1_avValue_address__h18845;
  reg [3 : 0] CASE_csr_access_data_BITS_104_TO_101_0_csr_acc_ETC__q11,
	      CASE_csr_access_data_BITS_104_TO_101_0_csr_acc_ETC__q3,
	      CASE_csr_access_data_BITS_21_TO_10_0x0_IF_rg_p_ETC__q4;
  reg [1 : 0] CASE_csr_access_data_BITS_21_TO_10_0x0_0_0x1_0_ETC__q9,
	      CASE_csr_access_data_BITS_21_TO_10_0x0_0_CONCA_ETC__q10,
	      CASE_csr_access_data_BITS_21_TO_10_0x0_0_CONCA_ETC__q5,
	      CASE_csr_access_data_BITS_21_TO_10_0x0_csr_acc_ETC__q6,
	      CASE_csr_access_data_BITS_21_TO_10_0x0_csr_acc_ETC__q7,
	      CASE_csr_access_data_BITS_21_TO_10_0x0_csr_acc_ETC__q8,
	      IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d979;
  reg IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d866,
      IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d962,
      IF_csr_access_data_BITS_24_TO_22_74_EQ_1_83_TH_ETC___d1012,
      IF_csr_access_data_BITS_24_TO_22_74_EQ_1_83_TH_ETC___d991;
  wire [31 : 0] _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761,
		_0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760,
		cause__h15997,
		csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758,
		csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756,
		csr_fcsr__read__h17758,
		csr_fflags__read__h17750,
		csr_frm__read__h17742,
		csr_mideleg__read4219_SRL_IF_IF_rg_mie_75_OR_r_ETC__q2,
		csr_mideleg__read__h14219,
		csr_mie__read__h14164,
		csr_mip__read__h14065,
		csr_mstatus__read__h17875,
		csr_mtvec__read__h17897,
		csr_mucounteren__read__h18010,
		csr_uartrx__read__h18029,
		csr_uarttx__read__h18018,
		csr_uie__read__h17653,
		csr_uip__read__h17734,
		csr_ustatus__read__h17600,
		csr_utvec__read__h17663,
		x1_avValue_address__h17003,
		x1_avValue_address__h37445,
		x1_avValue_address__h37461,
		x6060_SRL_y6061__q1,
		x__h13927,
		x__h16060,
		x__h37496,
		x_port1__read__h17968,
		x_port1__read__h17981,
		x_port1__read__h17994,
		y__h25620;
  wire [30 : 0] _theResult_____3_fst__h16268,
		r1__read__h14067,
		r1__read__h14166,
		r1__read__h18077,
		r1__read__h18158,
		r1__read__h18207,
		r1__read__h18333,
		r1__read__h18398;
  wire [29 : 0] r1__read__h14069,
		r1__read__h14168,
		r1__read__h18079,
		r1__read__h18160,
		r1__read__h18209,
		r1__read__h18335,
		r1__read__h18400,
		x__h29171;
  wire [28 : 0] r1__read__h14071,
		r1__read__h14170,
		r1__read__h18081,
		r1__read__h18162,
		r1__read__h18211,
		r1__read__h18337;
  wire [27 : 0] r1__read__h14073,
		r1__read__h14172,
		r1__read__h18083,
		r1__read__h18164,
		r1__read__h18213,
		r1__read__h18339;
  wire [26 : 0] r1__read__h14075,
		r1__read__h14174,
		r1__read__h18085,
		r1__read__h18166,
		r1__read__h18215,
		r1__read__h18290,
		r1__read__h18341;
  wire [25 : 0] r1__read__h14077,
		r1__read__h14176,
		r1__read__h18087,
		r1__read__h18168,
		r1__read__h18217,
		r1__read__h18343;
  wire [24 : 0] r1__read__h14079,
		r1__read__h14178,
		r1__read__h18089,
		r1__read__h18170,
		r1__read__h18219,
		r1__read__h18345;
  wire [23 : 0] r1__read__h14081,
		r1__read__h14180,
		r1__read__h18091,
		r1__read__h18172,
		r1__read__h18221,
		r1__read__h18347,
		r1__read__h18418;
  wire [22 : 0] r1__read__h14083,
		r1__read__h14182,
		r1__read__h18093,
		r1__read__h18349;
  wire [21 : 0] r1__read__h14085, r1__read__h14184, r1__read__h18095;
  wire [20 : 0] r1__read__h14087,
		r1__read__h14186,
		r1__read__h18097,
		r1__read__h18351;
  wire [18 : 0] r1__read__h18099, r1__read__h18353;
  wire [16 : 0] r1__read__h18101, r1__read__h18355;
  wire [15 : 0] r1__read__h18103;
  wire [14 : 0] r1__read__h18105, r1__read__h18357;
  wire [13 : 0] r1__read__h18107, r1__read__h18359;
  wire [12 : 0] r1__read__h18361;
  wire [11 : 0] pending_interrupts__h13955,
		pending_interrupts__h13960,
		pending_machine_interrupts__h13956,
		pending_user_interrupts__h13958,
		r1__read__h18363,
		x__h31003,
		y__h14016;
  wire [9 : 0] r1__read__h18109;
  wire [7 : 0] meip_AND_rg_meie_79_80_CONCAT_0_81_CONCAT_0_CO_ETC___d194,
	       r1__read__h18365,
	       x1__h30838;
  wire [4 : 0] r1__read__h18111, x1__h17287, x_port1__read__h18277;
  wire [3 : 0] IF_IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_m_ETC___d272,
	       IF_csr_access_data_BIT_105_10_THEN_IF_csr_acce_ETC___d793,
	       x__h5899,
	       x__h7540,
	       x__h9355,
	       x__h9381,
	       y__h16061;
  wire [2 : 0] r1__read__h18367;
  wire [1 : 0] IF_rg_prv_76_EQ_0_77_THEN_rg_prv_76_ELSE_3___d427;
  wire IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d439,
       IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555,
       IF_csr_access_data_BITS_24_TO_22_74_EQ_6_92_TH_ETC___d1054,
       IF_csr_access_data_BITS_24_TO_22_74_EQ_6_92_TH_ETC___d1074,
       IF_csr_access_data_BITS_24_TO_22_74_EQ_6_92_TH_ETC___d1089,
       IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1001,
       IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1018,
       IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1121,
       IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1164,
       IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1191,
       IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1220,
       IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1245,
       IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1271,
       IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1319,
       IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1346,
       IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1363,
       IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1391,
       IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1408,
       IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1435,
       IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1452,
       IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1469,
       IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1486,
       IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1503,
       IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1520,
       IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1537,
       IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1554,
       IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1571,
       IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1588,
       IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1605,
       IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1622,
       IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1639,
       IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1656,
       IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1695,
       IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d575,
       IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d784,
       IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d824,
       IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d889,
       IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d907,
       IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d927,
       IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d949,
       IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d967,
       IF_rg_prv_76_EQ_0_77_THEN_rg_prv_76_ELSE_3_27__ETC___d429,
       NOT_IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN__ETC___d446,
       NOT_IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN__ETC___d486,
       NOT_IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN__ETC___d872,
       NOT_csr_access_data_BITS_4_TO_0_717_OR_rg_ffla_ETC___d1721,
       NOT_csr_access_data_BITS_9_TO_5_30_EQ_0_31_32__ETC___d844,
       NOT_csr_access_data_BITS_9_TO_5_30_EQ_0_31_32__ETC___d945,
       NOT_rg_prv_76_EQ_0_77_88_OR_IF_IF_rg_mie_75_OR_ETC___d871,
       _dor2uart_pwXmitCellCountReset$EN_wset,
       csr_access_data_BITS_24_TO_22_74_EQ_0_75_AND_c_ETC___d846,
       csr_access_data_BIT_105_10_OR_csr_access_data__ETC___d825,
       csr_access_data_BIT_105_10_OR_csr_access_data__ETC___d928,
       r__h14100,
       r__h18114,
       rg_prv_76_EQ_0_77_AND_IF_IF_rg_mie_75_OR_rg_pr_ETC___d479,
       uart_baudGen_rBaudCounter_value_PLUS_1_8_ULT_130___d29,
       x__h16955,
       z__h10769,
       z__h10776,
       z__h10783,
       z__h10790,
       z__h10797,
       z__h10804;

  // actionvalue method csr_access
  assign csr_access =
	     { x__h13927,
	       NOT_IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN__ETC___d446,
	       x__h37496 } ;
  assign RDY_csr_access = 1'd1 ;
  assign CAN_FIRE_csr_access = 1'd1 ;
  assign WILL_FIRE_csr_access = EN_csr_access ;

  // action method sin
  assign RDY_sin = 1'd1 ;
  assign CAN_FIRE_sin = 1'd1 ;
  assign WILL_FIRE_sin = EN_sin ;

  // value method sout
  assign sout = uart_rXmitDataOut ;
  assign RDY_sout = 1'd1 ;

  // action method mtip
  assign RDY_mtip = 1'd1 ;
  assign CAN_FIRE_mtip = 1'd1 ;
  assign WILL_FIRE_mtip = EN_mtip ;

  // submodule uart_baudGen_rBaudCounter
  Counter #(.width(32'd16), .init(16'd0)) uart_baudGen_rBaudCounter(.CLK(CLK),
								    .RST(RST_N),
								    .DATA_A(uart_baudGen_rBaudCounter$DATA_A),
								    .DATA_B(uart_baudGen_rBaudCounter$DATA_B),
								    .DATA_C(uart_baudGen_rBaudCounter$DATA_C),
								    .DATA_F(uart_baudGen_rBaudCounter$DATA_F),
								    .ADDA(uart_baudGen_rBaudCounter$ADDA),
								    .ADDB(uart_baudGen_rBaudCounter$ADDB),
								    .SETC(uart_baudGen_rBaudCounter$SETC),
								    .SETF(uart_baudGen_rBaudCounter$SETF),
								    .Q_OUT(uart_baudGen_rBaudCounter$Q_OUT));

  // submodule uart_baudGen_rBaudTickCounter
  Counter #(.width(32'd3),
	    .init(3'd0)) uart_baudGen_rBaudTickCounter(.CLK(CLK),
						       .RST(RST_N),
						       .DATA_A(uart_baudGen_rBaudTickCounter$DATA_A),
						       .DATA_B(uart_baudGen_rBaudTickCounter$DATA_B),
						       .DATA_C(uart_baudGen_rBaudTickCounter$DATA_C),
						       .DATA_F(uart_baudGen_rBaudTickCounter$DATA_F),
						       .ADDA(uart_baudGen_rBaudTickCounter$ADDA),
						       .ADDB(uart_baudGen_rBaudTickCounter$ADDB),
						       .SETC(uart_baudGen_rBaudTickCounter$SETC),
						       .SETF(uart_baudGen_rBaudTickCounter$SETF),
						       .Q_OUT(uart_baudGen_rBaudTickCounter$Q_OUT));

  // submodule uart_fifoRecv
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) uart_fifoRecv(.RST(RST_N),
					     .CLK(CLK),
					     .D_IN(uart_fifoRecv$D_IN),
					     .ENQ(uart_fifoRecv$ENQ),
					     .DEQ(uart_fifoRecv$DEQ),
					     .CLR(uart_fifoRecv$CLR),
					     .D_OUT(uart_fifoRecv$D_OUT),
					     .FULL_N(),
					     .EMPTY_N(uart_fifoRecv$EMPTY_N));

  // submodule uart_fifoXmit
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) uart_fifoXmit(.RST(RST_N),
					     .CLK(CLK),
					     .D_IN(uart_fifoXmit$D_IN),
					     .ENQ(uart_fifoXmit$ENQ),
					     .DEQ(uart_fifoXmit$DEQ),
					     .CLR(uart_fifoXmit$CLR),
					     .D_OUT(uart_fifoXmit$D_OUT),
					     .FULL_N(uart_fifoXmit$FULL_N),
					     .EMPTY_N(uart_fifoXmit$EMPTY_N));

  // rule RL_uart_tx_connection
  assign CAN_FIRE_RL_uart_tx_connection = 1'd1 ;
  assign WILL_FIRE_RL_uart_tx_connection = 1'd1 ;

  // rule RL_increment_cycle_counter
  assign CAN_FIRE_RL_increment_cycle_counter = 1'd1 ;
  assign WILL_FIRE_RL_increment_cycle_counter = 1'd1 ;

  // rule RL_uart_rx_connectionif
  assign CAN_FIRE_RL_uart_rx_connectionif =
	     uart_fifoRecv$EMPTY_N && !rg_rx$port1__read[8] ;
  assign WILL_FIRE_RL_uart_rx_connectionif =
	     CAN_FIRE_RL_uart_rx_connectionif ;

  // rule RL_uart_baudGen_baud_count_wire
  assign CAN_FIRE_RL_uart_baudGen_baud_count_wire = 1'd1 ;
  assign WILL_FIRE_RL_uart_baudGen_baud_count_wire = 1'd1 ;

  // rule RL_uart_baud_generator_clock_enable
  assign CAN_FIRE_RL_uart_baud_generator_clock_enable = 1'd1 ;
  assign WILL_FIRE_RL_uart_baud_generator_clock_enable = 1'd1 ;

  // rule RL_uart_receive_wait_for_start_bit
  assign CAN_FIRE_RL_uart_receive_wait_for_start_bit =
	     uart_rRecvState == 3'd0 &&
	     !uart_baudGen_rBaudCounter_value_PLUS_1_8_ULT_130___d29 ;
  assign WILL_FIRE_RL_uart_receive_wait_for_start_bit =
	     CAN_FIRE_RL_uart_receive_wait_for_start_bit ;

  // rule RL_uart_receive_find_center_of_bit_cell
  assign CAN_FIRE_RL_uart_receive_find_center_of_bit_cell =
	     uart_rRecvState == 3'd1 &&
	     !uart_baudGen_rBaudCounter_value_PLUS_1_8_ULT_130___d29 ;
  assign WILL_FIRE_RL_uart_receive_find_center_of_bit_cell =
	     CAN_FIRE_RL_uart_receive_find_center_of_bit_cell ;

  // rule RL_uart_receive_wait_bit_cell_time_for_sample
  assign CAN_FIRE_RL_uart_receive_wait_bit_cell_time_for_sample =
	     uart_rRecvState == 3'd2 && uart_rRecvCellCount == 4'hF &&
	     !uart_baudGen_rBaudCounter_value_PLUS_1_8_ULT_130___d29 ;
  assign WILL_FIRE_RL_uart_receive_wait_bit_cell_time_for_sample =
	     CAN_FIRE_RL_uart_receive_wait_bit_cell_time_for_sample ;

  // rule RL_uart_receive_sample_pin
  assign CAN_FIRE_RL_uart_receive_sample_pin =
	     CAN_FIRE_RL_uart_receive_buffer_shift ;
  assign WILL_FIRE_RL_uart_receive_sample_pin =
	     CAN_FIRE_RL_uart_receive_buffer_shift ;

  // rule RL_uart_receive_parity_bit
  assign CAN_FIRE_RL_uart_receive_parity_bit =
	     uart_rRecvState == 3'd4 &&
	     !uart_baudGen_rBaudCounter_value_PLUS_1_8_ULT_130___d29 ;
  assign WILL_FIRE_RL_uart_receive_parity_bit =
	     CAN_FIRE_RL_uart_receive_parity_bit ;

  // rule RL_uart_receive_stop_first_bit
  assign CAN_FIRE_RL_uart_receive_stop_first_bit =
	     uart_rRecvState == 3'd5 &&
	     !uart_baudGen_rBaudCounter_value_PLUS_1_8_ULT_130___d29 ;
  assign WILL_FIRE_RL_uart_receive_stop_first_bit =
	     CAN_FIRE_RL_uart_receive_stop_first_bit ;

  // rule RL_uart_receive_stop_last_bit
  assign CAN_FIRE_RL_uart_receive_stop_last_bit =
	     uart_rRecvState == 3'd6 &&
	     !uart_baudGen_rBaudCounter_value_PLUS_1_8_ULT_130___d29 ;
  assign WILL_FIRE_RL_uart_receive_stop_last_bit =
	     CAN_FIRE_RL_uart_receive_stop_last_bit ;

  // rule RL_uart_receive_bit_cell_time_counter
  assign CAN_FIRE_RL_uart_receive_bit_cell_time_counter =
	     CAN_FIRE_RL_uart_baudGen_count_baudtick_16x ;
  assign WILL_FIRE_RL_uart_receive_bit_cell_time_counter =
	     CAN_FIRE_RL_uart_baudGen_count_baudtick_16x ;

  // rule RL_uart_receive_buffer_shift
  assign CAN_FIRE_RL_uart_receive_buffer_shift =
	     uart_rRecvState == 3'd3 &&
	     !uart_baudGen_rBaudCounter_value_PLUS_1_8_ULT_130___d29 ;
  assign WILL_FIRE_RL_uart_receive_buffer_shift =
	     CAN_FIRE_RL_uart_receive_buffer_shift ;

  // rule RL_uart_receive_bit_counter
  assign CAN_FIRE_RL_uart_receive_bit_counter = 1'd1 ;
  assign WILL_FIRE_RL_uart_receive_bit_counter = 1'd1 ;

  // rule RL_uart_transmit_wait_for_start_command
  assign CAN_FIRE_RL_uart_transmit_wait_for_start_command =
	     uart_rXmitState == 3'd0 &&
	     !uart_baudGen_rBaudCounter_value_PLUS_1_8_ULT_130___d29 ;
  assign WILL_FIRE_RL_uart_transmit_wait_for_start_command =
	     CAN_FIRE_RL_uart_transmit_wait_for_start_command ;

  // rule RL_send_transimission_data0
  assign CAN_FIRE_RL_send_transimission_data0 =
	     uart_fifoXmit$FULL_N && wr_send_to_uart$whas ;
  assign WILL_FIRE_RL_send_transimission_data0 =
	     CAN_FIRE_RL_send_transimission_data0 ;

  // rule RL_uart_transmit_send_start_bit
  assign CAN_FIRE_RL_uart_transmit_send_start_bit =
	     uart_rXmitState == 3'd1 &&
	     !uart_baudGen_rBaudCounter_value_PLUS_1_8_ULT_130___d29 ;
  assign WILL_FIRE_RL_uart_transmit_send_start_bit =
	     CAN_FIRE_RL_uart_transmit_send_start_bit ;

  // rule RL_uart_transmit_wait_1_bit_cell_time
  assign CAN_FIRE_RL_uart_transmit_wait_1_bit_cell_time =
	     uart_rXmitState == 3'd2 &&
	     !uart_baudGen_rBaudCounter_value_PLUS_1_8_ULT_130___d29 ;
  assign WILL_FIRE_RL_uart_transmit_wait_1_bit_cell_time =
	     CAN_FIRE_RL_uart_transmit_wait_1_bit_cell_time ;

  // rule RL_uart_transmit_bit_counter
  assign CAN_FIRE_RL_uart_transmit_bit_counter = 1'd1 ;
  assign WILL_FIRE_RL_uart_transmit_bit_counter = 1'd1 ;

  // rule RL_uart_transmit_shift_next_bit
  assign CAN_FIRE_RL_uart_transmit_shift_next_bit =
	     uart_rXmitState == 3'd3 &&
	     !uart_baudGen_rBaudCounter_value_PLUS_1_8_ULT_130___d29 ;
  assign WILL_FIRE_RL_uart_transmit_shift_next_bit =
	     CAN_FIRE_RL_uart_transmit_shift_next_bit ;

  // rule RL_uart_transmit_buffer_load
  assign CAN_FIRE_RL_uart_transmit_buffer_load =
	     uart_fifoXmit$EMPTY_N && uart_pwXmitLoadBuffer$whas ;
  assign WILL_FIRE_RL_uart_transmit_buffer_load =
	     CAN_FIRE_RL_uart_transmit_buffer_load ;

  // rule RL_uart_transmit_buffer_shift
  assign CAN_FIRE_RL_uart_transmit_buffer_shift =
	     !uart_pwXmitLoadBuffer$whas &&
	     CAN_FIRE_RL_uart_transmit_shift_next_bit ;
  assign WILL_FIRE_RL_uart_transmit_buffer_shift =
	     CAN_FIRE_RL_uart_transmit_buffer_shift ;

  // rule RL_uart_transmit_send_parity_bit
  assign CAN_FIRE_RL_uart_transmit_send_parity_bit =
	     uart_rXmitState == 3'd7 &&
	     !uart_baudGen_rBaudCounter_value_PLUS_1_8_ULT_130___d29 ;
  assign WILL_FIRE_RL_uart_transmit_send_parity_bit =
	     CAN_FIRE_RL_uart_transmit_send_parity_bit ;

  // rule RL_uart_transmit_send_stop_bit
  assign CAN_FIRE_RL_uart_transmit_send_stop_bit =
	     uart_rXmitState == 3'd4 &&
	     !uart_baudGen_rBaudCounter_value_PLUS_1_8_ULT_130___d29 ;
  assign WILL_FIRE_RL_uart_transmit_send_stop_bit =
	     CAN_FIRE_RL_uart_transmit_send_stop_bit ;

  // rule RL_uart_transmit_send_stop_bit1_5
  assign CAN_FIRE_RL_uart_transmit_send_stop_bit1_5 =
	     uart_rXmitState == 3'd5 &&
	     !uart_baudGen_rBaudCounter_value_PLUS_1_8_ULT_130___d29 ;
  assign WILL_FIRE_RL_uart_transmit_send_stop_bit1_5 =
	     CAN_FIRE_RL_uart_transmit_send_stop_bit1_5 ;

  // rule RL_uart_transmit_send_stop_bit2
  assign CAN_FIRE_RL_uart_transmit_send_stop_bit2 =
	     uart_rXmitState == 3'd6 &&
	     !uart_baudGen_rBaudCounter_value_PLUS_1_8_ULT_130___d29 ;
  assign WILL_FIRE_RL_uart_transmit_send_stop_bit2 =
	     CAN_FIRE_RL_uart_transmit_send_stop_bit2 ;

  // rule RL_uart_transmit_bit_cell_time_counter
  assign CAN_FIRE_RL_uart_transmit_bit_cell_time_counter =
	     CAN_FIRE_RL_uart_baudGen_count_baudtick_16x ;
  assign WILL_FIRE_RL_uart_transmit_bit_cell_time_counter =
	     CAN_FIRE_RL_uart_baudGen_count_baudtick_16x ;

  // rule RL_uart_baudGen_baud_tick_count_wire
  assign CAN_FIRE_RL_uart_baudGen_baud_tick_count_wire = 1'd1 ;
  assign WILL_FIRE_RL_uart_baudGen_baud_tick_count_wire = 1'd1 ;

  // rule RL_uart_baudGen_assert_2x_baud_tick
  assign CAN_FIRE_RL_uart_baudGen_assert_2x_baud_tick =
	     uart_baudGen_rBaudTickCounter$Q_OUT == 3'd0 &&
	     !uart_baudGen_rBaudCounter_value_PLUS_1_8_ULT_130___d29 ;
  assign WILL_FIRE_RL_uart_baudGen_assert_2x_baud_tick =
	     CAN_FIRE_RL_uart_baudGen_assert_2x_baud_tick ;

  // rule RL_uart_baudGen_count_baudtick_16x
  assign CAN_FIRE_RL_uart_baudGen_count_baudtick_16x =
	     !uart_baudGen_rBaudCounter_value_PLUS_1_8_ULT_130___d29 ;
  assign WILL_FIRE_RL_uart_baudGen_count_baudtick_16x =
	     CAN_FIRE_RL_uart_baudGen_count_baudtick_16x ;

  // rule RL_uart_fifoRecv__updateLevelCounter
  assign CAN_FIRE_RL_uart_fifoRecv__updateLevelCounter =
	     CAN_FIRE_RL_uart_receive_stop_last_bit !=
	     CAN_FIRE_RL_uart_rx_connectionif ;
  assign WILL_FIRE_RL_uart_fifoRecv__updateLevelCounter =
	     CAN_FIRE_RL_uart_fifoRecv__updateLevelCounter ;

  // rule RL_uart_fifoXmit__updateLevelCounter
  assign CAN_FIRE_RL_uart_fifoXmit__updateLevelCounter =
	     CAN_FIRE_RL_send_transimission_data0 !=
	     CAN_FIRE_RL_uart_transmit_buffer_load ;
  assign WILL_FIRE_RL_uart_fifoXmit__updateLevelCounter =
	     CAN_FIRE_RL_uart_fifoXmit__updateLevelCounter ;

  // inputs to muxes for submodule ports
  assign MUX_uart_rRecvState$write_1__SEL_6 =
	     WILL_FIRE_RL_uart_receive_parity_bit ||
	     WILL_FIRE_RL_uart_receive_sample_pin ;
  assign MUX_uart_rXmitDataOut$write_1__SEL_1 =
	     WILL_FIRE_RL_uart_transmit_shift_next_bit ||
	     WILL_FIRE_RL_uart_transmit_wait_1_bit_cell_time ;
  assign MUX_uart_rXmitDataOut$write_1__SEL_2 =
	     WILL_FIRE_RL_uart_transmit_send_parity_bit ||
	     WILL_FIRE_RL_uart_transmit_send_start_bit ;
  assign MUX_uart_rXmitDataOut$write_1__SEL_3 =
	     WILL_FIRE_RL_uart_transmit_send_stop_bit2 ||
	     WILL_FIRE_RL_uart_transmit_send_stop_bit1_5 ||
	     WILL_FIRE_RL_uart_transmit_send_stop_bit ||
	     WILL_FIRE_RL_uart_transmit_wait_for_start_command ;
  assign MUX_uart_rRecvState$write_1__VAL_1 = uart_rRecvData ? 3'd0 : 3'd1 ;
  assign MUX_uart_rRecvState$write_1__VAL_2 =
	     (uart_rRecvCellCount == 4'h4) ?
	       (uart_rRecvData ? 3'd0 : 3'd2) :
	       3'd1 ;
  always@(uart_rRecvBitCount)
  begin
    case (uart_rRecvBitCount)
      4'd8, 4'd9, 4'd10: MUX_uart_rRecvState$write_1__VAL_3 = 3'd6;
      default: MUX_uart_rRecvState$write_1__VAL_3 = 3'd3;
    endcase
  end
  assign MUX_uart_rRecvState$write_1__VAL_4 = uart_rRecvData ? 3'd2 : 3'd0 ;
  assign MUX_uart_rXmitState$write_1__VAL_1 =
	     uart_fifoXmit$EMPTY_N ? 3'd1 : 3'd0 ;
  assign MUX_uart_rXmitState$write_1__VAL_2 =
	     (uart_rXmitCellCount == 4'hF) ? 3'd2 : 3'd1 ;
  assign MUX_uart_rXmitState$write_1__VAL_3 =
	     (uart_rXmitCellCount == 4'hF) ?
	       ((uart_rXmitBitCount == 4'd7) ? 3'd4 : 3'd3) :
	       3'd2 ;
  assign MUX_uart_rXmitState$write_1__VAL_4 =
	     (uart_rXmitCellCount == 4'hF) ? 3'd4 : 3'd7 ;
  assign MUX_uart_rXmitState$write_1__VAL_5 =
	     (uart_rXmitCellCount == 4'hF) ? 3'd0 : 3'd4 ;
  assign MUX_uart_rXmitState$write_1__VAL_6 =
	     (uart_rXmitCellCount == 4'h7) ? 3'd0 : 3'd5 ;
  assign MUX_uart_rXmitState$write_1__VAL_7 =
	     (uart_rXmitCellCount == 4'hF) ? 3'd0 : 3'd6 ;

  // inlined wires
  assign wr_send_to_uart$whas =
	     EN_csr_access &&
	     IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1695 ;
  assign uart_pwRecvCellCountReset$whas =
	     WILL_FIRE_RL_uart_receive_find_center_of_bit_cell &&
	     uart_rRecvCellCount == 4'h4 ||
	     WILL_FIRE_RL_uart_receive_stop_last_bit ||
	     WILL_FIRE_RL_uart_receive_stop_first_bit ||
	     WILL_FIRE_RL_uart_receive_parity_bit ||
	     WILL_FIRE_RL_uart_receive_sample_pin ||
	     WILL_FIRE_RL_uart_receive_wait_bit_cell_time_for_sample ||
	     WILL_FIRE_RL_uart_receive_wait_for_start_bit ;
  assign uart_pwRecvResetBitCount$whas =
	     WILL_FIRE_RL_uart_receive_wait_for_start_bit && uart_rRecvData ||
	     WILL_FIRE_RL_uart_receive_stop_last_bit ;
  assign uart_pwRecvEnableBitCount$whas =
	     WILL_FIRE_RL_uart_receive_stop_first_bit ||
	     WILL_FIRE_RL_uart_receive_parity_bit ||
	     WILL_FIRE_RL_uart_receive_sample_pin ;
  assign uart_pwXmitCellCountReset$whas =
	     WILL_FIRE_RL_uart_transmit_wait_for_start_command &&
	     uart_fifoXmit$EMPTY_N ||
	     _dor2uart_pwXmitCellCountReset$EN_wset &&
	     uart_rXmitCellCount == 4'hF ||
	     WILL_FIRE_RL_uart_transmit_send_stop_bit1_5 &&
	     uart_rXmitCellCount == 4'h7 ;
  assign uart_pwXmitEnableBitCount$whas =
	     WILL_FIRE_RL_uart_transmit_wait_1_bit_cell_time &&
	     uart_rXmitCellCount == 4'hF &&
	     uart_rXmitBitCount != 4'd7 ;
  assign uart_pwXmitLoadBuffer$whas =
	     WILL_FIRE_RL_uart_transmit_wait_for_start_command &&
	     uart_fifoXmit$EMPTY_N ;
  assign csr_mcycle$port0__write_1 = csr_mcycle + 32'd1 ;
  assign csr_mcycle$EN_port1__write =
	     EN_csr_access &&
	     IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1588 ;
  assign csr_mcycle$port2__read =
	     csr_mcycle$EN_port1__write ?
	       IF_csr_access_data_BITS_24_TO_22_74_EQ_1_83_TH_ETC___d766 :
	       csr_mcycle$port0__write_1 ;
  assign csr_mcycleh$port0__write_1 = csr_mcycleh + 32'd1 ;
  assign csr_mcycleh$EN_port1__write =
	     EN_csr_access &&
	     IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1622 ;
  assign csr_mcycleh$port2__read =
	     csr_mcycleh$EN_port1__write ?
	       IF_csr_access_data_BITS_24_TO_22_74_EQ_1_83_TH_ETC___d766 :
	       x_port1__read__h17981 ;
  assign csr_minstret$EN_port0__write =
	     EN_csr_access && pending_interrupts__h13960 == 12'd0 &&
	     !csr_access_data[105] &&
	     !csr_access_data[106] ;
  assign csr_minstret$port0__write_1 = csr_minstret + 32'd1 ;
  assign csr_minstret$EN_port1__write =
	     EN_csr_access &&
	     IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1605 ;
  assign csr_minstret$port2__read =
	     csr_minstret$EN_port1__write ?
	       IF_csr_access_data_BITS_24_TO_22_74_EQ_1_83_TH_ETC___d766 :
	       x_port1__read__h17968 ;
  assign csr_minstreth$EN_port0__write =
	     EN_csr_access && pending_interrupts__h13960 == 12'd0 &&
	     !csr_access_data[105] &&
	     !csr_access_data[106] &&
	     csr_minstret == 32'hFFFFFFFF ;
  assign csr_minstreth$port0__write_1 = csr_minstreth + 32'd1 ;
  assign csr_minstreth$EN_port1__write =
	     EN_csr_access &&
	     IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1639 ;
  assign csr_minstreth$port2__read =
	     csr_minstreth$EN_port1__write ?
	       IF_csr_access_data_BITS_24_TO_22_74_EQ_1_83_TH_ETC___d766 :
	       x_port1__read__h17994 ;
  assign rg_fflags$EN_port0__write =
	     EN_csr_access && pending_interrupts__h13960 == 12'd0 &&
	     !csr_access_data[105] &&
	     !csr_access_data[106] &&
	     NOT_csr_access_data_BITS_4_TO_0_717_OR_rg_ffla_ETC___d1721 ;
  assign rg_fflags$EN_port1__write =
	     EN_csr_access &&
	     IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1319 ;
  always@(csr_access_data or
	  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761 or
	  csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756 or
	  csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758 or
	  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760)
  begin
    case (csr_access_data[24:22])
      3'd1: rg_fflags$port1__write_1 = csr_access_data[111:107];
      3'd2:
	  rg_fflags$port1__write_1 =
	      csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756[4:0];
      3'd3:
	  rg_fflags$port1__write_1 =
	      csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758[4:0];
      3'd5: rg_fflags$port1__write_1 = csr_access_data[9:5];
      3'd6:
	  rg_fflags$port1__write_1 =
	      _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760[4:0];
      default: rg_fflags$port1__write_1 =
		   _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761[4:0];
    endcase
  end
  assign rg_fflags$port2__read =
	     rg_fflags$EN_port1__write ?
	       rg_fflags$port1__write_1 :
	       x_port1__read__h18277 ;
  assign rg_tx$EN_port0__write =
	     EN_csr_access &&
	     IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1695 ;
  always@(csr_access_data or
	  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761 or
	  csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756 or
	  csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758 or
	  x1__h30838 or
	  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760)
  begin
    case (csr_access_data[24:22])
      3'd1: rg_tx$port0__write_1 = csr_access_data[114:107];
      3'd2:
	  rg_tx$port0__write_1 =
	      csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756[7:0];
      3'd3:
	  rg_tx$port0__write_1 =
	      csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758[7:0];
      3'd5: rg_tx$port0__write_1 = x1__h30838;
      3'd6:
	  rg_tx$port0__write_1 =
	      _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760[7:0];
      default: rg_tx$port0__write_1 =
		   _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761[7:0];
    endcase
  end
  assign rg_tx$port1__read =
	     rg_tx$EN_port0__write ? rg_tx$port0__write_1 : rg_tx ;
  assign rg_rx$EN_port0__write =
	     EN_csr_access && pending_interrupts__h13960 == 12'd0 &&
	     !csr_access_data[105] &&
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555 &&
	     csr_access_data[106] &&
	     csr_access_data[24:22] != 3'd0 &&
	     csr_access_data[21:10] == 12'h77E ;
  assign rg_rx$port1__read = rg_rx$EN_port0__write ? 9'd0 : rg_rx ;
  assign rg_rx$port1__write_1 = { 1'b1, uart_fifoRecv$D_OUT } ;
  assign rg_rx$port2__read =
	     CAN_FIRE_RL_uart_rx_connectionif ?
	       rg_rx$port1__write_1 :
	       rg_rx$port1__read ;

  // register csr_mbadaddr
  assign csr_mbadaddr$D_IN =
	     (pending_interrupts__h13960 != 12'd0 || csr_access_data[105] ||
	      csr_access_data[106] &&
	      IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d439) ?
	       32'd0 :
	       IF_csr_access_data_BITS_24_TO_22_74_EQ_1_83_TH_ETC___d766 ;
  assign csr_mbadaddr$EN =
	     EN_csr_access &&
	     csr_access_data_BIT_105_10_OR_csr_access_data__ETC___d928 ;

  // register csr_mbase
  assign csr_mbase$D_IN =
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_1_83_TH_ETC___d766 ;
  assign csr_mbase$EN =
	     EN_csr_access &&
	     IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1486 ;

  // register csr_mbound
  assign csr_mbound$D_IN =
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_1_83_TH_ETC___d766 ;
  assign csr_mbound$EN =
	     EN_csr_access &&
	     IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1503 ;

  // register csr_mcause
  assign csr_mcause$D_IN =
	     (pending_interrupts__h13960 != 12'd0 || csr_access_data[105] ||
	      csr_access_data[106] &&
	      IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d439) ?
	       cause__h15997 :
	       IF_csr_access_data_BITS_24_TO_22_74_EQ_1_83_TH_ETC___d766 ;
  assign csr_mcause$EN =
	     EN_csr_access &&
	     (NOT_IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN__ETC___d872 ||
	      IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d889) ;

  // register csr_mcycle
  assign csr_mcycle$D_IN = csr_mcycle$port2__read ;
  assign csr_mcycle$EN = 1'b1 ;

  // register csr_mcycleh
  assign csr_mcycleh$D_IN = csr_mcycleh$port2__read ;
  assign csr_mcycleh$EN = 1'b1 ;

  // register csr_mdbase
  assign csr_mdbase$D_IN =
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_1_83_TH_ETC___d766 ;
  assign csr_mdbase$EN =
	     EN_csr_access &&
	     IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1554 ;

  // register csr_mdbound
  assign csr_mdbound$D_IN =
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_1_83_TH_ETC___d766 ;
  assign csr_mdbound$EN =
	     EN_csr_access &&
	     IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1571 ;

  // register csr_mepc
  assign csr_mepc$D_IN =
	     (pending_interrupts__h13960 != 12'd0 || csr_access_data[105] ||
	      csr_access_data[106] &&
	      IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d439) ?
	       csr_access_data[100:69] :
	       IF_csr_access_data_BITS_24_TO_22_74_EQ_1_83_TH_ETC___d766 ;
  assign csr_mepc$EN =
	     EN_csr_access &&
	     (NOT_IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN__ETC___d872 ||
	      IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d907) ;

  // register csr_mibase
  assign csr_mibase$D_IN =
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_1_83_TH_ETC___d766 ;
  assign csr_mibase$EN =
	     EN_csr_access &&
	     IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1520 ;

  // register csr_mibound
  assign csr_mibound$D_IN =
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_1_83_TH_ETC___d766 ;
  assign csr_mibound$EN =
	     EN_csr_access &&
	     IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1537 ;

  // register csr_minstret
  assign csr_minstret$D_IN = csr_minstret$port2__read ;
  assign csr_minstret$EN = 1'b1 ;

  // register csr_minstreth
  assign csr_minstreth$D_IN = csr_minstreth$port2__read ;
  assign csr_minstreth$EN = 1'b1 ;

  // register csr_misa
  assign csr_misa$D_IN =
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_1_83_TH_ETC___d766 ;
  assign csr_misa$EN =
	     EN_csr_access &&
	     IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1346 ;

  // register csr_mscratch
  assign csr_mscratch$D_IN =
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_1_83_TH_ETC___d766 ;
  assign csr_mscratch$EN =
	     EN_csr_access &&
	     IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1452 ;

  // register csr_ubadaddr
  assign csr_ubadaddr$D_IN = csr_mbadaddr$D_IN ;
  assign csr_ubadaddr$EN =
	     EN_csr_access &&
	     csr_access_data_BIT_105_10_OR_csr_access_data__ETC___d825 ;

  // register csr_ucause
  assign csr_ucause$D_IN = csr_mcause$D_IN ;
  assign csr_ucause$EN =
	     EN_csr_access &&
	     (NOT_IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN__ETC___d486 ||
	      IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d575) ;

  // register csr_uepc
  assign csr_uepc$D_IN = csr_mepc$D_IN ;
  assign csr_uepc$EN =
	     EN_csr_access &&
	     (NOT_IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN__ETC___d486 ||
	      IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d784) ;

  // register csr_uscratch
  assign csr_uscratch$D_IN =
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_1_83_TH_ETC___d766 ;
  assign csr_uscratch$EN =
	     EN_csr_access &&
	     IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1220 ;

  // register rg_fflags
  assign rg_fflags$D_IN = rg_fflags$port2__read ;
  assign rg_fflags$EN = 1'b1 ;

  // register rg_frm
  always@(csr_access_data or
	  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761 or
	  csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756 or
	  csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758 or
	  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760)
  begin
    case (csr_access_data[24:22])
      3'd1:
	  rg_frm$D_IN =
	      (csr_access_data[21:10] == 12'h002) ?
		csr_access_data[109:107] :
		csr_access_data[114:112];
      3'd2:
	  rg_frm$D_IN =
	      (csr_access_data[21:10] == 12'h002) ?
		csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756[2:0] :
		csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756[7:5];
      3'd3:
	  rg_frm$D_IN =
	      (csr_access_data[21:10] == 12'h002) ?
		csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758[2:0] :
		csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758[7:5];
      3'd5:
	  rg_frm$D_IN =
	      (csr_access_data[21:10] == 12'h002) ?
		csr_access_data[7:5] :
		3'd0;
      3'd6:
	  rg_frm$D_IN =
	      (csr_access_data[21:10] == 12'h002) ?
		_0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760[2:0] :
		_0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760[7:5];
      default: rg_frm$D_IN =
		   (csr_access_data[21:10] == 12'h002) ?
		     _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761[2:0] :
		     _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761[7:5];
    endcase
  end
  assign rg_frm$EN =
	     EN_csr_access &&
	     IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1271 ;

  // register rg_fs
  always@(csr_access_data or
	  CASE_csr_access_data_BITS_21_TO_10_0x0_0_CONCA_ETC__q5 or
	  CASE_csr_access_data_BITS_21_TO_10_0x0_csr_acc_ETC__q6 or
	  CASE_csr_access_data_BITS_21_TO_10_0x0_csr_acc_ETC__q7 or
	  CASE_csr_access_data_BITS_21_TO_10_0x0_csr_acc_ETC__q8 or
	  CASE_csr_access_data_BITS_21_TO_10_0x0_0_0x1_0_ETC__q9 or
	  CASE_csr_access_data_BITS_21_TO_10_0x0_0_CONCA_ETC__q10)
  begin
    case (csr_access_data[24:22])
      3'd1:
	  rg_fs$D_IN = CASE_csr_access_data_BITS_21_TO_10_0x0_csr_acc_ETC__q6;
      3'd2:
	  rg_fs$D_IN = CASE_csr_access_data_BITS_21_TO_10_0x0_csr_acc_ETC__q7;
      3'd3:
	  rg_fs$D_IN = CASE_csr_access_data_BITS_21_TO_10_0x0_csr_acc_ETC__q8;
      3'd5:
	  rg_fs$D_IN = CASE_csr_access_data_BITS_21_TO_10_0x0_0_0x1_0_ETC__q9;
      3'd6:
	  rg_fs$D_IN =
	      CASE_csr_access_data_BITS_21_TO_10_0x0_0_CONCA_ETC__q10;
      default: rg_fs$D_IN =
		   CASE_csr_access_data_BITS_21_TO_10_0x0_0_CONCA_ETC__q5;
    endcase
  end
  assign rg_fs$EN =
	     EN_csr_access &&
	     IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1121 ;

  // register rg_medeleg
  always@(csr_access_data or
	  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761 or
	  csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756 or
	  csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758 or
	  x__h31003 or
	  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760)
  begin
    case (csr_access_data[24:22])
      3'd1: rg_medeleg$D_IN = csr_access_data[118:107];
      3'd2:
	  rg_medeleg$D_IN =
	      csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756[11:0];
      3'd3:
	  rg_medeleg$D_IN =
	      csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758[11:0];
      3'd5: rg_medeleg$D_IN = x__h31003;
      3'd6:
	  rg_medeleg$D_IN =
	      _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760[11:0];
      default: rg_medeleg$D_IN =
		   _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761[11:0];
    endcase
  end
  assign rg_medeleg$EN =
	     EN_csr_access &&
	     IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1363 ;

  // register rg_meie
  always@(csr_access_data or
	  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760 or
	  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761 or
	  csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756 or
	  csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758)
  begin
    case (csr_access_data[24:22])
      3'd1: rg_meie$D_IN = csr_access_data[118];
      3'd2:
	  rg_meie$D_IN =
	      csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756[11];
      3'd3:
	  rg_meie$D_IN =
	      csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758[11];
      default: rg_meie$D_IN =
		   csr_access_data[24:22] != 3'd5 &&
		   ((csr_access_data[24:22] == 3'd6) ?
		      _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760[11] :
		      _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761[11]);
    endcase
  end
  assign rg_meie$EN =
	     EN_csr_access &&
	     IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1408 ;

  // register rg_mideleg
  assign rg_mideleg$D_IN = rg_medeleg$D_IN ;
  assign rg_mideleg$EN =
	     EN_csr_access &&
	     IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1391 ;

  // register rg_mie
  assign rg_mie$D_IN =
	     pending_interrupts__h13960 == 12'd0 && !csr_access_data[105] &&
	     (!csr_access_data[106] ||
	      IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555) &&
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d962 ;
  assign rg_mie$EN =
	     EN_csr_access &&
	     (NOT_IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN__ETC___d872 ||
	      IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d949) ;

  // register rg_mpie
  assign rg_mpie$D_IN =
	     (pending_interrupts__h13960 != 12'd0 || csr_access_data[105] ||
	      csr_access_data[106] &&
	      IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d439) ?
	       x__h16955 :
	       csr_access_data[24:22] == 3'd0 ||
	       IF_csr_access_data_BITS_24_TO_22_74_EQ_1_83_TH_ETC___d991 ;
  assign rg_mpie$EN =
	     EN_csr_access &&
	     (NOT_IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN__ETC___d872 ||
	      IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d967) ;

  // register rg_mpp
  assign rg_mpp$D_IN =
	     (pending_interrupts__h13960 != 12'd0 || csr_access_data[105] ||
	      csr_access_data[106] &&
	      IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d439) ?
	       IF_rg_prv_76_EQ_0_77_THEN_rg_prv_76_ELSE_3___d427 :
	       IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d979 ;
  assign rg_mpp$EN =
	     EN_csr_access &&
	     (NOT_IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN__ETC___d872 ||
	      IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d967) ;

  // register rg_mprv
  always@(csr_access_data or
	  IF_csr_access_data_BITS_24_TO_22_74_EQ_6_92_TH_ETC___d1089 or
	  csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756 or
	  csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758)
  begin
    case (csr_access_data[24:22])
      3'd1:
	  rg_mprv$D_IN =
	      (csr_access_data[21:10] == 12'h0) ?
		csr_access_data[122] :
		csr_access_data[124];
      3'd2:
	  rg_mprv$D_IN =
	      (csr_access_data[21:10] == 12'h0) ?
		csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756[15] :
		csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756[17];
      3'd3:
	  rg_mprv$D_IN =
	      (csr_access_data[21:10] == 12'h0) ?
		csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758[15] :
		csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758[17];
      default: rg_mprv$D_IN =
		   csr_access_data[24:22] != 3'd5 &&
		   IF_csr_access_data_BITS_24_TO_22_74_EQ_6_92_TH_ETC___d1089;
    endcase
  end
  assign rg_mprv$EN =
	     EN_csr_access &&
	     IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1018 ;

  // register rg_msie
  always@(csr_access_data or
	  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761 or
	  csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756 or
	  csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758 or
	  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760)
  begin
    case (csr_access_data[24:22])
      3'd1: rg_msie$D_IN = csr_access_data[110];
      3'd2:
	  rg_msie$D_IN =
	      csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756[3];
      3'd3:
	  rg_msie$D_IN =
	      csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758[3];
      3'd5: rg_msie$D_IN = csr_access_data[8];
      3'd6:
	  rg_msie$D_IN =
	      _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760[3];
      default: rg_msie$D_IN =
		   _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761[3];
    endcase
  end
  assign rg_msie$EN =
	     EN_csr_access &&
	     IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1408 ;

  // register rg_mtie
  assign rg_mtie$D_IN =
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_1_83_TH_ETC___d991 ;
  assign rg_mtie$EN =
	     EN_csr_access &&
	     IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1408 ;

  // register rg_mtvec
  always@(csr_access_data or
	  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761 or
	  csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756 or
	  csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758 or
	  x__h29171 or
	  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760)
  begin
    case (csr_access_data[24:22])
      3'd1: rg_mtvec$D_IN = csr_access_data[138:109];
      3'd2:
	  rg_mtvec$D_IN =
	      csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756[31:2];
      3'd3:
	  rg_mtvec$D_IN =
	      csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758[31:2];
      3'd5: rg_mtvec$D_IN = x__h29171;
      3'd6:
	  rg_mtvec$D_IN =
	      _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760[31:2];
      default: rg_mtvec$D_IN =
		   _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761[31:2];
    endcase
  end
  assign rg_mtvec$EN =
	     EN_csr_access &&
	     IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1435 ;

  // register rg_mxr
  always@(csr_access_data or
	  IF_csr_access_data_BITS_24_TO_22_74_EQ_6_92_TH_ETC___d1054 or
	  csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756 or
	  csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758)
  begin
    case (csr_access_data[24:22])
      3'd1:
	  rg_mxr$D_IN =
	      (csr_access_data[21:10] == 12'h0) ?
		csr_access_data[124] :
		csr_access_data[126];
      3'd2:
	  rg_mxr$D_IN =
	      (csr_access_data[21:10] == 12'h0) ?
		csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756[17] :
		csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756[19];
      3'd3:
	  rg_mxr$D_IN =
	      (csr_access_data[21:10] == 12'h0) ?
		csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758[17] :
		csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758[19];
      default: rg_mxr$D_IN =
		   csr_access_data[24:22] != 3'd5 &&
		   IF_csr_access_data_BITS_24_TO_22_74_EQ_6_92_TH_ETC___d1054;
    endcase
  end
  assign rg_mxr$EN =
	     EN_csr_access &&
	     IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1018 ;

  // register rg_prv
  assign rg_prv$D_IN =
	     (pending_interrupts__h13960 != 12'd0 || csr_access_data[105] ||
	      csr_access_data[106] &&
	      IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d439) ?
	       (rg_prv_76_EQ_0_77_AND_IF_IF_rg_mie_75_OR_rg_pr_ETC___d479 ?
		  2'd0 :
		  2'd3) :
	       ((csr_access_data[21:10] == 12'h302) ?
		  ((rg_mpp == 2'd0) ? rg_mpp : 2'd3) :
		  2'd0) ;
  assign rg_prv$EN =
	     EN_csr_access &&
	     NOT_IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN__ETC___d446 ;

  // register rg_pum
  always@(csr_access_data or
	  IF_csr_access_data_BITS_24_TO_22_74_EQ_6_92_TH_ETC___d1074 or
	  csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756 or
	  csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758)
  begin
    case (csr_access_data[24:22])
      3'd1:
	  rg_pum$D_IN =
	      (csr_access_data[21:10] == 12'h0) ?
		csr_access_data[123] :
		csr_access_data[125];
      3'd2:
	  rg_pum$D_IN =
	      (csr_access_data[21:10] == 12'h0) ?
		csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756[16] :
		csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756[18];
      3'd3:
	  rg_pum$D_IN =
	      (csr_access_data[21:10] == 12'h0) ?
		csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758[16] :
		csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758[18];
      default: rg_pum$D_IN =
		   csr_access_data[24:22] != 3'd5 &&
		   IF_csr_access_data_BITS_24_TO_22_74_EQ_6_92_TH_ETC___d1074;
    endcase
  end
  assign rg_pum$EN =
	     EN_csr_access &&
	     IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1018 ;

  // register rg_rx
  assign rg_rx$D_IN = rg_rx$port2__read ;
  assign rg_rx$EN = 1'b1 ;

  // register rg_tx
  assign rg_tx$D_IN = rg_tx$port1__read ;
  assign rg_tx$EN = 1'b1 ;

  // register rg_u_cy
  always@(csr_access_data or
	  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761 or
	  csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756 or
	  csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758 or
	  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760)
  begin
    case (csr_access_data[24:22])
      3'd1: rg_u_cy$D_IN = csr_access_data[107];
      3'd2:
	  rg_u_cy$D_IN =
	      csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756[0];
      3'd3:
	  rg_u_cy$D_IN =
	      csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758[0];
      3'd5: rg_u_cy$D_IN = csr_access_data[5];
      3'd6:
	  rg_u_cy$D_IN =
	      _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760[0];
      default: rg_u_cy$D_IN =
		   _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761[0];
    endcase
  end
  assign rg_u_cy$EN =
	     EN_csr_access &&
	     IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1656 ;

  // register rg_u_ir
  always@(csr_access_data or
	  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761 or
	  csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756 or
	  csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758 or
	  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760)
  begin
    case (csr_access_data[24:22])
      3'd1: rg_u_ir$D_IN = csr_access_data[109];
      3'd2:
	  rg_u_ir$D_IN =
	      csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756[2];
      3'd3:
	  rg_u_ir$D_IN =
	      csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758[2];
      3'd5: rg_u_ir$D_IN = csr_access_data[7];
      3'd6:
	  rg_u_ir$D_IN =
	      _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760[2];
      default: rg_u_ir$D_IN =
		   _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761[2];
    endcase
  end
  assign rg_u_ir$EN =
	     EN_csr_access &&
	     IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1656 ;

  // register rg_u_tm
  always@(csr_access_data or
	  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761 or
	  csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756 or
	  csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758 or
	  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760)
  begin
    case (csr_access_data[24:22])
      3'd1: rg_u_tm$D_IN = csr_access_data[108];
      3'd2:
	  rg_u_tm$D_IN =
	      csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756[1];
      3'd3:
	  rg_u_tm$D_IN =
	      csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758[1];
      3'd5: rg_u_tm$D_IN = csr_access_data[6];
      3'd6:
	  rg_u_tm$D_IN =
	      _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760[1];
      default: rg_u_tm$D_IN =
		   _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761[1];
    endcase
  end
  assign rg_u_tm$EN =
	     EN_csr_access &&
	     IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1656 ;

  // register rg_ueie
  always@(csr_access_data or
	  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760 or
	  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761 or
	  csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756 or
	  csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758)
  begin
    case (csr_access_data[24:22])
      3'd1: rg_ueie$D_IN = csr_access_data[115];
      3'd2:
	  rg_ueie$D_IN =
	      csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756[8];
      3'd3:
	  rg_ueie$D_IN =
	      csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758[8];
      default: rg_ueie$D_IN =
		   csr_access_data[24:22] != 3'd5 &&
		   ((csr_access_data[24:22] == 3'd6) ?
		      _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760[8] :
		      _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761[8]);
    endcase
  end
  assign rg_ueie$EN =
	     EN_csr_access &&
	     IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1164 ;

  // register rg_uie
  assign rg_uie$D_IN =
	     pending_interrupts__h13960 == 12'd0 && !csr_access_data[105] &&
	     (!csr_access_data[106] ||
	      IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555) &&
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d866 ;
  assign rg_uie$EN =
	     EN_csr_access &&
	     (NOT_IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN__ETC___d486 ||
	      pending_interrupts__h13960 == 12'd0 && !csr_access_data[105] &&
	      IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555 &&
	      csr_access_data[106] &&
	      csr_access_data_BITS_24_TO_22_74_EQ_0_75_AND_c_ETC___d846) ;

  // register rg_upie
  assign rg_upie$D_IN =
	     csr_access_data[24:22] == 3'd0 ||
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_1_83_TH_ETC___d1012 ;
  assign rg_upie$EN =
	     EN_csr_access &&
	     IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1001 ;

  // register rg_usie
  assign rg_usie$D_IN = rg_u_cy$D_IN ;
  assign rg_usie$EN =
	     EN_csr_access &&
	     IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1164 ;

  // register rg_usip
  assign rg_usip$D_IN = rg_u_cy$D_IN ;
  assign rg_usip$EN =
	     EN_csr_access &&
	     IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1245 ;

  // register rg_utie
  assign rg_utie$D_IN =
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_1_83_TH_ETC___d1012 ;
  assign rg_utie$EN =
	     EN_csr_access &&
	     IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1164 ;

  // register rg_utip
  assign rg_utip$D_IN =
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_1_83_TH_ETC___d1012 ;
  assign rg_utip$EN =
	     EN_csr_access &&
	     IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1469 ;

  // register rg_utvec
  assign rg_utvec$D_IN = rg_mtvec$D_IN ;
  assign rg_utvec$EN =
	     EN_csr_access &&
	     IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1191 ;

  // register rg_vm
  always@(csr_access_data or
	  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761 or
	  csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756 or
	  csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758 or
	  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760)
  begin
    case (csr_access_data[24:22])
      3'd1:
	  rg_vm$D_IN =
	      (csr_access_data[21:10] == 12'h0) ?
		csr_access_data[133:129] :
		csr_access_data[135:131];
      3'd2:
	  rg_vm$D_IN =
	      (csr_access_data[21:10] == 12'h0) ?
		csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756[26:22] :
		csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756[28:24];
      3'd3:
	  rg_vm$D_IN =
	      (csr_access_data[21:10] == 12'h0) ?
		csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758[26:22] :
		csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758[28:24];
      3'd5: rg_vm$D_IN = 5'd0;
      3'd6:
	  rg_vm$D_IN =
	      (csr_access_data[21:10] == 12'h0) ?
		_0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760[26:22] :
		_0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760[28:24];
      default: rg_vm$D_IN =
		   (csr_access_data[21:10] == 12'h0) ?
		     _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761[26:22] :
		     _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761[28:24];
    endcase
  end
  assign rg_vm$EN =
	     EN_csr_access &&
	     IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1018 ;

  // register uart_fifoRecv_countReg
  assign uart_fifoRecv_countReg$D_IN =
	     CAN_FIRE_RL_uart_receive_stop_last_bit ?
	       uart_fifoRecv_countReg + 2'd1 :
	       uart_fifoRecv_countReg - 2'd1 ;
  assign uart_fifoRecv_countReg$EN =
	     CAN_FIRE_RL_uart_fifoRecv__updateLevelCounter ;

  // register uart_fifoXmit_countReg
  assign uart_fifoXmit_countReg$D_IN =
	     CAN_FIRE_RL_send_transimission_data0 ?
	       uart_fifoXmit_countReg + 2'd1 :
	       uart_fifoXmit_countReg - 2'd1 ;
  assign uart_fifoXmit_countReg$EN =
	     CAN_FIRE_RL_uart_fifoXmit__updateLevelCounter ;

  // register uart_rRecvBitCount
  assign uart_rRecvBitCount$D_IN =
	     uart_pwRecvResetBitCount$whas ? 4'd0 : x__h7540 ;
  assign uart_rRecvBitCount$EN =
	     uart_pwRecvResetBitCount$whas || uart_pwRecvEnableBitCount$whas ;

  // register uart_rRecvCellCount
  assign uart_rRecvCellCount$D_IN =
	     uart_pwRecvCellCountReset$whas ? 4'd0 : x__h5899 ;
  assign uart_rRecvCellCount$EN =
	     CAN_FIRE_RL_uart_baudGen_count_baudtick_16x ;

  // register uart_rRecvData
  assign uart_rRecvData$D_IN = sin_in ;
  assign uart_rRecvData$EN = EN_sin ;

  // register uart_rRecvParity
  assign uart_rRecvParity$D_IN = uart_rRecvData ;
  assign uart_rRecvParity$EN = CAN_FIRE_RL_uart_receive_parity_bit ;

  // register uart_rRecvState
  always@(WILL_FIRE_RL_uart_receive_wait_for_start_bit or
	  MUX_uart_rRecvState$write_1__VAL_1 or
	  WILL_FIRE_RL_uart_receive_find_center_of_bit_cell or
	  MUX_uart_rRecvState$write_1__VAL_2 or
	  WILL_FIRE_RL_uart_receive_wait_bit_cell_time_for_sample or
	  MUX_uart_rRecvState$write_1__VAL_3 or
	  WILL_FIRE_RL_uart_receive_stop_first_bit or
	  MUX_uart_rRecvState$write_1__VAL_4 or
	  WILL_FIRE_RL_uart_receive_stop_last_bit or
	  MUX_uart_rRecvState$write_1__SEL_6)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_uart_receive_wait_for_start_bit:
	  uart_rRecvState$D_IN = MUX_uart_rRecvState$write_1__VAL_1;
      WILL_FIRE_RL_uart_receive_find_center_of_bit_cell:
	  uart_rRecvState$D_IN = MUX_uart_rRecvState$write_1__VAL_2;
      WILL_FIRE_RL_uart_receive_wait_bit_cell_time_for_sample:
	  uart_rRecvState$D_IN = MUX_uart_rRecvState$write_1__VAL_3;
      WILL_FIRE_RL_uart_receive_stop_first_bit:
	  uart_rRecvState$D_IN = MUX_uart_rRecvState$write_1__VAL_4;
      WILL_FIRE_RL_uart_receive_stop_last_bit: uart_rRecvState$D_IN = 3'd0;
      MUX_uart_rRecvState$write_1__SEL_6: uart_rRecvState$D_IN = 3'd2;
      default: uart_rRecvState$D_IN = 3'b010 /* unspecified value */ ;
    endcase
  end
  assign uart_rRecvState$EN =
	     WILL_FIRE_RL_uart_receive_wait_for_start_bit ||
	     WILL_FIRE_RL_uart_receive_find_center_of_bit_cell ||
	     WILL_FIRE_RL_uart_receive_wait_bit_cell_time_for_sample ||
	     WILL_FIRE_RL_uart_receive_stop_first_bit ||
	     WILL_FIRE_RL_uart_receive_stop_last_bit ||
	     WILL_FIRE_RL_uart_receive_parity_bit ||
	     WILL_FIRE_RL_uart_receive_sample_pin ;

  // register uart_rXmitBitCount
  assign uart_rXmitBitCount$D_IN =
	     CAN_FIRE_RL_uart_transmit_wait_for_start_command ?
	       4'd0 :
	       x__h9381 ;
  assign uart_rXmitBitCount$EN =
	     CAN_FIRE_RL_uart_transmit_wait_for_start_command ||
	     uart_pwXmitEnableBitCount$whas ;

  // register uart_rXmitCellCount
  assign uart_rXmitCellCount$D_IN =
	     uart_pwXmitCellCountReset$whas ? 4'd0 : x__h9355 ;
  assign uart_rXmitCellCount$EN =
	     CAN_FIRE_RL_uart_baudGen_count_baudtick_16x ;

  // register uart_rXmitDataOut
  always@(MUX_uart_rXmitDataOut$write_1__SEL_1 or
	  uart_vrXmitBuffer_0 or
	  MUX_uart_rXmitDataOut$write_1__SEL_2 or
	  MUX_uart_rXmitDataOut$write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_uart_rXmitDataOut$write_1__SEL_1:
	  uart_rXmitDataOut$D_IN = uart_vrXmitBuffer_0;
      MUX_uart_rXmitDataOut$write_1__SEL_2: uart_rXmitDataOut$D_IN = 1'b0;
      MUX_uart_rXmitDataOut$write_1__SEL_3: uart_rXmitDataOut$D_IN = 1'b1;
      default: uart_rXmitDataOut$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign uart_rXmitDataOut$EN =
	     WILL_FIRE_RL_uart_transmit_shift_next_bit ||
	     WILL_FIRE_RL_uart_transmit_wait_1_bit_cell_time ||
	     WILL_FIRE_RL_uart_transmit_send_parity_bit ||
	     WILL_FIRE_RL_uart_transmit_send_start_bit ||
	     WILL_FIRE_RL_uart_transmit_send_stop_bit2 ||
	     WILL_FIRE_RL_uart_transmit_send_stop_bit1_5 ||
	     WILL_FIRE_RL_uart_transmit_send_stop_bit ||
	     WILL_FIRE_RL_uart_transmit_wait_for_start_command ;

  // register uart_rXmitParity
  assign uart_rXmitParity$D_IN = z__h10804 ^ uart_fifoXmit$D_OUT[7] ;
  assign uart_rXmitParity$EN = CAN_FIRE_RL_uart_transmit_buffer_load ;

  // register uart_rXmitState
  always@(WILL_FIRE_RL_uart_transmit_wait_for_start_command or
	  MUX_uart_rXmitState$write_1__VAL_1 or
	  WILL_FIRE_RL_uart_transmit_send_start_bit or
	  MUX_uart_rXmitState$write_1__VAL_2 or
	  WILL_FIRE_RL_uart_transmit_wait_1_bit_cell_time or
	  MUX_uart_rXmitState$write_1__VAL_3 or
	  WILL_FIRE_RL_uart_transmit_send_parity_bit or
	  MUX_uart_rXmitState$write_1__VAL_4 or
	  WILL_FIRE_RL_uart_transmit_send_stop_bit or
	  MUX_uart_rXmitState$write_1__VAL_5 or
	  WILL_FIRE_RL_uart_transmit_send_stop_bit1_5 or
	  MUX_uart_rXmitState$write_1__VAL_6 or
	  WILL_FIRE_RL_uart_transmit_send_stop_bit2 or
	  MUX_uart_rXmitState$write_1__VAL_7 or
	  WILL_FIRE_RL_uart_transmit_shift_next_bit)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_uart_transmit_wait_for_start_command:
	  uart_rXmitState$D_IN = MUX_uart_rXmitState$write_1__VAL_1;
      WILL_FIRE_RL_uart_transmit_send_start_bit:
	  uart_rXmitState$D_IN = MUX_uart_rXmitState$write_1__VAL_2;
      WILL_FIRE_RL_uart_transmit_wait_1_bit_cell_time:
	  uart_rXmitState$D_IN = MUX_uart_rXmitState$write_1__VAL_3;
      WILL_FIRE_RL_uart_transmit_send_parity_bit:
	  uart_rXmitState$D_IN = MUX_uart_rXmitState$write_1__VAL_4;
      WILL_FIRE_RL_uart_transmit_send_stop_bit:
	  uart_rXmitState$D_IN = MUX_uart_rXmitState$write_1__VAL_5;
      WILL_FIRE_RL_uart_transmit_send_stop_bit1_5:
	  uart_rXmitState$D_IN = MUX_uart_rXmitState$write_1__VAL_6;
      WILL_FIRE_RL_uart_transmit_send_stop_bit2:
	  uart_rXmitState$D_IN = MUX_uart_rXmitState$write_1__VAL_7;
      WILL_FIRE_RL_uart_transmit_shift_next_bit: uart_rXmitState$D_IN = 3'd2;
      default: uart_rXmitState$D_IN = 3'b010 /* unspecified value */ ;
    endcase
  end
  assign uart_rXmitState$EN =
	     WILL_FIRE_RL_uart_transmit_wait_for_start_command ||
	     WILL_FIRE_RL_uart_transmit_send_start_bit ||
	     WILL_FIRE_RL_uart_transmit_wait_1_bit_cell_time ||
	     WILL_FIRE_RL_uart_transmit_send_parity_bit ||
	     WILL_FIRE_RL_uart_transmit_send_stop_bit ||
	     WILL_FIRE_RL_uart_transmit_send_stop_bit1_5 ||
	     WILL_FIRE_RL_uart_transmit_send_stop_bit2 ||
	     WILL_FIRE_RL_uart_transmit_shift_next_bit ;

  // register uart_vrRecvBuffer_0
  assign uart_vrRecvBuffer_0$D_IN = uart_vrRecvBuffer_1 ;
  assign uart_vrRecvBuffer_0$EN = CAN_FIRE_RL_uart_receive_buffer_shift ;

  // register uart_vrRecvBuffer_1
  assign uart_vrRecvBuffer_1$D_IN = uart_vrRecvBuffer_2 ;
  assign uart_vrRecvBuffer_1$EN = CAN_FIRE_RL_uart_receive_buffer_shift ;

  // register uart_vrRecvBuffer_2
  assign uart_vrRecvBuffer_2$D_IN = uart_vrRecvBuffer_3 ;
  assign uart_vrRecvBuffer_2$EN = CAN_FIRE_RL_uart_receive_buffer_shift ;

  // register uart_vrRecvBuffer_3
  assign uart_vrRecvBuffer_3$D_IN = uart_vrRecvBuffer_4 ;
  assign uart_vrRecvBuffer_3$EN = CAN_FIRE_RL_uart_receive_buffer_shift ;

  // register uart_vrRecvBuffer_4
  assign uart_vrRecvBuffer_4$D_IN = uart_vrRecvBuffer_5 ;
  assign uart_vrRecvBuffer_4$EN = CAN_FIRE_RL_uart_receive_buffer_shift ;

  // register uart_vrRecvBuffer_5
  assign uart_vrRecvBuffer_5$D_IN = uart_vrRecvBuffer_6 ;
  assign uart_vrRecvBuffer_5$EN = CAN_FIRE_RL_uart_receive_buffer_shift ;

  // register uart_vrRecvBuffer_6
  assign uart_vrRecvBuffer_6$D_IN = uart_vrRecvBuffer_7 ;
  assign uart_vrRecvBuffer_6$EN = CAN_FIRE_RL_uart_receive_buffer_shift ;

  // register uart_vrRecvBuffer_7
  assign uart_vrRecvBuffer_7$D_IN = uart_rRecvData ;
  assign uart_vrRecvBuffer_7$EN = CAN_FIRE_RL_uart_receive_buffer_shift ;

  // register uart_vrXmitBuffer_0
  assign uart_vrXmitBuffer_0$D_IN =
	     WILL_FIRE_RL_uart_transmit_buffer_load ?
	       uart_fifoXmit$D_OUT[0] :
	       uart_vrXmitBuffer_1 ;
  assign uart_vrXmitBuffer_0$EN =
	     WILL_FIRE_RL_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_transmit_buffer_shift ;

  // register uart_vrXmitBuffer_1
  assign uart_vrXmitBuffer_1$D_IN =
	     WILL_FIRE_RL_uart_transmit_buffer_load ?
	       uart_fifoXmit$D_OUT[1] :
	       uart_vrXmitBuffer_2 ;
  assign uart_vrXmitBuffer_1$EN =
	     WILL_FIRE_RL_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_transmit_buffer_shift ;

  // register uart_vrXmitBuffer_2
  assign uart_vrXmitBuffer_2$D_IN =
	     WILL_FIRE_RL_uart_transmit_buffer_load ?
	       uart_fifoXmit$D_OUT[2] :
	       uart_vrXmitBuffer_3 ;
  assign uart_vrXmitBuffer_2$EN =
	     WILL_FIRE_RL_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_transmit_buffer_shift ;

  // register uart_vrXmitBuffer_3
  assign uart_vrXmitBuffer_3$D_IN =
	     WILL_FIRE_RL_uart_transmit_buffer_load ?
	       uart_fifoXmit$D_OUT[3] :
	       uart_vrXmitBuffer_4 ;
  assign uart_vrXmitBuffer_3$EN =
	     WILL_FIRE_RL_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_transmit_buffer_shift ;

  // register uart_vrXmitBuffer_4
  assign uart_vrXmitBuffer_4$D_IN =
	     WILL_FIRE_RL_uart_transmit_buffer_load ?
	       uart_fifoXmit$D_OUT[4] :
	       uart_vrXmitBuffer_5 ;
  assign uart_vrXmitBuffer_4$EN =
	     WILL_FIRE_RL_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_transmit_buffer_shift ;

  // register uart_vrXmitBuffer_5
  assign uart_vrXmitBuffer_5$D_IN =
	     WILL_FIRE_RL_uart_transmit_buffer_load ?
	       uart_fifoXmit$D_OUT[5] :
	       uart_vrXmitBuffer_6 ;
  assign uart_vrXmitBuffer_5$EN =
	     WILL_FIRE_RL_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_transmit_buffer_shift ;

  // register uart_vrXmitBuffer_6
  assign uart_vrXmitBuffer_6$D_IN =
	     WILL_FIRE_RL_uart_transmit_buffer_load ?
	       uart_fifoXmit$D_OUT[6] :
	       uart_vrXmitBuffer_7 ;
  assign uart_vrXmitBuffer_6$EN =
	     WILL_FIRE_RL_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_transmit_buffer_shift ;

  // register uart_vrXmitBuffer_7
  assign uart_vrXmitBuffer_7$D_IN =
	     !WILL_FIRE_RL_uart_transmit_buffer_load ||
	     uart_fifoXmit$D_OUT[7] ;
  assign uart_vrXmitBuffer_7$EN =
	     WILL_FIRE_RL_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_transmit_buffer_shift ;

  // submodule uart_baudGen_rBaudCounter
  assign uart_baudGen_rBaudCounter$DATA_A = 16'd1 ;
  assign uart_baudGen_rBaudCounter$DATA_B = 16'h0 ;
  assign uart_baudGen_rBaudCounter$DATA_C = 16'h0 ;
  assign uart_baudGen_rBaudCounter$DATA_F = 16'd0 ;
  assign uart_baudGen_rBaudCounter$ADDA =
	     uart_baudGen_rBaudCounter_value_PLUS_1_8_ULT_130___d29 ;
  assign uart_baudGen_rBaudCounter$ADDB = 1'b0 ;
  assign uart_baudGen_rBaudCounter$SETC = 1'b0 ;
  assign uart_baudGen_rBaudCounter$SETF =
	     CAN_FIRE_RL_uart_baudGen_count_baudtick_16x ;

  // submodule uart_baudGen_rBaudTickCounter
  assign uart_baudGen_rBaudTickCounter$DATA_A = 3'd1 ;
  assign uart_baudGen_rBaudTickCounter$DATA_B = 3'h0 ;
  assign uart_baudGen_rBaudTickCounter$DATA_C = 3'h0 ;
  assign uart_baudGen_rBaudTickCounter$DATA_F = 3'h0 ;
  assign uart_baudGen_rBaudTickCounter$ADDA =
	     CAN_FIRE_RL_uart_baudGen_count_baudtick_16x ;
  assign uart_baudGen_rBaudTickCounter$ADDB = 1'b0 ;
  assign uart_baudGen_rBaudTickCounter$SETC = 1'b0 ;
  assign uart_baudGen_rBaudTickCounter$SETF = 1'b0 ;

  // submodule uart_fifoRecv
  assign uart_fifoRecv$D_IN =
	     { uart_vrRecvBuffer_7,
	       uart_vrRecvBuffer_6,
	       uart_vrRecvBuffer_5,
	       uart_vrRecvBuffer_4,
	       uart_vrRecvBuffer_3,
	       uart_vrRecvBuffer_2,
	       uart_vrRecvBuffer_1,
	       uart_vrRecvBuffer_0 } ;
  assign uart_fifoRecv$ENQ = CAN_FIRE_RL_uart_receive_stop_last_bit ;
  assign uart_fifoRecv$DEQ = CAN_FIRE_RL_uart_rx_connectionif ;
  assign uart_fifoRecv$CLR = 1'b0 ;

  // submodule uart_fifoXmit
  assign uart_fifoXmit$D_IN = rg_tx$port1__read ;
  assign uart_fifoXmit$ENQ = CAN_FIRE_RL_send_transimission_data0 ;
  assign uart_fifoXmit$DEQ = CAN_FIRE_RL_uart_transmit_buffer_load ;
  assign uart_fifoXmit$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_m_ETC___d272 =
	     pending_interrupts__h13960[0] ?
	       4'd0 :
	       ((!pending_interrupts__h13960[1] &&
		 !pending_interrupts__h13960[2] &&
		 pending_interrupts__h13960[3]) ?
		  4'd3 :
		  ((!pending_interrupts__h13960[1] &&
		    !pending_interrupts__h13960[2] &&
		    !pending_interrupts__h13960[3] &&
		    pending_interrupts__h13960[4]) ?
		     4'd4 :
		     ((!pending_interrupts__h13960[1] &&
		       !pending_interrupts__h13960[2] &&
		       !pending_interrupts__h13960[3] &&
		       !pending_interrupts__h13960[4] &&
		       !pending_interrupts__h13960[5] &&
		       !pending_interrupts__h13960[6] &&
		       pending_interrupts__h13960[7]) ?
			4'd7 :
			((!pending_interrupts__h13960[1] &&
			  !pending_interrupts__h13960[2] &&
			  !pending_interrupts__h13960[3] &&
			  !pending_interrupts__h13960[4] &&
			  !pending_interrupts__h13960[5] &&
			  !pending_interrupts__h13960[6] &&
			  !pending_interrupts__h13960[7] &&
			  pending_interrupts__h13960[8]) ?
			   4'd8 :
			   4'd11)))) ;
  assign IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d439 =
	     (csr_access_data[24:22] == 3'd0) ?
	       csr_access_data[21:10] == 12'h0 ||
	       csr_access_data[21:10] == 12'h001 ||
	       csr_access_data[21:10] == 12'h302 && rg_prv == 2'd0 :
	       (csr_access_data[24:22] == 3'd1 ||
		csr_access_data[24:22] == 3'd2 ||
		csr_access_data[24:22] == 3'd3 ||
		csr_access_data[24:22] == 3'd4 ||
		csr_access_data[24:22] == 3'd5 ||
		csr_access_data[24:22] == 3'd6 ||
		csr_access_data[24:22] == 3'd7) &&
	       (csr_access_data[21:10] != 12'h0 &&
		csr_access_data[21:10] != 12'h004 &&
		csr_access_data[21:10] != 12'h005 &&
		csr_access_data[21:10] != 12'h040 &&
		csr_access_data[21:10] != 12'h041 &&
		csr_access_data[21:10] != 12'h042 &&
		csr_access_data[21:10] != 12'h043 &&
		csr_access_data[21:10] != 12'h044 &&
		csr_access_data[21:10] != 12'h002 &&
		csr_access_data[21:10] != 12'h001 &&
		csr_access_data[21:10] != 12'h003 &&
		csr_access_data[21:10] != 12'hC00 &&
		csr_access_data[21:10] != 12'hC01 &&
		csr_access_data[21:10] != 12'hC02 &&
		csr_access_data[21:10] != 12'hC80 &&
		csr_access_data[21:10] != 12'hC81 &&
		csr_access_data[21:10] != 12'hC82 &&
		csr_access_data[21:10] != 12'h301 &&
		csr_access_data[21:10] != 12'hF11 &&
		csr_access_data[21:10] != 12'hF12 &&
		csr_access_data[21:10] != 12'hF13 &&
		csr_access_data[21:10] != 12'hF14 &&
		csr_access_data[21:10] != 12'h300 &&
		csr_access_data[21:10] != 12'h302 &&
		csr_access_data[21:10] != 12'h303 &&
		csr_access_data[21:10] != 12'h304 &&
		csr_access_data[21:10] != 12'h305 &&
		csr_access_data[21:10] != 12'h340 &&
		csr_access_data[21:10] != 12'h341 &&
		csr_access_data[21:10] != 12'h342 &&
		csr_access_data[21:10] != 12'h343 &&
		csr_access_data[21:10] != 12'h344 &&
		csr_access_data[21:10] != 12'h380 &&
		csr_access_data[21:10] != 12'h381 &&
		csr_access_data[21:10] != 12'h382 &&
		csr_access_data[21:10] != 12'h383 &&
		csr_access_data[21:10] != 12'h384 &&
		csr_access_data[21:10] != 12'h385 &&
		csr_access_data[21:10] != 12'hB00 &&
		csr_access_data[21:10] != 12'hB02 &&
		csr_access_data[21:10] != 12'hB80 &&
		csr_access_data[21:10] != 12'hB82 &&
		csr_access_data[21:10] != 12'h320 &&
		csr_access_data[21:10] != 12'h77F &&
		csr_access_data[21:10] != 12'h77E ||
		IF_rg_prv_76_EQ_0_77_THEN_rg_prv_76_ELSE_3_27__ETC___d429 ||
		csr_access_data[9:5] != 5'd0 &&
		csr_access_data[21:20] == 2'b11) ;
  assign IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555 =
	     (csr_access_data[24:22] == 3'd0) ?
	       csr_access_data[21:10] != 12'h0 &&
	       csr_access_data[21:10] != 12'h001 &&
	       (csr_access_data[21:10] != 12'h302 || rg_prv != 2'd0) :
	       csr_access_data[24:22] != 3'd1 &&
	       csr_access_data[24:22] != 3'd2 &&
	       csr_access_data[24:22] != 3'd3 &&
	       csr_access_data[24:22] != 3'd4 &&
	       csr_access_data[24:22] != 3'd5 &&
	       csr_access_data[24:22] != 3'd6 &&
	       csr_access_data[24:22] != 3'd7 ||
	       (csr_access_data[21:10] == 12'h0 ||
		csr_access_data[21:10] == 12'h004 ||
		csr_access_data[21:10] == 12'h005 ||
		csr_access_data[21:10] == 12'h040 ||
		csr_access_data[21:10] == 12'h041 ||
		csr_access_data[21:10] == 12'h042 ||
		csr_access_data[21:10] == 12'h043 ||
		csr_access_data[21:10] == 12'h044 ||
		csr_access_data[21:10] == 12'h002 ||
		csr_access_data[21:10] == 12'h001 ||
		csr_access_data[21:10] == 12'h003 ||
		csr_access_data[21:10] == 12'hC00 ||
		csr_access_data[21:10] == 12'hC01 ||
		csr_access_data[21:10] == 12'hC02 ||
		csr_access_data[21:10] == 12'hC80 ||
		csr_access_data[21:10] == 12'hC81 ||
		csr_access_data[21:10] == 12'hC82 ||
		csr_access_data[21:10] == 12'h301 ||
		csr_access_data[21:10] == 12'hF11 ||
		csr_access_data[21:10] == 12'hF12 ||
		csr_access_data[21:10] == 12'hF13 ||
		csr_access_data[21:10] == 12'hF14 ||
		csr_access_data[21:10] == 12'h300 ||
		csr_access_data[21:10] == 12'h302 ||
		csr_access_data[21:10] == 12'h303 ||
		csr_access_data[21:10] == 12'h304 ||
		csr_access_data[21:10] == 12'h305 ||
		csr_access_data[21:10] == 12'h340 ||
		csr_access_data[21:10] == 12'h341 ||
		csr_access_data[21:10] == 12'h342 ||
		csr_access_data[21:10] == 12'h343 ||
		csr_access_data[21:10] == 12'h344 ||
		csr_access_data[21:10] == 12'h380 ||
		csr_access_data[21:10] == 12'h381 ||
		csr_access_data[21:10] == 12'h382 ||
		csr_access_data[21:10] == 12'h383 ||
		csr_access_data[21:10] == 12'h384 ||
		csr_access_data[21:10] == 12'h385 ||
		csr_access_data[21:10] == 12'hB00 ||
		csr_access_data[21:10] == 12'hB02 ||
		csr_access_data[21:10] == 12'hB80 ||
		csr_access_data[21:10] == 12'hB82 ||
		csr_access_data[21:10] == 12'h320 ||
		csr_access_data[21:10] == 12'h77F ||
		csr_access_data[21:10] == 12'h77E) &&
	       !IF_rg_prv_76_EQ_0_77_THEN_rg_prv_76_ELSE_3_27__ETC___d429 &&
	       (csr_access_data[9:5] == 5'd0 ||
		csr_access_data[21:20] != 2'b11) ;
  assign IF_csr_access_data_BITS_24_TO_22_74_EQ_6_92_TH_ETC___d1054 =
	     (csr_access_data[24:22] == 3'd6) ?
	       ((csr_access_data[21:10] == 12'h0) ?
		  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760[17] :
		  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760[19]) :
	       ((csr_access_data[21:10] == 12'h0) ?
		  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761[17] :
		  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761[19]) ;
  assign IF_csr_access_data_BITS_24_TO_22_74_EQ_6_92_TH_ETC___d1074 =
	     (csr_access_data[24:22] == 3'd6) ?
	       ((csr_access_data[21:10] == 12'h0) ?
		  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760[16] :
		  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760[18]) :
	       ((csr_access_data[21:10] == 12'h0) ?
		  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761[16] :
		  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761[18]) ;
  assign IF_csr_access_data_BITS_24_TO_22_74_EQ_6_92_TH_ETC___d1089 =
	     (csr_access_data[24:22] == 3'd6) ?
	       ((csr_access_data[21:10] == 12'h0) ?
		  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760[15] :
		  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760[17]) :
	       ((csr_access_data[21:10] == 12'h0) ?
		  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761[15] :
		  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761[17]) ;
  assign IF_csr_access_data_BIT_105_10_THEN_IF_csr_acce_ETC___d793 =
	     csr_access_data[105] ?
	       CASE_csr_access_data_BITS_104_TO_101_0_csr_acc_ETC__q3 :
	       ((csr_access_data[24:22] == 3'd0) ?
		  CASE_csr_access_data_BITS_21_TO_10_0x0_IF_rg_p_ETC__q4 :
		  4'd2) ;
  assign IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1001 =
	     pending_interrupts__h13960 == 12'd0 && !csr_access_data[105] &&
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555 &&
	     csr_access_data[106] &&
	     (csr_access_data[24:22] == 3'd0 &&
	      csr_access_data[21:10] == 12'h002 ||
	      csr_access_data[24:22] != 3'd0 &&
	      NOT_csr_access_data_BITS_9_TO_5_30_EQ_0_31_32__ETC___d844) ;
  assign IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1018 =
	     pending_interrupts__h13960 == 12'd0 && !csr_access_data[105] &&
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555 &&
	     csr_access_data[106] &&
	     csr_access_data[24:22] != 3'd0 &&
	     NOT_csr_access_data_BITS_9_TO_5_30_EQ_0_31_32__ETC___d844 ;
  assign IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1121 =
	     pending_interrupts__h13960 == 12'd0 && !csr_access_data[105] &&
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555 &&
	     csr_access_data[106] &&
	     csr_access_data[9:5] != 5'd0 &&
	     (csr_access_data[24:22] == 3'd1 &&
	      (csr_access_data[21:10] == 12'h0 ||
	       csr_access_data[21:10] == 12'h002 ||
	       csr_access_data[21:10] == 12'h001 ||
	       csr_access_data[21:10] == 12'h003 ||
	       csr_access_data[21:10] == 12'h300) ||
	      csr_access_data[24:22] == 3'd2 &&
	      (csr_access_data[21:10] == 12'h0 ||
	       csr_access_data[21:10] == 12'h002 ||
	       csr_access_data[21:10] == 12'h001 ||
	       csr_access_data[21:10] == 12'h003 ||
	       csr_access_data[21:10] == 12'h300) ||
	      csr_access_data[24:22] == 3'd3 &&
	      (csr_access_data[21:10] == 12'h0 ||
	       csr_access_data[21:10] == 12'h002 ||
	       csr_access_data[21:10] == 12'h001 ||
	       csr_access_data[21:10] == 12'h003 ||
	       csr_access_data[21:10] == 12'h300) ||
	      csr_access_data[24:22] == 3'd5 &&
	      (csr_access_data[21:10] == 12'h0 ||
	       csr_access_data[21:10] == 12'h002 ||
	       csr_access_data[21:10] == 12'h001 ||
	       csr_access_data[21:10] == 12'h003 ||
	       csr_access_data[21:10] == 12'h300) ||
	      (csr_access_data[24:22] == 3'd6 ||
	       csr_access_data[24:22] == 3'd7) &&
	      (csr_access_data[21:10] == 12'h0 ||
	       csr_access_data[21:10] == 12'h002 ||
	       csr_access_data[21:10] == 12'h001 ||
	       csr_access_data[21:10] == 12'h003 ||
	       csr_access_data[21:10] == 12'h300)) ;
  assign IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1164 =
	     pending_interrupts__h13960 == 12'd0 && !csr_access_data[105] &&
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555 &&
	     csr_access_data[106] &&
	     csr_access_data[9:5] != 5'd0 &&
	     (csr_access_data[24:22] == 3'd1 &&
	      (csr_access_data[21:10] == 12'h004 ||
	       csr_access_data[21:10] == 12'h304) ||
	      csr_access_data[24:22] == 3'd2 &&
	      (csr_access_data[21:10] == 12'h004 ||
	       csr_access_data[21:10] == 12'h304) ||
	      csr_access_data[24:22] == 3'd3 &&
	      (csr_access_data[21:10] == 12'h004 ||
	       csr_access_data[21:10] == 12'h304) ||
	      csr_access_data[24:22] == 3'd5 &&
	      (csr_access_data[21:10] == 12'h004 ||
	       csr_access_data[21:10] == 12'h304) ||
	      (csr_access_data[24:22] == 3'd6 ||
	       csr_access_data[24:22] == 3'd7) &&
	      (csr_access_data[21:10] == 12'h004 ||
	       csr_access_data[21:10] == 12'h304)) ;
  assign IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1191 =
	     pending_interrupts__h13960 == 12'd0 && !csr_access_data[105] &&
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555 &&
	     csr_access_data[106] &&
	     csr_access_data[9:5] != 5'd0 &&
	     (csr_access_data[24:22] == 3'd1 &&
	      csr_access_data[21:10] == 12'h005 ||
	      csr_access_data[24:22] == 3'd2 &&
	      csr_access_data[21:10] == 12'h005 ||
	      csr_access_data[24:22] == 3'd3 &&
	      csr_access_data[21:10] == 12'h005 ||
	      csr_access_data[24:22] == 3'd5 &&
	      csr_access_data[21:10] == 12'h005 ||
	      (csr_access_data[24:22] == 3'd6 ||
	       csr_access_data[24:22] == 3'd7) &&
	      csr_access_data[21:10] == 12'h005) ;
  assign IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1220 =
	     pending_interrupts__h13960 == 12'd0 && !csr_access_data[105] &&
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555 &&
	     csr_access_data[106] &&
	     csr_access_data[9:5] != 5'd0 &&
	     (csr_access_data[24:22] == 3'd1 &&
	      csr_access_data[21:10] == 12'h040 ||
	      csr_access_data[24:22] == 3'd2 &&
	      csr_access_data[21:10] == 12'h040 ||
	      csr_access_data[24:22] == 3'd3 &&
	      csr_access_data[21:10] == 12'h040 ||
	      csr_access_data[24:22] == 3'd5 &&
	      csr_access_data[21:10] == 12'h040 ||
	      (csr_access_data[24:22] == 3'd6 ||
	       csr_access_data[24:22] == 3'd7) &&
	      csr_access_data[21:10] == 12'h040) ;
  assign IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1245 =
	     pending_interrupts__h13960 == 12'd0 && !csr_access_data[105] &&
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555 &&
	     csr_access_data[106] &&
	     csr_access_data[9:5] != 5'd0 &&
	     (csr_access_data[24:22] == 3'd1 &&
	      (csr_access_data[21:10] == 12'h044 ||
	       csr_access_data[21:10] == 12'h344) ||
	      csr_access_data[24:22] == 3'd2 &&
	      (csr_access_data[21:10] == 12'h044 ||
	       csr_access_data[21:10] == 12'h344) ||
	      csr_access_data[24:22] == 3'd3 &&
	      (csr_access_data[21:10] == 12'h044 ||
	       csr_access_data[21:10] == 12'h344) ||
	      csr_access_data[24:22] == 3'd5 &&
	      (csr_access_data[21:10] == 12'h044 ||
	       csr_access_data[21:10] == 12'h344) ||
	      (csr_access_data[24:22] == 3'd6 ||
	       csr_access_data[24:22] == 3'd7) &&
	      (csr_access_data[21:10] == 12'h044 ||
	       csr_access_data[21:10] == 12'h344)) ;
  assign IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1271 =
	     pending_interrupts__h13960 == 12'd0 && !csr_access_data[105] &&
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555 &&
	     csr_access_data[106] &&
	     csr_access_data[9:5] != 5'd0 &&
	     (csr_access_data[24:22] == 3'd1 &&
	      (csr_access_data[21:10] == 12'h002 ||
	       csr_access_data[21:10] == 12'h003) ||
	      csr_access_data[24:22] == 3'd2 &&
	      (csr_access_data[21:10] == 12'h002 ||
	       csr_access_data[21:10] == 12'h003) ||
	      csr_access_data[24:22] == 3'd3 &&
	      (csr_access_data[21:10] == 12'h002 ||
	       csr_access_data[21:10] == 12'h003) ||
	      csr_access_data[24:22] == 3'd5 &&
	      (csr_access_data[21:10] == 12'h002 ||
	       csr_access_data[21:10] == 12'h003) ||
	      (csr_access_data[24:22] == 3'd6 ||
	       csr_access_data[24:22] == 3'd7) &&
	      (csr_access_data[21:10] == 12'h002 ||
	       csr_access_data[21:10] == 12'h003)) ;
  assign IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1319 =
	     pending_interrupts__h13960 == 12'd0 && !csr_access_data[105] &&
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555 &&
	     csr_access_data[106] &&
	     csr_access_data[9:5] != 5'd0 &&
	     (csr_access_data[24:22] == 3'd1 &&
	      (csr_access_data[21:10] == 12'h001 ||
	       csr_access_data[21:10] == 12'h003) ||
	      csr_access_data[24:22] == 3'd2 &&
	      (csr_access_data[21:10] == 12'h001 ||
	       csr_access_data[21:10] == 12'h003) ||
	      csr_access_data[24:22] == 3'd3 &&
	      (csr_access_data[21:10] == 12'h001 ||
	       csr_access_data[21:10] == 12'h003) ||
	      csr_access_data[24:22] == 3'd5 &&
	      (csr_access_data[21:10] == 12'h001 ||
	       csr_access_data[21:10] == 12'h003) ||
	      (csr_access_data[24:22] == 3'd6 ||
	       csr_access_data[24:22] == 3'd7) &&
	      (csr_access_data[21:10] == 12'h001 ||
	       csr_access_data[21:10] == 12'h003)) ;
  assign IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1346 =
	     pending_interrupts__h13960 == 12'd0 && !csr_access_data[105] &&
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555 &&
	     csr_access_data[106] &&
	     csr_access_data[9:5] != 5'd0 &&
	     (csr_access_data[24:22] == 3'd1 &&
	      csr_access_data[21:10] == 12'h301 ||
	      csr_access_data[24:22] == 3'd2 &&
	      csr_access_data[21:10] == 12'h301 ||
	      csr_access_data[24:22] == 3'd3 &&
	      csr_access_data[21:10] == 12'h301 ||
	      csr_access_data[24:22] == 3'd5 &&
	      csr_access_data[21:10] == 12'h301 ||
	      (csr_access_data[24:22] == 3'd6 ||
	       csr_access_data[24:22] == 3'd7) &&
	      csr_access_data[21:10] == 12'h301) ;
  assign IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1363 =
	     pending_interrupts__h13960 == 12'd0 && !csr_access_data[105] &&
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555 &&
	     csr_access_data[106] &&
	     csr_access_data[9:5] != 5'd0 &&
	     (csr_access_data[24:22] == 3'd1 &&
	      csr_access_data[21:10] == 12'h302 ||
	      csr_access_data[24:22] == 3'd2 &&
	      csr_access_data[21:10] == 12'h302 ||
	      csr_access_data[24:22] == 3'd3 &&
	      csr_access_data[21:10] == 12'h302 ||
	      csr_access_data[24:22] == 3'd5 &&
	      csr_access_data[21:10] == 12'h302 ||
	      (csr_access_data[24:22] == 3'd6 ||
	       csr_access_data[24:22] == 3'd7) &&
	      csr_access_data[21:10] == 12'h302) ;
  assign IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1391 =
	     pending_interrupts__h13960 == 12'd0 && !csr_access_data[105] &&
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555 &&
	     csr_access_data[106] &&
	     csr_access_data[9:5] != 5'd0 &&
	     (csr_access_data[24:22] == 3'd1 &&
	      csr_access_data[21:10] == 12'h303 ||
	      csr_access_data[24:22] == 3'd2 &&
	      csr_access_data[21:10] == 12'h303 ||
	      csr_access_data[24:22] == 3'd3 &&
	      csr_access_data[21:10] == 12'h303 ||
	      csr_access_data[24:22] == 3'd5 &&
	      csr_access_data[21:10] == 12'h303 ||
	      (csr_access_data[24:22] == 3'd6 ||
	       csr_access_data[24:22] == 3'd7) &&
	      csr_access_data[21:10] == 12'h303) ;
  assign IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1408 =
	     pending_interrupts__h13960 == 12'd0 && !csr_access_data[105] &&
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555 &&
	     csr_access_data[106] &&
	     csr_access_data[9:5] != 5'd0 &&
	     (csr_access_data[24:22] == 3'd1 &&
	      csr_access_data[21:10] == 12'h304 ||
	      csr_access_data[24:22] == 3'd2 &&
	      csr_access_data[21:10] == 12'h304 ||
	      csr_access_data[24:22] == 3'd3 &&
	      csr_access_data[21:10] == 12'h304 ||
	      csr_access_data[24:22] == 3'd5 &&
	      csr_access_data[21:10] == 12'h304 ||
	      (csr_access_data[24:22] == 3'd6 ||
	       csr_access_data[24:22] == 3'd7) &&
	      csr_access_data[21:10] == 12'h304) ;
  assign IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1435 =
	     pending_interrupts__h13960 == 12'd0 && !csr_access_data[105] &&
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555 &&
	     csr_access_data[106] &&
	     csr_access_data[9:5] != 5'd0 &&
	     (csr_access_data[24:22] == 3'd1 &&
	      csr_access_data[21:10] == 12'h305 ||
	      csr_access_data[24:22] == 3'd2 &&
	      csr_access_data[21:10] == 12'h305 ||
	      csr_access_data[24:22] == 3'd3 &&
	      csr_access_data[21:10] == 12'h305 ||
	      csr_access_data[24:22] == 3'd5 &&
	      csr_access_data[21:10] == 12'h305 ||
	      (csr_access_data[24:22] == 3'd6 ||
	       csr_access_data[24:22] == 3'd7) &&
	      csr_access_data[21:10] == 12'h305) ;
  assign IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1452 =
	     pending_interrupts__h13960 == 12'd0 && !csr_access_data[105] &&
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555 &&
	     csr_access_data[106] &&
	     csr_access_data[9:5] != 5'd0 &&
	     (csr_access_data[24:22] == 3'd1 &&
	      csr_access_data[21:10] == 12'h340 ||
	      csr_access_data[24:22] == 3'd2 &&
	      csr_access_data[21:10] == 12'h340 ||
	      csr_access_data[24:22] == 3'd3 &&
	      csr_access_data[21:10] == 12'h340 ||
	      csr_access_data[24:22] == 3'd5 &&
	      csr_access_data[21:10] == 12'h340 ||
	      (csr_access_data[24:22] == 3'd6 ||
	       csr_access_data[24:22] == 3'd7) &&
	      csr_access_data[21:10] == 12'h340) ;
  assign IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1469 =
	     pending_interrupts__h13960 == 12'd0 && !csr_access_data[105] &&
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555 &&
	     csr_access_data[106] &&
	     csr_access_data[9:5] != 5'd0 &&
	     (csr_access_data[24:22] == 3'd1 &&
	      csr_access_data[21:10] == 12'h344 ||
	      csr_access_data[24:22] == 3'd2 &&
	      csr_access_data[21:10] == 12'h344 ||
	      csr_access_data[24:22] == 3'd3 &&
	      csr_access_data[21:10] == 12'h344 ||
	      csr_access_data[24:22] == 3'd5 &&
	      csr_access_data[21:10] == 12'h344 ||
	      (csr_access_data[24:22] == 3'd6 ||
	       csr_access_data[24:22] == 3'd7) &&
	      csr_access_data[21:10] == 12'h344) ;
  assign IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1486 =
	     pending_interrupts__h13960 == 12'd0 && !csr_access_data[105] &&
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555 &&
	     csr_access_data[106] &&
	     csr_access_data[9:5] != 5'd0 &&
	     (csr_access_data[24:22] == 3'd1 &&
	      csr_access_data[21:10] == 12'h380 ||
	      csr_access_data[24:22] == 3'd2 &&
	      csr_access_data[21:10] == 12'h380 ||
	      csr_access_data[24:22] == 3'd3 &&
	      csr_access_data[21:10] == 12'h380 ||
	      csr_access_data[24:22] == 3'd5 &&
	      csr_access_data[21:10] == 12'h380 ||
	      (csr_access_data[24:22] == 3'd6 ||
	       csr_access_data[24:22] == 3'd7) &&
	      csr_access_data[21:10] == 12'h380) ;
  assign IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1503 =
	     pending_interrupts__h13960 == 12'd0 && !csr_access_data[105] &&
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555 &&
	     csr_access_data[106] &&
	     csr_access_data[9:5] != 5'd0 &&
	     (csr_access_data[24:22] == 3'd1 &&
	      csr_access_data[21:10] == 12'h381 ||
	      csr_access_data[24:22] == 3'd2 &&
	      csr_access_data[21:10] == 12'h381 ||
	      csr_access_data[24:22] == 3'd3 &&
	      csr_access_data[21:10] == 12'h381 ||
	      csr_access_data[24:22] == 3'd5 &&
	      csr_access_data[21:10] == 12'h381 ||
	      (csr_access_data[24:22] == 3'd6 ||
	       csr_access_data[24:22] == 3'd7) &&
	      csr_access_data[21:10] == 12'h381) ;
  assign IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1520 =
	     pending_interrupts__h13960 == 12'd0 && !csr_access_data[105] &&
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555 &&
	     csr_access_data[106] &&
	     csr_access_data[9:5] != 5'd0 &&
	     (csr_access_data[24:22] == 3'd1 &&
	      csr_access_data[21:10] == 12'h382 ||
	      csr_access_data[24:22] == 3'd2 &&
	      csr_access_data[21:10] == 12'h382 ||
	      csr_access_data[24:22] == 3'd3 &&
	      csr_access_data[21:10] == 12'h382 ||
	      csr_access_data[24:22] == 3'd5 &&
	      csr_access_data[21:10] == 12'h382 ||
	      (csr_access_data[24:22] == 3'd6 ||
	       csr_access_data[24:22] == 3'd7) &&
	      csr_access_data[21:10] == 12'h382) ;
  assign IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1537 =
	     pending_interrupts__h13960 == 12'd0 && !csr_access_data[105] &&
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555 &&
	     csr_access_data[106] &&
	     csr_access_data[9:5] != 5'd0 &&
	     (csr_access_data[24:22] == 3'd1 &&
	      csr_access_data[21:10] == 12'h383 ||
	      csr_access_data[24:22] == 3'd2 &&
	      csr_access_data[21:10] == 12'h383 ||
	      csr_access_data[24:22] == 3'd3 &&
	      csr_access_data[21:10] == 12'h383 ||
	      csr_access_data[24:22] == 3'd5 &&
	      csr_access_data[21:10] == 12'h383 ||
	      (csr_access_data[24:22] == 3'd6 ||
	       csr_access_data[24:22] == 3'd7) &&
	      csr_access_data[21:10] == 12'h383) ;
  assign IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1554 =
	     pending_interrupts__h13960 == 12'd0 && !csr_access_data[105] &&
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555 &&
	     csr_access_data[106] &&
	     csr_access_data[9:5] != 5'd0 &&
	     (csr_access_data[24:22] == 3'd1 &&
	      csr_access_data[21:10] == 12'h384 ||
	      csr_access_data[24:22] == 3'd2 &&
	      csr_access_data[21:10] == 12'h384 ||
	      csr_access_data[24:22] == 3'd3 &&
	      csr_access_data[21:10] == 12'h384 ||
	      csr_access_data[24:22] == 3'd5 &&
	      csr_access_data[21:10] == 12'h384 ||
	      (csr_access_data[24:22] == 3'd6 ||
	       csr_access_data[24:22] == 3'd7) &&
	      csr_access_data[21:10] == 12'h384) ;
  assign IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1571 =
	     pending_interrupts__h13960 == 12'd0 && !csr_access_data[105] &&
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555 &&
	     csr_access_data[106] &&
	     csr_access_data[9:5] != 5'd0 &&
	     (csr_access_data[24:22] == 3'd1 &&
	      csr_access_data[21:10] == 12'h385 ||
	      csr_access_data[24:22] == 3'd2 &&
	      csr_access_data[21:10] == 12'h385 ||
	      csr_access_data[24:22] == 3'd3 &&
	      csr_access_data[21:10] == 12'h385 ||
	      csr_access_data[24:22] == 3'd5 &&
	      csr_access_data[21:10] == 12'h385 ||
	      (csr_access_data[24:22] == 3'd6 ||
	       csr_access_data[24:22] == 3'd7) &&
	      csr_access_data[21:10] == 12'h385) ;
  assign IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1588 =
	     pending_interrupts__h13960 == 12'd0 && !csr_access_data[105] &&
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555 &&
	     csr_access_data[106] &&
	     csr_access_data[9:5] != 5'd0 &&
	     (csr_access_data[24:22] == 3'd1 &&
	      csr_access_data[21:10] == 12'hB00 ||
	      csr_access_data[24:22] == 3'd2 &&
	      csr_access_data[21:10] == 12'hB00 ||
	      csr_access_data[24:22] == 3'd3 &&
	      csr_access_data[21:10] == 12'hB00 ||
	      csr_access_data[24:22] == 3'd5 &&
	      csr_access_data[21:10] == 12'hB00 ||
	      (csr_access_data[24:22] == 3'd6 ||
	       csr_access_data[24:22] == 3'd7) &&
	      csr_access_data[21:10] == 12'hB00) ;
  assign IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1605 =
	     pending_interrupts__h13960 == 12'd0 && !csr_access_data[105] &&
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555 &&
	     csr_access_data[106] &&
	     csr_access_data[9:5] != 5'd0 &&
	     (csr_access_data[24:22] == 3'd1 &&
	      csr_access_data[21:10] == 12'hB02 ||
	      csr_access_data[24:22] == 3'd2 &&
	      csr_access_data[21:10] == 12'hB02 ||
	      csr_access_data[24:22] == 3'd3 &&
	      csr_access_data[21:10] == 12'hB02 ||
	      csr_access_data[24:22] == 3'd5 &&
	      csr_access_data[21:10] == 12'hB02 ||
	      (csr_access_data[24:22] == 3'd6 ||
	       csr_access_data[24:22] == 3'd7) &&
	      csr_access_data[21:10] == 12'hB02) ;
  assign IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1622 =
	     pending_interrupts__h13960 == 12'd0 && !csr_access_data[105] &&
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555 &&
	     csr_access_data[106] &&
	     csr_access_data[9:5] != 5'd0 &&
	     (csr_access_data[24:22] == 3'd1 &&
	      csr_access_data[21:10] == 12'hB80 ||
	      csr_access_data[24:22] == 3'd2 &&
	      csr_access_data[21:10] == 12'hB80 ||
	      csr_access_data[24:22] == 3'd3 &&
	      csr_access_data[21:10] == 12'hB80 ||
	      csr_access_data[24:22] == 3'd5 &&
	      csr_access_data[21:10] == 12'hB80 ||
	      (csr_access_data[24:22] == 3'd6 ||
	       csr_access_data[24:22] == 3'd7) &&
	      csr_access_data[21:10] == 12'hB80) ;
  assign IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1639 =
	     pending_interrupts__h13960 == 12'd0 && !csr_access_data[105] &&
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555 &&
	     csr_access_data[106] &&
	     csr_access_data[9:5] != 5'd0 &&
	     (csr_access_data[24:22] == 3'd1 &&
	      csr_access_data[21:10] == 12'hB82 ||
	      csr_access_data[24:22] == 3'd2 &&
	      csr_access_data[21:10] == 12'hB82 ||
	      csr_access_data[24:22] == 3'd3 &&
	      csr_access_data[21:10] == 12'hB82 ||
	      csr_access_data[24:22] == 3'd5 &&
	      csr_access_data[21:10] == 12'hB82 ||
	      (csr_access_data[24:22] == 3'd6 ||
	       csr_access_data[24:22] == 3'd7) &&
	      csr_access_data[21:10] == 12'hB82) ;
  assign IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1656 =
	     pending_interrupts__h13960 == 12'd0 && !csr_access_data[105] &&
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555 &&
	     csr_access_data[106] &&
	     csr_access_data[9:5] != 5'd0 &&
	     (csr_access_data[24:22] == 3'd1 &&
	      csr_access_data[21:10] == 12'h320 ||
	      csr_access_data[24:22] == 3'd2 &&
	      csr_access_data[21:10] == 12'h320 ||
	      csr_access_data[24:22] == 3'd3 &&
	      csr_access_data[21:10] == 12'h320 ||
	      csr_access_data[24:22] == 3'd5 &&
	      csr_access_data[21:10] == 12'h320 ||
	      (csr_access_data[24:22] == 3'd6 ||
	       csr_access_data[24:22] == 3'd7) &&
	      csr_access_data[21:10] == 12'h320) ;
  assign IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d1695 =
	     pending_interrupts__h13960 == 12'd0 && !csr_access_data[105] &&
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555 &&
	     csr_access_data[106] &&
	     csr_access_data[9:5] != 5'd0 &&
	     (csr_access_data[24:22] == 3'd1 &&
	      csr_access_data[21:10] == 12'h77F ||
	      csr_access_data[24:22] == 3'd2 &&
	      csr_access_data[21:10] == 12'h77F ||
	      csr_access_data[24:22] == 3'd3 &&
	      csr_access_data[21:10] == 12'h77F ||
	      csr_access_data[24:22] == 3'd5 &&
	      csr_access_data[21:10] == 12'h77F ||
	      (csr_access_data[24:22] == 3'd6 ||
	       csr_access_data[24:22] == 3'd7) &&
	      csr_access_data[21:10] == 12'h77F) ;
  assign IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d575 =
	     pending_interrupts__h13960 == 12'd0 && !csr_access_data[105] &&
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555 &&
	     csr_access_data[106] &&
	     csr_access_data[9:5] != 5'd0 &&
	     (csr_access_data[24:22] == 3'd1 &&
	      csr_access_data[21:10] == 12'h042 ||
	      csr_access_data[24:22] == 3'd2 &&
	      csr_access_data[21:10] == 12'h042 ||
	      csr_access_data[24:22] == 3'd3 &&
	      csr_access_data[21:10] == 12'h042 ||
	      csr_access_data[24:22] == 3'd5 &&
	      csr_access_data[21:10] == 12'h042 ||
	      (csr_access_data[24:22] == 3'd6 ||
	       csr_access_data[24:22] == 3'd7) &&
	      csr_access_data[21:10] == 12'h042) ;
  assign IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d784 =
	     pending_interrupts__h13960 == 12'd0 && !csr_access_data[105] &&
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555 &&
	     csr_access_data[106] &&
	     csr_access_data[9:5] != 5'd0 &&
	     (csr_access_data[24:22] == 3'd1 &&
	      csr_access_data[21:10] == 12'h041 ||
	      csr_access_data[24:22] == 3'd2 &&
	      csr_access_data[21:10] == 12'h041 ||
	      csr_access_data[24:22] == 3'd3 &&
	      csr_access_data[21:10] == 12'h041 ||
	      csr_access_data[24:22] == 3'd5 &&
	      csr_access_data[21:10] == 12'h041 ||
	      (csr_access_data[24:22] == 3'd6 ||
	       csr_access_data[24:22] == 3'd7) &&
	      csr_access_data[21:10] == 12'h041) ;
  assign IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d824 =
	     pending_interrupts__h13960 == 12'd0 && !csr_access_data[105] &&
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555 &&
	     csr_access_data[106] &&
	     csr_access_data[9:5] != 5'd0 &&
	     (csr_access_data[24:22] == 3'd1 &&
	      csr_access_data[21:10] == 12'h043 ||
	      csr_access_data[24:22] == 3'd2 &&
	      csr_access_data[21:10] == 12'h043 ||
	      csr_access_data[24:22] == 3'd3 &&
	      csr_access_data[21:10] == 12'h043 ||
	      csr_access_data[24:22] == 3'd5 &&
	      csr_access_data[21:10] == 12'h043 ||
	      (csr_access_data[24:22] == 3'd6 ||
	       csr_access_data[24:22] == 3'd7) &&
	      csr_access_data[21:10] == 12'h043) ;
  assign IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d889 =
	     pending_interrupts__h13960 == 12'd0 && !csr_access_data[105] &&
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555 &&
	     csr_access_data[106] &&
	     csr_access_data[9:5] != 5'd0 &&
	     (csr_access_data[24:22] == 3'd1 &&
	      csr_access_data[21:10] == 12'h342 ||
	      csr_access_data[24:22] == 3'd2 &&
	      csr_access_data[21:10] == 12'h342 ||
	      csr_access_data[24:22] == 3'd3 &&
	      csr_access_data[21:10] == 12'h342 ||
	      csr_access_data[24:22] == 3'd5 &&
	      csr_access_data[21:10] == 12'h342 ||
	      (csr_access_data[24:22] == 3'd6 ||
	       csr_access_data[24:22] == 3'd7) &&
	      csr_access_data[21:10] == 12'h342) ;
  assign IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d907 =
	     pending_interrupts__h13960 == 12'd0 && !csr_access_data[105] &&
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555 &&
	     csr_access_data[106] &&
	     csr_access_data[9:5] != 5'd0 &&
	     (csr_access_data[24:22] == 3'd1 &&
	      csr_access_data[21:10] == 12'h341 ||
	      csr_access_data[24:22] == 3'd2 &&
	      csr_access_data[21:10] == 12'h341 ||
	      csr_access_data[24:22] == 3'd3 &&
	      csr_access_data[21:10] == 12'h341 ||
	      csr_access_data[24:22] == 3'd5 &&
	      csr_access_data[21:10] == 12'h341 ||
	      (csr_access_data[24:22] == 3'd6 ||
	       csr_access_data[24:22] == 3'd7) &&
	      csr_access_data[21:10] == 12'h341) ;
  assign IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d927 =
	     pending_interrupts__h13960 == 12'd0 && !csr_access_data[105] &&
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555 &&
	     csr_access_data[106] &&
	     csr_access_data[9:5] != 5'd0 &&
	     (csr_access_data[24:22] == 3'd1 &&
	      csr_access_data[21:10] == 12'h343 ||
	      csr_access_data[24:22] == 3'd2 &&
	      csr_access_data[21:10] == 12'h343 ||
	      csr_access_data[24:22] == 3'd3 &&
	      csr_access_data[21:10] == 12'h343 ||
	      csr_access_data[24:22] == 3'd5 &&
	      csr_access_data[21:10] == 12'h343 ||
	      (csr_access_data[24:22] == 3'd6 ||
	       csr_access_data[24:22] == 3'd7) &&
	      csr_access_data[21:10] == 12'h343) ;
  assign IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d949 =
	     pending_interrupts__h13960 == 12'd0 && !csr_access_data[105] &&
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555 &&
	     csr_access_data[106] &&
	     (csr_access_data[24:22] == 3'd0 &&
	      csr_access_data[21:10] == 12'h302 &&
	      rg_mpp != 2'd0 ||
	      csr_access_data[24:22] != 3'd0 &&
	      NOT_csr_access_data_BITS_9_TO_5_30_EQ_0_31_32__ETC___d945) ;
  assign IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d967 =
	     pending_interrupts__h13960 == 12'd0 && !csr_access_data[105] &&
	     IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555 &&
	     csr_access_data[106] &&
	     (csr_access_data[24:22] == 3'd0 &&
	      csr_access_data[21:10] == 12'h302 ||
	      csr_access_data[24:22] != 3'd0 &&
	      NOT_csr_access_data_BITS_9_TO_5_30_EQ_0_31_32__ETC___d945) ;
  assign IF_rg_prv_76_EQ_0_77_THEN_rg_prv_76_ELSE_3_27__ETC___d429 =
	     IF_rg_prv_76_EQ_0_77_THEN_rg_prv_76_ELSE_3___d427 <
	     csr_access_data[19:18] ;
  assign IF_rg_prv_76_EQ_0_77_THEN_rg_prv_76_ELSE_3___d427 =
	     (rg_prv == 2'd0) ? rg_prv : 2'd3 ;
  assign NOT_IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN__ETC___d446 =
	     pending_interrupts__h13960 != 12'd0 || csr_access_data[105] ||
	     csr_access_data[106] &&
	     (IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d439 ||
	      csr_access_data[24:22] == 3'd0 &&
	      (csr_access_data[21:10] == 12'h302 ||
	       csr_access_data[21:10] == 12'h002)) ;
  assign NOT_IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN__ETC___d486 =
	     (pending_interrupts__h13960 != 12'd0 || csr_access_data[105] ||
	      csr_access_data[106] &&
	      IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d439) &&
	     rg_prv_76_EQ_0_77_AND_IF_IF_rg_mie_75_OR_rg_pr_ETC___d479 ;
  assign NOT_IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN__ETC___d872 =
	     (pending_interrupts__h13960 != 12'd0 || csr_access_data[105] ||
	      csr_access_data[106] &&
	      IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d439) &&
	     NOT_rg_prv_76_EQ_0_77_88_OR_IF_IF_rg_mie_75_OR_ETC___d871 ;
  assign NOT_csr_access_data_BITS_4_TO_0_717_OR_rg_ffla_ETC___d1721 =
	     x1__h17287 != rg_fflags ;
  assign NOT_csr_access_data_BITS_9_TO_5_30_EQ_0_31_32__ETC___d844 =
	     csr_access_data[9:5] != 5'd0 &&
	     (csr_access_data[24:22] == 3'd1 &&
	      (csr_access_data[21:10] == 12'h0 ||
	       csr_access_data[21:10] == 12'h300) ||
	      csr_access_data[24:22] == 3'd2 &&
	      (csr_access_data[21:10] == 12'h0 ||
	       csr_access_data[21:10] == 12'h300) ||
	      csr_access_data[24:22] == 3'd3 &&
	      (csr_access_data[21:10] == 12'h0 ||
	       csr_access_data[21:10] == 12'h300) ||
	      csr_access_data[24:22] == 3'd5 &&
	      (csr_access_data[21:10] == 12'h0 ||
	       csr_access_data[21:10] == 12'h300) ||
	      (csr_access_data[24:22] == 3'd6 ||
	       csr_access_data[24:22] == 3'd7) &&
	      (csr_access_data[21:10] == 12'h0 ||
	       csr_access_data[21:10] == 12'h300)) ;
  assign NOT_csr_access_data_BITS_9_TO_5_30_EQ_0_31_32__ETC___d945 =
	     csr_access_data[9:5] != 5'd0 &&
	     (csr_access_data[24:22] == 3'd1 &&
	      csr_access_data[21:10] == 12'h300 ||
	      csr_access_data[24:22] == 3'd2 &&
	      csr_access_data[21:10] == 12'h300 ||
	      csr_access_data[24:22] == 3'd3 &&
	      csr_access_data[21:10] == 12'h300 ||
	      csr_access_data[24:22] == 3'd5 &&
	      csr_access_data[21:10] == 12'h300 ||
	      (csr_access_data[24:22] == 3'd6 ||
	       csr_access_data[24:22] == 3'd7) &&
	      csr_access_data[21:10] == 12'h300) ;
  assign NOT_rg_prv_76_EQ_0_77_88_OR_IF_IF_rg_mie_75_OR_ETC___d871 =
	     rg_prv != 2'd0 ||
	     ((pending_interrupts__h13960 == 12'd0) ?
		!x6060_SRL_y6061__q1[0] :
		!csr_mideleg__read4219_SRL_IF_IF_rg_mie_75_OR_r_ETC__q2[0]) ;
  assign _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761 =
	     { 27'd0, csr_access_data[9:5] } & y__h25620 ;
  assign _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760 =
	     { 27'd0, csr_access_data[9:5] } | csr__read__h18075 ;
  assign _dor2uart_pwXmitCellCountReset$EN_wset =
	     WILL_FIRE_RL_uart_transmit_send_stop_bit2 ||
	     WILL_FIRE_RL_uart_transmit_send_stop_bit ||
	     WILL_FIRE_RL_uart_transmit_send_parity_bit ||
	     WILL_FIRE_RL_uart_transmit_wait_1_bit_cell_time ||
	     WILL_FIRE_RL_uart_transmit_send_start_bit ;
  assign _theResult_____3_fst__h16268 =
	     { 27'd0,
	       (pending_interrupts__h13960 == 12'd0) ?
		 y__h16061 :
		 IF_IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_m_ETC___d272 } ;
  assign cause__h15997 =
	     { pending_interrupts__h13960 != 12'd0,
	       _theResult_____3_fst__h16268 } ;
  assign csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758 =
	     csr_access_data[138:107] & y__h25620 ;
  assign csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756 =
	     csr_access_data[138:107] | csr__read__h18075 ;
  assign csr_access_data_BITS_24_TO_22_74_EQ_0_75_AND_c_ETC___d846 =
	     csr_access_data[24:22] == 3'd0 &&
	     (csr_access_data[21:10] == 12'h302 && rg_mpp == 2'd0 ||
	      csr_access_data[21:10] == 12'h002) ||
	     csr_access_data[24:22] != 3'd0 &&
	     NOT_csr_access_data_BITS_9_TO_5_30_EQ_0_31_32__ETC___d844 ;
  assign csr_access_data_BIT_105_10_OR_csr_access_data__ETC___d825 =
	     (csr_access_data[105] ||
	      csr_access_data[106] &&
	      IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d439) &&
	     rg_prv_76_EQ_0_77_AND_IF_IF_rg_mie_75_OR_rg_pr_ETC___d479 &&
	     pending_interrupts__h13960 == 12'd0 &&
	     (IF_csr_access_data_BIT_105_10_THEN_IF_csr_acce_ETC___d793 ==
	      4'd0 ||
	      IF_csr_access_data_BIT_105_10_THEN_IF_csr_acce_ETC___d793 ==
	      4'd1 ||
	      IF_csr_access_data_BIT_105_10_THEN_IF_csr_acce_ETC___d793 ==
	      4'd4 ||
	      IF_csr_access_data_BIT_105_10_THEN_IF_csr_acce_ETC___d793 ==
	      4'd5 ||
	      IF_csr_access_data_BIT_105_10_THEN_IF_csr_acce_ETC___d793 ==
	      4'd6 ||
	      IF_csr_access_data_BIT_105_10_THEN_IF_csr_acce_ETC___d793 ==
	      4'd7) ||
	     IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d824 ;
  assign csr_access_data_BIT_105_10_OR_csr_access_data__ETC___d928 =
	     (csr_access_data[105] ||
	      csr_access_data[106] &&
	      IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d439) &&
	     NOT_rg_prv_76_EQ_0_77_88_OR_IF_IF_rg_mie_75_OR_ETC___d871 &&
	     pending_interrupts__h13960 == 12'd0 &&
	     (IF_csr_access_data_BIT_105_10_THEN_IF_csr_acce_ETC___d793 ==
	      4'd0 ||
	      IF_csr_access_data_BIT_105_10_THEN_IF_csr_acce_ETC___d793 ==
	      4'd1 ||
	      IF_csr_access_data_BIT_105_10_THEN_IF_csr_acce_ETC___d793 ==
	      4'd4 ||
	      IF_csr_access_data_BIT_105_10_THEN_IF_csr_acce_ETC___d793 ==
	      4'd5 ||
	      IF_csr_access_data_BIT_105_10_THEN_IF_csr_acce_ETC___d793 ==
	      4'd6 ||
	      IF_csr_access_data_BIT_105_10_THEN_IF_csr_acce_ETC___d793 ==
	      4'd7) ||
	     IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_meip_ETC___d927 ;
  assign csr_fcsr__read__h17758 =
	     { r1__read__h18290, x_port1__read__h18277 } ;
  assign csr_fflags__read__h17750 = { 27'd0, x_port1__read__h18277 } ;
  assign csr_frm__read__h17742 = { 29'd0, rg_frm } ;
  assign csr_mideleg__read4219_SRL_IF_IF_rg_mie_75_OR_r_ETC__q2 =
	     csr_mideleg__read__h14219 >>
	     IF_IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_m_ETC___d272 ;
  assign csr_mideleg__read__h14219 = { 20'd0, rg_mideleg } ;
  assign csr_mie__read__h14164 = { r1__read__h14166, rg_usie } ;
  assign csr_mip__read__h14065 = { r1__read__h14067, rg_usip } ;
  assign csr_mstatus__read__h17875 = { r1__read__h18333, rg_uie } ;
  assign csr_mtvec__read__h17897 = { rg_mtvec, 2'b0 } ;
  assign csr_mucounteren__read__h18010 = { r1__read__h18398, rg_u_cy } ;
  assign csr_uartrx__read__h18029 = { 23'd0, rg_rx } ;
  assign csr_uarttx__read__h18018 = { r1__read__h18418, rg_tx } ;
  assign csr_uie__read__h17653 = { r1__read__h18158, rg_usie } ;
  assign csr_uip__read__h17734 = { r1__read__h18207, rg_usip } ;
  assign csr_ustatus__read__h17600 = { r1__read__h18077, rg_uie } ;
  assign csr_utvec__read__h17663 = { rg_utvec, 2'b0 } ;
  assign meip_AND_rg_meie_79_80_CONCAT_0_81_CONCAT_0_CO_ETC___d194 =
	     { meip & rg_meie,
	       2'd0,
	       ueip & rg_ueie,
	       r__h14100 & rg_mtie,
	       2'd0,
	       rg_utip & rg_utie } ;
  assign pending_interrupts__h13955 =
	     { meip_AND_rg_meie_79_80_CONCAT_0_81_CONCAT_0_CO_ETC___d194,
	       3'd0,
	       rg_usip & rg_usie } ;
  assign pending_interrupts__h13960 =
	     ((rg_mie || rg_prv == 2'd0) ?
		pending_machine_interrupts__h13956 :
		12'd0) |
	     ((rg_uie && rg_prv == 2'd0) ?
		pending_user_interrupts__h13958 :
		12'd0) ;
  assign pending_machine_interrupts__h13956 =
	     pending_interrupts__h13955 & y__h14016 ;
  assign pending_user_interrupts__h13958 =
	     pending_interrupts__h13955 & rg_mideleg ;
  assign r1__read__h14067 = { r1__read__h14069, 1'd0 } ;
  assign r1__read__h14069 = { r1__read__h14071, 1'd0 } ;
  assign r1__read__h14071 = { r1__read__h14073, 1'd0 } ;
  assign r1__read__h14073 = { r1__read__h14075, rg_utip } ;
  assign r1__read__h14075 = { r1__read__h14077, 1'd0 } ;
  assign r1__read__h14077 = { r1__read__h14079, 1'd0 } ;
  assign r1__read__h14079 = { r1__read__h14081, r__h14100 } ;
  assign r1__read__h14081 = { r1__read__h14083, ueip } ;
  assign r1__read__h14083 = { r1__read__h14085, 1'd0 } ;
  assign r1__read__h14085 = { r1__read__h14087, 1'd0 } ;
  assign r1__read__h14087 = { 20'd0, meip } ;
  assign r1__read__h14166 = { r1__read__h14168, 1'd0 } ;
  assign r1__read__h14168 = { r1__read__h14170, 1'd0 } ;
  assign r1__read__h14170 = { r1__read__h14172, rg_msie } ;
  assign r1__read__h14172 = { r1__read__h14174, rg_utie } ;
  assign r1__read__h14174 = { r1__read__h14176, 1'd0 } ;
  assign r1__read__h14176 = { r1__read__h14178, 1'd0 } ;
  assign r1__read__h14178 = { r1__read__h14180, rg_mtie } ;
  assign r1__read__h14180 = { r1__read__h14182, rg_ueie } ;
  assign r1__read__h14182 = { r1__read__h14184, 1'd0 } ;
  assign r1__read__h14184 = { r1__read__h14186, 1'd0 } ;
  assign r1__read__h14186 = { 20'd0, rg_meie } ;
  assign r1__read__h18077 = { r1__read__h18079, 1'b0 } ;
  assign r1__read__h18079 = { r1__read__h18081, 1'b0 } ;
  assign r1__read__h18081 = { r1__read__h18083, 1'b0 } ;
  assign r1__read__h18083 = { r1__read__h18085, rg_upie } ;
  assign r1__read__h18085 = { r1__read__h18087, 1'b0 } ;
  assign r1__read__h18087 = { r1__read__h18089, 1'b0 } ;
  assign r1__read__h18089 = { r1__read__h18091, 1'b0 } ;
  assign r1__read__h18091 = { r1__read__h18093, 1'b0 } ;
  assign r1__read__h18093 = { r1__read__h18095, 1'b0 } ;
  assign r1__read__h18095 = { r1__read__h18097, 1'b0 } ;
  assign r1__read__h18097 = { r1__read__h18099, rg_fs } ;
  assign r1__read__h18099 = { r1__read__h18101, 2'd0 } ;
  assign r1__read__h18101 = { r1__read__h18103, rg_mprv } ;
  assign r1__read__h18103 = { r1__read__h18105, rg_pum } ;
  assign r1__read__h18105 = { r1__read__h18107, rg_mxr } ;
  assign r1__read__h18107 = { r1__read__h18109, 4'b0 } ;
  assign r1__read__h18109 = { r1__read__h18111, rg_vm } ;
  assign r1__read__h18111 = { r__h18114, 4'd0 } ;
  assign r1__read__h18158 = { r1__read__h18160, 1'b0 } ;
  assign r1__read__h18160 = { r1__read__h18162, 1'b0 } ;
  assign r1__read__h18162 = { r1__read__h18164, 1'b0 } ;
  assign r1__read__h18164 = { r1__read__h18166, rg_utie } ;
  assign r1__read__h18166 = { r1__read__h18168, 1'b0 } ;
  assign r1__read__h18168 = { r1__read__h18170, 1'b0 } ;
  assign r1__read__h18170 = { r1__read__h18172, 1'b0 } ;
  assign r1__read__h18172 = { 23'd0, rg_ueie } ;
  assign r1__read__h18207 = { r1__read__h18209, 1'b0 } ;
  assign r1__read__h18209 = { r1__read__h18211, 1'b0 } ;
  assign r1__read__h18211 = { r1__read__h18213, 1'b0 } ;
  assign r1__read__h18213 = { r1__read__h18215, rg_utip } ;
  assign r1__read__h18215 = { r1__read__h18217, 1'b0 } ;
  assign r1__read__h18217 = { r1__read__h18219, 1'b0 } ;
  assign r1__read__h18219 = { r1__read__h18221, 1'b0 } ;
  assign r1__read__h18221 = { 23'd0, ueip } ;
  assign r1__read__h18290 = { 24'd0, rg_frm } ;
  assign r1__read__h18333 = { r1__read__h18335, 1'd0 } ;
  assign r1__read__h18335 = { r1__read__h18337, 1'd0 } ;
  assign r1__read__h18337 = { r1__read__h18339, rg_mie } ;
  assign r1__read__h18339 = { r1__read__h18341, rg_upie } ;
  assign r1__read__h18341 = { r1__read__h18343, 1'd0 } ;
  assign r1__read__h18343 = { r1__read__h18345, 1'd0 } ;
  assign r1__read__h18345 = { r1__read__h18347, rg_mpie } ;
  assign r1__read__h18347 = { r1__read__h18349, 1'd0 } ;
  assign r1__read__h18349 = { r1__read__h18351, 2'd0 } ;
  assign r1__read__h18351 = { r1__read__h18353, rg_mpp } ;
  assign r1__read__h18353 = { r1__read__h18355, rg_fs } ;
  assign r1__read__h18355 = { r1__read__h18357, 2'd0 } ;
  assign r1__read__h18357 = { r1__read__h18359, rg_mprv } ;
  assign r1__read__h18359 = { r1__read__h18361, rg_pum } ;
  assign r1__read__h18361 = { r1__read__h18363, rg_mxr } ;
  assign r1__read__h18363 = { r1__read__h18365, 4'b0 } ;
  assign r1__read__h18365 = { r1__read__h18367, rg_vm } ;
  assign r1__read__h18367 = { r__h18114, 2'd0 } ;
  assign r1__read__h18398 = { r1__read__h18400, rg_u_tm } ;
  assign r1__read__h18400 = { 29'd0, rg_u_ir } ;
  assign r1__read__h18418 = { 23'd0, uart_fifoXmit$FULL_N } ;
  assign r__h14100 = EN_mtip && mtip_mtip1 ;
  assign r__h18114 = rg_fs == 2'b11 ;
  assign rg_prv_76_EQ_0_77_AND_IF_IF_rg_mie_75_OR_rg_pr_ETC___d479 =
	     rg_prv == 2'd0 &&
	     ((pending_interrupts__h13960 == 12'd0) ?
		x6060_SRL_y6061__q1[0] :
		csr_mideleg__read4219_SRL_IF_IF_rg_mie_75_OR_r_ETC__q2[0]) ;
  assign uart_baudGen_rBaudCounter_value_PLUS_1_8_ULT_130___d29 =
	     uart_baudGen_rBaudCounter$Q_OUT + 16'd1 < 16'd130 ;
  assign x1__h17287 = csr_access_data[4:0] | rg_fflags ;
  assign x1__h30838 = { 3'd0, csr_access_data[9:5] } ;
  assign x1_avValue_address__h17003 =
	     { rg_prv_76_EQ_0_77_AND_IF_IF_rg_mie_75_OR_rg_pr_ETC___d479 ?
		 rg_utvec :
		 rg_mtvec,
	       2'b0 } ;
  assign x1_avValue_address__h37445 =
	     (csr_access_data[24:22] == 3'd0) ?
	       x1_avValue_address__h18845 :
	       32'd0 ;
  assign x1_avValue_address__h37461 =
	     csr_access_data[106] ? x1_avValue_address__h37445 : 32'd0 ;
  assign x6060_SRL_y6061__q1 = x__h16060 >> y__h16061 ;
  assign x__h13927 =
	     (pending_interrupts__h13960 != 12'd0 || csr_access_data[105] ||
	      csr_access_data[106] &&
	      IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d439) ?
	       x1_avValue_address__h17003 :
	       x1_avValue_address__h37461 ;
  assign x__h16060 = { 20'd0, rg_medeleg } ;
  assign x__h16955 = (rg_prv == 2'd0) ? rg_uie : rg_mie ;
  assign x__h29171 = { 27'd0, csr_access_data[9:7] } ;
  assign x__h31003 = { 7'd0, csr_access_data[9:5] } ;
  assign x__h37496 =
	     (pending_interrupts__h13960 != 12'd0 || csr_access_data[105] ||
	      IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d439 ||
	      !csr_access_data[106] ||
	      csr_access_data[24:22] == 3'd0) ?
	       csr_access_data[36:5] :
	       csr__read__h18075 ;
  assign x__h5899 = uart_rRecvCellCount + 4'd1 ;
  assign x__h7540 = uart_rRecvBitCount + 4'd1 ;
  assign x__h9355 = uart_rXmitCellCount + 4'd1 ;
  assign x__h9381 = uart_rXmitBitCount + 4'd1 ;
  assign x_port1__read__h17968 =
	     csr_minstret$EN_port0__write ?
	       csr_minstret$port0__write_1 :
	       csr_minstret ;
  assign x_port1__read__h17981 =
	     (csr_mcycle == 32'hFFFFFFFF) ?
	       csr_mcycleh$port0__write_1 :
	       csr_mcycleh ;
  assign x_port1__read__h17994 =
	     csr_minstreth$EN_port0__write ?
	       csr_minstreth$port0__write_1 :
	       csr_minstreth ;
  assign x_port1__read__h18277 =
	     rg_fflags$EN_port0__write ? x1__h17287 : rg_fflags ;
  assign y__h14016 = ~rg_mideleg ;
  assign y__h16061 =
	     (csr_access_data[105] && csr_access_data[104:101] == 4'd0) ?
	       4'd0 :
	       ((csr_access_data[105] && csr_access_data[104:101] == 4'd1) ?
		  4'd1 :
		  ((csr_access_data[105] ?
		      csr_access_data[104:101] == 4'd2 :
		      csr_access_data[24:22] != 3'd0 ||
		      csr_access_data[21:10] != 12'h0 &&
		      csr_access_data[21:10] != 12'h001) ?
		     4'd2 :
		     ((csr_access_data[105] ?
			 csr_access_data[104:101] == 4'd3 :
			 csr_access_data[24:22] == 3'd0 &&
			 csr_access_data[21:10] == 12'h001) ?
			4'd3 :
			((csr_access_data[105] &&
			  csr_access_data[104:101] == 4'd4) ?
			   4'd4 :
			   ((csr_access_data[105] &&
			     csr_access_data[104:101] == 4'd5) ?
			      4'd5 :
			      ((csr_access_data[105] &&
				csr_access_data[104:101] == 4'd6) ?
				 4'd6 :
				 ((csr_access_data[105] &&
				   csr_access_data[104:101] == 4'd7) ?
				    4'd7 :
				    ((csr_access_data[105] ?
					csr_access_data[104:101] == 4'd8 :
					csr_access_data[24:22] == 3'd0 &&
					csr_access_data[21:10] == 12'h0 &&
					rg_prv == 2'd0) ?
				       4'd8 :
				       4'd11)))))))) ;
  assign y__h25620 = ~csr__read__h18075 ;
  assign z__h10769 = uart_fifoXmit$D_OUT[0] ^ uart_fifoXmit$D_OUT[1] ;
  assign z__h10776 = z__h10769 ^ uart_fifoXmit$D_OUT[2] ;
  assign z__h10783 = z__h10776 ^ uart_fifoXmit$D_OUT[3] ;
  assign z__h10790 = z__h10783 ^ uart_fifoXmit$D_OUT[4] ;
  assign z__h10797 = z__h10790 ^ uart_fifoXmit$D_OUT[5] ;
  assign z__h10804 = z__h10797 ^ uart_fifoXmit$D_OUT[6] ;
  always@(csr_access_data or csr_uepc or csr_mepc)
  begin
    case (csr_access_data[21:10])
      12'h002: x1_avValue_address__h18845 = csr_uepc;
      12'h302: x1_avValue_address__h18845 = csr_mepc;
      default: x1_avValue_address__h18845 = 32'd0;
    endcase
  end
  always@(csr_access_data)
  begin
    case (csr_access_data[104:101])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd4, 4'd5, 4'd6, 4'd7, 4'd8:
	  CASE_csr_access_data_BITS_104_TO_101_0_csr_acc_ETC__q3 =
	      csr_access_data[104:101];
      default: CASE_csr_access_data_BITS_104_TO_101_0_csr_acc_ETC__q3 = 4'd9;
    endcase
  end
  always@(csr_access_data or rg_prv)
  begin
    case (csr_access_data[21:10])
      12'h0:
	  CASE_csr_access_data_BITS_21_TO_10_0x0_IF_rg_p_ETC__q4 =
	      (rg_prv == 2'd0) ? 4'd8 : 4'd9;
      12'h001: CASE_csr_access_data_BITS_21_TO_10_0x0_IF_rg_p_ETC__q4 = 4'd3;
      default: CASE_csr_access_data_BITS_21_TO_10_0x0_IF_rg_p_ETC__q4 = 4'd2;
    endcase
  end
  always@(csr_access_data or
	  csr_ustatus__read__h17600 or
	  csr_fflags__read__h17750 or
	  csr_frm__read__h17742 or
	  csr_fcsr__read__h17758 or
	  csr_uie__read__h17653 or
	  csr_utvec__read__h17663 or
	  csr_uscratch or
	  csr_uepc or
	  csr_ucause or
	  csr_ubadaddr or
	  csr_uip__read__h17734 or
	  csr_mstatus__read__h17875 or
	  csr_misa or
	  x__h16060 or
	  csr_mideleg__read__h14219 or
	  csr_mie__read__h14164 or
	  csr_mtvec__read__h17897 or
	  csr_mucounteren__read__h18010 or
	  csr_mscratch or
	  csr_mepc or
	  csr_mcause or
	  csr_mbadaddr or
	  csr_mip__read__h14065 or
	  csr_mbase or
	  csr_mbound or
	  csr_mibase or
	  csr_mibound or
	  csr_mdbase or
	  csr_mdbound or
	  csr_uartrx__read__h18029 or
	  csr_uarttx__read__h18018 or
	  csr_mcycle$port0__write_1 or
	  x_port1__read__h17968 or
	  x_port1__read__h17981 or x_port1__read__h17994)
  begin
    case (csr_access_data[21:10])
      12'h0: csr__read__h18075 = csr_ustatus__read__h17600;
      12'h001: csr__read__h18075 = csr_fflags__read__h17750;
      12'h002: csr__read__h18075 = csr_frm__read__h17742;
      12'h003: csr__read__h18075 = csr_fcsr__read__h17758;
      12'h004: csr__read__h18075 = csr_uie__read__h17653;
      12'h005: csr__read__h18075 = csr_utvec__read__h17663;
      12'h040: csr__read__h18075 = csr_uscratch;
      12'h041: csr__read__h18075 = csr_uepc;
      12'h042: csr__read__h18075 = csr_ucause;
      12'h043: csr__read__h18075 = csr_ubadaddr;
      12'h044: csr__read__h18075 = csr_uip__read__h17734;
      12'h300: csr__read__h18075 = csr_mstatus__read__h17875;
      12'h301: csr__read__h18075 = csr_misa;
      12'h302: csr__read__h18075 = x__h16060;
      12'h303: csr__read__h18075 = csr_mideleg__read__h14219;
      12'h304: csr__read__h18075 = csr_mie__read__h14164;
      12'h305: csr__read__h18075 = csr_mtvec__read__h17897;
      12'h320: csr__read__h18075 = csr_mucounteren__read__h18010;
      12'h340: csr__read__h18075 = csr_mscratch;
      12'h341: csr__read__h18075 = csr_mepc;
      12'h342: csr__read__h18075 = csr_mcause;
      12'h343: csr__read__h18075 = csr_mbadaddr;
      12'h344: csr__read__h18075 = csr_mip__read__h14065;
      12'h380: csr__read__h18075 = csr_mbase;
      12'h381: csr__read__h18075 = csr_mbound;
      12'h382: csr__read__h18075 = csr_mibase;
      12'h383: csr__read__h18075 = csr_mibound;
      12'h384: csr__read__h18075 = csr_mdbase;
      12'h385: csr__read__h18075 = csr_mdbound;
      12'h77E: csr__read__h18075 = csr_uartrx__read__h18029;
      12'h77F: csr__read__h18075 = csr_uarttx__read__h18018;
      12'hB00, 12'hC00: csr__read__h18075 = csr_mcycle$port0__write_1;
      12'hB02, 12'hC02: csr__read__h18075 = x_port1__read__h17968;
      12'hB80, 12'hC80: csr__read__h18075 = x_port1__read__h17981;
      12'hB82, 12'hC82: csr__read__h18075 = x_port1__read__h17994;
      12'hF11, 12'hF12, 12'hF13, 12'hF14: csr__read__h18075 = 32'd0;
      default: csr__read__h18075 = 32'd0;
    endcase
  end
  always@(csr_access_data or
	  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761 or
	  rg_mpie or
	  csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756 or
	  csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758 or
	  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760)
  begin
    case (csr_access_data[24:22])
      3'd0:
	  IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d962 = rg_mpie;
      3'd1:
	  IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d962 =
	      csr_access_data[110];
      3'd2:
	  IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d962 =
	      csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756[3];
      3'd3:
	  IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d962 =
	      csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758[3];
      3'd5:
	  IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d962 =
	      csr_access_data[8];
      3'd6:
	  IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d962 =
	      _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760[3];
      default: IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d962 =
		   _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761[3];
    endcase
  end
  always@(csr_access_data or
	  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761 or
	  rg_mpie or
	  rg_upie or
	  csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756 or
	  csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758 or
	  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760)
  begin
    case (csr_access_data[24:22])
      3'd0:
	  IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d866 =
	      (csr_access_data[21:10] == 12'h302) ? rg_mpie : rg_upie;
      3'd1:
	  IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d866 =
	      csr_access_data[107];
      3'd2:
	  IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d866 =
	      csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756[0];
      3'd3:
	  IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d866 =
	      csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758[0];
      3'd5:
	  IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d866 =
	      csr_access_data[5];
      3'd6:
	  IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d866 =
	      _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760[0];
      default: IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d866 =
		   _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761[0];
    endcase
  end
  always@(csr_access_data or
	  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761 or
	  csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756 or
	  csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758 or
	  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760)
  begin
    case (csr_access_data[24:22])
      3'd1:
	  IF_csr_access_data_BITS_24_TO_22_74_EQ_1_83_TH_ETC___d1012 =
	      csr_access_data[111];
      3'd2:
	  IF_csr_access_data_BITS_24_TO_22_74_EQ_1_83_TH_ETC___d1012 =
	      csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756[4];
      3'd3:
	  IF_csr_access_data_BITS_24_TO_22_74_EQ_1_83_TH_ETC___d1012 =
	      csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758[4];
      3'd5:
	  IF_csr_access_data_BITS_24_TO_22_74_EQ_1_83_TH_ETC___d1012 =
	      csr_access_data[9];
      3'd6:
	  IF_csr_access_data_BITS_24_TO_22_74_EQ_1_83_TH_ETC___d1012 =
	      _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760[4];
      default: IF_csr_access_data_BITS_24_TO_22_74_EQ_1_83_TH_ETC___d1012 =
		   _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761[4];
    endcase
  end
  always@(csr_access_data or
	  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760 or
	  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761 or
	  csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756 or
	  csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758)
  begin
    case (csr_access_data[24:22])
      3'd1:
	  IF_csr_access_data_BITS_24_TO_22_74_EQ_1_83_TH_ETC___d991 =
	      csr_access_data[114];
      3'd2:
	  IF_csr_access_data_BITS_24_TO_22_74_EQ_1_83_TH_ETC___d991 =
	      csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756[7];
      3'd3:
	  IF_csr_access_data_BITS_24_TO_22_74_EQ_1_83_TH_ETC___d991 =
	      csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758[7];
      default: IF_csr_access_data_BITS_24_TO_22_74_EQ_1_83_TH_ETC___d991 =
		   csr_access_data[24:22] != 3'd5 &&
		   ((csr_access_data[24:22] == 3'd6) ?
		      _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760[7] :
		      _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761[7]);
    endcase
  end
  always@(csr_access_data or
	  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761 or
	  csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756 or
	  csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758 or
	  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760)
  begin
    case (csr_access_data[24:22])
      3'd1:
	  IF_csr_access_data_BITS_24_TO_22_74_EQ_1_83_TH_ETC___d766 =
	      csr_access_data[138:107];
      3'd2:
	  IF_csr_access_data_BITS_24_TO_22_74_EQ_1_83_TH_ETC___d766 =
	      csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756;
      3'd3:
	  IF_csr_access_data_BITS_24_TO_22_74_EQ_1_83_TH_ETC___d766 =
	      csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758;
      3'd5:
	  IF_csr_access_data_BITS_24_TO_22_74_EQ_1_83_TH_ETC___d766 =
	      { 27'd0, csr_access_data[9:5] };
      3'd6:
	  IF_csr_access_data_BITS_24_TO_22_74_EQ_1_83_TH_ETC___d766 =
	      _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760;
      default: IF_csr_access_data_BITS_24_TO_22_74_EQ_1_83_TH_ETC___d766 =
		   _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761;
    endcase
  end
  always@(csr_access_data or
	  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761 or
	  csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756 or
	  csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758 or
	  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760)
  begin
    case (csr_access_data[24:22])
      3'd0, 3'd5:
	  IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d979 = 2'd0;
      3'd1:
	  IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d979 =
	      csr_access_data[119:118];
      3'd2:
	  IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d979 =
	      csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756[12:11];
      3'd3:
	  IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d979 =
	      csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758[12:11];
      3'd6:
	  IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d979 =
	      _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760[12:11];
      default: IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d979 =
		   _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761[12:11];
    endcase
  end
  always@(csr_access_data or
	  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761)
  begin
    case (csr_access_data[21:10])
      12'h0:
	  CASE_csr_access_data_BITS_21_TO_10_0x0_0_CONCA_ETC__q5 =
	      _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761[12:11];
      12'h001, 12'h002, 12'h003:
	  CASE_csr_access_data_BITS_21_TO_10_0x0_0_CONCA_ETC__q5 = 2'b11;
      default: CASE_csr_access_data_BITS_21_TO_10_0x0_0_CONCA_ETC__q5 =
		   _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_AND_ETC___d761[14:13];
    endcase
  end
  always@(csr_access_data)
  begin
    case (csr_access_data[21:10])
      12'h0:
	  CASE_csr_access_data_BITS_21_TO_10_0x0_csr_acc_ETC__q6 =
	      csr_access_data[119:118];
      12'h001, 12'h002, 12'h003:
	  CASE_csr_access_data_BITS_21_TO_10_0x0_csr_acc_ETC__q6 = 2'b11;
      default: CASE_csr_access_data_BITS_21_TO_10_0x0_csr_acc_ETC__q6 =
		   csr_access_data[121:120];
    endcase
  end
  always@(csr_access_data or
	  csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756)
  begin
    case (csr_access_data[21:10])
      12'h0:
	  CASE_csr_access_data_BITS_21_TO_10_0x0_csr_acc_ETC__q7 =
	      csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756[12:11];
      12'h001, 12'h002, 12'h003:
	  CASE_csr_access_data_BITS_21_TO_10_0x0_csr_acc_ETC__q7 = 2'b11;
      default: CASE_csr_access_data_BITS_21_TO_10_0x0_csr_acc_ETC__q7 =
		   csr_access_data_BITS_138_TO_107_80_OR_IF_csr_a_ETC___d756[14:13];
    endcase
  end
  always@(csr_access_data or
	  csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758)
  begin
    case (csr_access_data[21:10])
      12'h0:
	  CASE_csr_access_data_BITS_21_TO_10_0x0_csr_acc_ETC__q8 =
	      csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758[12:11];
      12'h001, 12'h002, 12'h003:
	  CASE_csr_access_data_BITS_21_TO_10_0x0_csr_acc_ETC__q8 = 2'b11;
      default: CASE_csr_access_data_BITS_21_TO_10_0x0_csr_acc_ETC__q8 =
		   csr_access_data_BITS_138_TO_107_80_AND_INV_IF__ETC___d758[14:13];
    endcase
  end
  always@(csr_access_data)
  begin
    case (csr_access_data[21:10])
      12'h0: CASE_csr_access_data_BITS_21_TO_10_0x0_0_0x1_0_ETC__q9 = 2'd0;
      12'h001, 12'h002, 12'h003:
	  CASE_csr_access_data_BITS_21_TO_10_0x0_0_0x1_0_ETC__q9 = 2'b11;
      default: CASE_csr_access_data_BITS_21_TO_10_0x0_0_0x1_0_ETC__q9 = 2'd0;
    endcase
  end
  always@(csr_access_data or
	  _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760)
  begin
    case (csr_access_data[21:10])
      12'h0:
	  CASE_csr_access_data_BITS_21_TO_10_0x0_0_CONCA_ETC__q10 =
	      _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760[12:11];
      12'h001, 12'h002, 12'h003:
	  CASE_csr_access_data_BITS_21_TO_10_0x0_0_CONCA_ETC__q10 = 2'b11;
      default: CASE_csr_access_data_BITS_21_TO_10_0x0_0_CONCA_ETC__q10 =
		   _0_CONCAT_csr_access_data_BITS_9_TO_5_30_59_OR__ETC___d760[14:13];
    endcase
  end
  always@(csr_access_data)
  begin
    case (csr_access_data[104:101])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd4, 4'd5, 4'd6, 4'd7, 4'd8:
	  CASE_csr_access_data_BITS_104_TO_101_0_csr_acc_ETC__q11 =
	      csr_access_data[104:101];
      default: CASE_csr_access_data_BITS_104_TO_101_0_csr_acc_ETC__q11 =
		   4'd11;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        csr_mbadaddr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	csr_mbase <= `BSV_ASSIGNMENT_DELAY 32'd0;
	csr_mbound <= `BSV_ASSIGNMENT_DELAY 32'd0;
	csr_mcause <= `BSV_ASSIGNMENT_DELAY 32'd0;
	csr_mcycle <= `BSV_ASSIGNMENT_DELAY 32'd0;
	csr_mcycleh <= `BSV_ASSIGNMENT_DELAY 32'd0;
	csr_mdbase <= `BSV_ASSIGNMENT_DELAY 32'd0;
	csr_mdbound <= `BSV_ASSIGNMENT_DELAY 32'd0;
	csr_mepc <= `BSV_ASSIGNMENT_DELAY 32'd0;
	csr_mibase <= `BSV_ASSIGNMENT_DELAY 32'd0;
	csr_mibound <= `BSV_ASSIGNMENT_DELAY 32'd0;
	csr_minstret <= `BSV_ASSIGNMENT_DELAY 32'd0;
	csr_minstreth <= `BSV_ASSIGNMENT_DELAY 32'd0;
	csr_misa <= `BSV_ASSIGNMENT_DELAY 32'h40141129;
	csr_mscratch <= `BSV_ASSIGNMENT_DELAY 32'd0;
	csr_ubadaddr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	csr_ucause <= `BSV_ASSIGNMENT_DELAY 32'd0;
	csr_uepc <= `BSV_ASSIGNMENT_DELAY 32'd0;
	csr_uscratch <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_fflags <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_frm <= `BSV_ASSIGNMENT_DELAY 3'd0;
	rg_fs <= `BSV_ASSIGNMENT_DELAY 2'b01;
	rg_medeleg <= `BSV_ASSIGNMENT_DELAY 12'd0;
	rg_meie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_mideleg <= `BSV_ASSIGNMENT_DELAY 12'd0;
	rg_mie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_mpie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_mpp <= `BSV_ASSIGNMENT_DELAY 2'd0;
	rg_mprv <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_msie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_mtie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_mtvec <= `BSV_ASSIGNMENT_DELAY 30'h0;
	rg_mxr <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_prv <= `BSV_ASSIGNMENT_DELAY 2'd3;
	rg_pum <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_rx <= `BSV_ASSIGNMENT_DELAY 9'd0;
	rg_tx <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_u_cy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_u_ir <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_u_tm <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_ueie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_uie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_upie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_usie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_usip <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_utie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_utip <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_utvec <= `BSV_ASSIGNMENT_DELAY 30'd0;
	rg_vm <= `BSV_ASSIGNMENT_DELAY 5'd0;
	uart_fifoRecv_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	uart_fifoXmit_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	uart_rRecvData <= `BSV_ASSIGNMENT_DELAY 1'd1;
      end
    else
      begin
        if (csr_mbadaddr$EN)
	  csr_mbadaddr <= `BSV_ASSIGNMENT_DELAY csr_mbadaddr$D_IN;
	if (csr_mbase$EN) csr_mbase <= `BSV_ASSIGNMENT_DELAY csr_mbase$D_IN;
	if (csr_mbound$EN)
	  csr_mbound <= `BSV_ASSIGNMENT_DELAY csr_mbound$D_IN;
	if (csr_mcause$EN)
	  csr_mcause <= `BSV_ASSIGNMENT_DELAY csr_mcause$D_IN;
	if (csr_mcycle$EN)
	  csr_mcycle <= `BSV_ASSIGNMENT_DELAY csr_mcycle$D_IN;
	if (csr_mcycleh$EN)
	  csr_mcycleh <= `BSV_ASSIGNMENT_DELAY csr_mcycleh$D_IN;
	if (csr_mdbase$EN)
	  csr_mdbase <= `BSV_ASSIGNMENT_DELAY csr_mdbase$D_IN;
	if (csr_mdbound$EN)
	  csr_mdbound <= `BSV_ASSIGNMENT_DELAY csr_mdbound$D_IN;
	if (csr_mepc$EN) csr_mepc <= `BSV_ASSIGNMENT_DELAY csr_mepc$D_IN;
	if (csr_mibase$EN)
	  csr_mibase <= `BSV_ASSIGNMENT_DELAY csr_mibase$D_IN;
	if (csr_mibound$EN)
	  csr_mibound <= `BSV_ASSIGNMENT_DELAY csr_mibound$D_IN;
	if (csr_minstret$EN)
	  csr_minstret <= `BSV_ASSIGNMENT_DELAY csr_minstret$D_IN;
	if (csr_minstreth$EN)
	  csr_minstreth <= `BSV_ASSIGNMENT_DELAY csr_minstreth$D_IN;
	if (csr_misa$EN) csr_misa <= `BSV_ASSIGNMENT_DELAY csr_misa$D_IN;
	if (csr_mscratch$EN)
	  csr_mscratch <= `BSV_ASSIGNMENT_DELAY csr_mscratch$D_IN;
	if (csr_ubadaddr$EN)
	  csr_ubadaddr <= `BSV_ASSIGNMENT_DELAY csr_ubadaddr$D_IN;
	if (csr_ucause$EN)
	  csr_ucause <= `BSV_ASSIGNMENT_DELAY csr_ucause$D_IN;
	if (csr_uepc$EN) csr_uepc <= `BSV_ASSIGNMENT_DELAY csr_uepc$D_IN;
	if (csr_uscratch$EN)
	  csr_uscratch <= `BSV_ASSIGNMENT_DELAY csr_uscratch$D_IN;
	if (rg_fflags$EN) rg_fflags <= `BSV_ASSIGNMENT_DELAY rg_fflags$D_IN;
	if (rg_frm$EN) rg_frm <= `BSV_ASSIGNMENT_DELAY rg_frm$D_IN;
	if (rg_fs$EN) rg_fs <= `BSV_ASSIGNMENT_DELAY rg_fs$D_IN;
	if (rg_medeleg$EN)
	  rg_medeleg <= `BSV_ASSIGNMENT_DELAY rg_medeleg$D_IN;
	if (rg_meie$EN) rg_meie <= `BSV_ASSIGNMENT_DELAY rg_meie$D_IN;
	if (rg_mideleg$EN)
	  rg_mideleg <= `BSV_ASSIGNMENT_DELAY rg_mideleg$D_IN;
	if (rg_mie$EN) rg_mie <= `BSV_ASSIGNMENT_DELAY rg_mie$D_IN;
	if (rg_mpie$EN) rg_mpie <= `BSV_ASSIGNMENT_DELAY rg_mpie$D_IN;
	if (rg_mpp$EN) rg_mpp <= `BSV_ASSIGNMENT_DELAY rg_mpp$D_IN;
	if (rg_mprv$EN) rg_mprv <= `BSV_ASSIGNMENT_DELAY rg_mprv$D_IN;
	if (rg_msie$EN) rg_msie <= `BSV_ASSIGNMENT_DELAY rg_msie$D_IN;
	if (rg_mtie$EN) rg_mtie <= `BSV_ASSIGNMENT_DELAY rg_mtie$D_IN;
	if (rg_mtvec$EN) rg_mtvec <= `BSV_ASSIGNMENT_DELAY rg_mtvec$D_IN;
	if (rg_mxr$EN) rg_mxr <= `BSV_ASSIGNMENT_DELAY rg_mxr$D_IN;
	if (rg_prv$EN) rg_prv <= `BSV_ASSIGNMENT_DELAY rg_prv$D_IN;
	if (rg_pum$EN) rg_pum <= `BSV_ASSIGNMENT_DELAY rg_pum$D_IN;
	if (rg_rx$EN) rg_rx <= `BSV_ASSIGNMENT_DELAY rg_rx$D_IN;
	if (rg_tx$EN) rg_tx <= `BSV_ASSIGNMENT_DELAY rg_tx$D_IN;
	if (rg_u_cy$EN) rg_u_cy <= `BSV_ASSIGNMENT_DELAY rg_u_cy$D_IN;
	if (rg_u_ir$EN) rg_u_ir <= `BSV_ASSIGNMENT_DELAY rg_u_ir$D_IN;
	if (rg_u_tm$EN) rg_u_tm <= `BSV_ASSIGNMENT_DELAY rg_u_tm$D_IN;
	if (rg_ueie$EN) rg_ueie <= `BSV_ASSIGNMENT_DELAY rg_ueie$D_IN;
	if (rg_uie$EN) rg_uie <= `BSV_ASSIGNMENT_DELAY rg_uie$D_IN;
	if (rg_upie$EN) rg_upie <= `BSV_ASSIGNMENT_DELAY rg_upie$D_IN;
	if (rg_usie$EN) rg_usie <= `BSV_ASSIGNMENT_DELAY rg_usie$D_IN;
	if (rg_usip$EN) rg_usip <= `BSV_ASSIGNMENT_DELAY rg_usip$D_IN;
	if (rg_utie$EN) rg_utie <= `BSV_ASSIGNMENT_DELAY rg_utie$D_IN;
	if (rg_utip$EN) rg_utip <= `BSV_ASSIGNMENT_DELAY rg_utip$D_IN;
	if (rg_utvec$EN) rg_utvec <= `BSV_ASSIGNMENT_DELAY rg_utvec$D_IN;
	if (rg_vm$EN) rg_vm <= `BSV_ASSIGNMENT_DELAY rg_vm$D_IN;
	if (uart_fifoRecv_countReg$EN)
	  uart_fifoRecv_countReg <= `BSV_ASSIGNMENT_DELAY
	      uart_fifoRecv_countReg$D_IN;
	if (uart_fifoXmit_countReg$EN)
	  uart_fifoXmit_countReg <= `BSV_ASSIGNMENT_DELAY
	      uart_fifoXmit_countReg$D_IN;
	if (uart_rRecvData$EN)
	  uart_rRecvData <= `BSV_ASSIGNMENT_DELAY uart_rRecvData$D_IN;
      end
    if (uart_vrRecvBuffer_0$EN)
      uart_vrRecvBuffer_0 <= `BSV_ASSIGNMENT_DELAY uart_vrRecvBuffer_0$D_IN;
    if (uart_vrRecvBuffer_1$EN)
      uart_vrRecvBuffer_1 <= `BSV_ASSIGNMENT_DELAY uart_vrRecvBuffer_1$D_IN;
    if (uart_vrRecvBuffer_2$EN)
      uart_vrRecvBuffer_2 <= `BSV_ASSIGNMENT_DELAY uart_vrRecvBuffer_2$D_IN;
    if (uart_vrRecvBuffer_3$EN)
      uart_vrRecvBuffer_3 <= `BSV_ASSIGNMENT_DELAY uart_vrRecvBuffer_3$D_IN;
    if (uart_vrRecvBuffer_4$EN)
      uart_vrRecvBuffer_4 <= `BSV_ASSIGNMENT_DELAY uart_vrRecvBuffer_4$D_IN;
    if (uart_vrRecvBuffer_5$EN)
      uart_vrRecvBuffer_5 <= `BSV_ASSIGNMENT_DELAY uart_vrRecvBuffer_5$D_IN;
    if (uart_vrRecvBuffer_6$EN)
      uart_vrRecvBuffer_6 <= `BSV_ASSIGNMENT_DELAY uart_vrRecvBuffer_6$D_IN;
    if (uart_vrRecvBuffer_7$EN)
      uart_vrRecvBuffer_7 <= `BSV_ASSIGNMENT_DELAY uart_vrRecvBuffer_7$D_IN;
    if (uart_vrXmitBuffer_0$EN)
      uart_vrXmitBuffer_0 <= `BSV_ASSIGNMENT_DELAY uart_vrXmitBuffer_0$D_IN;
    if (uart_vrXmitBuffer_1$EN)
      uart_vrXmitBuffer_1 <= `BSV_ASSIGNMENT_DELAY uart_vrXmitBuffer_1$D_IN;
    if (uart_vrXmitBuffer_2$EN)
      uart_vrXmitBuffer_2 <= `BSV_ASSIGNMENT_DELAY uart_vrXmitBuffer_2$D_IN;
    if (uart_vrXmitBuffer_3$EN)
      uart_vrXmitBuffer_3 <= `BSV_ASSIGNMENT_DELAY uart_vrXmitBuffer_3$D_IN;
    if (uart_vrXmitBuffer_4$EN)
      uart_vrXmitBuffer_4 <= `BSV_ASSIGNMENT_DELAY uart_vrXmitBuffer_4$D_IN;
    if (uart_vrXmitBuffer_5$EN)
      uart_vrXmitBuffer_5 <= `BSV_ASSIGNMENT_DELAY uart_vrXmitBuffer_5$D_IN;
    if (uart_vrXmitBuffer_6$EN)
      uart_vrXmitBuffer_6 <= `BSV_ASSIGNMENT_DELAY uart_vrXmitBuffer_6$D_IN;
    if (uart_vrXmitBuffer_7$EN)
      uart_vrXmitBuffer_7 <= `BSV_ASSIGNMENT_DELAY uart_vrXmitBuffer_7$D_IN;
  end

  always@(posedge CLK or `BSV_RESET_EDGE RST_N)
  if (RST_N == `BSV_RESET_VALUE)
    begin
      uart_rRecvBitCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
      uart_rRecvCellCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
      uart_rRecvParity <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_rRecvState <= `BSV_ASSIGNMENT_DELAY 3'd0;
      uart_rXmitBitCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
      uart_rXmitCellCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
      uart_rXmitDataOut <= `BSV_ASSIGNMENT_DELAY 1'd1;
      uart_rXmitParity <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_rXmitState <= `BSV_ASSIGNMENT_DELAY 3'd0;
    end
  else
    begin
      if (uart_rRecvBitCount$EN)
	uart_rRecvBitCount <= `BSV_ASSIGNMENT_DELAY uart_rRecvBitCount$D_IN;
      if (uart_rRecvCellCount$EN)
	uart_rRecvCellCount <= `BSV_ASSIGNMENT_DELAY uart_rRecvCellCount$D_IN;
      if (uart_rRecvParity$EN)
	uart_rRecvParity <= `BSV_ASSIGNMENT_DELAY uart_rRecvParity$D_IN;
      if (uart_rRecvState$EN)
	uart_rRecvState <= `BSV_ASSIGNMENT_DELAY uart_rRecvState$D_IN;
      if (uart_rXmitBitCount$EN)
	uart_rXmitBitCount <= `BSV_ASSIGNMENT_DELAY uart_rXmitBitCount$D_IN;
      if (uart_rXmitCellCount$EN)
	uart_rXmitCellCount <= `BSV_ASSIGNMENT_DELAY uart_rXmitCellCount$D_IN;
      if (uart_rXmitDataOut$EN)
	uart_rXmitDataOut <= `BSV_ASSIGNMENT_DELAY uart_rXmitDataOut$D_IN;
      if (uart_rXmitParity$EN)
	uart_rXmitParity <= `BSV_ASSIGNMENT_DELAY uart_rXmitParity$D_IN;
      if (uart_rXmitState$EN)
	uart_rXmitState <= `BSV_ASSIGNMENT_DELAY uart_rXmitState$D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    csr_mbadaddr = 32'hAAAAAAAA;
    csr_mbase = 32'hAAAAAAAA;
    csr_mbound = 32'hAAAAAAAA;
    csr_mcause = 32'hAAAAAAAA;
    csr_mcycle = 32'hAAAAAAAA;
    csr_mcycleh = 32'hAAAAAAAA;
    csr_mdbase = 32'hAAAAAAAA;
    csr_mdbound = 32'hAAAAAAAA;
    csr_mepc = 32'hAAAAAAAA;
    csr_mibase = 32'hAAAAAAAA;
    csr_mibound = 32'hAAAAAAAA;
    csr_minstret = 32'hAAAAAAAA;
    csr_minstreth = 32'hAAAAAAAA;
    csr_misa = 32'hAAAAAAAA;
    csr_mscratch = 32'hAAAAAAAA;
    csr_ubadaddr = 32'hAAAAAAAA;
    csr_ucause = 32'hAAAAAAAA;
    csr_uepc = 32'hAAAAAAAA;
    csr_uscratch = 32'hAAAAAAAA;
    rg_fflags = 5'h0A;
    rg_frm = 3'h2;
    rg_fs = 2'h2;
    rg_medeleg = 12'hAAA;
    rg_meie = 1'h0;
    rg_mideleg = 12'hAAA;
    rg_mie = 1'h0;
    rg_mpie = 1'h0;
    rg_mpp = 2'h2;
    rg_mprv = 1'h0;
    rg_msie = 1'h0;
    rg_mtie = 1'h0;
    rg_mtvec = 30'h2AAAAAAA;
    rg_mxr = 1'h0;
    rg_prv = 2'h2;
    rg_pum = 1'h0;
    rg_rx = 9'h0AA;
    rg_tx = 8'hAA;
    rg_u_cy = 1'h0;
    rg_u_ir = 1'h0;
    rg_u_tm = 1'h0;
    rg_ueie = 1'h0;
    rg_uie = 1'h0;
    rg_upie = 1'h0;
    rg_usie = 1'h0;
    rg_usip = 1'h0;
    rg_utie = 1'h0;
    rg_utip = 1'h0;
    rg_utvec = 30'h2AAAAAAA;
    rg_vm = 5'h0A;
    uart_fifoRecv_countReg = 2'h2;
    uart_fifoXmit_countReg = 2'h2;
    uart_rRecvBitCount = 4'hA;
    uart_rRecvCellCount = 4'hA;
    uart_rRecvData = 1'h0;
    uart_rRecvParity = 1'h0;
    uart_rRecvState = 3'h2;
    uart_rXmitBitCount = 4'hA;
    uart_rXmitCellCount = 4'hA;
    uart_rXmitDataOut = 1'h0;
    uart_rXmitParity = 1'h0;
    uart_rXmitState = 3'h2;
    uart_vrRecvBuffer_0 = 1'h0;
    uart_vrRecvBuffer_1 = 1'h0;
    uart_vrRecvBuffer_2 = 1'h0;
    uart_vrRecvBuffer_3 = 1'h0;
    uart_vrRecvBuffer_4 = 1'h0;
    uart_vrRecvBuffer_5 = 1'h0;
    uart_vrRecvBuffer_6 = 1'h0;
    uart_vrRecvBuffer_7 = 1'h0;
    uart_vrXmitBuffer_0 = 1'h0;
    uart_vrXmitBuffer_1 = 1'h0;
    uart_vrXmitBuffer_2 = 1'h0;
    uart_vrXmitBuffer_3 = 1'h0;
    uart_vrXmitBuffer_4 = 1'h0;
    uart_vrXmitBuffer_5 = 1'h0;
    uart_vrXmitBuffer_6 = 1'h0;
    uart_vrXmitBuffer_7 = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_access && pending_interrupts__h13960 == 12'd0 &&
	  csr_access_data[105])
	begin
	  v__h15270 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_access && pending_interrupts__h13960 == 12'd0 &&
	  csr_access_data[105])
	$display(v__h15270,
		 "\tCSR: Instruction generated Exception :%h",
		 CASE_csr_access_data_BITS_104_TO_101_0_csr_acc_ETC__q11);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_access && pending_interrupts__h13960 != 12'd0)
	begin
	  v__h14267 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_access && pending_interrupts__h13960 != 12'd0)
	$display(v__h14267,
		 "\tCSR: Pending interrupts :%h",
		 IF_IF_rg_mie_75_OR_rg_prv_76_EQ_0_77_78_THEN_m_ETC___d272);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_access &&
	  (pending_interrupts__h13960 != 12'd0 || csr_access_data[105] ||
	   csr_access_data[106] &&
	   IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d439))
	begin
	  v__h15962 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_access &&
	  (pending_interrupts__h13960 != 12'd0 || csr_access_data[105] ||
	   csr_access_data[106] &&
	   IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d439))
	$display(v__h15962, "\tTaking Trap");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_access && pending_interrupts__h13960 == 12'd0 &&
	  !csr_access_data[105] &&
	  IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555 &&
	  csr_access_data[106])
	begin
	  v__h17453 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_access && pending_interrupts__h13960 == 12'd0 &&
	  !csr_access_data[105] &&
	  IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555 &&
	  csr_access_data[106])
	$display(v__h17453, "\tCSR: Performing CSR Instructions");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_access && pending_interrupts__h13960 == 12'd0 &&
	  !csr_access_data[105] &&
	  IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555 &&
	  csr_access_data[106])
	begin
	  v__h17494 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_access && pending_interrupts__h13960 == 12'd0 &&
	  !csr_access_data[105] &&
	  IF_csr_access_data_BITS_24_TO_22_74_EQ_0_75_TH_ETC___d555 &&
	  csr_access_data[106])
	$display(v__h17494,
		 "\tCSR: Addr: %h, Funct3: %d, Value: %h Rs1: %h",
		 csr_access_data[21:10],
		 csr_access_data[24:22],
		 csr__read__h18075,
		 csr_access_data[9:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_access && pending_interrupts__h13960 == 12'd0 &&
	  !csr_access_data[105] &&
	  !csr_access_data[106])
	begin
	  v__h17046 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_access && pending_interrupts__h13960 == 12'd0 &&
	  !csr_access_data[105] &&
	  !csr_access_data[106])
	$display(v__h17046, "\tCSR: Normal Instruction");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_access && pending_interrupts__h13960 == 12'd0 &&
	  !csr_access_data[105] &&
	  !csr_access_data[106] &&
	  NOT_csr_access_data_BITS_4_TO_0_717_OR_rg_ffla_ETC___d1721 &&
	  rg_fs == 2'b0)
	$display("Error: FPU id Dirty and FX field is 0");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_rx_connectionif)
	begin
	  v__h13754 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_rx_connectionif)
	$display(v__h13754, "\tReceived Character: %s", uart_fifoRecv$D_OUT);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send_transimission_data0)
	begin
	  v__h13489 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send_transimission_data0)
	$display(v__h13489,
		 "\t Putting Data :%s in FIFO for transmision",
		 wr_send_to_uart$whas);
  end
  // synopsys translate_on
endmodule  // mkcsr

