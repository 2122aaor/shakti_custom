//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// On Fri Jan 22 01:17:55 IST 2016
//
//
// Ports:
// Name                         I/O  size props
// RDY__start                     O     1
// RDY_deque_buffer               O     1 reg
// get_result                     O   105
// RDY_get_result                 O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// _start_operand1                I    32
// _start_operand2                I    32
// _start_operand3                I    32
// _start_operation               I     1
// _start_fsr                     I    32
// _start__negate                 I     1
// EN__start                      I     1
// EN_deque_buffer                I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkfpu_fm_add_sub(CLK,
			RST_N,

			_start_operand1,
			_start_operand2,
			_start_operand3,
			_start_operation,
			_start_fsr,
			_start__negate,
			EN__start,
			RDY__start,

			EN_deque_buffer,
			RDY_deque_buffer,

			get_result,
			RDY_get_result);
  input  CLK;
  input  RST_N;

  // action method _start
  input  [31 : 0] _start_operand1;
  input  [31 : 0] _start_operand2;
  input  [31 : 0] _start_operand3;
  input  _start_operation;
  input  [31 : 0] _start_fsr;
  input  _start__negate;
  input  EN__start;
  output RDY__start;

  // action method deque_buffer
  input  EN_deque_buffer;
  output RDY_deque_buffer;

  // value method get_result
  output [104 : 0] get_result;
  output RDY_get_result;

  // signals for module outputs
  wire [104 : 0] get_result;
  wire RDY__start, RDY_deque_buffer, RDY_get_result;

  // inlined wires
  wire [225 : 0] ff_stage2_rv$port1__read,
		 ff_stage2_rv$port1__write_1,
		 ff_stage2_rv$port2__read;
  wire [107 : 0] ff_stage3_rv$port1__read,
		 ff_stage3_rv$port1__write_1,
		 ff_stage3_rv$port2__read;
  wire [85 : 0] ff_stage1_rv$port1__read,
		ff_stage1_rv$port1__write_1,
		ff_stage1_rv$port2__read;
  wire ff_stage1_rv$EN_port0__write,
       ff_stage2_rv$EN_port0__write,
       ff_stage2_rv$EN_port1__write,
       ff_stage3_rv$EN_port0__write,
       ff_stage3_rv$EN_port1__write;

  // register ff_stage1_rv
  reg [85 : 0] ff_stage1_rv;
  wire [85 : 0] ff_stage1_rv$D_IN;
  wire ff_stage1_rv$EN;

  // register ff_stage2_rv
  reg [225 : 0] ff_stage2_rv;
  wire [225 : 0] ff_stage2_rv$D_IN;
  wire ff_stage2_rv$EN;

  // register ff_stage3_rv
  reg [107 : 0] ff_stage3_rv;
  wire [107 : 0] ff_stage3_rv$D_IN;
  wire ff_stage3_rv$EN;

  // ports of submodule ff_final_out
  wire [104 : 0] ff_final_out$D_IN, ff_final_out$D_OUT;
  wire ff_final_out$CLR,
       ff_final_out$DEQ,
       ff_final_out$EMPTY_N,
       ff_final_out$ENQ,
       ff_final_out$FULL_N;

  // ports of submodule integer_multiplier
  wire [150 : 0] integer_multiplier$result_;
  wire [31 : 0] integer_multiplier$_start__fsr,
		integer_multiplier$_start__operand1,
		integer_multiplier$_start__operand2,
		integer_multiplier$_start__program_counter;
  wire [9 : 0] integer_multiplier$_start__summed_exponent;
  wire [4 : 0] integer_multiplier$_start__destination_address;
  wire [3 : 0] integer_multiplier$_start__rob_number;
  wire integer_multiplier$EN__deque,
       integer_multiplier$EN__set_flush,
       integer_multiplier$EN__start,
       integer_multiplier$RDY__start,
       integer_multiplier$RDY_result_,
       integer_multiplier$_set_flush__flush,
       integer_multiplier$_start__infinity,
       integer_multiplier$_start__invalid,
       integer_multiplier$_start__sign,
       integer_multiplier$_start__zero;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_flush_data,
       CAN_FIRE_RL_stage2,
       CAN_FIRE_RL_stage3,
       CAN_FIRE_RL_stage4,
       CAN_FIRE__start,
       CAN_FIRE_deque_buffer,
       WILL_FIRE_RL_rl_flush_data,
       WILL_FIRE_RL_stage2,
       WILL_FIRE_RL_stage3,
       WILL_FIRE_RL_stage4,
       WILL_FIRE__start,
       WILL_FIRE_deque_buffer;

  // remaining internal signals
  reg [31 : 0] _theResult_____2_snd_snd_fst__h4290;
  reg [2 : 0] CASE_ff_final_outD_OUT_BITS_3_TO_1_0_ff_final_ETC__q1;
  reg IF_ff_stage3_rv_port0__read__29_BITS_24_TO_22__ETC___d267;
  wire [63 : 0] x_final_result__h4119;
  wire [57 : 0] _theResult_____2_fst__h2028,
		_theResult____h1227,
		addend___1__h1232,
		addend___1__h1617,
		addend__h1228,
		mantissa_add___1__h1983,
		mantissa_add___1__h2030,
		mantissa_add__h1430,
		mantissa_add__h1644,
		mantissa_add__h2044,
		mul_mantissa_out__h1226,
		mul_mantissa_out__h1231,
		mul_mantissa_out__h1590,
		result__h1524,
		v_mantissa_add__h1886,
		x__h1316;
  wire [31 : 0] _theResult_____2_snd_snd_fst__h4557,
		lv_final_output___1__h4614,
		lv_fsr__h4106,
		x__h4648;
  wire [25 : 0] _theResult_____5__h4091,
		final_mantissa___1__h4511,
		final_mantissa__h4094,
		final_mantissa__h4544;
  wire [23 : 0] v_mantissa3__h5348;
  wire [8 : 0] IF_theResult_____5091_BIT_24_THEN_final_exp_ou_ETC__q2,
	       _theResult_____2_snd_fst__h3920,
	       exp_diff__h1589,
	       exp_diff__h1616,
	       final_exp_out___1__h1984,
	       final_exp_out___1__h2031,
	       final_exp_out___1__h4545,
	       final_exp_out__h1806,
	       final_exp_out__h2045,
	       lv_leading_zeros__h2043,
	       v_final_exp_out__h1322,
	       x__h5347,
	       x__h5370,
	       x__h5371,
	       x__h5467,
	       y__h5372;
  wire [3 : 0] IF_ff_stage3_rv_port0__read__29_BITS_4_TO_3_40_ETC___d334,
	       IF_ff_stage3_rv_port0__read__29_BIT_5_38_THEN__ETC___d336;
  wire [1 : 0] IF_start_fsr_BITS_7_TO_5_96_EQ_0b11_97_AND_sta_ETC___d408,
	       IF_start_operand1_BITS_30_TO_0_76_EQ_0_77_OR_s_ETC___d409,
	       _theResult_____5_snd__h5799,
	       _theResult_____5_snd__h5831,
	       lv_is_infinity___1__h6075,
	       lv_is_infinity___1__h6077,
	       x__h1657,
	       x__h5764,
	       x__h6074;
  wire IF_IF_IF_ff_stage3_rv_port0__read__29_BITS_24__ETC___d305,
       IF_ff_stage3_rv_port0__read__29_BITS_4_TO_3_40_ETC___d328,
       NOT_ff_stage3_rv_port0__read__29_BITS_4_TO_3_4_ETC___d296,
       NOT_ff_stage3_rv_port0__read__29_BITS_4_TO_3_4_ETC___d333,
       _theResult_____2_snd_snd_snd__h4291,
       _theResult_____2_snd_snd_snd__h4558,
       _theResult_____3__h4095,
       _theResult____h4087,
       ff_stage1_rv_port0__read_BITS_84_TO_76_6_ULE_f_ETC___d28,
       ff_stage2_rv_port0__read__8_BIT_49_05_XOR_ff_s_ETC___d207,
       ff_stage3_rv_port0__read__29_BITS_4_TO_3_40_EQ_ETC___d327,
       ff_stage3_rv_port0__read__29_BIT_5_38_OR_NOT_I_ETC___d330,
       lv_final_inexact__h4102,
       lv_final_overflow__h4104,
       lv_inexact__h4088,
       lv_roundup___1__h4343,
       lv_roundup___1__h4463,
       lv_roundup___1__h4479,
       lv_sign_mul_out__h5021,
       lv_underflow__h4100,
       start_operand1_BITS_30_TO_23_40_EQ_0b11111111__ETC___d374,
       start_operand2_BITS_30_TO_23_45_EQ_0b11111111__ETC___d383,
       x__h1338,
       x__h1340,
       x__h1424,
       x__h3852,
       x__h3933,
       x__h4381,
       x__h4476,
       x__h4491,
       y__h1339,
       y__h1341,
       y__h4355,
       y__h4475,
       y__h4477,
       y__h5980;

  // action method _start
  assign RDY__start =
	     integer_multiplier$RDY__start && !ff_stage1_rv$port1__read[85] ;
  assign CAN_FIRE__start =
	     integer_multiplier$RDY__start && !ff_stage1_rv$port1__read[85] ;
  assign WILL_FIRE__start = EN__start ;

  // action method deque_buffer
  assign RDY_deque_buffer = ff_final_out$EMPTY_N ;
  assign CAN_FIRE_deque_buffer = ff_final_out$EMPTY_N ;
  assign WILL_FIRE_deque_buffer = EN_deque_buffer ;

  // value method get_result
  assign get_result =
	     { ff_final_out$D_OUT[104:4],
	       CASE_ff_final_outD_OUT_BITS_3_TO_1_0_ff_final_ETC__q1,
	       ff_final_out$D_OUT[0] } ;
  assign RDY_get_result = ff_final_out$EMPTY_N ;

  // submodule ff_final_out
  FIFO2 #(.width(32'd105), .guarded(32'd1)) ff_final_out(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(ff_final_out$D_IN),
							 .ENQ(ff_final_out$ENQ),
							 .DEQ(ff_final_out$DEQ),
							 .CLR(ff_final_out$CLR),
							 .D_OUT(ff_final_out$D_OUT),
							 .FULL_N(ff_final_out$FULL_N),
							 .EMPTY_N(ff_final_out$EMPTY_N));

  // submodule integer_multiplier
  mkinteger_multiplier_for_spfmul integer_multiplier(.CLK(CLK),
						     .RST_N(RST_N),
						     ._set_flush__flush(integer_multiplier$_set_flush__flush),
						     ._start__destination_address(integer_multiplier$_start__destination_address),
						     ._start__fsr(integer_multiplier$_start__fsr),
						     ._start__infinity(integer_multiplier$_start__infinity),
						     ._start__invalid(integer_multiplier$_start__invalid),
						     ._start__operand1(integer_multiplier$_start__operand1),
						     ._start__operand2(integer_multiplier$_start__operand2),
						     ._start__program_counter(integer_multiplier$_start__program_counter),
						     ._start__rob_number(integer_multiplier$_start__rob_number),
						     ._start__sign(integer_multiplier$_start__sign),
						     ._start__summed_exponent(integer_multiplier$_start__summed_exponent),
						     ._start__zero(integer_multiplier$_start__zero),
						     .EN__start(integer_multiplier$EN__start),
						     .EN__deque(integer_multiplier$EN__deque),
						     .EN__set_flush(integer_multiplier$EN__set_flush),
						     .RDY__start(integer_multiplier$RDY__start),
						     .RDY__deque(),
						     .RDY__set_flush(),
						     .result_(integer_multiplier$result_),
						     .RDY_result_(integer_multiplier$RDY_result_));

  // rule RL_stage4
  assign CAN_FIRE_RL_stage4 = ff_stage3_rv[107] && ff_final_out$FULL_N ;
  assign WILL_FIRE_RL_stage4 = CAN_FIRE_RL_stage4 ;

  // rule RL_stage3
  assign CAN_FIRE_RL_stage3 =
	     ff_stage2_rv[225] && !ff_stage3_rv$port1__read[107] ;
  assign WILL_FIRE_RL_stage3 = CAN_FIRE_RL_stage3 ;

  // rule RL_stage2
  assign CAN_FIRE_RL_stage2 =
	     ff_stage1_rv[85] && integer_multiplier$RDY_result_ &&
	     !ff_stage2_rv$port1__read[225] ;
  assign WILL_FIRE_RL_stage2 = CAN_FIRE_RL_stage2 ;

  // rule RL_rl_flush_data
  assign CAN_FIRE_RL_rl_flush_data = 1'b0 ;
  assign WILL_FIRE_RL_rl_flush_data = 1'b0 ;

  // inlined wires
  assign ff_stage1_rv$EN_port0__write =
	     ff_stage1_rv[85] && integer_multiplier$RDY_result_ &&
	     !ff_stage2_rv$port1__read[225] ;
  assign ff_stage1_rv$port1__read =
	     ff_stage1_rv$EN_port0__write ?
	       86'h0AAAAAAAAAAAAAAAAAAAAA :
	       ff_stage1_rv ;
  assign ff_stage1_rv$port1__write_1 =
	     { 1'd1,
	       x__h5347,
	       v_mantissa3__h5348,
	       x__h5467,
	       _start_operand3[31],
	       start_operand1_BITS_30_TO_23_40_EQ_0b11111111__ETC___d374 ||
	       start_operand2_BITS_30_TO_23_45_EQ_0b11111111__ETC___d383,
	       x__h5347[8],
	       x__h5764,
	       x__h6074,
	       _start_operation,
	       _start_fsr[7:5] == 3'b011,
	       _start_fsr,
	       lv_sign_mul_out__h5021,
	       _start__negate } ;
  assign ff_stage1_rv$port2__read =
	     EN__start ?
	       ff_stage1_rv$port1__write_1 :
	       ff_stage1_rv$port1__read ;
  assign ff_stage2_rv$EN_port0__write =
	     ff_stage2_rv[225] && !ff_stage3_rv$port1__read[107] ;
  assign ff_stage2_rv$port1__read =
	     ff_stage2_rv$EN_port0__write ?
	       226'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       ff_stage2_rv ;
  assign ff_stage2_rv$EN_port1__write =
	     ff_stage1_rv[85] && integer_multiplier$RDY_result_ &&
	     !ff_stage2_rv$port1__read[225] ;
  assign ff_stage2_rv$port1__write_1 =
	     { 1'd1,
	       x__h1316,
	       mul_mantissa_out__h1231,
	       addend___1__h1232,
	       ff_stage1_rv[1],
	       ff_stage1_rv[35],
	       ff_stage1_rv[33:2],
	       ff_stage1_rv[42],
	       v_final_exp_out__h1322,
	       ff_stage1_rv[0],
	       ff_stage1_rv[41],
	       ff_stage1_rv[37:36],
	       x__h1657,
	       ff_stage1_rv[40] } ;
  assign ff_stage2_rv$port2__read =
	     ff_stage2_rv$EN_port1__write ?
	       ff_stage2_rv$port1__write_1 :
	       ff_stage2_rv$port1__read ;
  assign ff_stage3_rv$EN_port0__write =
	     ff_stage3_rv[107] && ff_final_out$FULL_N ;
  assign ff_stage3_rv$port1__read =
	     ff_stage3_rv$EN_port0__write ?
	       108'h2AAAAAAAAAAAAAAAAAAAAAAAAAA :
	       ff_stage3_rv ;
  assign ff_stage3_rv$EN_port1__write =
	     ff_stage2_rv[225] && !ff_stage3_rv$port1__read[107] ;
  assign ff_stage3_rv$port1__write_1 =
	     { 1'd1,
	       v_mantissa_add__h1886,
	       ff_stage2_rv[48:17],
	       x__h3852,
	       ff_stage2_rv[6],
	       final_exp_out__h1806,
	       ff_stage2_rv[5:1],
	       x__h3933 } ;
  assign ff_stage3_rv$port2__read =
	     ff_stage3_rv$EN_port1__write ?
	       ff_stage3_rv$port1__write_1 :
	       ff_stage3_rv$port1__read ;

  // register ff_stage1_rv
  assign ff_stage1_rv$D_IN = ff_stage1_rv$port2__read ;
  assign ff_stage1_rv$EN = 1'b1 ;

  // register ff_stage2_rv
  assign ff_stage2_rv$D_IN = ff_stage2_rv$port2__read ;
  assign ff_stage2_rv$EN = 1'b1 ;

  // register ff_stage3_rv
  assign ff_stage3_rv$D_IN = ff_stage3_rv$port2__read ;
  assign ff_stage3_rv$EN = 1'b1 ;

  // submodule ff_final_out
  assign ff_final_out$D_IN =
	     { 5'h0A,
	       lv_fsr__h4106,
	       x_final_result__h4119,
	       ff_stage3_rv_port0__read__29_BIT_5_38_OR_NOT_I_ETC___d330 ?
		 4'd0 :
		 IF_ff_stage3_rv_port0__read__29_BIT_5_38_THEN__ETC___d336 } ;
  assign ff_final_out$ENQ = ff_stage3_rv[107] && ff_final_out$FULL_N ;
  assign ff_final_out$DEQ = EN_deque_buffer ;
  assign ff_final_out$CLR = 1'b0 ;

  // submodule integer_multiplier
  assign integer_multiplier$_set_flush__flush = 1'b0 ;
  assign integer_multiplier$_start__destination_address = 5'b0 ;
  assign integer_multiplier$_start__fsr = 32'b0 ;
  assign integer_multiplier$_start__infinity = 1'b0 ;
  assign integer_multiplier$_start__invalid = 1'd0 ;
  assign integer_multiplier$_start__operand1 =
	     { 8'b0, _start_operand1[30:23] != 8'd0, _start_operand1[22:0] } ;
  assign integer_multiplier$_start__operand2 =
	     { 8'b0, _start_operand2[30:23] != 8'd0, _start_operand2[22:0] } ;
  assign integer_multiplier$_start__program_counter = 32'b0 ;
  assign integer_multiplier$_start__rob_number = 4'b0 ;
  assign integer_multiplier$_start__sign = 1'd0 ;
  assign integer_multiplier$_start__summed_exponent = 10'b0 ;
  assign integer_multiplier$_start__zero = 1'b0 ;
  assign integer_multiplier$EN__start = EN__start ;
  assign integer_multiplier$EN__deque = 1'b0 ;
  assign integer_multiplier$EN__set_flush = 1'b0 ;

  // remaining internal signals
  assign IF_IF_IF_ff_stage3_rv_port0__read__29_BITS_24__ETC___d305 =
	     IF_theResult_____5091_BIT_24_THEN_final_exp_ou_ETC__q2[7:0] ==
	     8'b11111111 ||
	     IF_theResult_____5091_BIT_24_THEN_final_exp_ou_ETC__q2[7:0] ==
	     8'b0 &&
	     final_mantissa__h4094 != 26'd0 ||
	     lv_inexact__h4088 ||
	     ff_stage3_rv[2:1] == 2'd0 ;
  assign IF_ff_stage3_rv_port0__read__29_BITS_4_TO_3_40_ETC___d328 =
	     ((ff_stage3_rv[4:3] == 2'd0) ?
		IF_theResult_____5091_BIT_24_THEN_final_exp_ou_ETC__q2[7:0] !=
		8'b11111111 &&
		!ff_stage3_rv[0] :
		!ff_stage3_rv[0]) &&
	     ff_stage3_rv_port0__read__29_BITS_4_TO_3_40_EQ_ETC___d327 ;
  assign IF_ff_stage3_rv_port0__read__29_BITS_4_TO_3_40_ETC___d334 =
	     (ff_stage3_rv[4:3] == 2'd0 &&
	      IF_theResult_____5091_BIT_24_THEN_final_exp_ou_ETC__q2[7:0] ==
	      8'b0 &&
	      final_mantissa__h4094 != 26'd0) ?
	       4'd9 :
	       4'd11 ;
  assign IF_ff_stage3_rv_port0__read__29_BIT_5_38_THEN__ETC___d336 =
	     ff_stage3_rv[5] ?
	       4'd3 :
	       (NOT_ff_stage3_rv_port0__read__29_BITS_4_TO_3_4_ETC___d333 ?
		  4'd7 :
		  IF_ff_stage3_rv_port0__read__29_BITS_4_TO_3_40_ETC___d334) ;
  assign IF_start_fsr_BITS_7_TO_5_96_EQ_0b11_97_AND_sta_ETC___d408 =
	     (_start_fsr[7:5] == 3'b011 &&
	      lv_sign_mul_out__h5021 | y__h5980 ||
	      _start_fsr[7:5] != 3'b011 &&
	      lv_sign_mul_out__h5021 & y__h5980) ?
	       2'b11 :
	       2'b01 ;
  assign IF_start_operand1_BITS_30_TO_0_76_EQ_0_77_OR_s_ETC___d409 =
	     (_start_operand1[30:0] == 31'd0 ||
	      _start_operand2[30:0] == 31'd0 ||
	      _start_operand3[30:0] == 31'd0) ?
	       IF_start_fsr_BITS_7_TO_5_96_EQ_0b11_97_AND_sta_ETC___d408 :
	       2'd0 ;
  assign IF_theResult_____5091_BIT_24_THEN_final_exp_ou_ETC__q2 =
	     _theResult_____5__h4091[24] ?
	       final_exp_out___1__h4545 :
	       ff_stage3_rv[14:6] ;
  assign NOT_ff_stage3_rv_port0__read__29_BITS_4_TO_3_4_ETC___d296 =
	     ff_stage3_rv[4:3] != 2'd0 ||
	     IF_theResult_____5091_BIT_24_THEN_final_exp_ou_ETC__q2[7:0] !=
	     8'b11111111 &&
	     (IF_theResult_____5091_BIT_24_THEN_final_exp_ou_ETC__q2[7:0] !=
	      8'b0 ||
	      final_mantissa__h4094 == 26'd0) &&
	     lv_inexact__h4088 ;
  assign NOT_ff_stage3_rv_port0__read__29_BITS_4_TO_3_4_ETC___d333 =
	     (ff_stage3_rv[4:3] != 2'd0 ||
	      IF_theResult_____5091_BIT_24_THEN_final_exp_ou_ETC__q2[7:0] !=
	      8'b0 ||
	      final_mantissa__h4094 == 26'd0) &&
	     lv_final_overflow__h4104 ;
  assign _theResult_____2_fst__h2028 =
	     ff_stage2_rv[223] ?
	       mantissa_add___1__h2030 :
	       mantissa_add__h2044 ;
  assign _theResult_____2_snd_fst__h3920 =
	     ff_stage2_rv[223] ?
	       final_exp_out___1__h2031 :
	       final_exp_out__h2045 ;
  assign _theResult_____2_snd_snd_fst__h4557 =
	     IF_IF_IF_ff_stage3_rv_port0__read__29_BITS_24__ETC___d305 ?
	       lv_final_output___1__h4614 :
	       ((ff_stage3_rv[2:1] == 2'b11) ? 32'h80000000 : 32'b0) ;
  assign _theResult_____2_snd_snd_snd__h4291 =
	     (ff_stage3_rv[4:3] == 2'd0) ?
	       _theResult_____2_snd_snd_snd__h4558 :
	       ff_stage3_rv[0] ;
  assign _theResult_____2_snd_snd_snd__h4558 =
	     IF_theResult_____5091_BIT_24_THEN_final_exp_ou_ETC__q2[7:0] ==
	     8'b11111111 ||
	     ff_stage3_rv[0] ;
  assign _theResult_____3__h4095 =
	     ff_stage3_rv[15] ? y__h4477 : ff_stage3_rv[16] ;
  assign _theResult_____5__h4091 =
	     IF_ff_stage3_rv_port0__read__29_BITS_24_TO_22__ETC___d267 ?
	       final_mantissa___1__h4511 :
	       ff_stage3_rv[106:81] ;
  assign _theResult_____5_snd__h5799 =
	     (_start_operand1[30:23] == 8'b11111111 &&
	      _start_operand1[22:0] == 23'd0 ||
	      _start_operand2[30:23] == 8'b11111111 &&
	      _start_operand2[22:0] == 23'd0) ?
	       lv_is_infinity___1__h6075 :
	       _theResult_____5_snd__h5831 ;
  assign _theResult_____5_snd__h5831 =
	     (_start_operand3[30:23] == 8'b11111111 &&
	      _start_operand3[22:0] == 23'd0) ?
	       lv_is_infinity___1__h6077 :
	       2'd0 ;
  assign _theResult____h1227 =
	     (integer_multiplier$result_[20:0] == 21'd0) ?
	       mul_mantissa_out__h1226 :
	       result__h1524 ;
  assign _theResult____h4087 = ff_stage3_rv[78:49] != 30'd0 ;
  assign addend___1__h1232 =
	     ff_stage1_rv_port0__read_BITS_84_TO_76_6_ULE_f_ETC___d28 ?
	       addend__h1228 :
	       addend___1__h1617 ;
  assign addend___1__h1617 = addend__h1228 >> exp_diff__h1616 ;
  assign addend__h1228 = { 2'b0, ff_stage1_rv[75:52], 32'b0 } ;
  assign exp_diff__h1589 = ff_stage1_rv[51:43] - ff_stage1_rv[84:76] ;
  assign exp_diff__h1616 = ff_stage1_rv[84:76] - ff_stage1_rv[51:43] ;
  assign ff_stage1_rv_port0__read_BITS_84_TO_76_6_ULE_f_ETC___d28 =
	     ff_stage1_rv[84:76] <= ff_stage1_rv[51:43] ;
  assign ff_stage2_rv_port0__read__8_BIT_49_05_XOR_ff_s_ETC___d207 =
	     ff_stage2_rv[49] ^ ff_stage2_rv[16] ;
  assign ff_stage3_rv_port0__read__29_BITS_4_TO_3_40_EQ_ETC___d327 =
	     ff_stage3_rv[4:3] == 2'd0 &&
	     (IF_theResult_____5091_BIT_24_THEN_final_exp_ou_ETC__q2[7:0] ==
	      8'b11111111 ||
	      IF_theResult_____5091_BIT_24_THEN_final_exp_ou_ETC__q2[7:0] ==
	      8'b0 &&
	      final_mantissa__h4094 != 26'd0 ||
	      !lv_inexact__h4088) ;
  assign ff_stage3_rv_port0__read__29_BIT_5_38_OR_NOT_I_ETC___d330 =
	     (IF_theResult_____5091_BIT_24_THEN_final_exp_ou_ETC__q2[7:0] !=
	      8'b0 ||
	      final_mantissa__h4094 == 26'd0) &&
	     !ff_stage3_rv[5] &&
	     IF_ff_stage3_rv_port0__read__29_BITS_4_TO_3_40_ETC___d328 ;
  assign final_exp_out___1__h1984 = ff_stage2_rv[15:7] + 9'd2 ;
  assign final_exp_out___1__h2031 = ff_stage2_rv[15:7] + 9'd1 ;
  assign final_exp_out___1__h4545 = ff_stage3_rv[14:6] + 9'd1 ;
  assign final_exp_out__h1806 =
	     ff_stage2_rv[224] ?
	       final_exp_out___1__h1984 :
	       _theResult_____2_snd_fst__h3920 ;
  assign final_exp_out__h2045 = ff_stage2_rv[15:7] - lv_leading_zeros__h2043 ;
  assign final_mantissa___1__h4511 = ff_stage3_rv[106:81] + 26'd1 ;
  assign final_mantissa__h4094 =
	     _theResult_____5__h4091[24] ?
	       final_mantissa__h4544 :
	       _theResult_____5__h4091 ;
  assign final_mantissa__h4544 = { 1'd0, _theResult_____5__h4091[25:1] } ;
  assign lv_final_inexact__h4102 =
	     !ff_stage3_rv[5] &&
	     NOT_ff_stage3_rv_port0__read__29_BITS_4_TO_3_4_ETC___d296 ;
  assign lv_final_output___1__h4614 =
	     { _theResult_____3__h4095,
	       IF_theResult_____5091_BIT_24_THEN_final_exp_ou_ETC__q2[7:0],
	       final_mantissa__h4094[22:0] } ;
  assign lv_final_overflow__h4104 =
	     ff_stage3_rv[5] ?
	       ff_stage3_rv[0] :
	       _theResult_____2_snd_snd_snd__h4291 ;
  assign lv_fsr__h4106 =
	     { ff_stage3_rv[48:27],
	       1'b0,
	       ff_stage3_rv[2],
	       ff_stage3_rv[24:22],
	       2'b0,
	       lv_final_overflow__h4104,
	       lv_underflow__h4100,
	       lv_final_inexact__h4102 } ;
  assign lv_inexact__h4088 = x__h4491 | _theResult____h4087 ;
  assign lv_is_infinity___1__h6075 = { lv_sign_mul_out__h5021, 1'd1 } ;
  assign lv_is_infinity___1__h6077 =
	     { _start_operand3[31] ^ _start_operation, 1'd1 } ;
  assign lv_leading_zeros__h2043 =
	     ff_stage2_rv[222] ?
	       9'd0 :
	       (ff_stage2_rv[221] ?
		  9'd1 :
		  (ff_stage2_rv[220] ?
		     9'd2 :
		     (ff_stage2_rv[219] ?
			9'd3 :
			(ff_stage2_rv[218] ?
			   9'd4 :
			   (ff_stage2_rv[217] ?
			      9'd5 :
			      (ff_stage2_rv[216] ?
				 9'd6 :
				 (ff_stage2_rv[215] ?
				    9'd7 :
				    (ff_stage2_rv[214] ?
				       9'd8 :
				       (ff_stage2_rv[213] ?
					  9'd9 :
					  (ff_stage2_rv[212] ?
					     9'd10 :
					     (ff_stage2_rv[211] ?
						9'd11 :
						(ff_stage2_rv[210] ?
						   9'd12 :
						   (ff_stage2_rv[209] ?
						      9'd13 :
						      (ff_stage2_rv[208] ?
							 9'd14 :
							 (ff_stage2_rv[207] ?
							    9'd15 :
							    (ff_stage2_rv[206] ?
							       9'd16 :
							       (ff_stage2_rv[205] ?
								  9'd17 :
								  (ff_stage2_rv[204] ?
								     9'd18 :
								     (ff_stage2_rv[203] ?
									9'd19 :
									(ff_stage2_rv[202] ?
									   9'd20 :
									   (ff_stage2_rv[201] ?
									      9'd21 :
									      (ff_stage2_rv[200] ?
										 9'd22 :
										 (ff_stage2_rv[199] ?
										    9'd23 :
										    (ff_stage2_rv[198] ?
										       9'd24 :
										       (ff_stage2_rv[197] ?
											  9'd25 :
											  (ff_stage2_rv[196] ?
											     9'd26 :
											     (ff_stage2_rv[195] ?
												9'd27 :
												(ff_stage2_rv[194] ?
												   9'd28 :
												   (ff_stage2_rv[193] ?
												      9'd29 :
												      (ff_stage2_rv[192] ?
													 9'd30 :
													 (ff_stage2_rv[191] ?
													    9'd31 :
													    (ff_stage2_rv[190] ?
													       9'd32 :
													       (ff_stage2_rv[189] ?
														  9'd33 :
														  (ff_stage2_rv[188] ?
														     9'd34 :
														     (ff_stage2_rv[187] ?
															9'd35 :
															(ff_stage2_rv[186] ?
															   9'd36 :
															   (ff_stage2_rv[185] ?
															      9'd37 :
															      (ff_stage2_rv[184] ?
																 9'd38 :
																 (ff_stage2_rv[183] ?
																    9'd39 :
																    (ff_stage2_rv[182] ?
																       9'd40 :
																       (ff_stage2_rv[181] ?
																	  9'd41 :
																	  (ff_stage2_rv[180] ?
																	     9'd42 :
																	     (ff_stage2_rv[179] ?
																		9'd43 :
																		(ff_stage2_rv[178] ?
																		   9'd44 :
																		   (ff_stage2_rv[177] ?
																		      9'd45 :
																		      (ff_stage2_rv[176] ?
																			 9'd46 :
																			 (ff_stage2_rv[175] ?
																			    9'd47 :
																			    (ff_stage2_rv[174] ?
																			       9'd48 :
																			       (ff_stage2_rv[173] ?
																				  9'd49 :
																				  (ff_stage2_rv[172] ?
																				     9'd50 :
																				     (ff_stage2_rv[171] ?
																					9'd51 :
																					(ff_stage2_rv[170] ?
																					   9'd52 :
																					   (ff_stage2_rv[169] ?
																					      9'd53 :
																					      (ff_stage2_rv[168] ?
																						 9'd54 :
																						 (ff_stage2_rv[167] ?
																						    9'd55 :
																						    9'd0))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign lv_roundup___1__h4343 = ff_stage3_rv[80] & y__h4355 ;
  assign lv_roundup___1__h4463 = ff_stage3_rv[80] & y__h4475 ;
  assign lv_roundup___1__h4479 = lv_inexact__h4088 & ff_stage3_rv[16] ;
  assign lv_sign_mul_out__h5021 = _start_operand1[31] ^ _start_operand2[31] ;
  assign lv_underflow__h4100 =
	     !ff_stage3_rv[5] && ff_stage3_rv[4:3] == 2'd0 &&
	     IF_theResult_____5091_BIT_24_THEN_final_exp_ou_ETC__q2[7:0] ==
	     8'b0 &&
	     final_mantissa__h4094 != 26'd0 ;
  assign mantissa_add___1__h1983 = { 2'd0, ff_stage2_rv[224:169] } ;
  assign mantissa_add___1__h2030 = { 1'd0, ff_stage2_rv[224:168] } ;
  assign mantissa_add__h1430 = mul_mantissa_out__h1231 + addend___1__h1232 ;
  assign mantissa_add__h1644 = mul_mantissa_out__h1231 - addend___1__h1232 ;
  assign mantissa_add__h2044 =
	     ff_stage2_rv[224:167] << lv_leading_zeros__h2043 ;
  assign mul_mantissa_out__h1226 =
	     { 1'b0, integer_multiplier$result_[47:21], 30'b0 } ;
  assign mul_mantissa_out__h1231 =
	     ff_stage1_rv_port0__read_BITS_84_TO_76_6_ULE_f_ETC___d28 ?
	       mul_mantissa_out__h1590 :
	       _theResult____h1227 ;
  assign mul_mantissa_out__h1590 = _theResult____h1227 >> exp_diff__h1589 ;
  assign result__h1524 =
	     { 1'b0, integer_multiplier$result_[47:21], 30'd536870912 } ;
  assign start_operand1_BITS_30_TO_23_40_EQ_0b11111111__ETC___d374 =
	     _start_operand1[30:23] == 8'b11111111 &&
	     _start_operand1[22:0] != 23'd0 ||
	     _start_operand2[30:23] == 8'b11111111 &&
	     _start_operand2[22:0] != 23'd0 ||
	     _start_operand3[30:23] == 8'b11111111 &&
	     _start_operand3[22:0] != 23'd0 ;
  assign start_operand2_BITS_30_TO_23_45_EQ_0b11111111__ETC___d383 =
	     _start_operand2[30:23] == 8'b11111111 &&
	     _start_operand2[22:0] == 23'd0 &&
	     _start_operand1[30:0] == 31'd0 ||
	     _start_operand1[30:23] == 8'b11111111 &&
	     _start_operand1[22:0] == 23'd0 ||
	     _start_operand2[30:23] == 8'b11111111 &&
	     _start_operand2[22:0] == 23'd0 &&
	     _start_operand3[30:23] == 8'b11111111 &&
	     _start_operand3[22:0] == 23'd0 ;
  assign v_final_exp_out__h1322 =
	     ff_stage1_rv_port0__read_BITS_84_TO_76_6_ULE_f_ETC___d28 ?
	       ff_stage1_rv[51:43] :
	       ff_stage1_rv[84:76] ;
  assign v_mantissa3__h5348 =
	     { _start_operand3[30:23] != 8'd0, _start_operand3[22:0] } ;
  assign v_mantissa_add__h1886 =
	     ff_stage2_rv[224] ?
	       mantissa_add___1__h1983 :
	       _theResult_____2_fst__h2028 ;
  assign x__h1316 =
	     (x__h1338 | y__h1339) ?
	       mantissa_add__h1644 :
	       mantissa_add__h1430 ;
  assign x__h1338 = x__h1340 & y__h1341 ;
  assign x__h1340 = ff_stage1_rv[1] ^ ff_stage1_rv[42] ;
  assign x__h1424 = ~x__h1340 ;
  assign x__h1657 =
	     ({ ff_stage1_rv[42], ff_stage1_rv[51:43], addend__h1228 } ==
	      { ff_stage1_rv[1], ff_stage1_rv[84:76], _theResult____h1227 } &&
	      ff_stage1_rv[35]) ?
	       (ff_stage1_rv[34] ? 2'b11 : 2'b01) :
	       ff_stage1_rv[39:38] ;
  assign x__h3852 =
	     ff_stage2_rv[166:109] < ff_stage2_rv[108:51] &&
	     !ff_stage2_rv[50] &&
	     ff_stage2_rv_port0__read__8_BIT_49_05_XOR_ff_s_ETC___d207 ||
	     ff_stage2_rv[50] &&
	     (ff_stage2_rv[166:109] > ff_stage2_rv[108:51] ||
	      ff_stage2_rv_port0__read__8_BIT_49_05_XOR_ff_s_ETC___d207) ;
  assign x__h3933 = final_exp_out__h1806[8] || ff_stage2_rv[0] ;
  assign x__h4381 = ff_stage3_rv[81] | ff_stage3_rv[79] ;
  assign x__h4476 = ff_stage3_rv[79] | _theResult____h4087 ;
  assign x__h4491 = ff_stage3_rv[80] | ff_stage3_rv[79] ;
  assign x__h4648 =
	     ff_stage3_rv[5] ?
	       32'b00111111111000000000000000000000 :
	       _theResult_____2_snd_snd_fst__h4290 ;
  assign x__h5347 = x__h5370 - 9'b001111111 ;
  assign x__h5370 = x__h5371 + y__h5372 ;
  assign x__h5371 = { 1'd0, _start_operand1[30:23] } ;
  assign x__h5467 = { 1'b0, _start_operand3[30:23] } ;
  assign x__h5764 =
	     (start_operand1_BITS_30_TO_23_40_EQ_0b11111111__ETC___d374 ||
	      _start_operand1[30:23] == 8'b11111111 &&
	      _start_operand1[22:0] == 23'd0 ||
	      _start_operand2[30:23] == 8'b11111111 &&
	      _start_operand2[22:0] == 23'd0 ||
	      _start_operand3[30:23] == 8'b11111111 &&
	      _start_operand3[22:0] == 23'd0) ?
	       2'd0 :
	       IF_start_operand1_BITS_30_TO_0_76_EQ_0_77_OR_s_ETC___d409 ;
  assign x__h6074 =
	     (start_operand1_BITS_30_TO_23_40_EQ_0b11111111__ETC___d374 ||
	      start_operand2_BITS_30_TO_23_45_EQ_0b11111111__ETC___d383) ?
	       2'd0 :
	       _theResult_____5_snd__h5799 ;
  assign x_final_result__h4119 = { 32'd0, x__h4648 } ;
  assign y__h1339 = x__h1424 & ff_stage1_rv[35] ;
  assign y__h1341 = ~ff_stage1_rv[35] ;
  assign y__h4355 = x__h4381 | _theResult____h4087 ;
  assign y__h4475 = x__h4476 | y__h4477 ;
  assign y__h4477 = ~ff_stage3_rv[16] ;
  assign y__h5372 = { 1'd0, _start_operand2[30:23] } ;
  assign y__h5980 = _start_operation ^ _start_operand2[31] ;
  always@(ff_final_out$D_OUT)
  begin
    case (ff_final_out$D_OUT[3:1])
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4:
	  CASE_ff_final_outD_OUT_BITS_3_TO_1_0_ff_final_ETC__q1 =
	      ff_final_out$D_OUT[3:1];
      default: CASE_ff_final_outD_OUT_BITS_3_TO_1_0_ff_final_ETC__q1 = 3'd5;
    endcase
  end
  always@(ff_stage3_rv or
	  lv_inexact__h4088 or
	  y__h4477 or
	  lv_roundup___1__h4343 or
	  lv_roundup___1__h4479 or lv_roundup___1__h4463)
  begin
    case (ff_stage3_rv[24:22])
      3'b0:
	  IF_ff_stage3_rv_port0__read__29_BITS_24_TO_22__ETC___d267 =
	      lv_roundup___1__h4343;
      3'b011:
	  IF_ff_stage3_rv_port0__read__29_BITS_24_TO_22__ETC___d267 =
	      lv_roundup___1__h4479;
      3'b100:
	  IF_ff_stage3_rv_port0__read__29_BITS_24_TO_22__ETC___d267 =
	      lv_roundup___1__h4463;
      default: IF_ff_stage3_rv_port0__read__29_BITS_24_TO_22__ETC___d267 =
		   ff_stage3_rv[24:22] == 3'b010 &&
		   lv_inexact__h4088 & y__h4477;
    endcase
  end
  always@(ff_stage3_rv or _theResult_____2_snd_snd_fst__h4557)
  begin
    case (ff_stage3_rv[4:3])
      2'd0:
	  _theResult_____2_snd_snd_fst__h4290 =
	      _theResult_____2_snd_snd_fst__h4557;
      2'b01:
	  _theResult_____2_snd_snd_fst__h4290 =
	      32'b00111111110000000000000000000000;
      2'd2: _theResult_____2_snd_snd_fst__h4290 = 32'd0;
      2'b11: _theResult_____2_snd_snd_fst__h4290 = 32'h7FC00000;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        ff_stage1_rv <= `BSV_ASSIGNMENT_DELAY 86'h0AAAAAAAAAAAAAAAAAAAAA;
	ff_stage2_rv <= `BSV_ASSIGNMENT_DELAY
	    226'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	ff_stage3_rv <= `BSV_ASSIGNMENT_DELAY
	    108'h2AAAAAAAAAAAAAAAAAAAAAAAAAA;
      end
    else
      begin
        if (ff_stage1_rv$EN)
	  ff_stage1_rv <= `BSV_ASSIGNMENT_DELAY ff_stage1_rv$D_IN;
	if (ff_stage2_rv$EN)
	  ff_stage2_rv <= `BSV_ASSIGNMENT_DELAY ff_stage2_rv$D_IN;
	if (ff_stage3_rv$EN)
	  ff_stage3_rv <= `BSV_ASSIGNMENT_DELAY ff_stage3_rv$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    ff_stage1_rv = 86'h2AAAAAAAAAAAAAAAAAAAAA;
    ff_stage2_rv =
	226'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ff_stage3_rv = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkfpu_fm_add_sub

