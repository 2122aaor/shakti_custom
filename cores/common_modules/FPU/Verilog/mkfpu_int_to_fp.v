//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// On Fri Jan 22 01:17:33 IST 2016
//
//
// Ports:
// Name                         I/O  size props
// RDY__start                     O     1
// result_                        O   105
// RDY_result_                    O     1
// RDY__deque_buffer              O     1
// RDY__set_flush                 O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// _start_inp_int                 I    64
// _start_instruction             I    32
// _start__destination            I     5
// _start_fsr                     I    32
// _start_rob_number              I     4
// _start_pc                      I    32
// _set_flush_f                   I     1
// EN__start                      I     1
// EN__deque_buffer               I     1
// EN__set_flush                  I     1
//
// Combinational paths from inputs to outputs:
//   EN__deque_buffer -> RDY__start
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkfpu_int_to_fp(CLK,
		       RST_N,

		       _start_inp_int,
		       _start_instruction,
		       _start__destination,
		       _start_fsr,
		       _start_rob_number,
		       _start_pc,
		       EN__start,
		       RDY__start,

		       result_,
		       RDY_result_,

		       EN__deque_buffer,
		       RDY__deque_buffer,

		       _set_flush_f,
		       EN__set_flush,
		       RDY__set_flush);
  input  CLK;
  input  RST_N;

  // action method _start
  input  [63 : 0] _start_inp_int;
  input  [31 : 0] _start_instruction;
  input  [4 : 0] _start__destination;
  input  [31 : 0] _start_fsr;
  input  [3 : 0] _start_rob_number;
  input  [31 : 0] _start_pc;
  input  EN__start;
  output RDY__start;

  // value method result_
  output [104 : 0] result_;
  output RDY_result_;

  // action method _deque_buffer
  input  EN__deque_buffer;
  output RDY__deque_buffer;

  // action method _set_flush
  input  _set_flush_f;
  input  EN__set_flush;
  output RDY__set_flush;

  // signals for module outputs
  wire [104 : 0] result_;
  wire RDY__deque_buffer, RDY__set_flush, RDY__start, RDY_result_;

  // inlined wires
  wire [157 : 0] ff_input_stage_rv$port1__read,
		 ff_input_stage_rv$port1__write_1,
		 ff_input_stage_rv$port2__read,
		 ff_input_stage_rv$port3__read;
  wire [105 : 0] ff_final_out_rv$port1__read,
		 ff_final_out_rv$port1__write_1,
		 ff_final_out_rv$port2__read,
		 ff_final_out_rv$port3__read;
  wire ff_final_out_rv$EN_port1__write, ff_final_out_rv$EN_port2__write;

  // register ff_final_out_rv
  reg [105 : 0] ff_final_out_rv;
  wire [105 : 0] ff_final_out_rv$D_IN;
  wire ff_final_out_rv$EN;

  // register ff_input_stage_rv
  reg [157 : 0] ff_input_stage_rv;
  wire [157 : 0] ff_input_stage_rv$D_IN;
  wire ff_input_stage_rv$EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_flush_all_fifos,
       CAN_FIRE_RL_rl_last_rule,
       CAN_FIRE__deque_buffer,
       CAN_FIRE__set_flush,
       CAN_FIRE__start,
       WILL_FIRE_RL_rl_flush_all_fifos,
       WILL_FIRE_RL_rl_last_rule,
       WILL_FIRE__deque_buffer,
       WILL_FIRE__set_flush,
       WILL_FIRE__start;

  // remaining internal signals
  reg [2 : 0] CASE_ff_final_out_rv_BITS_3_TO_1_0_ff_final_ou_ETC__q1;
  reg IF_ff_input_stage_rv_port0__read_BITS_95_TO_93_ETC___d61;
  wire [80 : 0] IF_IF_IF_IF_IF_IF_start_instruction_BIT_21_3_T_ETC___d438;
  wire [63 : 0] IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104,
		IF_start_instruction_BIT_21_3_THEN_IF_start_in_ETC___d99,
		_theResult_____2_fst__h2384,
		ff_input_stage_rv_port0__read_BITS_74_TO_11_8__ETC___d20,
		lv_integ_num___1__h2002,
		lv_integ_num___1__h2031,
		lv_integ_num__h2387,
		lv_output_result__h1239,
		lv_output_result__h1649,
		v_final_result__h882;
  wire [52 : 0] IF_IF_ff_input_stage_rv_port0__read_BITS_95_TO_ETC___d79,
		_theResult_____3__h1524,
		lv_rounded_mantissa__h1553,
		lv_rounded_mantissa__h1582;
  wire [51 : 0] lv_mantissa__h1027, lv_mantissa__h687;
  wire [31 : 0] lv_fsr__h700, start_inp_int_BITS_31_TO_0__q2;
  wire [10 : 0] _theResult_____2_snd__h2385,
		_theResult_____3_fst__h1525,
		lv_exponent___1__h1586,
		lv_exponent__h682,
		lv_exponent__h696;
  wire [6 : 0] IF_IF_IF_IF_IF_IF_start_instruction_BIT_21_3_T_ETC__q3;
  wire [5 : 0] IF_IF_IF_IF_IF_start_instruction_BIT_21_3_THEN_ETC___d264,
	       IF_IF_IF_IF_IF_start_instruction_BIT_21_3_THEN_ETC___d427;
  wire [4 : 0] IF_IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_ETC___d180,
	       IF_IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_ETC___d259,
	       IF_IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_ETC___d343,
	       IF_IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_ETC___d422;
  wire [3 : 0] IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_st_ETC___d138,
	       IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_st_ETC___d175,
	       IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_st_ETC___d217,
	       IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_st_ETC___d254,
	       IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_st_ETC___d301,
	       IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_st_ETC___d338,
	       IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_st_ETC___d380,
	       IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_st_ETC___d417;
  wire [1 : 0] p0_l1__h2101,
	       p10_l1__h2121,
	       p11_l1__h2123,
	       p12_l1__h2125,
	       p13_l1__h2127,
	       p14_l1__h2129,
	       p15_l1__h2131,
	       p1_l1__h2103,
	       p2_l1__h2105,
	       p3_l1__h2107,
	       p4_l1__h2109,
	       p5_l1__h2111,
	       p6_l1__h2113,
	       p7_l1__h2115,
	       p8_l1__h2117,
	       p9_l1__h2119;
  wire lv_guard__h689,
       lv_inexact__h699,
       lv_round__h691,
       lv_roundup___1__h1293,
       lv_roundup___1__h1414,
       lv_roundup___1__h1457,
       lv_sticky___1__h1030,
       lv_sticky__h685,
       lv_sticky__h692,
       x__h1013,
       x__h1306,
       x__h1427,
       x__h2331,
       x__h2332,
       x__h2635,
       x__h2638,
       x__h2690,
       x__h2691,
       x__h2961,
       x__h2964,
       x__h3106,
       x__h3107,
       x__h3380,
       x__h3383,
       x__h3435,
       x__h3436,
       x__h3706,
       x__h3709,
       x__h3938,
       x__h3939,
       x__h4212,
       x__h4215,
       x__h4267,
       x__h4268,
       x__h4538,
       x__h4541,
       x__h4683,
       x__h4684,
       x__h4957,
       x__h4960,
       x__h5012,
       x__h5013,
       x__h5283,
       x__h5286,
       x__h5602,
       x__h5603,
       x__h5876,
       x__h5879,
       x__h5931,
       x__h5932,
       x__h6202,
       x__h6205,
       x__h6347,
       x__h6348,
       x__h6621,
       x__h6624,
       x__h6676,
       x__h6677,
       x__h6947,
       x__h6950,
       x__h7179,
       x__h7180,
       x__h7453,
       x__h7456,
       x__h7508,
       x__h7509,
       x__h7779,
       x__h7782,
       x__h7924,
       x__h7925,
       x__h8198,
       x__h8201,
       x__h8253,
       x__h8254,
       x__h8524,
       x__h8527,
       y__h1305,
       y__h1426,
       y__h1428,
       y__h2636,
       y__h2639,
       y__h2642,
       y__h2962,
       y__h2965,
       y__h2968,
       y__h3381,
       y__h3384,
       y__h3387,
       y__h3707,
       y__h3710,
       y__h3713,
       y__h4213,
       y__h4216,
       y__h4219,
       y__h4539,
       y__h4542,
       y__h4545,
       y__h4958,
       y__h4961,
       y__h4964,
       y__h5284,
       y__h5287,
       y__h5290,
       y__h5877,
       y__h5880,
       y__h5883,
       y__h6203,
       y__h6206,
       y__h6209,
       y__h6622,
       y__h6625,
       y__h6628,
       y__h6948,
       y__h6951,
       y__h6954,
       y__h7454,
       y__h7457,
       y__h7460,
       y__h7780,
       y__h7783,
       y__h7786,
       y__h8199,
       y__h8202,
       y__h8205,
       y__h8525,
       y__h8528,
       y__h8531;

  // action method _start
  assign RDY__start = !ff_input_stage_rv$port1__read[157] ;
  assign CAN_FIRE__start = !ff_input_stage_rv$port1__read[157] ;
  assign WILL_FIRE__start = EN__start ;

  // value method result_
  assign result_ =
	     { ff_final_out_rv[104:4],
	       CASE_ff_final_out_rv_BITS_3_TO_1_0_ff_final_ou_ETC__q1,
	       ff_final_out_rv[0] } ;
  assign RDY_result_ = ff_final_out_rv[105] ;

  // action method _deque_buffer
  assign RDY__deque_buffer = ff_final_out_rv[105] ;
  assign CAN_FIRE__deque_buffer = ff_final_out_rv[105] ;
  assign WILL_FIRE__deque_buffer = EN__deque_buffer ;

  // action method _set_flush
  assign RDY__set_flush = 1'd1 ;
  assign CAN_FIRE__set_flush = 1'd1 ;
  assign WILL_FIRE__set_flush = EN__set_flush ;

  // rule RL_rl_last_rule
  assign CAN_FIRE_RL_rl_last_rule =
	     ff_input_stage_rv[157] && !ff_final_out_rv$port1__read[105] ;
  assign WILL_FIRE_RL_rl_last_rule = CAN_FIRE_RL_rl_last_rule ;

  // rule RL_rl_flush_all_fifos
  assign CAN_FIRE_RL_rl_flush_all_fifos = EN__set_flush && _set_flush_f ;
  assign WILL_FIRE_RL_rl_flush_all_fifos = CAN_FIRE_RL_rl_flush_all_fifos ;

  // inlined wires
  assign ff_final_out_rv$port1__read =
	     EN__deque_buffer ?
	       106'h0AAAAAAAAAAAAAAAAAAAAAAAAAA :
	       ff_final_out_rv ;
  assign ff_final_out_rv$EN_port1__write =
	     ff_input_stage_rv[157] && !ff_final_out_rv$port1__read[105] ;
  assign ff_final_out_rv$port1__write_1 =
	     { 1'd1,
	       ff_input_stage_rv[156:152],
	       lv_fsr__h700,
	       v_final_result__h882,
	       lv_inexact__h699 ? 4'd11 : 4'd0 } ;
  assign ff_final_out_rv$port2__read =
	     ff_final_out_rv$EN_port1__write ?
	       ff_final_out_rv$port1__write_1 :
	       ff_final_out_rv$port1__read ;
  assign ff_final_out_rv$EN_port2__write = EN__set_flush && _set_flush_f ;
  assign ff_final_out_rv$port3__read =
	     ff_final_out_rv$EN_port2__write ?
	       106'h0AAAAAAAAAAAAAAAAAAAAAAAAAA :
	       ff_final_out_rv$port2__read ;
  assign ff_input_stage_rv$port1__read =
	     CAN_FIRE_RL_rl_last_rule ?
	       158'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       ff_input_stage_rv ;
  assign ff_input_stage_rv$port1__write_1 =
	     { 1'd1,
	       _start__destination,
	       _start_pc,
	       _start_fsr,
	       _start_rob_number,
	       _start_instruction[7],
	       _start_inp_int[63],
	       IF_start_instruction_BIT_21_3_THEN_IF_start_in_ETC___d99 ==
	       64'd0,
	       IF_IF_IF_IF_IF_IF_start_instruction_BIT_21_3_T_ETC___d438 } ;
  assign ff_input_stage_rv$port2__read =
	     EN__start ?
	       ff_input_stage_rv$port1__write_1 :
	       ff_input_stage_rv$port1__read ;
  assign ff_input_stage_rv$port3__read =
	     CAN_FIRE_RL_rl_flush_all_fifos ?
	       158'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       ff_input_stage_rv$port2__read ;

  // register ff_final_out_rv
  assign ff_final_out_rv$D_IN = ff_final_out_rv$port3__read ;
  assign ff_final_out_rv$EN = 1'b1 ;

  // register ff_input_stage_rv
  assign ff_input_stage_rv$D_IN = ff_input_stage_rv$port3__read ;
  assign ff_input_stage_rv$EN = 1'b1 ;

  // remaining internal signals
  assign IF_IF_IF_IF_IF_IF_start_instruction_BIT_21_3_T_ETC___d438 =
	     { IF_IF_IF_IF_IF_IF_start_instruction_BIT_21_3_T_ETC__q3[5:0],
	       (IF_start_instruction_BIT_21_3_THEN_IF_start_in_ETC___d99 ==
		64'd0) ?
		 75'd0 :
		 { _theResult_____2_fst__h2384,
		   _theResult_____2_snd__h2385 } } ;
  assign IF_IF_IF_IF_IF_IF_start_instruction_BIT_21_3_T_ETC__q3 =
	     IF_IF_IF_IF_IF_start_instruction_BIT_21_3_THEN_ETC___d264[5] ?
	       { 2'd2,
		 IF_IF_IF_IF_IF_start_instruction_BIT_21_3_THEN_ETC___d264[4:0] } :
	       (IF_IF_IF_IF_IF_start_instruction_BIT_21_3_THEN_ETC___d427[5] ?
		  { 2'd3,
		    IF_IF_IF_IF_IF_start_instruction_BIT_21_3_THEN_ETC___d427[4:0] } :
		  7'd0) ;
  assign IF_IF_IF_IF_IF_start_instruction_BIT_21_3_THEN_ETC___d264 =
	     IF_IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_ETC___d180[4] ?
	       { 2'd2,
		 IF_IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_ETC___d180[3:0] } :
	       (IF_IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_ETC___d259[4] ?
		  { 2'd3,
		    IF_IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_ETC___d259[3:0] } :
		  6'd0) ;
  assign IF_IF_IF_IF_IF_start_instruction_BIT_21_3_THEN_ETC___d427 =
	     IF_IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_ETC___d343[4] ?
	       { 2'd2,
		 IF_IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_ETC___d343[3:0] } :
	       (IF_IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_ETC___d422[4] ?
		  { 2'd3,
		    IF_IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_ETC___d422[3:0] } :
		  6'd0) ;
  assign IF_IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_ETC___d180 =
	     IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_st_ETC___d138[3] ?
	       { 2'd2,
		 IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_st_ETC___d138[2:0] } :
	       (IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_st_ETC___d175[3] ?
		  { 2'd3,
		    IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_st_ETC___d175[2:0] } :
		  5'd0) ;
  assign IF_IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_ETC___d259 =
	     IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_st_ETC___d217[3] ?
	       { 2'd2,
		 IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_st_ETC___d217[2:0] } :
	       (IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_st_ETC___d254[3] ?
		  { 2'd3,
		    IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_st_ETC___d254[2:0] } :
		  5'd0) ;
  assign IF_IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_ETC___d343 =
	     IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_st_ETC___d301[3] ?
	       { 2'd2,
		 IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_st_ETC___d301[2:0] } :
	       (IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_st_ETC___d338[3] ?
		  { 2'd3,
		    IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_st_ETC___d338[2:0] } :
		  5'd0) ;
  assign IF_IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_ETC___d422 =
	     IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_st_ETC___d380[3] ?
	       { 2'd2,
		 IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_st_ETC___d380[2:0] } :
	       (IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_st_ETC___d417[3] ?
		  { 2'd3,
		    IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_st_ETC___d417[2:0] } :
		  5'd0) ;
  assign IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_st_ETC___d138 =
	     (x__h2331 |
	      IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[60]) ?
	       { 2'd2, p0_l1__h2101 } :
	       ((x__h2690 |
		 IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[56]) ?
		  { 2'd3, p1_l1__h2103 } :
		  4'd0) ;
  assign IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_st_ETC___d175 =
	     (x__h3106 |
	      IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[52]) ?
	       { 2'd2, p2_l1__h2105 } :
	       ((x__h3435 |
		 IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[48]) ?
		  { 2'd3, p3_l1__h2107 } :
		  4'd0) ;
  assign IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_st_ETC___d217 =
	     (x__h3938 |
	      IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[44]) ?
	       { 2'd2, p4_l1__h2109 } :
	       ((x__h4267 |
		 IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[40]) ?
		  { 2'd3, p5_l1__h2111 } :
		  4'd0) ;
  assign IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_st_ETC___d254 =
	     (x__h4683 |
	      IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[36]) ?
	       { 2'd2, p6_l1__h2113 } :
	       ((x__h5012 |
		 IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[32]) ?
		  { 2'd3, p7_l1__h2115 } :
		  4'd0) ;
  assign IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_st_ETC___d301 =
	     (x__h5602 |
	      IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[28]) ?
	       { 2'd2, p8_l1__h2117 } :
	       ((x__h5931 |
		 IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[24]) ?
		  { 2'd3, p9_l1__h2119 } :
		  4'd0) ;
  assign IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_st_ETC___d338 =
	     (x__h6347 |
	      IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[20]) ?
	       { 2'd2, p10_l1__h2121 } :
	       ((x__h6676 |
		 IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[16]) ?
		  { 2'd3, p11_l1__h2123 } :
		  4'd0) ;
  assign IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_st_ETC___d380 =
	     (x__h7179 |
	      IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[12]) ?
	       { 2'd2, p12_l1__h2125 } :
	       ((x__h7508 |
		 IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[8]) ?
		  { 2'd3, p13_l1__h2127 } :
		  4'd0) ;
  assign IF_IF_IF_start_instruction_BIT_21_3_THEN_IF_st_ETC___d417 =
	     (x__h7924 |
	      IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[4]) ?
	       { 2'd2, p14_l1__h2129 } :
	       ((x__h8253 |
		 IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[0]) ?
		  { 2'd3, p15_l1__h2131 } :
		  4'd0) ;
  assign IF_IF_ff_input_stage_rv_port0__read_BITS_95_TO_ETC___d79 =
	     IF_ff_input_stage_rv_port0__read_BITS_95_TO_93_ETC___d61 ?
	       _theResult_____3__h1524 :
	       { 1'b0,
		 ff_input_stage_rv[83] ?
		   lv_mantissa__h687 :
		   { lv_mantissa__h687[22:0], 29'd0 } } ;
  assign IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104 =
	     (IF_start_instruction_BIT_21_3_THEN_IF_start_in_ETC___d99 ==
	      64'd0) ?
	       IF_start_instruction_BIT_21_3_THEN_IF_start_in_ETC___d99 :
	       _theResult_____2_fst__h2384 ;
  assign IF_start_instruction_BIT_21_3_THEN_IF_start_in_ETC___d99 =
	     _start_instruction[21] ?
	       (_start_instruction[20] ?
		  lv_integ_num___1__h2031 :
		  lv_integ_num___1__h2002) :
	       _start_inp_int ;
  assign _theResult_____2_fst__h2384 =
	     _start_inp_int[63] ?
	       lv_integ_num__h2387 :
	       IF_start_instruction_BIT_21_3_THEN_IF_start_in_ETC___d99 ;
  assign _theResult_____2_snd__h2385 =
	     _start_instruction[25] ? 11'd1086 : 11'd190 ;
  assign _theResult_____3__h1524 =
	     ff_input_stage_rv[83] ?
	       lv_rounded_mantissa__h1582 :
	       lv_rounded_mantissa__h1553 ;
  assign _theResult_____3_fst__h1525 =
	     _theResult_____3__h1524[52] ?
	       lv_exponent___1__h1586 :
	       lv_exponent__h682 ;
  assign ff_input_stage_rv_port0__read_BITS_74_TO_11_8__ETC___d20 =
	     ff_input_stage_rv[74:11] << ff_input_stage_rv[80:75] ;
  assign lv_exponent___1__h1586 = lv_exponent__h682 + 11'd1 ;
  assign lv_exponent__h682 =
	     ff_input_stage_rv[10:0] - { 5'b0, ff_input_stage_rv[80:75] } ;
  assign lv_exponent__h696 =
	     IF_ff_input_stage_rv_port0__read_BITS_95_TO_93_ETC___d61 ?
	       _theResult_____3_fst__h1525 :
	       lv_exponent__h682 ;
  assign lv_fsr__h700 =
	     { ff_input_stage_rv[119:97],
	       ff_input_stage_rv[81],
	       ff_input_stage_rv[95:89],
	       lv_inexact__h699 } ;
  assign lv_guard__h689 =
	     ff_input_stage_rv[83] ?
	       ff_input_stage_rv_port0__read_BITS_74_TO_11_8__ETC___d20[10] :
	       ff_input_stage_rv_port0__read_BITS_74_TO_11_8__ETC___d20[39] ;
  assign lv_inexact__h699 = x__h1013 | lv_sticky__h692 ;
  assign lv_integ_num___1__h2002 =
	     { {32{start_inp_int_BITS_31_TO_0__q2[31]}},
	       start_inp_int_BITS_31_TO_0__q2 } ;
  assign lv_integ_num___1__h2031 = { 32'd0, _start_inp_int[31:0] } ;
  assign lv_integ_num__h2387 =
	     ~IF_start_instruction_BIT_21_3_THEN_IF_start_in_ETC___d99 +
	     64'd1 ;
  assign lv_mantissa__h1027 =
	     { 29'b0,
	       ff_input_stage_rv_port0__read_BITS_74_TO_11_8__ETC___d20[62:40] } ;
  assign lv_mantissa__h687 =
	     ff_input_stage_rv[83] ?
	       ff_input_stage_rv_port0__read_BITS_74_TO_11_8__ETC___d20[62:11] :
	       lv_mantissa__h1027 ;
  assign lv_output_result__h1239 =
	     { 32'd0,
	       ff_input_stage_rv[82],
	       lv_exponent__h696[7:0],
	       IF_IF_ff_input_stage_rv_port0__read_BITS_95_TO_ETC___d79[51:29] } ;
  assign lv_output_result__h1649 =
	     { ff_input_stage_rv[82],
	       lv_exponent__h696,
	       IF_IF_ff_input_stage_rv_port0__read_BITS_95_TO_ETC___d79[51:0] } ;
  assign lv_round__h691 =
	     ff_input_stage_rv[83] ?
	       ff_input_stage_rv_port0__read_BITS_74_TO_11_8__ETC___d20[9] :
	       ff_input_stage_rv_port0__read_BITS_74_TO_11_8__ETC___d20[38] ;
  assign lv_rounded_mantissa__h1553 =
	     { { 1'b0, lv_mantissa__h687[22:0] } + 24'd1, 29'd0 } ;
  assign lv_rounded_mantissa__h1582 = { 1'b0, lv_mantissa__h687 } + 53'd1 ;
  assign lv_roundup___1__h1293 = lv_guard__h689 & y__h1305 ;
  assign lv_roundup___1__h1414 = lv_guard__h689 & y__h1426 ;
  assign lv_roundup___1__h1457 = lv_inexact__h699 & y__h1428 ;
  assign lv_sticky___1__h1030 =
	     lv_sticky__h685 |
	     ff_input_stage_rv_port0__read_BITS_74_TO_11_8__ETC___d20[37:9] !=
	     29'd0 ;
  assign lv_sticky__h685 =
	     ff_input_stage_rv_port0__read_BITS_74_TO_11_8__ETC___d20[8:0] !=
	     9'd0 ;
  assign lv_sticky__h692 =
	     ff_input_stage_rv[83] ? lv_sticky__h685 : lv_sticky___1__h1030 ;
  assign p0_l1__h2101 = { x__h2635 & y__h2636, x__h2638 | y__h2639 } ;
  assign p10_l1__h2121 = { x__h6621 & y__h6622, x__h6624 | y__h6625 } ;
  assign p11_l1__h2123 = { x__h6947 & y__h6948, x__h6950 | y__h6951 } ;
  assign p12_l1__h2125 = { x__h7453 & y__h7454, x__h7456 | y__h7457 } ;
  assign p13_l1__h2127 = { x__h7779 & y__h7780, x__h7782 | y__h7783 } ;
  assign p14_l1__h2129 = { x__h8198 & y__h8199, x__h8201 | y__h8202 } ;
  assign p15_l1__h2131 = { x__h8524 & y__h8525, x__h8527 | y__h8528 } ;
  assign p1_l1__h2103 = { x__h2961 & y__h2962, x__h2964 | y__h2965 } ;
  assign p2_l1__h2105 = { x__h3380 & y__h3381, x__h3383 | y__h3384 } ;
  assign p3_l1__h2107 = { x__h3706 & y__h3707, x__h3709 | y__h3710 } ;
  assign p4_l1__h2109 = { x__h4212 & y__h4213, x__h4215 | y__h4216 } ;
  assign p5_l1__h2111 = { x__h4538 & y__h4539, x__h4541 | y__h4542 } ;
  assign p6_l1__h2113 = { x__h4957 & y__h4958, x__h4960 | y__h4961 } ;
  assign p7_l1__h2115 = { x__h5283 & y__h5284, x__h5286 | y__h5287 } ;
  assign p8_l1__h2117 = { x__h5876 & y__h5877, x__h5879 | y__h5880 } ;
  assign p9_l1__h2119 = { x__h6202 & y__h6203, x__h6205 | y__h6206 } ;
  assign start_inp_int_BITS_31_TO_0__q2 = _start_inp_int[31:0] ;
  assign v_final_result__h882 =
	     ff_input_stage_rv[83] ?
	       lv_output_result__h1649 :
	       lv_output_result__h1239 ;
  assign x__h1013 = lv_guard__h689 | lv_round__h691 ;
  assign x__h1306 = lv_mantissa__h687[0] | lv_round__h691 ;
  assign x__h1427 = lv_round__h691 | lv_sticky__h692 ;
  assign x__h2331 =
	     x__h2332 |
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[61] ;
  assign x__h2332 =
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[63] |
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[62] ;
  assign x__h2635 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[63] ;
  assign x__h2638 =
	     x__h2635 &
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[62] ;
  assign x__h2690 =
	     x__h2691 |
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[57] ;
  assign x__h2691 =
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[59] |
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[58] ;
  assign x__h2961 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[59] ;
  assign x__h2964 =
	     x__h2961 &
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[58] ;
  assign x__h3106 =
	     x__h3107 |
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[53] ;
  assign x__h3107 =
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[55] |
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[54] ;
  assign x__h3380 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[55] ;
  assign x__h3383 =
	     x__h3380 &
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[54] ;
  assign x__h3435 =
	     x__h3436 |
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[49] ;
  assign x__h3436 =
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[51] |
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[50] ;
  assign x__h3706 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[51] ;
  assign x__h3709 =
	     x__h3706 &
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[50] ;
  assign x__h3938 =
	     x__h3939 |
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[45] ;
  assign x__h3939 =
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[47] |
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[46] ;
  assign x__h4212 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[47] ;
  assign x__h4215 =
	     x__h4212 &
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[46] ;
  assign x__h4267 =
	     x__h4268 |
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[41] ;
  assign x__h4268 =
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[43] |
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[42] ;
  assign x__h4538 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[43] ;
  assign x__h4541 =
	     x__h4538 &
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[42] ;
  assign x__h4683 =
	     x__h4684 |
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[37] ;
  assign x__h4684 =
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[39] |
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[38] ;
  assign x__h4957 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[39] ;
  assign x__h4960 =
	     x__h4957 &
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[38] ;
  assign x__h5012 =
	     x__h5013 |
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[33] ;
  assign x__h5013 =
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[35] |
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[34] ;
  assign x__h5283 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[35] ;
  assign x__h5286 =
	     x__h5283 &
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[34] ;
  assign x__h5602 =
	     x__h5603 |
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[29] ;
  assign x__h5603 =
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[31] |
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[30] ;
  assign x__h5876 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[31] ;
  assign x__h5879 =
	     x__h5876 &
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[30] ;
  assign x__h5931 =
	     x__h5932 |
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[25] ;
  assign x__h5932 =
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[27] |
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[26] ;
  assign x__h6202 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[27] ;
  assign x__h6205 =
	     x__h6202 &
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[26] ;
  assign x__h6347 =
	     x__h6348 |
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[21] ;
  assign x__h6348 =
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[23] |
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[22] ;
  assign x__h6621 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[23] ;
  assign x__h6624 =
	     x__h6621 &
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[22] ;
  assign x__h6676 =
	     x__h6677 |
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[17] ;
  assign x__h6677 =
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[19] |
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[18] ;
  assign x__h6947 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[19] ;
  assign x__h6950 =
	     x__h6947 &
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[18] ;
  assign x__h7179 =
	     x__h7180 |
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[13] ;
  assign x__h7180 =
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[15] |
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[14] ;
  assign x__h7453 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[15] ;
  assign x__h7456 =
	     x__h7453 &
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[14] ;
  assign x__h7508 =
	     x__h7509 |
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[9] ;
  assign x__h7509 =
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[11] |
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[10] ;
  assign x__h7779 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[11] ;
  assign x__h7782 =
	     x__h7779 &
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[10] ;
  assign x__h7924 =
	     x__h7925 |
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[5] ;
  assign x__h7925 =
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[7] |
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[6] ;
  assign x__h8198 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[7] ;
  assign x__h8201 =
	     x__h8198 &
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[6] ;
  assign x__h8253 =
	     x__h8254 |
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[1] ;
  assign x__h8254 =
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[3] |
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[2] ;
  assign x__h8524 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[3] ;
  assign x__h8527 =
	     x__h8524 &
	     IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[2] ;
  assign y__h1305 = x__h1306 | lv_sticky__h692 ;
  assign y__h1426 = x__h1427 | y__h1428 ;
  assign y__h1428 = ~ff_input_stage_rv[82] ;
  assign y__h2636 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[62] ;
  assign y__h2639 = x__h2635 & y__h2642 ;
  assign y__h2642 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[61] ;
  assign y__h2962 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[58] ;
  assign y__h2965 = x__h2961 & y__h2968 ;
  assign y__h2968 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[57] ;
  assign y__h3381 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[54] ;
  assign y__h3384 = x__h3380 & y__h3387 ;
  assign y__h3387 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[53] ;
  assign y__h3707 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[50] ;
  assign y__h3710 = x__h3706 & y__h3713 ;
  assign y__h3713 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[49] ;
  assign y__h4213 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[46] ;
  assign y__h4216 = x__h4212 & y__h4219 ;
  assign y__h4219 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[45] ;
  assign y__h4539 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[42] ;
  assign y__h4542 = x__h4538 & y__h4545 ;
  assign y__h4545 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[41] ;
  assign y__h4958 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[38] ;
  assign y__h4961 = x__h4957 & y__h4964 ;
  assign y__h4964 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[37] ;
  assign y__h5284 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[34] ;
  assign y__h5287 = x__h5283 & y__h5290 ;
  assign y__h5290 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[33] ;
  assign y__h5877 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[30] ;
  assign y__h5880 = x__h5876 & y__h5883 ;
  assign y__h5883 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[29] ;
  assign y__h6203 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[26] ;
  assign y__h6206 = x__h6202 & y__h6209 ;
  assign y__h6209 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[25] ;
  assign y__h6622 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[22] ;
  assign y__h6625 = x__h6621 & y__h6628 ;
  assign y__h6628 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[21] ;
  assign y__h6948 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[18] ;
  assign y__h6951 = x__h6947 & y__h6954 ;
  assign y__h6954 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[17] ;
  assign y__h7454 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[14] ;
  assign y__h7457 = x__h7453 & y__h7460 ;
  assign y__h7460 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[13] ;
  assign y__h7780 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[10] ;
  assign y__h7783 = x__h7779 & y__h7786 ;
  assign y__h7786 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[9] ;
  assign y__h8199 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[6] ;
  assign y__h8202 = x__h8198 & y__h8205 ;
  assign y__h8205 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[5] ;
  assign y__h8525 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[2] ;
  assign y__h8528 = x__h8524 & y__h8531 ;
  assign y__h8531 =
	     ~IF_IF_start_instruction_BIT_21_3_THEN_IF_start_ETC___d104[1] ;
  always@(ff_final_out_rv)
  begin
    case (ff_final_out_rv[3:1])
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4:
	  CASE_ff_final_out_rv_BITS_3_TO_1_0_ff_final_ou_ETC__q1 =
	      ff_final_out_rv[3:1];
      default: CASE_ff_final_out_rv_BITS_3_TO_1_0_ff_final_ou_ETC__q1 = 3'd5;
    endcase
  end
  always@(ff_input_stage_rv or
	  lv_inexact__h699 or
	  lv_roundup___1__h1293 or
	  lv_roundup___1__h1457 or lv_roundup___1__h1414)
  begin
    case (ff_input_stage_rv[95:93])
      3'b0:
	  IF_ff_input_stage_rv_port0__read_BITS_95_TO_93_ETC___d61 =
	      lv_roundup___1__h1293;
      3'b011:
	  IF_ff_input_stage_rv_port0__read_BITS_95_TO_93_ETC___d61 =
	      lv_roundup___1__h1457;
      3'b100:
	  IF_ff_input_stage_rv_port0__read_BITS_95_TO_93_ETC___d61 =
	      lv_roundup___1__h1414;
      default: IF_ff_input_stage_rv_port0__read_BITS_95_TO_93_ETC___d61 =
		   ff_input_stage_rv[95:93] == 3'b010 &&
		   lv_inexact__h699 & ff_input_stage_rv[82];
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        ff_final_out_rv <= `BSV_ASSIGNMENT_DELAY
	    106'h0AAAAAAAAAAAAAAAAAAAAAAAAAA;
	ff_input_stage_rv <= `BSV_ASSIGNMENT_DELAY
	    158'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
      end
    else
      begin
        if (ff_final_out_rv$EN)
	  ff_final_out_rv <= `BSV_ASSIGNMENT_DELAY ff_final_out_rv$D_IN;
	if (ff_input_stage_rv$EN)
	  ff_input_stage_rv <= `BSV_ASSIGNMENT_DELAY ff_input_stage_rv$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    ff_final_out_rv = 106'h2AAAAAAAAAAAAAAAAAAAAAAAAAA;
    ff_input_stage_rv = 158'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start) $display("start %h", _start_inp_int);
  end
  // synopsys translate_on
endmodule  // mkfpu_int_to_fp

