//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// On Mon Sep 14 23:06:34 IST 2015
//
//
// Ports:
// Name                         I/O  size props
// fn_sra_srl                     O    64
// fn_sra_srl__in1                I    64
// fn_sra_srl__in2                I    64
// fn_sra_srl__word_flag          I     1
// fn_sra_srl_rl_ra_flag          I     1
//
// Combinational paths from inputs to outputs:
//   (fn_sra_srl__in1,
//    fn_sra_srl__in2,
//    fn_sra_srl__word_flag,
//    fn_sra_srl_rl_ra_flag) -> fn_sra_srl
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module module_fn_sra_srl(fn_sra_srl__in1,
			 fn_sra_srl__in2,
			 fn_sra_srl__word_flag,
			 fn_sra_srl_rl_ra_flag,
			 fn_sra_srl);
  // value method fn_sra_srl
  input  [63 : 0] fn_sra_srl__in1;
  input  [63 : 0] fn_sra_srl__in2;
  input  fn_sra_srl__word_flag;
  input  fn_sra_srl_rl_ra_flag;
  output [63 : 0] fn_sra_srl;

  // signals for module outputs
  wire [63 : 0] fn_sra_srl;

  // remaining internal signals
  wire [127 : 0] fn_shiftright___d13,
		 fn_shiftright___d22,
		 fn_shiftright___d25,
		 fn_shiftright___d9;
  wire [63 : 0] IF_NOT_fn_sra_srl__in1_BIT_31_OR_NOT_fn_sra_sr_ETC___d16,
		IF_NOT_fn_sra_srl__in1_BIT_63_7_8_OR_NOT_fn_sr_ETC___d27;
  wire [31 : 0] fn_shiftright_3_BITS_31_TO_0__q2,
		fn_shiftright_BITS_31_TO_0__q1;
  wire [5 : 0] shift_amt__h242;
  wire [4 : 0] shift_amt_word__h42;

  // value method fn_sra_srl
  assign fn_sra_srl =
	     fn_sra_srl__word_flag ?
	       IF_NOT_fn_sra_srl__in1_BIT_31_OR_NOT_fn_sra_sr_ETC___d16 :
	       IF_NOT_fn_sra_srl__in1_BIT_63_7_8_OR_NOT_fn_sr_ETC___d27 ;

  // remaining internal signals
  module_fn_shiftright instance_fn_shiftright_0(.fn_shiftright__input({ 96'hFFFFFFFFFFFFFFFFFFFFFFFF,
									fn_sra_srl__in1[31:0] }),
						.fn_shiftright__shiftamt({ 1'd0,
									   shift_amt_word__h42 }),
						.fn_shiftright(fn_shiftright___d13));
  module_fn_shiftright instance_fn_shiftright_1(.fn_shiftright__input({ 96'b0,
									fn_sra_srl__in1[31:0] }),
						.fn_shiftright__shiftamt({ 1'd0,
									   shift_amt_word__h42 }),
						.fn_shiftright(fn_shiftright___d9));
  module_fn_shiftright instance_fn_shiftright_3(.fn_shiftright__input({ 64'hFFFFFFFFFFFFFFFF,
									fn_sra_srl__in1 }),
						.fn_shiftright__shiftamt(shift_amt__h242),
						.fn_shiftright(fn_shiftright___d25));
  module_fn_shiftright instance_fn_shiftright_2(.fn_shiftright__input({ 64'b0,
									fn_sra_srl__in1 }),
						.fn_shiftright__shiftamt(shift_amt__h242),
						.fn_shiftright(fn_shiftright___d22));
  assign IF_NOT_fn_sra_srl__in1_BIT_31_OR_NOT_fn_sra_sr_ETC___d16 =
	     (!fn_sra_srl__in1[31] || !fn_sra_srl_rl_ra_flag) ?
	       { {32{fn_shiftright_BITS_31_TO_0__q1[31]}},
		 fn_shiftright_BITS_31_TO_0__q1 } :
	       { {32{fn_shiftright_3_BITS_31_TO_0__q2[31]}},
		 fn_shiftright_3_BITS_31_TO_0__q2 } ;
  assign IF_NOT_fn_sra_srl__in1_BIT_63_7_8_OR_NOT_fn_sr_ETC___d27 =
	     (!fn_sra_srl__in1[63] || !fn_sra_srl_rl_ra_flag) ?
	       fn_shiftright___d22[63:0] :
	       fn_shiftright___d25[63:0] ;
  assign fn_shiftright_3_BITS_31_TO_0__q2 = fn_shiftright___d13[31:0] ;
  assign fn_shiftright_BITS_31_TO_0__q1 = fn_shiftright___d9[31:0] ;
  assign shift_amt__h242 = fn_sra_srl__in2[5:0] ;
  assign shift_amt_word__h42 = fn_sra_srl__in2[4:0] ;
endmodule  // module_fn_sra_srl

