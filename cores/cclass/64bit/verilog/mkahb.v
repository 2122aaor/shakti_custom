//
// Generated by Bluespec Compiler, version 2015.09.beta2 (build 34689, 2015-09-07)
//
// On Mon Dec 19 16:37:16 IST 2016
//
//
// Ports:
// Name                         I/O  size props
// RDY_sin                        O     1 const
// sout                           O     1 reg
// RDY_sout                       O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// sin_in                         I     1 reg
// EN_sin                         I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkahb(CLK,
	     RST_N,

	     sin_in,
	     EN_sin,
	     RDY_sin,

	     sout,
	     RDY_sout);
  input  CLK;
  input  RST_N;

  // action method sin
  input  sin_in;
  input  EN_sin;
  output RDY_sin;

  // value method sout
  output sout;
  output RDY_sout;

  // signals for module outputs
  wire RDY_sin, RDY_sout, sout;

  // inlined wires
  reg [2 : 0] slave_mem_ifc_size_wire$wget;
  reg slave_mem_ifc_write_wire$wget;
  wire [173 : 0] masterX_0_fifo_rx_rv$port0__write_1,
		 masterX_0_fifo_rx_rv$port1__read,
		 masterX_0_fifo_rx_rv$port1__write_1,
		 masterX_0_fifo_rx_rv$port2__read,
		 masterX_1_fifo_rx_rv$port2__read,
		 slave_mem_fifo_tx_rv$port0__write_1,
		 slave_mem_fifo_tx_rv$port1__read,
		 slave_mem_fifo_tx_rv$port2__read,
		 slave_other_fifo_tx_rv$port0__write_1,
		 slave_other_fifo_tx_rv$port1__read;
  wire [89 : 0] slave_mem_fifo_rx_rv$port0__write_1,
		slave_mem_fifo_rx_rv$port1__read,
		slave_mem_fifo_rx_rv$port1__write_1,
		slave_mem_fifo_rx_rv$port2__read,
		slave_other_fifo_rx_rv$port2__read;
  wire [88 : 0] masterX_0_fifo_tx_fifof_enqw$wget,
		masterX_1_fifo_tx_fifof_enqw$wget;
  wire [67 : 0] masterX_0_ifc_response$wget,
		masterX_1_ifc_response$wget,
		slave_mem_ifc_response_wire$wget,
		slave_other_ifc_response_wire$wget;
  wire [2 : 0] ahb_bus_s_map_addr_0$wget, ahb_bus_s_map_addr_1$wget;
  wire [1 : 0] ahb_bus_arbiter_dgrant_vector_wire$wget,
	       ahb_bus_arbiter_grant_vector_wire$wget,
	       ahb_bus_arbiter_hmaster_wire$wget,
	       ahb_bus_dummys_1_transfer_wire$wget,
	       masterX_0_ifc_fifo_op_x_wire$wget,
	       masterX_0_ifc_response_wire$wget,
	       masterX_1_ifc_fifo_op_x_wire$wget;
  wire ahb_bus_dummys_0_select_wire$wget,
       ahb_bus_dummys_1_select_wire$wget,
       ahb_bus_monitor_hready$wget,
       masterX_0_fifo_rx_rv$EN_port1__write,
       masterX_0_ifc_fifo_op_dequeueing$whas,
       masterX_0_lock_wire$whas,
       masterX_0_response_wire$whas,
       masterX_1_fifo_rx_rv$EN_port1__write,
       masterX_1_ifc_fifo_op_dequeueing$whas,
       masterX_1_lock_wire$whas,
       masterX_1_response_wire$whas,
       slave_mem_fifo_op_rv$port1__read,
       slave_mem_fifo_op_rv$port2__read,
       slave_other_fifo_op_rv$port1__read,
       slave_other_fifo_op_rv$port2__read;

  // register ahb_bus_arbiter_dgrant_vector_reg
  reg [1 : 0] ahb_bus_arbiter_dgrant_vector_reg;
  wire [1 : 0] ahb_bus_arbiter_dgrant_vector_reg$D_IN;
  wire ahb_bus_arbiter_dgrant_vector_reg$EN;

  // register ahb_bus_arbiter_grant_vector_reg
  reg [1 : 0] ahb_bus_arbiter_grant_vector_reg;
  wire [1 : 0] ahb_bus_arbiter_grant_vector_reg$D_IN;
  wire ahb_bus_arbiter_grant_vector_reg$EN;

  // register ahb_bus_arbiter_hmaster_reg
  reg [1 : 0] ahb_bus_arbiter_hmaster_reg;
  wire [1 : 0] ahb_bus_arbiter_hmaster_reg$D_IN;
  wire ahb_bus_arbiter_hmaster_reg$EN;

  // register ahb_bus_arbiter_priority_vector
  reg [1 : 0] ahb_bus_arbiter_priority_vector;
  wire [1 : 0] ahb_bus_arbiter_priority_vector$D_IN;
  wire ahb_bus_arbiter_priority_vector$EN;

  // register ahb_bus_dummy_select_reg
  reg ahb_bus_dummy_select_reg;
  wire ahb_bus_dummy_select_reg$D_IN, ahb_bus_dummy_select_reg$EN;

  // register ahb_bus_dummy_transfer_reg
  reg [1 : 0] ahb_bus_dummy_transfer_reg;
  wire [1 : 0] ahb_bus_dummy_transfer_reg$D_IN;
  wire ahb_bus_dummy_transfer_reg$EN;

  // register ahb_bus_dummys_0_select_reg
  reg ahb_bus_dummys_0_select_reg;
  wire ahb_bus_dummys_0_select_reg$D_IN, ahb_bus_dummys_0_select_reg$EN;

  // register ahb_bus_dummys_0_transfer_reg
  reg [1 : 0] ahb_bus_dummys_0_transfer_reg;
  wire [1 : 0] ahb_bus_dummys_0_transfer_reg$D_IN;
  wire ahb_bus_dummys_0_transfer_reg$EN;

  // register ahb_bus_dummys_1_select_reg
  reg ahb_bus_dummys_1_select_reg;
  wire ahb_bus_dummys_1_select_reg$D_IN, ahb_bus_dummys_1_select_reg$EN;

  // register ahb_bus_dummys_1_transfer_reg
  reg [1 : 0] ahb_bus_dummys_1_transfer_reg;
  wire [1 : 0] ahb_bus_dummys_1_transfer_reg$D_IN;
  wire ahb_bus_dummys_1_transfer_reg$EN;

  // register ahb_bus_hmaster_addr
  reg [1 : 0] ahb_bus_hmaster_addr;
  wire [1 : 0] ahb_bus_hmaster_addr$D_IN;
  wire ahb_bus_hmaster_addr$EN;

  // register ahb_bus_hmaster_data
  reg [1 : 0] ahb_bus_hmaster_data;
  wire [1 : 0] ahb_bus_hmaster_data$D_IN;
  wire ahb_bus_hmaster_data$EN;

  // register ahb_bus_monitor_hready_prev
  reg ahb_bus_monitor_hready_prev;
  wire ahb_bus_monitor_hready_prev$D_IN, ahb_bus_monitor_hready_prev$EN;

  // register ahb_bus_monitor_remaining_reg
  reg [4 : 0] ahb_bus_monitor_remaining_reg;
  wire [4 : 0] ahb_bus_monitor_remaining_reg$D_IN;
  wire ahb_bus_monitor_remaining_reg$EN;

  // register ahb_bus_monitor_request_prev
  reg ahb_bus_monitor_request_prev;
  wire ahb_bus_monitor_request_prev$D_IN, ahb_bus_monitor_request_prev$EN;

  // register ahb_bus_monitor_started
  reg ahb_bus_monitor_started;
  wire ahb_bus_monitor_started$D_IN, ahb_bus_monitor_started$EN;

  // register ahb_bus_monitor_transfer_prev
  reg [1 : 0] ahb_bus_monitor_transfer_prev;
  wire [1 : 0] ahb_bus_monitor_transfer_prev$D_IN;
  wire ahb_bus_monitor_transfer_prev$EN;

  // register ahb_bus_s_map_data_0
  reg [2 : 0] ahb_bus_s_map_data_0;
  wire [2 : 0] ahb_bus_s_map_data_0$D_IN;
  wire ahb_bus_s_map_data_0$EN;

  // register ahb_bus_s_map_data_1
  reg [2 : 0] ahb_bus_s_map_data_1;
  wire [2 : 0] ahb_bus_s_map_data_1$D_IN;
  wire ahb_bus_s_map_data_1$EN;

  // register ahb_bus_s_num_addr_current
  reg [1 : 0] ahb_bus_s_num_addr_current;
  wire [1 : 0] ahb_bus_s_num_addr_current$D_IN;
  wire ahb_bus_s_num_addr_current$EN;

  // register ahb_bus_s_num_data
  reg [1 : 0] ahb_bus_s_num_data;
  wire [1 : 0] ahb_bus_s_num_data$D_IN;
  wire ahb_bus_s_num_data$EN;

  // register masterX_0_count
  reg [4 : 0] masterX_0_count;
  wire [4 : 0] masterX_0_count$D_IN;
  wire masterX_0_count$EN;

  // register masterX_0_data_reg
  reg [64 : 0] masterX_0_data_reg;
  reg [64 : 0] masterX_0_data_reg$D_IN;
  wire masterX_0_data_reg$EN;

  // register masterX_0_descriptor
  reg [172 : 0] masterX_0_descriptor;
  wire [172 : 0] masterX_0_descriptor$D_IN;
  wire masterX_0_descriptor$EN;

  // register masterX_0_fifo_rx_rv
  reg [173 : 0] masterX_0_fifo_rx_rv;
  wire [173 : 0] masterX_0_fifo_rx_rv$D_IN;
  wire masterX_0_fifo_rx_rv$EN;

  // register masterX_0_fifo_tx_count
  reg [2 : 0] masterX_0_fifo_tx_count;
  wire [2 : 0] masterX_0_fifo_tx_count$D_IN;
  wire masterX_0_fifo_tx_count$EN;

  // register masterX_0_grant_reg
  reg masterX_0_grant_reg;
  wire masterX_0_grant_reg$D_IN, masterX_0_grant_reg$EN;

  // register masterX_0_ifc_fifo_op_cntr_r
  reg [1 : 0] masterX_0_ifc_fifo_op_cntr_r;
  wire [1 : 0] masterX_0_ifc_fifo_op_cntr_r$D_IN;
  wire masterX_0_ifc_fifo_op_cntr_r$EN;

  // register masterX_0_ifc_fifo_op_q_0
  reg [1 : 0] masterX_0_ifc_fifo_op_q_0;
  reg [1 : 0] masterX_0_ifc_fifo_op_q_0$D_IN;
  wire masterX_0_ifc_fifo_op_q_0$EN;

  // register masterX_0_ifc_fifo_op_q_1
  reg [1 : 0] masterX_0_ifc_fifo_op_q_1;
  reg [1 : 0] masterX_0_ifc_fifo_op_q_1$D_IN;
  wire masterX_0_ifc_fifo_op_q_1$EN;

  // register masterX_0_ifc_request_reg
  reg [140 : 0] masterX_0_ifc_request_reg;
  reg [140 : 0] masterX_0_ifc_request_reg$D_IN;
  wire masterX_0_ifc_request_reg$EN;

  // register masterX_0_req_reg
  reg masterX_0_req_reg;
  reg masterX_0_req_reg$D_IN;
  wire masterX_0_req_reg$EN;

  // register masterX_1_count
  reg [4 : 0] masterX_1_count;
  wire [4 : 0] masterX_1_count$D_IN;
  wire masterX_1_count$EN;

  // register masterX_1_data_reg
  reg [64 : 0] masterX_1_data_reg;
  reg [64 : 0] masterX_1_data_reg$D_IN;
  wire masterX_1_data_reg$EN;

  // register masterX_1_descriptor
  reg [172 : 0] masterX_1_descriptor;
  wire [172 : 0] masterX_1_descriptor$D_IN;
  wire masterX_1_descriptor$EN;

  // register masterX_1_fifo_rx_rv
  reg [173 : 0] masterX_1_fifo_rx_rv;
  wire [173 : 0] masterX_1_fifo_rx_rv$D_IN;
  wire masterX_1_fifo_rx_rv$EN;

  // register masterX_1_fifo_tx_count
  reg [2 : 0] masterX_1_fifo_tx_count;
  wire [2 : 0] masterX_1_fifo_tx_count$D_IN;
  wire masterX_1_fifo_tx_count$EN;

  // register masterX_1_grant_reg
  reg masterX_1_grant_reg;
  wire masterX_1_grant_reg$D_IN, masterX_1_grant_reg$EN;

  // register masterX_1_ifc_fifo_op_cntr_r
  reg [1 : 0] masterX_1_ifc_fifo_op_cntr_r;
  wire [1 : 0] masterX_1_ifc_fifo_op_cntr_r$D_IN;
  wire masterX_1_ifc_fifo_op_cntr_r$EN;

  // register masterX_1_ifc_fifo_op_q_0
  reg [1 : 0] masterX_1_ifc_fifo_op_q_0;
  reg [1 : 0] masterX_1_ifc_fifo_op_q_0$D_IN;
  wire masterX_1_ifc_fifo_op_q_0$EN;

  // register masterX_1_ifc_fifo_op_q_1
  reg [1 : 0] masterX_1_ifc_fifo_op_q_1;
  reg [1 : 0] masterX_1_ifc_fifo_op_q_1$D_IN;
  wire masterX_1_ifc_fifo_op_q_1$EN;

  // register masterX_1_ifc_request_reg
  reg [140 : 0] masterX_1_ifc_request_reg;
  reg [140 : 0] masterX_1_ifc_request_reg$D_IN;
  wire masterX_1_ifc_request_reg$EN;

  // register masterX_1_req_reg
  reg masterX_1_req_reg;
  reg masterX_1_req_reg$D_IN;
  wire masterX_1_req_reg$EN;

  // register slave_mem_ctrl_reg
  reg [77 : 0] slave_mem_ctrl_reg;
  wire [77 : 0] slave_mem_ctrl_reg$D_IN;
  wire slave_mem_ctrl_reg$EN;

  // register slave_mem_fifo_op_rv
  reg slave_mem_fifo_op_rv;
  wire slave_mem_fifo_op_rv$D_IN, slave_mem_fifo_op_rv$EN;

  // register slave_mem_fifo_rx_rv
  reg [89 : 0] slave_mem_fifo_rx_rv;
  wire [89 : 0] slave_mem_fifo_rx_rv$D_IN;
  wire slave_mem_fifo_rx_rv$EN;

  // register slave_mem_fifo_tx_rv
  reg [173 : 0] slave_mem_fifo_tx_rv;
  wire [173 : 0] slave_mem_fifo_tx_rv$D_IN;
  wire slave_mem_fifo_tx_rv$EN;

  // register slave_mem_first
  reg slave_mem_first;
  wire slave_mem_first$D_IN, slave_mem_first$EN;

  // register slave_mem_start
  reg slave_mem_start;
  wire slave_mem_start$D_IN, slave_mem_start$EN;

  // register slave_other_ctrl_reg
  reg [77 : 0] slave_other_ctrl_reg;
  wire [77 : 0] slave_other_ctrl_reg$D_IN;
  wire slave_other_ctrl_reg$EN;

  // register slave_other_fifo_op_rv
  reg slave_other_fifo_op_rv;
  wire slave_other_fifo_op_rv$D_IN, slave_other_fifo_op_rv$EN;

  // register slave_other_fifo_rx_rv
  reg [89 : 0] slave_other_fifo_rx_rv;
  wire [89 : 0] slave_other_fifo_rx_rv$D_IN;
  wire slave_other_fifo_rx_rv$EN;

  // register slave_other_fifo_tx_rv
  reg [173 : 0] slave_other_fifo_tx_rv;
  wire [173 : 0] slave_other_fifo_tx_rv$D_IN;
  wire slave_other_fifo_tx_rv$EN;

  // register slave_other_first
  reg slave_other_first;
  wire slave_other_first$D_IN, slave_other_first$EN;

  // register slave_other_start
  reg slave_other_start;
  wire slave_other_start$D_IN, slave_other_start$EN;

  // ports of submodule bram_mod
  wire [172 : 0] bram_mod$intfc_rcv_rx_put;
  wire [88 : 0] bram_mod$intfc_rcv_tx_get;
  wire bram_mod$EN_flush_from_proc,
       bram_mod$EN_intfc_rcv_rx_put,
       bram_mod$EN_intfc_rcv_tx_get,
       bram_mod$RDY_intfc_rcv_rx_put,
       bram_mod$RDY_intfc_rcv_tx_get,
       bram_mod$flush_from_proc_flush;

  // ports of submodule masterX_0_fifo_tx_fifof_ff
  wire [88 : 0] masterX_0_fifo_tx_fifof_ff$D_IN,
		masterX_0_fifo_tx_fifof_ff$D_OUT;
  wire masterX_0_fifo_tx_fifof_ff$CLR,
       masterX_0_fifo_tx_fifof_ff$DEQ,
       masterX_0_fifo_tx_fifof_ff$EMPTY_N,
       masterX_0_fifo_tx_fifof_ff$ENQ,
       masterX_0_fifo_tx_fifof_ff$FULL_N;

  // ports of submodule masterX_0_fifo_tx_fifof_firstValid
  wire masterX_0_fifo_tx_fifof_firstValid$D_IN,
       masterX_0_fifo_tx_fifof_firstValid$EN,
       masterX_0_fifo_tx_fifof_firstValid$Q_OUT;

  // ports of submodule masterX_0_fifo_tx_levelsValidClr
  wire masterX_0_fifo_tx_levelsValidClr$D_IN,
       masterX_0_fifo_tx_levelsValidClr$EN,
       masterX_0_fifo_tx_levelsValidClr$Q_OUT;

  // ports of submodule masterX_0_fifo_tx_levelsValidDeq
  wire masterX_0_fifo_tx_levelsValidDeq$D_IN,
       masterX_0_fifo_tx_levelsValidDeq$EN,
       masterX_0_fifo_tx_levelsValidDeq$Q_OUT;

  // ports of submodule masterX_0_fifo_tx_levelsValidEnq
  wire masterX_0_fifo_tx_levelsValidEnq$D_IN,
       masterX_0_fifo_tx_levelsValidEnq$EN,
       masterX_0_fifo_tx_levelsValidEnq$Q_OUT;

  // ports of submodule masterX_1_fifo_tx_fifof_ff
  wire [88 : 0] masterX_1_fifo_tx_fifof_ff$D_IN;
  wire masterX_1_fifo_tx_fifof_ff$CLR,
       masterX_1_fifo_tx_fifof_ff$DEQ,
       masterX_1_fifo_tx_fifof_ff$ENQ,
       masterX_1_fifo_tx_fifof_ff$FULL_N;

  // ports of submodule masterX_1_fifo_tx_fifof_firstValid
  wire masterX_1_fifo_tx_fifof_firstValid$D_IN,
       masterX_1_fifo_tx_fifof_firstValid$EN;

  // ports of submodule masterX_1_fifo_tx_levelsValidClr
  wire masterX_1_fifo_tx_levelsValidClr$D_IN,
       masterX_1_fifo_tx_levelsValidClr$EN,
       masterX_1_fifo_tx_levelsValidClr$Q_OUT;

  // ports of submodule masterX_1_fifo_tx_levelsValidDeq
  wire masterX_1_fifo_tx_levelsValidDeq$D_IN,
       masterX_1_fifo_tx_levelsValidDeq$EN,
       masterX_1_fifo_tx_levelsValidDeq$Q_OUT;

  // ports of submodule masterX_1_fifo_tx_levelsValidEnq
  wire masterX_1_fifo_tx_levelsValidEnq$D_IN,
       masterX_1_fifo_tx_levelsValidEnq$EN,
       masterX_1_fifo_tx_levelsValidEnq$Q_OUT;

  // ports of submodule proc
  wire [172 : 0] proc$intfc_tx_get;
  wire [88 : 0] proc$intfc_rx_put;
  wire proc$EN_intfc_rx_put,
       proc$EN_intfc_tx_get,
       proc$EN_sin,
       proc$RDY_intfc_rx_put,
       proc$RDY_intfc_tx_get,
       proc$flush,
       proc$sin_in,
       proc$sout;

  // rule scheduling signals
  wire CAN_FIRE_RL_ahb_bus_0_send_grant,
       CAN_FIRE_RL_ahb_bus_0_send_lock,
       CAN_FIRE_RL_ahb_bus_0_send_request,
       CAN_FIRE_RL_ahb_bus_1_send_grant,
       CAN_FIRE_RL_ahb_bus_1_send_lock,
       CAN_FIRE_RL_ahb_bus_1_send_request,
       CAN_FIRE_RL_ahb_bus_arbiter_delay_grant,
       CAN_FIRE_RL_ahb_bus_arbiter_every,
       CAN_FIRE_RL_ahb_bus_broadcast_to_dummys,
       CAN_FIRE_RL_ahb_bus_broadcast_to_masters,
       CAN_FIRE_RL_ahb_bus_broadcast_to_slaves,
       CAN_FIRE_RL_ahb_bus_dummy_every,
       CAN_FIRE_RL_ahb_bus_dummy_update,
       CAN_FIRE_RL_ahb_bus_dummy_updatex,
       CAN_FIRE_RL_ahb_bus_dummys_0_every,
       CAN_FIRE_RL_ahb_bus_dummys_0_update,
       CAN_FIRE_RL_ahb_bus_dummys_0_updatex,
       CAN_FIRE_RL_ahb_bus_dummys_1_every,
       CAN_FIRE_RL_ahb_bus_dummys_1_update,
       CAN_FIRE_RL_ahb_bus_dummys_1_updatex,
       CAN_FIRE_RL_ahb_bus_hready_update,
       CAN_FIRE_RL_ahb_bus_monitor_every,
       CAN_FIRE_RL_ahb_bus_monitor_sample,
       CAN_FIRE_RL_ahb_bus_monitor_send_update,
       CAN_FIRE_RL_ahb_bus_monitor_update_started,
       CAN_FIRE_RL_ahb_bus_requests_0_every,
       CAN_FIRE_RL_ahb_bus_requests_1_every,
       CAN_FIRE_RL_ahb_bus_s_map_addr_update,
       CAN_FIRE_RL_ahb_bus_s_map_addr_update_1,
       CAN_FIRE_RL_ahb_bus_update_grant,
       CAN_FIRE_RL_masterX_0_fifo_tx_do_clear,
       CAN_FIRE_RL_masterX_0_fifo_tx_do_decr,
       CAN_FIRE_RL_masterX_0_fifo_tx_do_incr,
       CAN_FIRE_RL_masterX_0_fifo_tx_fifof_dequeue,
       CAN_FIRE_RL_masterX_0_fifo_tx_fifof_enqueue,
       CAN_FIRE_RL_masterX_0_grab_invalid_response,
       CAN_FIRE_RL_masterX_0_grab_valid_response,
       CAN_FIRE_RL_masterX_0_idle_op,
       CAN_FIRE_RL_masterX_0_ifc_do_enq,
       CAN_FIRE_RL_masterX_0_ifc_every,
       CAN_FIRE_RL_masterX_0_ifc_fifo_op_both,
       CAN_FIRE_RL_masterX_0_ifc_fifo_op_decCtr,
       CAN_FIRE_RL_masterX_0_ifc_fifo_op_incCtr,
       CAN_FIRE_RL_masterX_0_ifc_pre_enq,
       CAN_FIRE_RL_masterX_0_read_op,
       CAN_FIRE_RL_masterX_0_send_request,
       CAN_FIRE_RL_masterX_0_stall,
       CAN_FIRE_RL_masterX_0_stall_op,
       CAN_FIRE_RL_masterX_0_start_op,
       CAN_FIRE_RL_masterX_0_update_grant,
       CAN_FIRE_RL_masterX_0_write_op,
       CAN_FIRE_RL_masterX_1_fifo_tx_do_clear,
       CAN_FIRE_RL_masterX_1_fifo_tx_do_decr,
       CAN_FIRE_RL_masterX_1_fifo_tx_do_incr,
       CAN_FIRE_RL_masterX_1_fifo_tx_fifof_dequeue,
       CAN_FIRE_RL_masterX_1_fifo_tx_fifof_enqueue,
       CAN_FIRE_RL_masterX_1_grab_invalid_response,
       CAN_FIRE_RL_masterX_1_grab_valid_response,
       CAN_FIRE_RL_masterX_1_idle_op,
       CAN_FIRE_RL_masterX_1_ifc_do_enq,
       CAN_FIRE_RL_masterX_1_ifc_every,
       CAN_FIRE_RL_masterX_1_ifc_fifo_op_both,
       CAN_FIRE_RL_masterX_1_ifc_fifo_op_decCtr,
       CAN_FIRE_RL_masterX_1_ifc_fifo_op_incCtr,
       CAN_FIRE_RL_masterX_1_ifc_pre_enq,
       CAN_FIRE_RL_masterX_1_read_op,
       CAN_FIRE_RL_masterX_1_send_request,
       CAN_FIRE_RL_masterX_1_stall,
       CAN_FIRE_RL_masterX_1_stall_op,
       CAN_FIRE_RL_masterX_1_start_op,
       CAN_FIRE_RL_masterX_1_update_grant,
       CAN_FIRE_RL_masterX_1_write_op,
       CAN_FIRE_RL_mkConnectionGetPut,
       CAN_FIRE_RL_mkConnectionGetPut_1,
       CAN_FIRE_RL_mkConnectionGetPut_2,
       CAN_FIRE_RL_mkConnectionGetPut_3,
       CAN_FIRE_RL_read_flush_signal_from_cpu,
       CAN_FIRE_RL_slave_mem_default_response,
       CAN_FIRE_RL_slave_mem_first__dreg_update,
       CAN_FIRE_RL_slave_mem_grab_ctrl,
       CAN_FIRE_RL_slave_mem_grab_response,
       CAN_FIRE_RL_slave_mem_not_selected,
       CAN_FIRE_RL_slave_mem_send_request,
       CAN_FIRE_RL_slave_other_default_response,
       CAN_FIRE_RL_slave_other_first__dreg_update,
       CAN_FIRE_RL_slave_other_grab_ctrl,
       CAN_FIRE_RL_slave_other_grab_response,
       CAN_FIRE_RL_slave_other_not_selected,
       CAN_FIRE_RL_slave_other_send_request,
       CAN_FIRE_sin,
       WILL_FIRE_RL_ahb_bus_0_send_grant,
       WILL_FIRE_RL_ahb_bus_0_send_lock,
       WILL_FIRE_RL_ahb_bus_0_send_request,
       WILL_FIRE_RL_ahb_bus_1_send_grant,
       WILL_FIRE_RL_ahb_bus_1_send_lock,
       WILL_FIRE_RL_ahb_bus_1_send_request,
       WILL_FIRE_RL_ahb_bus_arbiter_delay_grant,
       WILL_FIRE_RL_ahb_bus_arbiter_every,
       WILL_FIRE_RL_ahb_bus_broadcast_to_dummys,
       WILL_FIRE_RL_ahb_bus_broadcast_to_masters,
       WILL_FIRE_RL_ahb_bus_broadcast_to_slaves,
       WILL_FIRE_RL_ahb_bus_dummy_every,
       WILL_FIRE_RL_ahb_bus_dummy_update,
       WILL_FIRE_RL_ahb_bus_dummy_updatex,
       WILL_FIRE_RL_ahb_bus_dummys_0_every,
       WILL_FIRE_RL_ahb_bus_dummys_0_update,
       WILL_FIRE_RL_ahb_bus_dummys_0_updatex,
       WILL_FIRE_RL_ahb_bus_dummys_1_every,
       WILL_FIRE_RL_ahb_bus_dummys_1_update,
       WILL_FIRE_RL_ahb_bus_dummys_1_updatex,
       WILL_FIRE_RL_ahb_bus_hready_update,
       WILL_FIRE_RL_ahb_bus_monitor_every,
       WILL_FIRE_RL_ahb_bus_monitor_sample,
       WILL_FIRE_RL_ahb_bus_monitor_send_update,
       WILL_FIRE_RL_ahb_bus_monitor_update_started,
       WILL_FIRE_RL_ahb_bus_requests_0_every,
       WILL_FIRE_RL_ahb_bus_requests_1_every,
       WILL_FIRE_RL_ahb_bus_s_map_addr_update,
       WILL_FIRE_RL_ahb_bus_s_map_addr_update_1,
       WILL_FIRE_RL_ahb_bus_update_grant,
       WILL_FIRE_RL_masterX_0_fifo_tx_do_clear,
       WILL_FIRE_RL_masterX_0_fifo_tx_do_decr,
       WILL_FIRE_RL_masterX_0_fifo_tx_do_incr,
       WILL_FIRE_RL_masterX_0_fifo_tx_fifof_dequeue,
       WILL_FIRE_RL_masterX_0_fifo_tx_fifof_enqueue,
       WILL_FIRE_RL_masterX_0_grab_invalid_response,
       WILL_FIRE_RL_masterX_0_grab_valid_response,
       WILL_FIRE_RL_masterX_0_idle_op,
       WILL_FIRE_RL_masterX_0_ifc_do_enq,
       WILL_FIRE_RL_masterX_0_ifc_every,
       WILL_FIRE_RL_masterX_0_ifc_fifo_op_both,
       WILL_FIRE_RL_masterX_0_ifc_fifo_op_decCtr,
       WILL_FIRE_RL_masterX_0_ifc_fifo_op_incCtr,
       WILL_FIRE_RL_masterX_0_ifc_pre_enq,
       WILL_FIRE_RL_masterX_0_read_op,
       WILL_FIRE_RL_masterX_0_send_request,
       WILL_FIRE_RL_masterX_0_stall,
       WILL_FIRE_RL_masterX_0_stall_op,
       WILL_FIRE_RL_masterX_0_start_op,
       WILL_FIRE_RL_masterX_0_update_grant,
       WILL_FIRE_RL_masterX_0_write_op,
       WILL_FIRE_RL_masterX_1_fifo_tx_do_clear,
       WILL_FIRE_RL_masterX_1_fifo_tx_do_decr,
       WILL_FIRE_RL_masterX_1_fifo_tx_do_incr,
       WILL_FIRE_RL_masterX_1_fifo_tx_fifof_dequeue,
       WILL_FIRE_RL_masterX_1_fifo_tx_fifof_enqueue,
       WILL_FIRE_RL_masterX_1_grab_invalid_response,
       WILL_FIRE_RL_masterX_1_grab_valid_response,
       WILL_FIRE_RL_masterX_1_idle_op,
       WILL_FIRE_RL_masterX_1_ifc_do_enq,
       WILL_FIRE_RL_masterX_1_ifc_every,
       WILL_FIRE_RL_masterX_1_ifc_fifo_op_both,
       WILL_FIRE_RL_masterX_1_ifc_fifo_op_decCtr,
       WILL_FIRE_RL_masterX_1_ifc_fifo_op_incCtr,
       WILL_FIRE_RL_masterX_1_ifc_pre_enq,
       WILL_FIRE_RL_masterX_1_read_op,
       WILL_FIRE_RL_masterX_1_send_request,
       WILL_FIRE_RL_masterX_1_stall,
       WILL_FIRE_RL_masterX_1_stall_op,
       WILL_FIRE_RL_masterX_1_start_op,
       WILL_FIRE_RL_masterX_1_update_grant,
       WILL_FIRE_RL_masterX_1_write_op,
       WILL_FIRE_RL_mkConnectionGetPut,
       WILL_FIRE_RL_mkConnectionGetPut_1,
       WILL_FIRE_RL_mkConnectionGetPut_2,
       WILL_FIRE_RL_mkConnectionGetPut_3,
       WILL_FIRE_RL_read_flush_signal_from_cpu,
       WILL_FIRE_RL_slave_mem_default_response,
       WILL_FIRE_RL_slave_mem_first__dreg_update,
       WILL_FIRE_RL_slave_mem_grab_ctrl,
       WILL_FIRE_RL_slave_mem_grab_response,
       WILL_FIRE_RL_slave_mem_not_selected,
       WILL_FIRE_RL_slave_mem_send_request,
       WILL_FIRE_RL_slave_other_default_response,
       WILL_FIRE_RL_slave_other_first__dreg_update,
       WILL_FIRE_RL_slave_other_grab_ctrl,
       WILL_FIRE_RL_slave_other_grab_response,
       WILL_FIRE_RL_slave_other_not_selected,
       WILL_FIRE_RL_slave_other_send_request,
       WILL_FIRE_sin;

  // inputs to muxes for submodule ports
  wire [172 : 0] MUX_masterX_0_descriptor$write_1__VAL_1,
		 MUX_masterX_0_descriptor$write_1__VAL_2,
		 MUX_masterX_1_descriptor$write_1__VAL_1,
		 MUX_masterX_1_descriptor$write_1__VAL_2;
  wire [140 : 0] MUX_masterX_0_ifc_request_reg$write_1__VAL_1,
		 MUX_masterX_0_ifc_request_reg$write_1__VAL_2,
		 MUX_masterX_0_ifc_request_reg$write_1__VAL_3,
		 MUX_masterX_0_ifc_request_reg$write_1__VAL_4,
		 MUX_masterX_1_ifc_request_reg$write_1__VAL_1,
		 MUX_masterX_1_ifc_request_reg$write_1__VAL_2,
		 MUX_masterX_1_ifc_request_reg$write_1__VAL_3,
		 MUX_masterX_1_ifc_request_reg$write_1__VAL_4;
  wire [77 : 0] MUX_slave_mem_ctrl_reg$write_1__VAL_1,
		MUX_slave_mem_ctrl_reg$write_1__VAL_2,
		MUX_slave_other_ctrl_reg$write_1__VAL_1;
  wire [67 : 0] MUX_slave_mem_ifc_response_wire$wset_1__VAL_1,
		MUX_slave_mem_ifc_response_wire$wset_1__VAL_2,
		MUX_slave_other_ifc_response_wire$wset_1__VAL_2;
  wire [64 : 0] MUX_masterX_0_data_reg$write_1__VAL_1,
		MUX_masterX_0_data_reg$write_1__VAL_2,
		MUX_masterX_0_data_reg$write_1__VAL_3,
		MUX_masterX_1_data_reg$write_1__VAL_2,
		MUX_masterX_1_data_reg$write_1__VAL_3;
  wire [4 : 0] MUX_masterX_0_count$write_1__VAL_1,
	       MUX_masterX_0_count$write_1__VAL_2,
	       MUX_masterX_1_count$write_1__VAL_1,
	       MUX_masterX_1_count$write_1__VAL_2;
  wire [2 : 0] MUX_masterX_0_fifo_tx_count$write_1__VAL_1,
	       MUX_masterX_0_fifo_tx_count$write_1__VAL_2,
	       MUX_masterX_1_fifo_tx_count$write_1__VAL_1;
  wire [1 : 0] MUX_masterX_0_ifc_fifo_op_cntr_r$write_1__VAL_2,
	       MUX_masterX_0_ifc_fifo_op_q_0$write_1__VAL_1,
	       MUX_masterX_0_ifc_fifo_op_q_1$write_1__VAL_1,
	       MUX_masterX_1_ifc_fifo_op_cntr_r$write_1__VAL_2,
	       MUX_masterX_1_ifc_fifo_op_q_0$write_1__VAL_2,
	       MUX_masterX_1_ifc_fifo_op_q_1$write_1__VAL_2;
  wire MUX_masterX_0_ifc_fifo_op_q_0$write_1__SEL_1,
       MUX_masterX_0_ifc_fifo_op_q_0$write_1__SEL_2,
       MUX_masterX_0_ifc_fifo_op_q_1$write_1__SEL_1,
       MUX_masterX_0_ifc_fifo_op_q_1$write_1__SEL_2,
       MUX_masterX_0_lock_wire$wset_1__PSEL_1,
       MUX_masterX_0_req_reg$write_1__SEL_1,
       MUX_masterX_0_req_reg$write_1__VAL_1,
       MUX_masterX_0_req_reg$write_1__VAL_2,
       MUX_masterX_0_req_reg$write_1__VAL_3,
       MUX_masterX_1_ifc_fifo_op_q_0$write_1__SEL_1,
       MUX_masterX_1_ifc_fifo_op_q_0$write_1__SEL_2,
       MUX_masterX_1_ifc_fifo_op_q_1$write_1__SEL_1,
       MUX_masterX_1_ifc_fifo_op_q_1$write_1__SEL_2,
       MUX_masterX_1_lock_wire$wset_1__PSEL_1,
       MUX_masterX_1_req_reg$write_1__SEL_1,
       MUX_masterX_1_req_reg$write_1__VAL_1,
       MUX_masterX_1_req_reg$write_1__VAL_2,
       MUX_masterX_1_req_reg$write_1__VAL_3,
       MUX_slave_mem_ctrl_reg$write_1__SEL_1,
       MUX_slave_other_ctrl_reg$write_1__SEL_1;

  // remaining internal signals
  reg [63 : 0] CASE_ahb_bus_s_map_data_0_BITS_1_TO_0_0_0x567__ETC__q8,
	       CASE_ahb_bus_s_map_data_1_BITS_1_TO_0_0_0x567__ETC__q9,
	       data__h160799,
	       v__h162734,
	       x_fabric_bus_hWDATA__h169941,
	       x_request__read_ctrl_addr__h157701;
  reg [7 : 0] value__h158198, value__h161021;
  reg [4 : 0] CASE_SEL_ARR_masterX_0_ifc_request_reg_8_BITS__ETC__q13,
	      CASE_SEL_ARR_masterX_0_ifc_request_reg_8_BITS__ETC__q3;
  reg [3 : 0] x_request__read_ctrl_prot__h157700;
  reg [2 : 0] CASE_masterX_0_descriptor_BITS_26_TO_25_0_1_1__ETC__q1,
	      CASE_masterX_0_fifo_rx_rvport1__read_BITS_24__ETC__q6,
	      CASE_masterX_0_fifo_rx_rvport1__read_BITS_26__ETC__q7,
	      CASE_masterX_1_descriptor_BITS_26_TO_25_0_1_1__ETC__q2,
	      CASE_masterX_1_fifo_rx_rv_BITS_24_TO_22_0_mast_ETC__q4,
	      CASE_masterX_1_fifo_rx_rv_BITS_26_TO_25_0_1_1__ETC__q5,
	      IF_masterX_0_descriptor_31_BITS_24_TO_22_46_EQ_ETC___d909,
	      IF_masterX_1_descriptor_547_BITS_24_TO_22_562__ETC___d1925,
	      SEL_ARR_masterX_0_ifc_request_reg_8_BITS_136_T_ETC___d2207;
  reg [1 : 0] CASE_ahb_bus_hmaster_addr_BIT_1_0_masterX_0_if_ETC__q12,
	      CASE_ahb_bus_s_map_data_0_BITS_1_TO_0_0_0_1_IF_ETC__q11,
	      CASE_ahb_bus_s_map_data_1_BITS_1_TO_0_0_0_1_IF_ETC__q10,
	      SEL_ARR_masterX_0_ifc_request_reg_8_BITS_133_T_ETC___d2203;
  reg SEL_ARR_NOT_masterX_0_req_wire_whas__188_210_O_ETC___d2221,
      SEL_ARR_ahb_bus_dummy_transfer_reg_176_EQ_0_17_ETC___d2341,
      SEL_ARR_ahb_bus_dummy_transfer_reg_176_EQ_0_17_ETC___d2385,
      SEL_ARR_ahb_bus_dummy_transfer_reg_176_EQ_0_17_ETC___d2395,
      SEL_ARR_masterX_0_req_wire_whas__188_AND_maste_ETC___d2201;
  wire [76 : 0] masterX_0_descriptor_31_BIT_172_32_AND_NOT_mas_ETC___d976,
		masterX_1_descriptor_547_BIT_172_548_AND_NOT_m_ETC___d1991;
  wire [72 : 0] IF_masterX_0_descriptor_31_BIT_172_32_THEN_IF__ETC___d975,
		IF_masterX_1_descriptor_547_BIT_172_548_THEN_I_ETC___d1990;
  wire [63 : 0] _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553,
		_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114,
		_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569,
		_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131,
		addr___1__h106012,
		addr___1__h28316,
		addr___1__h3958,
		addr___1__h81677,
		addr__h105941,
		addr__h28245,
		addr__h3879,
		addr__h81603,
		data__h157974,
		log_length__h106009,
		log_length__h28313,
		log_length__h3955,
		log_length__h81674,
		log_size__h106008,
		log_size__h28312,
		log_size__h3954,
		log_size__h81673,
		mask__h106011,
		mask__h28315,
		mask__h3957,
		mask__h81676,
		new_value_data__h3435,
		next_addr__h105944,
		next_addr__h28248,
		next_addr__h3882,
		next_addr__h81606,
		rdata__h171386,
		rdata__h171807,
		total__h106010,
		total__h28314,
		total__h3956,
		total__h81675,
		x__h106024,
		x__h106032,
		x__h28328,
		x__h28336,
		x__h3970,
		x__h3979,
		x__h81689,
		x__h81698,
		x_bus_hRDATA__h166705,
		x_bus_hRDATA__h166717,
		x_request__read_ctrl_addr__h160534,
		y__h104967,
		y__h106025,
		y__h129299,
		y__h27248,
		y__h28329,
		y__h3971,
		y__h51603,
		y__h81690;
  wire [5 : 0] value__h103573,
	       value__h116493,
	       value__h127905,
	       value__h14441,
	       value__h25854,
	       value__h38797,
	       value__h50209,
	       value__h92160;
  wire [4 : 0] remaining__h162904, remaining__h162978;
  wire [3 : 0] value__h106033,
	       value__h28337,
	       value__h3980,
	       value__h81699,
	       x_request__read_ctrl_prot__h160533;
  wire [2 : 0] IF_masterX_0_descriptor_31_BITS_26_TO_25_42_EQ_ETC___d932,
	       IF_masterX_1_descriptor_547_BITS_26_TO_25_558__ETC___d1948;
  wire [1 : 0] IF_ahb_bus_s_map_data_0_382_BIT_2_383_THEN_SEL_ETC___d2454,
	       IF_ahb_bus_s_map_data_1_392_BIT_2_393_THEN_SEL_ETC___d2469,
	       IF_slave_mem_ifc_response_wire_whas__444_THEN__ETC___d2447,
	       IF_slave_other_ifc_response_wire_whas__448_THE_ETC___d2451,
	       masterX_0_ifc_fifo_op_cntr_r_9_MINUS_1___d46,
	       masterX_1_ifc_fifo_op_cntr_r_047_MINUS_1___d1063,
	       v__h163993,
	       x__h169932;
  wire IF_SEL_ARR_masterX_0_ifc_request_reg_8_BITS_13_ETC___d2234,
       IF_ahb_bus_s_map_data_0_382_BIT_2_383_THEN_SEL_ETC___d2386,
       IF_ahb_bus_s_map_data_1_392_BIT_2_393_THEN_SEL_ETC___d2396,
       NOT_masterX_0_count_3_EQ_0_4_5_AND_NOT_masterX_ETC___d535,
       NOT_masterX_1_count_100_EQ_0_101_102_AND_NOT_m_ETC___d1551,
       _dand1masterX_0_lock_wire$EN_wset,
       _dand1masterX_1_lock_wire$EN_wset,
       _dfoo1,
       _dfoo3,
       _dfoo5,
       _dfoo7,
       ahb_bus_arbiter_priority_vector_290_BIT_0_294__ETC___d2302,
       ahb_bus_arbiter_priority_vector_290_BIT_1_291__ETC___d2298,
       m_num_data__h161927;

  // action method sin
  assign RDY_sin = 1'd1 ;
  assign CAN_FIRE_sin = 1'd1 ;
  assign WILL_FIRE_sin = EN_sin ;

  // value method sout
  assign sout = proc$sout ;
  assign RDY_sout = 1'd1 ;

  // submodule bram_mod
  mkTLM_Memory bram_mod(.CLK(CLK),
			.RST_N(RST_N),
			.flush_from_proc_flush(bram_mod$flush_from_proc_flush),
			.intfc_rcv_rx_put(bram_mod$intfc_rcv_rx_put),
			.EN_intfc_rcv_tx_get(bram_mod$EN_intfc_rcv_tx_get),
			.EN_intfc_rcv_rx_put(bram_mod$EN_intfc_rcv_rx_put),
			.EN_flush_from_proc(bram_mod$EN_flush_from_proc),
			.intfc_rcv_tx_get(bram_mod$intfc_rcv_tx_get),
			.RDY_intfc_rcv_tx_get(bram_mod$RDY_intfc_rcv_tx_get),
			.RDY_intfc_rcv_rx_put(bram_mod$RDY_intfc_rcv_rx_put),
			.RDY_flush_from_proc());

  // submodule masterX_0_fifo_tx_fifof_ff
  SizedFIFO #(.p1width(32'd89),
	      .p2depth(32'd5),
	      .p3cntr_width(32'd2),
	      .guarded(32'd0)) masterX_0_fifo_tx_fifof_ff(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(masterX_0_fifo_tx_fifof_ff$D_IN),
							  .ENQ(masterX_0_fifo_tx_fifof_ff$ENQ),
							  .DEQ(masterX_0_fifo_tx_fifof_ff$DEQ),
							  .CLR(masterX_0_fifo_tx_fifof_ff$CLR),
							  .D_OUT(masterX_0_fifo_tx_fifof_ff$D_OUT),
							  .FULL_N(masterX_0_fifo_tx_fifof_ff$FULL_N),
							  .EMPTY_N(masterX_0_fifo_tx_fifof_ff$EMPTY_N));

  // submodule masterX_0_fifo_tx_fifof_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) masterX_0_fifo_tx_fifof_firstValid(.CLK(CLK),
							      .D_IN(masterX_0_fifo_tx_fifof_firstValid$D_IN),
							      .EN(masterX_0_fifo_tx_fifof_firstValid$EN),
							      .Q_OUT(masterX_0_fifo_tx_fifof_firstValid$Q_OUT));

  // submodule masterX_0_fifo_tx_levelsValidClr
  RevertReg #(.width(32'd1),
	      .init(1'd1)) masterX_0_fifo_tx_levelsValidClr(.CLK(CLK),
							    .D_IN(masterX_0_fifo_tx_levelsValidClr$D_IN),
							    .EN(masterX_0_fifo_tx_levelsValidClr$EN),
							    .Q_OUT(masterX_0_fifo_tx_levelsValidClr$Q_OUT));

  // submodule masterX_0_fifo_tx_levelsValidDeq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) masterX_0_fifo_tx_levelsValidDeq(.CLK(CLK),
							    .D_IN(masterX_0_fifo_tx_levelsValidDeq$D_IN),
							    .EN(masterX_0_fifo_tx_levelsValidDeq$EN),
							    .Q_OUT(masterX_0_fifo_tx_levelsValidDeq$Q_OUT));

  // submodule masterX_0_fifo_tx_levelsValidEnq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) masterX_0_fifo_tx_levelsValidEnq(.CLK(CLK),
							    .D_IN(masterX_0_fifo_tx_levelsValidEnq$D_IN),
							    .EN(masterX_0_fifo_tx_levelsValidEnq$EN),
							    .Q_OUT(masterX_0_fifo_tx_levelsValidEnq$Q_OUT));

  // submodule masterX_1_fifo_tx_fifof_ff
  SizedFIFO #(.p1width(32'd89),
	      .p2depth(32'd5),
	      .p3cntr_width(32'd2),
	      .guarded(32'd0)) masterX_1_fifo_tx_fifof_ff(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(masterX_1_fifo_tx_fifof_ff$D_IN),
							  .ENQ(masterX_1_fifo_tx_fifof_ff$ENQ),
							  .DEQ(masterX_1_fifo_tx_fifof_ff$DEQ),
							  .CLR(masterX_1_fifo_tx_fifof_ff$CLR),
							  .D_OUT(),
							  .FULL_N(masterX_1_fifo_tx_fifof_ff$FULL_N),
							  .EMPTY_N());

  // submodule masterX_1_fifo_tx_fifof_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) masterX_1_fifo_tx_fifof_firstValid(.CLK(CLK),
							      .D_IN(masterX_1_fifo_tx_fifof_firstValid$D_IN),
							      .EN(masterX_1_fifo_tx_fifof_firstValid$EN),
							      .Q_OUT());

  // submodule masterX_1_fifo_tx_levelsValidClr
  RevertReg #(.width(32'd1),
	      .init(1'd1)) masterX_1_fifo_tx_levelsValidClr(.CLK(CLK),
							    .D_IN(masterX_1_fifo_tx_levelsValidClr$D_IN),
							    .EN(masterX_1_fifo_tx_levelsValidClr$EN),
							    .Q_OUT(masterX_1_fifo_tx_levelsValidClr$Q_OUT));

  // submodule masterX_1_fifo_tx_levelsValidDeq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) masterX_1_fifo_tx_levelsValidDeq(.CLK(CLK),
							    .D_IN(masterX_1_fifo_tx_levelsValidDeq$D_IN),
							    .EN(masterX_1_fifo_tx_levelsValidDeq$EN),
							    .Q_OUT(masterX_1_fifo_tx_levelsValidDeq$Q_OUT));

  // submodule masterX_1_fifo_tx_levelsValidEnq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) masterX_1_fifo_tx_levelsValidEnq(.CLK(CLK),
							    .D_IN(masterX_1_fifo_tx_levelsValidEnq$D_IN),
							    .EN(masterX_1_fifo_tx_levelsValidEnq$EN),
							    .Q_OUT(masterX_1_fifo_tx_levelsValidEnq$Q_OUT));

  // submodule proc
  mkcore_copy proc(.CLK(CLK),
		   .RST_N(RST_N),
		   .intfc_rx_put(proc$intfc_rx_put),
		   .sin_in(proc$sin_in),
		   .EN_intfc_tx_get(proc$EN_intfc_tx_get),
		   .EN_intfc_rx_put(proc$EN_intfc_rx_put),
		   .EN_sin(proc$EN_sin),
		   .intfc_tx_get(proc$intfc_tx_get),
		   .RDY_intfc_tx_get(proc$RDY_intfc_tx_get),
		   .RDY_intfc_rx_put(proc$RDY_intfc_rx_put),
		   .RDY_sin(),
		   .sout(proc$sout),
		   .RDY_sout(),
		   .flush(proc$flush),
		   .RDY_flush());

  // rule RL_read_flush_signal_from_cpu
  assign CAN_FIRE_RL_read_flush_signal_from_cpu = 1'd1 ;
  assign WILL_FIRE_RL_read_flush_signal_from_cpu = 1'd1 ;

  // rule RL_mkConnectionGetPut
  assign CAN_FIRE_RL_mkConnectionGetPut =
	     proc$RDY_intfc_tx_get && !masterX_0_fifo_rx_rv[173] ;
  assign WILL_FIRE_RL_mkConnectionGetPut = CAN_FIRE_RL_mkConnectionGetPut ;

  // rule RL_masterX_0_stall
  assign CAN_FIRE_RL_masterX_0_stall =
	     masterX_0_fifo_tx_levelsValidEnq$Q_OUT &&
	     masterX_0_fifo_tx_levelsValidDeq$Q_OUT &&
	     masterX_0_fifo_tx_levelsValidClr$Q_OUT &&
	     masterX_0_fifo_tx_count > 3'd1 &&
	     masterX_0_count != 5'd1 ;
  assign WILL_FIRE_RL_masterX_0_stall = CAN_FIRE_RL_masterX_0_stall ;

  // rule RL_masterX_0_send_request
  assign CAN_FIRE_RL_masterX_0_send_request =
	     masterX_0_fifo_rx_rv$port1__read[173] && !masterX_0_grant_reg &&
	     (masterX_0_count != 5'd0 || !CAN_FIRE_RL_masterX_0_stall) ;
  assign WILL_FIRE_RL_masterX_0_send_request =
	     CAN_FIRE_RL_masterX_0_send_request ;

  // rule RL_masterX_0_fifo_tx_do_clear
  assign CAN_FIRE_RL_masterX_0_fifo_tx_do_clear = 1'b0 ;
  assign WILL_FIRE_RL_masterX_0_fifo_tx_do_clear = 1'b0 ;

  // rule RL_masterX_1_stall
  assign CAN_FIRE_RL_masterX_1_stall =
	     masterX_1_fifo_tx_levelsValidEnq$Q_OUT &&
	     masterX_1_fifo_tx_levelsValidDeq$Q_OUT &&
	     masterX_1_fifo_tx_levelsValidClr$Q_OUT &&
	     masterX_1_fifo_tx_count > 3'd1 &&
	     masterX_1_count != 5'd1 ;
  assign WILL_FIRE_RL_masterX_1_stall = CAN_FIRE_RL_masterX_1_stall ;

  // rule RL_masterX_1_send_request
  assign CAN_FIRE_RL_masterX_1_send_request =
	     masterX_1_fifo_rx_rv[173] && !masterX_1_grant_reg &&
	     (masterX_1_count != 5'd0 || !CAN_FIRE_RL_masterX_1_stall) ;
  assign WILL_FIRE_RL_masterX_1_send_request =
	     CAN_FIRE_RL_masterX_1_send_request ;

  // rule RL_masterX_1_fifo_tx_do_clear
  assign CAN_FIRE_RL_masterX_1_fifo_tx_do_clear = 1'b0 ;
  assign WILL_FIRE_RL_masterX_1_fifo_tx_do_clear = 1'b0 ;

  // rule RL_masterX_1_fifo_tx_fifof_dequeue
  assign CAN_FIRE_RL_masterX_1_fifo_tx_fifof_dequeue = 1'b0 ;
  assign WILL_FIRE_RL_masterX_1_fifo_tx_fifof_dequeue = 1'b0 ;

  // rule RL_slave_mem_first__dreg_update
  assign CAN_FIRE_RL_slave_mem_first__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_slave_mem_first__dreg_update = 1'd1 ;

  // rule RL_slave_other_first__dreg_update
  assign CAN_FIRE_RL_slave_other_first__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_slave_other_first__dreg_update = 1'd1 ;

  // rule RL_ahb_bus_broadcast_to_slaves
  assign CAN_FIRE_RL_ahb_bus_broadcast_to_slaves = 1'd1 ;
  assign WILL_FIRE_RL_ahb_bus_broadcast_to_slaves = 1'd1 ;

  // rule RL_slave_mem_not_selected
  assign CAN_FIRE_RL_slave_mem_not_selected =
	     !(SEL_ARR_masterX_0_ifc_request_reg_8_BITS_133_T_ETC___d2203 !=
	       2'd0) ;
  assign WILL_FIRE_RL_slave_mem_not_selected =
	     CAN_FIRE_RL_slave_mem_not_selected ;

  // rule RL_slave_mem_send_request
  assign CAN_FIRE_RL_slave_mem_send_request =
	     !slave_mem_fifo_tx_rv[173] && !slave_mem_fifo_op_rv &&
	     slave_mem_ctrl_reg[77] &&
	     (slave_mem_ctrl_reg[69:68] == 2'd3 ||
	      slave_mem_ctrl_reg[69:68] == 2'd2) ;
  assign WILL_FIRE_RL_slave_mem_send_request =
	     CAN_FIRE_RL_slave_mem_send_request ;

  // rule RL_mkConnectionGetPut_2
  assign CAN_FIRE_RL_mkConnectionGetPut_2 =
	     slave_mem_fifo_tx_rv$port1__read[173] &&
	     bram_mod$RDY_intfc_rcv_rx_put ;
  assign WILL_FIRE_RL_mkConnectionGetPut_2 =
	     CAN_FIRE_RL_mkConnectionGetPut_2 ;

  // rule RL_mkConnectionGetPut_3
  assign CAN_FIRE_RL_mkConnectionGetPut_3 =
	     bram_mod$RDY_intfc_rcv_tx_get && !slave_mem_fifo_rx_rv[89] ;
  assign WILL_FIRE_RL_mkConnectionGetPut_3 =
	     CAN_FIRE_RL_mkConnectionGetPut_3 ;

  // rule RL_slave_mem_grab_response
  assign CAN_FIRE_RL_slave_mem_grab_response =
	     slave_mem_fifo_rx_rv$port1__read[89] &&
	     slave_mem_fifo_op_rv$port1__read &&
	     slave_mem_ctrl_reg[77] &&
	     (slave_mem_ctrl_reg[69:68] == 2'd3 ||
	      slave_mem_ctrl_reg[69:68] == 2'd2) ;
  assign WILL_FIRE_RL_slave_mem_grab_response =
	     CAN_FIRE_RL_slave_mem_grab_response ;

  // rule RL_slave_mem_default_response
  assign CAN_FIRE_RL_slave_mem_default_response =
	     slave_mem_ctrl_reg[77] &&
	     (slave_mem_ctrl_reg[69:68] == 2'd0 ||
	      slave_mem_ctrl_reg[69:68] == 2'd1) ;
  assign WILL_FIRE_RL_slave_mem_default_response =
	     CAN_FIRE_RL_slave_mem_default_response ;

  // rule RL_slave_mem_grab_ctrl
  assign CAN_FIRE_RL_slave_mem_grab_ctrl = !slave_mem_ctrl_reg[77] ;
  assign WILL_FIRE_RL_slave_mem_grab_ctrl =
	     CAN_FIRE_RL_slave_mem_grab_ctrl &&
	     !WILL_FIRE_RL_slave_mem_not_selected ;

  // rule RL_slave_other_not_selected
  assign CAN_FIRE_RL_slave_other_not_selected = 1'b1 ;
  assign WILL_FIRE_RL_slave_other_not_selected = 1'b1 ;

  // rule RL_slave_other_send_request
  assign CAN_FIRE_RL_slave_other_send_request =
	     !slave_other_fifo_tx_rv[173] && !slave_other_fifo_op_rv &&
	     slave_other_ctrl_reg[77] &&
	     (slave_other_ctrl_reg[69:68] == 2'd3 ||
	      slave_other_ctrl_reg[69:68] == 2'd2) ;
  assign WILL_FIRE_RL_slave_other_send_request =
	     CAN_FIRE_RL_slave_other_send_request ;

  // rule RL_slave_other_grab_response
  assign CAN_FIRE_RL_slave_other_grab_response =
	     slave_other_fifo_rx_rv[89] &&
	     slave_other_fifo_op_rv$port1__read &&
	     slave_other_ctrl_reg[77] &&
	     (slave_other_ctrl_reg[69:68] == 2'd3 ||
	      slave_other_ctrl_reg[69:68] == 2'd2) ;
  assign WILL_FIRE_RL_slave_other_grab_response =
	     CAN_FIRE_RL_slave_other_grab_response ;

  // rule RL_slave_other_default_response
  assign CAN_FIRE_RL_slave_other_default_response =
	     slave_other_ctrl_reg[77] &&
	     (slave_other_ctrl_reg[69:68] == 2'd0 ||
	      slave_other_ctrl_reg[69:68] == 2'd1) ;
  assign WILL_FIRE_RL_slave_other_default_response =
	     CAN_FIRE_RL_slave_other_default_response ;

  // rule RL_slave_other_grab_ctrl
  assign CAN_FIRE_RL_slave_other_grab_ctrl = !slave_other_ctrl_reg[77] ;
  assign WILL_FIRE_RL_slave_other_grab_ctrl = 1'b0 ;

  // rule RL_ahb_bus_broadcast_to_dummys
  assign CAN_FIRE_RL_ahb_bus_broadcast_to_dummys = 1'd1 ;
  assign WILL_FIRE_RL_ahb_bus_broadcast_to_dummys = 1'd1 ;

  // rule RL_ahb_bus_broadcast_to_masters
  assign CAN_FIRE_RL_ahb_bus_broadcast_to_masters = 1'd1 ;
  assign WILL_FIRE_RL_ahb_bus_broadcast_to_masters = 1'd1 ;

  // rule RL_masterX_0_ifc_every
  assign CAN_FIRE_RL_masterX_0_ifc_every =
	     (!ahb_bus_hmaster_addr[1] || !ahb_bus_hmaster_addr[0]) ?
	       IF_ahb_bus_s_map_data_0_382_BIT_2_383_THEN_SEL_ETC___d2386 :
	       ((ahb_bus_hmaster_addr[1] && ahb_bus_hmaster_addr[0]) ?
		  IF_ahb_bus_s_map_data_0_382_BIT_2_383_THEN_SEL_ETC___d2386 :
		  IF_ahb_bus_s_map_data_1_392_BIT_2_393_THEN_SEL_ETC___d2396) ;
  assign WILL_FIRE_RL_masterX_0_ifc_every = CAN_FIRE_RL_masterX_0_ifc_every ;

  // rule RL_masterX_0_ifc_pre_enq
  assign CAN_FIRE_RL_masterX_0_ifc_pre_enq =
	     masterX_0_ifc_request_reg[133:132] != 2'd0 &&
	     masterX_0_ifc_request_reg[133:132] != 2'd1 &&
	     CAN_FIRE_RL_masterX_0_ifc_every ;
  assign WILL_FIRE_RL_masterX_0_ifc_pre_enq =
	     CAN_FIRE_RL_masterX_0_ifc_pre_enq ;

  // rule RL_masterX_0_ifc_do_enq
  assign CAN_FIRE_RL_masterX_0_ifc_do_enq =
	     masterX_0_ifc_fifo_op_cntr_r != 2'd2 &&
	     CAN_FIRE_RL_masterX_0_ifc_pre_enq ;
  assign WILL_FIRE_RL_masterX_0_ifc_do_enq =
	     CAN_FIRE_RL_masterX_0_ifc_do_enq ;

  // rule RL_masterX_0_ifc_fifo_op_incCtr
  assign CAN_FIRE_RL_masterX_0_ifc_fifo_op_incCtr =
	     CAN_FIRE_RL_masterX_0_ifc_do_enq &&
	     CAN_FIRE_RL_masterX_0_ifc_do_enq &&
	     !masterX_0_ifc_fifo_op_dequeueing$whas ;
  assign WILL_FIRE_RL_masterX_0_ifc_fifo_op_incCtr =
	     CAN_FIRE_RL_masterX_0_ifc_fifo_op_incCtr ;

  // rule RL_masterX_0_ifc_fifo_op_decCtr
  assign CAN_FIRE_RL_masterX_0_ifc_fifo_op_decCtr =
	     masterX_0_ifc_fifo_op_dequeueing$whas &&
	     !CAN_FIRE_RL_masterX_0_ifc_do_enq ;
  assign WILL_FIRE_RL_masterX_0_ifc_fifo_op_decCtr =
	     CAN_FIRE_RL_masterX_0_ifc_fifo_op_decCtr ;

  // rule RL_masterX_0_ifc_fifo_op_both
  assign CAN_FIRE_RL_masterX_0_ifc_fifo_op_both =
	     CAN_FIRE_RL_masterX_0_ifc_do_enq &&
	     masterX_0_ifc_fifo_op_dequeueing$whas &&
	     CAN_FIRE_RL_masterX_0_ifc_do_enq ;
  assign WILL_FIRE_RL_masterX_0_ifc_fifo_op_both =
	     CAN_FIRE_RL_masterX_0_ifc_fifo_op_both ;

  // rule RL_masterX_1_ifc_every
  assign CAN_FIRE_RL_masterX_1_ifc_every =
	     IF_ahb_bus_s_map_data_1_392_BIT_2_393_THEN_SEL_ETC___d2396 ;
  assign WILL_FIRE_RL_masterX_1_ifc_every =
	     IF_ahb_bus_s_map_data_1_392_BIT_2_393_THEN_SEL_ETC___d2396 ;

  // rule RL_masterX_1_ifc_pre_enq
  assign CAN_FIRE_RL_masterX_1_ifc_pre_enq =
	     masterX_1_ifc_request_reg[133:132] != 2'd0 &&
	     masterX_1_ifc_request_reg[133:132] != 2'd1 &&
	     IF_ahb_bus_s_map_data_1_392_BIT_2_393_THEN_SEL_ETC___d2396 ;
  assign WILL_FIRE_RL_masterX_1_ifc_pre_enq =
	     CAN_FIRE_RL_masterX_1_ifc_pre_enq ;

  // rule RL_masterX_1_ifc_do_enq
  assign CAN_FIRE_RL_masterX_1_ifc_do_enq =
	     masterX_1_ifc_fifo_op_cntr_r != 2'd2 &&
	     CAN_FIRE_RL_masterX_1_ifc_pre_enq ;
  assign WILL_FIRE_RL_masterX_1_ifc_do_enq =
	     CAN_FIRE_RL_masterX_1_ifc_do_enq ;

  // rule RL_masterX_1_ifc_fifo_op_incCtr
  assign CAN_FIRE_RL_masterX_1_ifc_fifo_op_incCtr =
	     CAN_FIRE_RL_masterX_1_ifc_do_enq &&
	     CAN_FIRE_RL_masterX_1_ifc_do_enq &&
	     !masterX_1_ifc_fifo_op_dequeueing$whas ;
  assign WILL_FIRE_RL_masterX_1_ifc_fifo_op_incCtr =
	     CAN_FIRE_RL_masterX_1_ifc_fifo_op_incCtr ;

  // rule RL_masterX_1_ifc_fifo_op_decCtr
  assign CAN_FIRE_RL_masterX_1_ifc_fifo_op_decCtr =
	     masterX_1_ifc_fifo_op_dequeueing$whas &&
	     !CAN_FIRE_RL_masterX_1_ifc_do_enq ;
  assign WILL_FIRE_RL_masterX_1_ifc_fifo_op_decCtr =
	     CAN_FIRE_RL_masterX_1_ifc_fifo_op_decCtr ;

  // rule RL_masterX_1_ifc_fifo_op_both
  assign CAN_FIRE_RL_masterX_1_ifc_fifo_op_both =
	     CAN_FIRE_RL_masterX_1_ifc_do_enq &&
	     masterX_1_ifc_fifo_op_dequeueing$whas &&
	     CAN_FIRE_RL_masterX_1_ifc_do_enq ;
  assign WILL_FIRE_RL_masterX_1_ifc_fifo_op_both =
	     CAN_FIRE_RL_masterX_1_ifc_fifo_op_both ;

  // rule RL_ahb_bus_s_map_addr_update
  assign CAN_FIRE_RL_ahb_bus_s_map_addr_update =
	     IF_ahb_bus_s_map_data_0_382_BIT_2_383_THEN_SEL_ETC___d2386 ;
  assign WILL_FIRE_RL_ahb_bus_s_map_addr_update =
	     IF_ahb_bus_s_map_data_0_382_BIT_2_383_THEN_SEL_ETC___d2386 ;

  // rule RL_ahb_bus_s_map_addr_update_1
  assign CAN_FIRE_RL_ahb_bus_s_map_addr_update_1 =
	     IF_ahb_bus_s_map_data_1_392_BIT_2_393_THEN_SEL_ETC___d2396 ;
  assign WILL_FIRE_RL_ahb_bus_s_map_addr_update_1 =
	     IF_ahb_bus_s_map_data_1_392_BIT_2_393_THEN_SEL_ETC___d2396 ;

  // rule RL_ahb_bus_dummy_every
  assign CAN_FIRE_RL_ahb_bus_dummy_every = 1'd1 ;
  assign WILL_FIRE_RL_ahb_bus_dummy_every = 1'd1 ;

  // rule RL_ahb_bus_monitor_send_update
  assign CAN_FIRE_RL_ahb_bus_monitor_send_update = 1'd1 ;
  assign WILL_FIRE_RL_ahb_bus_monitor_send_update = 1'd1 ;

  // rule RL_ahb_bus_update_grant
  assign CAN_FIRE_RL_ahb_bus_update_grant =
	     !ahb_bus_hmaster_addr[1] ||
	     IF_SEL_ARR_masterX_0_ifc_request_reg_8_BITS_13_ETC___d2234 ;
  assign WILL_FIRE_RL_ahb_bus_update_grant =
	     CAN_FIRE_RL_ahb_bus_update_grant ;

  // rule RL_ahb_bus_monitor_update_started
  assign CAN_FIRE_RL_ahb_bus_monitor_update_started = 1'd1 ;
  assign WILL_FIRE_RL_ahb_bus_monitor_update_started = 1'd1 ;

  // rule RL_ahb_bus_monitor_every
  assign CAN_FIRE_RL_ahb_bus_monitor_every = 1'd1 ;
  assign WILL_FIRE_RL_ahb_bus_monitor_every = 1'd1 ;

  // rule RL_ahb_bus_monitor_sample
  assign CAN_FIRE_RL_ahb_bus_monitor_sample = ahb_bus_monitor_hready$wget ;
  assign WILL_FIRE_RL_ahb_bus_monitor_sample = ahb_bus_monitor_hready$wget ;

  // rule RL_ahb_bus_0_send_request
  assign CAN_FIRE_RL_ahb_bus_0_send_request =
	     CAN_FIRE_RL_masterX_0_send_request || masterX_0_req_reg ;
  assign WILL_FIRE_RL_ahb_bus_0_send_request =
	     CAN_FIRE_RL_ahb_bus_0_send_request ;

  // rule RL_ahb_bus_1_send_request
  assign CAN_FIRE_RL_ahb_bus_1_send_request =
	     CAN_FIRE_RL_masterX_1_send_request || masterX_1_req_reg ;
  assign WILL_FIRE_RL_ahb_bus_1_send_request =
	     CAN_FIRE_RL_ahb_bus_1_send_request ;

  // rule RL_ahb_bus_arbiter_every
  assign CAN_FIRE_RL_ahb_bus_arbiter_every = 1'd1 ;
  assign WILL_FIRE_RL_ahb_bus_arbiter_every = 1'd1 ;

  // rule RL_ahb_bus_arbiter_delay_grant
  assign CAN_FIRE_RL_ahb_bus_arbiter_delay_grant = 1'd1 ;
  assign WILL_FIRE_RL_ahb_bus_arbiter_delay_grant = 1'd1 ;

  // rule RL_ahb_bus_hready_update
  assign CAN_FIRE_RL_ahb_bus_hready_update =
	     SEL_ARR_ahb_bus_dummy_transfer_reg_176_EQ_0_17_ETC___d2341 ;
  assign WILL_FIRE_RL_ahb_bus_hready_update =
	     SEL_ARR_ahb_bus_dummy_transfer_reg_176_EQ_0_17_ETC___d2341 ;

  // rule RL_ahb_bus_dummy_updatex
  assign CAN_FIRE_RL_ahb_bus_dummy_updatex =
	     ahb_bus_dummy_transfer_reg == 2'd0 ||
	     ahb_bus_dummy_transfer_reg == 2'd1 ||
	     !ahb_bus_dummy_select_reg ;
  assign WILL_FIRE_RL_ahb_bus_dummy_updatex =
	     CAN_FIRE_RL_ahb_bus_dummy_updatex ;

  // rule RL_ahb_bus_dummy_update
  assign CAN_FIRE_RL_ahb_bus_dummy_update = 1'd1 ;
  assign WILL_FIRE_RL_ahb_bus_dummy_update = 1'd1 ;

  // rule RL_ahb_bus_0_send_grant
  assign CAN_FIRE_RL_ahb_bus_0_send_grant =
	     ahb_bus_arbiter_dgrant_vector_wire$wget[0] ;
  assign WILL_FIRE_RL_ahb_bus_0_send_grant =
	     CAN_FIRE_RL_ahb_bus_0_send_grant ;

  // rule RL_ahb_bus_requests_0_every
  assign CAN_FIRE_RL_ahb_bus_requests_0_every = 1'd1 ;
  assign WILL_FIRE_RL_ahb_bus_requests_0_every = 1'd1 ;

  // rule RL_masterX_0_update_grant
  assign CAN_FIRE_RL_masterX_0_update_grant = 1'd1 ;
  assign WILL_FIRE_RL_masterX_0_update_grant = 1'd1 ;

  // rule RL_masterX_0_start_op
  assign CAN_FIRE_RL_masterX_0_start_op =
	     masterX_0_fifo_rx_rv$port1__read[173] &&
	     CAN_FIRE_RL_masterX_0_ifc_every &&
	     CAN_FIRE_RL_masterX_0_ifc_every &&
	     !masterX_0_fifo_rx_rv$port1__read[172] &&
	     masterX_0_count == 5'd0 &&
	     !CAN_FIRE_RL_masterX_0_stall &&
	     ahb_bus_arbiter_dgrant_vector_wire$wget[0] ;
  assign WILL_FIRE_RL_masterX_0_start_op = CAN_FIRE_RL_masterX_0_start_op ;

  // rule RL_masterX_0_write_op
  assign CAN_FIRE_RL_masterX_0_write_op =
	     masterX_0_fifo_rx_rv$port1__read[173] &&
	     CAN_FIRE_RL_masterX_0_ifc_every &&
	     CAN_FIRE_RL_masterX_0_ifc_every &&
	     masterX_0_fifo_rx_rv$port1__read[172] &&
	     masterX_0_descriptor[172] &&
	     masterX_0_descriptor[171:170] == 2'd1 &&
	     NOT_masterX_0_count_3_EQ_0_4_5_AND_NOT_masterX_ETC___d535 ;
  assign WILL_FIRE_RL_masterX_0_write_op = CAN_FIRE_RL_masterX_0_write_op ;

  // rule RL_masterX_0_read_op
  assign CAN_FIRE_RL_masterX_0_read_op =
	     CAN_FIRE_RL_masterX_0_ifc_every &&
	     CAN_FIRE_RL_masterX_0_ifc_every &&
	     masterX_0_descriptor[172] &&
	     masterX_0_descriptor[171:170] == 2'd0 &&
	     NOT_masterX_0_count_3_EQ_0_4_5_AND_NOT_masterX_ETC___d535 ;
  assign WILL_FIRE_RL_masterX_0_read_op = CAN_FIRE_RL_masterX_0_read_op ;

  // rule RL_masterX_0_idle_op
  assign CAN_FIRE_RL_masterX_0_idle_op =
	     CAN_FIRE_RL_masterX_0_ifc_every &&
	     CAN_FIRE_RL_masterX_0_ifc_every &&
	     masterX_0_data_reg[64] ;
  assign WILL_FIRE_RL_masterX_0_idle_op =
	     CAN_FIRE_RL_masterX_0_idle_op &&
	     !WILL_FIRE_RL_masterX_0_read_op &&
	     !WILL_FIRE_RL_masterX_0_write_op &&
	     !WILL_FIRE_RL_masterX_0_start_op ;

  // rule RL_masterX_0_stall_op
  assign CAN_FIRE_RL_masterX_0_stall_op =
	     CAN_FIRE_RL_masterX_0_ifc_every &&
	     CAN_FIRE_RL_masterX_0_ifc_every &&
	     !masterX_0_data_reg[64] ;
  assign WILL_FIRE_RL_masterX_0_stall_op =
	     CAN_FIRE_RL_masterX_0_stall_op &&
	     !WILL_FIRE_RL_masterX_0_read_op &&
	     !WILL_FIRE_RL_masterX_0_write_op &&
	     !WILL_FIRE_RL_masterX_0_start_op ;

  // rule RL_masterX_0_grab_valid_response
  assign CAN_FIRE_RL_masterX_0_grab_valid_response =
	     masterX_0_response_wire$whas &&
	     masterX_0_fifo_tx_fifof_ff$FULL_N &&
	     masterX_0_ifc_response$wget[1] ;
  assign WILL_FIRE_RL_masterX_0_grab_valid_response =
	     CAN_FIRE_RL_masterX_0_grab_valid_response ;

  // rule RL_mkConnectionGetPut_1
  assign CAN_FIRE_RL_mkConnectionGetPut_1 =
	     masterX_0_fifo_tx_fifof_firstValid$Q_OUT &&
	     (masterX_0_fifo_tx_fifof_ff$EMPTY_N ||
	      CAN_FIRE_RL_masterX_0_grab_valid_response) &&
	     proc$RDY_intfc_rx_put ;
  assign WILL_FIRE_RL_mkConnectionGetPut_1 =
	     CAN_FIRE_RL_mkConnectionGetPut_1 ;

  // rule RL_masterX_0_grab_invalid_response
  assign CAN_FIRE_RL_masterX_0_grab_invalid_response =
	     masterX_0_response_wire$whas && !masterX_0_ifc_response$wget[1] ;
  assign WILL_FIRE_RL_masterX_0_grab_invalid_response =
	     CAN_FIRE_RL_masterX_0_grab_invalid_response ;

  // rule RL_masterX_0_fifo_tx_do_incr
  assign CAN_FIRE_RL_masterX_0_fifo_tx_do_incr =
	     CAN_FIRE_RL_masterX_0_grab_valid_response &&
	     !CAN_FIRE_RL_mkConnectionGetPut_1 ;
  assign WILL_FIRE_RL_masterX_0_fifo_tx_do_incr =
	     CAN_FIRE_RL_masterX_0_fifo_tx_do_incr ;

  // rule RL_masterX_0_fifo_tx_do_decr
  assign CAN_FIRE_RL_masterX_0_fifo_tx_do_decr =
	     !CAN_FIRE_RL_masterX_0_grab_valid_response &&
	     CAN_FIRE_RL_mkConnectionGetPut_1 ;
  assign WILL_FIRE_RL_masterX_0_fifo_tx_do_decr =
	     CAN_FIRE_RL_masterX_0_fifo_tx_do_decr ;

  // rule RL_masterX_0_fifo_tx_fifof_enqueue
  assign CAN_FIRE_RL_masterX_0_fifo_tx_fifof_enqueue =
	     CAN_FIRE_RL_masterX_0_grab_valid_response &&
	     (!CAN_FIRE_RL_mkConnectionGetPut_1 ||
	      masterX_0_fifo_tx_fifof_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_masterX_0_fifo_tx_fifof_enqueue =
	     CAN_FIRE_RL_masterX_0_fifo_tx_fifof_enqueue ;

  // rule RL_masterX_0_fifo_tx_fifof_dequeue
  assign CAN_FIRE_RL_masterX_0_fifo_tx_fifof_dequeue =
	     CAN_FIRE_RL_mkConnectionGetPut_1 &&
	     masterX_0_fifo_tx_fifof_ff$EMPTY_N ;
  assign WILL_FIRE_RL_masterX_0_fifo_tx_fifof_dequeue =
	     CAN_FIRE_RL_masterX_0_fifo_tx_fifof_dequeue ;

  // rule RL_ahb_bus_0_send_lock
  assign CAN_FIRE_RL_ahb_bus_0_send_lock = masterX_0_lock_wire$whas ;
  assign WILL_FIRE_RL_ahb_bus_0_send_lock = masterX_0_lock_wire$whas ;

  // rule RL_ahb_bus_1_send_grant
  assign CAN_FIRE_RL_ahb_bus_1_send_grant =
	     ahb_bus_arbiter_dgrant_vector_wire$wget[1] ;
  assign WILL_FIRE_RL_ahb_bus_1_send_grant =
	     CAN_FIRE_RL_ahb_bus_1_send_grant ;

  // rule RL_ahb_bus_requests_1_every
  assign CAN_FIRE_RL_ahb_bus_requests_1_every = 1'd1 ;
  assign WILL_FIRE_RL_ahb_bus_requests_1_every = 1'd1 ;

  // rule RL_masterX_1_update_grant
  assign CAN_FIRE_RL_masterX_1_update_grant = 1'd1 ;
  assign WILL_FIRE_RL_masterX_1_update_grant = 1'd1 ;

  // rule RL_masterX_1_start_op
  assign CAN_FIRE_RL_masterX_1_start_op =
	     masterX_1_fifo_rx_rv[173] &&
	     IF_ahb_bus_s_map_data_1_392_BIT_2_393_THEN_SEL_ETC___d2396 &&
	     !masterX_1_fifo_rx_rv[172] &&
	     masterX_1_count == 5'd0 &&
	     !CAN_FIRE_RL_masterX_1_stall &&
	     ahb_bus_arbiter_dgrant_vector_wire$wget[1] ;
  assign WILL_FIRE_RL_masterX_1_start_op = CAN_FIRE_RL_masterX_1_start_op ;

  // rule RL_masterX_1_write_op
  assign CAN_FIRE_RL_masterX_1_write_op =
	     masterX_1_fifo_rx_rv[173] &&
	     IF_ahb_bus_s_map_data_1_392_BIT_2_393_THEN_SEL_ETC___d2396 &&
	     masterX_1_fifo_rx_rv[172] &&
	     masterX_1_descriptor[172] &&
	     masterX_1_descriptor[171:170] == 2'd1 &&
	     NOT_masterX_1_count_100_EQ_0_101_102_AND_NOT_m_ETC___d1551 ;
  assign WILL_FIRE_RL_masterX_1_write_op = CAN_FIRE_RL_masterX_1_write_op ;

  // rule RL_masterX_1_read_op
  assign CAN_FIRE_RL_masterX_1_read_op =
	     IF_ahb_bus_s_map_data_1_392_BIT_2_393_THEN_SEL_ETC___d2396 &&
	     masterX_1_descriptor[172] &&
	     masterX_1_descriptor[171:170] == 2'd0 &&
	     NOT_masterX_1_count_100_EQ_0_101_102_AND_NOT_m_ETC___d1551 ;
  assign WILL_FIRE_RL_masterX_1_read_op = CAN_FIRE_RL_masterX_1_read_op ;

  // rule RL_masterX_1_idle_op
  assign CAN_FIRE_RL_masterX_1_idle_op =
	     IF_ahb_bus_s_map_data_1_392_BIT_2_393_THEN_SEL_ETC___d2396 &&
	     masterX_1_data_reg[64] ;
  assign WILL_FIRE_RL_masterX_1_idle_op =
	     CAN_FIRE_RL_masterX_1_idle_op &&
	     !WILL_FIRE_RL_masterX_1_read_op &&
	     !WILL_FIRE_RL_masterX_1_write_op &&
	     !WILL_FIRE_RL_masterX_1_start_op ;

  // rule RL_masterX_1_stall_op
  assign CAN_FIRE_RL_masterX_1_stall_op =
	     IF_ahb_bus_s_map_data_1_392_BIT_2_393_THEN_SEL_ETC___d2396 &&
	     !masterX_1_data_reg[64] ;
  assign WILL_FIRE_RL_masterX_1_stall_op =
	     CAN_FIRE_RL_masterX_1_stall_op &&
	     !WILL_FIRE_RL_masterX_1_read_op &&
	     !WILL_FIRE_RL_masterX_1_write_op &&
	     !WILL_FIRE_RL_masterX_1_start_op ;

  // rule RL_masterX_1_grab_valid_response
  assign CAN_FIRE_RL_masterX_1_grab_valid_response =
	     masterX_1_response_wire$whas &&
	     masterX_1_fifo_tx_fifof_ff$FULL_N &&
	     masterX_1_ifc_response$wget[1] ;
  assign WILL_FIRE_RL_masterX_1_grab_valid_response =
	     CAN_FIRE_RL_masterX_1_grab_valid_response ;

  // rule RL_masterX_1_grab_invalid_response
  assign CAN_FIRE_RL_masterX_1_grab_invalid_response =
	     masterX_1_response_wire$whas && !masterX_1_ifc_response$wget[1] ;
  assign WILL_FIRE_RL_masterX_1_grab_invalid_response =
	     CAN_FIRE_RL_masterX_1_grab_invalid_response ;

  // rule RL_masterX_1_fifo_tx_do_incr
  assign CAN_FIRE_RL_masterX_1_fifo_tx_do_incr =
	     CAN_FIRE_RL_masterX_1_grab_valid_response ;
  assign WILL_FIRE_RL_masterX_1_fifo_tx_do_incr =
	     CAN_FIRE_RL_masterX_1_grab_valid_response ;

  // rule RL_masterX_1_fifo_tx_do_decr
  assign CAN_FIRE_RL_masterX_1_fifo_tx_do_decr = 1'b0 ;
  assign WILL_FIRE_RL_masterX_1_fifo_tx_do_decr = 1'b0 ;

  // rule RL_masterX_1_fifo_tx_fifof_enqueue
  assign CAN_FIRE_RL_masterX_1_fifo_tx_fifof_enqueue =
	     CAN_FIRE_RL_masterX_1_grab_valid_response ;
  assign WILL_FIRE_RL_masterX_1_fifo_tx_fifof_enqueue =
	     CAN_FIRE_RL_masterX_1_grab_valid_response ;

  // rule RL_ahb_bus_1_send_lock
  assign CAN_FIRE_RL_ahb_bus_1_send_lock = masterX_1_lock_wire$whas ;
  assign WILL_FIRE_RL_ahb_bus_1_send_lock = masterX_1_lock_wire$whas ;

  // rule RL_ahb_bus_dummys_0_every
  assign CAN_FIRE_RL_ahb_bus_dummys_0_every = 1'd1 ;
  assign WILL_FIRE_RL_ahb_bus_dummys_0_every = 1'd1 ;

  // rule RL_ahb_bus_dummys_0_updatex
  assign CAN_FIRE_RL_ahb_bus_dummys_0_updatex =
	     ahb_bus_dummys_0_transfer_reg == 2'd0 ||
	     ahb_bus_dummys_0_transfer_reg == 2'd1 ||
	     !ahb_bus_dummys_0_select_reg ;
  assign WILL_FIRE_RL_ahb_bus_dummys_0_updatex =
	     CAN_FIRE_RL_ahb_bus_dummys_0_updatex ;

  // rule RL_ahb_bus_dummys_0_update
  assign CAN_FIRE_RL_ahb_bus_dummys_0_update = 1'd1 ;
  assign WILL_FIRE_RL_ahb_bus_dummys_0_update = 1'd1 ;

  // rule RL_ahb_bus_dummys_1_every
  assign CAN_FIRE_RL_ahb_bus_dummys_1_every = 1'd1 ;
  assign WILL_FIRE_RL_ahb_bus_dummys_1_every = 1'd1 ;

  // rule RL_ahb_bus_dummys_1_updatex
  assign CAN_FIRE_RL_ahb_bus_dummys_1_updatex =
	     ahb_bus_dummys_1_transfer_reg == 2'd0 ||
	     ahb_bus_dummys_1_transfer_reg == 2'd1 ||
	     !ahb_bus_dummys_1_select_reg ;
  assign WILL_FIRE_RL_ahb_bus_dummys_1_updatex =
	     CAN_FIRE_RL_ahb_bus_dummys_1_updatex ;

  // rule RL_ahb_bus_dummys_1_update
  assign CAN_FIRE_RL_ahb_bus_dummys_1_update = 1'd1 ;
  assign WILL_FIRE_RL_ahb_bus_dummys_1_update = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_masterX_0_ifc_fifo_op_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_masterX_0_ifc_fifo_op_both && _dfoo3 ;
  assign MUX_masterX_0_ifc_fifo_op_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_masterX_0_ifc_fifo_op_incCtr &&
	     masterX_0_ifc_fifo_op_cntr_r == 2'd0 ;
  assign MUX_masterX_0_ifc_fifo_op_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_masterX_0_ifc_fifo_op_both && _dfoo1 ;
  assign MUX_masterX_0_ifc_fifo_op_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_masterX_0_ifc_fifo_op_incCtr &&
	     masterX_0_ifc_fifo_op_cntr_r == 2'd1 ;
  assign MUX_masterX_0_lock_wire$wset_1__PSEL_1 =
	     WILL_FIRE_RL_masterX_0_read_op ||
	     WILL_FIRE_RL_masterX_0_write_op ;
  assign MUX_masterX_0_req_reg$write_1__SEL_1 =
	     WILL_FIRE_RL_masterX_0_stall_op ||
	     WILL_FIRE_RL_masterX_0_idle_op ;
  assign MUX_masterX_1_ifc_fifo_op_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_masterX_1_ifc_fifo_op_incCtr &&
	     masterX_1_ifc_fifo_op_cntr_r == 2'd0 ;
  assign MUX_masterX_1_ifc_fifo_op_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_masterX_1_ifc_fifo_op_both && _dfoo7 ;
  assign MUX_masterX_1_ifc_fifo_op_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_masterX_1_ifc_fifo_op_incCtr &&
	     masterX_1_ifc_fifo_op_cntr_r == 2'd1 ;
  assign MUX_masterX_1_ifc_fifo_op_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_masterX_1_ifc_fifo_op_both && _dfoo5 ;
  assign MUX_masterX_1_lock_wire$wset_1__PSEL_1 =
	     WILL_FIRE_RL_masterX_1_read_op ||
	     WILL_FIRE_RL_masterX_1_write_op ;
  assign MUX_masterX_1_req_reg$write_1__SEL_1 =
	     WILL_FIRE_RL_masterX_1_stall_op ||
	     WILL_FIRE_RL_masterX_1_idle_op ;
  assign MUX_slave_mem_ctrl_reg$write_1__SEL_1 =
	     WILL_FIRE_RL_slave_mem_default_response ||
	     WILL_FIRE_RL_slave_mem_grab_response ;
  assign MUX_slave_other_ctrl_reg$write_1__SEL_1 =
	     WILL_FIRE_RL_slave_other_default_response ||
	     WILL_FIRE_RL_slave_other_grab_response ;
  assign MUX_masterX_0_count$write_1__VAL_1 = masterX_0_count - 5'd1 ;
  assign MUX_masterX_0_count$write_1__VAL_2 =
	     masterX_0_fifo_rx_rv$port1__read[39:35] - 5'd1 ;
  assign MUX_masterX_0_data_reg$write_1__VAL_1 =
	     { 1'd0, 64'hAAAAAAAAAAAAAAAA /* unspecified value */  } ;
  assign MUX_masterX_0_data_reg$write_1__VAL_2 =
	     { 1'd1, masterX_0_fifo_rx_rv$port1__read[103:40] } ;
  assign MUX_masterX_0_data_reg$write_1__VAL_3 =
	     { 1'd1, masterX_0_fifo_rx_rv$port1__read[71:8] } ;
  assign MUX_masterX_0_descriptor$write_1__VAL_1 =
	     { 1'd1,
	       masterX_0_descriptor[171:168],
	       next_addr__h28248,
	       masterX_0_descriptor[103:0] } ;
  assign MUX_masterX_0_descriptor$write_1__VAL_2 =
	     { 1'd1,
	       masterX_0_fifo_rx_rv$port1__read[171:168],
	       next_addr__h3882,
	       masterX_0_fifo_rx_rv$port1__read[103:0] } ;
  assign MUX_masterX_0_fifo_tx_count$write_1__VAL_1 =
	     masterX_0_fifo_tx_count + 3'd1 ;
  assign MUX_masterX_0_fifo_tx_count$write_1__VAL_2 =
	     masterX_0_fifo_tx_count - 3'd1 ;
  assign MUX_masterX_0_ifc_fifo_op_cntr_r$write_1__VAL_2 =
	     masterX_0_ifc_fifo_op_cntr_r + 2'd1 ;
  assign MUX_masterX_0_ifc_fifo_op_q_0$write_1__VAL_1 =
	     (masterX_0_ifc_fifo_op_cntr_r == 2'd1) ?
	       masterX_0_ifc_fifo_op_x_wire$wget :
	       masterX_0_ifc_fifo_op_q_1 ;
  assign MUX_masterX_0_ifc_fifo_op_q_1$write_1__VAL_1 =
	     (masterX_0_ifc_fifo_op_cntr_r == 2'd2) ?
	       masterX_0_ifc_fifo_op_x_wire$wget :
	       v__h163993 ;
  assign MUX_masterX_0_ifc_request_reg$write_1__VAL_1 =
	     { masterX_0_descriptor[171:170] != 2'd0,
	       IF_masterX_0_descriptor_31_BITS_24_TO_22_46_EQ_ETC___d909,
	       IF_masterX_0_descriptor_31_BITS_26_TO_25_42_EQ_ETC___d932,
	       (masterX_0_descriptor[26:25] == 2'd0 &&
		masterX_0_descriptor[39:35] == 5'd1 ||
		(masterX_0_descriptor[26:25] != 2'd1 ||
		 masterX_0_descriptor[39:35] != 5'd4) &&
		(masterX_0_descriptor[26:25] != 2'd1 ||
		 masterX_0_descriptor[39:35] != 5'd8) &&
		(masterX_0_descriptor[26:25] != 2'd1 ||
		 masterX_0_descriptor[39:35] != 5'd16) &&
		masterX_0_descriptor[26:25] != 2'd0) ?
		 2'd2 :
		 2'd3,
	       masterX_0_descriptor[3:0],
	       masterX_0_descriptor[167:104],
	       masterX_0_data_reg[63:0] } ;
  assign MUX_masterX_0_ifc_request_reg$write_1__VAL_2 =
	     { masterX_0_fifo_rx_rv$port1__read[171:170] != 2'd0,
	       CASE_masterX_0_fifo_rx_rvport1__read_BITS_24__ETC__q6,
	       (masterX_0_fifo_rx_rv$port1__read[26:25] == 2'd0 &&
		masterX_0_fifo_rx_rv$port1__read[39:35] == 5'd1) ?
		 3'd0 :
		 ((masterX_0_fifo_rx_rv$port1__read[26:25] == 2'd0 &&
		   masterX_0_fifo_rx_rv$port1__read[39:35] == 5'd4) ?
		    3'd3 :
		    ((masterX_0_fifo_rx_rv$port1__read[26:25] == 2'd0 &&
		      masterX_0_fifo_rx_rv$port1__read[39:35] == 5'd8) ?
		       3'd5 :
		       ((masterX_0_fifo_rx_rv$port1__read[26:25] == 2'd0 &&
			 masterX_0_fifo_rx_rv$port1__read[39:35] == 5'd16) ?
			  3'd7 :
			  ((masterX_0_fifo_rx_rv$port1__read[26:25] == 2'd1 &&
			    masterX_0_fifo_rx_rv$port1__read[39:35] == 5'd4) ?
			     3'd2 :
			     ((masterX_0_fifo_rx_rv$port1__read[26:25] ==
			       2'd1 &&
			       masterX_0_fifo_rx_rv$port1__read[39:35] ==
			       5'd8) ?
				3'd4 :
				((masterX_0_fifo_rx_rv$port1__read[26:25] ==
				  2'd1 &&
				  masterX_0_fifo_rx_rv$port1__read[39:35] ==
				  5'd16) ?
				   3'd6 :
				   CASE_masterX_0_fifo_rx_rvport1__read_BITS_26__ETC__q7)))))),
	       2'd2,
	       masterX_0_fifo_rx_rv$port1__read[3:0],
	       masterX_0_fifo_rx_rv$port1__read[167:104],
	       masterX_0_data_reg[63:0] } ;
  assign MUX_masterX_0_ifc_request_reg$write_1__VAL_3 =
	     { masterX_0_descriptor_31_BIT_172_32_AND_NOT_mas_ETC___d976,
	       masterX_0_data_reg[63:0] } ;
  assign MUX_masterX_0_ifc_request_reg$write_1__VAL_4 =
	     { masterX_0_descriptor_31_BIT_172_32_AND_NOT_mas_ETC___d976,
	       64'hAAAAAAAAAAAAAAAA /* unspecified value */  } ;
  assign MUX_masterX_0_req_reg$write_1__VAL_1 =
	     (!masterX_0_descriptor[172] ||
	      (masterX_0_descriptor[26:25] != 2'd0 ||
	       masterX_0_descriptor[39:35] != 5'd1) &&
	      (masterX_0_descriptor[26:25] == 2'd1 &&
	       masterX_0_descriptor[39:35] == 5'd4 ||
	       masterX_0_descriptor[26:25] == 2'd1 &&
	       masterX_0_descriptor[39:35] == 5'd8 ||
	       masterX_0_descriptor[26:25] == 2'd1 &&
	       masterX_0_descriptor[39:35] == 5'd16 ||
	       masterX_0_descriptor[26:25] == 2'd0)) &&
	     masterX_0_count != 5'd0 &&
	     masterX_0_req_reg ;
  assign MUX_masterX_0_req_reg$write_1__VAL_2 =
	     masterX_0_descriptor[39:35] != 5'd1 &&
	     masterX_0_descriptor[39:35] != 5'd4 &&
	     masterX_0_descriptor[39:35] != 5'd8 &&
	     masterX_0_descriptor[39:35] != 5'd16 &&
	     masterX_0_descriptor[26:25] == 2'd0 &&
	     masterX_0_count != 5'd1 ;
  assign MUX_masterX_0_req_reg$write_1__VAL_3 =
	     masterX_0_fifo_rx_rv$port1__read[39:35] != 5'd4 &&
	     masterX_0_fifo_rx_rv$port1__read[39:35] != 5'd8 &&
	     masterX_0_fifo_rx_rv$port1__read[39:35] != 5'd16 &&
	     masterX_0_fifo_rx_rv$port1__read[26:25] == 2'd0 &&
	     masterX_0_fifo_rx_rv$port1__read[39:35] != 5'd1 ;
  assign MUX_masterX_1_count$write_1__VAL_1 = masterX_1_count - 5'd1 ;
  assign MUX_masterX_1_count$write_1__VAL_2 =
	     masterX_1_fifo_rx_rv[39:35] - 5'd1 ;
  assign MUX_masterX_1_data_reg$write_1__VAL_2 =
	     { 1'd1, masterX_1_fifo_rx_rv[103:40] } ;
  assign MUX_masterX_1_data_reg$write_1__VAL_3 =
	     { 1'd1, masterX_1_fifo_rx_rv[71:8] } ;
  assign MUX_masterX_1_descriptor$write_1__VAL_1 =
	     { 1'd1,
	       masterX_1_descriptor[171:168],
	       next_addr__h105944,
	       masterX_1_descriptor[103:0] } ;
  assign MUX_masterX_1_descriptor$write_1__VAL_2 =
	     { 1'd1,
	       masterX_1_fifo_rx_rv[171:168],
	       next_addr__h81606,
	       masterX_1_fifo_rx_rv[103:0] } ;
  assign MUX_masterX_1_fifo_tx_count$write_1__VAL_1 =
	     masterX_1_fifo_tx_count + 3'd1 ;
  assign MUX_masterX_1_ifc_fifo_op_cntr_r$write_1__VAL_2 =
	     masterX_1_ifc_fifo_op_cntr_r + 2'd1 ;
  assign MUX_masterX_1_ifc_fifo_op_q_0$write_1__VAL_2 =
	     (masterX_1_ifc_fifo_op_cntr_r == 2'd1) ?
	       masterX_1_ifc_fifo_op_x_wire$wget :
	       masterX_1_ifc_fifo_op_q_1 ;
  assign MUX_masterX_1_ifc_fifo_op_q_1$write_1__VAL_2 =
	     (masterX_1_ifc_fifo_op_cntr_r == 2'd2) ?
	       masterX_1_ifc_fifo_op_x_wire$wget :
	       v__h163993 ;
  assign MUX_masterX_1_ifc_request_reg$write_1__VAL_1 =
	     { masterX_1_descriptor[171:170] != 2'd0,
	       IF_masterX_1_descriptor_547_BITS_24_TO_22_562__ETC___d1925,
	       IF_masterX_1_descriptor_547_BITS_26_TO_25_558__ETC___d1948,
	       (masterX_1_descriptor[26:25] == 2'd0 &&
		masterX_1_descriptor[39:35] == 5'd1 ||
		(masterX_1_descriptor[26:25] != 2'd1 ||
		 masterX_1_descriptor[39:35] != 5'd4) &&
		(masterX_1_descriptor[26:25] != 2'd1 ||
		 masterX_1_descriptor[39:35] != 5'd8) &&
		(masterX_1_descriptor[26:25] != 2'd1 ||
		 masterX_1_descriptor[39:35] != 5'd16) &&
		masterX_1_descriptor[26:25] != 2'd0) ?
		 2'd2 :
		 2'd3,
	       masterX_1_descriptor[3:0],
	       masterX_1_descriptor[167:104],
	       masterX_1_data_reg[63:0] } ;
  assign MUX_masterX_1_ifc_request_reg$write_1__VAL_2 =
	     { masterX_1_fifo_rx_rv[171:170] != 2'd0,
	       CASE_masterX_1_fifo_rx_rv_BITS_24_TO_22_0_mast_ETC__q4,
	       (masterX_1_fifo_rx_rv[26:25] == 2'd0 &&
		masterX_1_fifo_rx_rv[39:35] == 5'd1) ?
		 3'd0 :
		 ((masterX_1_fifo_rx_rv[26:25] == 2'd0 &&
		   masterX_1_fifo_rx_rv[39:35] == 5'd4) ?
		    3'd3 :
		    ((masterX_1_fifo_rx_rv[26:25] == 2'd0 &&
		      masterX_1_fifo_rx_rv[39:35] == 5'd8) ?
		       3'd5 :
		       ((masterX_1_fifo_rx_rv[26:25] == 2'd0 &&
			 masterX_1_fifo_rx_rv[39:35] == 5'd16) ?
			  3'd7 :
			  ((masterX_1_fifo_rx_rv[26:25] == 2'd1 &&
			    masterX_1_fifo_rx_rv[39:35] == 5'd4) ?
			     3'd2 :
			     ((masterX_1_fifo_rx_rv[26:25] == 2'd1 &&
			       masterX_1_fifo_rx_rv[39:35] == 5'd8) ?
				3'd4 :
				((masterX_1_fifo_rx_rv[26:25] == 2'd1 &&
				  masterX_1_fifo_rx_rv[39:35] == 5'd16) ?
				   3'd6 :
				   CASE_masterX_1_fifo_rx_rv_BITS_26_TO_25_0_1_1__ETC__q5)))))),
	       2'd2,
	       masterX_1_fifo_rx_rv[3:0],
	       masterX_1_fifo_rx_rv[167:104],
	       masterX_1_data_reg[63:0] } ;
  assign MUX_masterX_1_ifc_request_reg$write_1__VAL_3 =
	     { masterX_1_descriptor_547_BIT_172_548_AND_NOT_m_ETC___d1991,
	       masterX_1_data_reg[63:0] } ;
  assign MUX_masterX_1_ifc_request_reg$write_1__VAL_4 =
	     { masterX_1_descriptor_547_BIT_172_548_AND_NOT_m_ETC___d1991,
	       64'hAAAAAAAAAAAAAAAA /* unspecified value */  } ;
  assign MUX_masterX_1_req_reg$write_1__VAL_1 =
	     (!masterX_1_descriptor[172] ||
	      (masterX_1_descriptor[26:25] != 2'd0 ||
	       masterX_1_descriptor[39:35] != 5'd1) &&
	      (masterX_1_descriptor[26:25] == 2'd1 &&
	       masterX_1_descriptor[39:35] == 5'd4 ||
	       masterX_1_descriptor[26:25] == 2'd1 &&
	       masterX_1_descriptor[39:35] == 5'd8 ||
	       masterX_1_descriptor[26:25] == 2'd1 &&
	       masterX_1_descriptor[39:35] == 5'd16 ||
	       masterX_1_descriptor[26:25] == 2'd0)) &&
	     masterX_1_count != 5'd0 &&
	     masterX_1_req_reg ;
  assign MUX_masterX_1_req_reg$write_1__VAL_2 =
	     masterX_1_descriptor[39:35] != 5'd1 &&
	     masterX_1_descriptor[39:35] != 5'd4 &&
	     masterX_1_descriptor[39:35] != 5'd8 &&
	     masterX_1_descriptor[39:35] != 5'd16 &&
	     masterX_1_descriptor[26:25] == 2'd0 &&
	     masterX_1_count != 5'd1 ;
  assign MUX_masterX_1_req_reg$write_1__VAL_3 =
	     masterX_1_fifo_rx_rv[39:35] != 5'd4 &&
	     masterX_1_fifo_rx_rv[39:35] != 5'd8 &&
	     masterX_1_fifo_rx_rv[39:35] != 5'd16 &&
	     masterX_1_fifo_rx_rv[26:25] == 2'd0 &&
	     masterX_1_fifo_rx_rv[39:35] != 5'd1 ;
  assign MUX_slave_mem_ctrl_reg$write_1__VAL_1 =
	     { SEL_ARR_masterX_0_ifc_request_reg_8_BITS_133_T_ETC___d2203 !=
	       2'd0,
	       slave_mem_ifc_write_wire$wget,
	       slave_mem_ifc_size_wire$wget,
	       SEL_ARR_masterX_0_ifc_request_reg_8_BITS_136_T_ETC___d2207,
	       SEL_ARR_masterX_0_ifc_request_reg_8_BITS_133_T_ETC___d2203,
	       x_request__read_ctrl_prot__h157700,
	       x_request__read_ctrl_addr__h157701 } ;
  assign MUX_slave_mem_ctrl_reg$write_1__VAL_2 =
	     { 1'd1,
	       slave_mem_ifc_write_wire$wget,
	       slave_mem_ifc_size_wire$wget,
	       SEL_ARR_masterX_0_ifc_request_reg_8_BITS_136_T_ETC___d2207,
	       SEL_ARR_masterX_0_ifc_request_reg_8_BITS_133_T_ETC___d2203,
	       x_request__read_ctrl_prot__h157700,
	       x_request__read_ctrl_addr__h157701 } ;
  assign MUX_slave_mem_ifc_response_wire$wset_1__VAL_1 =
	     { 67'd582, 1'b0 /* unspecified value */  } ;
  assign MUX_slave_mem_ifc_response_wire$wset_1__VAL_2 =
	     { 2'd0, slave_mem_fifo_rx_rv$port1__read[86:23], v__h163993 } ;
  assign MUX_slave_other_ctrl_reg$write_1__VAL_1 =
	     { 1'd0,
	       slave_mem_ifc_write_wire$wget,
	       slave_mem_ifc_size_wire$wget,
	       SEL_ARR_masterX_0_ifc_request_reg_8_BITS_136_T_ETC___d2207,
	       SEL_ARR_masterX_0_ifc_request_reg_8_BITS_133_T_ETC___d2203,
	       x_request__read_ctrl_prot__h160533,
	       x_request__read_ctrl_addr__h160534 } ;
  assign MUX_slave_other_ifc_response_wire$wset_1__VAL_2 =
	     { 2'd0, slave_other_fifo_rx_rv[86:23], v__h163993 } ;

  // inlined wires
  assign masterX_0_response_wire$whas =
	     WILL_FIRE_RL_masterX_0_stall_op ||
	     WILL_FIRE_RL_masterX_0_idle_op ||
	     WILL_FIRE_RL_masterX_0_read_op ||
	     WILL_FIRE_RL_masterX_0_write_op ||
	     WILL_FIRE_RL_masterX_0_start_op ;
  assign masterX_0_fifo_tx_fifof_enqw$wget =
	     { masterX_0_ifc_response$wget[0] ? 2'd1 : 2'd0,
	       masterX_0_ifc_response$wget[65:2],
	       (masterX_0_ifc_response$wget[67:66] == 2'd0) ?
		 masterX_0_ifc_response$wget[67:66] :
		 2'd1,
	       17'd0,
	       4'b1010 /* unspecified value */  } ;
  assign masterX_0_lock_wire$whas =
	     _dand1masterX_0_lock_wire$EN_wset ||
	     WILL_FIRE_RL_masterX_0_start_op &&
	     (masterX_0_fifo_rx_rv$port1__read[26:25] != 2'd1 ||
	      masterX_0_fifo_rx_rv$port1__read[39:35] != 5'd4) &&
	     (masterX_0_fifo_rx_rv$port1__read[26:25] != 2'd1 ||
	      masterX_0_fifo_rx_rv$port1__read[39:35] != 5'd8) &&
	     (masterX_0_fifo_rx_rv$port1__read[26:25] != 2'd1 ||
	      masterX_0_fifo_rx_rv$port1__read[39:35] != 5'd16) &&
	     masterX_0_fifo_rx_rv$port1__read[26:25] != 2'd0 &&
	     masterX_0_fifo_rx_rv$port1__read[39:35] != 5'd1 ;
  assign masterX_0_ifc_response$wget =
	     { masterX_0_ifc_response_wire$wget,
	       new_value_data__h3435,
	       masterX_0_ifc_fifo_op_q_0 } ;
  assign masterX_0_ifc_fifo_op_x_wire$wget =
	     { 1'd1, masterX_0_ifc_request_reg[140] } ;
  assign masterX_1_response_wire$whas =
	     WILL_FIRE_RL_masterX_1_stall_op ||
	     WILL_FIRE_RL_masterX_1_idle_op ||
	     WILL_FIRE_RL_masterX_1_read_op ||
	     WILL_FIRE_RL_masterX_1_write_op ||
	     WILL_FIRE_RL_masterX_1_start_op ;
  assign masterX_1_fifo_tx_fifof_enqw$wget =
	     { masterX_1_ifc_response$wget[0] ? 2'd1 : 2'd0,
	       masterX_1_ifc_response$wget[65:2],
	       (masterX_1_ifc_response$wget[67:66] == 2'd0) ?
		 masterX_1_ifc_response$wget[67:66] :
		 2'd1,
	       17'd0,
	       4'b1010 /* unspecified value */  } ;
  assign masterX_1_lock_wire$whas =
	     _dand1masterX_1_lock_wire$EN_wset ||
	     WILL_FIRE_RL_masterX_1_start_op &&
	     (masterX_1_fifo_rx_rv[26:25] != 2'd1 ||
	      masterX_1_fifo_rx_rv[39:35] != 5'd4) &&
	     (masterX_1_fifo_rx_rv[26:25] != 2'd1 ||
	      masterX_1_fifo_rx_rv[39:35] != 5'd8) &&
	     (masterX_1_fifo_rx_rv[26:25] != 2'd1 ||
	      masterX_1_fifo_rx_rv[39:35] != 5'd16) &&
	     masterX_1_fifo_rx_rv[26:25] != 2'd0 &&
	     masterX_1_fifo_rx_rv[39:35] != 5'd1 ;
  assign masterX_1_ifc_response$wget =
	     { IF_ahb_bus_s_map_data_1_392_BIT_2_393_THEN_SEL_ETC___d2469,
	       rdata__h171807,
	       masterX_1_ifc_fifo_op_q_0 } ;
  assign masterX_1_ifc_fifo_op_x_wire$wget =
	     { 1'd1, masterX_1_ifc_request_reg[140] } ;
  assign slave_mem_ifc_response_wire$wget =
	     WILL_FIRE_RL_slave_mem_default_response ?
	       MUX_slave_mem_ifc_response_wire$wset_1__VAL_1 :
	       MUX_slave_mem_ifc_response_wire$wset_1__VAL_2 ;
  assign slave_other_ifc_response_wire$wget =
	     WILL_FIRE_RL_slave_other_default_response ?
	       MUX_slave_mem_ifc_response_wire$wset_1__VAL_1 :
	       MUX_slave_other_ifc_response_wire$wset_1__VAL_2 ;
  assign ahb_bus_monitor_hready$wget =
	     (!ahb_bus_hmaster_addr[1] || !ahb_bus_hmaster_addr[0]) ?
	       IF_ahb_bus_s_map_data_0_382_BIT_2_383_THEN_SEL_ETC___d2386 :
	       IF_ahb_bus_s_map_data_1_392_BIT_2_393_THEN_SEL_ETC___d2396 ;
  assign masterX_0_ifc_fifo_op_dequeueing$whas =
	     WILL_FIRE_RL_masterX_0_ifc_every &&
	     masterX_0_ifc_fifo_op_cntr_r != 2'd0 ;
  assign masterX_1_ifc_fifo_op_dequeueing$whas =
	     IF_ahb_bus_s_map_data_1_392_BIT_2_393_THEN_SEL_ETC___d2396 &&
	     masterX_1_ifc_fifo_op_cntr_r != 2'd0 ;
  assign masterX_0_ifc_response_wire$wget =
	     (!ahb_bus_hmaster_addr[1] || !ahb_bus_hmaster_addr[0]) ?
	       IF_ahb_bus_s_map_data_0_382_BIT_2_383_THEN_SEL_ETC___d2454 :
	       ((ahb_bus_hmaster_addr[1] && ahb_bus_hmaster_addr[0]) ?
		  IF_ahb_bus_s_map_data_0_382_BIT_2_383_THEN_SEL_ETC___d2454 :
		  IF_ahb_bus_s_map_data_1_392_BIT_2_393_THEN_SEL_ETC___d2469) ;
  always@(ahb_bus_hmaster_addr or
	  masterX_0_ifc_request_reg or masterX_1_ifc_request_reg)
  begin
    case (ahb_bus_hmaster_addr[1] && ahb_bus_hmaster_addr[0])
      1'd0: slave_mem_ifc_write_wire$wget = masterX_0_ifc_request_reg[140];
      1'd1: slave_mem_ifc_write_wire$wget = masterX_1_ifc_request_reg[140];
    endcase
  end
  always@(ahb_bus_hmaster_addr or
	  masterX_0_ifc_request_reg or masterX_1_ifc_request_reg)
  begin
    case (ahb_bus_hmaster_addr[1] && ahb_bus_hmaster_addr[0])
      1'd0: slave_mem_ifc_size_wire$wget = masterX_0_ifc_request_reg[139:137];
      1'd1: slave_mem_ifc_size_wire$wget = masterX_1_ifc_request_reg[139:137];
    endcase
  end
  assign ahb_bus_arbiter_grant_vector_wire$wget =
	     CAN_FIRE_RL_ahb_bus_update_grant ?
	       { ahb_bus_arbiter_priority_vector_290_BIT_1_291__ETC___d2298,
		 ahb_bus_arbiter_priority_vector_290_BIT_0_294__ETC___d2302 ||
		 ahb_bus_arbiter_priority_vector[0] &&
		 CAN_FIRE_RL_ahb_bus_0_send_request } :
	       ahb_bus_arbiter_grant_vector_reg ;
  assign ahb_bus_arbiter_hmaster_wire$wget =
	     { CAN_FIRE_RL_ahb_bus_update_grant ?
		 ahb_bus_arbiter_priority_vector_290_BIT_1_291__ETC___d2298 ||
		 ahb_bus_arbiter_priority_vector_290_BIT_0_294__ETC___d2302 ||
		 ahb_bus_arbiter_priority_vector[0] &&
		 CAN_FIRE_RL_ahb_bus_0_send_request :
		 ahb_bus_arbiter_hmaster_reg[1],
	       CAN_FIRE_RL_ahb_bus_update_grant ?
		 ahb_bus_arbiter_priority_vector_290_BIT_1_291__ETC___d2298 :
		 ahb_bus_arbiter_hmaster_reg[0] } ;
  assign ahb_bus_arbiter_dgrant_vector_wire$wget =
	     SEL_ARR_ahb_bus_dummy_transfer_reg_176_EQ_0_17_ETC___d2341 ?
	       ahb_bus_arbiter_grant_vector_wire$wget :
	       { ahb_bus_arbiter_grant_vector_wire$wget[1] &&
		 ahb_bus_arbiter_dgrant_vector_reg[1],
		 ahb_bus_arbiter_grant_vector_wire$wget[0] &&
		 ahb_bus_arbiter_dgrant_vector_reg[0] } ;
  assign ahb_bus_dummys_0_select_wire$wget =
	     ahb_bus_hmaster_addr[1] && ahb_bus_hmaster_addr[0] ;
  assign ahb_bus_dummys_1_transfer_wire$wget =
	     (ahb_bus_hmaster_addr[1] && ahb_bus_hmaster_addr[0]) ?
	       CASE_ahb_bus_hmaster_addr_BIT_1_0_masterX_0_if_ETC__q12 :
	       masterX_1_ifc_request_reg[133:132] ;
  assign ahb_bus_dummys_1_select_wire$wget =
	     !ahb_bus_hmaster_addr[1] || !ahb_bus_hmaster_addr[0] ;
  assign ahb_bus_s_map_addr_0$wget =
	     { !ahb_bus_hmaster_addr[1] || !ahb_bus_hmaster_addr[0],
	       x__h169932 } ;
  assign ahb_bus_s_map_addr_1$wget =
	     { ahb_bus_hmaster_addr[1] && ahb_bus_hmaster_addr[0],
	       x__h169932 } ;
  assign masterX_0_fifo_rx_rv$port0__write_1 = { 1'd1, proc$intfc_tx_get } ;
  assign masterX_0_fifo_rx_rv$port1__read =
	     CAN_FIRE_RL_mkConnectionGetPut ?
	       masterX_0_fifo_rx_rv$port0__write_1 :
	       masterX_0_fifo_rx_rv ;
  assign masterX_0_fifo_rx_rv$EN_port1__write =
	     WILL_FIRE_RL_masterX_0_write_op ||
	     WILL_FIRE_RL_masterX_0_start_op ;
  assign masterX_0_fifo_rx_rv$port1__write_1 =
	     { 1'd0,
	       173'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  } ;
  assign masterX_0_fifo_rx_rv$port2__read =
	     masterX_0_fifo_rx_rv$EN_port1__write ?
	       masterX_0_fifo_rx_rv$port1__write_1 :
	       masterX_0_fifo_rx_rv$port1__read ;
  assign masterX_1_fifo_rx_rv$EN_port1__write =
	     WILL_FIRE_RL_masterX_1_write_op ||
	     WILL_FIRE_RL_masterX_1_start_op ;
  assign masterX_1_fifo_rx_rv$port2__read =
	     masterX_1_fifo_rx_rv$EN_port1__write ?
	       masterX_0_fifo_rx_rv$port1__write_1 :
	       masterX_1_fifo_rx_rv ;
  assign slave_mem_fifo_rx_rv$port0__write_1 =
	     { 1'd1, bram_mod$intfc_rcv_tx_get } ;
  assign slave_mem_fifo_rx_rv$port1__read =
	     CAN_FIRE_RL_mkConnectionGetPut_3 ?
	       slave_mem_fifo_rx_rv$port0__write_1 :
	       slave_mem_fifo_rx_rv ;
  assign slave_mem_fifo_rx_rv$port1__write_1 =
	     { 1'd0, 89'h0AAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  } ;
  assign slave_mem_fifo_rx_rv$port2__read =
	     CAN_FIRE_RL_slave_mem_grab_response ?
	       slave_mem_fifo_rx_rv$port1__write_1 :
	       slave_mem_fifo_rx_rv$port1__read ;
  assign slave_mem_fifo_tx_rv$port0__write_1 =
	     { 2'd2,
	       slave_mem_ctrl_reg[76] ? 2'd1 : 2'd0,
	       2'd0,
	       slave_mem_ctrl_reg[63:0],
	       data__h157974,
	       15'd2044,
	       value__h158198[2:0],
	       18'd0,
	       slave_mem_ctrl_reg[67:64] } ;
  assign slave_mem_fifo_tx_rv$port1__read =
	     CAN_FIRE_RL_slave_mem_send_request ?
	       slave_mem_fifo_tx_rv$port0__write_1 :
	       slave_mem_fifo_tx_rv ;
  assign slave_mem_fifo_tx_rv$port2__read =
	     CAN_FIRE_RL_mkConnectionGetPut_2 ?
	       masterX_0_fifo_rx_rv$port1__write_1 :
	       slave_mem_fifo_tx_rv$port1__read ;
  assign slave_mem_fifo_op_rv$port1__read =
	     CAN_FIRE_RL_slave_mem_send_request || slave_mem_fifo_op_rv ;
  assign slave_mem_fifo_op_rv$port2__read =
	     !CAN_FIRE_RL_slave_mem_grab_response &&
	     slave_mem_fifo_op_rv$port1__read ;
  assign slave_other_fifo_rx_rv$port2__read =
	     CAN_FIRE_RL_slave_other_grab_response ?
	       slave_mem_fifo_rx_rv$port1__write_1 :
	       slave_other_fifo_rx_rv ;
  assign slave_other_fifo_tx_rv$port0__write_1 =
	     { 2'd2,
	       slave_other_ctrl_reg[76] ? 2'd1 : 2'd0,
	       2'd0,
	       slave_other_ctrl_reg[63:0],
	       data__h160799,
	       15'd2044,
	       value__h161021[2:0],
	       18'd0,
	       slave_other_ctrl_reg[67:64] } ;
  assign slave_other_fifo_tx_rv$port1__read =
	     CAN_FIRE_RL_slave_other_send_request ?
	       slave_other_fifo_tx_rv$port0__write_1 :
	       slave_other_fifo_tx_rv ;
  assign slave_other_fifo_op_rv$port1__read =
	     CAN_FIRE_RL_slave_other_send_request || slave_other_fifo_op_rv ;
  assign slave_other_fifo_op_rv$port2__read =
	     !CAN_FIRE_RL_slave_other_grab_response &&
	     slave_other_fifo_op_rv$port1__read ;

  // register ahb_bus_arbiter_dgrant_vector_reg
  assign ahb_bus_arbiter_dgrant_vector_reg$D_IN =
	     ahb_bus_arbiter_dgrant_vector_wire$wget ;
  assign ahb_bus_arbiter_dgrant_vector_reg$EN = 1'd1 ;

  // register ahb_bus_arbiter_grant_vector_reg
  assign ahb_bus_arbiter_grant_vector_reg$D_IN =
	     ahb_bus_arbiter_grant_vector_wire$wget ;
  assign ahb_bus_arbiter_grant_vector_reg$EN = 1'd1 ;

  // register ahb_bus_arbiter_hmaster_reg
  assign ahb_bus_arbiter_hmaster_reg$D_IN =
	     ahb_bus_arbiter_hmaster_wire$wget ;
  assign ahb_bus_arbiter_hmaster_reg$EN = 1'd1 ;

  // register ahb_bus_arbiter_priority_vector
  assign ahb_bus_arbiter_priority_vector$D_IN =
	     { ahb_bus_arbiter_priority_vector_290_BIT_0_294__ETC___d2302 ||
	       ahb_bus_arbiter_priority_vector[0] &&
	       CAN_FIRE_RL_ahb_bus_0_send_request,
	       ahb_bus_arbiter_priority_vector_290_BIT_1_291__ETC___d2298 } ;
  assign ahb_bus_arbiter_priority_vector$EN =
	     (ahb_bus_arbiter_priority_vector_290_BIT_0_294__ETC___d2302 ||
	      ahb_bus_arbiter_priority_vector_290_BIT_1_291__ETC___d2298) &&
	     CAN_FIRE_RL_ahb_bus_update_grant ;

  // register ahb_bus_dummy_select_reg
  assign ahb_bus_dummy_select_reg$D_IN =
	     SEL_ARR_masterX_0_ifc_request_reg_8_BITS_133_T_ETC___d2203 ==
	     2'd0 ;
  assign ahb_bus_dummy_select_reg$EN = CAN_FIRE_RL_ahb_bus_dummy_updatex ;

  // register ahb_bus_dummy_transfer_reg
  assign ahb_bus_dummy_transfer_reg$D_IN =
	     SEL_ARR_masterX_0_ifc_request_reg_8_BITS_133_T_ETC___d2203 ;
  assign ahb_bus_dummy_transfer_reg$EN = 1'd1 ;

  // register ahb_bus_dummys_0_select_reg
  assign ahb_bus_dummys_0_select_reg$D_IN =
	     ahb_bus_dummys_0_select_wire$wget ;
  assign ahb_bus_dummys_0_select_reg$EN =
	     CAN_FIRE_RL_ahb_bus_dummys_0_updatex ;

  // register ahb_bus_dummys_0_transfer_reg
  assign ahb_bus_dummys_0_transfer_reg$D_IN =
	     masterX_0_ifc_request_reg[133:132] ;
  assign ahb_bus_dummys_0_transfer_reg$EN = 1'd1 ;

  // register ahb_bus_dummys_1_select_reg
  assign ahb_bus_dummys_1_select_reg$D_IN =
	     ahb_bus_dummys_1_select_wire$wget ;
  assign ahb_bus_dummys_1_select_reg$EN =
	     CAN_FIRE_RL_ahb_bus_dummys_1_updatex ;

  // register ahb_bus_dummys_1_transfer_reg
  assign ahb_bus_dummys_1_transfer_reg$D_IN =
	     ahb_bus_dummys_1_transfer_wire$wget ;
  assign ahb_bus_dummys_1_transfer_reg$EN = 1'd1 ;

  // register ahb_bus_hmaster_addr
  assign ahb_bus_hmaster_addr$D_IN = ahb_bus_arbiter_hmaster_wire$wget ;
  assign ahb_bus_hmaster_addr$EN =
	     SEL_ARR_ahb_bus_dummy_transfer_reg_176_EQ_0_17_ETC___d2341 ;

  // register ahb_bus_hmaster_data
  assign ahb_bus_hmaster_data$D_IN = ahb_bus_hmaster_addr ;
  assign ahb_bus_hmaster_data$EN =
	     SEL_ARR_ahb_bus_dummy_transfer_reg_176_EQ_0_17_ETC___d2341 ;

  // register ahb_bus_monitor_hready_prev
  assign ahb_bus_monitor_hready_prev$D_IN = ahb_bus_monitor_hready$wget ;
  assign ahb_bus_monitor_hready_prev$EN = 1'd1 ;

  // register ahb_bus_monitor_remaining_reg
  assign ahb_bus_monitor_remaining_reg$D_IN =
	     (SEL_ARR_masterX_0_ifc_request_reg_8_BITS_136_T_ETC___d2207 ==
	      3'd1 &&
	      SEL_ARR_masterX_0_req_wire_whas__188_AND_maste_ETC___d2201 ||
	      SEL_ARR_masterX_0_ifc_request_reg_8_BITS_133_T_ETC___d2203 ==
	      2'd0) ?
	       5'd1 :
	       CASE_SEL_ARR_masterX_0_ifc_request_reg_8_BITS__ETC__q13 ;
  assign ahb_bus_monitor_remaining_reg$EN = ahb_bus_monitor_hready$wget ;

  // register ahb_bus_monitor_request_prev
  assign ahb_bus_monitor_request_prev$D_IN =
	     SEL_ARR_masterX_0_req_wire_whas__188_AND_maste_ETC___d2201 ;
  assign ahb_bus_monitor_request_prev$EN = 1'd1 ;

  // register ahb_bus_monitor_started
  assign ahb_bus_monitor_started$D_IN =
	     ahb_bus_monitor_hready$wget &&
	     (SEL_ARR_masterX_0_ifc_request_reg_8_BITS_133_T_ETC___d2203 ==
	      2'd0 ||
	      SEL_ARR_masterX_0_ifc_request_reg_8_BITS_133_T_ETC___d2203 ==
	      2'd2) ;
  assign ahb_bus_monitor_started$EN =
	     ahb_bus_monitor_hready$wget &&
	     (SEL_ARR_masterX_0_ifc_request_reg_8_BITS_133_T_ETC___d2203 ==
	      2'd0 ||
	      SEL_ARR_masterX_0_ifc_request_reg_8_BITS_133_T_ETC___d2203 ==
	      2'd2) ||
	     IF_SEL_ARR_masterX_0_ifc_request_reg_8_BITS_13_ETC___d2234 ;

  // register ahb_bus_monitor_transfer_prev
  assign ahb_bus_monitor_transfer_prev$D_IN =
	     SEL_ARR_masterX_0_ifc_request_reg_8_BITS_133_T_ETC___d2203 ;
  assign ahb_bus_monitor_transfer_prev$EN = 1'd1 ;

  // register ahb_bus_s_map_data_0
  assign ahb_bus_s_map_data_0$D_IN = ahb_bus_s_map_addr_0$wget ;
  assign ahb_bus_s_map_data_0$EN =
	     IF_ahb_bus_s_map_data_0_382_BIT_2_383_THEN_SEL_ETC___d2386 ;

  // register ahb_bus_s_map_data_1
  assign ahb_bus_s_map_data_1$D_IN = ahb_bus_s_map_addr_1$wget ;
  assign ahb_bus_s_map_data_1$EN =
	     IF_ahb_bus_s_map_data_1_392_BIT_2_393_THEN_SEL_ETC___d2396 ;

  // register ahb_bus_s_num_addr_current
  assign ahb_bus_s_num_addr_current$D_IN = 2'h0 ;
  assign ahb_bus_s_num_addr_current$EN = 1'b0 ;

  // register ahb_bus_s_num_data
  assign ahb_bus_s_num_data$D_IN = x__h169932 ;
  assign ahb_bus_s_num_data$EN =
	     SEL_ARR_ahb_bus_dummy_transfer_reg_176_EQ_0_17_ETC___d2341 ;

  // register masterX_0_count
  assign masterX_0_count$D_IN =
	     MUX_masterX_0_lock_wire$wset_1__PSEL_1 ?
	       MUX_masterX_0_count$write_1__VAL_1 :
	       MUX_masterX_0_count$write_1__VAL_2 ;
  assign masterX_0_count$EN =
	     WILL_FIRE_RL_masterX_0_read_op ||
	     WILL_FIRE_RL_masterX_0_write_op ||
	     WILL_FIRE_RL_masterX_0_start_op ;

  // register masterX_0_data_reg
  always@(WILL_FIRE_RL_masterX_0_idle_op or
	  MUX_masterX_0_data_reg$write_1__VAL_1 or
	  WILL_FIRE_RL_masterX_0_start_op or
	  MUX_masterX_0_data_reg$write_1__VAL_2 or
	  WILL_FIRE_RL_masterX_0_write_op or
	  MUX_masterX_0_data_reg$write_1__VAL_3 or
	  WILL_FIRE_RL_masterX_0_read_op)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_masterX_0_idle_op:
	  masterX_0_data_reg$D_IN = MUX_masterX_0_data_reg$write_1__VAL_1;
      WILL_FIRE_RL_masterX_0_start_op:
	  masterX_0_data_reg$D_IN = MUX_masterX_0_data_reg$write_1__VAL_2;
      WILL_FIRE_RL_masterX_0_write_op:
	  masterX_0_data_reg$D_IN = MUX_masterX_0_data_reg$write_1__VAL_3;
      WILL_FIRE_RL_masterX_0_read_op:
	  masterX_0_data_reg$D_IN = 65'h10000000000000000;
      default: masterX_0_data_reg$D_IN =
		   65'h0AAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign masterX_0_data_reg$EN =
	     WILL_FIRE_RL_masterX_0_idle_op ||
	     WILL_FIRE_RL_masterX_0_start_op ||
	     WILL_FIRE_RL_masterX_0_write_op ||
	     WILL_FIRE_RL_masterX_0_read_op ;

  // register masterX_0_descriptor
  assign masterX_0_descriptor$D_IN =
	     MUX_masterX_0_lock_wire$wset_1__PSEL_1 ?
	       MUX_masterX_0_descriptor$write_1__VAL_1 :
	       MUX_masterX_0_descriptor$write_1__VAL_2 ;
  assign masterX_0_descriptor$EN =
	     WILL_FIRE_RL_masterX_0_read_op ||
	     WILL_FIRE_RL_masterX_0_write_op ||
	     WILL_FIRE_RL_masterX_0_start_op ;

  // register masterX_0_fifo_rx_rv
  assign masterX_0_fifo_rx_rv$D_IN = masterX_0_fifo_rx_rv$port2__read ;
  assign masterX_0_fifo_rx_rv$EN = 1'b1 ;

  // register masterX_0_fifo_tx_count
  assign masterX_0_fifo_tx_count$D_IN =
	     WILL_FIRE_RL_masterX_0_fifo_tx_do_incr ?
	       MUX_masterX_0_fifo_tx_count$write_1__VAL_1 :
	       MUX_masterX_0_fifo_tx_count$write_1__VAL_2 ;
  assign masterX_0_fifo_tx_count$EN =
	     WILL_FIRE_RL_masterX_0_fifo_tx_do_incr ||
	     WILL_FIRE_RL_masterX_0_fifo_tx_do_decr ;

  // register masterX_0_grant_reg
  assign masterX_0_grant_reg$D_IN = CAN_FIRE_RL_ahb_bus_0_send_grant ;
  assign masterX_0_grant_reg$EN = 1'd1 ;

  // register masterX_0_ifc_fifo_op_cntr_r
  assign masterX_0_ifc_fifo_op_cntr_r$D_IN =
	     WILL_FIRE_RL_masterX_0_ifc_fifo_op_decCtr ?
	       masterX_0_ifc_fifo_op_cntr_r_9_MINUS_1___d46 :
	       MUX_masterX_0_ifc_fifo_op_cntr_r$write_1__VAL_2 ;
  assign masterX_0_ifc_fifo_op_cntr_r$EN =
	     WILL_FIRE_RL_masterX_0_ifc_fifo_op_decCtr ||
	     WILL_FIRE_RL_masterX_0_ifc_fifo_op_incCtr ;

  // register masterX_0_ifc_fifo_op_q_0
  always@(MUX_masterX_0_ifc_fifo_op_q_0$write_1__SEL_1 or
	  MUX_masterX_0_ifc_fifo_op_q_0$write_1__VAL_1 or
	  MUX_masterX_0_ifc_fifo_op_q_0$write_1__SEL_2 or
	  masterX_0_ifc_fifo_op_x_wire$wget or
	  WILL_FIRE_RL_masterX_0_ifc_fifo_op_decCtr or
	  masterX_0_ifc_fifo_op_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_masterX_0_ifc_fifo_op_q_0$write_1__SEL_1:
	  masterX_0_ifc_fifo_op_q_0$D_IN =
	      MUX_masterX_0_ifc_fifo_op_q_0$write_1__VAL_1;
      MUX_masterX_0_ifc_fifo_op_q_0$write_1__SEL_2:
	  masterX_0_ifc_fifo_op_q_0$D_IN = masterX_0_ifc_fifo_op_x_wire$wget;
      WILL_FIRE_RL_masterX_0_ifc_fifo_op_decCtr:
	  masterX_0_ifc_fifo_op_q_0$D_IN = masterX_0_ifc_fifo_op_q_1;
      default: masterX_0_ifc_fifo_op_q_0$D_IN =
		   2'b10 /* unspecified value */ ;
    endcase
  end
  assign masterX_0_ifc_fifo_op_q_0$EN =
	     WILL_FIRE_RL_masterX_0_ifc_fifo_op_both && _dfoo3 ||
	     WILL_FIRE_RL_masterX_0_ifc_fifo_op_incCtr &&
	     masterX_0_ifc_fifo_op_cntr_r == 2'd0 ||
	     WILL_FIRE_RL_masterX_0_ifc_fifo_op_decCtr ;

  // register masterX_0_ifc_fifo_op_q_1
  always@(MUX_masterX_0_ifc_fifo_op_q_1$write_1__SEL_1 or
	  MUX_masterX_0_ifc_fifo_op_q_1$write_1__VAL_1 or
	  MUX_masterX_0_ifc_fifo_op_q_1$write_1__SEL_2 or
	  masterX_0_ifc_fifo_op_x_wire$wget or
	  WILL_FIRE_RL_masterX_0_ifc_fifo_op_decCtr or v__h163993)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_masterX_0_ifc_fifo_op_q_1$write_1__SEL_1:
	  masterX_0_ifc_fifo_op_q_1$D_IN =
	      MUX_masterX_0_ifc_fifo_op_q_1$write_1__VAL_1;
      MUX_masterX_0_ifc_fifo_op_q_1$write_1__SEL_2:
	  masterX_0_ifc_fifo_op_q_1$D_IN = masterX_0_ifc_fifo_op_x_wire$wget;
      WILL_FIRE_RL_masterX_0_ifc_fifo_op_decCtr:
	  masterX_0_ifc_fifo_op_q_1$D_IN = v__h163993;
      default: masterX_0_ifc_fifo_op_q_1$D_IN =
		   2'b10 /* unspecified value */ ;
    endcase
  end
  assign masterX_0_ifc_fifo_op_q_1$EN =
	     WILL_FIRE_RL_masterX_0_ifc_fifo_op_both && _dfoo1 ||
	     WILL_FIRE_RL_masterX_0_ifc_fifo_op_incCtr &&
	     masterX_0_ifc_fifo_op_cntr_r == 2'd1 ||
	     WILL_FIRE_RL_masterX_0_ifc_fifo_op_decCtr ;

  // register masterX_0_ifc_request_reg
  always@(MUX_masterX_0_lock_wire$wset_1__PSEL_1 or
	  MUX_masterX_0_ifc_request_reg$write_1__VAL_1 or
	  WILL_FIRE_RL_masterX_0_start_op or
	  MUX_masterX_0_ifc_request_reg$write_1__VAL_2 or
	  WILL_FIRE_RL_masterX_0_idle_op or
	  MUX_masterX_0_ifc_request_reg$write_1__VAL_3 or
	  WILL_FIRE_RL_masterX_0_stall_op or
	  MUX_masterX_0_ifc_request_reg$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_masterX_0_lock_wire$wset_1__PSEL_1:
	  masterX_0_ifc_request_reg$D_IN =
	      MUX_masterX_0_ifc_request_reg$write_1__VAL_1;
      WILL_FIRE_RL_masterX_0_start_op:
	  masterX_0_ifc_request_reg$D_IN =
	      MUX_masterX_0_ifc_request_reg$write_1__VAL_2;
      WILL_FIRE_RL_masterX_0_idle_op:
	  masterX_0_ifc_request_reg$D_IN =
	      MUX_masterX_0_ifc_request_reg$write_1__VAL_3;
      WILL_FIRE_RL_masterX_0_stall_op:
	  masterX_0_ifc_request_reg$D_IN =
	      MUX_masterX_0_ifc_request_reg$write_1__VAL_4;
      default: masterX_0_ifc_request_reg$D_IN =
		   141'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign masterX_0_ifc_request_reg$EN =
	     WILL_FIRE_RL_masterX_0_read_op ||
	     WILL_FIRE_RL_masterX_0_write_op ||
	     WILL_FIRE_RL_masterX_0_start_op ||
	     WILL_FIRE_RL_masterX_0_idle_op ||
	     WILL_FIRE_RL_masterX_0_stall_op ;

  // register masterX_0_req_reg
  always@(MUX_masterX_0_req_reg$write_1__SEL_1 or
	  MUX_masterX_0_req_reg$write_1__VAL_1 or
	  MUX_masterX_0_lock_wire$wset_1__PSEL_1 or
	  MUX_masterX_0_req_reg$write_1__VAL_2 or
	  WILL_FIRE_RL_masterX_0_start_op or
	  MUX_masterX_0_req_reg$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_masterX_0_req_reg$write_1__SEL_1:
	  masterX_0_req_reg$D_IN = MUX_masterX_0_req_reg$write_1__VAL_1;
      MUX_masterX_0_lock_wire$wset_1__PSEL_1:
	  masterX_0_req_reg$D_IN = MUX_masterX_0_req_reg$write_1__VAL_2;
      WILL_FIRE_RL_masterX_0_start_op:
	  masterX_0_req_reg$D_IN = MUX_masterX_0_req_reg$write_1__VAL_3;
      default: masterX_0_req_reg$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign masterX_0_req_reg$EN = masterX_0_response_wire$whas ;

  // register masterX_1_count
  assign masterX_1_count$D_IN =
	     MUX_masterX_1_lock_wire$wset_1__PSEL_1 ?
	       MUX_masterX_1_count$write_1__VAL_1 :
	       MUX_masterX_1_count$write_1__VAL_2 ;
  assign masterX_1_count$EN =
	     WILL_FIRE_RL_masterX_1_read_op ||
	     WILL_FIRE_RL_masterX_1_write_op ||
	     WILL_FIRE_RL_masterX_1_start_op ;

  // register masterX_1_data_reg
  always@(WILL_FIRE_RL_masterX_1_idle_op or
	  MUX_masterX_0_data_reg$write_1__VAL_1 or
	  WILL_FIRE_RL_masterX_1_start_op or
	  MUX_masterX_1_data_reg$write_1__VAL_2 or
	  WILL_FIRE_RL_masterX_1_write_op or
	  MUX_masterX_1_data_reg$write_1__VAL_3 or
	  WILL_FIRE_RL_masterX_1_read_op)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_masterX_1_idle_op:
	  masterX_1_data_reg$D_IN = MUX_masterX_0_data_reg$write_1__VAL_1;
      WILL_FIRE_RL_masterX_1_start_op:
	  masterX_1_data_reg$D_IN = MUX_masterX_1_data_reg$write_1__VAL_2;
      WILL_FIRE_RL_masterX_1_write_op:
	  masterX_1_data_reg$D_IN = MUX_masterX_1_data_reg$write_1__VAL_3;
      WILL_FIRE_RL_masterX_1_read_op:
	  masterX_1_data_reg$D_IN = 65'h10000000000000000;
      default: masterX_1_data_reg$D_IN =
		   65'h0AAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign masterX_1_data_reg$EN =
	     WILL_FIRE_RL_masterX_1_idle_op ||
	     WILL_FIRE_RL_masterX_1_start_op ||
	     WILL_FIRE_RL_masterX_1_write_op ||
	     WILL_FIRE_RL_masterX_1_read_op ;

  // register masterX_1_descriptor
  assign masterX_1_descriptor$D_IN =
	     MUX_masterX_1_lock_wire$wset_1__PSEL_1 ?
	       MUX_masterX_1_descriptor$write_1__VAL_1 :
	       MUX_masterX_1_descriptor$write_1__VAL_2 ;
  assign masterX_1_descriptor$EN =
	     WILL_FIRE_RL_masterX_1_read_op ||
	     WILL_FIRE_RL_masterX_1_write_op ||
	     WILL_FIRE_RL_masterX_1_start_op ;

  // register masterX_1_fifo_rx_rv
  assign masterX_1_fifo_rx_rv$D_IN = masterX_1_fifo_rx_rv$port2__read ;
  assign masterX_1_fifo_rx_rv$EN = 1'b1 ;

  // register masterX_1_fifo_tx_count
  assign masterX_1_fifo_tx_count$D_IN =
	     MUX_masterX_1_fifo_tx_count$write_1__VAL_1 ;
  assign masterX_1_fifo_tx_count$EN =
	     CAN_FIRE_RL_masterX_1_grab_valid_response ;

  // register masterX_1_grant_reg
  assign masterX_1_grant_reg$D_IN = CAN_FIRE_RL_ahb_bus_1_send_grant ;
  assign masterX_1_grant_reg$EN = 1'd1 ;

  // register masterX_1_ifc_fifo_op_cntr_r
  assign masterX_1_ifc_fifo_op_cntr_r$D_IN =
	     WILL_FIRE_RL_masterX_1_ifc_fifo_op_decCtr ?
	       masterX_1_ifc_fifo_op_cntr_r_047_MINUS_1___d1063 :
	       MUX_masterX_1_ifc_fifo_op_cntr_r$write_1__VAL_2 ;
  assign masterX_1_ifc_fifo_op_cntr_r$EN =
	     WILL_FIRE_RL_masterX_1_ifc_fifo_op_decCtr ||
	     WILL_FIRE_RL_masterX_1_ifc_fifo_op_incCtr ;

  // register masterX_1_ifc_fifo_op_q_0
  always@(MUX_masterX_1_ifc_fifo_op_q_0$write_1__SEL_1 or
	  masterX_1_ifc_fifo_op_x_wire$wget or
	  MUX_masterX_1_ifc_fifo_op_q_0$write_1__SEL_2 or
	  MUX_masterX_1_ifc_fifo_op_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_masterX_1_ifc_fifo_op_decCtr or
	  masterX_1_ifc_fifo_op_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_masterX_1_ifc_fifo_op_q_0$write_1__SEL_1:
	  masterX_1_ifc_fifo_op_q_0$D_IN = masterX_1_ifc_fifo_op_x_wire$wget;
      MUX_masterX_1_ifc_fifo_op_q_0$write_1__SEL_2:
	  masterX_1_ifc_fifo_op_q_0$D_IN =
	      MUX_masterX_1_ifc_fifo_op_q_0$write_1__VAL_2;
      WILL_FIRE_RL_masterX_1_ifc_fifo_op_decCtr:
	  masterX_1_ifc_fifo_op_q_0$D_IN = masterX_1_ifc_fifo_op_q_1;
      default: masterX_1_ifc_fifo_op_q_0$D_IN =
		   2'b10 /* unspecified value */ ;
    endcase
  end
  assign masterX_1_ifc_fifo_op_q_0$EN =
	     WILL_FIRE_RL_masterX_1_ifc_fifo_op_incCtr &&
	     masterX_1_ifc_fifo_op_cntr_r == 2'd0 ||
	     WILL_FIRE_RL_masterX_1_ifc_fifo_op_both && _dfoo7 ||
	     WILL_FIRE_RL_masterX_1_ifc_fifo_op_decCtr ;

  // register masterX_1_ifc_fifo_op_q_1
  always@(MUX_masterX_1_ifc_fifo_op_q_1$write_1__SEL_1 or
	  masterX_1_ifc_fifo_op_x_wire$wget or
	  MUX_masterX_1_ifc_fifo_op_q_1$write_1__SEL_2 or
	  MUX_masterX_1_ifc_fifo_op_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_masterX_1_ifc_fifo_op_decCtr or v__h163993)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_masterX_1_ifc_fifo_op_q_1$write_1__SEL_1:
	  masterX_1_ifc_fifo_op_q_1$D_IN = masterX_1_ifc_fifo_op_x_wire$wget;
      MUX_masterX_1_ifc_fifo_op_q_1$write_1__SEL_2:
	  masterX_1_ifc_fifo_op_q_1$D_IN =
	      MUX_masterX_1_ifc_fifo_op_q_1$write_1__VAL_2;
      WILL_FIRE_RL_masterX_1_ifc_fifo_op_decCtr:
	  masterX_1_ifc_fifo_op_q_1$D_IN = v__h163993;
      default: masterX_1_ifc_fifo_op_q_1$D_IN =
		   2'b10 /* unspecified value */ ;
    endcase
  end
  assign masterX_1_ifc_fifo_op_q_1$EN =
	     WILL_FIRE_RL_masterX_1_ifc_fifo_op_incCtr &&
	     masterX_1_ifc_fifo_op_cntr_r == 2'd1 ||
	     WILL_FIRE_RL_masterX_1_ifc_fifo_op_both && _dfoo5 ||
	     WILL_FIRE_RL_masterX_1_ifc_fifo_op_decCtr ;

  // register masterX_1_ifc_request_reg
  always@(MUX_masterX_1_lock_wire$wset_1__PSEL_1 or
	  MUX_masterX_1_ifc_request_reg$write_1__VAL_1 or
	  WILL_FIRE_RL_masterX_1_start_op or
	  MUX_masterX_1_ifc_request_reg$write_1__VAL_2 or
	  WILL_FIRE_RL_masterX_1_idle_op or
	  MUX_masterX_1_ifc_request_reg$write_1__VAL_3 or
	  WILL_FIRE_RL_masterX_1_stall_op or
	  MUX_masterX_1_ifc_request_reg$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_masterX_1_lock_wire$wset_1__PSEL_1:
	  masterX_1_ifc_request_reg$D_IN =
	      MUX_masterX_1_ifc_request_reg$write_1__VAL_1;
      WILL_FIRE_RL_masterX_1_start_op:
	  masterX_1_ifc_request_reg$D_IN =
	      MUX_masterX_1_ifc_request_reg$write_1__VAL_2;
      WILL_FIRE_RL_masterX_1_idle_op:
	  masterX_1_ifc_request_reg$D_IN =
	      MUX_masterX_1_ifc_request_reg$write_1__VAL_3;
      WILL_FIRE_RL_masterX_1_stall_op:
	  masterX_1_ifc_request_reg$D_IN =
	      MUX_masterX_1_ifc_request_reg$write_1__VAL_4;
      default: masterX_1_ifc_request_reg$D_IN =
		   141'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign masterX_1_ifc_request_reg$EN =
	     WILL_FIRE_RL_masterX_1_read_op ||
	     WILL_FIRE_RL_masterX_1_write_op ||
	     WILL_FIRE_RL_masterX_1_start_op ||
	     WILL_FIRE_RL_masterX_1_idle_op ||
	     WILL_FIRE_RL_masterX_1_stall_op ;

  // register masterX_1_req_reg
  always@(MUX_masterX_1_req_reg$write_1__SEL_1 or
	  MUX_masterX_1_req_reg$write_1__VAL_1 or
	  MUX_masterX_1_lock_wire$wset_1__PSEL_1 or
	  MUX_masterX_1_req_reg$write_1__VAL_2 or
	  WILL_FIRE_RL_masterX_1_start_op or
	  MUX_masterX_1_req_reg$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_masterX_1_req_reg$write_1__SEL_1:
	  masterX_1_req_reg$D_IN = MUX_masterX_1_req_reg$write_1__VAL_1;
      MUX_masterX_1_lock_wire$wset_1__PSEL_1:
	  masterX_1_req_reg$D_IN = MUX_masterX_1_req_reg$write_1__VAL_2;
      WILL_FIRE_RL_masterX_1_start_op:
	  masterX_1_req_reg$D_IN = MUX_masterX_1_req_reg$write_1__VAL_3;
      default: masterX_1_req_reg$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign masterX_1_req_reg$EN = masterX_1_response_wire$whas ;

  // register slave_mem_ctrl_reg
  assign slave_mem_ctrl_reg$D_IN =
	     MUX_slave_mem_ctrl_reg$write_1__SEL_1 ?
	       MUX_slave_mem_ctrl_reg$write_1__VAL_1 :
	       MUX_slave_mem_ctrl_reg$write_1__VAL_2 ;
  assign slave_mem_ctrl_reg$EN =
	     WILL_FIRE_RL_slave_mem_default_response ||
	     WILL_FIRE_RL_slave_mem_grab_response ||
	     WILL_FIRE_RL_slave_mem_grab_ctrl ;

  // register slave_mem_fifo_op_rv
  assign slave_mem_fifo_op_rv$D_IN = slave_mem_fifo_op_rv$port2__read ;
  assign slave_mem_fifo_op_rv$EN = 1'b1 ;

  // register slave_mem_fifo_rx_rv
  assign slave_mem_fifo_rx_rv$D_IN = slave_mem_fifo_rx_rv$port2__read ;
  assign slave_mem_fifo_rx_rv$EN = 1'b1 ;

  // register slave_mem_fifo_tx_rv
  assign slave_mem_fifo_tx_rv$D_IN = slave_mem_fifo_tx_rv$port2__read ;
  assign slave_mem_fifo_tx_rv$EN = 1'b1 ;

  // register slave_mem_first
  assign slave_mem_first$D_IN = 1'b0 ;
  assign slave_mem_first$EN = 1'd1 ;

  // register slave_mem_start
  assign slave_mem_start$D_IN = 1'b0 ;
  assign slave_mem_start$EN = 1'b0 ;

  // register slave_other_ctrl_reg
  assign slave_other_ctrl_reg$D_IN = MUX_slave_other_ctrl_reg$write_1__VAL_1 ;
  assign slave_other_ctrl_reg$EN = MUX_slave_other_ctrl_reg$write_1__SEL_1 ;

  // register slave_other_fifo_op_rv
  assign slave_other_fifo_op_rv$D_IN = slave_other_fifo_op_rv$port2__read ;
  assign slave_other_fifo_op_rv$EN = 1'b1 ;

  // register slave_other_fifo_rx_rv
  assign slave_other_fifo_rx_rv$D_IN = slave_other_fifo_rx_rv$port2__read ;
  assign slave_other_fifo_rx_rv$EN = 1'b1 ;

  // register slave_other_fifo_tx_rv
  assign slave_other_fifo_tx_rv$D_IN = slave_other_fifo_tx_rv$port1__read ;
  assign slave_other_fifo_tx_rv$EN = 1'b1 ;

  // register slave_other_first
  assign slave_other_first$D_IN = 1'b0 ;
  assign slave_other_first$EN = 1'd1 ;

  // register slave_other_start
  assign slave_other_start$D_IN = 1'b0 ;
  assign slave_other_start$EN = 1'b0 ;

  // submodule bram_mod
  assign bram_mod$flush_from_proc_flush = proc$flush ;
  assign bram_mod$intfc_rcv_rx_put = slave_mem_fifo_tx_rv$port1__read[172:0] ;
  assign bram_mod$EN_intfc_rcv_tx_get = CAN_FIRE_RL_mkConnectionGetPut_3 ;
  assign bram_mod$EN_intfc_rcv_rx_put = CAN_FIRE_RL_mkConnectionGetPut_2 ;
  assign bram_mod$EN_flush_from_proc = 1'd1 ;

  // submodule masterX_0_fifo_tx_fifof_ff
  assign masterX_0_fifo_tx_fifof_ff$D_IN = masterX_0_fifo_tx_fifof_enqw$wget ;
  assign masterX_0_fifo_tx_fifof_ff$ENQ =
	     CAN_FIRE_RL_masterX_0_fifo_tx_fifof_enqueue ;
  assign masterX_0_fifo_tx_fifof_ff$DEQ =
	     CAN_FIRE_RL_masterX_0_fifo_tx_fifof_dequeue ;
  assign masterX_0_fifo_tx_fifof_ff$CLR = 1'b0 ;

  // submodule masterX_0_fifo_tx_fifof_firstValid
  assign masterX_0_fifo_tx_fifof_firstValid$D_IN = 1'd1 ;
  assign masterX_0_fifo_tx_fifof_firstValid$EN =
	     CAN_FIRE_RL_mkConnectionGetPut_1 ;

  // submodule masterX_0_fifo_tx_levelsValidClr
  assign masterX_0_fifo_tx_levelsValidClr$D_IN = 1'b0 ;
  assign masterX_0_fifo_tx_levelsValidClr$EN = 1'b0 ;

  // submodule masterX_0_fifo_tx_levelsValidDeq
  assign masterX_0_fifo_tx_levelsValidDeq$D_IN = 1'd1 ;
  assign masterX_0_fifo_tx_levelsValidDeq$EN =
	     CAN_FIRE_RL_mkConnectionGetPut_1 ;

  // submodule masterX_0_fifo_tx_levelsValidEnq
  assign masterX_0_fifo_tx_levelsValidEnq$D_IN = 1'd1 ;
  assign masterX_0_fifo_tx_levelsValidEnq$EN =
	     CAN_FIRE_RL_masterX_0_grab_valid_response ;

  // submodule masterX_1_fifo_tx_fifof_ff
  assign masterX_1_fifo_tx_fifof_ff$D_IN = masterX_1_fifo_tx_fifof_enqw$wget ;
  assign masterX_1_fifo_tx_fifof_ff$ENQ =
	     CAN_FIRE_RL_masterX_1_grab_valid_response ;
  assign masterX_1_fifo_tx_fifof_ff$DEQ = 1'b0 ;
  assign masterX_1_fifo_tx_fifof_ff$CLR = 1'b0 ;

  // submodule masterX_1_fifo_tx_fifof_firstValid
  assign masterX_1_fifo_tx_fifof_firstValid$D_IN = 1'b0 ;
  assign masterX_1_fifo_tx_fifof_firstValid$EN = 1'b0 ;

  // submodule masterX_1_fifo_tx_levelsValidClr
  assign masterX_1_fifo_tx_levelsValidClr$D_IN = 1'b0 ;
  assign masterX_1_fifo_tx_levelsValidClr$EN = 1'b0 ;

  // submodule masterX_1_fifo_tx_levelsValidDeq
  assign masterX_1_fifo_tx_levelsValidDeq$D_IN = 1'b0 ;
  assign masterX_1_fifo_tx_levelsValidDeq$EN = 1'b0 ;

  // submodule masterX_1_fifo_tx_levelsValidEnq
  assign masterX_1_fifo_tx_levelsValidEnq$D_IN = 1'd1 ;
  assign masterX_1_fifo_tx_levelsValidEnq$EN =
	     CAN_FIRE_RL_masterX_1_grab_valid_response ;

  // submodule proc
  assign proc$intfc_rx_put =
	     masterX_0_fifo_tx_fifof_ff$EMPTY_N ?
	       masterX_0_fifo_tx_fifof_ff$D_OUT :
	       masterX_0_fifo_tx_fifof_enqw$wget ;
  assign proc$sin_in = sin_in ;
  assign proc$EN_intfc_tx_get = CAN_FIRE_RL_mkConnectionGetPut ;
  assign proc$EN_intfc_rx_put = CAN_FIRE_RL_mkConnectionGetPut_1 ;
  assign proc$EN_sin = EN_sin ;

  // remaining internal signals
  assign IF_SEL_ARR_masterX_0_ifc_request_reg_8_BITS_13_ETC___d2234 =
	     (SEL_ARR_masterX_0_ifc_request_reg_8_BITS_136_T_ETC___d2207 ==
	      3'd1) ?
	       ahb_bus_monitor_request_prev &&
	       SEL_ARR_NOT_masterX_0_req_wire_whas__188_210_O_ETC___d2221 &&
	       ahb_bus_monitor_started :
	       ahb_bus_monitor_started && ahb_bus_monitor_hready_prev &&
	       ahb_bus_monitor_remaining_reg == 5'd1 &&
	       ahb_bus_monitor_transfer_prev != 2'd0 ;
  assign IF_ahb_bus_s_map_data_0_382_BIT_2_383_THEN_SEL_ETC___d2386 =
	     ahb_bus_s_map_data_0[2] ?
	       SEL_ARR_ahb_bus_dummy_transfer_reg_176_EQ_0_17_ETC___d2385 :
	       ahb_bus_dummys_0_transfer_reg == 2'd0 ||
	       ahb_bus_dummys_0_transfer_reg == 2'd1 ||
	       !ahb_bus_dummys_0_select_reg ;
  assign IF_ahb_bus_s_map_data_0_382_BIT_2_383_THEN_SEL_ETC___d2454 =
	     ahb_bus_s_map_data_0[2] ?
	       CASE_ahb_bus_s_map_data_0_BITS_1_TO_0_0_0_1_IF_ETC__q11 :
	       2'd0 ;
  assign IF_ahb_bus_s_map_data_1_392_BIT_2_393_THEN_SEL_ETC___d2396 =
	     ahb_bus_s_map_data_1[2] ?
	       SEL_ARR_ahb_bus_dummy_transfer_reg_176_EQ_0_17_ETC___d2395 :
	       ahb_bus_dummys_1_transfer_reg == 2'd0 ||
	       ahb_bus_dummys_1_transfer_reg == 2'd1 ||
	       !ahb_bus_dummys_1_select_reg ;
  assign IF_ahb_bus_s_map_data_1_392_BIT_2_393_THEN_SEL_ETC___d2469 =
	     ahb_bus_s_map_data_1[2] ?
	       CASE_ahb_bus_s_map_data_1_BITS_1_TO_0_0_0_1_IF_ETC__q10 :
	       2'd0 ;
  assign IF_masterX_0_descriptor_31_BITS_26_TO_25_42_EQ_ETC___d932 =
	     (masterX_0_descriptor[26:25] == 2'd0 &&
	      masterX_0_descriptor[39:35] == 5'd1) ?
	       3'd0 :
	       ((masterX_0_descriptor[26:25] == 2'd0 &&
		 masterX_0_descriptor[39:35] == 5'd4) ?
		  3'd3 :
		  ((masterX_0_descriptor[26:25] == 2'd0 &&
		    masterX_0_descriptor[39:35] == 5'd8) ?
		     3'd5 :
		     ((masterX_0_descriptor[26:25] == 2'd0 &&
		       masterX_0_descriptor[39:35] == 5'd16) ?
			3'd7 :
			((masterX_0_descriptor[26:25] == 2'd1 &&
			  masterX_0_descriptor[39:35] == 5'd4) ?
			   3'd2 :
			   ((masterX_0_descriptor[26:25] == 2'd1 &&
			     masterX_0_descriptor[39:35] == 5'd8) ?
			      3'd4 :
			      ((masterX_0_descriptor[26:25] == 2'd1 &&
				masterX_0_descriptor[39:35] == 5'd16) ?
				 3'd6 :
				 CASE_masterX_0_descriptor_BITS_26_TO_25_0_1_1__ETC__q1)))))) ;
  assign IF_masterX_0_descriptor_31_BIT_172_32_THEN_IF__ETC___d975 =
	     { masterX_0_descriptor[172] ?
		 IF_masterX_0_descriptor_31_BITS_26_TO_25_42_EQ_ETC___d932 :
		 3'd0,
	       (masterX_0_descriptor[172] &&
		(masterX_0_descriptor[26:25] == 2'd0 &&
		 masterX_0_descriptor[39:35] == 5'd1 ||
		 (masterX_0_descriptor[26:25] != 2'd1 ||
		  masterX_0_descriptor[39:35] != 5'd4) &&
		 (masterX_0_descriptor[26:25] != 2'd1 ||
		  masterX_0_descriptor[39:35] != 5'd8) &&
		 (masterX_0_descriptor[26:25] != 2'd1 ||
		  masterX_0_descriptor[39:35] != 5'd16) &&
		 masterX_0_descriptor[26:25] != 2'd0) ||
		masterX_0_count == 5'd0) ?
		 2'd0 :
		 2'd1,
	       masterX_0_descriptor[172] ?
		 { masterX_0_descriptor[3:0],
		   masterX_0_descriptor[167:104] } :
		 68'd0 } ;
  assign IF_masterX_1_descriptor_547_BITS_26_TO_25_558__ETC___d1948 =
	     (masterX_1_descriptor[26:25] == 2'd0 &&
	      masterX_1_descriptor[39:35] == 5'd1) ?
	       3'd0 :
	       ((masterX_1_descriptor[26:25] == 2'd0 &&
		 masterX_1_descriptor[39:35] == 5'd4) ?
		  3'd3 :
		  ((masterX_1_descriptor[26:25] == 2'd0 &&
		    masterX_1_descriptor[39:35] == 5'd8) ?
		     3'd5 :
		     ((masterX_1_descriptor[26:25] == 2'd0 &&
		       masterX_1_descriptor[39:35] == 5'd16) ?
			3'd7 :
			((masterX_1_descriptor[26:25] == 2'd1 &&
			  masterX_1_descriptor[39:35] == 5'd4) ?
			   3'd2 :
			   ((masterX_1_descriptor[26:25] == 2'd1 &&
			     masterX_1_descriptor[39:35] == 5'd8) ?
			      3'd4 :
			      ((masterX_1_descriptor[26:25] == 2'd1 &&
				masterX_1_descriptor[39:35] == 5'd16) ?
				 3'd6 :
				 CASE_masterX_1_descriptor_BITS_26_TO_25_0_1_1__ETC__q2)))))) ;
  assign IF_masterX_1_descriptor_547_BIT_172_548_THEN_I_ETC___d1990 =
	     { masterX_1_descriptor[172] ?
		 IF_masterX_1_descriptor_547_BITS_26_TO_25_558__ETC___d1948 :
		 3'd0,
	       (masterX_1_descriptor[172] &&
		(masterX_1_descriptor[26:25] == 2'd0 &&
		 masterX_1_descriptor[39:35] == 5'd1 ||
		 (masterX_1_descriptor[26:25] != 2'd1 ||
		  masterX_1_descriptor[39:35] != 5'd4) &&
		 (masterX_1_descriptor[26:25] != 2'd1 ||
		  masterX_1_descriptor[39:35] != 5'd8) &&
		 (masterX_1_descriptor[26:25] != 2'd1 ||
		  masterX_1_descriptor[39:35] != 5'd16) &&
		 masterX_1_descriptor[26:25] != 2'd0) ||
		masterX_1_count == 5'd0) ?
		 2'd0 :
		 2'd1,
	       masterX_1_descriptor[172] ?
		 { masterX_1_descriptor[3:0],
		   masterX_1_descriptor[167:104] } :
		 68'd0 } ;
  assign IF_slave_mem_ifc_response_wire_whas__444_THEN__ETC___d2447 =
	     MUX_slave_mem_ctrl_reg$write_1__SEL_1 ?
	       slave_mem_ifc_response_wire$wget[67:66] :
	       2'd0 ;
  assign IF_slave_other_ifc_response_wire_whas__448_THE_ETC___d2451 =
	     MUX_slave_other_ctrl_reg$write_1__SEL_1 ?
	       slave_other_ifc_response_wire$wget[67:66] :
	       2'd0 ;
  assign NOT_masterX_0_count_3_EQ_0_4_5_AND_NOT_masterX_ETC___d535 =
	     masterX_0_count != 5'd0 && !CAN_FIRE_RL_masterX_0_stall &&
	     ahb_bus_arbiter_dgrant_vector_wire$wget[0] ;
  assign NOT_masterX_1_count_100_EQ_0_101_102_AND_NOT_m_ETC___d1551 =
	     masterX_1_count != 5'd0 && !CAN_FIRE_RL_masterX_1_stall &&
	     ahb_bus_arbiter_dgrant_vector_wire$wget[1] ;
  assign _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553 =
	     { 61'd0, masterX_0_descriptor[24:22] } + 64'd1 ;
  assign _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114 =
	     { 61'd0, masterX_0_fifo_rx_rv$port1__read[24:22] } + 64'd1 ;
  assign _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569 =
	     { 61'd0, masterX_1_descriptor[24:22] } + 64'd1 ;
  assign _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131 =
	     { 61'd0, masterX_1_fifo_rx_rv[24:22] } + 64'd1 ;
  assign _dand1masterX_0_lock_wire$EN_wset =
	     (WILL_FIRE_RL_masterX_0_read_op ||
	      WILL_FIRE_RL_masterX_0_write_op) &&
	     (masterX_0_descriptor[26:25] == 2'd0 &&
	      masterX_0_descriptor[39:35] == 5'd1 ||
	      (masterX_0_descriptor[26:25] != 2'd1 ||
	       masterX_0_descriptor[39:35] != 5'd4) &&
	      (masterX_0_descriptor[26:25] != 2'd1 ||
	       masterX_0_descriptor[39:35] != 5'd8) &&
	      (masterX_0_descriptor[26:25] != 2'd1 ||
	       masterX_0_descriptor[39:35] != 5'd16) &&
	      masterX_0_descriptor[26:25] != 2'd0) ;
  assign _dand1masterX_1_lock_wire$EN_wset =
	     (WILL_FIRE_RL_masterX_1_read_op ||
	      WILL_FIRE_RL_masterX_1_write_op) &&
	     (masterX_1_descriptor[26:25] == 2'd0 &&
	      masterX_1_descriptor[39:35] == 5'd1 ||
	      (masterX_1_descriptor[26:25] != 2'd1 ||
	       masterX_1_descriptor[39:35] != 5'd4) &&
	      (masterX_1_descriptor[26:25] != 2'd1 ||
	       masterX_1_descriptor[39:35] != 5'd8) &&
	      (masterX_1_descriptor[26:25] != 2'd1 ||
	       masterX_1_descriptor[39:35] != 5'd16) &&
	      masterX_1_descriptor[26:25] != 2'd0) ;
  assign _dfoo1 =
	     masterX_0_ifc_fifo_op_cntr_r != 2'd2 ||
	     masterX_0_ifc_fifo_op_cntr_r_9_MINUS_1___d46 == 2'd1 ;
  assign _dfoo3 =
	     masterX_0_ifc_fifo_op_cntr_r != 2'd1 ||
	     masterX_0_ifc_fifo_op_cntr_r_9_MINUS_1___d46 == 2'd0 ;
  assign _dfoo5 =
	     masterX_1_ifc_fifo_op_cntr_r != 2'd2 ||
	     masterX_1_ifc_fifo_op_cntr_r_047_MINUS_1___d1063 == 2'd1 ;
  assign _dfoo7 =
	     masterX_1_ifc_fifo_op_cntr_r != 2'd1 ||
	     masterX_1_ifc_fifo_op_cntr_r_047_MINUS_1___d1063 == 2'd0 ;
  assign addr___1__h106012 = x__h106024 | y__h106025 ;
  assign addr___1__h28316 = x__h28328 | y__h28329 ;
  assign addr___1__h3958 = x__h3970 | y__h3971 ;
  assign addr___1__h81677 = x__h81689 | y__h81690 ;
  assign addr__h105941 = masterX_1_descriptor[167:104] + x__h106032 ;
  assign addr__h28245 = masterX_0_descriptor[167:104] + x__h28336 ;
  assign addr__h3879 = masterX_0_fifo_rx_rv$port1__read[167:104] + x__h3979 ;
  assign addr__h81603 = masterX_1_fifo_rx_rv[167:104] + x__h81698 ;
  assign ahb_bus_arbiter_priority_vector_290_BIT_0_294__ETC___d2302 =
	     (ahb_bus_arbiter_priority_vector[0] ||
	      !CAN_FIRE_RL_ahb_bus_1_send_request &&
	      ahb_bus_arbiter_priority_vector[1]) &&
	     CAN_FIRE_RL_ahb_bus_0_send_request ;
  assign ahb_bus_arbiter_priority_vector_290_BIT_1_291__ETC___d2298 =
	     (ahb_bus_arbiter_priority_vector[1] ||
	      !CAN_FIRE_RL_ahb_bus_0_send_request &&
	      ahb_bus_arbiter_priority_vector[0]) &&
	     CAN_FIRE_RL_ahb_bus_1_send_request ;
  assign data__h157974 =
	     (SEL_ARR_masterX_0_ifc_request_reg_8_BITS_133_T_ETC___d2203 ==
	      2'd0) ?
	       data__h160799 :
	       x_fabric_bus_hWDATA__h169941 ;
  assign log_length__h106009 =
	     (masterX_1_descriptor[35] || masterX_1_descriptor[36] ||
	      masterX_1_descriptor[37] ||
	      masterX_1_descriptor[38] ||
	      masterX_1_descriptor[39]) ?
	       { 58'd0, value__h127905 } :
	       64'd64 ;
  assign log_length__h28313 =
	     (masterX_0_descriptor[35] || masterX_0_descriptor[36] ||
	      masterX_0_descriptor[37] ||
	      masterX_0_descriptor[38] ||
	      masterX_0_descriptor[39]) ?
	       { 58'd0, value__h50209 } :
	       64'd64 ;
  assign log_length__h3955 =
	     (masterX_0_fifo_rx_rv$port1__read[35] ||
	      masterX_0_fifo_rx_rv$port1__read[36] ||
	      masterX_0_fifo_rx_rv$port1__read[37] ||
	      masterX_0_fifo_rx_rv$port1__read[38] ||
	      masterX_0_fifo_rx_rv$port1__read[39]) ?
	       { 58'd0, value__h25854 } :
	       64'd64 ;
  assign log_length__h81674 =
	     (masterX_1_fifo_rx_rv[35] || masterX_1_fifo_rx_rv[36] ||
	      masterX_1_fifo_rx_rv[37] ||
	      masterX_1_fifo_rx_rv[38] ||
	      masterX_1_fifo_rx_rv[39]) ?
	       { 58'd0, value__h103573 } :
	       64'd64 ;
  assign log_size__h106008 =
	     (_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[0] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[1] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[2] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[3] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[4] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[5] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[6] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[7] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[8] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[9] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[10] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[11] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[12] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[13] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[14] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[15] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[16] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[17] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[18] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[19] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[20] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[21] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[22] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[23] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[24] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[25] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[26] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[27] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[28] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[29] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[30] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[31] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[32] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[33] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[34] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[35] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[36] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[37] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[38] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[39] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[40] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[41] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[42] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[43] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[44] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[45] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[46] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[47] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[48] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[49] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[50] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[51] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[52] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[53] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[54] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[55] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[56] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[57] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[58] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[59] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[60] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[61] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[62] ||
	      _0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[63]) ?
	       { 58'd0, value__h116493 } :
	       64'd64 ;
  assign log_size__h28312 =
	     (_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[0] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[1] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[2] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[3] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[4] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[5] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[6] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[7] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[8] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[9] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[10] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[11] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[12] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[13] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[14] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[15] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[16] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[17] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[18] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[19] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[20] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[21] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[22] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[23] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[24] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[25] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[26] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[27] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[28] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[29] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[30] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[31] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[32] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[33] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[34] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[35] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[36] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[37] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[38] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[39] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[40] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[41] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[42] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[43] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[44] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[45] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[46] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[47] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[48] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[49] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[50] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[51] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[52] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[53] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[54] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[55] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[56] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[57] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[58] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[59] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[60] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[61] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[62] ||
	      _0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[63]) ?
	       { 58'd0, value__h38797 } :
	       64'd64 ;
  assign log_size__h3954 =
	     (_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[0] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[1] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[2] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[3] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[4] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[5] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[6] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[7] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[8] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[9] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[10] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[11] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[12] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[13] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[14] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[15] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[16] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[17] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[18] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[19] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[20] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[21] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[22] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[23] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[24] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[25] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[26] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[27] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[28] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[29] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[30] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[31] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[32] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[33] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[34] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[35] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[36] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[37] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[38] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[39] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[40] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[41] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[42] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[43] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[44] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[45] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[46] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[47] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[48] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[49] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[50] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[51] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[52] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[53] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[54] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[55] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[56] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[57] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[58] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[59] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[60] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[61] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[62] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[63]) ?
	       { 58'd0, value__h14441 } :
	       64'd64 ;
  assign log_size__h81673 =
	     (_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[0] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[1] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[2] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[3] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[4] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[5] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[6] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[7] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[8] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[9] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[10] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[11] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[12] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[13] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[14] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[15] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[16] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[17] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[18] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[19] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[20] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[21] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[22] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[23] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[24] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[25] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[26] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[27] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[28] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[29] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[30] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[31] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[32] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[33] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[34] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[35] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[36] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[37] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[38] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[39] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[40] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[41] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[42] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[43] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[44] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[45] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[46] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[47] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[48] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[49] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[50] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[51] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[52] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[53] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[54] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[55] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[56] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[57] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[58] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[59] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[60] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[61] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[62] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[63]) ?
	       { 58'd0, value__h92160 } :
	       64'd64 ;
  assign m_num_data__h161927 =
	     ahb_bus_hmaster_data[1] && ahb_bus_hmaster_data[0] ;
  assign mask__h106011 = (64'd1 << total__h106010) - 64'd1 ;
  assign mask__h28315 = (64'd1 << total__h28314) - 64'd1 ;
  assign mask__h3957 = (64'd1 << total__h3956) - 64'd1 ;
  assign mask__h81676 = (64'd1 << total__h81675) - 64'd1 ;
  assign masterX_0_descriptor_31_BIT_172_32_AND_NOT_mas_ETC___d976 =
	     { masterX_0_descriptor[172] &&
	       masterX_0_descriptor[171:170] != 2'd0,
	       masterX_0_descriptor[172] ?
		 IF_masterX_0_descriptor_31_BITS_24_TO_22_46_EQ_ETC___d909 :
		 3'd0,
	       IF_masterX_0_descriptor_31_BIT_172_32_THEN_IF__ETC___d975 } ;
  assign masterX_0_ifc_fifo_op_cntr_r_9_MINUS_1___d46 =
	     masterX_0_ifc_fifo_op_cntr_r - 2'd1 ;
  assign masterX_1_descriptor_547_BIT_172_548_AND_NOT_m_ETC___d1991 =
	     { masterX_1_descriptor[172] &&
	       masterX_1_descriptor[171:170] != 2'd0,
	       masterX_1_descriptor[172] ?
		 IF_masterX_1_descriptor_547_BITS_24_TO_22_562__ETC___d1925 :
		 3'd0,
	       IF_masterX_1_descriptor_547_BIT_172_548_THEN_I_ETC___d1990 } ;
  assign masterX_1_ifc_fifo_op_cntr_r_047_MINUS_1___d1063 =
	     masterX_1_ifc_fifo_op_cntr_r - 2'd1 ;
  assign new_value_data__h3435 =
	     (!ahb_bus_hmaster_addr[1] || !ahb_bus_hmaster_addr[0]) ?
	       rdata__h171386 :
	       ((ahb_bus_hmaster_addr[1] && ahb_bus_hmaster_addr[0]) ?
		  rdata__h171386 :
		  rdata__h171807) ;
  assign next_addr__h105944 =
	     (masterX_1_descriptor[26:25] == 2'd1) ?
	       addr___1__h106012 :
	       addr__h105941 ;
  assign next_addr__h28248 =
	     (masterX_0_descriptor[26:25] == 2'd1) ?
	       addr___1__h28316 :
	       addr__h28245 ;
  assign next_addr__h3882 =
	     (masterX_0_fifo_rx_rv$port1__read[26:25] == 2'd1) ?
	       addr___1__h3958 :
	       addr__h3879 ;
  assign next_addr__h81606 =
	     (masterX_1_fifo_rx_rv[26:25] == 2'd1) ?
	       addr___1__h81677 :
	       addr__h81603 ;
  assign rdata__h171386 =
	     ahb_bus_s_map_data_0[2] ?
	       CASE_ahb_bus_s_map_data_0_BITS_1_TO_0_0_0x567__ETC__q8 :
	       64'h0000000000000567 ;
  assign rdata__h171807 =
	     ahb_bus_s_map_data_1[2] ?
	       CASE_ahb_bus_s_map_data_1_BITS_1_TO_0_0_0x567__ETC__q9 :
	       64'h0000000000000567 ;
  assign remaining__h162904 =
	     (SEL_ARR_masterX_0_ifc_request_reg_8_BITS_133_T_ETC___d2203 ==
	      2'd0) ?
	       5'd0 :
	       CASE_SEL_ARR_masterX_0_ifc_request_reg_8_BITS__ETC__q3 - 5'd1 ;
  assign remaining__h162978 = ahb_bus_monitor_remaining_reg - 5'd1 ;
  assign total__h106010 = log_size__h106008 + log_length__h106009 ;
  assign total__h28314 = log_size__h28312 + log_length__h28313 ;
  assign total__h3956 = log_size__h3954 + log_length__h3955 ;
  assign total__h81675 = log_size__h81673 + log_length__h81674 ;
  assign v__h163993 = { 1'd0, 1'b0 /* unspecified value */  } ;
  assign value__h103573 =
	     (!masterX_1_fifo_rx_rv[35] && !masterX_1_fifo_rx_rv[36] &&
	      !masterX_1_fifo_rx_rv[37] &&
	      !masterX_1_fifo_rx_rv[38]) ?
	       6'd4 :
	       ((!masterX_1_fifo_rx_rv[35] && !masterX_1_fifo_rx_rv[36]) ?
		  (masterX_1_fifo_rx_rv[37] ? 6'd2 : 6'd3) :
		  (masterX_1_fifo_rx_rv[35] ? 6'd0 : 6'd1)) ;
  assign value__h106033 =
	     (masterX_1_descriptor[26:25] == 2'd2) ?
	       4'd0 :
	       { 1'd0, masterX_1_descriptor[24:22] } + 4'd1 ;
  assign value__h116493 =
	     (!_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[0] &&
	      !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[1] &&
	      !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[2] &&
	      !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[3] &&
	      !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[4] &&
	      !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[5] &&
	      !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[6] &&
	      !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[7] &&
	      !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[8] &&
	      !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[9] &&
	      !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[10] &&
	      !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[11] &&
	      !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[12] &&
	      !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[13] &&
	      !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[14] &&
	      !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[15] &&
	      !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[16] &&
	      !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[17] &&
	      !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[18] &&
	      !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[19] &&
	      !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[20] &&
	      !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[21] &&
	      !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[22] &&
	      !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[23] &&
	      !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[24] &&
	      !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[25] &&
	      !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[26] &&
	      !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[27] &&
	      !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[28] &&
	      !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[29] &&
	      !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[30] &&
	      !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[31]) ?
	       ((!_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[32] &&
		 !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[33] &&
		 !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[34] &&
		 !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[35] &&
		 !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[36] &&
		 !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[37] &&
		 !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[38] &&
		 !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[39] &&
		 !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[40] &&
		 !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[41] &&
		 !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[42] &&
		 !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[43] &&
		 !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[44] &&
		 !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[45] &&
		 !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[46] &&
		 !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[47]) ?
		  ((!_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[48] &&
		    !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[49] &&
		    !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[50] &&
		    !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[51] &&
		    !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[52] &&
		    !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[53] &&
		    !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[54] &&
		    !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[55]) ?
		     ((!_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[56] &&
		       !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[57] &&
		       !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[58] &&
		       !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[59]) ?
			((!_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[60] &&
			  !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[61]) ?
			   (_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[62] ?
			      6'd62 :
			      6'd63) :
			   (_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[60] ?
			      6'd60 :
			      6'd61)) :
			((!_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[56] &&
			  !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[57]) ?
			   (_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[58] ?
			      6'd58 :
			      6'd59) :
			   (_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[56] ?
			      6'd56 :
			      6'd57))) :
		     ((!_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[48] &&
		       !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[49] &&
		       !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[50] &&
		       !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[51]) ?
			((!_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[52] &&
			  !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[53]) ?
			   (_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[54] ?
			      6'd54 :
			      6'd55) :
			   (_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[52] ?
			      6'd52 :
			      6'd53)) :
			((!_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[48] &&
			  !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[49]) ?
			   (_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[50] ?
			      6'd50 :
			      6'd51) :
			   (_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[48] ?
			      6'd48 :
			      6'd49)))) :
		  ((!_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[32] &&
		    !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[33] &&
		    !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[34] &&
		    !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[35] &&
		    !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[36] &&
		    !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[37] &&
		    !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[38] &&
		    !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[39]) ?
		     ((!_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[40] &&
		       !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[41] &&
		       !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[42] &&
		       !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[43]) ?
			((!_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[44] &&
			  !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[45]) ?
			   (_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[46] ?
			      6'd46 :
			      6'd47) :
			   (_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[44] ?
			      6'd44 :
			      6'd45)) :
			((!_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[40] &&
			  !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[41]) ?
			   (_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[42] ?
			      6'd42 :
			      6'd43) :
			   (_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[40] ?
			      6'd40 :
			      6'd41))) :
		     ((!_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[32] &&
		       !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[33] &&
		       !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[34] &&
		       !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[35]) ?
			((!_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[36] &&
			  !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[37]) ?
			   (_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[38] ?
			      6'd38 :
			      6'd39) :
			   (_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[36] ?
			      6'd36 :
			      6'd37)) :
			((!_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[32] &&
			  !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[33]) ?
			   (_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[34] ?
			      6'd34 :
			      6'd35) :
			   (_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[32] ?
			      6'd32 :
			      6'd33))))) :
	       ((!_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[0] &&
		 !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[1] &&
		 !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[2] &&
		 !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[3] &&
		 !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[4] &&
		 !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[5] &&
		 !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[6] &&
		 !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[7] &&
		 !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[8] &&
		 !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[9] &&
		 !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[10] &&
		 !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[11] &&
		 !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[12] &&
		 !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[13] &&
		 !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[14] &&
		 !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[15]) ?
		  ((!_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[16] &&
		    !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[17] &&
		    !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[18] &&
		    !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[19] &&
		    !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[20] &&
		    !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[21] &&
		    !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[22] &&
		    !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[23]) ?
		     ((!_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[24] &&
		       !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[25] &&
		       !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[26] &&
		       !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[27]) ?
			((!_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[28] &&
			  !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[29]) ?
			   (_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[30] ?
			      6'd30 :
			      6'd31) :
			   (_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[28] ?
			      6'd28 :
			      6'd29)) :
			((!_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[24] &&
			  !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[25]) ?
			   (_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[26] ?
			      6'd26 :
			      6'd27) :
			   (_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[24] ?
			      6'd24 :
			      6'd25))) :
		     ((!_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[16] &&
		       !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[17] &&
		       !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[18] &&
		       !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[19]) ?
			((!_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[20] &&
			  !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[21]) ?
			   (_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[22] ?
			      6'd22 :
			      6'd23) :
			   (_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[20] ?
			      6'd20 :
			      6'd21)) :
			((!_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[16] &&
			  !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[17]) ?
			   (_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[18] ?
			      6'd18 :
			      6'd19) :
			   (_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[16] ?
			      6'd16 :
			      6'd17)))) :
		  ((!_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[0] &&
		    !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[1] &&
		    !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[2] &&
		    !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[3] &&
		    !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[4] &&
		    !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[5] &&
		    !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[6] &&
		    !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[7]) ?
		     ((!_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[8] &&
		       !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[9] &&
		       !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[10] &&
		       !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[11]) ?
			((!_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[12] &&
			  !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[13]) ?
			   (_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[14] ?
			      6'd14 :
			      6'd15) :
			   (_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[12] ?
			      6'd12 :
			      6'd13)) :
			((!_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[8] &&
			  !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[9]) ?
			   (_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[10] ?
			      6'd10 :
			      6'd11) :
			   (_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[8] ?
			      6'd8 :
			      6'd9))) :
		     ((!_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[0] &&
		       !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[1] &&
		       !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[2] &&
		       !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[3]) ?
			((!_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[4] &&
			  !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[5]) ?
			   (_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[6] ?
			      6'd6 :
			      6'd7) :
			   (_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[4] ?
			      6'd4 :
			      6'd5)) :
			((!_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[0] &&
			  !_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[1]) ?
			   (_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[2] ?
			      6'd2 :
			      6'd3) :
			   (_0_CONCAT_masterX_1_descriptor_547_BITS_24_TO_2_ETC___d1569[0] ?
			      6'd0 :
			      6'd1))))) ;
  assign value__h127905 =
	     (!masterX_1_descriptor[35] && !masterX_1_descriptor[36] &&
	      !masterX_1_descriptor[37] &&
	      !masterX_1_descriptor[38]) ?
	       6'd4 :
	       ((!masterX_1_descriptor[35] && !masterX_1_descriptor[36]) ?
		  (masterX_1_descriptor[37] ? 6'd2 : 6'd3) :
		  (masterX_1_descriptor[35] ? 6'd0 : 6'd1)) ;
  assign value__h14441 =
	     (!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[0] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[1] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[2] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[3] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[4] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[5] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[6] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[7] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[8] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[9] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[10] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[11] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[12] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[13] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[14] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[15] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[16] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[17] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[18] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[19] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[20] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[21] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[22] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[23] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[24] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[25] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[26] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[27] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[28] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[29] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[30] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[31]) ?
	       ((!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[32] &&
		 !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[33] &&
		 !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[34] &&
		 !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[35] &&
		 !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[36] &&
		 !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[37] &&
		 !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[38] &&
		 !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[39] &&
		 !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[40] &&
		 !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[41] &&
		 !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[42] &&
		 !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[43] &&
		 !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[44] &&
		 !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[45] &&
		 !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[46] &&
		 !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[47]) ?
		  ((!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[48] &&
		    !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[49] &&
		    !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[50] &&
		    !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[51] &&
		    !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[52] &&
		    !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[53] &&
		    !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[54] &&
		    !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[55]) ?
		     ((!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[56] &&
		       !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[57] &&
		       !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[58] &&
		       !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[59]) ?
			((!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[60] &&
			  !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[61]) ?
			   (_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[62] ?
			      6'd62 :
			      6'd63) :
			   (_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[60] ?
			      6'd60 :
			      6'd61)) :
			((!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[56] &&
			  !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[57]) ?
			   (_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[58] ?
			      6'd58 :
			      6'd59) :
			   (_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[56] ?
			      6'd56 :
			      6'd57))) :
		     ((!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[48] &&
		       !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[49] &&
		       !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[50] &&
		       !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[51]) ?
			((!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[52] &&
			  !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[53]) ?
			   (_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[54] ?
			      6'd54 :
			      6'd55) :
			   (_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[52] ?
			      6'd52 :
			      6'd53)) :
			((!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[48] &&
			  !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[49]) ?
			   (_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[50] ?
			      6'd50 :
			      6'd51) :
			   (_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[48] ?
			      6'd48 :
			      6'd49)))) :
		  ((!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[32] &&
		    !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[33] &&
		    !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[34] &&
		    !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[35] &&
		    !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[36] &&
		    !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[37] &&
		    !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[38] &&
		    !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[39]) ?
		     ((!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[40] &&
		       !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[41] &&
		       !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[42] &&
		       !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[43]) ?
			((!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[44] &&
			  !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[45]) ?
			   (_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[46] ?
			      6'd46 :
			      6'd47) :
			   (_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[44] ?
			      6'd44 :
			      6'd45)) :
			((!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[40] &&
			  !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[41]) ?
			   (_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[42] ?
			      6'd42 :
			      6'd43) :
			   (_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[40] ?
			      6'd40 :
			      6'd41))) :
		     ((!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[32] &&
		       !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[33] &&
		       !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[34] &&
		       !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[35]) ?
			((!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[36] &&
			  !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[37]) ?
			   (_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[38] ?
			      6'd38 :
			      6'd39) :
			   (_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[36] ?
			      6'd36 :
			      6'd37)) :
			((!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[32] &&
			  !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[33]) ?
			   (_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[34] ?
			      6'd34 :
			      6'd35) :
			   (_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[32] ?
			      6'd32 :
			      6'd33))))) :
	       ((!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[0] &&
		 !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[1] &&
		 !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[2] &&
		 !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[3] &&
		 !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[4] &&
		 !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[5] &&
		 !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[6] &&
		 !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[7] &&
		 !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[8] &&
		 !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[9] &&
		 !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[10] &&
		 !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[11] &&
		 !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[12] &&
		 !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[13] &&
		 !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[14] &&
		 !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[15]) ?
		  ((!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[16] &&
		    !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[17] &&
		    !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[18] &&
		    !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[19] &&
		    !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[20] &&
		    !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[21] &&
		    !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[22] &&
		    !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[23]) ?
		     ((!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[24] &&
		       !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[25] &&
		       !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[26] &&
		       !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[27]) ?
			((!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[28] &&
			  !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[29]) ?
			   (_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[30] ?
			      6'd30 :
			      6'd31) :
			   (_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[28] ?
			      6'd28 :
			      6'd29)) :
			((!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[24] &&
			  !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[25]) ?
			   (_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[26] ?
			      6'd26 :
			      6'd27) :
			   (_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[24] ?
			      6'd24 :
			      6'd25))) :
		     ((!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[16] &&
		       !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[17] &&
		       !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[18] &&
		       !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[19]) ?
			((!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[20] &&
			  !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[21]) ?
			   (_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[22] ?
			      6'd22 :
			      6'd23) :
			   (_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[20] ?
			      6'd20 :
			      6'd21)) :
			((!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[16] &&
			  !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[17]) ?
			   (_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[18] ?
			      6'd18 :
			      6'd19) :
			   (_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[16] ?
			      6'd16 :
			      6'd17)))) :
		  ((!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[0] &&
		    !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[1] &&
		    !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[2] &&
		    !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[3] &&
		    !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[4] &&
		    !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[5] &&
		    !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[6] &&
		    !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[7]) ?
		     ((!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[8] &&
		       !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[9] &&
		       !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[10] &&
		       !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[11]) ?
			((!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[12] &&
			  !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[13]) ?
			   (_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[14] ?
			      6'd14 :
			      6'd15) :
			   (_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[12] ?
			      6'd12 :
			      6'd13)) :
			((!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[8] &&
			  !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[9]) ?
			   (_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[10] ?
			      6'd10 :
			      6'd11) :
			   (_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[8] ?
			      6'd8 :
			      6'd9))) :
		     ((!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[0] &&
		       !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[1] &&
		       !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[2] &&
		       !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[3]) ?
			((!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[4] &&
			  !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[5]) ?
			   (_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[6] ?
			      6'd6 :
			      6'd7) :
			   (_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[4] ?
			      6'd4 :
			      6'd5)) :
			((!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[0] &&
			  !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[1]) ?
			   (_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[2] ?
			      6'd2 :
			      6'd3) :
			   (_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__8_B_ETC___d114[0] ?
			      6'd0 :
			      6'd1))))) ;
  assign value__h25854 =
	     (!masterX_0_fifo_rx_rv$port1__read[35] &&
	      !masterX_0_fifo_rx_rv$port1__read[36] &&
	      !masterX_0_fifo_rx_rv$port1__read[37] &&
	      !masterX_0_fifo_rx_rv$port1__read[38]) ?
	       6'd4 :
	       ((!masterX_0_fifo_rx_rv$port1__read[35] &&
		 !masterX_0_fifo_rx_rv$port1__read[36]) ?
		  (masterX_0_fifo_rx_rv$port1__read[37] ? 6'd2 : 6'd3) :
		  (masterX_0_fifo_rx_rv$port1__read[35] ? 6'd0 : 6'd1)) ;
  assign value__h28337 =
	     (masterX_0_descriptor[26:25] == 2'd2) ?
	       4'd0 :
	       { 1'd0, masterX_0_descriptor[24:22] } + 4'd1 ;
  assign value__h38797 =
	     (!_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[0] &&
	      !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[1] &&
	      !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[2] &&
	      !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[3] &&
	      !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[4] &&
	      !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[5] &&
	      !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[6] &&
	      !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[7] &&
	      !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[8] &&
	      !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[9] &&
	      !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[10] &&
	      !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[11] &&
	      !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[12] &&
	      !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[13] &&
	      !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[14] &&
	      !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[15] &&
	      !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[16] &&
	      !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[17] &&
	      !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[18] &&
	      !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[19] &&
	      !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[20] &&
	      !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[21] &&
	      !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[22] &&
	      !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[23] &&
	      !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[24] &&
	      !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[25] &&
	      !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[26] &&
	      !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[27] &&
	      !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[28] &&
	      !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[29] &&
	      !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[30] &&
	      !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[31]) ?
	       ((!_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[32] &&
		 !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[33] &&
		 !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[34] &&
		 !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[35] &&
		 !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[36] &&
		 !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[37] &&
		 !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[38] &&
		 !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[39] &&
		 !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[40] &&
		 !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[41] &&
		 !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[42] &&
		 !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[43] &&
		 !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[44] &&
		 !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[45] &&
		 !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[46] &&
		 !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[47]) ?
		  ((!_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[48] &&
		    !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[49] &&
		    !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[50] &&
		    !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[51] &&
		    !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[52] &&
		    !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[53] &&
		    !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[54] &&
		    !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[55]) ?
		     ((!_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[56] &&
		       !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[57] &&
		       !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[58] &&
		       !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[59]) ?
			((!_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[60] &&
			  !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[61]) ?
			   (_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[62] ?
			      6'd62 :
			      6'd63) :
			   (_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[60] ?
			      6'd60 :
			      6'd61)) :
			((!_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[56] &&
			  !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[57]) ?
			   (_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[58] ?
			      6'd58 :
			      6'd59) :
			   (_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[56] ?
			      6'd56 :
			      6'd57))) :
		     ((!_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[48] &&
		       !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[49] &&
		       !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[50] &&
		       !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[51]) ?
			((!_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[52] &&
			  !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[53]) ?
			   (_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[54] ?
			      6'd54 :
			      6'd55) :
			   (_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[52] ?
			      6'd52 :
			      6'd53)) :
			((!_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[48] &&
			  !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[49]) ?
			   (_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[50] ?
			      6'd50 :
			      6'd51) :
			   (_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[48] ?
			      6'd48 :
			      6'd49)))) :
		  ((!_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[32] &&
		    !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[33] &&
		    !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[34] &&
		    !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[35] &&
		    !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[36] &&
		    !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[37] &&
		    !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[38] &&
		    !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[39]) ?
		     ((!_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[40] &&
		       !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[41] &&
		       !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[42] &&
		       !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[43]) ?
			((!_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[44] &&
			  !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[45]) ?
			   (_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[46] ?
			      6'd46 :
			      6'd47) :
			   (_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[44] ?
			      6'd44 :
			      6'd45)) :
			((!_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[40] &&
			  !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[41]) ?
			   (_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[42] ?
			      6'd42 :
			      6'd43) :
			   (_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[40] ?
			      6'd40 :
			      6'd41))) :
		     ((!_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[32] &&
		       !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[33] &&
		       !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[34] &&
		       !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[35]) ?
			((!_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[36] &&
			  !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[37]) ?
			   (_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[38] ?
			      6'd38 :
			      6'd39) :
			   (_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[36] ?
			      6'd36 :
			      6'd37)) :
			((!_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[32] &&
			  !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[33]) ?
			   (_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[34] ?
			      6'd34 :
			      6'd35) :
			   (_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[32] ?
			      6'd32 :
			      6'd33))))) :
	       ((!_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[0] &&
		 !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[1] &&
		 !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[2] &&
		 !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[3] &&
		 !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[4] &&
		 !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[5] &&
		 !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[6] &&
		 !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[7] &&
		 !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[8] &&
		 !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[9] &&
		 !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[10] &&
		 !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[11] &&
		 !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[12] &&
		 !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[13] &&
		 !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[14] &&
		 !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[15]) ?
		  ((!_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[16] &&
		    !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[17] &&
		    !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[18] &&
		    !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[19] &&
		    !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[20] &&
		    !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[21] &&
		    !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[22] &&
		    !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[23]) ?
		     ((!_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[24] &&
		       !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[25] &&
		       !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[26] &&
		       !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[27]) ?
			((!_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[28] &&
			  !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[29]) ?
			   (_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[30] ?
			      6'd30 :
			      6'd31) :
			   (_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[28] ?
			      6'd28 :
			      6'd29)) :
			((!_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[24] &&
			  !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[25]) ?
			   (_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[26] ?
			      6'd26 :
			      6'd27) :
			   (_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[24] ?
			      6'd24 :
			      6'd25))) :
		     ((!_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[16] &&
		       !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[17] &&
		       !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[18] &&
		       !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[19]) ?
			((!_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[20] &&
			  !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[21]) ?
			   (_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[22] ?
			      6'd22 :
			      6'd23) :
			   (_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[20] ?
			      6'd20 :
			      6'd21)) :
			((!_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[16] &&
			  !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[17]) ?
			   (_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[18] ?
			      6'd18 :
			      6'd19) :
			   (_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[16] ?
			      6'd16 :
			      6'd17)))) :
		  ((!_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[0] &&
		    !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[1] &&
		    !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[2] &&
		    !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[3] &&
		    !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[4] &&
		    !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[5] &&
		    !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[6] &&
		    !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[7]) ?
		     ((!_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[8] &&
		       !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[9] &&
		       !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[10] &&
		       !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[11]) ?
			((!_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[12] &&
			  !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[13]) ?
			   (_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[14] ?
			      6'd14 :
			      6'd15) :
			   (_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[12] ?
			      6'd12 :
			      6'd13)) :
			((!_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[8] &&
			  !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[9]) ?
			   (_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[10] ?
			      6'd10 :
			      6'd11) :
			   (_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[8] ?
			      6'd8 :
			      6'd9))) :
		     ((!_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[0] &&
		       !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[1] &&
		       !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[2] &&
		       !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[3]) ?
			((!_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[4] &&
			  !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[5]) ?
			   (_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[6] ?
			      6'd6 :
			      6'd7) :
			   (_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[4] ?
			      6'd4 :
			      6'd5)) :
			((!_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[0] &&
			  !_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[1]) ?
			   (_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[2] ?
			      6'd2 :
			      6'd3) :
			   (_0_CONCAT_masterX_0_descriptor_31_BITS_24_TO_22_ETC___d553[0] ?
			      6'd0 :
			      6'd1))))) ;
  assign value__h3980 =
	     (masterX_0_fifo_rx_rv$port1__read[26:25] == 2'd2) ?
	       4'd0 :
	       { 1'd0, masterX_0_fifo_rx_rv$port1__read[24:22] } + 4'd1 ;
  assign value__h50209 =
	     (!masterX_0_descriptor[35] && !masterX_0_descriptor[36] &&
	      !masterX_0_descriptor[37] &&
	      !masterX_0_descriptor[38]) ?
	       6'd4 :
	       ((!masterX_0_descriptor[35] && !masterX_0_descriptor[36]) ?
		  (masterX_0_descriptor[37] ? 6'd2 : 6'd3) :
		  (masterX_0_descriptor[35] ? 6'd0 : 6'd1)) ;
  assign value__h81699 =
	     (masterX_1_fifo_rx_rv[26:25] == 2'd2) ?
	       4'd0 :
	       { 1'd0, masterX_1_fifo_rx_rv[24:22] } + 4'd1 ;
  assign value__h92160 =
	     (!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[0] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[1] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[2] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[3] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[4] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[5] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[6] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[7] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[8] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[9] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[10] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[11] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[12] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[13] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[14] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[15] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[16] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[17] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[18] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[19] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[20] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[21] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[22] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[23] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[24] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[25] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[26] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[27] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[28] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[29] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[30] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[31]) ?
	       ((!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[32] &&
		 !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[33] &&
		 !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[34] &&
		 !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[35] &&
		 !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[36] &&
		 !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[37] &&
		 !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[38] &&
		 !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[39] &&
		 !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[40] &&
		 !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[41] &&
		 !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[42] &&
		 !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[43] &&
		 !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[44] &&
		 !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[45] &&
		 !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[46] &&
		 !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[47]) ?
		  ((!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[48] &&
		    !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[49] &&
		    !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[50] &&
		    !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[51] &&
		    !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[52] &&
		    !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[53] &&
		    !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[54] &&
		    !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[55]) ?
		     ((!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[56] &&
		       !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[57] &&
		       !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[58] &&
		       !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[59]) ?
			((!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[60] &&
			  !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[61]) ?
			   (_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[62] ?
			      6'd62 :
			      6'd63) :
			   (_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[60] ?
			      6'd60 :
			      6'd61)) :
			((!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[56] &&
			  !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[57]) ?
			   (_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[58] ?
			      6'd58 :
			      6'd59) :
			   (_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[56] ?
			      6'd56 :
			      6'd57))) :
		     ((!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[48] &&
		       !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[49] &&
		       !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[50] &&
		       !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[51]) ?
			((!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[52] &&
			  !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[53]) ?
			   (_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[54] ?
			      6'd54 :
			      6'd55) :
			   (_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[52] ?
			      6'd52 :
			      6'd53)) :
			((!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[48] &&
			  !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[49]) ?
			   (_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[50] ?
			      6'd50 :
			      6'd51) :
			   (_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[48] ?
			      6'd48 :
			      6'd49)))) :
		  ((!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[32] &&
		    !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[33] &&
		    !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[34] &&
		    !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[35] &&
		    !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[36] &&
		    !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[37] &&
		    !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[38] &&
		    !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[39]) ?
		     ((!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[40] &&
		       !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[41] &&
		       !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[42] &&
		       !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[43]) ?
			((!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[44] &&
			  !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[45]) ?
			   (_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[46] ?
			      6'd46 :
			      6'd47) :
			   (_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[44] ?
			      6'd44 :
			      6'd45)) :
			((!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[40] &&
			  !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[41]) ?
			   (_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[42] ?
			      6'd42 :
			      6'd43) :
			   (_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[40] ?
			      6'd40 :
			      6'd41))) :
		     ((!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[32] &&
		       !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[33] &&
		       !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[34] &&
		       !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[35]) ?
			((!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[36] &&
			  !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[37]) ?
			   (_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[38] ?
			      6'd38 :
			      6'd39) :
			   (_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[36] ?
			      6'd36 :
			      6'd37)) :
			((!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[32] &&
			  !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[33]) ?
			   (_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[34] ?
			      6'd34 :
			      6'd35) :
			   (_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[32] ?
			      6'd32 :
			      6'd33))))) :
	       ((!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[0] &&
		 !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[1] &&
		 !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[2] &&
		 !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[3] &&
		 !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[4] &&
		 !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[5] &&
		 !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[6] &&
		 !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[7] &&
		 !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[8] &&
		 !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[9] &&
		 !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[10] &&
		 !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[11] &&
		 !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[12] &&
		 !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[13] &&
		 !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[14] &&
		 !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[15]) ?
		  ((!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[16] &&
		    !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[17] &&
		    !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[18] &&
		    !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[19] &&
		    !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[20] &&
		    !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[21] &&
		    !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[22] &&
		    !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[23]) ?
		     ((!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[24] &&
		       !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[25] &&
		       !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[26] &&
		       !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[27]) ?
			((!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[28] &&
			  !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[29]) ?
			   (_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[30] ?
			      6'd30 :
			      6'd31) :
			   (_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[28] ?
			      6'd28 :
			      6'd29)) :
			((!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[24] &&
			  !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[25]) ?
			   (_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[26] ?
			      6'd26 :
			      6'd27) :
			   (_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[24] ?
			      6'd24 :
			      6'd25))) :
		     ((!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[16] &&
		       !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[17] &&
		       !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[18] &&
		       !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[19]) ?
			((!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[20] &&
			  !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[21]) ?
			   (_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[22] ?
			      6'd22 :
			      6'd23) :
			   (_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[20] ?
			      6'd20 :
			      6'd21)) :
			((!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[16] &&
			  !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[17]) ?
			   (_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[18] ?
			      6'd18 :
			      6'd19) :
			   (_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[16] ?
			      6'd16 :
			      6'd17)))) :
		  ((!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[0] &&
		    !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[1] &&
		    !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[2] &&
		    !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[3] &&
		    !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[4] &&
		    !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[5] &&
		    !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[6] &&
		    !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[7]) ?
		     ((!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[8] &&
		       !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[9] &&
		       !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[10] &&
		       !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[11]) ?
			((!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[12] &&
			  !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[13]) ?
			   (_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[14] ?
			      6'd14 :
			      6'd15) :
			   (_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[12] ?
			      6'd12 :
			      6'd13)) :
			((!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[8] &&
			  !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[9]) ?
			   (_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[10] ?
			      6'd10 :
			      6'd11) :
			   (_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[8] ?
			      6'd8 :
			      6'd9))) :
		     ((!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[0] &&
		       !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[1] &&
		       !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[2] &&
		       !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[3]) ?
			((!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[4] &&
			  !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[5]) ?
			   (_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[6] ?
			      6'd6 :
			      6'd7) :
			   (_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[4] ?
			      6'd4 :
			      6'd5)) :
			((!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[0] &&
			  !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[1]) ?
			   (_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[2] ?
			      6'd2 :
			      6'd3) :
			   (_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__095_ETC___d1131[0] ?
			      6'd0 :
			      6'd1))))) ;
  assign x__h106024 = addr__h105941 & mask__h106011 ;
  assign x__h106032 = { 60'd0, value__h106033 } ;
  assign x__h169932 =
	     (SEL_ARR_masterX_0_ifc_request_reg_8_BITS_133_T_ETC___d2203 ==
	      2'd0) ?
	       SEL_ARR_masterX_0_ifc_request_reg_8_BITS_133_T_ETC___d2203 :
	       2'd1 ;
  assign x__h28328 = addr__h28245 & mask__h28315 ;
  assign x__h28336 = { 60'd0, value__h28337 } ;
  assign x__h3970 = addr__h3879 & mask__h3957 ;
  assign x__h3979 = { 60'd0, value__h3980 } ;
  assign x__h81689 = addr__h81603 & mask__h81676 ;
  assign x__h81698 = { 60'd0, value__h81699 } ;
  assign x_bus_hRDATA__h166705 =
	     MUX_slave_mem_ctrl_reg$write_1__SEL_1 ?
	       slave_mem_ifc_response_wire$wget[65:2] :
	       64'h0000000000000123 ;
  assign x_bus_hRDATA__h166717 =
	     MUX_slave_other_ctrl_reg$write_1__SEL_1 ?
	       slave_other_ifc_response_wire$wget[65:2] :
	       64'h0000000000000123 ;
  assign x_request__read_ctrl_addr__h160534 =
	     x_request__read_ctrl_addr__h157701 ;
  assign x_request__read_ctrl_prot__h160533 =
	     x_request__read_ctrl_prot__h157700 ;
  assign y__h104967 = ~mask__h81676 ;
  assign y__h106025 = masterX_1_descriptor[167:104] & y__h129299 ;
  assign y__h129299 = ~mask__h106011 ;
  assign y__h27248 = ~mask__h3957 ;
  assign y__h28329 = masterX_0_descriptor[167:104] & y__h51603 ;
  assign y__h3971 = masterX_0_fifo_rx_rv$port1__read[167:104] & y__h27248 ;
  assign y__h51603 = ~mask__h28315 ;
  assign y__h81690 = masterX_1_fifo_rx_rv[167:104] & y__h104967 ;
  always@(ahb_bus_hmaster_addr or
	  masterX_0_ifc_request_reg or masterX_1_ifc_request_reg)
  begin
    case (ahb_bus_hmaster_addr[1] && ahb_bus_hmaster_addr[0])
      1'd0:
	  x_request__read_ctrl_prot__h157700 =
	      masterX_0_ifc_request_reg[131:128];
      1'd1:
	  x_request__read_ctrl_prot__h157700 =
	      masterX_1_ifc_request_reg[131:128];
    endcase
  end
  always@(ahb_bus_hmaster_addr or
	  masterX_0_ifc_request_reg or masterX_1_ifc_request_reg)
  begin
    case (ahb_bus_hmaster_addr[1] && ahb_bus_hmaster_addr[0])
      1'd0:
	  x_request__read_ctrl_addr__h157701 =
	      masterX_0_ifc_request_reg[127:64];
      1'd1:
	  x_request__read_ctrl_addr__h157701 =
	      masterX_1_ifc_request_reg[127:64];
    endcase
  end
  always@(ahb_bus_hmaster_addr or
	  masterX_0_ifc_request_reg or masterX_1_ifc_request_reg)
  begin
    case (ahb_bus_hmaster_addr[1] && ahb_bus_hmaster_addr[0])
      1'd0: x_fabric_bus_hWDATA__h169941 = masterX_0_ifc_request_reg[63:0];
      1'd1: x_fabric_bus_hWDATA__h169941 = masterX_1_ifc_request_reg[63:0];
    endcase
  end
  always@(m_num_data__h161927 or
	  masterX_0_ifc_request_reg or masterX_1_ifc_request_reg)
  begin
    case (m_num_data__h161927)
      1'd0: data__h160799 = masterX_0_ifc_request_reg[63:0];
      1'd1: data__h160799 = masterX_1_ifc_request_reg[63:0];
    endcase
  end
  always@(slave_mem_ctrl_reg)
  begin
    case (slave_mem_ctrl_reg[75:73])
      3'd0: value__h158198 = 8'd0;
      3'd1: value__h158198 = 8'd1;
      3'd2: value__h158198 = 8'd3;
      3'd3: value__h158198 = 8'd7;
      3'd4: value__h158198 = 8'd15;
      3'd5: value__h158198 = 8'd31;
      3'd6: value__h158198 = 8'd63;
      3'd7: value__h158198 = 8'd127;
    endcase
  end
  always@(slave_other_ctrl_reg)
  begin
    case (slave_other_ctrl_reg[75:73])
      3'd0: value__h161021 = 8'd0;
      3'd1: value__h161021 = 8'd1;
      3'd2: value__h161021 = 8'd3;
      3'd3: value__h161021 = 8'd7;
      3'd4: value__h161021 = 8'd15;
      3'd5: value__h161021 = 8'd31;
      3'd6: value__h161021 = 8'd63;
      3'd7: value__h161021 = 8'd127;
    endcase
  end
  always@(masterX_0_descriptor)
  begin
    case (masterX_0_descriptor[24:22])
      3'd0, 3'd1:
	  IF_masterX_0_descriptor_31_BITS_24_TO_22_46_EQ_ETC___d909 =
	      masterX_0_descriptor[24:22];
      3'd3: IF_masterX_0_descriptor_31_BITS_24_TO_22_46_EQ_ETC___d909 = 3'd2;
      3'd7: IF_masterX_0_descriptor_31_BITS_24_TO_22_46_EQ_ETC___d909 = 3'd3;
      default: IF_masterX_0_descriptor_31_BITS_24_TO_22_46_EQ_ETC___d909 =
		   3'd0;
    endcase
  end
  always@(masterX_0_descriptor)
  begin
    case (masterX_0_descriptor[26:25])
      2'd0: CASE_masterX_0_descriptor_BITS_26_TO_25_0_1_1__ETC__q1 = 3'd1;
      2'd1, 2'd2, 2'd3:
	  CASE_masterX_0_descriptor_BITS_26_TO_25_0_1_1__ETC__q1 = 3'd0;
    endcase
  end
  always@(masterX_1_descriptor)
  begin
    case (masterX_1_descriptor[24:22])
      3'd0, 3'd1:
	  IF_masterX_1_descriptor_547_BITS_24_TO_22_562__ETC___d1925 =
	      masterX_1_descriptor[24:22];
      3'd3: IF_masterX_1_descriptor_547_BITS_24_TO_22_562__ETC___d1925 = 3'd2;
      3'd7: IF_masterX_1_descriptor_547_BITS_24_TO_22_562__ETC___d1925 = 3'd3;
      default: IF_masterX_1_descriptor_547_BITS_24_TO_22_562__ETC___d1925 =
		   3'd0;
    endcase
  end
  always@(masterX_1_descriptor)
  begin
    case (masterX_1_descriptor[26:25])
      2'd0: CASE_masterX_1_descriptor_BITS_26_TO_25_0_1_1__ETC__q2 = 3'd1;
      2'd1, 2'd2, 2'd3:
	  CASE_masterX_1_descriptor_BITS_26_TO_25_0_1_1__ETC__q2 = 3'd0;
    endcase
  end
  always@(ahb_bus_hmaster_addr or
	  masterX_0_ifc_request_reg or masterX_1_ifc_request_reg)
  begin
    case (ahb_bus_hmaster_addr[1] && ahb_bus_hmaster_addr[0])
      1'd0:
	  SEL_ARR_masterX_0_ifc_request_reg_8_BITS_136_T_ETC___d2207 =
	      masterX_0_ifc_request_reg[136:134];
      1'd1:
	  SEL_ARR_masterX_0_ifc_request_reg_8_BITS_136_T_ETC___d2207 =
	      masterX_1_ifc_request_reg[136:134];
    endcase
  end
  always@(ahb_bus_hmaster_addr or
	  masterX_0_ifc_request_reg or masterX_1_ifc_request_reg)
  begin
    case (ahb_bus_hmaster_addr[1] && ahb_bus_hmaster_addr[0])
      1'd0:
	  SEL_ARR_masterX_0_ifc_request_reg_8_BITS_133_T_ETC___d2203 =
	      masterX_0_ifc_request_reg[133:132];
      1'd1:
	  SEL_ARR_masterX_0_ifc_request_reg_8_BITS_133_T_ETC___d2203 =
	      masterX_1_ifc_request_reg[133:132];
    endcase
  end
  always@(SEL_ARR_masterX_0_ifc_request_reg_8_BITS_136_T_ETC___d2207)
  begin
    case (SEL_ARR_masterX_0_ifc_request_reg_8_BITS_136_T_ETC___d2207)
      3'd0, 3'd1:
	  CASE_SEL_ARR_masterX_0_ifc_request_reg_8_BITS__ETC__q3 = 5'd1;
      3'd2, 3'd3:
	  CASE_SEL_ARR_masterX_0_ifc_request_reg_8_BITS__ETC__q3 = 5'd4;
      3'd4, 3'd5:
	  CASE_SEL_ARR_masterX_0_ifc_request_reg_8_BITS__ETC__q3 = 5'd8;
      3'd6, 3'd7:
	  CASE_SEL_ARR_masterX_0_ifc_request_reg_8_BITS__ETC__q3 = 5'd16;
    endcase
  end
  always@(masterX_1_fifo_rx_rv)
  begin
    case (masterX_1_fifo_rx_rv[24:22])
      3'd0, 3'd1:
	  CASE_masterX_1_fifo_rx_rv_BITS_24_TO_22_0_mast_ETC__q4 =
	      masterX_1_fifo_rx_rv[24:22];
      3'd3: CASE_masterX_1_fifo_rx_rv_BITS_24_TO_22_0_mast_ETC__q4 = 3'd2;
      3'd7: CASE_masterX_1_fifo_rx_rv_BITS_24_TO_22_0_mast_ETC__q4 = 3'd3;
      default: CASE_masterX_1_fifo_rx_rv_BITS_24_TO_22_0_mast_ETC__q4 = 3'd0;
    endcase
  end
  always@(masterX_1_fifo_rx_rv)
  begin
    case (masterX_1_fifo_rx_rv[26:25])
      2'd0: CASE_masterX_1_fifo_rx_rv_BITS_26_TO_25_0_1_1__ETC__q5 = 3'd1;
      2'd1, 2'd2, 2'd3:
	  CASE_masterX_1_fifo_rx_rv_BITS_26_TO_25_0_1_1__ETC__q5 = 3'd0;
    endcase
  end
  always@(ahb_bus_hmaster_addr or
	  CAN_FIRE_RL_masterX_0_send_request or
	  masterX_0_req_reg or
	  CAN_FIRE_RL_masterX_1_send_request or masterX_1_req_reg)
  begin
    case (ahb_bus_hmaster_addr[1] && ahb_bus_hmaster_addr[0])
      1'd0:
	  SEL_ARR_NOT_masterX_0_req_wire_whas__188_210_O_ETC___d2221 =
	      !CAN_FIRE_RL_masterX_0_send_request && !masterX_0_req_reg;
      1'd1:
	  SEL_ARR_NOT_masterX_0_req_wire_whas__188_210_O_ETC___d2221 =
	      !CAN_FIRE_RL_masterX_1_send_request && !masterX_1_req_reg;
    endcase
  end
  always@(ahb_bus_hmaster_addr or
	  CAN_FIRE_RL_masterX_0_send_request or
	  masterX_0_req_reg or
	  CAN_FIRE_RL_masterX_1_send_request or masterX_1_req_reg)
  begin
    case (ahb_bus_hmaster_addr[1] && ahb_bus_hmaster_addr[0])
      1'd0:
	  SEL_ARR_masterX_0_req_wire_whas__188_AND_maste_ETC___d2201 =
	      CAN_FIRE_RL_masterX_0_send_request || masterX_0_req_reg;
      1'd1:
	  SEL_ARR_masterX_0_req_wire_whas__188_AND_maste_ETC___d2201 =
	      CAN_FIRE_RL_masterX_1_send_request || masterX_1_req_reg;
    endcase
  end
  always@(masterX_0_fifo_rx_rv$port1__read)
  begin
    case (masterX_0_fifo_rx_rv$port1__read[24:22])
      3'd0, 3'd1:
	  CASE_masterX_0_fifo_rx_rvport1__read_BITS_24__ETC__q6 =
	      masterX_0_fifo_rx_rv$port1__read[24:22];
      3'd3: CASE_masterX_0_fifo_rx_rvport1__read_BITS_24__ETC__q6 = 3'd2;
      3'd7: CASE_masterX_0_fifo_rx_rvport1__read_BITS_24__ETC__q6 = 3'd3;
      default: CASE_masterX_0_fifo_rx_rvport1__read_BITS_24__ETC__q6 = 3'd0;
    endcase
  end
  always@(masterX_0_fifo_rx_rv$port1__read)
  begin
    case (masterX_0_fifo_rx_rv$port1__read[26:25])
      2'd0: CASE_masterX_0_fifo_rx_rvport1__read_BITS_26__ETC__q7 = 3'd1;
      2'd1, 2'd2, 2'd3:
	  CASE_masterX_0_fifo_rx_rvport1__read_BITS_26__ETC__q7 = 3'd0;
    endcase
  end
  always@(ahb_bus_s_num_data or
	  ahb_bus_dummy_transfer_reg or
	  ahb_bus_dummy_select_reg or
	  MUX_slave_mem_ctrl_reg$write_1__SEL_1 or
	  MUX_slave_other_ctrl_reg$write_1__SEL_1)
  begin
    case (ahb_bus_s_num_data)
      2'd0:
	  SEL_ARR_ahb_bus_dummy_transfer_reg_176_EQ_0_17_ETC___d2341 =
	      ahb_bus_dummy_transfer_reg == 2'd0 ||
	      ahb_bus_dummy_transfer_reg == 2'd1 ||
	      !ahb_bus_dummy_select_reg;
      2'd1:
	  SEL_ARR_ahb_bus_dummy_transfer_reg_176_EQ_0_17_ETC___d2341 =
	      MUX_slave_mem_ctrl_reg$write_1__SEL_1;
      2'd2:
	  SEL_ARR_ahb_bus_dummy_transfer_reg_176_EQ_0_17_ETC___d2341 =
	      MUX_slave_other_ctrl_reg$write_1__SEL_1;
      2'd3:
	  SEL_ARR_ahb_bus_dummy_transfer_reg_176_EQ_0_17_ETC___d2341 =
	      1'b0 /* unspecified value */ ;
    endcase
  end
  always@(ahb_bus_s_map_data_0 or
	  ahb_bus_dummy_transfer_reg or
	  ahb_bus_dummy_select_reg or
	  MUX_slave_mem_ctrl_reg$write_1__SEL_1 or
	  MUX_slave_other_ctrl_reg$write_1__SEL_1)
  begin
    case (ahb_bus_s_map_data_0[1:0])
      2'd0:
	  SEL_ARR_ahb_bus_dummy_transfer_reg_176_EQ_0_17_ETC___d2385 =
	      ahb_bus_dummy_transfer_reg == 2'd0 ||
	      ahb_bus_dummy_transfer_reg == 2'd1 ||
	      !ahb_bus_dummy_select_reg;
      2'd1:
	  SEL_ARR_ahb_bus_dummy_transfer_reg_176_EQ_0_17_ETC___d2385 =
	      MUX_slave_mem_ctrl_reg$write_1__SEL_1;
      2'd2:
	  SEL_ARR_ahb_bus_dummy_transfer_reg_176_EQ_0_17_ETC___d2385 =
	      MUX_slave_other_ctrl_reg$write_1__SEL_1;
      2'd3:
	  SEL_ARR_ahb_bus_dummy_transfer_reg_176_EQ_0_17_ETC___d2385 =
	      1'b0 /* unspecified value */ ;
    endcase
  end
  always@(ahb_bus_s_map_data_1 or
	  ahb_bus_dummy_transfer_reg or
	  ahb_bus_dummy_select_reg or
	  MUX_slave_mem_ctrl_reg$write_1__SEL_1 or
	  MUX_slave_other_ctrl_reg$write_1__SEL_1)
  begin
    case (ahb_bus_s_map_data_1[1:0])
      2'd0:
	  SEL_ARR_ahb_bus_dummy_transfer_reg_176_EQ_0_17_ETC___d2395 =
	      ahb_bus_dummy_transfer_reg == 2'd0 ||
	      ahb_bus_dummy_transfer_reg == 2'd1 ||
	      !ahb_bus_dummy_select_reg;
      2'd1:
	  SEL_ARR_ahb_bus_dummy_transfer_reg_176_EQ_0_17_ETC___d2395 =
	      MUX_slave_mem_ctrl_reg$write_1__SEL_1;
      2'd2:
	  SEL_ARR_ahb_bus_dummy_transfer_reg_176_EQ_0_17_ETC___d2395 =
	      MUX_slave_other_ctrl_reg$write_1__SEL_1;
      2'd3:
	  SEL_ARR_ahb_bus_dummy_transfer_reg_176_EQ_0_17_ETC___d2395 =
	      1'b0 /* unspecified value */ ;
    endcase
  end
  always@(ahb_bus_s_map_data_0 or
	  x_bus_hRDATA__h166705 or x_bus_hRDATA__h166717)
  begin
    case (ahb_bus_s_map_data_0[1:0])
      2'd0:
	  CASE_ahb_bus_s_map_data_0_BITS_1_TO_0_0_0x567__ETC__q8 =
	      64'h0000000000000567;
      2'd1:
	  CASE_ahb_bus_s_map_data_0_BITS_1_TO_0_0_0x567__ETC__q8 =
	      x_bus_hRDATA__h166705;
      2'd2:
	  CASE_ahb_bus_s_map_data_0_BITS_1_TO_0_0_0x567__ETC__q8 =
	      x_bus_hRDATA__h166717;
      2'd3:
	  CASE_ahb_bus_s_map_data_0_BITS_1_TO_0_0_0x567__ETC__q8 =
	      64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(ahb_bus_s_map_data_1 or
	  x_bus_hRDATA__h166705 or x_bus_hRDATA__h166717)
  begin
    case (ahb_bus_s_map_data_1[1:0])
      2'd0:
	  CASE_ahb_bus_s_map_data_1_BITS_1_TO_0_0_0x567__ETC__q9 =
	      64'h0000000000000567;
      2'd1:
	  CASE_ahb_bus_s_map_data_1_BITS_1_TO_0_0_0x567__ETC__q9 =
	      x_bus_hRDATA__h166705;
      2'd2:
	  CASE_ahb_bus_s_map_data_1_BITS_1_TO_0_0_0x567__ETC__q9 =
	      x_bus_hRDATA__h166717;
      2'd3:
	  CASE_ahb_bus_s_map_data_1_BITS_1_TO_0_0_0x567__ETC__q9 =
	      64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(ahb_bus_s_map_data_1 or
	  IF_slave_mem_ifc_response_wire_whas__444_THEN__ETC___d2447 or
	  IF_slave_other_ifc_response_wire_whas__448_THE_ETC___d2451)
  begin
    case (ahb_bus_s_map_data_1[1:0])
      2'd0: CASE_ahb_bus_s_map_data_1_BITS_1_TO_0_0_0_1_IF_ETC__q10 = 2'd0;
      2'd1:
	  CASE_ahb_bus_s_map_data_1_BITS_1_TO_0_0_0_1_IF_ETC__q10 =
	      IF_slave_mem_ifc_response_wire_whas__444_THEN__ETC___d2447;
      2'd2:
	  CASE_ahb_bus_s_map_data_1_BITS_1_TO_0_0_0_1_IF_ETC__q10 =
	      IF_slave_other_ifc_response_wire_whas__448_THE_ETC___d2451;
      2'd3:
	  CASE_ahb_bus_s_map_data_1_BITS_1_TO_0_0_0_1_IF_ETC__q10 =
	      2'b10 /* unspecified value */ ;
    endcase
  end
  always@(ahb_bus_s_map_data_0 or
	  IF_slave_mem_ifc_response_wire_whas__444_THEN__ETC___d2447 or
	  IF_slave_other_ifc_response_wire_whas__448_THE_ETC___d2451)
  begin
    case (ahb_bus_s_map_data_0[1:0])
      2'd0: CASE_ahb_bus_s_map_data_0_BITS_1_TO_0_0_0_1_IF_ETC__q11 = 2'd0;
      2'd1:
	  CASE_ahb_bus_s_map_data_0_BITS_1_TO_0_0_0_1_IF_ETC__q11 =
	      IF_slave_mem_ifc_response_wire_whas__444_THEN__ETC___d2447;
      2'd2:
	  CASE_ahb_bus_s_map_data_0_BITS_1_TO_0_0_0_1_IF_ETC__q11 =
	      IF_slave_other_ifc_response_wire_whas__448_THE_ETC___d2451;
      2'd3:
	  CASE_ahb_bus_s_map_data_0_BITS_1_TO_0_0_0_1_IF_ETC__q11 =
	      2'b10 /* unspecified value */ ;
    endcase
  end
  always@(ahb_bus_hmaster_addr or
	  masterX_0_ifc_request_reg or masterX_1_ifc_request_reg)
  begin
    case (ahb_bus_hmaster_addr[1])
      1'd0:
	  CASE_ahb_bus_hmaster_addr_BIT_1_0_masterX_0_if_ETC__q12 =
	      masterX_0_ifc_request_reg[133:132];
      1'd1:
	  CASE_ahb_bus_hmaster_addr_BIT_1_0_masterX_0_if_ETC__q12 =
	      masterX_1_ifc_request_reg[133:132];
    endcase
  end
  always@(SEL_ARR_masterX_0_ifc_request_reg_8_BITS_133_T_ETC___d2203 or
	  ahb_bus_monitor_remaining_reg or
	  remaining__h162904 or remaining__h162978)
  begin
    case (SEL_ARR_masterX_0_ifc_request_reg_8_BITS_133_T_ETC___d2203)
      2'd2:
	  CASE_SEL_ARR_masterX_0_ifc_request_reg_8_BITS__ETC__q13 =
	      remaining__h162904;
      2'd3:
	  CASE_SEL_ARR_masterX_0_ifc_request_reg_8_BITS__ETC__q13 =
	      remaining__h162978;
      default: CASE_SEL_ARR_masterX_0_ifc_request_reg_8_BITS__ETC__q13 =
		   ahb_bus_monitor_remaining_reg;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        ahb_bus_arbiter_dgrant_vector_reg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ahb_bus_arbiter_grant_vector_reg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ahb_bus_arbiter_hmaster_reg <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 1'b0 /* unspecified value */  };
	ahb_bus_arbiter_priority_vector <= `BSV_ASSIGNMENT_DELAY 2'd1;
	ahb_bus_dummy_select_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ahb_bus_dummy_transfer_reg <= `BSV_ASSIGNMENT_DELAY
	    2'b10 /* unspecified value */ ;
	ahb_bus_dummys_0_select_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ahb_bus_dummys_0_transfer_reg <= `BSV_ASSIGNMENT_DELAY
	    2'b10 /* unspecified value */ ;
	ahb_bus_dummys_1_select_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ahb_bus_dummys_1_transfer_reg <= `BSV_ASSIGNMENT_DELAY
	    2'b10 /* unspecified value */ ;
	ahb_bus_hmaster_addr <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 1'b0 /* unspecified value */  };
	ahb_bus_hmaster_data <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 1'b0 /* unspecified value */  };
	ahb_bus_monitor_hready_prev <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ahb_bus_monitor_remaining_reg <= `BSV_ASSIGNMENT_DELAY 5'd0;
	ahb_bus_monitor_request_prev <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ahb_bus_monitor_started <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ahb_bus_monitor_transfer_prev <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ahb_bus_s_map_data_0 <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 2'b10 /* unspecified value */  };
	ahb_bus_s_map_data_1 <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 2'b10 /* unspecified value */  };
	ahb_bus_s_num_addr_current <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ahb_bus_s_num_data <= `BSV_ASSIGNMENT_DELAY 2'd0;
	masterX_0_count <= `BSV_ASSIGNMENT_DELAY 5'd0;
	masterX_0_data_reg <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 64'hAAAAAAAAAAAAAAAA /* unspecified value */  };
	masterX_0_descriptor <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      172'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  };
	masterX_0_fifo_rx_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      173'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  };
	masterX_0_fifo_tx_count <= `BSV_ASSIGNMENT_DELAY 3'd0;
	masterX_0_grant_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	masterX_0_ifc_fifo_op_cntr_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	masterX_0_ifc_fifo_op_q_0 <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 1'b0 /* unspecified value */  };
	masterX_0_ifc_fifo_op_q_1 <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 1'b0 /* unspecified value */  };
	masterX_0_ifc_request_reg <= `BSV_ASSIGNMENT_DELAY 141'd0;
	masterX_0_req_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	masterX_1_count <= `BSV_ASSIGNMENT_DELAY 5'd0;
	masterX_1_data_reg <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 64'hAAAAAAAAAAAAAAAA /* unspecified value */  };
	masterX_1_descriptor <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      172'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  };
	masterX_1_fifo_rx_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      173'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  };
	masterX_1_fifo_tx_count <= `BSV_ASSIGNMENT_DELAY 3'd0;
	masterX_1_grant_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	masterX_1_ifc_fifo_op_cntr_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	masterX_1_ifc_fifo_op_q_0 <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 1'b0 /* unspecified value */  };
	masterX_1_ifc_fifo_op_q_1 <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 1'b0 /* unspecified value */  };
	masterX_1_ifc_request_reg <= `BSV_ASSIGNMENT_DELAY 141'd0;
	masterX_1_req_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	slave_mem_ctrl_reg <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 77'h0AAAAAAAAAAAAAAAAAAA /* unspecified value */  };
	slave_mem_fifo_op_rv <= `BSV_ASSIGNMENT_DELAY 1'd0;
	slave_mem_fifo_rx_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 89'h0AAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  };
	slave_mem_fifo_tx_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      173'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  };
	slave_mem_first <= `BSV_ASSIGNMENT_DELAY 1'd0;
	slave_mem_start <= `BSV_ASSIGNMENT_DELAY 1'd1;
	slave_other_ctrl_reg <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 77'h0AAAAAAAAAAAAAAAAAAA /* unspecified value */  };
	slave_other_fifo_op_rv <= `BSV_ASSIGNMENT_DELAY 1'd0;
	slave_other_fifo_rx_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 89'h0AAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  };
	slave_other_fifo_tx_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      173'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  };
	slave_other_first <= `BSV_ASSIGNMENT_DELAY 1'd0;
	slave_other_start <= `BSV_ASSIGNMENT_DELAY 1'd1;
      end
    else
      begin
        if (ahb_bus_arbiter_dgrant_vector_reg$EN)
	  ahb_bus_arbiter_dgrant_vector_reg <= `BSV_ASSIGNMENT_DELAY
	      ahb_bus_arbiter_dgrant_vector_reg$D_IN;
	if (ahb_bus_arbiter_grant_vector_reg$EN)
	  ahb_bus_arbiter_grant_vector_reg <= `BSV_ASSIGNMENT_DELAY
	      ahb_bus_arbiter_grant_vector_reg$D_IN;
	if (ahb_bus_arbiter_hmaster_reg$EN)
	  ahb_bus_arbiter_hmaster_reg <= `BSV_ASSIGNMENT_DELAY
	      ahb_bus_arbiter_hmaster_reg$D_IN;
	if (ahb_bus_arbiter_priority_vector$EN)
	  ahb_bus_arbiter_priority_vector <= `BSV_ASSIGNMENT_DELAY
	      ahb_bus_arbiter_priority_vector$D_IN;
	if (ahb_bus_dummy_select_reg$EN)
	  ahb_bus_dummy_select_reg <= `BSV_ASSIGNMENT_DELAY
	      ahb_bus_dummy_select_reg$D_IN;
	if (ahb_bus_dummy_transfer_reg$EN)
	  ahb_bus_dummy_transfer_reg <= `BSV_ASSIGNMENT_DELAY
	      ahb_bus_dummy_transfer_reg$D_IN;
	if (ahb_bus_dummys_0_select_reg$EN)
	  ahb_bus_dummys_0_select_reg <= `BSV_ASSIGNMENT_DELAY
	      ahb_bus_dummys_0_select_reg$D_IN;
	if (ahb_bus_dummys_0_transfer_reg$EN)
	  ahb_bus_dummys_0_transfer_reg <= `BSV_ASSIGNMENT_DELAY
	      ahb_bus_dummys_0_transfer_reg$D_IN;
	if (ahb_bus_dummys_1_select_reg$EN)
	  ahb_bus_dummys_1_select_reg <= `BSV_ASSIGNMENT_DELAY
	      ahb_bus_dummys_1_select_reg$D_IN;
	if (ahb_bus_dummys_1_transfer_reg$EN)
	  ahb_bus_dummys_1_transfer_reg <= `BSV_ASSIGNMENT_DELAY
	      ahb_bus_dummys_1_transfer_reg$D_IN;
	if (ahb_bus_hmaster_addr$EN)
	  ahb_bus_hmaster_addr <= `BSV_ASSIGNMENT_DELAY
	      ahb_bus_hmaster_addr$D_IN;
	if (ahb_bus_hmaster_data$EN)
	  ahb_bus_hmaster_data <= `BSV_ASSIGNMENT_DELAY
	      ahb_bus_hmaster_data$D_IN;
	if (ahb_bus_monitor_hready_prev$EN)
	  ahb_bus_monitor_hready_prev <= `BSV_ASSIGNMENT_DELAY
	      ahb_bus_monitor_hready_prev$D_IN;
	if (ahb_bus_monitor_remaining_reg$EN)
	  ahb_bus_monitor_remaining_reg <= `BSV_ASSIGNMENT_DELAY
	      ahb_bus_monitor_remaining_reg$D_IN;
	if (ahb_bus_monitor_request_prev$EN)
	  ahb_bus_monitor_request_prev <= `BSV_ASSIGNMENT_DELAY
	      ahb_bus_monitor_request_prev$D_IN;
	if (ahb_bus_monitor_started$EN)
	  ahb_bus_monitor_started <= `BSV_ASSIGNMENT_DELAY
	      ahb_bus_monitor_started$D_IN;
	if (ahb_bus_monitor_transfer_prev$EN)
	  ahb_bus_monitor_transfer_prev <= `BSV_ASSIGNMENT_DELAY
	      ahb_bus_monitor_transfer_prev$D_IN;
	if (ahb_bus_s_map_data_0$EN)
	  ahb_bus_s_map_data_0 <= `BSV_ASSIGNMENT_DELAY
	      ahb_bus_s_map_data_0$D_IN;
	if (ahb_bus_s_map_data_1$EN)
	  ahb_bus_s_map_data_1 <= `BSV_ASSIGNMENT_DELAY
	      ahb_bus_s_map_data_1$D_IN;
	if (ahb_bus_s_num_addr_current$EN)
	  ahb_bus_s_num_addr_current <= `BSV_ASSIGNMENT_DELAY
	      ahb_bus_s_num_addr_current$D_IN;
	if (ahb_bus_s_num_data$EN)
	  ahb_bus_s_num_data <= `BSV_ASSIGNMENT_DELAY ahb_bus_s_num_data$D_IN;
	if (masterX_0_count$EN)
	  masterX_0_count <= `BSV_ASSIGNMENT_DELAY masterX_0_count$D_IN;
	if (masterX_0_data_reg$EN)
	  masterX_0_data_reg <= `BSV_ASSIGNMENT_DELAY masterX_0_data_reg$D_IN;
	if (masterX_0_descriptor$EN)
	  masterX_0_descriptor <= `BSV_ASSIGNMENT_DELAY
	      masterX_0_descriptor$D_IN;
	if (masterX_0_fifo_rx_rv$EN)
	  masterX_0_fifo_rx_rv <= `BSV_ASSIGNMENT_DELAY
	      masterX_0_fifo_rx_rv$D_IN;
	if (masterX_0_fifo_tx_count$EN)
	  masterX_0_fifo_tx_count <= `BSV_ASSIGNMENT_DELAY
	      masterX_0_fifo_tx_count$D_IN;
	if (masterX_0_grant_reg$EN)
	  masterX_0_grant_reg <= `BSV_ASSIGNMENT_DELAY
	      masterX_0_grant_reg$D_IN;
	if (masterX_0_ifc_fifo_op_cntr_r$EN)
	  masterX_0_ifc_fifo_op_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      masterX_0_ifc_fifo_op_cntr_r$D_IN;
	if (masterX_0_ifc_fifo_op_q_0$EN)
	  masterX_0_ifc_fifo_op_q_0 <= `BSV_ASSIGNMENT_DELAY
	      masterX_0_ifc_fifo_op_q_0$D_IN;
	if (masterX_0_ifc_fifo_op_q_1$EN)
	  masterX_0_ifc_fifo_op_q_1 <= `BSV_ASSIGNMENT_DELAY
	      masterX_0_ifc_fifo_op_q_1$D_IN;
	if (masterX_0_ifc_request_reg$EN)
	  masterX_0_ifc_request_reg <= `BSV_ASSIGNMENT_DELAY
	      masterX_0_ifc_request_reg$D_IN;
	if (masterX_0_req_reg$EN)
	  masterX_0_req_reg <= `BSV_ASSIGNMENT_DELAY masterX_0_req_reg$D_IN;
	if (masterX_1_count$EN)
	  masterX_1_count <= `BSV_ASSIGNMENT_DELAY masterX_1_count$D_IN;
	if (masterX_1_data_reg$EN)
	  masterX_1_data_reg <= `BSV_ASSIGNMENT_DELAY masterX_1_data_reg$D_IN;
	if (masterX_1_descriptor$EN)
	  masterX_1_descriptor <= `BSV_ASSIGNMENT_DELAY
	      masterX_1_descriptor$D_IN;
	if (masterX_1_fifo_rx_rv$EN)
	  masterX_1_fifo_rx_rv <= `BSV_ASSIGNMENT_DELAY
	      masterX_1_fifo_rx_rv$D_IN;
	if (masterX_1_fifo_tx_count$EN)
	  masterX_1_fifo_tx_count <= `BSV_ASSIGNMENT_DELAY
	      masterX_1_fifo_tx_count$D_IN;
	if (masterX_1_grant_reg$EN)
	  masterX_1_grant_reg <= `BSV_ASSIGNMENT_DELAY
	      masterX_1_grant_reg$D_IN;
	if (masterX_1_ifc_fifo_op_cntr_r$EN)
	  masterX_1_ifc_fifo_op_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      masterX_1_ifc_fifo_op_cntr_r$D_IN;
	if (masterX_1_ifc_fifo_op_q_0$EN)
	  masterX_1_ifc_fifo_op_q_0 <= `BSV_ASSIGNMENT_DELAY
	      masterX_1_ifc_fifo_op_q_0$D_IN;
	if (masterX_1_ifc_fifo_op_q_1$EN)
	  masterX_1_ifc_fifo_op_q_1 <= `BSV_ASSIGNMENT_DELAY
	      masterX_1_ifc_fifo_op_q_1$D_IN;
	if (masterX_1_ifc_request_reg$EN)
	  masterX_1_ifc_request_reg <= `BSV_ASSIGNMENT_DELAY
	      masterX_1_ifc_request_reg$D_IN;
	if (masterX_1_req_reg$EN)
	  masterX_1_req_reg <= `BSV_ASSIGNMENT_DELAY masterX_1_req_reg$D_IN;
	if (slave_mem_ctrl_reg$EN)
	  slave_mem_ctrl_reg <= `BSV_ASSIGNMENT_DELAY slave_mem_ctrl_reg$D_IN;
	if (slave_mem_fifo_op_rv$EN)
	  slave_mem_fifo_op_rv <= `BSV_ASSIGNMENT_DELAY
	      slave_mem_fifo_op_rv$D_IN;
	if (slave_mem_fifo_rx_rv$EN)
	  slave_mem_fifo_rx_rv <= `BSV_ASSIGNMENT_DELAY
	      slave_mem_fifo_rx_rv$D_IN;
	if (slave_mem_fifo_tx_rv$EN)
	  slave_mem_fifo_tx_rv <= `BSV_ASSIGNMENT_DELAY
	      slave_mem_fifo_tx_rv$D_IN;
	if (slave_mem_first$EN)
	  slave_mem_first <= `BSV_ASSIGNMENT_DELAY slave_mem_first$D_IN;
	if (slave_mem_start$EN)
	  slave_mem_start <= `BSV_ASSIGNMENT_DELAY slave_mem_start$D_IN;
	if (slave_other_ctrl_reg$EN)
	  slave_other_ctrl_reg <= `BSV_ASSIGNMENT_DELAY
	      slave_other_ctrl_reg$D_IN;
	if (slave_other_fifo_op_rv$EN)
	  slave_other_fifo_op_rv <= `BSV_ASSIGNMENT_DELAY
	      slave_other_fifo_op_rv$D_IN;
	if (slave_other_fifo_rx_rv$EN)
	  slave_other_fifo_rx_rv <= `BSV_ASSIGNMENT_DELAY
	      slave_other_fifo_rx_rv$D_IN;
	if (slave_other_fifo_tx_rv$EN)
	  slave_other_fifo_tx_rv <= `BSV_ASSIGNMENT_DELAY
	      slave_other_fifo_tx_rv$D_IN;
	if (slave_other_first$EN)
	  slave_other_first <= `BSV_ASSIGNMENT_DELAY slave_other_first$D_IN;
	if (slave_other_start$EN)
	  slave_other_start <= `BSV_ASSIGNMENT_DELAY slave_other_start$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    ahb_bus_arbiter_dgrant_vector_reg = 2'h2;
    ahb_bus_arbiter_grant_vector_reg = 2'h2;
    ahb_bus_arbiter_hmaster_reg = 2'h2;
    ahb_bus_arbiter_priority_vector = 2'h2;
    ahb_bus_dummy_select_reg = 1'h0;
    ahb_bus_dummy_transfer_reg = 2'h2;
    ahb_bus_dummys_0_select_reg = 1'h0;
    ahb_bus_dummys_0_transfer_reg = 2'h2;
    ahb_bus_dummys_1_select_reg = 1'h0;
    ahb_bus_dummys_1_transfer_reg = 2'h2;
    ahb_bus_hmaster_addr = 2'h2;
    ahb_bus_hmaster_data = 2'h2;
    ahb_bus_monitor_hready_prev = 1'h0;
    ahb_bus_monitor_remaining_reg = 5'h0A;
    ahb_bus_monitor_request_prev = 1'h0;
    ahb_bus_monitor_started = 1'h0;
    ahb_bus_monitor_transfer_prev = 2'h2;
    ahb_bus_s_map_data_0 = 3'h2;
    ahb_bus_s_map_data_1 = 3'h2;
    ahb_bus_s_num_addr_current = 2'h2;
    ahb_bus_s_num_data = 2'h2;
    masterX_0_count = 5'h0A;
    masterX_0_data_reg = 65'h0AAAAAAAAAAAAAAAA;
    masterX_0_descriptor = 173'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    masterX_0_fifo_rx_rv = 174'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    masterX_0_fifo_tx_count = 3'h2;
    masterX_0_grant_reg = 1'h0;
    masterX_0_ifc_fifo_op_cntr_r = 2'h2;
    masterX_0_ifc_fifo_op_q_0 = 2'h2;
    masterX_0_ifc_fifo_op_q_1 = 2'h2;
    masterX_0_ifc_request_reg = 141'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    masterX_0_req_reg = 1'h0;
    masterX_1_count = 5'h0A;
    masterX_1_data_reg = 65'h0AAAAAAAAAAAAAAAA;
    masterX_1_descriptor = 173'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    masterX_1_fifo_rx_rv = 174'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    masterX_1_fifo_tx_count = 3'h2;
    masterX_1_grant_reg = 1'h0;
    masterX_1_ifc_fifo_op_cntr_r = 2'h2;
    masterX_1_ifc_fifo_op_q_0 = 2'h2;
    masterX_1_ifc_fifo_op_q_1 = 2'h2;
    masterX_1_ifc_request_reg = 141'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    masterX_1_req_reg = 1'h0;
    slave_mem_ctrl_reg = 78'h2AAAAAAAAAAAAAAAAAAA;
    slave_mem_fifo_op_rv = 1'h0;
    slave_mem_fifo_rx_rv = 90'h2AAAAAAAAAAAAAAAAAAAAAA;
    slave_mem_fifo_tx_rv = 174'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    slave_mem_first = 1'h0;
    slave_mem_start = 1'h0;
    slave_other_ctrl_reg = 78'h2AAAAAAAAAAAAAAAAAAA;
    slave_other_fifo_op_rv = 1'h0;
    slave_other_fifo_rx_rv = 90'h2AAAAAAAAAAAAAAAAAAAAAA;
    slave_other_fifo_tx_rv =
	174'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    slave_other_first = 1'h0;
    slave_other_start = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      begin
        v__h162734 = $time;
	#0;
      end
    if (RST_N != `BSV_RESET_VALUE) $write(v__h162734, " Burst:");
    if (RST_N != `BSV_RESET_VALUE)
      if (SEL_ARR_masterX_0_ifc_request_reg_8_BITS_136_T_ETC___d2207 == 3'd0)
	$write("SINGLE");
    if (RST_N != `BSV_RESET_VALUE)
      if (SEL_ARR_masterX_0_ifc_request_reg_8_BITS_136_T_ETC___d2207 == 3'd1)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (SEL_ARR_masterX_0_ifc_request_reg_8_BITS_136_T_ETC___d2207 == 3'd2)
	$write("WRAP4");
    if (RST_N != `BSV_RESET_VALUE)
      if (SEL_ARR_masterX_0_ifc_request_reg_8_BITS_136_T_ETC___d2207 == 3'd3)
	$write("INCR4");
    if (RST_N != `BSV_RESET_VALUE)
      if (SEL_ARR_masterX_0_ifc_request_reg_8_BITS_136_T_ETC___d2207 == 3'd4)
	$write("WRAP8");
    if (RST_N != `BSV_RESET_VALUE)
      if (SEL_ARR_masterX_0_ifc_request_reg_8_BITS_136_T_ETC___d2207 == 3'd5)
	$write("INCR8");
    if (RST_N != `BSV_RESET_VALUE)
      if (SEL_ARR_masterX_0_ifc_request_reg_8_BITS_136_T_ETC___d2207 == 3'd6)
	$write("WRAP16");
    if (RST_N != `BSV_RESET_VALUE)
      if (SEL_ARR_masterX_0_ifc_request_reg_8_BITS_136_T_ETC___d2207 !=
	  3'd0 &&
	  SEL_ARR_masterX_0_ifc_request_reg_8_BITS_136_T_ETC___d2207 !=
	  3'd1 &&
	  SEL_ARR_masterX_0_ifc_request_reg_8_BITS_136_T_ETC___d2207 !=
	  3'd2 &&
	  SEL_ARR_masterX_0_ifc_request_reg_8_BITS_136_T_ETC___d2207 !=
	  3'd3 &&
	  SEL_ARR_masterX_0_ifc_request_reg_8_BITS_136_T_ETC___d2207 !=
	  3'd4 &&
	  SEL_ARR_masterX_0_ifc_request_reg_8_BITS_136_T_ETC___d2207 !=
	  3'd5 &&
	  SEL_ARR_masterX_0_ifc_request_reg_8_BITS_136_T_ETC___d2207 != 3'd6)
	$write("INCR16");
    if (RST_N != `BSV_RESET_VALUE)
      $write(" Req_prev: %d, Request: %d, Started: %d, Hready: %d, Remaining: %d, Transfer:",
	     ahb_bus_monitor_request_prev,
	     SEL_ARR_masterX_0_req_wire_whas__188_AND_maste_ETC___d2201,
	     ahb_bus_monitor_started,
	     ahb_bus_monitor_hready$wget,
	     ahb_bus_monitor_remaining_reg);
    if (RST_N != `BSV_RESET_VALUE)
      if (SEL_ARR_masterX_0_ifc_request_reg_8_BITS_133_T_ETC___d2203 == 2'd0)
	$write("IDLE");
    if (RST_N != `BSV_RESET_VALUE)
      if (SEL_ARR_masterX_0_ifc_request_reg_8_BITS_133_T_ETC___d2203 == 2'd1)
	$write("BUSY");
    if (RST_N != `BSV_RESET_VALUE)
      if (SEL_ARR_masterX_0_ifc_request_reg_8_BITS_133_T_ETC___d2203 == 2'd2)
	$write("NONSEQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (SEL_ARR_masterX_0_ifc_request_reg_8_BITS_133_T_ETC___d2203 !=
	  2'd0 &&
	  SEL_ARR_masterX_0_ifc_request_reg_8_BITS_133_T_ETC___d2203 !=
	  2'd1 &&
	  SEL_ARR_masterX_0_ifc_request_reg_8_BITS_133_T_ETC___d2203 != 2'd2)
	$write("SEQ");
    if (RST_N != `BSV_RESET_VALUE) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_masterX_0_grab_invalid_response) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ahb_bus_0_send_lock) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_masterX_1_grab_invalid_response) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ahb_bus_1_send_lock) $write("");
  end
  // synopsys translate_on
endmodule  // mkahb

