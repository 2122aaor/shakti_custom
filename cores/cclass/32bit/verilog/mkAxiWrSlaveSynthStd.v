//
// Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
//
// On Tue Mar 28 10:02:45 IST 2017
//
//
// Ports:
// Name                         I/O  size props
// tlm_tx_get                     O   119
// RDY_tlm_tx_get                 O     1
// RDY_tlm_rx_put                 O     1
// AWREADY                        O     1
// WREADY                         O     1
// BID                            O     4 reg
// BRESP                          O     2 reg
// BVALID                         O     1
// addrMatch                      O     1 const
// RDY_addrMatch                  O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// tlm_rx_put                     I    67
// AWID                           I     4
// AWADDR                         I    32
// AWLEN                          I     4
// AWSIZE                         I     3
// AWBURST                        I     2
// AWLOCK                         I     2
// AWCACHE                        I     4
// AWPROT                         I     3
// AWVALID                        I     1
// WID                            I     4
// WDATA                          I    32
// WSTRB                          I     4
// WLAST                          I     1
// WVALID                         I     1
// BREADY                         I     1
// addrMatch_value                I    32 unused
// EN_tlm_rx_put                  I     1
// EN_tlm_tx_get                  I     1
//
// Combinational paths from inputs to outputs:
//   (AWID,
//    AWADDR,
//    AWLEN,
//    AWSIZE,
//    AWBURST,
//    AWLOCK,
//    AWCACHE,
//    AWPROT,
//    AWVALID,
//    WID,
//    WDATA,
//    WSTRB,
//    WLAST,
//    WVALID) -> RDY_tlm_tx_get
//   (AWID,
//    AWADDR,
//    AWLEN,
//    AWSIZE,
//    AWBURST,
//    AWLOCK,
//    AWCACHE,
//    AWPROT,
//    AWVALID,
//    WID,
//    WDATA,
//    WSTRB,
//    WLAST,
//    WVALID) -> tlm_tx_get
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkAxiWrSlaveSynthStd(CLK,
			    RST_N,

			    EN_tlm_tx_get,
			    tlm_tx_get,
			    RDY_tlm_tx_get,

			    tlm_rx_put,
			    EN_tlm_rx_put,
			    RDY_tlm_rx_put,

			    AWID,

			    AWADDR,

			    AWLEN,

			    AWSIZE,

			    AWBURST,

			    AWLOCK,

			    AWCACHE,

			    AWPROT,

			    AWVALID,

			    AWREADY,

			    WID,

			    WDATA,

			    WSTRB,

			    WLAST,

			    WVALID,

			    WREADY,

			    BREADY,

			    BID,

			    BRESP,

			    BVALID,

			    addrMatch_value,
			    addrMatch,
			    RDY_addrMatch);
  input  CLK;
  input  RST_N;

  // actionvalue method tlm_tx_get
  input  EN_tlm_tx_get;
  output [118 : 0] tlm_tx_get;
  output RDY_tlm_tx_get;

  // action method tlm_rx_put
  input  [66 : 0] tlm_rx_put;
  input  EN_tlm_rx_put;
  output RDY_tlm_rx_put;

  // action method fabric_bus_awID
  input  [3 : 0] AWID;

  // action method fabric_bus_awADDR
  input  [31 : 0] AWADDR;

  // action method fabric_bus_awLEN
  input  [3 : 0] AWLEN;

  // action method fabric_bus_awSIZE
  input  [2 : 0] AWSIZE;

  // action method fabric_bus_awBURST
  input  [1 : 0] AWBURST;

  // action method fabric_bus_awLOCK
  input  [1 : 0] AWLOCK;

  // action method fabric_bus_awCACHE
  input  [3 : 0] AWCACHE;

  // action method fabric_bus_awPROT
  input  [2 : 0] AWPROT;

  // action method fabric_bus_awVALID
  input  AWVALID;

  // value method fabric_bus_awREADY
  output AWREADY;

  // action method fabric_bus_wID
  input  [3 : 0] WID;

  // action method fabric_bus_wDATA
  input  [31 : 0] WDATA;

  // action method fabric_bus_wSTRB
  input  [3 : 0] WSTRB;

  // action method fabric_bus_wLAST
  input  WLAST;

  // action method fabric_bus_wVALID
  input  WVALID;

  // value method fabric_bus_wREADY
  output WREADY;

  // action method fabric_bus_bREADY
  input  BREADY;

  // value method fabric_bus_bID
  output [3 : 0] BID;

  // value method fabric_bus_bRESP
  output [1 : 0] BRESP;

  // value method fabric_bus_bVALID
  output BVALID;

  // value method fabric_addrMatch
  input  [31 : 0] addrMatch_value;
  output addrMatch;
  output RDY_addrMatch;

  // signals for module outputs
  wire [118 : 0] tlm_tx_get;
  wire [3 : 0] BID;
  wire [1 : 0] BRESP;
  wire AWREADY,
       BVALID,
       RDY_addrMatch,
       RDY_tlm_rx_put,
       RDY_tlm_tx_get,
       WREADY,
       addrMatch;

  // inlined wires
  wire [119 : 0] fifo_tx_rv$port0__write_1,
		 fifo_tx_rv$port1__read,
		 fifo_tx_rv$port1__write_1,
		 fifo_tx_rv$port2__read;
  wire [67 : 0] fifo_rx_rv$port0__write_1,
		fifo_rx_rv$port1__read,
		fifo_rx_rv$port1__write_1,
		fifo_rx_rv$port2__read;
  wire [54 : 0] wr_addr_fifo_fifof_rv$port0__write_1,
		wr_addr_fifo_fifof_rv$port1__read,
		wr_addr_fifo_fifof_rv$port1__write_1,
		wr_addr_fifo_fifof_rv$port2__read;
  wire [53 : 0] wr_addr_fifo_data_wire$wget;
  wire [41 : 0] wr_data_fifo_fifof_rv$port0__write_1,
		wr_data_fifo_fifof_rv$port1__read,
		wr_data_fifo_fifof_rv$port1__write_1,
		wr_data_fifo_fifof_rv$port2__read;
  wire [40 : 0] wr_data_fifo_data_wire$wget;
  wire fifo_rx_rv$EN_port1__write,
       fifo_tx_rv$EN_port0__write,
       wr_addr_fifo_fifof_rv$EN_port0__write,
       wr_data_fifo_fifof_rv$EN_port0__write,
       wr_data_fifo_fifof_rv$EN_port1__write;

  // register count
  reg [4 : 0] count;
  wire [4 : 0] count$D_IN;
  wire count$EN;

  // register desc_prev
  reg [117 : 0] desc_prev;
  wire [117 : 0] desc_prev$D_IN;
  wire desc_prev$EN;

  // register fifo_rx_rv
  reg [67 : 0] fifo_rx_rv;
  wire [67 : 0] fifo_rx_rv$D_IN;
  wire fifo_rx_rv$EN;

  // register fifo_tx_rv
  reg [119 : 0] fifo_tx_rv;
  wire [119 : 0] fifo_tx_rv$D_IN;
  wire fifo_tx_rv$EN;

  // register wr_addr_fifo_fifof_rv
  reg [54 : 0] wr_addr_fifo_fifof_rv;
  wire [54 : 0] wr_addr_fifo_fifof_rv$D_IN;
  wire wr_addr_fifo_fifof_rv$EN;

  // register wr_data_fifo_fifof_rv
  reg [41 : 0] wr_data_fifo_fifof_rv;
  wire [41 : 0] wr_data_fifo_fifof_rv$D_IN;
  wire wr_data_fifo_fifof_rv$EN;

  // register wr_resp_fifo_fifof_cntr_r
  reg [1 : 0] wr_resp_fifo_fifof_cntr_r;
  wire [1 : 0] wr_resp_fifo_fifof_cntr_r$D_IN;
  wire wr_resp_fifo_fifof_cntr_r$EN;

  // register wr_resp_fifo_fifof_q_0
  reg [5 : 0] wr_resp_fifo_fifof_q_0;
  reg [5 : 0] wr_resp_fifo_fifof_q_0$D_IN;
  wire wr_resp_fifo_fifof_q_0$EN;

  // register wr_resp_fifo_fifof_q_1
  reg [5 : 0] wr_resp_fifo_fifof_q_1;
  reg [5 : 0] wr_resp_fifo_fifof_q_1$D_IN;
  wire wr_resp_fifo_fifof_q_1$EN;

  // ports of submodule fifo_buffer
  wire [4 : 0] fifo_buffer$D_IN, fifo_buffer$D_OUT;
  wire fifo_buffer$CLR,
       fifo_buffer$DEQ,
       fifo_buffer$EMPTY_N,
       fifo_buffer$ENQ,
       fifo_buffer$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_every,
       CAN_FIRE_RL_grab_addr,
       CAN_FIRE_RL_grab_data,
       CAN_FIRE_RL_grap_tlm_response,
       CAN_FIRE_RL_send_axi_response,
       CAN_FIRE_RL_wr_addr_fifo_do_enq,
       CAN_FIRE_RL_wr_data_fifo_do_enq,
       CAN_FIRE_RL_wr_resp_fifo_do_deq,
       CAN_FIRE_RL_wr_resp_fifo_fifof_both,
       CAN_FIRE_RL_wr_resp_fifo_fifof_decCtr,
       CAN_FIRE_RL_wr_resp_fifo_fifof_incCtr,
       CAN_FIRE_fabric_bus_awADDR,
       CAN_FIRE_fabric_bus_awBURST,
       CAN_FIRE_fabric_bus_awCACHE,
       CAN_FIRE_fabric_bus_awID,
       CAN_FIRE_fabric_bus_awLEN,
       CAN_FIRE_fabric_bus_awLOCK,
       CAN_FIRE_fabric_bus_awPROT,
       CAN_FIRE_fabric_bus_awSIZE,
       CAN_FIRE_fabric_bus_awVALID,
       CAN_FIRE_fabric_bus_bREADY,
       CAN_FIRE_fabric_bus_wDATA,
       CAN_FIRE_fabric_bus_wID,
       CAN_FIRE_fabric_bus_wLAST,
       CAN_FIRE_fabric_bus_wSTRB,
       CAN_FIRE_fabric_bus_wVALID,
       CAN_FIRE_tlm_rx_put,
       CAN_FIRE_tlm_tx_get,
       WILL_FIRE_RL_every,
       WILL_FIRE_RL_grab_addr,
       WILL_FIRE_RL_grab_data,
       WILL_FIRE_RL_grap_tlm_response,
       WILL_FIRE_RL_send_axi_response,
       WILL_FIRE_RL_wr_addr_fifo_do_enq,
       WILL_FIRE_RL_wr_data_fifo_do_enq,
       WILL_FIRE_RL_wr_resp_fifo_do_deq,
       WILL_FIRE_RL_wr_resp_fifo_fifof_both,
       WILL_FIRE_RL_wr_resp_fifo_fifof_decCtr,
       WILL_FIRE_RL_wr_resp_fifo_fifof_incCtr,
       WILL_FIRE_fabric_bus_awADDR,
       WILL_FIRE_fabric_bus_awBURST,
       WILL_FIRE_fabric_bus_awCACHE,
       WILL_FIRE_fabric_bus_awID,
       WILL_FIRE_fabric_bus_awLEN,
       WILL_FIRE_fabric_bus_awLOCK,
       WILL_FIRE_fabric_bus_awPROT,
       WILL_FIRE_fabric_bus_awSIZE,
       WILL_FIRE_fabric_bus_awVALID,
       WILL_FIRE_fabric_bus_bREADY,
       WILL_FIRE_fabric_bus_wDATA,
       WILL_FIRE_fabric_bus_wID,
       WILL_FIRE_fabric_bus_wLAST,
       WILL_FIRE_fabric_bus_wSTRB,
       WILL_FIRE_fabric_bus_wVALID,
       WILL_FIRE_tlm_rx_put,
       WILL_FIRE_tlm_tx_get;

  // inputs to muxes for submodule ports
  wire [119 : 0] MUX_fifo_tx_rv$port0__write_1__VAL_1,
		 MUX_fifo_tx_rv$port0__write_1__VAL_2;
  wire [117 : 0] MUX_desc_prev$write_1__VAL_1, MUX_desc_prev$write_1__VAL_2;
  wire [5 : 0] MUX_wr_resp_fifo_fifof_q_0$write_1__VAL_1,
	       MUX_wr_resp_fifo_fifof_q_0$write_1__VAL_2,
	       MUX_wr_resp_fifo_fifof_q_1$write_1__VAL_2;
  wire [4 : 0] MUX_count$write_1__VAL_1, MUX_count$write_1__VAL_2;
  wire [1 : 0] MUX_wr_resp_fifo_fifof_cntr_r$write_1__VAL_2;
  wire MUX_count$write_1__SEL_1,
       MUX_count$write_1__SEL_2,
       MUX_wr_resp_fifo_fifof_q_0$write_1__SEL_1,
       MUX_wr_resp_fifo_fifof_q_0$write_1__SEL_2,
       MUX_wr_resp_fifo_fifof_q_1$write_1__SEL_1,
       MUX_wr_resp_fifo_fifof_q_1$write_1__SEL_2;

  // remaining internal signals
  reg [1 : 0] CASE_fifo_rx_rvport1__read_BITS_32_TO_31_0_fi_ETC__q2,
	      CASE_wr_addr_fifo_fifof_rvport1__read_BITS_42_ETC__q1;
  wire [39 : 0] wr_data_fifo_fifof_rv_port1__read__6_BITS_4_TO_ETC___d313;
  wire [31 : 0] _0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97,
		_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340,
		addr___1__h16818,
		addr___1__h3965,
		addr__h16719,
		addr__h3607,
		log_length__h16815,
		log_length__h3962,
		log_size__h16814,
		log_size__h3961,
		mask__h16817,
		mask__h3964,
		total__h16816,
		total__h3963,
		x__h16830,
		x__h16838,
		x__h3977,
		x__h3991,
		x_addr__h16722,
		x_addr__h3610,
		y__h16125,
		y__h16831,
		y__h28888,
		y__h3978;
  wire [9 : 0] value__h13310;
  wire [4 : 0] value__h15311, value__h22163, value__h28074, value__h9371;
  wire [2 : 0] incr__h4054, value__h16839, value__h3992;
  wire [1 : 0] wr_resp_fifo_fifof_cntr_r_5_MINUS_1___d33;
  wire _dfoo1, _dfoo3;

  // actionvalue method tlm_tx_get
  assign tlm_tx_get = fifo_tx_rv$port1__read[118:0] ;
  assign RDY_tlm_tx_get = fifo_tx_rv$port1__read[119] ;
  assign CAN_FIRE_tlm_tx_get = fifo_tx_rv$port1__read[119] ;
  assign WILL_FIRE_tlm_tx_get = EN_tlm_tx_get ;

  // action method tlm_rx_put
  assign RDY_tlm_rx_put = !fifo_rx_rv[67] ;
  assign CAN_FIRE_tlm_rx_put = !fifo_rx_rv[67] ;
  assign WILL_FIRE_tlm_rx_put = EN_tlm_rx_put ;

  // action method fabric_bus_awID
  assign CAN_FIRE_fabric_bus_awID = 1'd1 ;
  assign WILL_FIRE_fabric_bus_awID = 1'd1 ;

  // action method fabric_bus_awADDR
  assign CAN_FIRE_fabric_bus_awADDR = 1'd1 ;
  assign WILL_FIRE_fabric_bus_awADDR = 1'd1 ;

  // action method fabric_bus_awLEN
  assign CAN_FIRE_fabric_bus_awLEN = 1'd1 ;
  assign WILL_FIRE_fabric_bus_awLEN = 1'd1 ;

  // action method fabric_bus_awSIZE
  assign CAN_FIRE_fabric_bus_awSIZE = 1'd1 ;
  assign WILL_FIRE_fabric_bus_awSIZE = 1'd1 ;

  // action method fabric_bus_awBURST
  assign CAN_FIRE_fabric_bus_awBURST = 1'd1 ;
  assign WILL_FIRE_fabric_bus_awBURST = 1'd1 ;

  // action method fabric_bus_awLOCK
  assign CAN_FIRE_fabric_bus_awLOCK = 1'd1 ;
  assign WILL_FIRE_fabric_bus_awLOCK = 1'd1 ;

  // action method fabric_bus_awCACHE
  assign CAN_FIRE_fabric_bus_awCACHE = 1'd1 ;
  assign WILL_FIRE_fabric_bus_awCACHE = 1'd1 ;

  // action method fabric_bus_awPROT
  assign CAN_FIRE_fabric_bus_awPROT = 1'd1 ;
  assign WILL_FIRE_fabric_bus_awPROT = 1'd1 ;

  // action method fabric_bus_awVALID
  assign CAN_FIRE_fabric_bus_awVALID = 1'd1 ;
  assign WILL_FIRE_fabric_bus_awVALID = 1'd1 ;

  // value method fabric_bus_awREADY
  assign AWREADY = !wr_addr_fifo_fifof_rv[54] ;

  // action method fabric_bus_wID
  assign CAN_FIRE_fabric_bus_wID = 1'd1 ;
  assign WILL_FIRE_fabric_bus_wID = 1'd1 ;

  // action method fabric_bus_wDATA
  assign CAN_FIRE_fabric_bus_wDATA = 1'd1 ;
  assign WILL_FIRE_fabric_bus_wDATA = 1'd1 ;

  // action method fabric_bus_wSTRB
  assign CAN_FIRE_fabric_bus_wSTRB = 1'd1 ;
  assign WILL_FIRE_fabric_bus_wSTRB = 1'd1 ;

  // action method fabric_bus_wLAST
  assign CAN_FIRE_fabric_bus_wLAST = 1'd1 ;
  assign WILL_FIRE_fabric_bus_wLAST = 1'd1 ;

  // action method fabric_bus_wVALID
  assign CAN_FIRE_fabric_bus_wVALID = 1'd1 ;
  assign WILL_FIRE_fabric_bus_wVALID = 1'd1 ;

  // value method fabric_bus_wREADY
  assign WREADY = !wr_data_fifo_fifof_rv[41] ;

  // action method fabric_bus_bREADY
  assign CAN_FIRE_fabric_bus_bREADY = 1'd1 ;
  assign WILL_FIRE_fabric_bus_bREADY = 1'd1 ;

  // value method fabric_bus_bID
  assign BID = wr_resp_fifo_fifof_q_0[5:2] ;

  // value method fabric_bus_bRESP
  assign BRESP = wr_resp_fifo_fifof_q_0[1:0] ;

  // value method fabric_bus_bVALID
  assign BVALID = wr_resp_fifo_fifof_cntr_r != 2'd0 ;

  // value method fabric_addrMatch
  assign addrMatch = 1'd0 ;
  assign RDY_addrMatch = 1'd1 ;

  // submodule fifo_buffer
  FIFO2 #(.width(32'd5), .guarded(32'd1)) fifo_buffer(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(fifo_buffer$D_IN),
						      .ENQ(fifo_buffer$ENQ),
						      .DEQ(fifo_buffer$DEQ),
						      .CLR(fifo_buffer$CLR),
						      .D_OUT(fifo_buffer$D_OUT),
						      .FULL_N(fifo_buffer$FULL_N),
						      .EMPTY_N(fifo_buffer$EMPTY_N));

  // rule RL_every
  assign CAN_FIRE_RL_every = 1'd1 ;
  assign WILL_FIRE_RL_every = 1'd1 ;

  // rule RL_grap_tlm_response
  assign CAN_FIRE_RL_grap_tlm_response =
	     fifo_buffer$EMPTY_N && fifo_rx_rv$port1__read[67] &&
	     !fifo_buffer$D_OUT[4] ;
  assign WILL_FIRE_RL_grap_tlm_response = CAN_FIRE_RL_grap_tlm_response ;

  // rule RL_send_axi_response
  assign CAN_FIRE_RL_send_axi_response =
	     fifo_rx_rv$port1__read[67] &&
	     wr_resp_fifo_fifof_cntr_r != 2'd2 &&
	     fifo_buffer$EMPTY_N &&
	     fifo_buffer$D_OUT[4] ;
  assign WILL_FIRE_RL_send_axi_response = CAN_FIRE_RL_send_axi_response ;

  // rule RL_wr_addr_fifo_do_enq
  assign CAN_FIRE_RL_wr_addr_fifo_do_enq =
	     !wr_addr_fifo_fifof_rv[54] && AWVALID ;
  assign WILL_FIRE_RL_wr_addr_fifo_do_enq = CAN_FIRE_RL_wr_addr_fifo_do_enq ;

  // rule RL_wr_data_fifo_do_enq
  assign CAN_FIRE_RL_wr_data_fifo_do_enq =
	     !wr_data_fifo_fifof_rv[41] && WVALID ;
  assign WILL_FIRE_RL_wr_data_fifo_do_enq = CAN_FIRE_RL_wr_data_fifo_do_enq ;

  // rule RL_grab_addr
  assign CAN_FIRE_RL_grab_addr = MUX_count$write_1__SEL_1 ;
  assign WILL_FIRE_RL_grab_addr = MUX_count$write_1__SEL_1 ;

  // rule RL_grab_data
  assign CAN_FIRE_RL_grab_data = MUX_count$write_1__SEL_2 ;
  assign WILL_FIRE_RL_grab_data = MUX_count$write_1__SEL_2 ;

  // rule RL_wr_resp_fifo_do_deq
  assign CAN_FIRE_RL_wr_resp_fifo_do_deq =
	     wr_resp_fifo_fifof_cntr_r != 2'd0 && BREADY ;
  assign WILL_FIRE_RL_wr_resp_fifo_do_deq = CAN_FIRE_RL_wr_resp_fifo_do_deq ;

  // rule RL_wr_resp_fifo_fifof_incCtr
  assign CAN_FIRE_RL_wr_resp_fifo_fifof_incCtr =
	     CAN_FIRE_RL_send_axi_response && CAN_FIRE_RL_send_axi_response &&
	     !CAN_FIRE_RL_wr_resp_fifo_do_deq ;
  assign WILL_FIRE_RL_wr_resp_fifo_fifof_incCtr =
	     CAN_FIRE_RL_wr_resp_fifo_fifof_incCtr ;

  // rule RL_wr_resp_fifo_fifof_decCtr
  assign CAN_FIRE_RL_wr_resp_fifo_fifof_decCtr =
	     CAN_FIRE_RL_wr_resp_fifo_do_deq &&
	     !CAN_FIRE_RL_send_axi_response ;
  assign WILL_FIRE_RL_wr_resp_fifo_fifof_decCtr =
	     CAN_FIRE_RL_wr_resp_fifo_fifof_decCtr ;

  // rule RL_wr_resp_fifo_fifof_both
  assign CAN_FIRE_RL_wr_resp_fifo_fifof_both =
	     CAN_FIRE_RL_send_axi_response &&
	     CAN_FIRE_RL_wr_resp_fifo_do_deq &&
	     CAN_FIRE_RL_send_axi_response ;
  assign WILL_FIRE_RL_wr_resp_fifo_fifof_both =
	     CAN_FIRE_RL_wr_resp_fifo_fifof_both ;

  // inputs to muxes for submodule ports
  assign MUX_count$write_1__SEL_1 =
	     wr_addr_fifo_fifof_rv$port1__read[54] &&
	     wr_data_fifo_fifof_rv$port1__read[41] &&
	     !fifo_tx_rv[119] &&
	     fifo_buffer$FULL_N &&
	     count == 5'd0 ;
  assign MUX_count$write_1__SEL_2 =
	     wr_data_fifo_fifof_rv$port1__read[41] && !fifo_tx_rv[119] &&
	     fifo_buffer$FULL_N &&
	     count != 5'd0 ;
  assign MUX_wr_resp_fifo_fifof_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_wr_resp_fifo_fifof_incCtr &&
	     wr_resp_fifo_fifof_cntr_r == 2'd0 ;
  assign MUX_wr_resp_fifo_fifof_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_wr_resp_fifo_fifof_both && _dfoo3 ;
  assign MUX_wr_resp_fifo_fifof_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_wr_resp_fifo_fifof_incCtr &&
	     wr_resp_fifo_fifof_cntr_r == 2'd1 ;
  assign MUX_wr_resp_fifo_fifof_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_wr_resp_fifo_fifof_both && _dfoo1 ;
  assign MUX_count$write_1__VAL_1 =
	     { 1'd0, wr_addr_fifo_fifof_rv$port1__read[49:46] } ;
  assign MUX_count$write_1__VAL_2 = count - 5'd1 ;
  assign MUX_desc_prev$write_1__VAL_1 =
	     { 4'd4,
	       x_addr__h3610,
	       wr_data_fifo_fifof_rv$port1__read[36:5],
	       value__h13310,
	       wr_data_fifo_fifof_rv_port1__read__6_BITS_4_TO_ETC___d313 } ;
  assign MUX_desc_prev$write_1__VAL_2 =
	     { desc_prev[117:114],
	       x_addr__h16722,
	       wr_data_fifo_fifof_rv$port1__read[36:5],
	       desc_prev[49:40],
	       wr_data_fifo_fifof_rv$port1__read[4:1],
	       desc_prev[35:0] } ;
  assign MUX_fifo_tx_rv$port0__write_1__VAL_1 =
	     { 6'd36,
	       wr_addr_fifo_fifof_rv$port1__read[31:0],
	       wr_data_fifo_fifof_rv$port1__read[36:5],
	       10'd1,
	       wr_data_fifo_fifof_rv_port1__read__6_BITS_4_TO_ETC___d313 } ;
  assign MUX_fifo_tx_rv$port0__write_1__VAL_2 =
	     { 2'd2,
	       desc_prev[117:82],
	       wr_data_fifo_fifof_rv$port1__read[36:5],
	       10'd1,
	       wr_data_fifo_fifof_rv$port1__read[4:1],
	       desc_prev[35:0] } ;
  assign MUX_wr_resp_fifo_fifof_cntr_r$write_1__VAL_2 =
	     wr_resp_fifo_fifof_cntr_r + 2'd1 ;
  assign MUX_wr_resp_fifo_fifof_q_0$write_1__VAL_1 =
	     { fifo_buffer$D_OUT[3:0],
	       CASE_fifo_rx_rvport1__read_BITS_32_TO_31_0_fi_ETC__q2 } ;
  assign MUX_wr_resp_fifo_fifof_q_0$write_1__VAL_2 =
	     (wr_resp_fifo_fifof_cntr_r == 2'd1) ?
	       MUX_wr_resp_fifo_fifof_q_0$write_1__VAL_1 :
	       wr_resp_fifo_fifof_q_1 ;
  assign MUX_wr_resp_fifo_fifof_q_1$write_1__VAL_2 =
	     (wr_resp_fifo_fifof_cntr_r == 2'd2) ?
	       MUX_wr_resp_fifo_fifof_q_0$write_1__VAL_1 :
	       6'd0 ;

  // inlined wires
  assign wr_addr_fifo_data_wire$wget =
	     { AWID,
	       AWLEN,
	       AWSIZE,
	       AWBURST,
	       AWLOCK,
	       AWCACHE,
	       AWPROT,
	       AWADDR } ;
  assign wr_data_fifo_data_wire$wget = { WID, WDATA, WSTRB, WLAST } ;
  assign wr_addr_fifo_fifof_rv$EN_port0__write =
	     !wr_addr_fifo_fifof_rv[54] && AWVALID ;
  assign wr_addr_fifo_fifof_rv$port0__write_1 =
	     { 1'd1, wr_addr_fifo_data_wire$wget } ;
  assign wr_addr_fifo_fifof_rv$port1__read =
	     wr_addr_fifo_fifof_rv$EN_port0__write ?
	       wr_addr_fifo_fifof_rv$port0__write_1 :
	       wr_addr_fifo_fifof_rv ;
  assign wr_addr_fifo_fifof_rv$port1__write_1 =
	     { 1'd0, 54'h2AAAAAAAAAAAAA /* unspecified value */  } ;
  assign wr_addr_fifo_fifof_rv$port2__read =
	     MUX_count$write_1__SEL_1 ?
	       wr_addr_fifo_fifof_rv$port1__write_1 :
	       wr_addr_fifo_fifof_rv$port1__read ;
  assign wr_data_fifo_fifof_rv$EN_port0__write =
	     !wr_data_fifo_fifof_rv[41] && WVALID ;
  assign wr_data_fifo_fifof_rv$port0__write_1 =
	     { 1'd1, wr_data_fifo_data_wire$wget } ;
  assign wr_data_fifo_fifof_rv$port1__read =
	     wr_data_fifo_fifof_rv$EN_port0__write ?
	       wr_data_fifo_fifof_rv$port0__write_1 :
	       wr_data_fifo_fifof_rv ;
  assign wr_data_fifo_fifof_rv$EN_port1__write =
	     WILL_FIRE_RL_grab_data || WILL_FIRE_RL_grab_addr ;
  assign wr_data_fifo_fifof_rv$port1__write_1 =
	     { 1'd0, 41'h0AAAAAAAAAA /* unspecified value */  } ;
  assign wr_data_fifo_fifof_rv$port2__read =
	     wr_data_fifo_fifof_rv$EN_port1__write ?
	       wr_data_fifo_fifof_rv$port1__write_1 :
	       wr_data_fifo_fifof_rv$port1__read ;
  assign fifo_tx_rv$EN_port0__write =
	     WILL_FIRE_RL_grab_addr || WILL_FIRE_RL_grab_data ;
  assign fifo_tx_rv$port0__write_1 =
	     WILL_FIRE_RL_grab_addr ?
	       MUX_fifo_tx_rv$port0__write_1__VAL_1 :
	       MUX_fifo_tx_rv$port0__write_1__VAL_2 ;
  assign fifo_tx_rv$port1__read =
	     fifo_tx_rv$EN_port0__write ?
	       fifo_tx_rv$port0__write_1 :
	       fifo_tx_rv ;
  assign fifo_tx_rv$port1__write_1 =
	     { 1'd0,
	       119'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  } ;
  assign fifo_tx_rv$port2__read =
	     EN_tlm_tx_get ?
	       fifo_tx_rv$port1__write_1 :
	       fifo_tx_rv$port1__read ;
  assign fifo_rx_rv$port0__write_1 = { 1'd1, tlm_rx_put } ;
  assign fifo_rx_rv$port1__read =
	     EN_tlm_rx_put ? fifo_rx_rv$port0__write_1 : fifo_rx_rv ;
  assign fifo_rx_rv$EN_port1__write =
	     WILL_FIRE_RL_send_axi_response ||
	     WILL_FIRE_RL_grap_tlm_response ;
  assign fifo_rx_rv$port1__write_1 =
	     { 1'd0, 67'h2AAAAAAAAAAAAAAAA /* unspecified value */  } ;
  assign fifo_rx_rv$port2__read =
	     fifo_rx_rv$EN_port1__write ?
	       fifo_rx_rv$port1__write_1 :
	       fifo_rx_rv$port1__read ;

  // register count
  assign count$D_IN =
	     WILL_FIRE_RL_grab_addr ?
	       MUX_count$write_1__VAL_1 :
	       MUX_count$write_1__VAL_2 ;
  assign count$EN = WILL_FIRE_RL_grab_addr || WILL_FIRE_RL_grab_data ;

  // register desc_prev
  assign desc_prev$D_IN =
	     WILL_FIRE_RL_grab_addr ?
	       MUX_desc_prev$write_1__VAL_1 :
	       MUX_desc_prev$write_1__VAL_2 ;
  assign desc_prev$EN = WILL_FIRE_RL_grab_addr || WILL_FIRE_RL_grab_data ;

  // register fifo_rx_rv
  assign fifo_rx_rv$D_IN = fifo_rx_rv$port2__read ;
  assign fifo_rx_rv$EN = 1'b1 ;

  // register fifo_tx_rv
  assign fifo_tx_rv$D_IN = fifo_tx_rv$port2__read ;
  assign fifo_tx_rv$EN = 1'b1 ;

  // register wr_addr_fifo_fifof_rv
  assign wr_addr_fifo_fifof_rv$D_IN = wr_addr_fifo_fifof_rv$port2__read ;
  assign wr_addr_fifo_fifof_rv$EN = 1'b1 ;

  // register wr_data_fifo_fifof_rv
  assign wr_data_fifo_fifof_rv$D_IN = wr_data_fifo_fifof_rv$port2__read ;
  assign wr_data_fifo_fifof_rv$EN = 1'b1 ;

  // register wr_resp_fifo_fifof_cntr_r
  assign wr_resp_fifo_fifof_cntr_r$D_IN =
	     WILL_FIRE_RL_wr_resp_fifo_fifof_decCtr ?
	       wr_resp_fifo_fifof_cntr_r_5_MINUS_1___d33 :
	       MUX_wr_resp_fifo_fifof_cntr_r$write_1__VAL_2 ;
  assign wr_resp_fifo_fifof_cntr_r$EN =
	     WILL_FIRE_RL_wr_resp_fifo_fifof_decCtr ||
	     WILL_FIRE_RL_wr_resp_fifo_fifof_incCtr ;

  // register wr_resp_fifo_fifof_q_0
  always@(MUX_wr_resp_fifo_fifof_q_0$write_1__SEL_1 or
	  MUX_wr_resp_fifo_fifof_q_0$write_1__VAL_1 or
	  MUX_wr_resp_fifo_fifof_q_0$write_1__SEL_2 or
	  MUX_wr_resp_fifo_fifof_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_wr_resp_fifo_fifof_decCtr or wr_resp_fifo_fifof_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wr_resp_fifo_fifof_q_0$write_1__SEL_1:
	  wr_resp_fifo_fifof_q_0$D_IN =
	      MUX_wr_resp_fifo_fifof_q_0$write_1__VAL_1;
      MUX_wr_resp_fifo_fifof_q_0$write_1__SEL_2:
	  wr_resp_fifo_fifof_q_0$D_IN =
	      MUX_wr_resp_fifo_fifof_q_0$write_1__VAL_2;
      WILL_FIRE_RL_wr_resp_fifo_fifof_decCtr:
	  wr_resp_fifo_fifof_q_0$D_IN = wr_resp_fifo_fifof_q_1;
      default: wr_resp_fifo_fifof_q_0$D_IN =
		   6'b101010 /* unspecified value */ ;
    endcase
  end
  assign wr_resp_fifo_fifof_q_0$EN =
	     WILL_FIRE_RL_wr_resp_fifo_fifof_incCtr &&
	     wr_resp_fifo_fifof_cntr_r == 2'd0 ||
	     WILL_FIRE_RL_wr_resp_fifo_fifof_both && _dfoo3 ||
	     WILL_FIRE_RL_wr_resp_fifo_fifof_decCtr ;

  // register wr_resp_fifo_fifof_q_1
  always@(MUX_wr_resp_fifo_fifof_q_1$write_1__SEL_1 or
	  MUX_wr_resp_fifo_fifof_q_0$write_1__VAL_1 or
	  MUX_wr_resp_fifo_fifof_q_1$write_1__SEL_2 or
	  MUX_wr_resp_fifo_fifof_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_wr_resp_fifo_fifof_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_wr_resp_fifo_fifof_q_1$write_1__SEL_1:
	  wr_resp_fifo_fifof_q_1$D_IN =
	      MUX_wr_resp_fifo_fifof_q_0$write_1__VAL_1;
      MUX_wr_resp_fifo_fifof_q_1$write_1__SEL_2:
	  wr_resp_fifo_fifof_q_1$D_IN =
	      MUX_wr_resp_fifo_fifof_q_1$write_1__VAL_2;
      WILL_FIRE_RL_wr_resp_fifo_fifof_decCtr:
	  wr_resp_fifo_fifof_q_1$D_IN = 6'd0;
      default: wr_resp_fifo_fifof_q_1$D_IN =
		   6'b101010 /* unspecified value */ ;
    endcase
  end
  assign wr_resp_fifo_fifof_q_1$EN =
	     WILL_FIRE_RL_wr_resp_fifo_fifof_incCtr &&
	     wr_resp_fifo_fifof_cntr_r == 2'd1 ||
	     WILL_FIRE_RL_wr_resp_fifo_fifof_both && _dfoo1 ||
	     WILL_FIRE_RL_wr_resp_fifo_fifof_decCtr ;

  // submodule fifo_buffer
  assign fifo_buffer$D_IN =
	     { wr_data_fifo_fifof_rv$port1__read[0],
	       wr_data_fifo_fifof_rv$port1__read[40:37] } ;
  assign fifo_buffer$ENQ = WILL_FIRE_RL_grab_data || WILL_FIRE_RL_grab_addr ;
  assign fifo_buffer$DEQ =
	     WILL_FIRE_RL_send_axi_response ||
	     WILL_FIRE_RL_grap_tlm_response ;
  assign fifo_buffer$CLR = 1'b0 ;

  // remaining internal signals
  assign _0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97 =
	     { 30'd0, incr__h4054[1:0] } + 32'd1 ;
  assign _0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340 =
	     { 30'd0, desc_prev[33:32] } + 32'd1 ;
  assign _dfoo1 =
	     wr_resp_fifo_fifof_cntr_r != 2'd2 ||
	     wr_resp_fifo_fifof_cntr_r_5_MINUS_1___d33 == 2'd1 ;
  assign _dfoo3 =
	     wr_resp_fifo_fifof_cntr_r != 2'd1 ||
	     wr_resp_fifo_fifof_cntr_r_5_MINUS_1___d33 == 2'd0 ;
  assign addr___1__h16818 = x__h16830 | y__h16831 ;
  assign addr___1__h3965 = x__h3977 | y__h3978 ;
  assign addr__h16719 = desc_prev[113:82] + x__h16838 ;
  assign addr__h3607 = wr_addr_fifo_fifof_rv$port1__read[31:0] + x__h3991 ;
  assign incr__h4054 =
	     (3'd1 << wr_addr_fifo_fifof_rv$port1__read[45:43]) - 3'd1 ;
  assign log_length__h16815 =
	     (desc_prev[40] || desc_prev[41] || desc_prev[42] ||
	      desc_prev[43] ||
	      desc_prev[44] ||
	      desc_prev[45] ||
	      desc_prev[46] ||
	      desc_prev[47] ||
	      desc_prev[48] ||
	      desc_prev[49]) ?
	       { 27'd0, value__h28074 } :
	       32'd32 ;
  assign log_length__h3962 =
	     (value__h13310[0] || value__h13310[1] || value__h13310[2] ||
	      value__h13310[3] ||
	      value__h13310[4] ||
	      value__h13310[5] ||
	      value__h13310[6] ||
	      value__h13310[7] ||
	      value__h13310[8] ||
	      value__h13310[9]) ?
	       { 27'd0, value__h15311 } :
	       32'd32 ;
  assign log_size__h16814 =
	     (_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[0] ||
	      _0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[1] ||
	      _0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[2] ||
	      _0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[3] ||
	      _0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[4] ||
	      _0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[5] ||
	      _0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[6] ||
	      _0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[7] ||
	      _0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[8] ||
	      _0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[9] ||
	      _0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[10] ||
	      _0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[11] ||
	      _0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[12] ||
	      _0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[13] ||
	      _0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[14] ||
	      _0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[15] ||
	      _0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[16] ||
	      _0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[17] ||
	      _0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[18] ||
	      _0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[19] ||
	      _0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[20] ||
	      _0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[21] ||
	      _0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[22] ||
	      _0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[23] ||
	      _0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[24] ||
	      _0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[25] ||
	      _0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[26] ||
	      _0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[27] ||
	      _0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[28] ||
	      _0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[29] ||
	      _0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[30] ||
	      _0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[31]) ?
	       { 27'd0, value__h22163 } :
	       32'd32 ;
  assign log_size__h3961 =
	     (_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[0] ||
	      _0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[1] ||
	      _0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[2] ||
	      _0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[3] ||
	      _0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[4] ||
	      _0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[5] ||
	      _0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[6] ||
	      _0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[7] ||
	      _0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[8] ||
	      _0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[9] ||
	      _0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[10] ||
	      _0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[11] ||
	      _0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[12] ||
	      _0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[13] ||
	      _0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[14] ||
	      _0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[15] ||
	      _0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[16] ||
	      _0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[17] ||
	      _0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[18] ||
	      _0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[19] ||
	      _0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[20] ||
	      _0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[21] ||
	      _0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[22] ||
	      _0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[23] ||
	      _0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[24] ||
	      _0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[25] ||
	      _0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[26] ||
	      _0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[27] ||
	      _0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[28] ||
	      _0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[29] ||
	      _0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[30] ||
	      _0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[31]) ?
	       { 27'd0, value__h9371 } :
	       32'd32 ;
  assign mask__h16817 = (32'd1 << total__h16816) - 32'd1 ;
  assign mask__h3964 = (32'd1 << total__h3963) - 32'd1 ;
  assign total__h16816 = log_size__h16814 + log_length__h16815 ;
  assign total__h3963 = log_size__h3961 + log_length__h3962 ;
  assign value__h13310 =
	     { 6'd0, wr_addr_fifo_fifof_rv$port1__read[49:46] } + 10'd1 ;
  assign value__h15311 =
	     (!value__h13310[0] && !value__h13310[1] && !value__h13310[2] &&
	      !value__h13310[3] &&
	      !value__h13310[4] &&
	      !value__h13310[5] &&
	      !value__h13310[6] &&
	      !value__h13310[7]) ?
	       (value__h13310[8] ? 5'd8 : 5'd9) :
	       ((!value__h13310[0] && !value__h13310[1] &&
		 !value__h13310[2] &&
		 !value__h13310[3]) ?
		  ((!value__h13310[4] && !value__h13310[5]) ?
		     (value__h13310[6] ? 5'd6 : 5'd7) :
		     (value__h13310[4] ? 5'd4 : 5'd5)) :
		  ((!value__h13310[0] && !value__h13310[1]) ?
		     (value__h13310[2] ? 5'd2 : 5'd3) :
		     (value__h13310[0] ? 5'd0 : 5'd1))) ;
  assign value__h16839 =
	     (desc_prev[35:34] == 2'd2) ?
	       3'd0 :
	       { 1'd0, desc_prev[33:32] } + 3'd1 ;
  assign value__h22163 =
	     (!_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[0] &&
	      !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[1] &&
	      !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[2] &&
	      !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[3] &&
	      !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[4] &&
	      !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[5] &&
	      !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[6] &&
	      !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[7] &&
	      !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[8] &&
	      !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[9] &&
	      !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[10] &&
	      !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[11] &&
	      !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[12] &&
	      !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[13] &&
	      !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[14] &&
	      !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[15]) ?
	       ((!_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[16] &&
		 !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[17] &&
		 !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[18] &&
		 !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[19] &&
		 !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[20] &&
		 !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[21] &&
		 !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[22] &&
		 !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[23]) ?
		  ((!_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[24] &&
		    !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[25] &&
		    !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[26] &&
		    !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[27]) ?
		     ((!_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[28] &&
		       !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[29]) ?
			(_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[30] ?
			   5'd30 :
			   5'd31) :
			(_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[28] ?
			   5'd28 :
			   5'd29)) :
		     ((!_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[24] &&
		       !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[25]) ?
			(_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[26] ?
			   5'd26 :
			   5'd27) :
			(_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[24] ?
			   5'd24 :
			   5'd25))) :
		  ((!_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[16] &&
		    !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[17] &&
		    !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[18] &&
		    !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[19]) ?
		     ((!_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[20] &&
		       !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[21]) ?
			(_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[22] ?
			   5'd22 :
			   5'd23) :
			(_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[20] ?
			   5'd20 :
			   5'd21)) :
		     ((!_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[16] &&
		       !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[17]) ?
			(_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[18] ?
			   5'd18 :
			   5'd19) :
			(_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[16] ?
			   5'd16 :
			   5'd17)))) :
	       ((!_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[0] &&
		 !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[1] &&
		 !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[2] &&
		 !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[3] &&
		 !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[4] &&
		 !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[5] &&
		 !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[6] &&
		 !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[7]) ?
		  ((!_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[8] &&
		    !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[9] &&
		    !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[10] &&
		    !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[11]) ?
		     ((!_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[12] &&
		       !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[13]) ?
			(_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[14] ?
			   5'd14 :
			   5'd15) :
			(_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[12] ?
			   5'd12 :
			   5'd13)) :
		     ((!_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[8] &&
		       !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[9]) ?
			(_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[10] ?
			   5'd10 :
			   5'd11) :
			(_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[8] ?
			   5'd8 :
			   5'd9))) :
		  ((!_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[0] &&
		    !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[1] &&
		    !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[2] &&
		    !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[3]) ?
		     ((!_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[4] &&
		       !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[5]) ?
			(_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[6] ?
			   5'd6 :
			   5'd7) :
			(_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[4] ?
			   5'd4 :
			   5'd5)) :
		     ((!_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[0] &&
		       !_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[1]) ?
			(_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[2] ?
			   5'd2 :
			   5'd3) :
			(_0_CONCAT_desc_prev_27_BITS_33_TO_32_33_39_PLUS_1___d340[0] ?
			   5'd0 :
			   5'd1)))) ;
  assign value__h28074 =
	     (!desc_prev[40] && !desc_prev[41] && !desc_prev[42] &&
	      !desc_prev[43] &&
	      !desc_prev[44] &&
	      !desc_prev[45] &&
	      !desc_prev[46] &&
	      !desc_prev[47]) ?
	       (desc_prev[48] ? 5'd8 : 5'd9) :
	       ((!desc_prev[40] && !desc_prev[41] && !desc_prev[42] &&
		 !desc_prev[43]) ?
		  ((!desc_prev[44] && !desc_prev[45]) ?
		     (desc_prev[46] ? 5'd6 : 5'd7) :
		     (desc_prev[44] ? 5'd4 : 5'd5)) :
		  ((!desc_prev[40] && !desc_prev[41]) ?
		     (desc_prev[42] ? 5'd2 : 5'd3) :
		     (desc_prev[40] ? 5'd0 : 5'd1))) ;
  assign value__h3992 =
	     (wr_addr_fifo_fifof_rv$port1__read[42:41] == 2'd0) ?
	       3'd0 :
	       { 1'd0, incr__h4054[1:0] } + 3'd1 ;
  assign value__h9371 =
	     (!_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[0] &&
	      !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[1] &&
	      !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[2] &&
	      !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[3] &&
	      !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[4] &&
	      !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[5] &&
	      !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[6] &&
	      !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[7] &&
	      !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[8] &&
	      !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[9] &&
	      !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[10] &&
	      !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[11] &&
	      !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[12] &&
	      !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[13] &&
	      !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[14] &&
	      !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[15]) ?
	       ((!_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[16] &&
		 !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[17] &&
		 !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[18] &&
		 !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[19] &&
		 !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[20] &&
		 !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[21] &&
		 !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[22] &&
		 !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[23]) ?
		  ((!_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[24] &&
		    !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[25] &&
		    !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[26] &&
		    !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[27]) ?
		     ((!_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[28] &&
		       !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[29]) ?
			(_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[30] ?
			   5'd30 :
			   5'd31) :
			(_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[28] ?
			   5'd28 :
			   5'd29)) :
		     ((!_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[24] &&
		       !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[25]) ?
			(_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[26] ?
			   5'd26 :
			   5'd27) :
			(_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[24] ?
			   5'd24 :
			   5'd25))) :
		  ((!_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[16] &&
		    !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[17] &&
		    !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[18] &&
		    !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[19]) ?
		     ((!_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[20] &&
		       !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[21]) ?
			(_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[22] ?
			   5'd22 :
			   5'd23) :
			(_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[20] ?
			   5'd20 :
			   5'd21)) :
		     ((!_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[16] &&
		       !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[17]) ?
			(_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[18] ?
			   5'd18 :
			   5'd19) :
			(_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[16] ?
			   5'd16 :
			   5'd17)))) :
	       ((!_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[0] &&
		 !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[1] &&
		 !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[2] &&
		 !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[3] &&
		 !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[4] &&
		 !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[5] &&
		 !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[6] &&
		 !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[7]) ?
		  ((!_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[8] &&
		    !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[9] &&
		    !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[10] &&
		    !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[11]) ?
		     ((!_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[12] &&
		       !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[13]) ?
			(_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[14] ?
			   5'd14 :
			   5'd15) :
			(_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[12] ?
			   5'd12 :
			   5'd13)) :
		     ((!_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[8] &&
		       !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[9]) ?
			(_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[10] ?
			   5'd10 :
			   5'd11) :
			(_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[8] ?
			   5'd8 :
			   5'd9))) :
		  ((!_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[0] &&
		    !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[1] &&
		    !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[2] &&
		    !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[3]) ?
		     ((!_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[4] &&
		       !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[5]) ?
			(_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[6] ?
			   5'd6 :
			   5'd7) :
			(_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[4] ?
			   5'd4 :
			   5'd5)) :
		     ((!_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[0] &&
		       !_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[1]) ?
			(_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[2] ?
			   5'd2 :
			   5'd3) :
			(_0_CONCAT_1_SL_wr_addr_fifo_fifof_rv_port1__rea_ETC___d97[0] ?
			   5'd0 :
			   5'd1)))) ;
  assign wr_data_fifo_fifof_rv_port1__read__6_BITS_4_TO_ETC___d313 =
	     { wr_data_fifo_fifof_rv$port1__read[4:1],
	       CASE_wr_addr_fifo_fifof_rvport1__read_BITS_42_ETC__q1,
	       incr__h4054[1:0],
	       15'd0,
	       wr_addr_fifo_fifof_rv$port1__read[53:50],
	       4'd0,
	       wr_addr_fifo_fifof_rv$port1__read[40:32] } ;
  assign wr_resp_fifo_fifof_cntr_r_5_MINUS_1___d33 =
	     wr_resp_fifo_fifof_cntr_r - 2'd1 ;
  assign x__h16830 = addr__h16719 & mask__h16817 ;
  assign x__h16838 = { 29'd0, value__h16839 } ;
  assign x__h3977 = addr__h3607 & mask__h3964 ;
  assign x__h3991 = { 29'd0, value__h3992 } ;
  assign x_addr__h16722 =
	     (desc_prev[35:34] == 2'd1) ? addr___1__h16818 : addr__h16719 ;
  assign x_addr__h3610 =
	     (wr_addr_fifo_fifof_rv$port1__read[42:41] != 2'd1 &&
	      wr_addr_fifo_fifof_rv$port1__read[42:41] != 2'd0) ?
	       addr___1__h3965 :
	       addr__h3607 ;
  assign y__h16125 = ~mask__h3964 ;
  assign y__h16831 = desc_prev[113:82] & y__h28888 ;
  assign y__h28888 = ~mask__h16817 ;
  assign y__h3978 = wr_addr_fifo_fifof_rv$port1__read[31:0] & y__h16125 ;
  always@(wr_addr_fifo_fifof_rv$port1__read)
  begin
    case (wr_addr_fifo_fifof_rv$port1__read[42:41])
      2'd0: CASE_wr_addr_fifo_fifof_rvport1__read_BITS_42_ETC__q1 = 2'd2;
      2'd1: CASE_wr_addr_fifo_fifof_rvport1__read_BITS_42_ETC__q1 = 2'd0;
      default: CASE_wr_addr_fifo_fifof_rvport1__read_BITS_42_ETC__q1 = 2'd1;
    endcase
  end
  always@(fifo_rx_rv$port1__read)
  begin
    case (fifo_rx_rv$port1__read[32:31])
      2'd0:
	  CASE_fifo_rx_rvport1__read_BITS_32_TO_31_0_fi_ETC__q2 =
	      fifo_rx_rv$port1__read[32:31];
      2'd1: CASE_fifo_rx_rvport1__read_BITS_32_TO_31_0_fi_ETC__q2 = 2'd2;
      2'd2: CASE_fifo_rx_rvport1__read_BITS_32_TO_31_0_fi_ETC__q2 = 2'd3;
      2'd3: CASE_fifo_rx_rvport1__read_BITS_32_TO_31_0_fi_ETC__q2 = 2'd1;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        count <= `BSV_ASSIGNMENT_DELAY 5'd0;
	desc_prev <= `BSV_ASSIGNMENT_DELAY
	    118'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
	fifo_rx_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 67'h2AAAAAAAAAAAAAAAA /* unspecified value */  };
	fifo_tx_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      119'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  };
	wr_addr_fifo_fifof_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 54'h2AAAAAAAAAAAAA /* unspecified value */  };
	wr_data_fifo_fifof_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 41'h0AAAAAAAAAA /* unspecified value */  };
	wr_resp_fifo_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	wr_resp_fifo_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY 6'd0;
	wr_resp_fifo_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY 6'd0;
      end
    else
      begin
        if (count$EN) count <= `BSV_ASSIGNMENT_DELAY count$D_IN;
	if (desc_prev$EN) desc_prev <= `BSV_ASSIGNMENT_DELAY desc_prev$D_IN;
	if (fifo_rx_rv$EN)
	  fifo_rx_rv <= `BSV_ASSIGNMENT_DELAY fifo_rx_rv$D_IN;
	if (fifo_tx_rv$EN)
	  fifo_tx_rv <= `BSV_ASSIGNMENT_DELAY fifo_tx_rv$D_IN;
	if (wr_addr_fifo_fifof_rv$EN)
	  wr_addr_fifo_fifof_rv <= `BSV_ASSIGNMENT_DELAY
	      wr_addr_fifo_fifof_rv$D_IN;
	if (wr_data_fifo_fifof_rv$EN)
	  wr_data_fifo_fifof_rv <= `BSV_ASSIGNMENT_DELAY
	      wr_data_fifo_fifof_rv$D_IN;
	if (wr_resp_fifo_fifof_cntr_r$EN)
	  wr_resp_fifo_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      wr_resp_fifo_fifof_cntr_r$D_IN;
	if (wr_resp_fifo_fifof_q_0$EN)
	  wr_resp_fifo_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY
	      wr_resp_fifo_fifof_q_0$D_IN;
	if (wr_resp_fifo_fifof_q_1$EN)
	  wr_resp_fifo_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY
	      wr_resp_fifo_fifof_q_1$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    count = 5'h0A;
    desc_prev = 118'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    fifo_rx_rv = 68'hAAAAAAAAAAAAAAAAA;
    fifo_tx_rv = 120'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    wr_addr_fifo_fifof_rv = 55'h2AAAAAAAAAAAAA;
    wr_data_fifo_fifof_rv = 42'h2AAAAAAAAAA;
    wr_resp_fifo_fifof_cntr_r = 2'h2;
    wr_resp_fifo_fifof_q_0 = 6'h2A;
    wr_resp_fifo_fifof_q_1 = 6'h2A;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkAxiWrSlaveSynthStd

