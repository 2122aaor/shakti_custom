########################################
Usage:

Enter "make" to generate assembly instructions and simulate those instructions using ISS.
To generate random assembly instructions, enter "make generate"
The file assembly.s constitutes assembly instructions
To simulate those instructions using ISS enter "make dump"
To verify the register dump of both ISS and iclass core enter "make verify"

#########################################

For Beta Version: 

ISS - Added support for Floating Point Instructions.

AAPG - Upgraded to a new version. This generates random and valid assembly program.  

Usage: 
AAPG: 
 
Requirements
=============
- Python 3
- RISCV toolchain with the modified spike (which can be built from riscv-isa-sim-modified folder present in the repository)

Running
=============
- All the configurations are mentioned in config.py
- Build the modified riscv-isa-sim by following the readme.md provided in that folder.
- Run ./make.py in the aapg folder
- All the generated tests will be in result/
- Each test has a log.txt file that mentions memoryStartAddress and memoryStopAddress. This corresponds to the memory locations 
  the program writes to and read from. So you can see the final memory state by dumping from memoryStartAddress to memoryStopAddress.

ISS: 
   The code.hex generated by AAPG present in AAPG_beta/result/test* should be used as an input to the ISS.
   ISS can be compiled and by using the following command 
   g++ -std=c++0x ISS.cpp -o ISS
   ./ISS
   The output register dump can be compared with the RTL dump to verify functional correctness.

##########################################
