//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// On Fri Jan 22 01:17:30 IST 2016
//
//
// Ports:
// Name                         I/O  size props
// RDY__start                     O     1
// RDY_deque_buffer               O     1
// get_result                     O   105
// RDY_get_result                 O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// _start_input_sp                I    32
// _start_convert_unsigned        I     1
// _start_fsr                     I    32
// EN__start                      I     1
// EN_deque_buffer                I     1
//
// Combinational paths from inputs to outputs:
//   EN_deque_buffer -> RDY__start
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkfpu_fp_to_int(CLK,
		       RST_N,

		       _start_input_sp,
		       _start_convert_unsigned,
		       _start_fsr,
		       EN__start,
		       RDY__start,

		       EN_deque_buffer,
		       RDY_deque_buffer,

		       get_result,
		       RDY_get_result);
  input  CLK;
  input  RST_N;

  // action method _start
  input  [31 : 0] _start_input_sp;
  input  _start_convert_unsigned;
  input  [31 : 0] _start_fsr;
  input  EN__start;
  output RDY__start;

  // action method deque_buffer
  input  EN_deque_buffer;
  output RDY_deque_buffer;

  // value method get_result
  output [104 : 0] get_result;
  output RDY_get_result;

  // signals for module outputs
  wire [104 : 0] get_result;
  wire RDY__start, RDY_deque_buffer, RDY_get_result;

  // inlined wires
  wire [105 : 0] ff_final_out_rv$port1__read,
		 ff_final_out_rv$port1__write_1,
		 ff_final_out_rv$port2__read;

  // register ff_final_out_rv
  reg [105 : 0] ff_final_out_rv;
  wire [105 : 0] ff_final_out_rv$D_IN;
  wire ff_final_out_rv$EN;

  // rule scheduling signals
  wire CAN_FIRE__start,
       CAN_FIRE_deque_buffer,
       WILL_FIRE__start,
       WILL_FIRE_deque_buffer;

  // remaining internal signals
  reg [2 : 0] CASE_ff_final_out_rv_BITS_3_TO_1_0_ff_final_ou_ETC__q1;
  reg IF_start_fsr_BITS_7_TO_5_EQ_0b0_0_THEN_IF_NOT__ETC___d57;
  wire [63 : 0] v_final_result__h384;
  wire [55 : 0] IF_NOT_start_input_sp_BITS_30_TO_23_ULT_127_OR_ETC___d19,
		extended_mantissa___1__h543,
		extended_mantissa__h290,
		extended_mantissa__h639;
  wire [32 : 0] IF_IF_start_fsr_BITS_7_TO_5_EQ_0b0_0_THEN_IF_N_ETC___d60,
		IF_start_input_sp_BITS_30_TO_0_EQ_0_OR_start_i_ETC___d62,
		IF_start_input_sp_BIT_31_5_AND_NOT_start_conve_ETC___d65,
		_theResult_____4__h301,
		final_output___1__h802,
		final_output___1__h916;
  wire [31 : 0] lv_fsr__h303;
  wire [23 : 0] x__h551;
  wire [7 : 0] compl_real_exponent__h291, real_exponent__h288;
  wire [3 : 0] IF_NOT_IF_start_input_sp_BITS_30_TO_0_EQ_0_OR__ETC___d83;
  wire _theResult_____7_snd__h548,
       lv_inexact__h298,
       lv_roundup___1__h823,
       lv_roundup___1__h865,
       lv_roundup___1__h881,
       lv_sticky__h297,
       start_input_sp_BITS_30_TO_23_MINUS_127_4_ULE_31___d70,
       start_input_sp_BITS_30_TO_23_ULT_127___d6,
       x__h483,
       x__h836,
       x__h878,
       y__h835,
       y__h877,
       y__h879;

  // action method _start
  assign RDY__start = !ff_final_out_rv$port1__read[105] ;
  assign CAN_FIRE__start = !ff_final_out_rv$port1__read[105] ;
  assign WILL_FIRE__start = EN__start ;

  // action method deque_buffer
  assign RDY_deque_buffer = ff_final_out_rv[105] ;
  assign CAN_FIRE_deque_buffer = ff_final_out_rv[105] ;
  assign WILL_FIRE_deque_buffer = EN_deque_buffer ;

  // value method get_result
  assign get_result =
	     { ff_final_out_rv[104:4],
	       CASE_ff_final_out_rv_BITS_3_TO_1_0_ff_final_ou_ETC__q1,
	       ff_final_out_rv[0] } ;
  assign RDY_get_result = ff_final_out_rv[105] ;

  // inlined wires
  assign ff_final_out_rv$port1__read =
	     EN_deque_buffer ?
	       106'h0AAAAAAAAAAAAAAAAAAAAAAAAAA :
	       ff_final_out_rv ;
  assign ff_final_out_rv$port1__write_1 =
	     { 6'd42,
	       lv_fsr__h303,
	       v_final_result__h384,
	       IF_NOT_IF_start_input_sp_BITS_30_TO_0_EQ_0_OR__ETC___d83 } ;
  assign ff_final_out_rv$port2__read =
	     EN__start ?
	       ff_final_out_rv$port1__write_1 :
	       ff_final_out_rv$port1__read ;

  // register ff_final_out_rv
  assign ff_final_out_rv$D_IN = ff_final_out_rv$port2__read ;
  assign ff_final_out_rv$EN = 1'b1 ;

  // remaining internal signals
  assign IF_IF_start_fsr_BITS_7_TO_5_EQ_0b0_0_THEN_IF_N_ETC___d60 =
	     IF_start_fsr_BITS_7_TO_5_EQ_0b0_0_THEN_IF_NOT__ETC___d57 ?
	       final_output___1__h916 :
	       IF_NOT_start_input_sp_BITS_30_TO_23_ULT_127_OR_ETC___d19[55:23] ;
  assign IF_NOT_IF_start_input_sp_BITS_30_TO_0_EQ_0_OR__ETC___d83 =
	     (!_theResult_____4__h301[32] &&
	      (start_input_sp_BITS_30_TO_23_MINUS_127_4_ULE_31___d70 ||
	       start_input_sp_BITS_30_TO_23_ULT_127___d6 &&
	       _start_input_sp[30:23] != 8'd0 ||
	       _start_input_sp[30:0] == 31'd0) &&
	      !lv_inexact__h298) ?
	       4'd0 :
	       ((_theResult_____4__h301[32] ||
		 !start_input_sp_BITS_30_TO_23_MINUS_127_4_ULE_31___d70 &&
		 (!start_input_sp_BITS_30_TO_23_ULT_127___d6 ||
		  _start_input_sp[30:23] == 8'd0) &&
		 _start_input_sp[30:0] != 31'd0) ?
		  4'd3 :
		  4'd11) ;
  assign IF_NOT_start_input_sp_BITS_30_TO_23_ULT_127_OR_ETC___d19 =
	     (!start_input_sp_BITS_30_TO_23_ULT_127___d6 ||
	      _start_input_sp[30:23] == 8'd0) ?
	       extended_mantissa___1__h543 :
	       extended_mantissa__h639 ;
  assign IF_start_input_sp_BITS_30_TO_0_EQ_0_OR_start_i_ETC___d62 =
	     (_start_input_sp[30:0] == 31'd0 ||
	      _start_input_sp[31] && _start_convert_unsigned) ?
	       33'h1FFFFFFFF :
	       ~IF_IF_start_fsr_BITS_7_TO_5_EQ_0b0_0_THEN_IF_N_ETC___d60 ;
  assign IF_start_input_sp_BIT_31_5_AND_NOT_start_conve_ETC___d65 =
	     (_start_input_sp[31] && !_start_convert_unsigned) ?
	       final_output___1__h802 :
	       _theResult_____4__h301 ;
  assign _theResult_____4__h301 =
	     (_start_input_sp[30:0] == 31'd0 ||
	      _start_input_sp[31] && _start_convert_unsigned) ?
	       33'd0 :
	       IF_IF_start_fsr_BITS_7_TO_5_EQ_0b0_0_THEN_IF_N_ETC___d60 ;
  assign _theResult_____7_snd__h548 =
	     start_input_sp_BITS_30_TO_23_ULT_127___d6 &&
	     _start_input_sp[30:23] != 8'd0 &&
	     compl_real_exponent__h291 > 8'd23 ;
  assign compl_real_exponent__h291 = ~real_exponent__h288 + 8'd1 ;
  assign extended_mantissa___1__h543 =
	     extended_mantissa__h290 << real_exponent__h288 ;
  assign extended_mantissa__h290 = { 32'd0, x__h551 } ;
  assign extended_mantissa__h639 =
	     extended_mantissa__h290 >> compl_real_exponent__h291 ;
  assign final_output___1__h802 =
	     IF_start_input_sp_BITS_30_TO_0_EQ_0_OR_start_i_ETC___d62 +
	     33'd1 ;
  assign final_output___1__h916 =
	     IF_NOT_start_input_sp_BITS_30_TO_23_ULT_127_OR_ETC___d19[55:23] +
	     33'd1 ;
  assign lv_fsr__h303 =
	     { _start_fsr[31:10],
	       1'b0,
	       _start_input_sp[30:0] == 31'd0,
	       _start_fsr[7:5],
	       4'd0,
	       lv_inexact__h298 } ;
  assign lv_inexact__h298 = x__h483 | lv_sticky__h297 ;
  assign lv_roundup___1__h823 =
	     IF_NOT_start_input_sp_BITS_30_TO_23_ULT_127_OR_ETC___d19[22] &
	     y__h835 ;
  assign lv_roundup___1__h865 =
	     IF_NOT_start_input_sp_BITS_30_TO_23_ULT_127_OR_ETC___d19[22] &
	     y__h877 ;
  assign lv_roundup___1__h881 = lv_inexact__h298 & y__h879 ;
  assign lv_sticky__h297 =
	     IF_NOT_start_input_sp_BITS_30_TO_23_ULT_127_OR_ETC___d19[20:0] !=
	     21'd0 |
	     _theResult_____7_snd__h548 ;
  assign real_exponent__h288 = _start_input_sp[30:23] - 8'd127 ;
  assign start_input_sp_BITS_30_TO_23_MINUS_127_4_ULE_31___d70 =
	     real_exponent__h288 <= 8'd31 ;
  assign start_input_sp_BITS_30_TO_23_ULT_127___d6 =
	     _start_input_sp[30:23] < 8'd127 ;
  assign v_final_result__h384 =
	     { 32'd0,
	       IF_start_input_sp_BIT_31_5_AND_NOT_start_conve_ETC___d65[31:0] } ;
  assign x__h483 =
	     IF_NOT_start_input_sp_BITS_30_TO_23_ULT_127_OR_ETC___d19[22] |
	     IF_NOT_start_input_sp_BITS_30_TO_23_ULT_127_OR_ETC___d19[21] ;
  assign x__h551 = { _start_input_sp[30:23] != 8'd0, _start_input_sp[22:0] } ;
  assign x__h836 =
	     IF_NOT_start_input_sp_BITS_30_TO_23_ULT_127_OR_ETC___d19[23] |
	     IF_NOT_start_input_sp_BITS_30_TO_23_ULT_127_OR_ETC___d19[21] ;
  assign x__h878 =
	     IF_NOT_start_input_sp_BITS_30_TO_23_ULT_127_OR_ETC___d19[21] |
	     lv_sticky__h297 ;
  assign y__h835 = x__h836 | lv_sticky__h297 ;
  assign y__h877 = x__h878 | y__h879 ;
  assign y__h879 = ~_start_input_sp[31] ;
  always@(ff_final_out_rv)
  begin
    case (ff_final_out_rv[3:1])
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4:
	  CASE_ff_final_out_rv_BITS_3_TO_1_0_ff_final_ou_ETC__q1 =
	      ff_final_out_rv[3:1];
      default: CASE_ff_final_out_rv_BITS_3_TO_1_0_ff_final_ou_ETC__q1 = 3'd5;
    endcase
  end
  always@(_start_fsr or
	  lv_inexact__h298 or
	  _start_input_sp or
	  lv_roundup___1__h823 or
	  lv_roundup___1__h881 or lv_roundup___1__h865)
  begin
    case (_start_fsr[7:5])
      3'b0:
	  IF_start_fsr_BITS_7_TO_5_EQ_0b0_0_THEN_IF_NOT__ETC___d57 =
	      lv_roundup___1__h823;
      3'b011:
	  IF_start_fsr_BITS_7_TO_5_EQ_0b0_0_THEN_IF_NOT__ETC___d57 =
	      lv_roundup___1__h881;
      3'b100:
	  IF_start_fsr_BITS_7_TO_5_EQ_0b0_0_THEN_IF_NOT__ETC___d57 =
	      lv_roundup___1__h865;
      default: IF_start_fsr_BITS_7_TO_5_EQ_0b0_0_THEN_IF_NOT__ETC___d57 =
		   _start_fsr[7:5] == 3'b010 &&
		   lv_inexact__h298 & _start_input_sp[31];
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        ff_final_out_rv <= `BSV_ASSIGNMENT_DELAY
	    106'h0AAAAAAAAAAAAAAAAAAAAAAAAAA;
      end
    else
      begin
        if (ff_final_out_rv$EN)
	  ff_final_out_rv <= `BSV_ASSIGNMENT_DELAY ff_final_out_rv$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    ff_final_out_rv = 106'h2AAAAAAAAAAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkfpu_fp_to_int

