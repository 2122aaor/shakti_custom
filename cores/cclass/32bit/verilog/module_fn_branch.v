//
// Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
//
// On Tue Mar 28 10:02:26 IST 2017
//
//
// Ports:
// Name                         I/O  size props
// fn_branch                      O   135
// fn_branch__opcode              I     5
// fn_branch__funct3              I     3
// fn_branch__current_pc          I    32
// fn_branch__immediate_value     I    20
// fn_branch__operand1            I    32
// fn_branch__operand2            I    32
// fn_branch__prediction          I     1
//
// Combinational paths from inputs to outputs:
//   (fn_branch__opcode,
//    fn_branch__funct3,
//    fn_branch__current_pc,
//    fn_branch__immediate_value,
//    fn_branch__operand1,
//    fn_branch__operand2,
//    fn_branch__prediction) -> fn_branch
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module module_fn_branch(fn_branch__opcode,
			fn_branch__funct3,
			fn_branch__current_pc,
			fn_branch__immediate_value,
			fn_branch__operand1,
			fn_branch__operand2,
			fn_branch__prediction,
			fn_branch);
  // value method fn_branch
  input  [4 : 0] fn_branch__opcode;
  input  [2 : 0] fn_branch__funct3;
  input  [31 : 0] fn_branch__current_pc;
  input  [19 : 0] fn_branch__immediate_value;
  input  [31 : 0] fn_branch__operand1;
  input  [31 : 0] fn_branch__operand2;
  input  fn_branch__prediction;
  output [134 : 0] fn_branch;

  // signals for module outputs
  wire [134 : 0] fn_branch;

  // remaining internal signals
  reg [31 : 0] CASE_fn_branch__opcode_0b11001_fn_branch__curr_ETC__q2, x__h96;
  reg IF_fn_branch__funct3_EQ_0b0_0_THEN_NOT_fn_bran_ETC___d47,
      IF_fn_branch__funct3_EQ_0b0_0_THEN_fn_branch___ETC___d64;
  wire [31 : 0] IF_fn_branch__opcode_EQ_0b11001_OR_fn_branch___ETC___d79,
		fn_branch__current_pc_PLUS_4___d4,
		lv_effective__h142,
		lv_effective__h85,
		lv_target_offset4_PLUS_fn_branch__operand1__q1,
		lv_target_offset__h84;
  wire NOT_fn_branch__prediction_2_AND_fn_branch__opc_ETC___d70,
       fn_branch__opcode_EQ_0b11001_OR_fn_branch__pre_ETC___d77,
       fn_branch__operand1_BIT_31_5_EQ_fn_branch__ope_ETC___d27,
       fn_branch__operand1_EQ_fn_branch__operand2___d21,
       fn_branch__operand1_ULT_fn_branch__operand2___d29,
       fn_branch__prediction_OR_NOT_fn_branch__opcode_ETC___d74;

  // value method fn_branch
  assign fn_branch =
	     { CASE_fn_branch__opcode_0b11001_fn_branch__curr_ETC__q2,
	       fn_branch__current_pc,
	       x__h96,
	       fn_branch__opcode != 5'b11011 &&
	       fn_branch__opcode != 5'b11001 &&
	       (fn_branch__opcode != 5'b11000 ||
		IF_fn_branch__funct3_EQ_0b0_0_THEN_NOT_fn_bran_ETC___d47),
	       fn_branch__opcode != 5'b11001 &&
	       NOT_fn_branch__prediction_2_AND_fn_branch__opc_ETC___d70,
	       IF_fn_branch__opcode_EQ_0b11001_OR_fn_branch___ETC___d79,
	       1'd0,
	       4'b1010 /* unspecified value */  } ;

  // remaining internal signals
  assign IF_fn_branch__opcode_EQ_0b11001_OR_fn_branch___ETC___d79 =
	     (fn_branch__opcode == 5'b11001 ||
	      fn_branch__prediction_OR_NOT_fn_branch__opcode_ETC___d74) ?
	       (fn_branch__opcode_EQ_0b11001_OR_fn_branch__pre_ETC___d77 ?
		  x__h96 :
		  fn_branch__current_pc_PLUS_4___d4) :
	       x__h96 ;
  assign NOT_fn_branch__prediction_2_AND_fn_branch__opc_ETC___d70 =
	     !fn_branch__prediction &&
	     (fn_branch__opcode == 5'b11011 ||
	      fn_branch__opcode == 5'b11000 &&
	      IF_fn_branch__funct3_EQ_0b0_0_THEN_fn_branch___ETC___d64) ||
	     fn_branch__prediction && fn_branch__opcode != 5'b11011 &&
	     (fn_branch__opcode != 5'b11000 ||
	      IF_fn_branch__funct3_EQ_0b0_0_THEN_NOT_fn_bran_ETC___d47) ;
  assign fn_branch__current_pc_PLUS_4___d4 = fn_branch__current_pc + 32'd4 ;
  assign fn_branch__opcode_EQ_0b11001_OR_fn_branch__pre_ETC___d77 =
	     fn_branch__opcode == 5'b11001 ||
	     fn_branch__prediction &&
	     (fn_branch__opcode == 5'b11011 ||
	      fn_branch__opcode == 5'b11000 &&
	      IF_fn_branch__funct3_EQ_0b0_0_THEN_fn_branch___ETC___d64) ;
  assign fn_branch__operand1_BIT_31_5_EQ_fn_branch__ope_ETC___d27 =
	     fn_branch__operand1[31] == fn_branch__operand2[31] ;
  assign fn_branch__operand1_EQ_fn_branch__operand2___d21 =
	     fn_branch__operand1 == fn_branch__operand2 ;
  assign fn_branch__operand1_ULT_fn_branch__operand2___d29 =
	     fn_branch__operand1 < fn_branch__operand2 ;
  assign fn_branch__prediction_OR_NOT_fn_branch__opcode_ETC___d74 =
	     (fn_branch__prediction ||
	      fn_branch__opcode != 5'b11011 &&
	      (fn_branch__opcode != 5'b11000 ||
	       IF_fn_branch__funct3_EQ_0b0_0_THEN_NOT_fn_bran_ETC___d47)) &&
	     (!fn_branch__prediction || fn_branch__opcode == 5'b11011 ||
	      fn_branch__opcode == 5'b11000 &&
	      IF_fn_branch__funct3_EQ_0b0_0_THEN_fn_branch___ETC___d64) ;
  assign lv_effective__h142 =
	     { lv_target_offset__h84[30:0], 1'd0 } + fn_branch__current_pc ;
  assign lv_effective__h85 =
	     { lv_target_offset4_PLUS_fn_branch__operand1__q1[31:1], 1'b0 } ;
  assign lv_target_offset4_PLUS_fn_branch__operand1__q1 =
	     lv_target_offset__h84 + fn_branch__operand1 ;
  assign lv_target_offset__h84 =
	     { {12{fn_branch__immediate_value[19]}},
	       fn_branch__immediate_value } ;
  always@(fn_branch__opcode or lv_effective__h142 or lv_effective__h85)
  begin
    case (fn_branch__opcode)
      5'b11000, 5'b11011: x__h96 = lv_effective__h142;
      5'b11001: x__h96 = lv_effective__h85;
      default: x__h96 = 32'd0;
    endcase
  end
  always@(fn_branch__funct3 or
	  fn_branch__operand1_ULT_fn_branch__operand2___d29 or
	  fn_branch__operand1_EQ_fn_branch__operand2___d21 or
	  fn_branch__operand1_BIT_31_5_EQ_fn_branch__ope_ETC___d27 or
	  fn_branch__operand1)
  begin
    case (fn_branch__funct3)
      3'b0:
	  IF_fn_branch__funct3_EQ_0b0_0_THEN_fn_branch___ETC___d64 =
	      fn_branch__operand1_EQ_fn_branch__operand2___d21;
      3'b001:
	  IF_fn_branch__funct3_EQ_0b0_0_THEN_fn_branch___ETC___d64 =
	      !fn_branch__operand1_EQ_fn_branch__operand2___d21;
      3'b100:
	  IF_fn_branch__funct3_EQ_0b0_0_THEN_fn_branch___ETC___d64 =
	      fn_branch__operand1_BIT_31_5_EQ_fn_branch__ope_ETC___d27 &&
	      fn_branch__operand1_ULT_fn_branch__operand2___d29 ||
	      !fn_branch__operand1_BIT_31_5_EQ_fn_branch__ope_ETC___d27 &&
	      fn_branch__operand1[31];
      3'b101:
	  IF_fn_branch__funct3_EQ_0b0_0_THEN_fn_branch___ETC___d64 =
	      fn_branch__operand1_BIT_31_5_EQ_fn_branch__ope_ETC___d27 &&
	      !fn_branch__operand1_ULT_fn_branch__operand2___d29 ||
	      !fn_branch__operand1_BIT_31_5_EQ_fn_branch__ope_ETC___d27 &&
	      !fn_branch__operand1[31];
      3'b110:
	  IF_fn_branch__funct3_EQ_0b0_0_THEN_fn_branch___ETC___d64 =
	      fn_branch__operand1_ULT_fn_branch__operand2___d29;
      default: IF_fn_branch__funct3_EQ_0b0_0_THEN_fn_branch___ETC___d64 =
		   fn_branch__funct3 == 3'b111 &&
		   !fn_branch__operand1_ULT_fn_branch__operand2___d29;
    endcase
  end
  always@(fn_branch__funct3 or
	  fn_branch__operand1_ULT_fn_branch__operand2___d29 or
	  fn_branch__operand1_EQ_fn_branch__operand2___d21 or
	  fn_branch__operand1_BIT_31_5_EQ_fn_branch__ope_ETC___d27 or
	  fn_branch__operand1)
  begin
    case (fn_branch__funct3)
      3'b0:
	  IF_fn_branch__funct3_EQ_0b0_0_THEN_NOT_fn_bran_ETC___d47 =
	      !fn_branch__operand1_EQ_fn_branch__operand2___d21;
      3'b001:
	  IF_fn_branch__funct3_EQ_0b0_0_THEN_NOT_fn_bran_ETC___d47 =
	      fn_branch__operand1_EQ_fn_branch__operand2___d21;
      3'b100:
	  IF_fn_branch__funct3_EQ_0b0_0_THEN_NOT_fn_bran_ETC___d47 =
	      (!fn_branch__operand1_BIT_31_5_EQ_fn_branch__ope_ETC___d27 ||
	       !fn_branch__operand1_ULT_fn_branch__operand2___d29) &&
	      (fn_branch__operand1_BIT_31_5_EQ_fn_branch__ope_ETC___d27 ||
	       !fn_branch__operand1[31]);
      3'b101:
	  IF_fn_branch__funct3_EQ_0b0_0_THEN_NOT_fn_bran_ETC___d47 =
	      (!fn_branch__operand1_BIT_31_5_EQ_fn_branch__ope_ETC___d27 ||
	       fn_branch__operand1_ULT_fn_branch__operand2___d29) &&
	      (fn_branch__operand1_BIT_31_5_EQ_fn_branch__ope_ETC___d27 ||
	       fn_branch__operand1[31]);
      3'b110:
	  IF_fn_branch__funct3_EQ_0b0_0_THEN_NOT_fn_bran_ETC___d47 =
	      !fn_branch__operand1_ULT_fn_branch__operand2___d29;
      default: IF_fn_branch__funct3_EQ_0b0_0_THEN_NOT_fn_bran_ETC___d47 =
		   fn_branch__funct3 != 3'b111 ||
		   fn_branch__operand1_ULT_fn_branch__operand2___d29;
    endcase
  end
  always@(fn_branch__opcode or fn_branch__current_pc_PLUS_4___d4)
  begin
    case (fn_branch__opcode)
      5'b11001, 5'b11011:
	  CASE_fn_branch__opcode_0b11001_fn_branch__curr_ETC__q2 =
	      fn_branch__current_pc_PLUS_4___d4;
      default: CASE_fn_branch__opcode_0b11001_fn_branch__curr_ETC__q2 = 32'd0;
    endcase
  end
endmodule  // module_fn_branch

