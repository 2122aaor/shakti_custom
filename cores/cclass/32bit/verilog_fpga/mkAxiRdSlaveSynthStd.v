//
// Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
//
// On Tue Mar 28 10:39:16 IST 2017
//
//
// Ports:
// Name                         I/O  size props
// tlm_tx_get                     O   119
// RDY_tlm_tx_get                 O     1
// RDY_tlm_rx_put                 O     1
// ARREADY                        O     1
// RID                            O     4
// RDATA                          O    32
// RRESP                          O     2
// RLAST                          O     1
// RVALID                         O     1
// addrMatch                      O     1 const
// RDY_addrMatch                  O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// tlm_rx_put                     I    67
// ARID                           I     4
// ARADDR                         I    32
// ARLEN                          I     4
// ARSIZE                         I     3
// ARBURST                        I     2
// ARLOCK                         I     2
// ARCACHE                        I     4
// ARPROT                         I     3
// ARVALID                        I     1
// RREADY                         I     1
// addrMatch_value                I    32 unused
// EN_tlm_rx_put                  I     1
// EN_tlm_tx_get                  I     1
//
// Combinational paths from inputs to outputs:
//   (tlm_rx_put, EN_tlm_rx_put) -> RID
//   (tlm_rx_put, EN_tlm_rx_put) -> RDATA
//   (tlm_rx_put, EN_tlm_rx_put) -> RRESP
//   (tlm_rx_put, EN_tlm_rx_put) -> RLAST
//   (tlm_rx_put, EN_tlm_rx_put) -> RVALID
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkAxiRdSlaveSynthStd(CLK,
			    RST_N,

			    EN_tlm_tx_get,
			    tlm_tx_get,
			    RDY_tlm_tx_get,

			    tlm_rx_put,
			    EN_tlm_rx_put,
			    RDY_tlm_rx_put,

			    ARID,

			    ARADDR,

			    ARLEN,

			    ARSIZE,

			    ARBURST,

			    ARLOCK,

			    ARCACHE,

			    ARPROT,

			    ARVALID,

			    ARREADY,

			    RREADY,

			    RID,

			    RDATA,

			    RRESP,

			    RLAST,

			    RVALID,

			    addrMatch_value,
			    addrMatch,
			    RDY_addrMatch);
  input  CLK;
  input  RST_N;

  // actionvalue method tlm_tx_get
  input  EN_tlm_tx_get;
  output [118 : 0] tlm_tx_get;
  output RDY_tlm_tx_get;

  // action method tlm_rx_put
  input  [66 : 0] tlm_rx_put;
  input  EN_tlm_rx_put;
  output RDY_tlm_rx_put;

  // action method fabric_bus_arID
  input  [3 : 0] ARID;

  // action method fabric_bus_arADDR
  input  [31 : 0] ARADDR;

  // action method fabric_bus_arLEN
  input  [3 : 0] ARLEN;

  // action method fabric_bus_arSIZE
  input  [2 : 0] ARSIZE;

  // action method fabric_bus_arBURST
  input  [1 : 0] ARBURST;

  // action method fabric_bus_arLOCK
  input  [1 : 0] ARLOCK;

  // action method fabric_bus_arCACHE
  input  [3 : 0] ARCACHE;

  // action method fabric_bus_arPROT
  input  [2 : 0] ARPROT;

  // action method fabric_bus_arVALID
  input  ARVALID;

  // value method fabric_bus_arREADY
  output ARREADY;

  // action method fabric_bus_rREADY
  input  RREADY;

  // value method fabric_bus_rID
  output [3 : 0] RID;

  // value method fabric_bus_rDATA
  output [31 : 0] RDATA;

  // value method fabric_bus_rRESP
  output [1 : 0] RRESP;

  // value method fabric_bus_rLAST
  output RLAST;

  // value method fabric_bus_rVALID
  output RVALID;

  // value method fabric_addrMatch
  input  [31 : 0] addrMatch_value;
  output addrMatch;
  output RDY_addrMatch;

  // signals for module outputs
  wire [118 : 0] tlm_tx_get;
  wire [31 : 0] RDATA;
  wire [3 : 0] RID;
  wire [1 : 0] RRESP;
  wire ARREADY,
       RDY_addrMatch,
       RDY_tlm_rx_put,
       RDY_tlm_tx_get,
       RLAST,
       RVALID,
       addrMatch;

  // inlined wires
  wire [119 : 0] fifo_tx_rv$port0__write_1,
		 fifo_tx_rv$port1__read,
		 fifo_tx_rv$port1__write_1,
		 fifo_tx_rv$port2__read;
  wire [67 : 0] fifo_rx_rv$port0__write_1,
		fifo_rx_rv$port1__read,
		fifo_rx_rv$port1__write_1,
		fifo_rx_rv$port2__read;
  wire [54 : 0] rd_addr_fifo_fifof_rv$port0__write_1,
		rd_addr_fifo_fifof_rv$port1__read,
		rd_addr_fifo_fifof_rv$port1__write_1,
		rd_addr_fifo_fifof_rv$port2__read;
  wire [53 : 0] rd_addr_fifo_data_wire$wget;
  wire [39 : 0] rd_resp_fifo_fifof_rv$port0__write_1,
		rd_resp_fifo_fifof_rv$port1__read,
		rd_resp_fifo_fifof_rv$port1__write_1,
		rd_resp_fifo_fifof_rv$port2__read;
  wire fifo_rx_rv$EN_port1__write,
       fifo_tx_rv$EN_port0__write,
       rd_addr_fifo_fifof_rv$EN_port0__write,
       rd_addr_fifo_fifof_rv$EN_port1__write,
       rd_resp_fifo_fifof_rv$EN_port0__write,
       rd_resp_fifo_fifof_rv$EN_port1__write;

  // register count
  reg [4 : 0] count;
  wire [4 : 0] count$D_IN;
  wire count$EN;

  // register desc_prev
  reg [117 : 0] desc_prev;
  wire [117 : 0] desc_prev$D_IN;
  wire desc_prev$EN;

  // register fifo_rx_rv
  reg [67 : 0] fifo_rx_rv;
  wire [67 : 0] fifo_rx_rv$D_IN;
  wire fifo_rx_rv$EN;

  // register fifo_tx_rv
  reg [119 : 0] fifo_tx_rv;
  wire [119 : 0] fifo_tx_rv$D_IN;
  wire fifo_tx_rv$EN;

  // register rd_addr_fifo_fifof_rv
  reg [54 : 0] rd_addr_fifo_fifof_rv;
  wire [54 : 0] rd_addr_fifo_fifof_rv$D_IN;
  wire rd_addr_fifo_fifof_rv$EN;

  // register rd_resp_fifo_fifof_rv
  reg [39 : 0] rd_resp_fifo_fifof_rv;
  wire [39 : 0] rd_resp_fifo_fifof_rv$D_IN;
  wire rd_resp_fifo_fifof_rv$EN;

  // ports of submodule fifo_buffer
  wire fifo_buffer$CLR,
       fifo_buffer$DEQ,
       fifo_buffer$D_IN,
       fifo_buffer$D_OUT,
       fifo_buffer$EMPTY_N,
       fifo_buffer$ENQ,
       fifo_buffer$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_do_read,
       CAN_FIRE_RL_every,
       CAN_FIRE_RL_grab_addr,
       CAN_FIRE_RL_grap_tlm_response,
       CAN_FIRE_RL_rd_addr_fifo_do_enq,
       CAN_FIRE_RL_rd_resp_fifo_do_deq,
       CAN_FIRE_RL_rd_resp_fifo_get_data,
       CAN_FIRE_fabric_bus_arADDR,
       CAN_FIRE_fabric_bus_arBURST,
       CAN_FIRE_fabric_bus_arCACHE,
       CAN_FIRE_fabric_bus_arID,
       CAN_FIRE_fabric_bus_arLEN,
       CAN_FIRE_fabric_bus_arLOCK,
       CAN_FIRE_fabric_bus_arPROT,
       CAN_FIRE_fabric_bus_arSIZE,
       CAN_FIRE_fabric_bus_arVALID,
       CAN_FIRE_fabric_bus_rREADY,
       CAN_FIRE_tlm_rx_put,
       CAN_FIRE_tlm_tx_get,
       WILL_FIRE_RL_do_read,
       WILL_FIRE_RL_every,
       WILL_FIRE_RL_grab_addr,
       WILL_FIRE_RL_grap_tlm_response,
       WILL_FIRE_RL_rd_addr_fifo_do_enq,
       WILL_FIRE_RL_rd_resp_fifo_do_deq,
       WILL_FIRE_RL_rd_resp_fifo_get_data,
       WILL_FIRE_fabric_bus_arADDR,
       WILL_FIRE_fabric_bus_arBURST,
       WILL_FIRE_fabric_bus_arCACHE,
       WILL_FIRE_fabric_bus_arID,
       WILL_FIRE_fabric_bus_arLEN,
       WILL_FIRE_fabric_bus_arLOCK,
       WILL_FIRE_fabric_bus_arPROT,
       WILL_FIRE_fabric_bus_arSIZE,
       WILL_FIRE_fabric_bus_arVALID,
       WILL_FIRE_fabric_bus_rREADY,
       WILL_FIRE_tlm_rx_put,
       WILL_FIRE_tlm_tx_get;

  // inputs to muxes for submodule ports
  wire [117 : 0] MUX_desc_prev$write_1__VAL_1, MUX_desc_prev$write_1__VAL_2;
  wire [4 : 0] MUX_count$write_1__VAL_1, MUX_count$write_1__VAL_2;
  wire MUX_count$write_1__SEL_1, MUX_count$write_1__SEL_2;

  // remaining internal signals
  reg [1 : 0] CASE_fifo_rx_rvport1__read_BITS_32_TO_31_0_fi_ETC__q1,
	      CASE_rd_addr_fifo_fifof_rvport1__read_BITS_42_ETC__q3;
  wire [38 : 0] rd_resp_fifo_fifof_rvport1__read_BITS_38_TO_0__q2;
  wire [31 : 0] _0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79,
		addr___1__h3113,
		addr__h3039,
		log_length__h3110,
		log_size__h3109,
		mask__h3112,
		total__h3111,
		x__h3125,
		x__h3133,
		x_addr__h3042,
		y__h15185,
		y__h3126;
  wire [9 : 0] b__h2695;
  wire [4 : 0] value__h14371, value__h8460;
  wire [2 : 0] incr__h2763, value__h3134;

  // actionvalue method tlm_tx_get
  assign tlm_tx_get = fifo_tx_rv$port1__read[118:0] ;
  assign RDY_tlm_tx_get = fifo_tx_rv$port1__read[119] ;
  assign CAN_FIRE_tlm_tx_get = fifo_tx_rv$port1__read[119] ;
  assign WILL_FIRE_tlm_tx_get = EN_tlm_tx_get ;

  // action method tlm_rx_put
  assign RDY_tlm_rx_put = !fifo_rx_rv[67] ;
  assign CAN_FIRE_tlm_rx_put = !fifo_rx_rv[67] ;
  assign WILL_FIRE_tlm_rx_put = EN_tlm_rx_put ;

  // action method fabric_bus_arID
  assign CAN_FIRE_fabric_bus_arID = 1'd1 ;
  assign WILL_FIRE_fabric_bus_arID = 1'd1 ;

  // action method fabric_bus_arADDR
  assign CAN_FIRE_fabric_bus_arADDR = 1'd1 ;
  assign WILL_FIRE_fabric_bus_arADDR = 1'd1 ;

  // action method fabric_bus_arLEN
  assign CAN_FIRE_fabric_bus_arLEN = 1'd1 ;
  assign WILL_FIRE_fabric_bus_arLEN = 1'd1 ;

  // action method fabric_bus_arSIZE
  assign CAN_FIRE_fabric_bus_arSIZE = 1'd1 ;
  assign WILL_FIRE_fabric_bus_arSIZE = 1'd1 ;

  // action method fabric_bus_arBURST
  assign CAN_FIRE_fabric_bus_arBURST = 1'd1 ;
  assign WILL_FIRE_fabric_bus_arBURST = 1'd1 ;

  // action method fabric_bus_arLOCK
  assign CAN_FIRE_fabric_bus_arLOCK = 1'd1 ;
  assign WILL_FIRE_fabric_bus_arLOCK = 1'd1 ;

  // action method fabric_bus_arCACHE
  assign CAN_FIRE_fabric_bus_arCACHE = 1'd1 ;
  assign WILL_FIRE_fabric_bus_arCACHE = 1'd1 ;

  // action method fabric_bus_arPROT
  assign CAN_FIRE_fabric_bus_arPROT = 1'd1 ;
  assign WILL_FIRE_fabric_bus_arPROT = 1'd1 ;

  // action method fabric_bus_arVALID
  assign CAN_FIRE_fabric_bus_arVALID = 1'd1 ;
  assign WILL_FIRE_fabric_bus_arVALID = 1'd1 ;

  // value method fabric_bus_arREADY
  assign ARREADY = !rd_addr_fifo_fifof_rv[54] ;

  // action method fabric_bus_rREADY
  assign CAN_FIRE_fabric_bus_rREADY = 1'd1 ;
  assign WILL_FIRE_fabric_bus_rREADY = 1'd1 ;

  // value method fabric_bus_rID
  assign RID =
	     rd_resp_fifo_fifof_rv$port1__read[39] ?
	       rd_resp_fifo_fifof_rvport1__read_BITS_38_TO_0__q2[38:35] :
	       4'd0 ;

  // value method fabric_bus_rDATA
  assign RDATA =
	     rd_resp_fifo_fifof_rv$port1__read[39] ?
	       rd_resp_fifo_fifof_rvport1__read_BITS_38_TO_0__q2[34:3] :
	       32'd0 ;

  // value method fabric_bus_rRESP
  assign RRESP =
	     rd_resp_fifo_fifof_rv$port1__read[39] ?
	       rd_resp_fifo_fifof_rvport1__read_BITS_38_TO_0__q2[2:1] :
	       2'd0 ;

  // value method fabric_bus_rLAST
  assign RLAST =
	     rd_resp_fifo_fifof_rv$port1__read[39] &&
	     rd_resp_fifo_fifof_rvport1__read_BITS_38_TO_0__q2[0] ;

  // value method fabric_bus_rVALID
  assign RVALID = rd_resp_fifo_fifof_rv$port1__read[39] ;

  // value method fabric_addrMatch
  assign addrMatch = 1'd0 ;
  assign RDY_addrMatch = 1'd1 ;

  // submodule fifo_buffer
  FIFO2 #(.width(32'd1), .guarded(32'd1)) fifo_buffer(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(fifo_buffer$D_IN),
						      .ENQ(fifo_buffer$ENQ),
						      .DEQ(fifo_buffer$DEQ),
						      .CLR(fifo_buffer$CLR),
						      .D_OUT(fifo_buffer$D_OUT),
						      .FULL_N(fifo_buffer$FULL_N),
						      .EMPTY_N(fifo_buffer$EMPTY_N));

  // rule RL_every
  assign CAN_FIRE_RL_every = 1'd1 ;
  assign WILL_FIRE_RL_every = 1'd1 ;

  // rule RL_do_read
  assign CAN_FIRE_RL_do_read = MUX_count$write_1__SEL_2 ;
  assign WILL_FIRE_RL_do_read = MUX_count$write_1__SEL_2 ;

  // rule RL_grap_tlm_response
  assign CAN_FIRE_RL_grap_tlm_response =
	     fifo_rx_rv$port1__read[67] && fifo_buffer$EMPTY_N &&
	     !rd_resp_fifo_fifof_rv[39] ;
  assign WILL_FIRE_RL_grap_tlm_response = CAN_FIRE_RL_grap_tlm_response ;

  // rule RL_rd_addr_fifo_do_enq
  assign CAN_FIRE_RL_rd_addr_fifo_do_enq =
	     !rd_addr_fifo_fifof_rv[54] && ARVALID ;
  assign WILL_FIRE_RL_rd_addr_fifo_do_enq = CAN_FIRE_RL_rd_addr_fifo_do_enq ;

  // rule RL_grab_addr
  assign CAN_FIRE_RL_grab_addr = MUX_count$write_1__SEL_1 ;
  assign WILL_FIRE_RL_grab_addr = MUX_count$write_1__SEL_1 ;

  // rule RL_rd_resp_fifo_get_data
  assign CAN_FIRE_RL_rd_resp_fifo_get_data =
	     rd_resp_fifo_fifof_rv$port1__read[39] ;
  assign WILL_FIRE_RL_rd_resp_fifo_get_data =
	     rd_resp_fifo_fifof_rv$port1__read[39] ;

  // rule RL_rd_resp_fifo_do_deq
  assign CAN_FIRE_RL_rd_resp_fifo_do_deq =
	     rd_resp_fifo_fifof_rv$port1__read[39] && RREADY ;
  assign WILL_FIRE_RL_rd_resp_fifo_do_deq = CAN_FIRE_RL_rd_resp_fifo_do_deq ;

  // inputs to muxes for submodule ports
  assign MUX_count$write_1__SEL_1 =
	     rd_addr_fifo_fifof_rv$port1__read[54] && count == 5'd0 ;
  assign MUX_count$write_1__SEL_2 =
	     !fifo_tx_rv[119] && fifo_buffer$FULL_N && count != 5'd0 ;
  assign MUX_count$write_1__VAL_1 =
	     { 1'd0, rd_addr_fifo_fifof_rv$port1__read[49:46] } + 5'd1 ;
  assign MUX_count$write_1__VAL_2 = count - 5'd1 ;
  assign MUX_desc_prev$write_1__VAL_1 =
	     { 4'd0,
	       rd_addr_fifo_fifof_rv$port1__read[31:0],
	       32'd0,
	       b__h2695,
	       4'd15,
	       CASE_rd_addr_fifo_fifof_rvport1__read_BITS_42_ETC__q3,
	       incr__h2763[1:0],
	       15'd0,
	       rd_addr_fifo_fifof_rv$port1__read[53:50],
	       4'd0,
	       rd_addr_fifo_fifof_rv$port1__read[40:32] } ;
  assign MUX_desc_prev$write_1__VAL_2 =
	     { desc_prev[117:114], x_addr__h3042, desc_prev[81:0] } ;

  // inlined wires
  assign rd_addr_fifo_data_wire$wget =
	     { ARID,
	       ARLEN,
	       ARSIZE,
	       ARBURST,
	       ARLOCK,
	       ARCACHE,
	       ARPROT,
	       ARADDR } ;
  assign rd_addr_fifo_fifof_rv$EN_port0__write =
	     !rd_addr_fifo_fifof_rv[54] && ARVALID ;
  assign rd_addr_fifo_fifof_rv$port0__write_1 =
	     { 1'd1, rd_addr_fifo_data_wire$wget } ;
  assign rd_addr_fifo_fifof_rv$port1__read =
	     rd_addr_fifo_fifof_rv$EN_port0__write ?
	       rd_addr_fifo_fifof_rv$port0__write_1 :
	       rd_addr_fifo_fifof_rv ;
  assign rd_addr_fifo_fifof_rv$EN_port1__write =
	     rd_addr_fifo_fifof_rv$port1__read[54] && count == 5'd0 ;
  assign rd_addr_fifo_fifof_rv$port1__write_1 =
	     { 1'd0, 54'h2AAAAAAAAAAAAA /* unspecified value */  } ;
  assign rd_addr_fifo_fifof_rv$port2__read =
	     rd_addr_fifo_fifof_rv$EN_port1__write ?
	       rd_addr_fifo_fifof_rv$port1__write_1 :
	       rd_addr_fifo_fifof_rv$port1__read ;
  assign rd_resp_fifo_fifof_rv$EN_port0__write =
	     fifo_rx_rv$port1__read[67] && fifo_buffer$EMPTY_N &&
	     !rd_resp_fifo_fifof_rv[39] ;
  assign rd_resp_fifo_fifof_rv$port0__write_1 =
	     { 1'd1,
	       fifo_rx_rv$port1__read[16:13],
	       fifo_rx_rv$port1__read[64:33],
	       CASE_fifo_rx_rvport1__read_BITS_32_TO_31_0_fi_ETC__q1,
	       fifo_buffer$D_OUT } ;
  assign rd_resp_fifo_fifof_rv$port1__read =
	     rd_resp_fifo_fifof_rv$EN_port0__write ?
	       rd_resp_fifo_fifof_rv$port0__write_1 :
	       rd_resp_fifo_fifof_rv ;
  assign rd_resp_fifo_fifof_rv$EN_port1__write =
	     rd_resp_fifo_fifof_rv$port1__read[39] && RREADY ;
  assign rd_resp_fifo_fifof_rv$port1__write_1 =
	     { 1'd0, 39'h2AAAAAAAAA /* unspecified value */  } ;
  assign rd_resp_fifo_fifof_rv$port2__read =
	     rd_resp_fifo_fifof_rv$EN_port1__write ?
	       rd_resp_fifo_fifof_rv$port1__write_1 :
	       rd_resp_fifo_fifof_rv$port1__read ;
  assign fifo_tx_rv$EN_port0__write =
	     !fifo_tx_rv[119] && fifo_buffer$FULL_N && count != 5'd0 ;
  assign fifo_tx_rv$port0__write_1 = { 2'd2, desc_prev } ;
  assign fifo_tx_rv$port1__read =
	     fifo_tx_rv$EN_port0__write ?
	       fifo_tx_rv$port0__write_1 :
	       fifo_tx_rv ;
  assign fifo_tx_rv$port1__write_1 =
	     { 1'd0,
	       119'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  } ;
  assign fifo_tx_rv$port2__read =
	     EN_tlm_tx_get ?
	       fifo_tx_rv$port1__write_1 :
	       fifo_tx_rv$port1__read ;
  assign fifo_rx_rv$port0__write_1 = { 1'd1, tlm_rx_put } ;
  assign fifo_rx_rv$port1__read =
	     EN_tlm_rx_put ? fifo_rx_rv$port0__write_1 : fifo_rx_rv ;
  assign fifo_rx_rv$EN_port1__write =
	     fifo_rx_rv$port1__read[67] && fifo_buffer$EMPTY_N &&
	     !rd_resp_fifo_fifof_rv[39] ;
  assign fifo_rx_rv$port1__write_1 =
	     { 1'd0, 67'h2AAAAAAAAAAAAAAAA /* unspecified value */  } ;
  assign fifo_rx_rv$port2__read =
	     fifo_rx_rv$EN_port1__write ?
	       fifo_rx_rv$port1__write_1 :
	       fifo_rx_rv$port1__read ;

  // register count
  assign count$D_IN =
	     WILL_FIRE_RL_grab_addr ?
	       MUX_count$write_1__VAL_1 :
	       MUX_count$write_1__VAL_2 ;
  assign count$EN = WILL_FIRE_RL_grab_addr || WILL_FIRE_RL_do_read ;

  // register desc_prev
  assign desc_prev$D_IN =
	     WILL_FIRE_RL_grab_addr ?
	       MUX_desc_prev$write_1__VAL_1 :
	       MUX_desc_prev$write_1__VAL_2 ;
  assign desc_prev$EN = WILL_FIRE_RL_grab_addr || WILL_FIRE_RL_do_read ;

  // register fifo_rx_rv
  assign fifo_rx_rv$D_IN = fifo_rx_rv$port2__read ;
  assign fifo_rx_rv$EN = 1'b1 ;

  // register fifo_tx_rv
  assign fifo_tx_rv$D_IN = fifo_tx_rv$port2__read ;
  assign fifo_tx_rv$EN = 1'b1 ;

  // register rd_addr_fifo_fifof_rv
  assign rd_addr_fifo_fifof_rv$D_IN = rd_addr_fifo_fifof_rv$port2__read ;
  assign rd_addr_fifo_fifof_rv$EN = 1'b1 ;

  // register rd_resp_fifo_fifof_rv
  assign rd_resp_fifo_fifof_rv$D_IN = rd_resp_fifo_fifof_rv$port2__read ;
  assign rd_resp_fifo_fifof_rv$EN = 1'b1 ;

  // submodule fifo_buffer
  assign fifo_buffer$D_IN = count == 5'd1 ;
  assign fifo_buffer$ENQ = MUX_count$write_1__SEL_2 ;
  assign fifo_buffer$DEQ = CAN_FIRE_RL_grap_tlm_response ;
  assign fifo_buffer$CLR = 1'b0 ;

  // remaining internal signals
  assign _0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79 =
	     { 30'd0, desc_prev[33:32] } + 32'd1 ;
  assign addr___1__h3113 = x__h3125 | y__h3126 ;
  assign addr__h3039 = desc_prev[113:82] + x__h3133 ;
  assign b__h2695 =
	     { 6'd0, rd_addr_fifo_fifof_rv$port1__read[49:46] } + 10'd1 ;
  assign incr__h2763 =
	     (3'd1 << rd_addr_fifo_fifof_rv$port1__read[45:43]) - 3'd1 ;
  assign log_length__h3110 =
	     (desc_prev[40] || desc_prev[41] || desc_prev[42] ||
	      desc_prev[43] ||
	      desc_prev[44] ||
	      desc_prev[45] ||
	      desc_prev[46] ||
	      desc_prev[47] ||
	      desc_prev[48] ||
	      desc_prev[49]) ?
	       { 27'd0, value__h14371 } :
	       32'd32 ;
  assign log_size__h3109 =
	     (_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[0] ||
	      _0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[1] ||
	      _0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[2] ||
	      _0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[3] ||
	      _0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[4] ||
	      _0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[5] ||
	      _0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[6] ||
	      _0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[7] ||
	      _0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[8] ||
	      _0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[9] ||
	      _0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[10] ||
	      _0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[11] ||
	      _0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[12] ||
	      _0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[13] ||
	      _0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[14] ||
	      _0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[15] ||
	      _0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[16] ||
	      _0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[17] ||
	      _0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[18] ||
	      _0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[19] ||
	      _0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[20] ||
	      _0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[21] ||
	      _0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[22] ||
	      _0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[23] ||
	      _0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[24] ||
	      _0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[25] ||
	      _0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[26] ||
	      _0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[27] ||
	      _0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[28] ||
	      _0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[29] ||
	      _0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[30] ||
	      _0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[31]) ?
	       { 27'd0, value__h8460 } :
	       32'd32 ;
  assign mask__h3112 = (32'd1 << total__h3111) - 32'd1 ;
  assign rd_resp_fifo_fifof_rvport1__read_BITS_38_TO_0__q2 =
	     rd_resp_fifo_fifof_rv$port1__read[38:0] ;
  assign total__h3111 = log_size__h3109 + log_length__h3110 ;
  assign value__h14371 =
	     (!desc_prev[40] && !desc_prev[41] && !desc_prev[42] &&
	      !desc_prev[43] &&
	      !desc_prev[44] &&
	      !desc_prev[45] &&
	      !desc_prev[46] &&
	      !desc_prev[47]) ?
	       (desc_prev[48] ? 5'd8 : 5'd9) :
	       ((!desc_prev[40] && !desc_prev[41] && !desc_prev[42] &&
		 !desc_prev[43]) ?
		  ((!desc_prev[44] && !desc_prev[45]) ?
		     (desc_prev[46] ? 5'd6 : 5'd7) :
		     (desc_prev[44] ? 5'd4 : 5'd5)) :
		  ((!desc_prev[40] && !desc_prev[41]) ?
		     (desc_prev[42] ? 5'd2 : 5'd3) :
		     (desc_prev[40] ? 5'd0 : 5'd1))) ;
  assign value__h3134 =
	     (desc_prev[35:34] == 2'd2) ?
	       3'd0 :
	       { 1'd0, desc_prev[33:32] } + 3'd1 ;
  assign value__h8460 =
	     (!_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[0] &&
	      !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[1] &&
	      !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[2] &&
	      !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[3] &&
	      !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[4] &&
	      !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[5] &&
	      !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[6] &&
	      !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[7] &&
	      !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[8] &&
	      !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[9] &&
	      !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[10] &&
	      !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[11] &&
	      !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[12] &&
	      !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[13] &&
	      !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[14] &&
	      !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[15]) ?
	       ((!_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[16] &&
		 !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[17] &&
		 !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[18] &&
		 !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[19] &&
		 !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[20] &&
		 !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[21] &&
		 !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[22] &&
		 !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[23]) ?
		  ((!_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[24] &&
		    !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[25] &&
		    !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[26] &&
		    !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[27]) ?
		     ((!_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[28] &&
		       !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[29]) ?
			(_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[30] ?
			   5'd30 :
			   5'd31) :
			(_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[28] ?
			   5'd28 :
			   5'd29)) :
		     ((!_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[24] &&
		       !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[25]) ?
			(_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[26] ?
			   5'd26 :
			   5'd27) :
			(_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[24] ?
			   5'd24 :
			   5'd25))) :
		  ((!_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[16] &&
		    !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[17] &&
		    !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[18] &&
		    !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[19]) ?
		     ((!_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[20] &&
		       !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[21]) ?
			(_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[22] ?
			   5'd22 :
			   5'd23) :
			(_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[20] ?
			   5'd20 :
			   5'd21)) :
		     ((!_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[16] &&
		       !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[17]) ?
			(_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[18] ?
			   5'd18 :
			   5'd19) :
			(_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[16] ?
			   5'd16 :
			   5'd17)))) :
	       ((!_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[0] &&
		 !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[1] &&
		 !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[2] &&
		 !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[3] &&
		 !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[4] &&
		 !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[5] &&
		 !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[6] &&
		 !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[7]) ?
		  ((!_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[8] &&
		    !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[9] &&
		    !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[10] &&
		    !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[11]) ?
		     ((!_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[12] &&
		       !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[13]) ?
			(_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[14] ?
			   5'd14 :
			   5'd15) :
			(_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[12] ?
			   5'd12 :
			   5'd13)) :
		     ((!_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[8] &&
		       !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[9]) ?
			(_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[10] ?
			   5'd10 :
			   5'd11) :
			(_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[8] ?
			   5'd8 :
			   5'd9))) :
		  ((!_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[0] &&
		    !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[1] &&
		    !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[2] &&
		    !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[3]) ?
		     ((!_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[4] &&
		       !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[5]) ?
			(_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[6] ?
			   5'd6 :
			   5'd7) :
			(_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[4] ?
			   5'd4 :
			   5'd5)) :
		     ((!_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[0] &&
		       !_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[1]) ?
			(_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[2] ?
			   5'd2 :
			   5'd3) :
			(_0_CONCAT_desc_prev_6_BITS_33_TO_32_2_8_PLUS_1___d79[0] ?
			   5'd0 :
			   5'd1)))) ;
  assign x__h3125 = addr__h3039 & mask__h3112 ;
  assign x__h3133 = { 29'd0, value__h3134 } ;
  assign x_addr__h3042 =
	     (desc_prev[35:34] == 2'd1) ? addr___1__h3113 : addr__h3039 ;
  assign y__h15185 = ~mask__h3112 ;
  assign y__h3126 = desc_prev[113:82] & y__h15185 ;
  always@(fifo_rx_rv$port1__read)
  begin
    case (fifo_rx_rv$port1__read[32:31])
      2'd0:
	  CASE_fifo_rx_rvport1__read_BITS_32_TO_31_0_fi_ETC__q1 =
	      fifo_rx_rv$port1__read[32:31];
      2'd1: CASE_fifo_rx_rvport1__read_BITS_32_TO_31_0_fi_ETC__q1 = 2'd2;
      2'd2: CASE_fifo_rx_rvport1__read_BITS_32_TO_31_0_fi_ETC__q1 = 2'd3;
      2'd3: CASE_fifo_rx_rvport1__read_BITS_32_TO_31_0_fi_ETC__q1 = 2'd1;
    endcase
  end
  always@(rd_addr_fifo_fifof_rv$port1__read)
  begin
    case (rd_addr_fifo_fifof_rv$port1__read[42:41])
      2'd0: CASE_rd_addr_fifo_fifof_rvport1__read_BITS_42_ETC__q3 = 2'd2;
      2'd1: CASE_rd_addr_fifo_fifof_rvport1__read_BITS_42_ETC__q3 = 2'd0;
      default: CASE_rd_addr_fifo_fifof_rvport1__read_BITS_42_ETC__q3 = 2'd1;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        count <= `BSV_ASSIGNMENT_DELAY 5'd0;
	desc_prev <= `BSV_ASSIGNMENT_DELAY
	    118'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
	fifo_rx_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 67'h2AAAAAAAAAAAAAAAA /* unspecified value */  };
	fifo_tx_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      119'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  };
	rd_addr_fifo_fifof_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 54'h2AAAAAAAAAAAAA /* unspecified value */  };
	rd_resp_fifo_fifof_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 39'h2AAAAAAAAA /* unspecified value */  };
      end
    else
      begin
        if (count$EN) count <= `BSV_ASSIGNMENT_DELAY count$D_IN;
	if (desc_prev$EN) desc_prev <= `BSV_ASSIGNMENT_DELAY desc_prev$D_IN;
	if (fifo_rx_rv$EN)
	  fifo_rx_rv <= `BSV_ASSIGNMENT_DELAY fifo_rx_rv$D_IN;
	if (fifo_tx_rv$EN)
	  fifo_tx_rv <= `BSV_ASSIGNMENT_DELAY fifo_tx_rv$D_IN;
	if (rd_addr_fifo_fifof_rv$EN)
	  rd_addr_fifo_fifof_rv <= `BSV_ASSIGNMENT_DELAY
	      rd_addr_fifo_fifof_rv$D_IN;
	if (rd_resp_fifo_fifof_rv$EN)
	  rd_resp_fifo_fifof_rv <= `BSV_ASSIGNMENT_DELAY
	      rd_resp_fifo_fifof_rv$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    count = 5'h0A;
    desc_prev = 118'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    fifo_rx_rv = 68'hAAAAAAAAAAAAAAAAA;
    fifo_tx_rv = 120'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rd_addr_fifo_fifof_rv = 55'h2AAAAAAAAAAAAA;
    rd_resp_fifo_fifof_rv = 40'hAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkAxiRdSlaveSynthStd

