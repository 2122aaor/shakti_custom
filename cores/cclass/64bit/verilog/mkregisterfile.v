//
// Generated by Bluespec Compiler, version 2015.09.beta2 (build 34689, 2015-09-07)
//
// On Mon Dec 19 16:37:08 IST 2016
//
//
// Ports:
// Name                         I/O  size props
// RDY__inputs_from_decode_stage  O     1 const
// RDY__inputs_from_writeback_stage  O     1 const
// RDY__forwarding_from_memory    O     1 const
// output_to_decode_stage         O   193
// RDY_output_to_decode_stage     O     1 const
// RDY_sin                        O     1 const
// sout                           O     1 reg
// RDY_sout                       O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// _inputs_from_decode_stage_rs1  I     5
// _inputs_from_decode_stage_rs1_type  I     1
// _inputs_from_decode_stage_rs2  I     5
// _inputs_from_decode_stage_rs2_type  I     1
// _inputs_from_decode_stage_rs3  I     5
// _inputs_from_decode_stage_rd   I     5
// _inputs_from_decode_stage_rd_type  I     1 unused
// _inputs_from_decode_stage_firing  I     1
// _inputs_from_decode_stage_privilege  I     1
// _inputs_from_decode_stage_priv_funct  I     3
// _inputs_from_decode_stage_priv_address  I    12
// _inputs_from_writeback_stage_destination  I     5
// _inputs_from_writeback_stage_rd_type  I     1
// _inputs_from_writeback_stage_destination_value  I    64
// _inputs_from_writeback_stage_firing  I     1
// _forwarding_from_memory_data   I    71
// sin_in                         I     1 reg
// EN__inputs_from_decode_stage   I     1
// EN__inputs_from_writeback_stage  I     1
// EN__forwarding_from_memory     I     1
// EN_sin                         I     1
//
// Combinational paths from inputs to outputs:
//   (_inputs_from_decode_stage_rs1,
//    _inputs_from_decode_stage_rs1_type,
//    _inputs_from_decode_stage_rs2,
//    _inputs_from_decode_stage_rs2_type,
//    _inputs_from_decode_stage_rs3,
//    _inputs_from_decode_stage_firing,
//    _inputs_from_decode_stage_privilege,
//    _inputs_from_decode_stage_priv_funct,
//    _inputs_from_decode_stage_priv_address,
//    _inputs_from_writeback_stage_destination,
//    _inputs_from_writeback_stage_rd_type,
//    _inputs_from_writeback_stage_destination_value,
//    _forwarding_from_memory_data,
//    EN__inputs_from_decode_stage,
//    EN__inputs_from_writeback_stage,
//    EN__forwarding_from_memory) -> output_to_decode_stage
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkregisterfile(CLK,
		      RST_N,

		      _inputs_from_decode_stage_rs1,
		      _inputs_from_decode_stage_rs1_type,
		      _inputs_from_decode_stage_rs2,
		      _inputs_from_decode_stage_rs2_type,
		      _inputs_from_decode_stage_rs3,
		      _inputs_from_decode_stage_rd,
		      _inputs_from_decode_stage_rd_type,
		      _inputs_from_decode_stage_firing,
		      _inputs_from_decode_stage_privilege,
		      _inputs_from_decode_stage_priv_funct,
		      _inputs_from_decode_stage_priv_address,
		      EN__inputs_from_decode_stage,
		      RDY__inputs_from_decode_stage,

		      _inputs_from_writeback_stage_destination,
		      _inputs_from_writeback_stage_rd_type,
		      _inputs_from_writeback_stage_destination_value,
		      _inputs_from_writeback_stage_firing,
		      EN__inputs_from_writeback_stage,
		      RDY__inputs_from_writeback_stage,

		      _forwarding_from_memory_data,
		      EN__forwarding_from_memory,
		      RDY__forwarding_from_memory,

		      output_to_decode_stage,
		      RDY_output_to_decode_stage,

		      sin_in,
		      EN_sin,
		      RDY_sin,

		      sout,
		      RDY_sout);
  input  CLK;
  input  RST_N;

  // action method _inputs_from_decode_stage
  input  [4 : 0] _inputs_from_decode_stage_rs1;
  input  _inputs_from_decode_stage_rs1_type;
  input  [4 : 0] _inputs_from_decode_stage_rs2;
  input  _inputs_from_decode_stage_rs2_type;
  input  [4 : 0] _inputs_from_decode_stage_rs3;
  input  [4 : 0] _inputs_from_decode_stage_rd;
  input  _inputs_from_decode_stage_rd_type;
  input  _inputs_from_decode_stage_firing;
  input  _inputs_from_decode_stage_privilege;
  input  [2 : 0] _inputs_from_decode_stage_priv_funct;
  input  [11 : 0] _inputs_from_decode_stage_priv_address;
  input  EN__inputs_from_decode_stage;
  output RDY__inputs_from_decode_stage;

  // action method _inputs_from_writeback_stage
  input  [4 : 0] _inputs_from_writeback_stage_destination;
  input  _inputs_from_writeback_stage_rd_type;
  input  [63 : 0] _inputs_from_writeback_stage_destination_value;
  input  _inputs_from_writeback_stage_firing;
  input  EN__inputs_from_writeback_stage;
  output RDY__inputs_from_writeback_stage;

  // action method _forwarding_from_memory
  input  [70 : 0] _forwarding_from_memory_data;
  input  EN__forwarding_from_memory;
  output RDY__forwarding_from_memory;

  // value method output_to_decode_stage
  output [192 : 0] output_to_decode_stage;
  output RDY_output_to_decode_stage;

  // action method sin
  input  sin_in;
  input  EN_sin;
  output RDY_sin;

  // value method sout
  output sout;
  output RDY_sout;

  // signals for module outputs
  wire [192 : 0] output_to_decode_stage;
  wire RDY__forwarding_from_memory,
       RDY__inputs_from_decode_stage,
       RDY__inputs_from_writeback_stage,
       RDY_output_to_decode_stage,
       RDY_sin,
       RDY_sout,
       sout;

  // inlined wires
  wire [192 : 0] wr_output_to_decode$wget;
  wire [70 : 0] wr_forward_from_WB$wget;
  wire wr_output_to_decode$whas;

  // register floating_rf_0
  reg [63 : 0] floating_rf_0;
  wire [63 : 0] floating_rf_0$D_IN;
  wire floating_rf_0$EN;

  // register floating_rf_1
  reg [63 : 0] floating_rf_1;
  wire [63 : 0] floating_rf_1$D_IN;
  wire floating_rf_1$EN;

  // register floating_rf_10
  reg [63 : 0] floating_rf_10;
  wire [63 : 0] floating_rf_10$D_IN;
  wire floating_rf_10$EN;

  // register floating_rf_11
  reg [63 : 0] floating_rf_11;
  wire [63 : 0] floating_rf_11$D_IN;
  wire floating_rf_11$EN;

  // register floating_rf_12
  reg [63 : 0] floating_rf_12;
  wire [63 : 0] floating_rf_12$D_IN;
  wire floating_rf_12$EN;

  // register floating_rf_13
  reg [63 : 0] floating_rf_13;
  wire [63 : 0] floating_rf_13$D_IN;
  wire floating_rf_13$EN;

  // register floating_rf_14
  reg [63 : 0] floating_rf_14;
  wire [63 : 0] floating_rf_14$D_IN;
  wire floating_rf_14$EN;

  // register floating_rf_15
  reg [63 : 0] floating_rf_15;
  wire [63 : 0] floating_rf_15$D_IN;
  wire floating_rf_15$EN;

  // register floating_rf_16
  reg [63 : 0] floating_rf_16;
  wire [63 : 0] floating_rf_16$D_IN;
  wire floating_rf_16$EN;

  // register floating_rf_17
  reg [63 : 0] floating_rf_17;
  wire [63 : 0] floating_rf_17$D_IN;
  wire floating_rf_17$EN;

  // register floating_rf_18
  reg [63 : 0] floating_rf_18;
  wire [63 : 0] floating_rf_18$D_IN;
  wire floating_rf_18$EN;

  // register floating_rf_19
  reg [63 : 0] floating_rf_19;
  wire [63 : 0] floating_rf_19$D_IN;
  wire floating_rf_19$EN;

  // register floating_rf_2
  reg [63 : 0] floating_rf_2;
  wire [63 : 0] floating_rf_2$D_IN;
  wire floating_rf_2$EN;

  // register floating_rf_20
  reg [63 : 0] floating_rf_20;
  wire [63 : 0] floating_rf_20$D_IN;
  wire floating_rf_20$EN;

  // register floating_rf_21
  reg [63 : 0] floating_rf_21;
  wire [63 : 0] floating_rf_21$D_IN;
  wire floating_rf_21$EN;

  // register floating_rf_22
  reg [63 : 0] floating_rf_22;
  wire [63 : 0] floating_rf_22$D_IN;
  wire floating_rf_22$EN;

  // register floating_rf_23
  reg [63 : 0] floating_rf_23;
  wire [63 : 0] floating_rf_23$D_IN;
  wire floating_rf_23$EN;

  // register floating_rf_24
  reg [63 : 0] floating_rf_24;
  wire [63 : 0] floating_rf_24$D_IN;
  wire floating_rf_24$EN;

  // register floating_rf_25
  reg [63 : 0] floating_rf_25;
  wire [63 : 0] floating_rf_25$D_IN;
  wire floating_rf_25$EN;

  // register floating_rf_26
  reg [63 : 0] floating_rf_26;
  wire [63 : 0] floating_rf_26$D_IN;
  wire floating_rf_26$EN;

  // register floating_rf_27
  reg [63 : 0] floating_rf_27;
  wire [63 : 0] floating_rf_27$D_IN;
  wire floating_rf_27$EN;

  // register floating_rf_28
  reg [63 : 0] floating_rf_28;
  wire [63 : 0] floating_rf_28$D_IN;
  wire floating_rf_28$EN;

  // register floating_rf_29
  reg [63 : 0] floating_rf_29;
  wire [63 : 0] floating_rf_29$D_IN;
  wire floating_rf_29$EN;

  // register floating_rf_3
  reg [63 : 0] floating_rf_3;
  wire [63 : 0] floating_rf_3$D_IN;
  wire floating_rf_3$EN;

  // register floating_rf_30
  reg [63 : 0] floating_rf_30;
  wire [63 : 0] floating_rf_30$D_IN;
  wire floating_rf_30$EN;

  // register floating_rf_31
  reg [63 : 0] floating_rf_31;
  wire [63 : 0] floating_rf_31$D_IN;
  wire floating_rf_31$EN;

  // register floating_rf_4
  reg [63 : 0] floating_rf_4;
  wire [63 : 0] floating_rf_4$D_IN;
  wire floating_rf_4$EN;

  // register floating_rf_5
  reg [63 : 0] floating_rf_5;
  wire [63 : 0] floating_rf_5$D_IN;
  wire floating_rf_5$EN;

  // register floating_rf_6
  reg [63 : 0] floating_rf_6;
  wire [63 : 0] floating_rf_6$D_IN;
  wire floating_rf_6$EN;

  // register floating_rf_7
  reg [63 : 0] floating_rf_7;
  wire [63 : 0] floating_rf_7$D_IN;
  wire floating_rf_7$EN;

  // register floating_rf_8
  reg [63 : 0] floating_rf_8;
  wire [63 : 0] floating_rf_8$D_IN;
  wire floating_rf_8$EN;

  // register floating_rf_9
  reg [63 : 0] floating_rf_9;
  wire [63 : 0] floating_rf_9$D_IN;
  wire floating_rf_9$EN;

  // register integer_rf_0
  reg [63 : 0] integer_rf_0;
  wire [63 : 0] integer_rf_0$D_IN;
  wire integer_rf_0$EN;

  // register integer_rf_1
  reg [63 : 0] integer_rf_1;
  wire [63 : 0] integer_rf_1$D_IN;
  wire integer_rf_1$EN;

  // register integer_rf_10
  reg [63 : 0] integer_rf_10;
  wire [63 : 0] integer_rf_10$D_IN;
  wire integer_rf_10$EN;

  // register integer_rf_11
  reg [63 : 0] integer_rf_11;
  wire [63 : 0] integer_rf_11$D_IN;
  wire integer_rf_11$EN;

  // register integer_rf_12
  reg [63 : 0] integer_rf_12;
  wire [63 : 0] integer_rf_12$D_IN;
  wire integer_rf_12$EN;

  // register integer_rf_13
  reg [63 : 0] integer_rf_13;
  wire [63 : 0] integer_rf_13$D_IN;
  wire integer_rf_13$EN;

  // register integer_rf_14
  reg [63 : 0] integer_rf_14;
  wire [63 : 0] integer_rf_14$D_IN;
  wire integer_rf_14$EN;

  // register integer_rf_15
  reg [63 : 0] integer_rf_15;
  wire [63 : 0] integer_rf_15$D_IN;
  wire integer_rf_15$EN;

  // register integer_rf_16
  reg [63 : 0] integer_rf_16;
  wire [63 : 0] integer_rf_16$D_IN;
  wire integer_rf_16$EN;

  // register integer_rf_17
  reg [63 : 0] integer_rf_17;
  wire [63 : 0] integer_rf_17$D_IN;
  wire integer_rf_17$EN;

  // register integer_rf_18
  reg [63 : 0] integer_rf_18;
  wire [63 : 0] integer_rf_18$D_IN;
  wire integer_rf_18$EN;

  // register integer_rf_19
  reg [63 : 0] integer_rf_19;
  wire [63 : 0] integer_rf_19$D_IN;
  wire integer_rf_19$EN;

  // register integer_rf_2
  reg [63 : 0] integer_rf_2;
  wire [63 : 0] integer_rf_2$D_IN;
  wire integer_rf_2$EN;

  // register integer_rf_20
  reg [63 : 0] integer_rf_20;
  wire [63 : 0] integer_rf_20$D_IN;
  wire integer_rf_20$EN;

  // register integer_rf_21
  reg [63 : 0] integer_rf_21;
  wire [63 : 0] integer_rf_21$D_IN;
  wire integer_rf_21$EN;

  // register integer_rf_22
  reg [63 : 0] integer_rf_22;
  wire [63 : 0] integer_rf_22$D_IN;
  wire integer_rf_22$EN;

  // register integer_rf_23
  reg [63 : 0] integer_rf_23;
  wire [63 : 0] integer_rf_23$D_IN;
  wire integer_rf_23$EN;

  // register integer_rf_24
  reg [63 : 0] integer_rf_24;
  wire [63 : 0] integer_rf_24$D_IN;
  wire integer_rf_24$EN;

  // register integer_rf_25
  reg [63 : 0] integer_rf_25;
  wire [63 : 0] integer_rf_25$D_IN;
  wire integer_rf_25$EN;

  // register integer_rf_26
  reg [63 : 0] integer_rf_26;
  wire [63 : 0] integer_rf_26$D_IN;
  wire integer_rf_26$EN;

  // register integer_rf_27
  reg [63 : 0] integer_rf_27;
  wire [63 : 0] integer_rf_27$D_IN;
  wire integer_rf_27$EN;

  // register integer_rf_28
  reg [63 : 0] integer_rf_28;
  wire [63 : 0] integer_rf_28$D_IN;
  wire integer_rf_28$EN;

  // register integer_rf_29
  reg [63 : 0] integer_rf_29;
  wire [63 : 0] integer_rf_29$D_IN;
  wire integer_rf_29$EN;

  // register integer_rf_3
  reg [63 : 0] integer_rf_3;
  wire [63 : 0] integer_rf_3$D_IN;
  wire integer_rf_3$EN;

  // register integer_rf_30
  reg [63 : 0] integer_rf_30;
  wire [63 : 0] integer_rf_30$D_IN;
  wire integer_rf_30$EN;

  // register integer_rf_31
  reg [63 : 0] integer_rf_31;
  wire [63 : 0] integer_rf_31$D_IN;
  wire integer_rf_31$EN;

  // register integer_rf_4
  reg [63 : 0] integer_rf_4;
  wire [63 : 0] integer_rf_4$D_IN;
  wire integer_rf_4$EN;

  // register integer_rf_5
  reg [63 : 0] integer_rf_5;
  wire [63 : 0] integer_rf_5$D_IN;
  wire integer_rf_5$EN;

  // register integer_rf_6
  reg [63 : 0] integer_rf_6;
  wire [63 : 0] integer_rf_6$D_IN;
  wire integer_rf_6$EN;

  // register integer_rf_7
  reg [63 : 0] integer_rf_7;
  wire [63 : 0] integer_rf_7$D_IN;
  wire integer_rf_7$EN;

  // register integer_rf_8
  reg [63 : 0] integer_rf_8;
  wire [63 : 0] integer_rf_8$D_IN;
  wire integer_rf_8$EN;

  // register integer_rf_9
  reg [63 : 0] integer_rf_9;
  wire [63 : 0] integer_rf_9$D_IN;
  wire integer_rf_9$EN;

  // ports of submodule csr_rf
  wire [63 : 0] csr_rf$inputs, csr_rf$inputs_rs1data;
  wire [11 : 0] csr_rf$inputs_address;
  wire [2 : 0] csr_rf$inputs_funct;
  wire csr_rf$EN_inputs, csr_rf$EN_sin, csr_rf$sin_in, csr_rf$sout;

  // rule scheduling signals
  wire CAN_FIRE_RL_update_the_regfile,
       CAN_FIRE__forwarding_from_memory,
       CAN_FIRE__inputs_from_decode_stage,
       CAN_FIRE__inputs_from_writeback_stage,
       CAN_FIRE_sin,
       WILL_FIRE_RL_update_the_regfile,
       WILL_FIRE__forwarding_from_memory,
       WILL_FIRE__inputs_from_decode_stage,
       WILL_FIRE__inputs_from_writeback_stage,
       WILL_FIRE_sin;

  // remaining internal signals
  reg [63 : 0] SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d170,
	       SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d180,
	       SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d185,
	       SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d136,
	       SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d179,
	       v__h5969,
	       v__h5987,
	       v__h6329,
	       v__h6347,
	       v__h6387,
	       v__h6405;
  wire [191 : 0] IF_wr_privilege_whas_AND_wr_privilege_wget_THE_ETC___d190;
  wire [63 : 0] IF_IF_wr_forward_from_MEM_whas__1_THEN_wr_forw_ETC___d187,
		IF_IF_wr_forward_from_WB_whas__1_THEN_wr_forwa_ETC___d172,
		IF_IF_wr_forward_from_WB_whas__1_THEN_wr_forwa_ETC___d182,
		IF_IF_wr_forward_from_WB_whas__1_THEN_wr_forwa_ETC___d186,
		IF_NOT_wr_rs1_type_whas__4_00_OR_NOT_wr_rs1_ty_ETC___d171,
		IF_NOT_wr_rs2_type_whas__9_76_OR_NOT_wr_rs2_ty_ETC___d181,
		IF_wr_forward_from_MEM_whas__1_THEN_wr_forward_ETC___d95,
		IF_wr_forward_from_WB_whas__1_THEN_wr_forward__ETC___d99,
		rs1data__h4451,
		rs1data__h4712,
		rs2data__h5942,
		rs3data__h5943,
		x__read__h1001;
  wire [4 : 0] x__read__h227,
	       x__read__h367,
	       x__read__h437,
	       x__read__h86,
	       x__read__h860,
	       x__read_rd_forward__h4579,
	       x__read_rd_forward__h4645;
  wire [2 : 0] funct__h4449;
  wire IF_IF_wr_forward_from_MEM_whas__1_THEN_wr_forw_ETC___d46,
       IF_IF_wr_forward_from_MEM_whas__1_THEN_wr_forw_ETC___d71,
       IF_IF_wr_forward_from_MEM_whas__1_THEN_wr_forw_ETC___d85,
       IF_IF_wr_forward_from_MEM_whas__1_THEN_wr_forw_ETC___d88,
       IF_wr_forward_from_MEM_whas__1_THEN_wr_forward_ETC___d28,
       IF_wr_forward_from_MEM_whas__1_THEN_wr_forward_ETC___d63,
       IF_wr_forward_from_WB_whas__1_THEN_wr_forward__ETC___d35,
       IF_wr_forward_from_WB_whas__1_THEN_wr_forward__ETC___d64,
       IF_wr_forward_from_WB_whas__1_THEN_wr_forward__ETC___d78,
       NOT_IF_wr_forward_from_WB_whas__1_THEN_wr_forw_ETC___d45,
       NOT_IF_wr_forward_from_WB_whas__1_THEN_wr_forw_ETC___d70,
       wr_decode_firing_whas_AND_wr_decode_firing_wge_ETC___d192,
       wr_decode_firing_whas_AND_wr_decode_firing_wge_ETC___d198,
       wr_forward_from_WB_whas__1_AND_wr_forward_from_ETC___d40,
       wr_forward_from_WB_whas__1_AND_wr_forward_from_ETC___d67,
       wr_privilege_whas_AND_wr_privilege_wget_AND_IF_ETC___d90,
       wr_wb_firing_whas__04_AND_wr_wb_firing_wget__0_ETC___d218;

  // action method _inputs_from_decode_stage
  assign RDY__inputs_from_decode_stage = 1'd1 ;
  assign CAN_FIRE__inputs_from_decode_stage = 1'd1 ;
  assign WILL_FIRE__inputs_from_decode_stage = EN__inputs_from_decode_stage ;

  // action method _inputs_from_writeback_stage
  assign RDY__inputs_from_writeback_stage = 1'd1 ;
  assign CAN_FIRE__inputs_from_writeback_stage = 1'd1 ;
  assign WILL_FIRE__inputs_from_writeback_stage =
	     EN__inputs_from_writeback_stage ;

  // action method _forwarding_from_memory
  assign RDY__forwarding_from_memory = 1'd1 ;
  assign CAN_FIRE__forwarding_from_memory = 1'd1 ;
  assign WILL_FIRE__forwarding_from_memory = EN__forwarding_from_memory ;

  // value method output_to_decode_stage
  assign output_to_decode_stage =
	     { wr_output_to_decode$whas && wr_output_to_decode$wget[192],
	       wr_output_to_decode$wget[191:0] } ;
  assign RDY_output_to_decode_stage = 1'd1 ;

  // action method sin
  assign RDY_sin = 1'd1 ;
  assign CAN_FIRE_sin = 1'd1 ;
  assign WILL_FIRE_sin = EN_sin ;

  // value method sout
  assign sout = csr_rf$sout ;
  assign RDY_sout = 1'd1 ;

  // submodule csr_rf
  mkcsr csr_rf(.CLK(CLK),
	       .RST_N(RST_N),
	       .inputs_address(csr_rf$inputs_address),
	       .inputs_funct(csr_rf$inputs_funct),
	       .inputs_rs1data(csr_rf$inputs_rs1data),
	       .sin_in(csr_rf$sin_in),
	       .EN_inputs(csr_rf$EN_inputs),
	       .EN_sin(csr_rf$EN_sin),
	       .inputs(csr_rf$inputs),
	       .RDY_inputs(),
	       .RDY_sin(),
	       .sout(csr_rf$sout),
	       .RDY_sout());

  // rule RL_update_the_regfile
  assign CAN_FIRE_RL_update_the_regfile = 1'd1 ;
  assign WILL_FIRE_RL_update_the_regfile = 1'd1 ;

  // inlined wires
  assign wr_output_to_decode$wget =
	     { 1'd1,
	       IF_wr_privilege_whas_AND_wr_privilege_wget_THE_ETC___d190 } ;
  assign wr_output_to_decode$whas =
	     EN__inputs_from_decode_stage &&
	     _inputs_from_decode_stage_firing &&
	     wr_privilege_whas_AND_wr_privilege_wget_AND_IF_ETC___d90 ;
  assign wr_forward_from_WB$wget =
	     { _inputs_from_writeback_stage_destination_value,
	       _inputs_from_writeback_stage_destination,
	       1'd1,
	       _inputs_from_writeback_stage_rd_type } ;

  // register floating_rf_0
  assign floating_rf_0$D_IN = x__read__h1001 ;
  assign floating_rf_0$EN =
	     x__read__h860 == 5'd0 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     _inputs_from_writeback_stage_rd_type ;

  // register floating_rf_1
  assign floating_rf_1$D_IN = x__read__h1001 ;
  assign floating_rf_1$EN =
	     x__read__h860 == 5'd1 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     _inputs_from_writeback_stage_rd_type ;

  // register floating_rf_10
  assign floating_rf_10$D_IN = x__read__h1001 ;
  assign floating_rf_10$EN =
	     x__read__h860 == 5'd10 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     _inputs_from_writeback_stage_rd_type ;

  // register floating_rf_11
  assign floating_rf_11$D_IN = x__read__h1001 ;
  assign floating_rf_11$EN =
	     x__read__h860 == 5'd11 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     _inputs_from_writeback_stage_rd_type ;

  // register floating_rf_12
  assign floating_rf_12$D_IN = x__read__h1001 ;
  assign floating_rf_12$EN =
	     x__read__h860 == 5'd12 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     _inputs_from_writeback_stage_rd_type ;

  // register floating_rf_13
  assign floating_rf_13$D_IN = x__read__h1001 ;
  assign floating_rf_13$EN =
	     x__read__h860 == 5'd13 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     _inputs_from_writeback_stage_rd_type ;

  // register floating_rf_14
  assign floating_rf_14$D_IN = x__read__h1001 ;
  assign floating_rf_14$EN =
	     x__read__h860 == 5'd14 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     _inputs_from_writeback_stage_rd_type ;

  // register floating_rf_15
  assign floating_rf_15$D_IN = x__read__h1001 ;
  assign floating_rf_15$EN =
	     x__read__h860 == 5'd15 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     _inputs_from_writeback_stage_rd_type ;

  // register floating_rf_16
  assign floating_rf_16$D_IN = x__read__h1001 ;
  assign floating_rf_16$EN =
	     x__read__h860 == 5'd16 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     _inputs_from_writeback_stage_rd_type ;

  // register floating_rf_17
  assign floating_rf_17$D_IN = x__read__h1001 ;
  assign floating_rf_17$EN =
	     x__read__h860 == 5'd17 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     _inputs_from_writeback_stage_rd_type ;

  // register floating_rf_18
  assign floating_rf_18$D_IN = x__read__h1001 ;
  assign floating_rf_18$EN =
	     x__read__h860 == 5'd18 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     _inputs_from_writeback_stage_rd_type ;

  // register floating_rf_19
  assign floating_rf_19$D_IN = x__read__h1001 ;
  assign floating_rf_19$EN =
	     x__read__h860 == 5'd19 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     _inputs_from_writeback_stage_rd_type ;

  // register floating_rf_2
  assign floating_rf_2$D_IN = x__read__h1001 ;
  assign floating_rf_2$EN =
	     x__read__h860 == 5'd2 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     _inputs_from_writeback_stage_rd_type ;

  // register floating_rf_20
  assign floating_rf_20$D_IN = x__read__h1001 ;
  assign floating_rf_20$EN =
	     x__read__h860 == 5'd20 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     _inputs_from_writeback_stage_rd_type ;

  // register floating_rf_21
  assign floating_rf_21$D_IN = x__read__h1001 ;
  assign floating_rf_21$EN =
	     x__read__h860 == 5'd21 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     _inputs_from_writeback_stage_rd_type ;

  // register floating_rf_22
  assign floating_rf_22$D_IN = x__read__h1001 ;
  assign floating_rf_22$EN =
	     x__read__h860 == 5'd22 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     _inputs_from_writeback_stage_rd_type ;

  // register floating_rf_23
  assign floating_rf_23$D_IN = x__read__h1001 ;
  assign floating_rf_23$EN =
	     x__read__h860 == 5'd23 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     _inputs_from_writeback_stage_rd_type ;

  // register floating_rf_24
  assign floating_rf_24$D_IN = x__read__h1001 ;
  assign floating_rf_24$EN =
	     x__read__h860 == 5'd24 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     _inputs_from_writeback_stage_rd_type ;

  // register floating_rf_25
  assign floating_rf_25$D_IN = x__read__h1001 ;
  assign floating_rf_25$EN =
	     x__read__h860 == 5'd25 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     _inputs_from_writeback_stage_rd_type ;

  // register floating_rf_26
  assign floating_rf_26$D_IN = x__read__h1001 ;
  assign floating_rf_26$EN =
	     x__read__h860 == 5'd26 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     _inputs_from_writeback_stage_rd_type ;

  // register floating_rf_27
  assign floating_rf_27$D_IN = x__read__h1001 ;
  assign floating_rf_27$EN =
	     x__read__h860 == 5'd27 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     _inputs_from_writeback_stage_rd_type ;

  // register floating_rf_28
  assign floating_rf_28$D_IN = x__read__h1001 ;
  assign floating_rf_28$EN =
	     x__read__h860 == 5'd28 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     _inputs_from_writeback_stage_rd_type ;

  // register floating_rf_29
  assign floating_rf_29$D_IN = x__read__h1001 ;
  assign floating_rf_29$EN =
	     x__read__h860 == 5'd29 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     _inputs_from_writeback_stage_rd_type ;

  // register floating_rf_3
  assign floating_rf_3$D_IN = x__read__h1001 ;
  assign floating_rf_3$EN =
	     x__read__h860 == 5'd3 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     _inputs_from_writeback_stage_rd_type ;

  // register floating_rf_30
  assign floating_rf_30$D_IN = x__read__h1001 ;
  assign floating_rf_30$EN =
	     x__read__h860 == 5'd30 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     _inputs_from_writeback_stage_rd_type ;

  // register floating_rf_31
  assign floating_rf_31$D_IN = x__read__h1001 ;
  assign floating_rf_31$EN =
	     x__read__h860 == 5'd31 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     _inputs_from_writeback_stage_rd_type ;

  // register floating_rf_4
  assign floating_rf_4$D_IN = x__read__h1001 ;
  assign floating_rf_4$EN =
	     x__read__h860 == 5'd4 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     _inputs_from_writeback_stage_rd_type ;

  // register floating_rf_5
  assign floating_rf_5$D_IN = x__read__h1001 ;
  assign floating_rf_5$EN =
	     x__read__h860 == 5'd5 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     _inputs_from_writeback_stage_rd_type ;

  // register floating_rf_6
  assign floating_rf_6$D_IN = x__read__h1001 ;
  assign floating_rf_6$EN =
	     x__read__h860 == 5'd6 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     _inputs_from_writeback_stage_rd_type ;

  // register floating_rf_7
  assign floating_rf_7$D_IN = x__read__h1001 ;
  assign floating_rf_7$EN =
	     x__read__h860 == 5'd7 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     _inputs_from_writeback_stage_rd_type ;

  // register floating_rf_8
  assign floating_rf_8$D_IN = x__read__h1001 ;
  assign floating_rf_8$EN =
	     x__read__h860 == 5'd8 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     _inputs_from_writeback_stage_rd_type ;

  // register floating_rf_9
  assign floating_rf_9$D_IN = x__read__h1001 ;
  assign floating_rf_9$EN =
	     x__read__h860 == 5'd9 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     _inputs_from_writeback_stage_rd_type ;

  // register integer_rf_0
  assign integer_rf_0$D_IN = x__read__h1001 ;
  assign integer_rf_0$EN =
	     x__read__h860 == 5'd0 &&
	     wr_wb_firing_whas__04_AND_wr_wb_firing_wget__0_ETC___d218 ;

  // register integer_rf_1
  assign integer_rf_1$D_IN = x__read__h1001 ;
  assign integer_rf_1$EN =
	     x__read__h860 == 5'd1 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     !_inputs_from_writeback_stage_rd_type ;

  // register integer_rf_10
  assign integer_rf_10$D_IN = x__read__h1001 ;
  assign integer_rf_10$EN =
	     x__read__h860 == 5'd10 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     !_inputs_from_writeback_stage_rd_type ;

  // register integer_rf_11
  assign integer_rf_11$D_IN = x__read__h1001 ;
  assign integer_rf_11$EN =
	     x__read__h860 == 5'd11 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     !_inputs_from_writeback_stage_rd_type ;

  // register integer_rf_12
  assign integer_rf_12$D_IN = x__read__h1001 ;
  assign integer_rf_12$EN =
	     x__read__h860 == 5'd12 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     !_inputs_from_writeback_stage_rd_type ;

  // register integer_rf_13
  assign integer_rf_13$D_IN = x__read__h1001 ;
  assign integer_rf_13$EN =
	     x__read__h860 == 5'd13 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     !_inputs_from_writeback_stage_rd_type ;

  // register integer_rf_14
  assign integer_rf_14$D_IN = x__read__h1001 ;
  assign integer_rf_14$EN =
	     x__read__h860 == 5'd14 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     !_inputs_from_writeback_stage_rd_type ;

  // register integer_rf_15
  assign integer_rf_15$D_IN = x__read__h1001 ;
  assign integer_rf_15$EN =
	     x__read__h860 == 5'd15 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     !_inputs_from_writeback_stage_rd_type ;

  // register integer_rf_16
  assign integer_rf_16$D_IN = x__read__h1001 ;
  assign integer_rf_16$EN =
	     x__read__h860 == 5'd16 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     !_inputs_from_writeback_stage_rd_type ;

  // register integer_rf_17
  assign integer_rf_17$D_IN = x__read__h1001 ;
  assign integer_rf_17$EN =
	     x__read__h860 == 5'd17 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     !_inputs_from_writeback_stage_rd_type ;

  // register integer_rf_18
  assign integer_rf_18$D_IN = x__read__h1001 ;
  assign integer_rf_18$EN =
	     x__read__h860 == 5'd18 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     !_inputs_from_writeback_stage_rd_type ;

  // register integer_rf_19
  assign integer_rf_19$D_IN = x__read__h1001 ;
  assign integer_rf_19$EN =
	     x__read__h860 == 5'd19 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     !_inputs_from_writeback_stage_rd_type ;

  // register integer_rf_2
  assign integer_rf_2$D_IN = x__read__h1001 ;
  assign integer_rf_2$EN =
	     x__read__h860 == 5'd2 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     !_inputs_from_writeback_stage_rd_type ;

  // register integer_rf_20
  assign integer_rf_20$D_IN = x__read__h1001 ;
  assign integer_rf_20$EN =
	     x__read__h860 == 5'd20 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     !_inputs_from_writeback_stage_rd_type ;

  // register integer_rf_21
  assign integer_rf_21$D_IN = x__read__h1001 ;
  assign integer_rf_21$EN =
	     x__read__h860 == 5'd21 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     !_inputs_from_writeback_stage_rd_type ;

  // register integer_rf_22
  assign integer_rf_22$D_IN = x__read__h1001 ;
  assign integer_rf_22$EN =
	     x__read__h860 == 5'd22 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     !_inputs_from_writeback_stage_rd_type ;

  // register integer_rf_23
  assign integer_rf_23$D_IN = x__read__h1001 ;
  assign integer_rf_23$EN =
	     x__read__h860 == 5'd23 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     !_inputs_from_writeback_stage_rd_type ;

  // register integer_rf_24
  assign integer_rf_24$D_IN = x__read__h1001 ;
  assign integer_rf_24$EN =
	     x__read__h860 == 5'd24 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     !_inputs_from_writeback_stage_rd_type ;

  // register integer_rf_25
  assign integer_rf_25$D_IN = x__read__h1001 ;
  assign integer_rf_25$EN =
	     x__read__h860 == 5'd25 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     !_inputs_from_writeback_stage_rd_type ;

  // register integer_rf_26
  assign integer_rf_26$D_IN = x__read__h1001 ;
  assign integer_rf_26$EN =
	     x__read__h860 == 5'd26 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     !_inputs_from_writeback_stage_rd_type ;

  // register integer_rf_27
  assign integer_rf_27$D_IN = x__read__h1001 ;
  assign integer_rf_27$EN =
	     x__read__h860 == 5'd27 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     !_inputs_from_writeback_stage_rd_type ;

  // register integer_rf_28
  assign integer_rf_28$D_IN = x__read__h1001 ;
  assign integer_rf_28$EN =
	     x__read__h860 == 5'd28 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     !_inputs_from_writeback_stage_rd_type ;

  // register integer_rf_29
  assign integer_rf_29$D_IN = x__read__h1001 ;
  assign integer_rf_29$EN =
	     x__read__h860 == 5'd29 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     !_inputs_from_writeback_stage_rd_type ;

  // register integer_rf_3
  assign integer_rf_3$D_IN = x__read__h1001 ;
  assign integer_rf_3$EN =
	     x__read__h860 == 5'd3 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     !_inputs_from_writeback_stage_rd_type ;

  // register integer_rf_30
  assign integer_rf_30$D_IN = x__read__h1001 ;
  assign integer_rf_30$EN =
	     x__read__h860 == 5'd30 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     !_inputs_from_writeback_stage_rd_type ;

  // register integer_rf_31
  assign integer_rf_31$D_IN = x__read__h1001 ;
  assign integer_rf_31$EN =
	     x__read__h860 == 5'd31 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     !_inputs_from_writeback_stage_rd_type ;

  // register integer_rf_4
  assign integer_rf_4$D_IN = x__read__h1001 ;
  assign integer_rf_4$EN =
	     x__read__h860 == 5'd4 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     !_inputs_from_writeback_stage_rd_type ;

  // register integer_rf_5
  assign integer_rf_5$D_IN = x__read__h1001 ;
  assign integer_rf_5$EN =
	     x__read__h860 == 5'd5 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     !_inputs_from_writeback_stage_rd_type ;

  // register integer_rf_6
  assign integer_rf_6$D_IN = x__read__h1001 ;
  assign integer_rf_6$EN =
	     x__read__h860 == 5'd6 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     !_inputs_from_writeback_stage_rd_type ;

  // register integer_rf_7
  assign integer_rf_7$D_IN = x__read__h1001 ;
  assign integer_rf_7$EN =
	     x__read__h860 == 5'd7 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     !_inputs_from_writeback_stage_rd_type ;

  // register integer_rf_8
  assign integer_rf_8$D_IN = x__read__h1001 ;
  assign integer_rf_8$EN =
	     x__read__h860 == 5'd8 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     !_inputs_from_writeback_stage_rd_type ;

  // register integer_rf_9
  assign integer_rf_9$D_IN = x__read__h1001 ;
  assign integer_rf_9$EN =
	     x__read__h860 == 5'd9 && EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     !_inputs_from_writeback_stage_rd_type ;

  // submodule csr_rf
  assign csr_rf$inputs_address =
	     EN__inputs_from_decode_stage ?
	       _inputs_from_decode_stage_priv_address :
	       12'd0 ;
  assign csr_rf$inputs_funct = funct__h4449 ;
  assign csr_rf$inputs_rs1data =
	     funct__h4449[2] ? rs1data__h4451 : rs1data__h4712 ;
  assign csr_rf$sin_in = sin_in ;
  assign csr_rf$EN_inputs =
	     wr_decode_firing_whas_AND_wr_decode_firing_wge_ETC___d192 ;
  assign csr_rf$EN_sin = EN_sin ;

  // remaining internal signals
  assign IF_IF_wr_forward_from_MEM_whas__1_THEN_wr_forw_ETC___d187 =
	     (x__read_rd_forward__h4579 == x__read__h367 &&
	      EN__forwarding_from_memory &&
	      _forwarding_from_memory_data[0]) ?
	       IF_wr_forward_from_MEM_whas__1_THEN_wr_forward_ETC___d95 :
	       IF_IF_wr_forward_from_WB_whas__1_THEN_wr_forwa_ETC___d186 ;
  assign IF_IF_wr_forward_from_MEM_whas__1_THEN_wr_forw_ETC___d46 =
	     IF_wr_forward_from_MEM_whas__1_THEN_wr_forward_ETC___d28 ?
	       EN__forwarding_from_memory && _forwarding_from_memory_data[1] :
	       NOT_IF_wr_forward_from_WB_whas__1_THEN_wr_forw_ETC___d45 ;
  assign IF_IF_wr_forward_from_MEM_whas__1_THEN_wr_forw_ETC___d71 =
	     IF_wr_forward_from_MEM_whas__1_THEN_wr_forward_ETC___d63 ?
	       EN__forwarding_from_memory && _forwarding_from_memory_data[1] :
	       NOT_IF_wr_forward_from_WB_whas__1_THEN_wr_forw_ETC___d70 ;
  assign IF_IF_wr_forward_from_MEM_whas__1_THEN_wr_forw_ETC___d85 =
	     (x__read_rd_forward__h4579 == x__read__h367 &&
	      EN__forwarding_from_memory &&
	      _forwarding_from_memory_data[0]) ?
	       _forwarding_from_memory_data[1] :
	       !IF_wr_forward_from_WB_whas__1_THEN_wr_forward__ETC___d78 ||
	       !EN__inputs_from_writeback_stage ||
	       !wr_forward_from_WB$wget[0] ||
	       wr_forward_from_WB$wget[1] ;
  assign IF_IF_wr_forward_from_MEM_whas__1_THEN_wr_forw_ETC___d88 =
	     IF_IF_wr_forward_from_MEM_whas__1_THEN_wr_forw_ETC___d46 &&
	     IF_IF_wr_forward_from_MEM_whas__1_THEN_wr_forw_ETC___d71 &&
	     (x__read__h367 == 5'd0 ||
	      IF_IF_wr_forward_from_MEM_whas__1_THEN_wr_forw_ETC___d85) ;
  assign IF_IF_wr_forward_from_WB_whas__1_THEN_wr_forwa_ETC___d172 =
	     (IF_wr_forward_from_WB_whas__1_THEN_wr_forward__ETC___d35 &&
	      x__read__h86 != 5'd0 &&
	      wr_forward_from_WB_whas__1_AND_wr_forward_from_ETC___d40) ?
	       IF_wr_forward_from_WB_whas__1_THEN_wr_forward__ETC___d99 :
	       IF_NOT_wr_rs1_type_whas__4_00_OR_NOT_wr_rs1_ty_ETC___d171 ;
  assign IF_IF_wr_forward_from_WB_whas__1_THEN_wr_forwa_ETC___d182 =
	     (IF_wr_forward_from_WB_whas__1_THEN_wr_forward__ETC___d64 &&
	      x__read__h227 != 5'd0 &&
	      wr_forward_from_WB_whas__1_AND_wr_forward_from_ETC___d67) ?
	       IF_wr_forward_from_WB_whas__1_THEN_wr_forward__ETC___d99 :
	       IF_NOT_wr_rs2_type_whas__9_76_OR_NOT_wr_rs2_ty_ETC___d181 ;
  assign IF_IF_wr_forward_from_WB_whas__1_THEN_wr_forwa_ETC___d186 =
	     (IF_wr_forward_from_WB_whas__1_THEN_wr_forward__ETC___d78 &&
	      EN__inputs_from_writeback_stage &&
	      wr_forward_from_WB$wget[0]) ?
	       IF_wr_forward_from_WB_whas__1_THEN_wr_forward__ETC___d99 :
	       SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d185 ;
  assign IF_NOT_wr_rs1_type_whas__4_00_OR_NOT_wr_rs1_ty_ETC___d171 =
	     (!EN__inputs_from_decode_stage ||
	      !_inputs_from_decode_stage_rs1_type) ?
	       SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d136 :
	       SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d170 ;
  assign IF_NOT_wr_rs2_type_whas__9_76_OR_NOT_wr_rs2_ty_ETC___d181 =
	     (!EN__inputs_from_decode_stage ||
	      !_inputs_from_decode_stage_rs2_type) ?
	       SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d179 :
	       SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d180 ;
  assign IF_wr_forward_from_MEM_whas__1_THEN_wr_forward_ETC___d28 =
	     x__read_rd_forward__h4579 == x__read__h86 &&
	     x__read__h86 != 5'd0 &&
	     (EN__forwarding_from_memory &&
	      _forwarding_from_memory_data[0]) ==
	     (EN__inputs_from_decode_stage &&
	      _inputs_from_decode_stage_rs1_type) ;
  assign IF_wr_forward_from_MEM_whas__1_THEN_wr_forward_ETC___d63 =
	     x__read_rd_forward__h4579 == x__read__h227 &&
	     x__read__h227 != 5'd0 &&
	     (EN__forwarding_from_memory &&
	      _forwarding_from_memory_data[0]) ==
	     (EN__inputs_from_decode_stage &&
	      _inputs_from_decode_stage_rs2_type) ;
  assign IF_wr_forward_from_MEM_whas__1_THEN_wr_forward_ETC___d95 =
	     EN__forwarding_from_memory ?
	       _forwarding_from_memory_data[70:7] :
	       64'd0 ;
  assign IF_wr_forward_from_WB_whas__1_THEN_wr_forward__ETC___d35 =
	     x__read_rd_forward__h4645 == x__read__h86 ;
  assign IF_wr_forward_from_WB_whas__1_THEN_wr_forward__ETC___d64 =
	     x__read_rd_forward__h4645 == x__read__h227 ;
  assign IF_wr_forward_from_WB_whas__1_THEN_wr_forward__ETC___d78 =
	     x__read_rd_forward__h4645 == x__read__h367 ;
  assign IF_wr_forward_from_WB_whas__1_THEN_wr_forward__ETC___d99 =
	     EN__inputs_from_writeback_stage ?
	       wr_forward_from_WB$wget[70:7] :
	       64'd0 ;
  assign IF_wr_privilege_whas_AND_wr_privilege_wget_THE_ETC___d190 =
	     (EN__inputs_from_decode_stage &&
	      _inputs_from_decode_stage_privilege) ?
	       { csr_rf$inputs, 128'd0 } :
	       { rs1data__h4712, rs2data__h5942, rs3data__h5943 } ;
  assign NOT_IF_wr_forward_from_WB_whas__1_THEN_wr_forw_ETC___d45 =
	     !IF_wr_forward_from_WB_whas__1_THEN_wr_forward__ETC___d35 ||
	     x__read__h86 == 5'd0 ||
	     !wr_forward_from_WB_whas__1_AND_wr_forward_from_ETC___d40 ||
	     EN__inputs_from_writeback_stage && wr_forward_from_WB$wget[1] ;
  assign NOT_IF_wr_forward_from_WB_whas__1_THEN_wr_forw_ETC___d70 =
	     !IF_wr_forward_from_WB_whas__1_THEN_wr_forward__ETC___d64 ||
	     x__read__h227 == 5'd0 ||
	     !wr_forward_from_WB_whas__1_AND_wr_forward_from_ETC___d67 ||
	     EN__inputs_from_writeback_stage && wr_forward_from_WB$wget[1] ;
  assign funct__h4449 =
	     EN__inputs_from_decode_stage ?
	       _inputs_from_decode_stage_priv_funct :
	       3'd0 ;
  assign rs1data__h4451 = { 59'd0, x__read__h86 } ;
  assign rs1data__h4712 =
	     IF_wr_forward_from_MEM_whas__1_THEN_wr_forward_ETC___d28 ?
	       IF_wr_forward_from_MEM_whas__1_THEN_wr_forward_ETC___d95 :
	       IF_IF_wr_forward_from_WB_whas__1_THEN_wr_forwa_ETC___d172 ;
  assign rs2data__h5942 =
	     IF_wr_forward_from_MEM_whas__1_THEN_wr_forward_ETC___d63 ?
	       IF_wr_forward_from_MEM_whas__1_THEN_wr_forward_ETC___d95 :
	       IF_IF_wr_forward_from_WB_whas__1_THEN_wr_forwa_ETC___d182 ;
  assign rs3data__h5943 =
	     (x__read__h367 == 5'd0) ?
	       64'd0 :
	       IF_IF_wr_forward_from_MEM_whas__1_THEN_wr_forw_ETC___d187 ;
  assign wr_decode_firing_whas_AND_wr_decode_firing_wge_ETC___d192 =
	     EN__inputs_from_decode_stage &&
	     _inputs_from_decode_stage_firing &&
	     _inputs_from_decode_stage_privilege &&
	     (funct__h4449[2] ||
	      IF_IF_wr_forward_from_MEM_whas__1_THEN_wr_forw_ETC___d46) ;
  assign wr_decode_firing_whas_AND_wr_decode_firing_wge_ETC___d198 =
	     EN__inputs_from_decode_stage &&
	     _inputs_from_decode_stage_firing &&
	     !_inputs_from_decode_stage_privilege &&
	     IF_IF_wr_forward_from_MEM_whas__1_THEN_wr_forw_ETC___d88 ;
  assign wr_forward_from_WB_whas__1_AND_wr_forward_from_ETC___d40 =
	     (EN__inputs_from_writeback_stage &&
	      wr_forward_from_WB$wget[0]) ==
	     (EN__inputs_from_decode_stage &&
	      _inputs_from_decode_stage_rs1_type) ;
  assign wr_forward_from_WB_whas__1_AND_wr_forward_from_ETC___d67 =
	     (EN__inputs_from_writeback_stage &&
	      wr_forward_from_WB$wget[0]) ==
	     (EN__inputs_from_decode_stage &&
	      _inputs_from_decode_stage_rs2_type) ;
  assign wr_privilege_whas_AND_wr_privilege_wget_AND_IF_ETC___d90 =
	     EN__inputs_from_decode_stage &&
	     _inputs_from_decode_stage_privilege &&
	     (funct__h4449[2] ||
	      IF_IF_wr_forward_from_MEM_whas__1_THEN_wr_forw_ETC___d46) ||
	     (!EN__inputs_from_decode_stage ||
	      !_inputs_from_decode_stage_privilege) &&
	     IF_IF_wr_forward_from_MEM_whas__1_THEN_wr_forw_ETC___d88 ;
  assign wr_wb_firing_whas__04_AND_wr_wb_firing_wget__0_ETC___d218 =
	     EN__inputs_from_writeback_stage &&
	     _inputs_from_writeback_stage_firing &&
	     x__read__h860 != 5'd0 &&
	     !_inputs_from_writeback_stage_rd_type ;
  assign x__read__h1001 =
	     EN__inputs_from_writeback_stage ?
	       _inputs_from_writeback_stage_destination_value :
	       64'd0 ;
  assign x__read__h227 =
	     EN__inputs_from_decode_stage ?
	       _inputs_from_decode_stage_rs2 :
	       5'd0 ;
  assign x__read__h367 =
	     EN__inputs_from_decode_stage ?
	       _inputs_from_decode_stage_rs3 :
	       5'd0 ;
  assign x__read__h437 =
	     EN__inputs_from_decode_stage ?
	       _inputs_from_decode_stage_rd :
	       5'd0 ;
  assign x__read__h86 =
	     EN__inputs_from_decode_stage ?
	       _inputs_from_decode_stage_rs1 :
	       5'd0 ;
  assign x__read__h860 =
	     EN__inputs_from_writeback_stage ?
	       _inputs_from_writeback_stage_destination :
	       5'd0 ;
  assign x__read_rd_forward__h4579 =
	     EN__forwarding_from_memory ?
	       _forwarding_from_memory_data[6:2] :
	       5'd0 ;
  assign x__read_rd_forward__h4645 =
	     EN__inputs_from_writeback_stage ?
	       wr_forward_from_WB$wget[6:2] :
	       5'd0 ;
  always@(x__read__h86 or
	  integer_rf_0 or
	  integer_rf_1 or
	  integer_rf_2 or
	  integer_rf_3 or
	  integer_rf_4 or
	  integer_rf_5 or
	  integer_rf_6 or
	  integer_rf_7 or
	  integer_rf_8 or
	  integer_rf_9 or
	  integer_rf_10 or
	  integer_rf_11 or
	  integer_rf_12 or
	  integer_rf_13 or
	  integer_rf_14 or
	  integer_rf_15 or
	  integer_rf_16 or
	  integer_rf_17 or
	  integer_rf_18 or
	  integer_rf_19 or
	  integer_rf_20 or
	  integer_rf_21 or
	  integer_rf_22 or
	  integer_rf_23 or
	  integer_rf_24 or
	  integer_rf_25 or
	  integer_rf_26 or
	  integer_rf_27 or
	  integer_rf_28 or integer_rf_29 or integer_rf_30 or integer_rf_31)
  begin
    case (x__read__h86)
      5'd0:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d136 =
	      integer_rf_0;
      5'd1:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d136 =
	      integer_rf_1;
      5'd2:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d136 =
	      integer_rf_2;
      5'd3:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d136 =
	      integer_rf_3;
      5'd4:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d136 =
	      integer_rf_4;
      5'd5:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d136 =
	      integer_rf_5;
      5'd6:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d136 =
	      integer_rf_6;
      5'd7:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d136 =
	      integer_rf_7;
      5'd8:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d136 =
	      integer_rf_8;
      5'd9:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d136 =
	      integer_rf_9;
      5'd10:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d136 =
	      integer_rf_10;
      5'd11:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d136 =
	      integer_rf_11;
      5'd12:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d136 =
	      integer_rf_12;
      5'd13:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d136 =
	      integer_rf_13;
      5'd14:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d136 =
	      integer_rf_14;
      5'd15:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d136 =
	      integer_rf_15;
      5'd16:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d136 =
	      integer_rf_16;
      5'd17:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d136 =
	      integer_rf_17;
      5'd18:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d136 =
	      integer_rf_18;
      5'd19:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d136 =
	      integer_rf_19;
      5'd20:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d136 =
	      integer_rf_20;
      5'd21:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d136 =
	      integer_rf_21;
      5'd22:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d136 =
	      integer_rf_22;
      5'd23:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d136 =
	      integer_rf_23;
      5'd24:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d136 =
	      integer_rf_24;
      5'd25:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d136 =
	      integer_rf_25;
      5'd26:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d136 =
	      integer_rf_26;
      5'd27:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d136 =
	      integer_rf_27;
      5'd28:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d136 =
	      integer_rf_28;
      5'd29:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d136 =
	      integer_rf_29;
      5'd30:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d136 =
	      integer_rf_30;
      5'd31:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d136 =
	      integer_rf_31;
    endcase
  end
  always@(x__read__h86 or
	  floating_rf_0 or
	  floating_rf_1 or
	  floating_rf_2 or
	  floating_rf_3 or
	  floating_rf_4 or
	  floating_rf_5 or
	  floating_rf_6 or
	  floating_rf_7 or
	  floating_rf_8 or
	  floating_rf_9 or
	  floating_rf_10 or
	  floating_rf_11 or
	  floating_rf_12 or
	  floating_rf_13 or
	  floating_rf_14 or
	  floating_rf_15 or
	  floating_rf_16 or
	  floating_rf_17 or
	  floating_rf_18 or
	  floating_rf_19 or
	  floating_rf_20 or
	  floating_rf_21 or
	  floating_rf_22 or
	  floating_rf_23 or
	  floating_rf_24 or
	  floating_rf_25 or
	  floating_rf_26 or
	  floating_rf_27 or
	  floating_rf_28 or
	  floating_rf_29 or floating_rf_30 or floating_rf_31)
  begin
    case (x__read__h86)
      5'd0:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d170 =
	      floating_rf_0;
      5'd1:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d170 =
	      floating_rf_1;
      5'd2:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d170 =
	      floating_rf_2;
      5'd3:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d170 =
	      floating_rf_3;
      5'd4:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d170 =
	      floating_rf_4;
      5'd5:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d170 =
	      floating_rf_5;
      5'd6:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d170 =
	      floating_rf_6;
      5'd7:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d170 =
	      floating_rf_7;
      5'd8:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d170 =
	      floating_rf_8;
      5'd9:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d170 =
	      floating_rf_9;
      5'd10:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d170 =
	      floating_rf_10;
      5'd11:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d170 =
	      floating_rf_11;
      5'd12:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d170 =
	      floating_rf_12;
      5'd13:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d170 =
	      floating_rf_13;
      5'd14:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d170 =
	      floating_rf_14;
      5'd15:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d170 =
	      floating_rf_15;
      5'd16:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d170 =
	      floating_rf_16;
      5'd17:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d170 =
	      floating_rf_17;
      5'd18:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d170 =
	      floating_rf_18;
      5'd19:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d170 =
	      floating_rf_19;
      5'd20:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d170 =
	      floating_rf_20;
      5'd21:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d170 =
	      floating_rf_21;
      5'd22:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d170 =
	      floating_rf_22;
      5'd23:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d170 =
	      floating_rf_23;
      5'd24:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d170 =
	      floating_rf_24;
      5'd25:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d170 =
	      floating_rf_25;
      5'd26:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d170 =
	      floating_rf_26;
      5'd27:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d170 =
	      floating_rf_27;
      5'd28:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d170 =
	      floating_rf_28;
      5'd29:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d170 =
	      floating_rf_29;
      5'd30:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d170 =
	      floating_rf_30;
      5'd31:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d170 =
	      floating_rf_31;
    endcase
  end
  always@(x__read__h227 or
	  integer_rf_0 or
	  integer_rf_1 or
	  integer_rf_2 or
	  integer_rf_3 or
	  integer_rf_4 or
	  integer_rf_5 or
	  integer_rf_6 or
	  integer_rf_7 or
	  integer_rf_8 or
	  integer_rf_9 or
	  integer_rf_10 or
	  integer_rf_11 or
	  integer_rf_12 or
	  integer_rf_13 or
	  integer_rf_14 or
	  integer_rf_15 or
	  integer_rf_16 or
	  integer_rf_17 or
	  integer_rf_18 or
	  integer_rf_19 or
	  integer_rf_20 or
	  integer_rf_21 or
	  integer_rf_22 or
	  integer_rf_23 or
	  integer_rf_24 or
	  integer_rf_25 or
	  integer_rf_26 or
	  integer_rf_27 or
	  integer_rf_28 or integer_rf_29 or integer_rf_30 or integer_rf_31)
  begin
    case (x__read__h227)
      5'd0:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d179 =
	      integer_rf_0;
      5'd1:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d179 =
	      integer_rf_1;
      5'd2:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d179 =
	      integer_rf_2;
      5'd3:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d179 =
	      integer_rf_3;
      5'd4:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d179 =
	      integer_rf_4;
      5'd5:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d179 =
	      integer_rf_5;
      5'd6:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d179 =
	      integer_rf_6;
      5'd7:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d179 =
	      integer_rf_7;
      5'd8:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d179 =
	      integer_rf_8;
      5'd9:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d179 =
	      integer_rf_9;
      5'd10:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d179 =
	      integer_rf_10;
      5'd11:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d179 =
	      integer_rf_11;
      5'd12:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d179 =
	      integer_rf_12;
      5'd13:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d179 =
	      integer_rf_13;
      5'd14:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d179 =
	      integer_rf_14;
      5'd15:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d179 =
	      integer_rf_15;
      5'd16:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d179 =
	      integer_rf_16;
      5'd17:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d179 =
	      integer_rf_17;
      5'd18:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d179 =
	      integer_rf_18;
      5'd19:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d179 =
	      integer_rf_19;
      5'd20:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d179 =
	      integer_rf_20;
      5'd21:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d179 =
	      integer_rf_21;
      5'd22:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d179 =
	      integer_rf_22;
      5'd23:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d179 =
	      integer_rf_23;
      5'd24:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d179 =
	      integer_rf_24;
      5'd25:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d179 =
	      integer_rf_25;
      5'd26:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d179 =
	      integer_rf_26;
      5'd27:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d179 =
	      integer_rf_27;
      5'd28:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d179 =
	      integer_rf_28;
      5'd29:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d179 =
	      integer_rf_29;
      5'd30:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d179 =
	      integer_rf_30;
      5'd31:
	  SEL_ARR_integer_rf_0_read__03_integer_rf_1_rea_ETC___d179 =
	      integer_rf_31;
    endcase
  end
  always@(x__read__h227 or
	  floating_rf_0 or
	  floating_rf_1 or
	  floating_rf_2 or
	  floating_rf_3 or
	  floating_rf_4 or
	  floating_rf_5 or
	  floating_rf_6 or
	  floating_rf_7 or
	  floating_rf_8 or
	  floating_rf_9 or
	  floating_rf_10 or
	  floating_rf_11 or
	  floating_rf_12 or
	  floating_rf_13 or
	  floating_rf_14 or
	  floating_rf_15 or
	  floating_rf_16 or
	  floating_rf_17 or
	  floating_rf_18 or
	  floating_rf_19 or
	  floating_rf_20 or
	  floating_rf_21 or
	  floating_rf_22 or
	  floating_rf_23 or
	  floating_rf_24 or
	  floating_rf_25 or
	  floating_rf_26 or
	  floating_rf_27 or
	  floating_rf_28 or
	  floating_rf_29 or floating_rf_30 or floating_rf_31)
  begin
    case (x__read__h227)
      5'd0:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d180 =
	      floating_rf_0;
      5'd1:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d180 =
	      floating_rf_1;
      5'd2:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d180 =
	      floating_rf_2;
      5'd3:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d180 =
	      floating_rf_3;
      5'd4:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d180 =
	      floating_rf_4;
      5'd5:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d180 =
	      floating_rf_5;
      5'd6:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d180 =
	      floating_rf_6;
      5'd7:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d180 =
	      floating_rf_7;
      5'd8:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d180 =
	      floating_rf_8;
      5'd9:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d180 =
	      floating_rf_9;
      5'd10:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d180 =
	      floating_rf_10;
      5'd11:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d180 =
	      floating_rf_11;
      5'd12:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d180 =
	      floating_rf_12;
      5'd13:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d180 =
	      floating_rf_13;
      5'd14:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d180 =
	      floating_rf_14;
      5'd15:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d180 =
	      floating_rf_15;
      5'd16:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d180 =
	      floating_rf_16;
      5'd17:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d180 =
	      floating_rf_17;
      5'd18:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d180 =
	      floating_rf_18;
      5'd19:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d180 =
	      floating_rf_19;
      5'd20:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d180 =
	      floating_rf_20;
      5'd21:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d180 =
	      floating_rf_21;
      5'd22:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d180 =
	      floating_rf_22;
      5'd23:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d180 =
	      floating_rf_23;
      5'd24:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d180 =
	      floating_rf_24;
      5'd25:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d180 =
	      floating_rf_25;
      5'd26:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d180 =
	      floating_rf_26;
      5'd27:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d180 =
	      floating_rf_27;
      5'd28:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d180 =
	      floating_rf_28;
      5'd29:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d180 =
	      floating_rf_29;
      5'd30:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d180 =
	      floating_rf_30;
      5'd31:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d180 =
	      floating_rf_31;
    endcase
  end
  always@(x__read__h367 or
	  floating_rf_0 or
	  floating_rf_1 or
	  floating_rf_2 or
	  floating_rf_3 or
	  floating_rf_4 or
	  floating_rf_5 or
	  floating_rf_6 or
	  floating_rf_7 or
	  floating_rf_8 or
	  floating_rf_9 or
	  floating_rf_10 or
	  floating_rf_11 or
	  floating_rf_12 or
	  floating_rf_13 or
	  floating_rf_14 or
	  floating_rf_15 or
	  floating_rf_16 or
	  floating_rf_17 or
	  floating_rf_18 or
	  floating_rf_19 or
	  floating_rf_20 or
	  floating_rf_21 or
	  floating_rf_22 or
	  floating_rf_23 or
	  floating_rf_24 or
	  floating_rf_25 or
	  floating_rf_26 or
	  floating_rf_27 or
	  floating_rf_28 or
	  floating_rf_29 or floating_rf_30 or floating_rf_31)
  begin
    case (x__read__h367)
      5'd0:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d185 =
	      floating_rf_0;
      5'd1:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d185 =
	      floating_rf_1;
      5'd2:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d185 =
	      floating_rf_2;
      5'd3:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d185 =
	      floating_rf_3;
      5'd4:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d185 =
	      floating_rf_4;
      5'd5:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d185 =
	      floating_rf_5;
      5'd6:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d185 =
	      floating_rf_6;
      5'd7:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d185 =
	      floating_rf_7;
      5'd8:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d185 =
	      floating_rf_8;
      5'd9:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d185 =
	      floating_rf_9;
      5'd10:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d185 =
	      floating_rf_10;
      5'd11:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d185 =
	      floating_rf_11;
      5'd12:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d185 =
	      floating_rf_12;
      5'd13:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d185 =
	      floating_rf_13;
      5'd14:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d185 =
	      floating_rf_14;
      5'd15:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d185 =
	      floating_rf_15;
      5'd16:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d185 =
	      floating_rf_16;
      5'd17:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d185 =
	      floating_rf_17;
      5'd18:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d185 =
	      floating_rf_18;
      5'd19:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d185 =
	      floating_rf_19;
      5'd20:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d185 =
	      floating_rf_20;
      5'd21:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d185 =
	      floating_rf_21;
      5'd22:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d185 =
	      floating_rf_22;
      5'd23:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d185 =
	      floating_rf_23;
      5'd24:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d185 =
	      floating_rf_24;
      5'd25:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d185 =
	      floating_rf_25;
      5'd26:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d185 =
	      floating_rf_26;
      5'd27:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d185 =
	      floating_rf_27;
      5'd28:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d185 =
	      floating_rf_28;
      5'd29:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d185 =
	      floating_rf_29;
      5'd30:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d185 =
	      floating_rf_30;
      5'd31:
	  SEL_ARR_floating_rf_0_read__37_floating_rf_1_r_ETC___d185 =
	      floating_rf_31;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        floating_rf_0 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	floating_rf_1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	floating_rf_10 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	floating_rf_11 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	floating_rf_12 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	floating_rf_13 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	floating_rf_14 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	floating_rf_15 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	floating_rf_16 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	floating_rf_17 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	floating_rf_18 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	floating_rf_19 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	floating_rf_2 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	floating_rf_20 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	floating_rf_21 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	floating_rf_22 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	floating_rf_23 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	floating_rf_24 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	floating_rf_25 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	floating_rf_26 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	floating_rf_27 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	floating_rf_28 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	floating_rf_29 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	floating_rf_3 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	floating_rf_30 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	floating_rf_31 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	floating_rf_4 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	floating_rf_5 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	floating_rf_6 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	floating_rf_7 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	floating_rf_8 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	floating_rf_9 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	integer_rf_0 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	integer_rf_1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	integer_rf_10 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	integer_rf_11 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	integer_rf_12 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	integer_rf_13 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	integer_rf_14 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	integer_rf_15 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	integer_rf_16 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	integer_rf_17 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	integer_rf_18 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	integer_rf_19 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	integer_rf_2 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	integer_rf_20 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	integer_rf_21 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	integer_rf_22 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	integer_rf_23 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	integer_rf_24 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	integer_rf_25 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	integer_rf_26 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	integer_rf_27 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	integer_rf_28 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	integer_rf_29 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	integer_rf_3 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	integer_rf_30 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	integer_rf_31 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	integer_rf_4 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	integer_rf_5 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	integer_rf_6 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	integer_rf_7 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	integer_rf_8 <= `BSV_ASSIGNMENT_DELAY 64'd0;
	integer_rf_9 <= `BSV_ASSIGNMENT_DELAY 64'd0;
      end
    else
      begin
        if (floating_rf_0$EN)
	  floating_rf_0 <= `BSV_ASSIGNMENT_DELAY floating_rf_0$D_IN;
	if (floating_rf_1$EN)
	  floating_rf_1 <= `BSV_ASSIGNMENT_DELAY floating_rf_1$D_IN;
	if (floating_rf_10$EN)
	  floating_rf_10 <= `BSV_ASSIGNMENT_DELAY floating_rf_10$D_IN;
	if (floating_rf_11$EN)
	  floating_rf_11 <= `BSV_ASSIGNMENT_DELAY floating_rf_11$D_IN;
	if (floating_rf_12$EN)
	  floating_rf_12 <= `BSV_ASSIGNMENT_DELAY floating_rf_12$D_IN;
	if (floating_rf_13$EN)
	  floating_rf_13 <= `BSV_ASSIGNMENT_DELAY floating_rf_13$D_IN;
	if (floating_rf_14$EN)
	  floating_rf_14 <= `BSV_ASSIGNMENT_DELAY floating_rf_14$D_IN;
	if (floating_rf_15$EN)
	  floating_rf_15 <= `BSV_ASSIGNMENT_DELAY floating_rf_15$D_IN;
	if (floating_rf_16$EN)
	  floating_rf_16 <= `BSV_ASSIGNMENT_DELAY floating_rf_16$D_IN;
	if (floating_rf_17$EN)
	  floating_rf_17 <= `BSV_ASSIGNMENT_DELAY floating_rf_17$D_IN;
	if (floating_rf_18$EN)
	  floating_rf_18 <= `BSV_ASSIGNMENT_DELAY floating_rf_18$D_IN;
	if (floating_rf_19$EN)
	  floating_rf_19 <= `BSV_ASSIGNMENT_DELAY floating_rf_19$D_IN;
	if (floating_rf_2$EN)
	  floating_rf_2 <= `BSV_ASSIGNMENT_DELAY floating_rf_2$D_IN;
	if (floating_rf_20$EN)
	  floating_rf_20 <= `BSV_ASSIGNMENT_DELAY floating_rf_20$D_IN;
	if (floating_rf_21$EN)
	  floating_rf_21 <= `BSV_ASSIGNMENT_DELAY floating_rf_21$D_IN;
	if (floating_rf_22$EN)
	  floating_rf_22 <= `BSV_ASSIGNMENT_DELAY floating_rf_22$D_IN;
	if (floating_rf_23$EN)
	  floating_rf_23 <= `BSV_ASSIGNMENT_DELAY floating_rf_23$D_IN;
	if (floating_rf_24$EN)
	  floating_rf_24 <= `BSV_ASSIGNMENT_DELAY floating_rf_24$D_IN;
	if (floating_rf_25$EN)
	  floating_rf_25 <= `BSV_ASSIGNMENT_DELAY floating_rf_25$D_IN;
	if (floating_rf_26$EN)
	  floating_rf_26 <= `BSV_ASSIGNMENT_DELAY floating_rf_26$D_IN;
	if (floating_rf_27$EN)
	  floating_rf_27 <= `BSV_ASSIGNMENT_DELAY floating_rf_27$D_IN;
	if (floating_rf_28$EN)
	  floating_rf_28 <= `BSV_ASSIGNMENT_DELAY floating_rf_28$D_IN;
	if (floating_rf_29$EN)
	  floating_rf_29 <= `BSV_ASSIGNMENT_DELAY floating_rf_29$D_IN;
	if (floating_rf_3$EN)
	  floating_rf_3 <= `BSV_ASSIGNMENT_DELAY floating_rf_3$D_IN;
	if (floating_rf_30$EN)
	  floating_rf_30 <= `BSV_ASSIGNMENT_DELAY floating_rf_30$D_IN;
	if (floating_rf_31$EN)
	  floating_rf_31 <= `BSV_ASSIGNMENT_DELAY floating_rf_31$D_IN;
	if (floating_rf_4$EN)
	  floating_rf_4 <= `BSV_ASSIGNMENT_DELAY floating_rf_4$D_IN;
	if (floating_rf_5$EN)
	  floating_rf_5 <= `BSV_ASSIGNMENT_DELAY floating_rf_5$D_IN;
	if (floating_rf_6$EN)
	  floating_rf_6 <= `BSV_ASSIGNMENT_DELAY floating_rf_6$D_IN;
	if (floating_rf_7$EN)
	  floating_rf_7 <= `BSV_ASSIGNMENT_DELAY floating_rf_7$D_IN;
	if (floating_rf_8$EN)
	  floating_rf_8 <= `BSV_ASSIGNMENT_DELAY floating_rf_8$D_IN;
	if (floating_rf_9$EN)
	  floating_rf_9 <= `BSV_ASSIGNMENT_DELAY floating_rf_9$D_IN;
	if (integer_rf_0$EN)
	  integer_rf_0 <= `BSV_ASSIGNMENT_DELAY integer_rf_0$D_IN;
	if (integer_rf_1$EN)
	  integer_rf_1 <= `BSV_ASSIGNMENT_DELAY integer_rf_1$D_IN;
	if (integer_rf_10$EN)
	  integer_rf_10 <= `BSV_ASSIGNMENT_DELAY integer_rf_10$D_IN;
	if (integer_rf_11$EN)
	  integer_rf_11 <= `BSV_ASSIGNMENT_DELAY integer_rf_11$D_IN;
	if (integer_rf_12$EN)
	  integer_rf_12 <= `BSV_ASSIGNMENT_DELAY integer_rf_12$D_IN;
	if (integer_rf_13$EN)
	  integer_rf_13 <= `BSV_ASSIGNMENT_DELAY integer_rf_13$D_IN;
	if (integer_rf_14$EN)
	  integer_rf_14 <= `BSV_ASSIGNMENT_DELAY integer_rf_14$D_IN;
	if (integer_rf_15$EN)
	  integer_rf_15 <= `BSV_ASSIGNMENT_DELAY integer_rf_15$D_IN;
	if (integer_rf_16$EN)
	  integer_rf_16 <= `BSV_ASSIGNMENT_DELAY integer_rf_16$D_IN;
	if (integer_rf_17$EN)
	  integer_rf_17 <= `BSV_ASSIGNMENT_DELAY integer_rf_17$D_IN;
	if (integer_rf_18$EN)
	  integer_rf_18 <= `BSV_ASSIGNMENT_DELAY integer_rf_18$D_IN;
	if (integer_rf_19$EN)
	  integer_rf_19 <= `BSV_ASSIGNMENT_DELAY integer_rf_19$D_IN;
	if (integer_rf_2$EN)
	  integer_rf_2 <= `BSV_ASSIGNMENT_DELAY integer_rf_2$D_IN;
	if (integer_rf_20$EN)
	  integer_rf_20 <= `BSV_ASSIGNMENT_DELAY integer_rf_20$D_IN;
	if (integer_rf_21$EN)
	  integer_rf_21 <= `BSV_ASSIGNMENT_DELAY integer_rf_21$D_IN;
	if (integer_rf_22$EN)
	  integer_rf_22 <= `BSV_ASSIGNMENT_DELAY integer_rf_22$D_IN;
	if (integer_rf_23$EN)
	  integer_rf_23 <= `BSV_ASSIGNMENT_DELAY integer_rf_23$D_IN;
	if (integer_rf_24$EN)
	  integer_rf_24 <= `BSV_ASSIGNMENT_DELAY integer_rf_24$D_IN;
	if (integer_rf_25$EN)
	  integer_rf_25 <= `BSV_ASSIGNMENT_DELAY integer_rf_25$D_IN;
	if (integer_rf_26$EN)
	  integer_rf_26 <= `BSV_ASSIGNMENT_DELAY integer_rf_26$D_IN;
	if (integer_rf_27$EN)
	  integer_rf_27 <= `BSV_ASSIGNMENT_DELAY integer_rf_27$D_IN;
	if (integer_rf_28$EN)
	  integer_rf_28 <= `BSV_ASSIGNMENT_DELAY integer_rf_28$D_IN;
	if (integer_rf_29$EN)
	  integer_rf_29 <= `BSV_ASSIGNMENT_DELAY integer_rf_29$D_IN;
	if (integer_rf_3$EN)
	  integer_rf_3 <= `BSV_ASSIGNMENT_DELAY integer_rf_3$D_IN;
	if (integer_rf_30$EN)
	  integer_rf_30 <= `BSV_ASSIGNMENT_DELAY integer_rf_30$D_IN;
	if (integer_rf_31$EN)
	  integer_rf_31 <= `BSV_ASSIGNMENT_DELAY integer_rf_31$D_IN;
	if (integer_rf_4$EN)
	  integer_rf_4 <= `BSV_ASSIGNMENT_DELAY integer_rf_4$D_IN;
	if (integer_rf_5$EN)
	  integer_rf_5 <= `BSV_ASSIGNMENT_DELAY integer_rf_5$D_IN;
	if (integer_rf_6$EN)
	  integer_rf_6 <= `BSV_ASSIGNMENT_DELAY integer_rf_6$D_IN;
	if (integer_rf_7$EN)
	  integer_rf_7 <= `BSV_ASSIGNMENT_DELAY integer_rf_7$D_IN;
	if (integer_rf_8$EN)
	  integer_rf_8 <= `BSV_ASSIGNMENT_DELAY integer_rf_8$D_IN;
	if (integer_rf_9$EN)
	  integer_rf_9 <= `BSV_ASSIGNMENT_DELAY integer_rf_9$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    floating_rf_0 = 64'hAAAAAAAAAAAAAAAA;
    floating_rf_1 = 64'hAAAAAAAAAAAAAAAA;
    floating_rf_10 = 64'hAAAAAAAAAAAAAAAA;
    floating_rf_11 = 64'hAAAAAAAAAAAAAAAA;
    floating_rf_12 = 64'hAAAAAAAAAAAAAAAA;
    floating_rf_13 = 64'hAAAAAAAAAAAAAAAA;
    floating_rf_14 = 64'hAAAAAAAAAAAAAAAA;
    floating_rf_15 = 64'hAAAAAAAAAAAAAAAA;
    floating_rf_16 = 64'hAAAAAAAAAAAAAAAA;
    floating_rf_17 = 64'hAAAAAAAAAAAAAAAA;
    floating_rf_18 = 64'hAAAAAAAAAAAAAAAA;
    floating_rf_19 = 64'hAAAAAAAAAAAAAAAA;
    floating_rf_2 = 64'hAAAAAAAAAAAAAAAA;
    floating_rf_20 = 64'hAAAAAAAAAAAAAAAA;
    floating_rf_21 = 64'hAAAAAAAAAAAAAAAA;
    floating_rf_22 = 64'hAAAAAAAAAAAAAAAA;
    floating_rf_23 = 64'hAAAAAAAAAAAAAAAA;
    floating_rf_24 = 64'hAAAAAAAAAAAAAAAA;
    floating_rf_25 = 64'hAAAAAAAAAAAAAAAA;
    floating_rf_26 = 64'hAAAAAAAAAAAAAAAA;
    floating_rf_27 = 64'hAAAAAAAAAAAAAAAA;
    floating_rf_28 = 64'hAAAAAAAAAAAAAAAA;
    floating_rf_29 = 64'hAAAAAAAAAAAAAAAA;
    floating_rf_3 = 64'hAAAAAAAAAAAAAAAA;
    floating_rf_30 = 64'hAAAAAAAAAAAAAAAA;
    floating_rf_31 = 64'hAAAAAAAAAAAAAAAA;
    floating_rf_4 = 64'hAAAAAAAAAAAAAAAA;
    floating_rf_5 = 64'hAAAAAAAAAAAAAAAA;
    floating_rf_6 = 64'hAAAAAAAAAAAAAAAA;
    floating_rf_7 = 64'hAAAAAAAAAAAAAAAA;
    floating_rf_8 = 64'hAAAAAAAAAAAAAAAA;
    floating_rf_9 = 64'hAAAAAAAAAAAAAAAA;
    integer_rf_0 = 64'hAAAAAAAAAAAAAAAA;
    integer_rf_1 = 64'hAAAAAAAAAAAAAAAA;
    integer_rf_10 = 64'hAAAAAAAAAAAAAAAA;
    integer_rf_11 = 64'hAAAAAAAAAAAAAAAA;
    integer_rf_12 = 64'hAAAAAAAAAAAAAAAA;
    integer_rf_13 = 64'hAAAAAAAAAAAAAAAA;
    integer_rf_14 = 64'hAAAAAAAAAAAAAAAA;
    integer_rf_15 = 64'hAAAAAAAAAAAAAAAA;
    integer_rf_16 = 64'hAAAAAAAAAAAAAAAA;
    integer_rf_17 = 64'hAAAAAAAAAAAAAAAA;
    integer_rf_18 = 64'hAAAAAAAAAAAAAAAA;
    integer_rf_19 = 64'hAAAAAAAAAAAAAAAA;
    integer_rf_2 = 64'hAAAAAAAAAAAAAAAA;
    integer_rf_20 = 64'hAAAAAAAAAAAAAAAA;
    integer_rf_21 = 64'hAAAAAAAAAAAAAAAA;
    integer_rf_22 = 64'hAAAAAAAAAAAAAAAA;
    integer_rf_23 = 64'hAAAAAAAAAAAAAAAA;
    integer_rf_24 = 64'hAAAAAAAAAAAAAAAA;
    integer_rf_25 = 64'hAAAAAAAAAAAAAAAA;
    integer_rf_26 = 64'hAAAAAAAAAAAAAAAA;
    integer_rf_27 = 64'hAAAAAAAAAAAAAAAA;
    integer_rf_28 = 64'hAAAAAAAAAAAAAAAA;
    integer_rf_29 = 64'hAAAAAAAAAAAAAAAA;
    integer_rf_3 = 64'hAAAAAAAAAAAAAAAA;
    integer_rf_30 = 64'hAAAAAAAAAAAAAAAA;
    integer_rf_31 = 64'hAAAAAAAAAAAAAAAA;
    integer_rf_4 = 64'hAAAAAAAAAAAAAAAA;
    integer_rf_5 = 64'hAAAAAAAAAAAAAAAA;
    integer_rf_6 = 64'hAAAAAAAAAAAAAAAA;
    integer_rf_7 = 64'hAAAAAAAAAAAAAAAA;
    integer_rf_8 = 64'hAAAAAAAAAAAAAAAA;
    integer_rf_9 = 64'hAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (wr_decode_firing_whas_AND_wr_decode_firing_wge_ETC___d198)
	begin
	  v__h5969 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (wr_decode_firing_whas_AND_wr_decode_firing_wge_ETC___d198)
	begin
	  v__h5987 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (wr_decode_firing_whas_AND_wr_decode_firing_wge_ETC___d198)
	$display(v__h5969,
		 "\tRF: Reg1 :%d (%h) Reg2 :%d (%h) Reg3 :%d (%h) Rd :%d",
		 x__read__h86,
		 rs1data__h4712,
		 x__read__h227,
		 rs2data__h5942,
		 x__read__h367,
		 rs3data__h5943,
		 x__read__h437,
		 v__h5987);
    if (RST_N != `BSV_RESET_VALUE)
      if (wr_wb_firing_whas__04_AND_wr_wb_firing_wget__0_ETC___d218)
	begin
	  v__h6329 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (wr_wb_firing_whas__04_AND_wr_wb_firing_wget__0_ETC___d218)
	begin
	  v__h6347 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (wr_wb_firing_whas__04_AND_wr_wb_firing_wget__0_ETC___d218)
	$display(v__h6329,
		 "\tWriting into Integer Register : %d Value : %h ",
		 x__read__h860,
		 x__read__h1001,
		 v__h6347);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__inputs_from_writeback_stage &&
	  _inputs_from_writeback_stage_firing &&
	  _inputs_from_writeback_stage_rd_type)
	begin
	  v__h6387 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__inputs_from_writeback_stage &&
	  _inputs_from_writeback_stage_firing &&
	  _inputs_from_writeback_stage_rd_type)
	begin
	  v__h6405 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__inputs_from_writeback_stage &&
	  _inputs_from_writeback_stage_firing &&
	  _inputs_from_writeback_stage_rd_type)
	$display(v__h6387,
		 "\tWriting into SP-Floating Register : %d Value : %h ",
		 x__read__h860,
		 x__read__h1001,
		 v__h6405);
  end
  // synopsys translate_on
endmodule  // mkregisterfile

