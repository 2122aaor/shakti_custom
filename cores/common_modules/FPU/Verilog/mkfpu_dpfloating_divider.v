//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// On Fri Jan 22 01:17:42 IST 2016
//
//
// Ports:
// Name                         I/O  size props
// RDY__start                     O     1
// final_result_                  O   105
// RDY_final_result_              O     1 reg
// RDY__deque_buffer_reset_ready_signal  O     1
// RDY__set_flush                 O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// _start_operand1                I    64
// _start_operand2                I    64
// _start_destination             I     5
// _start_rob_number              I     4
// _start_fsr                     I    32
// _start_pc                      I    32
// _set_flush_f                   I     1
// EN__start                      I     1
// EN__deque_buffer_reset_ready_signal  I     1
// EN__set_flush                  I     1
//
// Combinational paths from inputs to outputs:
//   (_set_flush_f, EN__set_flush) -> RDY__start
//   (_set_flush_f, EN__set_flush) -> RDY__deque_buffer_reset_ready_signal
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkfpu_dpfloating_divider(CLK,
				RST_N,

				_start_operand1,
				_start_operand2,
				_start_destination,
				_start_rob_number,
				_start_fsr,
				_start_pc,
				EN__start,
				RDY__start,

				final_result_,
				RDY_final_result_,

				EN__deque_buffer_reset_ready_signal,
				RDY__deque_buffer_reset_ready_signal,

				_set_flush_f,
				EN__set_flush,
				RDY__set_flush);
  input  CLK;
  input  RST_N;

  // action method _start
  input  [63 : 0] _start_operand1;
  input  [63 : 0] _start_operand2;
  input  [4 : 0] _start_destination;
  input  [3 : 0] _start_rob_number;
  input  [31 : 0] _start_fsr;
  input  [31 : 0] _start_pc;
  input  EN__start;
  output RDY__start;

  // value method final_result_
  output [104 : 0] final_result_;
  output RDY_final_result_;

  // action method _deque_buffer_reset_ready_signal
  input  EN__deque_buffer_reset_ready_signal;
  output RDY__deque_buffer_reset_ready_signal;

  // action method _set_flush
  input  _set_flush_f;
  input  EN__set_flush;
  output RDY__set_flush;

  // signals for module outputs
  wire [104 : 0] final_result_;
  wire RDY__deque_buffer_reset_ready_signal,
       RDY__set_flush,
       RDY__start,
       RDY_final_result_;

  // inlined wires
  wire [197 : 0] ff_stage1_rv$port1__read,
		 ff_stage1_rv$port1__write_1,
		 ff_stage1_rv$port2__read,
		 ff_stage1_rv$port3__read;
  wire [154 : 0] ff_stage3_rv$port1__read,
		 ff_stage3_rv$port1__write_1,
		 ff_stage3_rv$port2__read,
		 ff_stage3_rv$port3__read;
  wire [91 : 0] ff_stage2_rv$port1__read,
		ff_stage2_rv$port1__write_1,
		ff_stage2_rv$port2__read,
		ff_stage2_rv$port3__read;

  // register ff_stage1_rv
  reg [197 : 0] ff_stage1_rv;
  wire [197 : 0] ff_stage1_rv$D_IN;
  wire ff_stage1_rv$EN;

  // register ff_stage2_rv
  reg [91 : 0] ff_stage2_rv;
  wire [91 : 0] ff_stage2_rv$D_IN;
  wire ff_stage2_rv$EN;

  // register ff_stage3_rv
  reg [154 : 0] ff_stage3_rv;
  wire [154 : 0] ff_stage3_rv$D_IN;
  wire ff_stage3_rv$EN;

  // register rg_ready_signal
  reg rg_ready_signal;
  wire rg_ready_signal$D_IN, rg_ready_signal$EN;

  // ports of submodule ff_final_out
  wire [104 : 0] ff_final_out$D_IN, ff_final_out$D_OUT;
  wire ff_final_out$CLR,
       ff_final_out$DEQ,
       ff_final_out$EMPTY_N,
       ff_final_out$ENQ,
       ff_final_out$FULL_N;

  // ports of submodule int_div
  wire [169 : 0] int_div$output_;
  wire [55 : 0] int_div$_inputs__denominator, int_div$_inputs__numerator;
  wire int_div$EN__inputs,
       int_div$EN__remove_last_entry,
       int_div$EN__set_flush,
       int_div$RDY__inputs,
       int_div$RDY__remove_last_entry,
       int_div$RDY_output_,
       int_div$_set_flush__flush;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_flush_output_fifo,
       CAN_FIRE_RL_rl_stage2,
       CAN_FIRE_RL_rl_stage3,
       CAN_FIRE_RL_rl_stage4,
       CAN_FIRE__deque_buffer_reset_ready_signal,
       CAN_FIRE__set_flush,
       CAN_FIRE__start,
       WILL_FIRE_RL_rl_flush_output_fifo,
       WILL_FIRE_RL_rl_stage2,
       WILL_FIRE_RL_rl_stage3,
       WILL_FIRE_RL_rl_stage4,
       WILL_FIRE__deque_buffer_reset_ready_signal,
       WILL_FIRE__set_flush,
       WILL_FIRE__start;

  // inputs to muxes for submodule ports
  wire MUX_rg_ready_signal$write_1__SEL_1;

  // remaining internal signals
  reg [2 : 0] CASE_ff_final_outD_OUT_BITS_3_TO_1_0_ff_final_ETC__q1;
  reg IF_ff_stage3_rv_port0__read__3_BITS_39_TO_37_2_ETC___d114;
  wire [108 : 0] IF_int_div_output___7_BIT_113_8_THEN_int_div_o_ETC___d58,
		 lv_mantissa__h1634;
  wire [63 : 0] _theResult_____1_snd_snd__h2480, x_final_result__h2294;
  wire [62 : 0] IF_IF_IF_IF_ff_stage3_rv_port0__read__3_BITS_3_ETC___d147,
		IF_ff_stage3_rv_port0__read__3_BIT_74_5_OR_ff__ETC___d149;
  wire [55 : 0] _theResult___snd__h1838, lv_quotient___1__h1839;
  wire [53 : 0] IF_IF_ff_stage3_rv_port0__read__3_BITS_39_TO_3_ETC___d118,
		lv_rounded_mantissa__h2818;
  wire [52 : 0] lv_dividend__h3436, lv_divisor__h3437, x__h16082, x__h16104;
  wire [31 : 0] lv_fsr___h2236;
  wire [12 : 0] IF_IF_IF_ff_stage3_rv_port0__read__3_BITS_39_T_ETC___d122,
		lv_exponent___1__h1840,
		lv_exponent___1__h2875,
		lv_exponent__h1630,
		lv_new_exponent__h3442,
		lv_v_shr___1__h2013,
		lv_v_shr__h1632,
		x__h3539,
		x__h3541,
		x__h3543,
		x__h3544,
		x__h3546,
		x__h3705,
		y__h3540,
		y__h3542,
		y__h3545,
		y__h3547,
		y__h3706;
  wire [6 : 0] IF_IF_IF_IF_INV_start_operand1_BITS_62_TO_52_7_ETC___d475,
	       IF_IF_IF_IF_INV_start_operand2_BITS_62_TO_52_8_ETC___d755;
  wire [5 : 0] IF_IF_IF_INV_start_operand1_BITS_62_TO_52_75_E_ETC___d357,
	       IF_IF_IF_INV_start_operand2_BITS_62_TO_52_86_E_ETC___d637,
	       IF_IF_IF_start_operand1_BIT_20_61_OR_start_ope_ETC___d470,
	       IF_IF_IF_start_operand2_BIT_20_41_OR_start_ope_ETC___d750,
	       _theResult_____2__h1633;
  wire [4 : 0] IF_IF_INV_start_operand1_BITS_62_TO_52_75_EQ_0_ETC___d273,
	       IF_IF_INV_start_operand2_BITS_62_TO_52_86_EQ_0_ETC___d553,
	       IF_IF_start_operand1_BIT_20_61_OR_start_operan_ETC___d436,
	       IF_IF_start_operand1_BIT_36_77_OR_start_operan_ETC___d352,
	       IF_IF_start_operand1_BIT_4_40_OR_start_operand_ETC___d465,
	       IF_IF_start_operand2_BIT_20_41_OR_start_operan_ETC___d716,
	       IF_IF_start_operand2_BIT_36_57_OR_start_operan_ETC___d632,
	       IF_IF_start_operand2_BIT_4_20_OR_start_operand_ETC___d745;
  wire [3 : 0] IF_INV_start_operand1_BITS_62_TO_52_75_EQ_0_77_ETC___d231,
	       IF_INV_start_operand2_BITS_62_TO_52_86_EQ_0_88_ETC___d511,
	       IF_NOT_ff_stage3_rv_port0__read__3_BIT_78_4_6__ETC___d172,
	       IF_start_operand1_BIT_12_98_OR_start_operand1__ETC___d431,
	       IF_start_operand1_BIT_20_61_OR_start_operand1__ETC___d394,
	       IF_start_operand1_BIT_28_14_OR_start_operand1__ETC___d347,
	       IF_start_operand1_BIT_36_77_OR_start_operand1__ETC___d310,
	       IF_start_operand1_BIT_44_35_OR_start_operand1__ETC___d268,
	       IF_start_operand1_BIT_4_40_OR_start_operand1_B_ETC___d461,
	       IF_start_operand2_BIT_12_78_OR_start_operand2__ETC___d711,
	       IF_start_operand2_BIT_20_41_OR_start_operand2__ETC___d674,
	       IF_start_operand2_BIT_28_94_OR_start_operand2__ETC___d627,
	       IF_start_operand2_BIT_36_57_OR_start_operand2__ETC___d590,
	       IF_start_operand2_BIT_44_15_OR_start_operand2__ETC___d548,
	       IF_start_operand2_BIT_4_20_OR_start_operand2_B_ETC___d741;
  wire [1 : 0] p0_l1__h3889,
	       p0_l1__h9998,
	       p10_l1__h10018,
	       p10_l1__h3909,
	       p11_l1__h10020,
	       p11_l1__h3911,
	       p12_l1__h10022,
	       p12_l1__h3913,
	       p13_l1__h10024,
	       p13_l1__h3915,
	       p1_l1__h10000,
	       p1_l1__h3891,
	       p2_l1__h10002,
	       p2_l1__h3893,
	       p3_l1__h10004,
	       p3_l1__h3895,
	       p4_l1__h10006,
	       p4_l1__h3897,
	       p5_l1__h10008,
	       p5_l1__h3899,
	       p6_l1__h10010,
	       p6_l1__h3901,
	       p7_l1__h10012,
	       p7_l1__h3903,
	       p8_l1__h10014,
	       p8_l1__h3905,
	       p9_l1__h10016,
	       p9_l1__h3907;
  wire IF_int_div_output___7_BIT_113_8_THEN_ff_stage2_ETC___d52,
       _theResult_____1_snd_fst__h2468,
       lv_op1_is_zero__h3425,
       lv_op2_is_infinity__h3428,
       lv_roundup___1__h2593,
       lv_roundup___1__h2711,
       lv_roundup___1__h2754,
       p0__h10214,
       p0__h4105,
       x__h10228,
       x__h10229,
       x__h10521,
       x__h10524,
       x__h10576,
       x__h10577,
       x__h10839,
       x__h10842,
       x__h10984,
       x__h10985,
       x__h11250,
       x__h11253,
       x__h11305,
       x__h11306,
       x__h11568,
       x__h11571,
       x__h11800,
       x__h11801,
       x__h12066,
       x__h12069,
       x__h12121,
       x__h12122,
       x__h12384,
       x__h12387,
       x__h12529,
       x__h12530,
       x__h12795,
       x__h12798,
       x__h12850,
       x__h12851,
       x__h13113,
       x__h13116,
       x__h13432,
       x__h13433,
       x__h13698,
       x__h13701,
       x__h13753,
       x__h13754,
       x__h14016,
       x__h14019,
       x__h14161,
       x__h14162,
       x__h14427,
       x__h14430,
       x__h14482,
       x__h14483,
       x__h14745,
       x__h14748,
       x__h14977,
       x__h14978,
       x__h15243,
       x__h15246,
       x__h16128,
       x__h16183,
       x__h16195,
       x__h16197,
       x__h16199,
       x__h16244,
       x__h16268,
       x__h16273,
       x__h1973,
       x__h2069,
       x__h2631,
       x__h2766,
       x__h2768,
       x__h4119,
       x__h4120,
       x__h4412,
       x__h4415,
       x__h4467,
       x__h4468,
       x__h4730,
       x__h4733,
       x__h4875,
       x__h4876,
       x__h5141,
       x__h5144,
       x__h5196,
       x__h5197,
       x__h5459,
       x__h5462,
       x__h5691,
       x__h5692,
       x__h5957,
       x__h5960,
       x__h6012,
       x__h6013,
       x__h6275,
       x__h6278,
       x__h6420,
       x__h6421,
       x__h6686,
       x__h6689,
       x__h6741,
       x__h6742,
       x__h7004,
       x__h7007,
       x__h7323,
       x__h7324,
       x__h7589,
       x__h7592,
       x__h7644,
       x__h7645,
       x__h7907,
       x__h7910,
       x__h8052,
       x__h8053,
       x__h8318,
       x__h8321,
       x__h8373,
       x__h8374,
       x__h8636,
       x__h8639,
       x__h8868,
       x__h8869,
       x__h9134,
       x__h9137,
       y__h10522,
       y__h10525,
       y__h10528,
       y__h10840,
       y__h10843,
       y__h10846,
       y__h11251,
       y__h11254,
       y__h11257,
       y__h11569,
       y__h11572,
       y__h11575,
       y__h12067,
       y__h12070,
       y__h12073,
       y__h12385,
       y__h12388,
       y__h12391,
       y__h12796,
       y__h12799,
       y__h12802,
       y__h13114,
       y__h13117,
       y__h13120,
       y__h13699,
       y__h13702,
       y__h13705,
       y__h14017,
       y__h14020,
       y__h14023,
       y__h14428,
       y__h14431,
       y__h14434,
       y__h14746,
       y__h14749,
       y__h14752,
       y__h15244,
       y__h15247,
       y__h15250,
       y__h16196,
       y__h16198,
       y__h16200,
       y__h1873,
       y__h2605,
       y__h2723,
       y__h2767,
       y__h4413,
       y__h4416,
       y__h4419,
       y__h4731,
       y__h4734,
       y__h4737,
       y__h5142,
       y__h5145,
       y__h5148,
       y__h5460,
       y__h5463,
       y__h5466,
       y__h5958,
       y__h5961,
       y__h5964,
       y__h6276,
       y__h6279,
       y__h6282,
       y__h6687,
       y__h6690,
       y__h6693,
       y__h7005,
       y__h7008,
       y__h7011,
       y__h7590,
       y__h7593,
       y__h7596,
       y__h7908,
       y__h7911,
       y__h7914,
       y__h8319,
       y__h8322,
       y__h8325,
       y__h8637,
       y__h8640,
       y__h8643,
       y__h9135,
       y__h9138,
       y__h9141;

  // action method _start
  assign RDY__start = !ff_stage1_rv$port1__read[197] ;
  assign CAN_FIRE__start = !ff_stage1_rv$port1__read[197] ;
  assign WILL_FIRE__start = EN__start ;

  // value method final_result_
  assign final_result_ =
	     { ff_final_out$D_OUT[104:4],
	       CASE_ff_final_outD_OUT_BITS_3_TO_1_0_ff_final_ETC__q1,
	       ff_final_out$D_OUT[0] } ;
  assign RDY_final_result_ = ff_final_out$EMPTY_N ;

  // action method _deque_buffer_reset_ready_signal
  assign RDY__deque_buffer_reset_ready_signal =
	     (!EN__set_flush || !_set_flush_f) && ff_final_out$EMPTY_N ;
  assign CAN_FIRE__deque_buffer_reset_ready_signal =
	     (!EN__set_flush || !_set_flush_f) && ff_final_out$EMPTY_N ;
  assign WILL_FIRE__deque_buffer_reset_ready_signal =
	     EN__deque_buffer_reset_ready_signal ;

  // action method _set_flush
  assign RDY__set_flush = 1'd1 ;
  assign CAN_FIRE__set_flush = 1'd1 ;
  assign WILL_FIRE__set_flush = EN__set_flush ;

  // submodule ff_final_out
  FIFO2 #(.width(32'd105), .guarded(32'd1)) ff_final_out(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(ff_final_out$D_IN),
							 .ENQ(ff_final_out$ENQ),
							 .DEQ(ff_final_out$DEQ),
							 .CLR(ff_final_out$CLR),
							 .D_OUT(ff_final_out$D_OUT),
							 .FULL_N(ff_final_out$FULL_N),
							 .EMPTY_N(ff_final_out$EMPTY_N));

  // submodule int_div
  mkinteger_divider_for_dpfdiv int_div(.CLK(CLK),
				       .RST_N(RST_N),
				       ._inputs__denominator(int_div$_inputs__denominator),
				       ._inputs__numerator(int_div$_inputs__numerator),
				       ._set_flush__flush(int_div$_set_flush__flush),
				       .EN__inputs(int_div$EN__inputs),
				       .EN__remove_last_entry(int_div$EN__remove_last_entry),
				       .EN__set_flush(int_div$EN__set_flush),
				       .RDY__inputs(int_div$RDY__inputs),
				       .RDY__remove_last_entry(int_div$RDY__remove_last_entry),
				       .RDY__set_flush(),
				       .output_(int_div$output_),
				       .RDY_output_(int_div$RDY_output_));

  // rule RL_rl_stage4
  assign CAN_FIRE_RL_rl_stage4 = MUX_rg_ready_signal$write_1__SEL_1 ;
  assign WILL_FIRE_RL_rl_stage4 = MUX_rg_ready_signal$write_1__SEL_1 ;

  // rule RL_rl_stage3
  assign CAN_FIRE_RL_rl_stage3 =
	     ff_stage2_rv[91] && int_div$RDY_output_ &&
	     int_div$RDY__remove_last_entry &&
	     !ff_stage3_rv$port1__read[154] &&
	     (!EN__set_flush || !_set_flush_f) ;
  assign WILL_FIRE_RL_rl_stage3 = CAN_FIRE_RL_rl_stage3 ;

  // rule RL_rl_stage2
  assign CAN_FIRE_RL_rl_stage2 =
	     ff_stage1_rv[197] && int_div$RDY__inputs &&
	     !ff_stage2_rv$port1__read[91] &&
	     (!EN__set_flush || !_set_flush_f) ;
  assign WILL_FIRE_RL_rl_stage2 = CAN_FIRE_RL_rl_stage2 ;

  // rule RL_rl_flush_output_fifo
  assign CAN_FIRE_RL_rl_flush_output_fifo = EN__set_flush && _set_flush_f ;
  assign WILL_FIRE_RL_rl_flush_output_fifo =
	     CAN_FIRE_RL_rl_flush_output_fifo ;

  // inputs to muxes for submodule ports
  assign MUX_rg_ready_signal$write_1__SEL_1 =
	     ff_stage3_rv[154] && ff_final_out$FULL_N &&
	     (!EN__set_flush || !_set_flush_f) ;

  // inlined wires
  assign ff_stage1_rv$port1__read =
	     CAN_FIRE_RL_rl_stage2 ?
	       198'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       ff_stage1_rv ;
  assign ff_stage1_rv$port1__write_1 =
	     { 1'd1,
	       lv_new_exponent__h3442,
	       x__h16082,
	       x__h16104,
	       x__h16128,
	       x__h16183,
	       x__h16244,
	       x__h16268,
	       x__h16273,
	       _start_destination,
	       _start_rob_number,
	       _start_fsr,
	       _start_pc } ;
  assign ff_stage1_rv$port2__read =
	     EN__start ?
	       ff_stage1_rv$port1__write_1 :
	       ff_stage1_rv$port1__read ;
  assign ff_stage1_rv$port3__read =
	     CAN_FIRE_RL_rl_flush_output_fifo ?
	       198'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       ff_stage1_rv$port2__read ;
  assign ff_stage2_rv$port1__read =
	     CAN_FIRE_RL_rl_stage3 ?
	       92'h2AAAAAAAAAAAAAAAAAAAAAA :
	       ff_stage2_rv ;
  assign ff_stage2_rv$port1__write_1 =
	     { 1'd1, ff_stage1_rv[196:184], ff_stage1_rv[77:0] } ;
  assign ff_stage2_rv$port2__read =
	     CAN_FIRE_RL_rl_stage2 ?
	       ff_stage2_rv$port1__write_1 :
	       ff_stage2_rv$port1__read ;
  assign ff_stage2_rv$port3__read =
	     CAN_FIRE_RL_rl_flush_output_fifo ?
	       92'h2AAAAAAAAAAAAAAAAAAAAAA :
	       ff_stage2_rv$port2__read ;
  assign ff_stage3_rv$port1__read =
	     MUX_rg_ready_signal$write_1__SEL_1 ?
	       155'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       ff_stage3_rv ;
  assign ff_stage3_rv$port1__write_1 =
	     { 1'd1,
	       IF_int_div_output___7_BIT_113_8_THEN_int_div_o_ETC___d58[108:54],
	       _theResult_____2__h1633,
	       lv_exponent__h1630,
	       ff_stage2_rv[77:75],
	       IF_int_div_output___7_BIT_113_8_THEN_ff_stage2_ETC___d52,
	       x__h2069,
	       ff_stage2_rv[74:0] } ;
  assign ff_stage3_rv$port2__read =
	     CAN_FIRE_RL_rl_stage3 ?
	       ff_stage3_rv$port1__write_1 :
	       ff_stage3_rv$port1__read ;
  assign ff_stage3_rv$port3__read =
	     CAN_FIRE_RL_rl_flush_output_fifo ?
	       155'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       ff_stage3_rv$port2__read ;

  // register ff_stage1_rv
  assign ff_stage1_rv$D_IN = ff_stage1_rv$port3__read ;
  assign ff_stage1_rv$EN = 1'b1 ;

  // register ff_stage2_rv
  assign ff_stage2_rv$D_IN = ff_stage2_rv$port3__read ;
  assign ff_stage2_rv$EN = 1'b1 ;

  // register ff_stage3_rv
  assign ff_stage3_rv$D_IN = ff_stage3_rv$port3__read ;
  assign ff_stage3_rv$EN = 1'b1 ;

  // register rg_ready_signal
  assign rg_ready_signal$D_IN = WILL_FIRE_RL_rl_stage4 ;
  assign rg_ready_signal$EN =
	     EN__deque_buffer_reset_ready_signal && ff_final_out$FULL_N ||
	     WILL_FIRE_RL_rl_stage4 ;

  // submodule ff_final_out
  assign ff_final_out$D_IN =
	     { ff_stage3_rv[72:68],
	       lv_fsr___h2236,
	       x_final_result__h2294,
	       IF_NOT_ff_stage3_rv_port0__read__3_BIT_78_4_6__ETC___d172 } ;
  assign ff_final_out$ENQ = MUX_rg_ready_signal$write_1__SEL_1 ;
  assign ff_final_out$DEQ = EN__deque_buffer_reset_ready_signal ;
  assign ff_final_out$CLR = CAN_FIRE_RL_rl_flush_output_fifo ;

  // submodule int_div
  assign int_div$_inputs__denominator = { ff_stage1_rv[130:78], 3'd0 } ;
  assign int_div$_inputs__numerator = { ff_stage1_rv[183:131], 3'd0 } ;
  assign int_div$_set_flush__flush = 1'd1 ;
  assign int_div$EN__inputs = CAN_FIRE_RL_rl_stage2 ;
  assign int_div$EN__remove_last_entry = CAN_FIRE_RL_rl_stage3 ;
  assign int_div$EN__set_flush = CAN_FIRE_RL_rl_flush_output_fifo ;

  // remaining internal signals
  assign IF_IF_IF_IF_INV_start_operand1_BITS_62_TO_52_7_ETC___d475 =
	     IF_IF_IF_INV_start_operand1_BITS_62_TO_52_75_E_ETC___d357[5] ?
	       { 2'd2,
		 IF_IF_IF_INV_start_operand1_BITS_62_TO_52_75_E_ETC___d357[4:0] } :
	       (IF_IF_IF_start_operand1_BIT_20_61_OR_start_ope_ETC___d470[5] ?
		  { 2'd3,
		    IF_IF_IF_start_operand1_BIT_20_61_OR_start_ope_ETC___d470[4:0] } :
		  7'd0) ;
  assign IF_IF_IF_IF_INV_start_operand2_BITS_62_TO_52_8_ETC___d755 =
	     IF_IF_IF_INV_start_operand2_BITS_62_TO_52_86_E_ETC___d637[5] ?
	       { 2'd2,
		 IF_IF_IF_INV_start_operand2_BITS_62_TO_52_86_E_ETC___d637[4:0] } :
	       (IF_IF_IF_start_operand2_BIT_20_41_OR_start_ope_ETC___d750[5] ?
		  { 2'd3,
		    IF_IF_IF_start_operand2_BIT_20_41_OR_start_ope_ETC___d750[4:0] } :
		  7'd0) ;
  assign IF_IF_IF_IF_ff_stage3_rv_port0__read__3_BITS_3_ETC___d147 =
	     (IF_IF_IF_ff_stage3_rv_port0__read__3_BITS_39_T_ETC___d122[11] ||
	      IF_IF_IF_ff_stage3_rv_port0__read__3_BITS_39_T_ETC___d122[10:0] ==
	      11'd2047) ?
	       ((ff_stage3_rv[39:37] == 3'b001 ||
		 ff_stage3_rv[39:37] == 3'b010 && !ff_stage3_rv[79] ||
		 ff_stage3_rv[39:37] == 3'b011 && ff_stage3_rv[79]) ?
		  63'h7FEFFFFFFFFFFFFF :
		  63'h7FF0000000000000) :
	       { IF_IF_IF_ff_stage3_rv_port0__read__3_BITS_39_T_ETC___d122[10:0],
		 IF_IF_ff_stage3_rv_port0__read__3_BITS_39_TO_3_ETC___d118[51:0] } ;
  assign IF_IF_IF_INV_start_operand1_BITS_62_TO_52_75_E_ETC___d357 =
	     IF_IF_INV_start_operand1_BITS_62_TO_52_75_EQ_0_ETC___d273[4] ?
	       { 2'd2,
		 IF_IF_INV_start_operand1_BITS_62_TO_52_75_EQ_0_ETC___d273[3:0] } :
	       (IF_IF_start_operand1_BIT_36_77_OR_start_operan_ETC___d352[4] ?
		  { 2'd3,
		    IF_IF_start_operand1_BIT_36_77_OR_start_operan_ETC___d352[3:0] } :
		  6'd0) ;
  assign IF_IF_IF_INV_start_operand2_BITS_62_TO_52_86_E_ETC___d637 =
	     IF_IF_INV_start_operand2_BITS_62_TO_52_86_EQ_0_ETC___d553[4] ?
	       { 2'd2,
		 IF_IF_INV_start_operand2_BITS_62_TO_52_86_EQ_0_ETC___d553[3:0] } :
	       (IF_IF_start_operand2_BIT_36_57_OR_start_operan_ETC___d632[4] ?
		  { 2'd3,
		    IF_IF_start_operand2_BIT_36_57_OR_start_operan_ETC___d632[3:0] } :
		  6'd0) ;
  assign IF_IF_IF_ff_stage3_rv_port0__read__3_BITS_39_T_ETC___d122 =
	     IF_IF_ff_stage3_rv_port0__read__3_BITS_39_TO_3_ETC___d118[53] ?
	       lv_exponent___1__h2875 :
	       ff_stage3_rv[92:80] ;
  assign IF_IF_IF_start_operand1_BIT_20_61_OR_start_ope_ETC___d470 =
	     IF_IF_start_operand1_BIT_20_61_OR_start_operan_ETC___d436[4] ?
	       { 2'd2,
		 IF_IF_start_operand1_BIT_20_61_OR_start_operan_ETC___d436[3:0] } :
	       (IF_IF_start_operand1_BIT_4_40_OR_start_operand_ETC___d465[4] ?
		  { 2'd3,
		    IF_IF_start_operand1_BIT_4_40_OR_start_operand_ETC___d465[3:0] } :
		  6'd0) ;
  assign IF_IF_IF_start_operand2_BIT_20_41_OR_start_ope_ETC___d750 =
	     IF_IF_start_operand2_BIT_20_41_OR_start_operan_ETC___d716[4] ?
	       { 2'd2,
		 IF_IF_start_operand2_BIT_20_41_OR_start_operan_ETC___d716[3:0] } :
	       (IF_IF_start_operand2_BIT_4_20_OR_start_operand_ETC___d745[4] ?
		  { 2'd3,
		    IF_IF_start_operand2_BIT_4_20_OR_start_operand_ETC___d745[3:0] } :
		  6'd0) ;
  assign IF_IF_INV_start_operand1_BITS_62_TO_52_75_EQ_0_ETC___d273 =
	     IF_INV_start_operand1_BITS_62_TO_52_75_EQ_0_77_ETC___d231[3] ?
	       { 2'd2,
		 IF_INV_start_operand1_BITS_62_TO_52_75_EQ_0_77_ETC___d231[2:0] } :
	       (IF_start_operand1_BIT_44_35_OR_start_operand1__ETC___d268[3] ?
		  { 2'd3,
		    IF_start_operand1_BIT_44_35_OR_start_operand1__ETC___d268[2:0] } :
		  5'd0) ;
  assign IF_IF_INV_start_operand2_BITS_62_TO_52_86_EQ_0_ETC___d553 =
	     IF_INV_start_operand2_BITS_62_TO_52_86_EQ_0_88_ETC___d511[3] ?
	       { 2'd2,
		 IF_INV_start_operand2_BITS_62_TO_52_86_EQ_0_88_ETC___d511[2:0] } :
	       (IF_start_operand2_BIT_44_15_OR_start_operand2__ETC___d548[3] ?
		  { 2'd3,
		    IF_start_operand2_BIT_44_15_OR_start_operand2__ETC___d548[2:0] } :
		  5'd0) ;
  assign IF_IF_ff_stage3_rv_port0__read__3_BITS_39_TO_3_ETC___d118 =
	     IF_ff_stage3_rv_port0__read__3_BITS_39_TO_37_2_ETC___d114 ?
	       lv_rounded_mantissa__h2818 :
	       { 1'b0, ff_stage3_rv[153:101] } ;
  assign IF_IF_start_operand1_BIT_20_61_OR_start_operan_ETC___d436 =
	     IF_start_operand1_BIT_20_61_OR_start_operand1__ETC___d394[3] ?
	       { 2'd2,
		 IF_start_operand1_BIT_20_61_OR_start_operand1__ETC___d394[2:0] } :
	       (IF_start_operand1_BIT_12_98_OR_start_operand1__ETC___d431[3] ?
		  { 2'd3,
		    IF_start_operand1_BIT_12_98_OR_start_operand1__ETC___d431[2:0] } :
		  5'd0) ;
  assign IF_IF_start_operand1_BIT_36_77_OR_start_operan_ETC___d352 =
	     IF_start_operand1_BIT_36_77_OR_start_operand1__ETC___d310[3] ?
	       { 2'd2,
		 IF_start_operand1_BIT_36_77_OR_start_operand1__ETC___d310[2:0] } :
	       (IF_start_operand1_BIT_28_14_OR_start_operand1__ETC___d347[3] ?
		  { 2'd3,
		    IF_start_operand1_BIT_28_14_OR_start_operand1__ETC___d347[2:0] } :
		  5'd0) ;
  assign IF_IF_start_operand1_BIT_4_40_OR_start_operand_ETC___d465 =
	     IF_start_operand1_BIT_4_40_OR_start_operand1_B_ETC___d461[3] ?
	       { 2'd2,
		 IF_start_operand1_BIT_4_40_OR_start_operand1_B_ETC___d461[2:0] } :
	       5'd0 ;
  assign IF_IF_start_operand2_BIT_20_41_OR_start_operan_ETC___d716 =
	     IF_start_operand2_BIT_20_41_OR_start_operand2__ETC___d674[3] ?
	       { 2'd2,
		 IF_start_operand2_BIT_20_41_OR_start_operand2__ETC___d674[2:0] } :
	       (IF_start_operand2_BIT_12_78_OR_start_operand2__ETC___d711[3] ?
		  { 2'd3,
		    IF_start_operand2_BIT_12_78_OR_start_operand2__ETC___d711[2:0] } :
		  5'd0) ;
  assign IF_IF_start_operand2_BIT_36_57_OR_start_operan_ETC___d632 =
	     IF_start_operand2_BIT_36_57_OR_start_operand2__ETC___d590[3] ?
	       { 2'd2,
		 IF_start_operand2_BIT_36_57_OR_start_operand2__ETC___d590[2:0] } :
	       (IF_start_operand2_BIT_28_94_OR_start_operand2__ETC___d627[3] ?
		  { 2'd3,
		    IF_start_operand2_BIT_28_94_OR_start_operand2__ETC___d627[2:0] } :
		  5'd0) ;
  assign IF_IF_start_operand2_BIT_4_20_OR_start_operand_ETC___d745 =
	     IF_start_operand2_BIT_4_20_OR_start_operand2_B_ETC___d741[3] ?
	       { 2'd2,
		 IF_start_operand2_BIT_4_20_OR_start_operand2_B_ETC___d741[2:0] } :
	       5'd0 ;
  assign IF_INV_start_operand1_BITS_62_TO_52_75_EQ_0_77_ETC___d231 =
	     (x__h4119 | _start_operand1[49]) ?
	       { 2'd2, p0_l1__h3889 } :
	       ((x__h4467 | _start_operand1[45]) ?
		  { 2'd3, p1_l1__h3891 } :
		  4'd0) ;
  assign IF_INV_start_operand2_BITS_62_TO_52_86_EQ_0_88_ETC___d511 =
	     (x__h10228 | _start_operand2[49]) ?
	       { 2'd2, p0_l1__h9998 } :
	       ((x__h10576 | _start_operand2[45]) ?
		  { 2'd3, p1_l1__h10000 } :
		  4'd0) ;
  assign IF_NOT_ff_stage3_rv_port0__read__3_BIT_78_4_6__ETC___d172 =
	     (!ff_stage3_rv[78] &&
	      (ff_stage3_rv[73] ||
	       !ff_stage3_rv[74] &&
	       (ff_stage3_rv[77] ||
		!ff_stage3_rv[76] &&
		!IF_IF_IF_ff_stage3_rv_port0__read__3_BITS_39_T_ETC___d122[11] &&
		IF_IF_IF_ff_stage3_rv_port0__read__3_BITS_39_T_ETC___d122[10:0] !=
		11'd2047 &&
		!x__h2766))) ?
	       4'd0 :
	       (ff_stage3_rv[78] ?
		  4'd3 :
		  ((!ff_stage3_rv[73] && ff_stage3_rv[74]) ?
		     4'd5 :
		     ((!ff_stage3_rv[73] && !ff_stage3_rv[74] &&
		       !ff_stage3_rv[77] &&
		       !ff_stage3_rv[76] &&
		       (IF_IF_IF_ff_stage3_rv_port0__read__3_BITS_39_T_ETC___d122[11] ||
			IF_IF_IF_ff_stage3_rv_port0__read__3_BITS_39_T_ETC___d122[10:0] ==
			11'd2047)) ?
			4'd7 :
			((!ff_stage3_rv[73] && !ff_stage3_rv[74] &&
			  !ff_stage3_rv[77] &&
			  ff_stage3_rv[76]) ?
			   4'd9 :
			   4'd11)))) ;
  assign IF_ff_stage3_rv_port0__read__3_BIT_74_5_OR_ff__ETC___d149 =
	     (ff_stage3_rv[74] || ff_stage3_rv[77]) ?
	       63'h7FF0000000000000 :
	       (ff_stage3_rv[76] ?
		  ((ff_stage3_rv[39:37] == 3'b001 ||
		    ff_stage3_rv[39:37] == 3'b010 && !ff_stage3_rv[79] ||
		    ff_stage3_rv[39:37] == 3'b011 && ff_stage3_rv[79]) ?
		     63'd1 :
		     { 11'd0,
		       IF_IF_ff_stage3_rv_port0__read__3_BITS_39_TO_3_ETC___d118[51:0] }) :
		  IF_IF_IF_IF_ff_stage3_rv_port0__read__3_BITS_3_ETC___d147) ;
  assign IF_int_div_output___7_BIT_113_8_THEN_ff_stage2_ETC___d52 =
	     lv_exponent__h1630[12] | y__h1873 ;
  assign IF_int_div_output___7_BIT_113_8_THEN_int_div_o_ETC___d58 =
	     lv_mantissa__h1634 >> _theResult_____2__h1633 ;
  assign IF_start_operand1_BIT_12_98_OR_start_operand1__ETC___d431 =
	     (x__h8052 | _start_operand1[9]) ?
	       { 2'd2, p10_l1__h3909 } :
	       ((x__h8373 | _start_operand1[5]) ?
		  { 2'd3, p11_l1__h3911 } :
		  4'd0) ;
  assign IF_start_operand1_BIT_20_61_OR_start_operand1__ETC___d394 =
	     (x__h7323 | _start_operand1[17]) ?
	       { 2'd2, p8_l1__h3905 } :
	       ((x__h7644 | _start_operand1[13]) ?
		  { 2'd3, p9_l1__h3907 } :
		  4'd0) ;
  assign IF_start_operand1_BIT_28_14_OR_start_operand1__ETC___d347 =
	     (x__h6420 | _start_operand1[25]) ?
	       { 2'd2, p6_l1__h3901 } :
	       ((x__h6741 | _start_operand1[21]) ?
		  { 2'd3, p7_l1__h3903 } :
		  4'd0) ;
  assign IF_start_operand1_BIT_36_77_OR_start_operand1__ETC___d310 =
	     (x__h5691 | _start_operand1[33]) ?
	       { 2'd2, p4_l1__h3897 } :
	       ((x__h6012 | _start_operand1[29]) ?
		  { 2'd3, p5_l1__h3899 } :
		  4'd0) ;
  assign IF_start_operand1_BIT_44_35_OR_start_operand1__ETC___d268 =
	     (x__h4875 | _start_operand1[41]) ?
	       { 2'd2, p2_l1__h3893 } :
	       ((x__h5196 | _start_operand1[37]) ?
		  { 2'd3, p3_l1__h3895 } :
		  4'd0) ;
  assign IF_start_operand1_BIT_4_40_OR_start_operand1_B_ETC___d461 =
	     (x__h8868 | _start_operand1[1]) ?
	       { 2'd2, p12_l1__h3913 } :
	       (_start_operand1[0] ? { 2'd3, p13_l1__h3915 } : 4'd0) ;
  assign IF_start_operand2_BIT_12_78_OR_start_operand2__ETC___d711 =
	     (x__h14161 | _start_operand2[9]) ?
	       { 2'd2, p10_l1__h10018 } :
	       ((x__h14482 | _start_operand2[5]) ?
		  { 2'd3, p11_l1__h10020 } :
		  4'd0) ;
  assign IF_start_operand2_BIT_20_41_OR_start_operand2__ETC___d674 =
	     (x__h13432 | _start_operand2[17]) ?
	       { 2'd2, p8_l1__h10014 } :
	       ((x__h13753 | _start_operand2[13]) ?
		  { 2'd3, p9_l1__h10016 } :
		  4'd0) ;
  assign IF_start_operand2_BIT_28_94_OR_start_operand2__ETC___d627 =
	     (x__h12529 | _start_operand2[25]) ?
	       { 2'd2, p6_l1__h10010 } :
	       ((x__h12850 | _start_operand2[21]) ?
		  { 2'd3, p7_l1__h10012 } :
		  4'd0) ;
  assign IF_start_operand2_BIT_36_57_OR_start_operand2__ETC___d590 =
	     (x__h11800 | _start_operand2[33]) ?
	       { 2'd2, p4_l1__h10006 } :
	       ((x__h12121 | _start_operand2[29]) ?
		  { 2'd3, p5_l1__h10008 } :
		  4'd0) ;
  assign IF_start_operand2_BIT_44_15_OR_start_operand2__ETC___d548 =
	     (x__h10984 | _start_operand2[41]) ?
	       { 2'd2, p2_l1__h10002 } :
	       ((x__h11305 | _start_operand2[37]) ?
		  { 2'd3, p3_l1__h10004 } :
		  4'd0) ;
  assign IF_start_operand2_BIT_4_20_OR_start_operand2_B_ETC___d741 =
	     (x__h14977 | _start_operand2[1]) ?
	       { 2'd2, p12_l1__h10022 } :
	       (_start_operand2[0] ? { 2'd3, p13_l1__h10024 } : 4'd0) ;
  assign _theResult_____1_snd_fst__h2468 =
	     !ff_stage3_rv[78] && !ff_stage3_rv[73] && !ff_stage3_rv[74] &&
	     !ff_stage3_rv[77] &&
	     !ff_stage3_rv[76] &&
	     (IF_IF_IF_ff_stage3_rv_port0__read__3_BITS_39_T_ETC___d122[11] ||
	      IF_IF_IF_ff_stage3_rv_port0__read__3_BITS_39_T_ETC___d122[10:0] ==
	      11'd2047) ;
  assign _theResult_____1_snd_snd__h2480 =
	     { ff_stage3_rv[79],
	       ff_stage3_rv[73] ?
		 63'd0 :
		 IF_ff_stage3_rv_port0__read__3_BIT_74_5_OR_ff__ETC___d149 } ;
  assign _theResult_____2__h1633 =
	     (lv_v_shr__h1632 <= 13'd54) ? lv_v_shr__h1632[5:0] : 6'd54 ;
  assign _theResult___snd__h1838 =
	     int_div$output_[113] ?
	       int_div$output_[113:58] :
	       lv_quotient___1__h1839 ;
  assign lv_dividend__h3436 = { p0__h4105, _start_operand1[51:0] } ;
  assign lv_divisor__h3437 = { p0__h10214, _start_operand2[51:0] } ;
  assign lv_exponent___1__h1840 = ff_stage2_rv[90:78] - 13'd1 ;
  assign lv_exponent___1__h2875 = ff_stage3_rv[92:80] + 13'd1 ;
  assign lv_exponent__h1630 =
	     int_div$output_[113] ?
	       ff_stage2_rv[90:78] :
	       lv_exponent___1__h1840 ;
  assign lv_fsr___h2236 =
	     { ff_stage3_rv[63:42],
	       ff_stage3_rv[77],
	       ff_stage3_rv[73],
	       ff_stage3_rv[39:37],
	       ff_stage3_rv[78],
	       ff_stage3_rv[74],
	       _theResult_____1_snd_fst__h2468,
	       ff_stage3_rv[76],
	       x__h2766 } ;
  assign lv_mantissa__h1634 = { _theResult___snd__h1838, 53'd0 } ;
  assign lv_new_exponent__h3442 = x__h3539 + y__h3540 ;
  assign lv_op1_is_zero__h3425 =
	     _start_operand1[62:52] == 11'd0 &&
	     ~(_start_operand1[51:0] != 52'd0) ;
  assign lv_op2_is_infinity__h3428 =
	     _start_operand2[62:52] == 11'd2047 &&
	     ~(_start_operand2[51:0] != 52'd0) ;
  assign lv_quotient___1__h1839 = { int_div$output_[112:58], 1'd0 } ;
  assign lv_rounded_mantissa__h2818 =
	     { 1'b0, ff_stage3_rv[153:101] } + 54'd1 ;
  assign lv_roundup___1__h2593 = ff_stage3_rv[100] & y__h2605 ;
  assign lv_roundup___1__h2711 = ff_stage3_rv[100] & y__h2723 ;
  assign lv_roundup___1__h2754 = x__h2766 & y__h2767 ;
  assign lv_v_shr___1__h2013 = 13'd1 - lv_exponent__h1630 ;
  assign lv_v_shr__h1632 =
	     IF_int_div_output___7_BIT_113_8_THEN_ff_stage2_ETC___d52 ?
	       lv_v_shr___1__h2013 :
	       13'd0 ;
  assign p0__h10214 = ~x__h10521 ;
  assign p0__h4105 = ~x__h4412 ;
  assign p0_l1__h3889 = { x__h4412 & y__h4413, x__h4415 | y__h4416 } ;
  assign p0_l1__h9998 = { x__h10521 & y__h10522, x__h10524 | y__h10525 } ;
  assign p10_l1__h10018 = { x__h14427 & y__h14428, x__h14430 | y__h14431 } ;
  assign p10_l1__h3909 = { x__h8318 & y__h8319, x__h8321 | y__h8322 } ;
  assign p11_l1__h10020 = { x__h14745 & y__h14746, x__h14748 | y__h14749 } ;
  assign p11_l1__h3911 = { x__h8636 & y__h8637, x__h8639 | y__h8640 } ;
  assign p12_l1__h10022 = { x__h15243 & y__h15244, x__h15246 | y__h15247 } ;
  assign p12_l1__h3913 = { x__h9134 & y__h9135, x__h9137 | y__h9138 } ;
  assign p13_l1__h10024 = {2{~_start_operand2[0]}} ;
  assign p13_l1__h3915 = {2{~_start_operand1[0]}} ;
  assign p1_l1__h10000 = { x__h10839 & y__h10840, x__h10842 | y__h10843 } ;
  assign p1_l1__h3891 = { x__h4730 & y__h4731, x__h4733 | y__h4734 } ;
  assign p2_l1__h10002 = { x__h11250 & y__h11251, x__h11253 | y__h11254 } ;
  assign p2_l1__h3893 = { x__h5141 & y__h5142, x__h5144 | y__h5145 } ;
  assign p3_l1__h10004 = { x__h11568 & y__h11569, x__h11571 | y__h11572 } ;
  assign p3_l1__h3895 = { x__h5459 & y__h5460, x__h5462 | y__h5463 } ;
  assign p4_l1__h10006 = { x__h12066 & y__h12067, x__h12069 | y__h12070 } ;
  assign p4_l1__h3897 = { x__h5957 & y__h5958, x__h5960 | y__h5961 } ;
  assign p5_l1__h10008 = { x__h12384 & y__h12385, x__h12387 | y__h12388 } ;
  assign p5_l1__h3899 = { x__h6275 & y__h6276, x__h6278 | y__h6279 } ;
  assign p6_l1__h10010 = { x__h12795 & y__h12796, x__h12798 | y__h12799 } ;
  assign p6_l1__h3901 = { x__h6686 & y__h6687, x__h6689 | y__h6690 } ;
  assign p7_l1__h10012 = { x__h13113 & y__h13114, x__h13116 | y__h13117 } ;
  assign p7_l1__h3903 = { x__h7004 & y__h7005, x__h7007 | y__h7008 } ;
  assign p8_l1__h10014 = { x__h13698 & y__h13699, x__h13701 | y__h13702 } ;
  assign p8_l1__h3905 = { x__h7589 & y__h7590, x__h7592 | y__h7593 } ;
  assign p9_l1__h10016 = { x__h14016 & y__h14017, x__h14019 | y__h14020 } ;
  assign p9_l1__h3907 = { x__h7907 & y__h7908, x__h7910 | y__h7911 } ;
  assign x__h10228 = x__h10229 | _start_operand2[50] ;
  assign x__h10229 = p0__h10214 | _start_operand2[51] ;
  assign x__h10521 =
	     _start_operand2[62:52] == 11'd0 &&
	     !(~(_start_operand2[51:0] != 52'd0)) ;
  assign x__h10524 = x__h10521 & _start_operand2[51] ;
  assign x__h10576 = x__h10577 | _start_operand2[46] ;
  assign x__h10577 = _start_operand2[48] | _start_operand2[47] ;
  assign x__h10839 = ~_start_operand2[48] ;
  assign x__h10842 = x__h10839 & _start_operand2[47] ;
  assign x__h10984 = x__h10985 | _start_operand2[42] ;
  assign x__h10985 = _start_operand2[44] | _start_operand2[43] ;
  assign x__h11250 = ~_start_operand2[44] ;
  assign x__h11253 = x__h11250 & _start_operand2[43] ;
  assign x__h11305 = x__h11306 | _start_operand2[38] ;
  assign x__h11306 = _start_operand2[40] | _start_operand2[39] ;
  assign x__h11568 = ~_start_operand2[40] ;
  assign x__h11571 = x__h11568 & _start_operand2[39] ;
  assign x__h11800 = x__h11801 | _start_operand2[34] ;
  assign x__h11801 = _start_operand2[36] | _start_operand2[35] ;
  assign x__h12066 = ~_start_operand2[36] ;
  assign x__h12069 = x__h12066 & _start_operand2[35] ;
  assign x__h12121 = x__h12122 | _start_operand2[30] ;
  assign x__h12122 = _start_operand2[32] | _start_operand2[31] ;
  assign x__h12384 = ~_start_operand2[32] ;
  assign x__h12387 = x__h12384 & _start_operand2[31] ;
  assign x__h12529 = x__h12530 | _start_operand2[26] ;
  assign x__h12530 = _start_operand2[28] | _start_operand2[27] ;
  assign x__h12795 = ~_start_operand2[28] ;
  assign x__h12798 = x__h12795 & _start_operand2[27] ;
  assign x__h12850 = x__h12851 | _start_operand2[22] ;
  assign x__h12851 = _start_operand2[24] | _start_operand2[23] ;
  assign x__h13113 = ~_start_operand2[24] ;
  assign x__h13116 = x__h13113 & _start_operand2[23] ;
  assign x__h13432 = x__h13433 | _start_operand2[18] ;
  assign x__h13433 = _start_operand2[20] | _start_operand2[19] ;
  assign x__h13698 = ~_start_operand2[20] ;
  assign x__h13701 = x__h13698 & _start_operand2[19] ;
  assign x__h13753 = x__h13754 | _start_operand2[14] ;
  assign x__h13754 = _start_operand2[16] | _start_operand2[15] ;
  assign x__h14016 = ~_start_operand2[16] ;
  assign x__h14019 = x__h14016 & _start_operand2[15] ;
  assign x__h14161 = x__h14162 | _start_operand2[10] ;
  assign x__h14162 = _start_operand2[12] | _start_operand2[11] ;
  assign x__h14427 = ~_start_operand2[12] ;
  assign x__h14430 = x__h14427 & _start_operand2[11] ;
  assign x__h14482 = x__h14483 | _start_operand2[6] ;
  assign x__h14483 = _start_operand2[8] | _start_operand2[7] ;
  assign x__h14745 = ~_start_operand2[8] ;
  assign x__h14748 = x__h14745 & _start_operand2[7] ;
  assign x__h14977 = x__h14978 | _start_operand2[2] ;
  assign x__h14978 = _start_operand2[4] | _start_operand2[3] ;
  assign x__h15243 = ~_start_operand2[4] ;
  assign x__h15246 = x__h15243 & _start_operand2[3] ;
  assign x__h16082 =
	     lv_dividend__h3436 <<
	     IF_IF_IF_IF_INV_start_operand1_BITS_62_TO_52_7_ETC___d475[5:0] ;
  assign x__h16104 =
	     lv_divisor__h3437 <<
	     IF_IF_IF_IF_INV_start_operand2_BITS_62_TO_52_8_ETC___d755[5:0] ;
  assign x__h16128 = _start_operand1[63] ^ _start_operand2[63] ;
  assign x__h16183 = x__h16195 | y__h16196 ;
  assign x__h16195 = x__h16197 | y__h16198 ;
  assign x__h16197 = x__h16199 | y__h16200 ;
  assign x__h16199 =
	     _start_operand1[62:52] == 11'd2047 &&
	     !(~(_start_operand1[51:0] != 52'd0)) ;
  assign x__h16244 =
	     !x__h16183 &&
	     (_start_operand1[62:52] == 11'd2047 &&
	      ~(_start_operand1[51:0] != 52'd0) ||
	      _start_operand2[62:52] == 11'd0 &&
	      ~(_start_operand2[51:0] != 52'd0)) ;
  assign x__h16268 =
	     !x__h16183 &&
	     (_start_operand1[62:52] != 11'd2047 ||
	      !(~(_start_operand1[51:0] != 52'd0))) &&
	     _start_operand2[62:52] == 11'd0 &&
	     ~(_start_operand2[51:0] != 52'd0) ;
  assign x__h16273 =
	     !x__h16183 &&
	     (_start_operand1[62:52] != 11'd2047 ||
	      !(~(_start_operand1[51:0] != 52'd0))) &&
	     (_start_operand2[62:52] != 11'd0 ||
	      !(~(_start_operand2[51:0] != 52'd0))) &&
	     lv_op2_is_infinity__h3428 | lv_op1_is_zero__h3425 ;
  assign x__h1973 = lv_exponent__h1630[11:0] != 12'd0 ;
  assign x__h2069 =
	     IF_int_div_output___7_BIT_113_8_THEN_int_div_o_ETC___d58[53:0] !=
	     54'd0 ||
	     int_div$output_[56:0] != 57'd0 ;
  assign x__h2631 = ff_stage3_rv[99] | ff_stage3_rv[75] ;
  assign x__h2766 = x__h2768 | ff_stage3_rv[75] ;
  assign x__h2768 = ff_stage3_rv[100] | ff_stage3_rv[99] ;
  assign x__h3539 = x__h3541 - y__h3542 ;
  assign x__h3541 = x__h3543 + 13'b0001111111111 ;
  assign x__h3543 = x__h3544 - y__h3545 ;
  assign x__h3544 = x__h3546 + y__h3547 ;
  assign x__h3546 = { 2'd0, _start_operand1[62:52] } ;
  assign x__h3705 = { 2'd0, _start_operand2[62:52] } ;
  assign x__h4119 = x__h4120 | _start_operand1[50] ;
  assign x__h4120 = p0__h4105 | _start_operand1[51] ;
  assign x__h4412 =
	     _start_operand1[62:52] == 11'd0 &&
	     !(~(_start_operand1[51:0] != 52'd0)) ;
  assign x__h4415 = x__h4412 & _start_operand1[51] ;
  assign x__h4467 = x__h4468 | _start_operand1[46] ;
  assign x__h4468 = _start_operand1[48] | _start_operand1[47] ;
  assign x__h4730 = ~_start_operand1[48] ;
  assign x__h4733 = x__h4730 & _start_operand1[47] ;
  assign x__h4875 = x__h4876 | _start_operand1[42] ;
  assign x__h4876 = _start_operand1[44] | _start_operand1[43] ;
  assign x__h5141 = ~_start_operand1[44] ;
  assign x__h5144 = x__h5141 & _start_operand1[43] ;
  assign x__h5196 = x__h5197 | _start_operand1[38] ;
  assign x__h5197 = _start_operand1[40] | _start_operand1[39] ;
  assign x__h5459 = ~_start_operand1[40] ;
  assign x__h5462 = x__h5459 & _start_operand1[39] ;
  assign x__h5691 = x__h5692 | _start_operand1[34] ;
  assign x__h5692 = _start_operand1[36] | _start_operand1[35] ;
  assign x__h5957 = ~_start_operand1[36] ;
  assign x__h5960 = x__h5957 & _start_operand1[35] ;
  assign x__h6012 = x__h6013 | _start_operand1[30] ;
  assign x__h6013 = _start_operand1[32] | _start_operand1[31] ;
  assign x__h6275 = ~_start_operand1[32] ;
  assign x__h6278 = x__h6275 & _start_operand1[31] ;
  assign x__h6420 = x__h6421 | _start_operand1[26] ;
  assign x__h6421 = _start_operand1[28] | _start_operand1[27] ;
  assign x__h6686 = ~_start_operand1[28] ;
  assign x__h6689 = x__h6686 & _start_operand1[27] ;
  assign x__h6741 = x__h6742 | _start_operand1[22] ;
  assign x__h6742 = _start_operand1[24] | _start_operand1[23] ;
  assign x__h7004 = ~_start_operand1[24] ;
  assign x__h7007 = x__h7004 & _start_operand1[23] ;
  assign x__h7323 = x__h7324 | _start_operand1[18] ;
  assign x__h7324 = _start_operand1[20] | _start_operand1[19] ;
  assign x__h7589 = ~_start_operand1[20] ;
  assign x__h7592 = x__h7589 & _start_operand1[19] ;
  assign x__h7644 = x__h7645 | _start_operand1[14] ;
  assign x__h7645 = _start_operand1[16] | _start_operand1[15] ;
  assign x__h7907 = ~_start_operand1[16] ;
  assign x__h7910 = x__h7907 & _start_operand1[15] ;
  assign x__h8052 = x__h8053 | _start_operand1[10] ;
  assign x__h8053 = _start_operand1[12] | _start_operand1[11] ;
  assign x__h8318 = ~_start_operand1[12] ;
  assign x__h8321 = x__h8318 & _start_operand1[11] ;
  assign x__h8373 = x__h8374 | _start_operand1[6] ;
  assign x__h8374 = _start_operand1[8] | _start_operand1[7] ;
  assign x__h8636 = ~_start_operand1[8] ;
  assign x__h8639 = x__h8636 & _start_operand1[7] ;
  assign x__h8868 = x__h8869 | _start_operand1[2] ;
  assign x__h8869 = _start_operand1[4] | _start_operand1[3] ;
  assign x__h9134 = ~_start_operand1[4] ;
  assign x__h9137 = x__h9134 & _start_operand1[3] ;
  assign x_final_result__h2294 =
	     ff_stage3_rv[78] ?
	       64'h7FFFFFFFFFFFFFFF :
	       _theResult_____1_snd_snd__h2480 ;
  assign y__h10522 = ~_start_operand2[51] ;
  assign y__h10525 = x__h10521 & y__h10528 ;
  assign y__h10528 = ~_start_operand2[50] ;
  assign y__h10840 = ~_start_operand2[47] ;
  assign y__h10843 = x__h10839 & y__h10846 ;
  assign y__h10846 = ~_start_operand2[46] ;
  assign y__h11251 = ~_start_operand2[43] ;
  assign y__h11254 = x__h11250 & y__h11257 ;
  assign y__h11257 = ~_start_operand2[42] ;
  assign y__h11569 = ~_start_operand2[39] ;
  assign y__h11572 = x__h11568 & y__h11575 ;
  assign y__h11575 = ~_start_operand2[38] ;
  assign y__h12067 = ~_start_operand2[35] ;
  assign y__h12070 = x__h12066 & y__h12073 ;
  assign y__h12073 = ~_start_operand2[34] ;
  assign y__h12385 = ~_start_operand2[31] ;
  assign y__h12388 = x__h12384 & y__h12391 ;
  assign y__h12391 = ~_start_operand2[30] ;
  assign y__h12796 = ~_start_operand2[27] ;
  assign y__h12799 = x__h12795 & y__h12802 ;
  assign y__h12802 = ~_start_operand2[26] ;
  assign y__h13114 = ~_start_operand2[23] ;
  assign y__h13117 = x__h13113 & y__h13120 ;
  assign y__h13120 = ~_start_operand2[22] ;
  assign y__h13699 = ~_start_operand2[19] ;
  assign y__h13702 = x__h13698 & y__h13705 ;
  assign y__h13705 = ~_start_operand2[18] ;
  assign y__h14017 = ~_start_operand2[15] ;
  assign y__h14020 = x__h14016 & y__h14023 ;
  assign y__h14023 = ~_start_operand2[14] ;
  assign y__h14428 = ~_start_operand2[11] ;
  assign y__h14431 = x__h14427 & y__h14434 ;
  assign y__h14434 = ~_start_operand2[10] ;
  assign y__h14746 = ~_start_operand2[7] ;
  assign y__h14749 = x__h14745 & y__h14752 ;
  assign y__h14752 = ~_start_operand2[6] ;
  assign y__h15244 = ~_start_operand2[3] ;
  assign y__h15247 = x__h15243 & y__h15250 ;
  assign y__h15250 = ~_start_operand2[2] ;
  assign y__h16196 =
	     lv_op1_is_zero__h3425 &
	     (_start_operand2[62:52] == 11'd0 &&
	      ~(_start_operand2[51:0] != 52'd0)) ;
  assign y__h16198 =
	     (_start_operand1[62:52] == 11'd2047 &&
	      ~(_start_operand1[51:0] != 52'd0)) &
	     lv_op2_is_infinity__h3428 ;
  assign y__h16200 =
	     _start_operand2[62:52] == 11'd2047 &&
	     !(~(_start_operand2[51:0] != 52'd0)) ;
  assign y__h1873 = ~x__h1973 ;
  assign y__h2605 = x__h2631 | ff_stage3_rv[101] ;
  assign y__h2723 = x__h2631 | ff_stage3_rv[79] ;
  assign y__h2767 = ~ff_stage3_rv[79] ;
  assign y__h3540 =
	     { 7'd0,
	       IF_IF_IF_IF_INV_start_operand2_BITS_62_TO_52_8_ETC___d755[5:0] } ;
  assign y__h3542 =
	     { 7'd0,
	       IF_IF_IF_IF_INV_start_operand1_BITS_62_TO_52_7_ETC___d475[5:0] } ;
  assign y__h3545 = x__h3705 + y__h3706 ;
  assign y__h3547 = { 12'd0, x__h4412 } ;
  assign y__h3706 = { 12'd0, x__h10521 } ;
  assign y__h4413 = ~_start_operand1[51] ;
  assign y__h4416 = x__h4412 & y__h4419 ;
  assign y__h4419 = ~_start_operand1[50] ;
  assign y__h4731 = ~_start_operand1[47] ;
  assign y__h4734 = x__h4730 & y__h4737 ;
  assign y__h4737 = ~_start_operand1[46] ;
  assign y__h5142 = ~_start_operand1[43] ;
  assign y__h5145 = x__h5141 & y__h5148 ;
  assign y__h5148 = ~_start_operand1[42] ;
  assign y__h5460 = ~_start_operand1[39] ;
  assign y__h5463 = x__h5459 & y__h5466 ;
  assign y__h5466 = ~_start_operand1[38] ;
  assign y__h5958 = ~_start_operand1[35] ;
  assign y__h5961 = x__h5957 & y__h5964 ;
  assign y__h5964 = ~_start_operand1[34] ;
  assign y__h6276 = ~_start_operand1[31] ;
  assign y__h6279 = x__h6275 & y__h6282 ;
  assign y__h6282 = ~_start_operand1[30] ;
  assign y__h6687 = ~_start_operand1[27] ;
  assign y__h6690 = x__h6686 & y__h6693 ;
  assign y__h6693 = ~_start_operand1[26] ;
  assign y__h7005 = ~_start_operand1[23] ;
  assign y__h7008 = x__h7004 & y__h7011 ;
  assign y__h7011 = ~_start_operand1[22] ;
  assign y__h7590 = ~_start_operand1[19] ;
  assign y__h7593 = x__h7589 & y__h7596 ;
  assign y__h7596 = ~_start_operand1[18] ;
  assign y__h7908 = ~_start_operand1[15] ;
  assign y__h7911 = x__h7907 & y__h7914 ;
  assign y__h7914 = ~_start_operand1[14] ;
  assign y__h8319 = ~_start_operand1[11] ;
  assign y__h8322 = x__h8318 & y__h8325 ;
  assign y__h8325 = ~_start_operand1[10] ;
  assign y__h8637 = ~_start_operand1[7] ;
  assign y__h8640 = x__h8636 & y__h8643 ;
  assign y__h8643 = ~_start_operand1[6] ;
  assign y__h9135 = ~_start_operand1[3] ;
  assign y__h9138 = x__h9134 & y__h9141 ;
  assign y__h9141 = ~_start_operand1[2] ;
  always@(ff_final_out$D_OUT)
  begin
    case (ff_final_out$D_OUT[3:1])
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4:
	  CASE_ff_final_outD_OUT_BITS_3_TO_1_0_ff_final_ETC__q1 =
	      ff_final_out$D_OUT[3:1];
      default: CASE_ff_final_outD_OUT_BITS_3_TO_1_0_ff_final_ETC__q1 = 3'd5;
    endcase
  end
  always@(ff_stage3_rv or
	  x__h2766 or
	  lv_roundup___1__h2593 or
	  lv_roundup___1__h2754 or lv_roundup___1__h2711)
  begin
    case (ff_stage3_rv[39:37])
      3'b0:
	  IF_ff_stage3_rv_port0__read__3_BITS_39_TO_37_2_ETC___d114 =
	      lv_roundup___1__h2593;
      3'b011:
	  IF_ff_stage3_rv_port0__read__3_BITS_39_TO_37_2_ETC___d114 =
	      lv_roundup___1__h2754;
      3'b100:
	  IF_ff_stage3_rv_port0__read__3_BITS_39_TO_37_2_ETC___d114 =
	      lv_roundup___1__h2711;
      default: IF_ff_stage3_rv_port0__read__3_BITS_39_TO_37_2_ETC___d114 =
		   ff_stage3_rv[39:37] == 3'b010 &&
		   x__h2766 & ff_stage3_rv[79];
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        ff_stage1_rv <= `BSV_ASSIGNMENT_DELAY
	    198'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	ff_stage2_rv <= `BSV_ASSIGNMENT_DELAY 92'h2AAAAAAAAAAAAAAAAAAAAAA;
	ff_stage3_rv <= `BSV_ASSIGNMENT_DELAY
	    155'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	rg_ready_signal <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (ff_stage1_rv$EN)
	  ff_stage1_rv <= `BSV_ASSIGNMENT_DELAY ff_stage1_rv$D_IN;
	if (ff_stage2_rv$EN)
	  ff_stage2_rv <= `BSV_ASSIGNMENT_DELAY ff_stage2_rv$D_IN;
	if (ff_stage3_rv$EN)
	  ff_stage3_rv <= `BSV_ASSIGNMENT_DELAY ff_stage3_rv$D_IN;
	if (rg_ready_signal$EN)
	  rg_ready_signal <= `BSV_ASSIGNMENT_DELAY rg_ready_signal$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    ff_stage1_rv = 198'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ff_stage2_rv = 92'hAAAAAAAAAAAAAAAAAAAAAAA;
    ff_stage3_rv = 155'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_ready_signal = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkfpu_dpfloating_divider

