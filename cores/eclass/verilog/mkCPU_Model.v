//
// Generated by Bluespec Compiler, version 2017.03.beta1 (build 35049, 2017-03-16)
//
// On Thu Apr  6 04:41:38 IST 2017
//
//
// Ports:
// Name                         I/O  size props
// imem_ifc_tx_get                O   110
// RDY_imem_ifc_tx_get            O     1
// RDY_imem_ifc_rx_put            O     1
// dmem_ifc_tx_get                O   110
// RDY_dmem_ifc_tx_get            O     1
// RDY_dmem_ifc_rx_put            O     1
// RDY_interrupt_ifc_timer        O     1 const
// RDY_interrupt_ifc_software     O     1 const
// RDY_interrupt_ifc_external     O     1 const
// RDY_debug_ifc_reset            O     1
// debug_ifc_reset_complete       O     1 reg
// RDY_debug_ifc_reset_complete   O     1
// RDY_debug_ifc_run_continue     O     1
// RDY_debug_ifc_run_step         O     1
// RDY_debug_ifc_stop             O     1 const
// debug_ifc_stop_reason          O     3
// RDY_debug_ifc_stop_reason      O     1
// debug_ifc_read_pc              O    32
// RDY_debug_ifc_read_pc          O     1
// debug_ifc_read_exec_pc         O    32 reg
// RDY_debug_ifc_read_exec_pc     O     1
// RDY_debug_ifc_write_pc         O     1 reg
// debug_ifc_read_gpr             O    32
// RDY_debug_ifc_read_gpr         O     1
// RDY_debug_ifc_write_gpr        O     1
// RDY_debug_ifc_req_read_memW    O     1
// debug_ifc_rsp_read_memW        O    32
// RDY_debug_ifc_rsp_read_memW    O     1
// RDY_debug_ifc_write_memW       O     1
// debug_ifc_read_instret         O    64 reg
// RDY_debug_ifc_read_instret     O     1
// debug_ifc_read_cycle           O    64 reg
// RDY_debug_ifc_read_cycle       O     1
// RDY_debug_ifc_set_verbosity    O     1 const
// RDY_uart_ifc_sin               O     1 const
// uart_ifc_sout                  O     1 reg
// RDY_uart_ifc_sout              O     1 const
// uart_ifc_busy                  O     1
// RDY_uart_ifc_busy              O     1 const
// RDY_write_counter_time         O     1 const
// halt                           O     1 reg
// RDY_halt                       O     1 const
// hartid                         I    32 unused
// CLK                            I     1 clock
// RST_N                          I     1 reset
// imem_ifc_rx_put                I    58
// dmem_ifc_rx_put                I    58
// interrupt_ifc_timer_mtip       I     1
// interrupt_ifc_software_msip    I     1
// interrupt_ifc_external_meip    I     1
// debug_ifc_run_continue_mpc     I    33 unused
// debug_ifc_run_step_mpc         I    33 unused
// debug_ifc_write_pc_d           I    32
// debug_ifc_read_gpr_r           I     5
// debug_ifc_write_gpr_r          I     5
// debug_ifc_write_gpr_d          I    32
// debug_ifc_req_read_memW_addr   I    32
// debug_ifc_write_memW_addr      I    32
// debug_ifc_write_memW_d         I    32
// debug_ifc_set_verbosity_verbosity  I    32 reg
// uart_ifc_sin_in                I     1 reg
// write_counter_time_data        I    64
// EN_imem_ifc_rx_put             I     1
// EN_dmem_ifc_rx_put             I     1
// EN_interrupt_ifc_timer         I     1
// EN_interrupt_ifc_software      I     1
// EN_interrupt_ifc_external      I     1
// EN_debug_ifc_reset             I     1
// EN_debug_ifc_run_continue      I     1
// EN_debug_ifc_run_step          I     1
// EN_debug_ifc_stop              I     1
// EN_debug_ifc_write_pc          I     1
// EN_debug_ifc_write_gpr         I     1
// EN_debug_ifc_req_read_memW     I     1
// EN_debug_ifc_write_memW        I     1
// EN_debug_ifc_set_verbosity     I     1
// EN_uart_ifc_sin                I     1
// EN_write_counter_time          I     1
// EN_imem_ifc_tx_get             I     1
// EN_dmem_ifc_tx_get             I     1
// EN_debug_ifc_reset_complete    I     1
// EN_debug_ifc_rsp_read_memW     I     1
//
// Combinational paths from inputs to outputs:
//   debug_ifc_read_gpr_r -> debug_ifc_read_gpr
//   (interrupt_ifc_timer_mtip,
//    interrupt_ifc_software_msip,
//    interrupt_ifc_external_meip,
//    write_counter_time_data,
//    EN_interrupt_ifc_timer,
//    EN_interrupt_ifc_software,
//    EN_interrupt_ifc_external,
//    EN_write_counter_time) -> RDY_imem_ifc_rx_put
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCPU_Model(hartid,
		   CLK,
		   RST_N,

		   EN_imem_ifc_tx_get,
		   imem_ifc_tx_get,
		   RDY_imem_ifc_tx_get,

		   imem_ifc_rx_put,
		   EN_imem_ifc_rx_put,
		   RDY_imem_ifc_rx_put,

		   EN_dmem_ifc_tx_get,
		   dmem_ifc_tx_get,
		   RDY_dmem_ifc_tx_get,

		   dmem_ifc_rx_put,
		   EN_dmem_ifc_rx_put,
		   RDY_dmem_ifc_rx_put,

		   interrupt_ifc_timer_mtip,
		   EN_interrupt_ifc_timer,
		   RDY_interrupt_ifc_timer,

		   interrupt_ifc_software_msip,
		   EN_interrupt_ifc_software,
		   RDY_interrupt_ifc_software,

		   interrupt_ifc_external_meip,
		   EN_interrupt_ifc_external,
		   RDY_interrupt_ifc_external,

		   EN_debug_ifc_reset,
		   RDY_debug_ifc_reset,

		   EN_debug_ifc_reset_complete,
		   debug_ifc_reset_complete,
		   RDY_debug_ifc_reset_complete,

		   debug_ifc_run_continue_mpc,
		   EN_debug_ifc_run_continue,
		   RDY_debug_ifc_run_continue,

		   debug_ifc_run_step_mpc,
		   EN_debug_ifc_run_step,
		   RDY_debug_ifc_run_step,

		   EN_debug_ifc_stop,
		   RDY_debug_ifc_stop,

		   debug_ifc_stop_reason,
		   RDY_debug_ifc_stop_reason,

		   debug_ifc_read_pc,
		   RDY_debug_ifc_read_pc,

		   debug_ifc_read_exec_pc,
		   RDY_debug_ifc_read_exec_pc,

		   debug_ifc_write_pc_d,
		   EN_debug_ifc_write_pc,
		   RDY_debug_ifc_write_pc,

		   debug_ifc_read_gpr_r,
		   debug_ifc_read_gpr,
		   RDY_debug_ifc_read_gpr,

		   debug_ifc_write_gpr_r,
		   debug_ifc_write_gpr_d,
		   EN_debug_ifc_write_gpr,
		   RDY_debug_ifc_write_gpr,

		   debug_ifc_req_read_memW_addr,
		   EN_debug_ifc_req_read_memW,
		   RDY_debug_ifc_req_read_memW,

		   EN_debug_ifc_rsp_read_memW,
		   debug_ifc_rsp_read_memW,
		   RDY_debug_ifc_rsp_read_memW,

		   debug_ifc_write_memW_addr,
		   debug_ifc_write_memW_d,
		   EN_debug_ifc_write_memW,
		   RDY_debug_ifc_write_memW,

		   debug_ifc_read_instret,
		   RDY_debug_ifc_read_instret,

		   debug_ifc_read_cycle,
		   RDY_debug_ifc_read_cycle,

		   debug_ifc_set_verbosity_verbosity,
		   EN_debug_ifc_set_verbosity,
		   RDY_debug_ifc_set_verbosity,

		   uart_ifc_sin_in,
		   EN_uart_ifc_sin,
		   RDY_uart_ifc_sin,

		   uart_ifc_sout,
		   RDY_uart_ifc_sout,

		   uart_ifc_busy,
		   RDY_uart_ifc_busy,

		   write_counter_time_data,
		   EN_write_counter_time,
		   RDY_write_counter_time,

		   halt,
		   RDY_halt);
  input  [31 : 0] hartid;
  input  CLK;
  input  RST_N;

  // actionvalue method imem_ifc_tx_get
  input  EN_imem_ifc_tx_get;
  output [109 : 0] imem_ifc_tx_get;
  output RDY_imem_ifc_tx_get;

  // action method imem_ifc_rx_put
  input  [57 : 0] imem_ifc_rx_put;
  input  EN_imem_ifc_rx_put;
  output RDY_imem_ifc_rx_put;

  // actionvalue method dmem_ifc_tx_get
  input  EN_dmem_ifc_tx_get;
  output [109 : 0] dmem_ifc_tx_get;
  output RDY_dmem_ifc_tx_get;

  // action method dmem_ifc_rx_put
  input  [57 : 0] dmem_ifc_rx_put;
  input  EN_dmem_ifc_rx_put;
  output RDY_dmem_ifc_rx_put;

  // action method interrupt_ifc_timer
  input  interrupt_ifc_timer_mtip;
  input  EN_interrupt_ifc_timer;
  output RDY_interrupt_ifc_timer;

  // action method interrupt_ifc_software
  input  interrupt_ifc_software_msip;
  input  EN_interrupt_ifc_software;
  output RDY_interrupt_ifc_software;

  // action method interrupt_ifc_external
  input  interrupt_ifc_external_meip;
  input  EN_interrupt_ifc_external;
  output RDY_interrupt_ifc_external;

  // action method debug_ifc_reset
  input  EN_debug_ifc_reset;
  output RDY_debug_ifc_reset;

  // actionvalue method debug_ifc_reset_complete
  input  EN_debug_ifc_reset_complete;
  output debug_ifc_reset_complete;
  output RDY_debug_ifc_reset_complete;

  // action method debug_ifc_run_continue
  input  [32 : 0] debug_ifc_run_continue_mpc;
  input  EN_debug_ifc_run_continue;
  output RDY_debug_ifc_run_continue;

  // action method debug_ifc_run_step
  input  [32 : 0] debug_ifc_run_step_mpc;
  input  EN_debug_ifc_run_step;
  output RDY_debug_ifc_run_step;

  // action method debug_ifc_stop
  input  EN_debug_ifc_stop;
  output RDY_debug_ifc_stop;

  // value method debug_ifc_stop_reason
  output [2 : 0] debug_ifc_stop_reason;
  output RDY_debug_ifc_stop_reason;

  // value method debug_ifc_read_pc
  output [31 : 0] debug_ifc_read_pc;
  output RDY_debug_ifc_read_pc;

  // value method debug_ifc_read_exec_pc
  output [31 : 0] debug_ifc_read_exec_pc;
  output RDY_debug_ifc_read_exec_pc;

  // action method debug_ifc_write_pc
  input  [31 : 0] debug_ifc_write_pc_d;
  input  EN_debug_ifc_write_pc;
  output RDY_debug_ifc_write_pc;

  // value method debug_ifc_read_gpr
  input  [4 : 0] debug_ifc_read_gpr_r;
  output [31 : 0] debug_ifc_read_gpr;
  output RDY_debug_ifc_read_gpr;

  // action method debug_ifc_write_gpr
  input  [4 : 0] debug_ifc_write_gpr_r;
  input  [31 : 0] debug_ifc_write_gpr_d;
  input  EN_debug_ifc_write_gpr;
  output RDY_debug_ifc_write_gpr;

  // action method debug_ifc_req_read_memW
  input  [31 : 0] debug_ifc_req_read_memW_addr;
  input  EN_debug_ifc_req_read_memW;
  output RDY_debug_ifc_req_read_memW;

  // actionvalue method debug_ifc_rsp_read_memW
  input  EN_debug_ifc_rsp_read_memW;
  output [31 : 0] debug_ifc_rsp_read_memW;
  output RDY_debug_ifc_rsp_read_memW;

  // action method debug_ifc_write_memW
  input  [31 : 0] debug_ifc_write_memW_addr;
  input  [31 : 0] debug_ifc_write_memW_d;
  input  EN_debug_ifc_write_memW;
  output RDY_debug_ifc_write_memW;

  // value method debug_ifc_read_instret
  output [63 : 0] debug_ifc_read_instret;
  output RDY_debug_ifc_read_instret;

  // value method debug_ifc_read_cycle
  output [63 : 0] debug_ifc_read_cycle;
  output RDY_debug_ifc_read_cycle;

  // action method debug_ifc_set_verbosity
  input  [31 : 0] debug_ifc_set_verbosity_verbosity;
  input  EN_debug_ifc_set_verbosity;
  output RDY_debug_ifc_set_verbosity;

  // action method uart_ifc_sin
  input  uart_ifc_sin_in;
  input  EN_uart_ifc_sin;
  output RDY_uart_ifc_sin;

  // value method uart_ifc_sout
  output uart_ifc_sout;
  output RDY_uart_ifc_sout;

  // value method uart_ifc_busy
  output uart_ifc_busy;
  output RDY_uart_ifc_busy;

  // action method write_counter_time
  input  [63 : 0] write_counter_time_data;
  input  EN_write_counter_time;
  output RDY_write_counter_time;

  // value method halt
  output halt;
  output RDY_halt;

  // signals for module outputs
  wire [109 : 0] dmem_ifc_tx_get, imem_ifc_tx_get;
  wire [63 : 0] debug_ifc_read_cycle, debug_ifc_read_instret;
  wire [31 : 0] debug_ifc_read_exec_pc,
		debug_ifc_read_gpr,
		debug_ifc_read_pc,
		debug_ifc_rsp_read_memW;
  wire [2 : 0] debug_ifc_stop_reason;
  wire RDY_debug_ifc_read_cycle,
       RDY_debug_ifc_read_exec_pc,
       RDY_debug_ifc_read_gpr,
       RDY_debug_ifc_read_instret,
       RDY_debug_ifc_read_pc,
       RDY_debug_ifc_req_read_memW,
       RDY_debug_ifc_reset,
       RDY_debug_ifc_reset_complete,
       RDY_debug_ifc_rsp_read_memW,
       RDY_debug_ifc_run_continue,
       RDY_debug_ifc_run_step,
       RDY_debug_ifc_set_verbosity,
       RDY_debug_ifc_stop,
       RDY_debug_ifc_stop_reason,
       RDY_debug_ifc_write_gpr,
       RDY_debug_ifc_write_memW,
       RDY_debug_ifc_write_pc,
       RDY_dmem_ifc_rx_put,
       RDY_dmem_ifc_tx_get,
       RDY_halt,
       RDY_imem_ifc_rx_put,
       RDY_imem_ifc_tx_get,
       RDY_interrupt_ifc_external,
       RDY_interrupt_ifc_software,
       RDY_interrupt_ifc_timer,
       RDY_uart_ifc_busy,
       RDY_uart_ifc_sin,
       RDY_uart_ifc_sout,
       RDY_write_counter_time,
       debug_ifc_reset_complete,
       halt,
       uart_ifc_busy,
       uart_ifc_sout;

  // inlined wires
  reg [73 : 0] writeback_wr_response$wget;
  reg [31 : 0] csrfile_csr_mbadaddr$port0__write_1;
  reg [7 : 0] csrfile_rg_tx$port0__write_1;
  reg rg_stop_requested$port1__write_1;
  wire [297 : 0] writeback_dcache_f_dmem_reqs_rv$port0__write_1,
		 writeback_dcache_f_dmem_reqs_rv$port1__read,
		 writeback_dcache_f_dmem_reqs_rv$port1__write_1,
		 writeback_dcache_f_dmem_reqs_rv$port2__read;
  wire [237 : 0] execute_wr_request$wget;
  wire [152 : 0] f_ex_wb_rv$port0__write_1,
		 f_ex_wb_rv$port1__read,
		 f_ex_wb_rv$port1__write_1,
		 f_ex_wb_rv$port2__read,
		 f_ex_wb_rv$port3__read;
  wire [151 : 0] writeback_wr_request$wget;
  wire [119 : 0] execute_wr_response$wget;
  wire [110 : 0] f_dmem_reqs_rv$port0__write_1,
		 f_dmem_reqs_rv$port1__read,
		 writeback_f_dmem_reqs_rv$port0__write_1,
		 writeback_f_dmem_reqs_rv$port1__read,
		 writeback_f_dmem_reqs_rv$port1__write_1,
		 writeback_f_dmem_reqs_rv$port2__read,
		 writeback_f_dmem_reqs_rv$port3__read;
  wire [71 : 0] f_if_ex_rv$port0__write_1,
		f_if_ex_rv$port1__read,
		f_if_ex_rv$port1__write_1,
		f_if_ex_rv$port2__read,
		f_if_ex_rv$port3__read;
  wire [68 : 0] writeback_dcache_f_cpu_rsps_rv$port0__write_1,
		writeback_dcache_f_cpu_rsps_rv$port1__read,
		writeback_dcache_f_cpu_rsps_rv$port1__write_1,
		writeback_dcache_f_cpu_rsps_rv$port2__read;
  wire [66 : 0] fetch_icache_f_cpu_rsps_rv$port0__write_1,
		fetch_icache_f_cpu_rsps_rv$port1__read,
		fetch_icache_f_cpu_rsps_rv$port1__write_1,
		fetch_icache_f_cpu_rsps_rv$port2__read;
  wire [58 : 0] f_dmem_rsps_rv$port0__write_1,
		f_dmem_rsps_rv$port1__read,
		writeback_f_dmem_rsps_rv$port0__write_1,
		writeback_f_dmem_rsps_rv$port1__read,
		writeback_f_dmem_rsps_rv$port2__read,
		writeback_f_dmem_rsps_rv$port3__read;
  wire [39 : 0] fetch_icache_f_imem_reqs_rv$port0__write_1,
		fetch_icache_f_imem_reqs_rv$port1__read,
		fetch_icache_f_imem_reqs_rv$port1__write_1,
		fetch_icache_f_imem_reqs_rv$port2__read;
  wire [37 : 0] wr_forwarded_data$wget, writeback_wr_trap_data$wget;
  wire [32 : 0] fetch_rg_redirect_pc$port0__write_1,
		fetch_rg_redirect_pc$port1__read,
		fetch_rg_redirect_pc$port1__write_1,
		fetch_rg_redirect_pc$port2__read,
		fetch_rg_this_pc$port0__write_1,
		fetch_rg_this_pc$port1__read,
		fetch_rg_this_pc$port2__read,
		fetch_wr_redirect_3$wget;
  wire [31 : 0] csrfile_csr_mbadaddr$port1__read,
		csrfile_csr_mbadaddr$port2__read,
		csrfile_csr_mcause$port1__read,
		csrfile_csr_mcause$port1__write_1,
		csrfile_csr_mcause$port2__read,
		csrfile_csr_mcycle$port2__read,
		csrfile_csr_mcycleh$port2__read,
		csrfile_csr_mepc$port1__read,
		csrfile_csr_mepc$port2__read,
		csrfile_csr_minstret$port2__read,
		csrfile_csr_minstreth$port2__read,
		csrfile_csr_ubadaddr$port1__read,
		csrfile_csr_ubadaddr$port2__read,
		csrfile_csr_ucause$port1__read,
		csrfile_csr_ucause$port2__read,
		csrfile_csr_uepc$port1__read,
		csrfile_csr_uepc$port2__read;
  wire [8 : 0] csrfile_rg_rx$port1__write_1, csrfile_rg_rx$port2__read;
  wire [7 : 0] csrfile_rg_tx$port1__read;
  wire [3 : 0] rg_stop_reason$port1__read;
  wire [1 : 0] csrfile_rg_mpp$port0__write_1,
	       csrfile_rg_mpp$port1__read,
	       csrfile_rg_mpp$port2__read,
	       csrfile_rg_prv$port0__write_1,
	       csrfile_rg_prv$port1__write_1,
	       csrfile_rg_prv$port2__read;
  wire _write_RL_writeback_rl_handle_writeback_requests$EN_csrfile_rg_medeleg$wget,
       _write_RL_writeback_rl_handle_writeback_requests$EN_csrfile_rg_mtvec$wget,
       _write_RL_writeback_rl_handle_writeback_requests$EN_csrfile_rg_utvec$wget,
       _wset_RL_writeback_rl_data_memory_response$EN_writeback_wr_response$wget,
       _wset_RL_writeback_rl_handle_writeback_requests$EN_writeback_wr_response$wget,
       csrfile_csr_mbadaddr$EN_port0__write,
       csrfile_csr_mbadaddr$EN_port1__write,
       csrfile_csr_mcause$EN_port0__write,
       csrfile_csr_mcause$EN_port1__write,
       csrfile_csr_mcycle$EN_port1__write,
       csrfile_csr_mcycleh$EN_port1__write,
       csrfile_csr_mepc$EN_port0__write,
       csrfile_csr_mepc$EN_port1__write,
       csrfile_csr_minstret$EN_port1__write,
       csrfile_csr_minstreth$EN_port1__write,
       csrfile_csr_ubadaddr$EN_port0__write,
       csrfile_csr_ubadaddr$EN_port1__write,
       csrfile_csr_ucause$EN_port0__write,
       csrfile_csr_ucause$EN_port1__write,
       csrfile_csr_uepc$EN_port0__write,
       csrfile_csr_uepc$EN_port1__write,
       csrfile_rg_mie$EN_port0__write,
       csrfile_rg_mie$EN_port1__write,
       csrfile_rg_mie$port0__write_1,
       csrfile_rg_mie$port1__read,
       csrfile_rg_mie$port2__read,
       csrfile_rg_mpie$EN_port0__write,
       csrfile_rg_mpie$EN_port1__write,
       csrfile_rg_mpie$port0__write_1,
       csrfile_rg_mpie$port1__read,
       csrfile_rg_mpie$port1__write_1,
       csrfile_rg_mpie$port2__read,
       csrfile_rg_mpp$EN_port0__write,
       csrfile_rg_mpp$EN_port1__write,
       csrfile_rg_prv$EN_port0__write,
       csrfile_rg_tx$EN_port0__write,
       csrfile_rg_uie$EN_port0__write,
       csrfile_rg_uie$EN_port1__write,
       csrfile_rg_uie$port0__write_1,
       csrfile_rg_uie$port2__read,
       csrfile_rg_upie$EN_port0__write,
       csrfile_rg_upie$port0__write_1,
       csrfile_rg_upie$port1__read,
       csrfile_uart_pwRecvCellCountReset$whas,
       csrfile_uart_pwRecvEnableBitCount$whas,
       csrfile_uart_pwRecvResetBitCount$whas,
       csrfile_uart_pwXmitCellCountReset$whas,
       csrfile_uart_pwXmitEnableBitCount$whas,
       csrfile_uart_pwXmitLoadBuffer$whas,
       csrfile_wr_send_to_uart$whas,
       f_dmem_reqs_rv$EN_port0__write,
       f_ex_wb_rv$EN_port1__write,
       f_ex_wb_rv$EN_port2__write,
       f_if_ex_rv$EN_port0__write,
       f_if_ex_rv$EN_port2__write,
       fetch_icache_f_cpu_rsps_rv$EN_port0__write,
       fetch_icache_f_cpu_rsps_rv$EN_port1__write,
       fetch_icache_f_imem_reqs_rv$EN_port1__write,
       fetch_icache_rg_imem_state$EN_port0__write,
       fetch_icache_rg_imem_state$port1__read,
       fetch_icache_rg_imem_state$port2__read,
       fetch_icache_rg_response_valid$port2__read,
       fetch_icache_rg_response_valid$port3__read,
       fetch_rg_imem_state$EN_port1__write,
       fetch_rg_imem_state$port1__read,
       fetch_rg_imem_state$port2__read,
       fetch_rg_redirect_pc$EN_port0__write,
       fetch_rg_this_pc$EN_port1__write,
       pwr_stall_execute$whas,
       rg_stop_requested$EN_port0__write,
       rg_stop_requested$EN_port1__write,
       rg_stop_requested$port1__read,
       rg_stop_requested$port2__read,
       wr_forwarded_data$whas,
       writeback_dcache_f_dmem_reqs_rv$EN_port1__write,
       writeback_f_dmem_reqs_rv$EN_port0__write,
       writeback_rg_dmem_state$EN_port0__write,
       writeback_rg_dmem_state$port1__read,
       writeback_rg_dmem_state$port2__read,
       writeback_wr_response$whas,
       writeback_wr_trap_data$whas;

  // register counter_cycle
  reg [63 : 0] counter_cycle;
  wire [63 : 0] counter_cycle$D_IN;
  wire counter_cycle$EN;

  // register counter_instret
  reg [63 : 0] counter_instret;
  wire [63 : 0] counter_instret$D_IN;
  wire counter_instret$EN;

  // register csrfile_csr_mbadaddr
  reg [31 : 0] csrfile_csr_mbadaddr;
  wire [31 : 0] csrfile_csr_mbadaddr$D_IN;
  wire csrfile_csr_mbadaddr$EN;

  // register csrfile_csr_mbase
  reg [31 : 0] csrfile_csr_mbase;
  wire [31 : 0] csrfile_csr_mbase$D_IN;
  wire csrfile_csr_mbase$EN;

  // register csrfile_csr_mbound
  reg [31 : 0] csrfile_csr_mbound;
  wire [31 : 0] csrfile_csr_mbound$D_IN;
  wire csrfile_csr_mbound$EN;

  // register csrfile_csr_mcause
  reg [31 : 0] csrfile_csr_mcause;
  wire [31 : 0] csrfile_csr_mcause$D_IN;
  wire csrfile_csr_mcause$EN;

  // register csrfile_csr_mcycle
  reg [31 : 0] csrfile_csr_mcycle;
  wire [31 : 0] csrfile_csr_mcycle$D_IN;
  wire csrfile_csr_mcycle$EN;

  // register csrfile_csr_mcycleh
  reg [31 : 0] csrfile_csr_mcycleh;
  wire [31 : 0] csrfile_csr_mcycleh$D_IN;
  wire csrfile_csr_mcycleh$EN;

  // register csrfile_csr_mdbase
  reg [31 : 0] csrfile_csr_mdbase;
  wire [31 : 0] csrfile_csr_mdbase$D_IN;
  wire csrfile_csr_mdbase$EN;

  // register csrfile_csr_mdbound
  reg [31 : 0] csrfile_csr_mdbound;
  wire [31 : 0] csrfile_csr_mdbound$D_IN;
  wire csrfile_csr_mdbound$EN;

  // register csrfile_csr_mepc
  reg [31 : 0] csrfile_csr_mepc;
  wire [31 : 0] csrfile_csr_mepc$D_IN;
  wire csrfile_csr_mepc$EN;

  // register csrfile_csr_mibase
  reg [31 : 0] csrfile_csr_mibase;
  wire [31 : 0] csrfile_csr_mibase$D_IN;
  wire csrfile_csr_mibase$EN;

  // register csrfile_csr_mibound
  reg [31 : 0] csrfile_csr_mibound;
  wire [31 : 0] csrfile_csr_mibound$D_IN;
  wire csrfile_csr_mibound$EN;

  // register csrfile_csr_minstret
  reg [31 : 0] csrfile_csr_minstret;
  wire [31 : 0] csrfile_csr_minstret$D_IN;
  wire csrfile_csr_minstret$EN;

  // register csrfile_csr_minstreth
  reg [31 : 0] csrfile_csr_minstreth;
  wire [31 : 0] csrfile_csr_minstreth$D_IN;
  wire csrfile_csr_minstreth$EN;

  // register csrfile_csr_misa
  reg [31 : 0] csrfile_csr_misa;
  wire [31 : 0] csrfile_csr_misa$D_IN;
  wire csrfile_csr_misa$EN;

  // register csrfile_csr_mscratch
  reg [31 : 0] csrfile_csr_mscratch;
  wire [31 : 0] csrfile_csr_mscratch$D_IN;
  wire csrfile_csr_mscratch$EN;

  // register csrfile_csr_ubadaddr
  reg [31 : 0] csrfile_csr_ubadaddr;
  wire [31 : 0] csrfile_csr_ubadaddr$D_IN;
  wire csrfile_csr_ubadaddr$EN;

  // register csrfile_csr_ucause
  reg [31 : 0] csrfile_csr_ucause;
  wire [31 : 0] csrfile_csr_ucause$D_IN;
  wire csrfile_csr_ucause$EN;

  // register csrfile_csr_uepc
  reg [31 : 0] csrfile_csr_uepc;
  wire [31 : 0] csrfile_csr_uepc$D_IN;
  wire csrfile_csr_uepc$EN;

  // register csrfile_csr_uscratch
  reg [31 : 0] csrfile_csr_uscratch;
  wire [31 : 0] csrfile_csr_uscratch$D_IN;
  wire csrfile_csr_uscratch$EN;

  // register csrfile_rg_fs
  reg [1 : 0] csrfile_rg_fs;
  reg [1 : 0] csrfile_rg_fs$D_IN;
  wire csrfile_rg_fs$EN;

  // register csrfile_rg_medeleg
  reg [11 : 0] csrfile_rg_medeleg;
  reg [11 : 0] csrfile_rg_medeleg$D_IN;
  wire csrfile_rg_medeleg$EN;

  // register csrfile_rg_meie
  reg csrfile_rg_meie;
  reg csrfile_rg_meie$D_IN;
  wire csrfile_rg_meie$EN;

  // register csrfile_rg_mideleg
  reg [11 : 0] csrfile_rg_mideleg;
  wire [11 : 0] csrfile_rg_mideleg$D_IN;
  wire csrfile_rg_mideleg$EN;

  // register csrfile_rg_mie
  reg csrfile_rg_mie;
  wire csrfile_rg_mie$D_IN, csrfile_rg_mie$EN;

  // register csrfile_rg_mpie
  reg csrfile_rg_mpie;
  wire csrfile_rg_mpie$D_IN, csrfile_rg_mpie$EN;

  // register csrfile_rg_mpp
  reg [1 : 0] csrfile_rg_mpp;
  wire [1 : 0] csrfile_rg_mpp$D_IN;
  wire csrfile_rg_mpp$EN;

  // register csrfile_rg_mprv
  reg csrfile_rg_mprv;
  reg csrfile_rg_mprv$D_IN;
  wire csrfile_rg_mprv$EN;

  // register csrfile_rg_msie
  reg csrfile_rg_msie;
  wire csrfile_rg_msie$D_IN, csrfile_rg_msie$EN;

  // register csrfile_rg_mtie
  reg csrfile_rg_mtie;
  wire csrfile_rg_mtie$D_IN, csrfile_rg_mtie$EN;

  // register csrfile_rg_mtvec
  reg [29 : 0] csrfile_rg_mtvec;
  reg [29 : 0] csrfile_rg_mtvec$D_IN;
  wire csrfile_rg_mtvec$EN;

  // register csrfile_rg_mxr
  reg csrfile_rg_mxr;
  reg csrfile_rg_mxr$D_IN;
  wire csrfile_rg_mxr$EN;

  // register csrfile_rg_prv
  reg [1 : 0] csrfile_rg_prv;
  wire [1 : 0] csrfile_rg_prv$D_IN;
  wire csrfile_rg_prv$EN;

  // register csrfile_rg_pum
  reg csrfile_rg_pum;
  reg csrfile_rg_pum$D_IN;
  wire csrfile_rg_pum$EN;

  // register csrfile_rg_rx
  reg [8 : 0] csrfile_rg_rx;
  wire [8 : 0] csrfile_rg_rx$D_IN;
  wire csrfile_rg_rx$EN;

  // register csrfile_rg_s_cy
  reg csrfile_rg_s_cy;
  wire csrfile_rg_s_cy$D_IN, csrfile_rg_s_cy$EN;

  // register csrfile_rg_s_ir
  reg csrfile_rg_s_ir;
  wire csrfile_rg_s_ir$D_IN, csrfile_rg_s_ir$EN;

  // register csrfile_rg_s_tm
  reg csrfile_rg_s_tm;
  wire csrfile_rg_s_tm$D_IN, csrfile_rg_s_tm$EN;

  // register csrfile_rg_seie
  reg csrfile_rg_seie;
  reg csrfile_rg_seie$D_IN;
  wire csrfile_rg_seie$EN;

  // register csrfile_rg_seip
  reg csrfile_rg_seip;
  wire csrfile_rg_seip$D_IN, csrfile_rg_seip$EN;

  // register csrfile_rg_ssie
  reg csrfile_rg_ssie;
  reg csrfile_rg_ssie$D_IN;
  wire csrfile_rg_ssie$EN;

  // register csrfile_rg_ssip
  reg csrfile_rg_ssip;
  wire csrfile_rg_ssip$D_IN, csrfile_rg_ssip$EN;

  // register csrfile_rg_stie
  reg csrfile_rg_stie;
  reg csrfile_rg_stie$D_IN;
  wire csrfile_rg_stie$EN;

  // register csrfile_rg_stip
  reg csrfile_rg_stip;
  wire csrfile_rg_stip$D_IN, csrfile_rg_stip$EN;

  // register csrfile_rg_tmp
  reg [31 : 0] csrfile_rg_tmp;
  wire [31 : 0] csrfile_rg_tmp$D_IN;
  wire csrfile_rg_tmp$EN;

  // register csrfile_rg_tx
  reg [7 : 0] csrfile_rg_tx;
  wire [7 : 0] csrfile_rg_tx$D_IN;
  wire csrfile_rg_tx$EN;

  // register csrfile_rg_u_cy
  reg csrfile_rg_u_cy;
  wire csrfile_rg_u_cy$D_IN, csrfile_rg_u_cy$EN;

  // register csrfile_rg_u_ir
  reg csrfile_rg_u_ir;
  reg csrfile_rg_u_ir$D_IN;
  wire csrfile_rg_u_ir$EN;

  // register csrfile_rg_u_tm
  reg csrfile_rg_u_tm;
  wire csrfile_rg_u_tm$D_IN, csrfile_rg_u_tm$EN;

  // register csrfile_rg_ueie
  reg csrfile_rg_ueie;
  reg csrfile_rg_ueie$D_IN;
  wire csrfile_rg_ueie$EN;

  // register csrfile_rg_ueip
  reg csrfile_rg_ueip;
  wire csrfile_rg_ueip$D_IN, csrfile_rg_ueip$EN;

  // register csrfile_rg_uie
  reg csrfile_rg_uie;
  wire csrfile_rg_uie$D_IN, csrfile_rg_uie$EN;

  // register csrfile_rg_upie
  reg csrfile_rg_upie;
  wire csrfile_rg_upie$D_IN, csrfile_rg_upie$EN;

  // register csrfile_rg_usie
  reg csrfile_rg_usie;
  wire csrfile_rg_usie$D_IN, csrfile_rg_usie$EN;

  // register csrfile_rg_usip
  reg csrfile_rg_usip;
  wire csrfile_rg_usip$D_IN, csrfile_rg_usip$EN;

  // register csrfile_rg_utie
  reg csrfile_rg_utie;
  wire csrfile_rg_utie$D_IN, csrfile_rg_utie$EN;

  // register csrfile_rg_utip
  reg csrfile_rg_utip;
  wire csrfile_rg_utip$D_IN, csrfile_rg_utip$EN;

  // register csrfile_rg_utvec
  reg [29 : 0] csrfile_rg_utvec;
  wire [29 : 0] csrfile_rg_utvec$D_IN;
  wire csrfile_rg_utvec$EN;

  // register csrfile_rg_vm
  reg [4 : 0] csrfile_rg_vm;
  reg [4 : 0] csrfile_rg_vm$D_IN;
  wire csrfile_rg_vm$EN;

  // register csrfile_rg_xs
  reg [1 : 0] csrfile_rg_xs;
  reg [1 : 0] csrfile_rg_xs$D_IN;
  wire csrfile_rg_xs$EN;

  // register csrfile_uart_fifoRecv_countReg
  reg [1 : 0] csrfile_uart_fifoRecv_countReg;
  wire [1 : 0] csrfile_uart_fifoRecv_countReg$D_IN;
  wire csrfile_uart_fifoRecv_countReg$EN;

  // register csrfile_uart_fifoXmit_countReg
  reg [1 : 0] csrfile_uart_fifoXmit_countReg;
  wire [1 : 0] csrfile_uart_fifoXmit_countReg$D_IN;
  wire csrfile_uart_fifoXmit_countReg$EN;

  // register csrfile_uart_rRecvBitCount
  reg [3 : 0] csrfile_uart_rRecvBitCount;
  wire [3 : 0] csrfile_uart_rRecvBitCount$D_IN;
  wire csrfile_uart_rRecvBitCount$EN;

  // register csrfile_uart_rRecvCellCount
  reg [3 : 0] csrfile_uart_rRecvCellCount;
  wire [3 : 0] csrfile_uart_rRecvCellCount$D_IN;
  wire csrfile_uart_rRecvCellCount$EN;

  // register csrfile_uart_rRecvData
  reg csrfile_uart_rRecvData;
  wire csrfile_uart_rRecvData$D_IN, csrfile_uart_rRecvData$EN;

  // register csrfile_uart_rRecvParity
  reg csrfile_uart_rRecvParity;
  wire csrfile_uart_rRecvParity$D_IN, csrfile_uart_rRecvParity$EN;

  // register csrfile_uart_rRecvState
  reg [2 : 0] csrfile_uart_rRecvState;
  reg [2 : 0] csrfile_uart_rRecvState$D_IN;
  wire csrfile_uart_rRecvState$EN;

  // register csrfile_uart_rXmitBitCount
  reg [3 : 0] csrfile_uart_rXmitBitCount;
  wire [3 : 0] csrfile_uart_rXmitBitCount$D_IN;
  wire csrfile_uart_rXmitBitCount$EN;

  // register csrfile_uart_rXmitCellCount
  reg [3 : 0] csrfile_uart_rXmitCellCount;
  wire [3 : 0] csrfile_uart_rXmitCellCount$D_IN;
  wire csrfile_uart_rXmitCellCount$EN;

  // register csrfile_uart_rXmitDataOut
  reg csrfile_uart_rXmitDataOut;
  reg csrfile_uart_rXmitDataOut$D_IN;
  wire csrfile_uart_rXmitDataOut$EN;

  // register csrfile_uart_rXmitParity
  reg csrfile_uart_rXmitParity;
  wire csrfile_uart_rXmitParity$D_IN, csrfile_uart_rXmitParity$EN;

  // register csrfile_uart_rXmitState
  reg [2 : 0] csrfile_uart_rXmitState;
  reg [2 : 0] csrfile_uart_rXmitState$D_IN;
  wire csrfile_uart_rXmitState$EN;

  // register csrfile_uart_vrRecvBuffer_0
  reg csrfile_uart_vrRecvBuffer_0;
  wire csrfile_uart_vrRecvBuffer_0$D_IN, csrfile_uart_vrRecvBuffer_0$EN;

  // register csrfile_uart_vrRecvBuffer_1
  reg csrfile_uart_vrRecvBuffer_1;
  wire csrfile_uart_vrRecvBuffer_1$D_IN, csrfile_uart_vrRecvBuffer_1$EN;

  // register csrfile_uart_vrRecvBuffer_2
  reg csrfile_uart_vrRecvBuffer_2;
  wire csrfile_uart_vrRecvBuffer_2$D_IN, csrfile_uart_vrRecvBuffer_2$EN;

  // register csrfile_uart_vrRecvBuffer_3
  reg csrfile_uart_vrRecvBuffer_3;
  wire csrfile_uart_vrRecvBuffer_3$D_IN, csrfile_uart_vrRecvBuffer_3$EN;

  // register csrfile_uart_vrRecvBuffer_4
  reg csrfile_uart_vrRecvBuffer_4;
  wire csrfile_uart_vrRecvBuffer_4$D_IN, csrfile_uart_vrRecvBuffer_4$EN;

  // register csrfile_uart_vrRecvBuffer_5
  reg csrfile_uart_vrRecvBuffer_5;
  wire csrfile_uart_vrRecvBuffer_5$D_IN, csrfile_uart_vrRecvBuffer_5$EN;

  // register csrfile_uart_vrRecvBuffer_6
  reg csrfile_uart_vrRecvBuffer_6;
  wire csrfile_uart_vrRecvBuffer_6$D_IN, csrfile_uart_vrRecvBuffer_6$EN;

  // register csrfile_uart_vrRecvBuffer_7
  reg csrfile_uart_vrRecvBuffer_7;
  wire csrfile_uart_vrRecvBuffer_7$D_IN, csrfile_uart_vrRecvBuffer_7$EN;

  // register csrfile_uart_vrXmitBuffer_0
  reg csrfile_uart_vrXmitBuffer_0;
  wire csrfile_uart_vrXmitBuffer_0$D_IN, csrfile_uart_vrXmitBuffer_0$EN;

  // register csrfile_uart_vrXmitBuffer_1
  reg csrfile_uart_vrXmitBuffer_1;
  wire csrfile_uart_vrXmitBuffer_1$D_IN, csrfile_uart_vrXmitBuffer_1$EN;

  // register csrfile_uart_vrXmitBuffer_2
  reg csrfile_uart_vrXmitBuffer_2;
  wire csrfile_uart_vrXmitBuffer_2$D_IN, csrfile_uart_vrXmitBuffer_2$EN;

  // register csrfile_uart_vrXmitBuffer_3
  reg csrfile_uart_vrXmitBuffer_3;
  wire csrfile_uart_vrXmitBuffer_3$D_IN, csrfile_uart_vrXmitBuffer_3$EN;

  // register csrfile_uart_vrXmitBuffer_4
  reg csrfile_uart_vrXmitBuffer_4;
  wire csrfile_uart_vrXmitBuffer_4$D_IN, csrfile_uart_vrXmitBuffer_4$EN;

  // register csrfile_uart_vrXmitBuffer_5
  reg csrfile_uart_vrXmitBuffer_5;
  wire csrfile_uart_vrXmitBuffer_5$D_IN, csrfile_uart_vrXmitBuffer_5$EN;

  // register csrfile_uart_vrXmitBuffer_6
  reg csrfile_uart_vrXmitBuffer_6;
  wire csrfile_uart_vrXmitBuffer_6$D_IN, csrfile_uart_vrXmitBuffer_6$EN;

  // register csrfile_uart_vrXmitBuffer_7
  reg csrfile_uart_vrXmitBuffer_7;
  wire csrfile_uart_vrXmitBuffer_7$D_IN, csrfile_uart_vrXmitBuffer_7$EN;

  // register execute_rg_last_exec_pc
  reg [31 : 0] execute_rg_last_exec_pc;
  wire [31 : 0] execute_rg_last_exec_pc$D_IN;
  wire execute_rg_last_exec_pc$EN;

  // register f_dmem_reqs_rv
  reg [110 : 0] f_dmem_reqs_rv;
  wire [110 : 0] f_dmem_reqs_rv$D_IN;
  wire f_dmem_reqs_rv$EN;

  // register f_dmem_rsps_rv
  reg [58 : 0] f_dmem_rsps_rv;
  wire [58 : 0] f_dmem_rsps_rv$D_IN;
  wire f_dmem_rsps_rv$EN;

  // register f_ex_wb_rv
  reg [152 : 0] f_ex_wb_rv;
  wire [152 : 0] f_ex_wb_rv$D_IN;
  wire f_ex_wb_rv$EN;

  // register f_if_ex_rv
  reg [71 : 0] f_if_ex_rv;
  wire [71 : 0] f_if_ex_rv$D_IN;
  wire f_if_ex_rv$EN;

  // register fetch_icache_f_cpu_rsps_rv
  reg [66 : 0] fetch_icache_f_cpu_rsps_rv;
  wire [66 : 0] fetch_icache_f_cpu_rsps_rv$D_IN;
  wire fetch_icache_f_cpu_rsps_rv$EN;

  // register fetch_icache_f_imem_reqs_rv
  reg [39 : 0] fetch_icache_f_imem_reqs_rv;
  wire [39 : 0] fetch_icache_f_imem_reqs_rv$D_IN;
  wire fetch_icache_f_imem_reqs_rv$EN;

  // register fetch_icache_rg_imem_state
  reg fetch_icache_rg_imem_state;
  wire fetch_icache_rg_imem_state$D_IN, fetch_icache_rg_imem_state$EN;

  // register fetch_icache_rg_response_valid
  reg fetch_icache_rg_response_valid;
  wire fetch_icache_rg_response_valid$D_IN, fetch_icache_rg_response_valid$EN;

  // register fetch_rg_burst_addr
  reg [31 : 0] fetch_rg_burst_addr;
  wire [31 : 0] fetch_rg_burst_addr$D_IN;
  wire fetch_rg_burst_addr$EN;

  // register fetch_rg_burst_length
  reg [9 : 0] fetch_rg_burst_length;
  wire [9 : 0] fetch_rg_burst_length$D_IN;
  wire fetch_rg_burst_length$EN;

  // register fetch_rg_burst_size
  reg [1 : 0] fetch_rg_burst_size;
  wire [1 : 0] fetch_rg_burst_size$D_IN;
  wire fetch_rg_burst_size$EN;

  // register fetch_rg_fetch_pc
  reg [31 : 0] fetch_rg_fetch_pc;
  reg [31 : 0] fetch_rg_fetch_pc$D_IN;
  wire fetch_rg_fetch_pc$EN;

  // register fetch_rg_imem_state
  reg fetch_rg_imem_state;
  wire fetch_rg_imem_state$D_IN, fetch_rg_imem_state$EN;

  // register fetch_rg_redirect_pc
  reg [32 : 0] fetch_rg_redirect_pc;
  wire [32 : 0] fetch_rg_redirect_pc$D_IN;
  wire fetch_rg_redirect_pc$EN;

  // register fetch_rg_this_pc
  reg [32 : 0] fetch_rg_this_pc;
  wire [32 : 0] fetch_rg_this_pc$D_IN;
  wire fetch_rg_this_pc$EN;

  // register fetch_rg_verbosity
  reg [31 : 0] fetch_rg_verbosity;
  wire [31 : 0] fetch_rg_verbosity$D_IN;
  wire fetch_rg_verbosity$EN;

  // register regfile_rg_count
  reg [4 : 0] regfile_rg_count;
  wire [4 : 0] regfile_rg_count$D_IN;
  wire regfile_rg_count$EN;

  // register regfile_rg_reset_complete
  reg regfile_rg_reset_complete;
  wire regfile_rg_reset_complete$D_IN, regfile_rg_reset_complete$EN;

  // register regfile_rg_reset_init
  reg regfile_rg_reset_init;
  wire regfile_rg_reset_init$D_IN, regfile_rg_reset_init$EN;

  // register rg_cpu_mode
  reg rg_cpu_mode;
  wire rg_cpu_mode$D_IN, rg_cpu_mode$EN;

  // register rg_cpu_state
  reg rg_cpu_state;
  wire rg_cpu_state$D_IN, rg_cpu_state$EN;

  // register rg_dmem_state
  reg rg_dmem_state;
  wire rg_dmem_state$D_IN, rg_dmem_state$EN;

  // register rg_halt_requested
  reg rg_halt_requested;
  wire rg_halt_requested$D_IN, rg_halt_requested$EN;

  // register rg_last_commit_pc
  reg [31 : 0] rg_last_commit_pc;
  wire [31 : 0] rg_last_commit_pc$D_IN;
  wire rg_last_commit_pc$EN;

  // register rg_stop_reason
  reg [3 : 0] rg_stop_reason;
  wire [3 : 0] rg_stop_reason$D_IN;
  wire rg_stop_reason$EN;

  // register rg_stop_requested
  reg rg_stop_requested;
  wire rg_stop_requested$D_IN, rg_stop_requested$EN;

  // register rg_verbosity
  reg [31 : 0] rg_verbosity;
  wire [31 : 0] rg_verbosity$D_IN;
  wire rg_verbosity$EN;

  // register writeback_dcache_f_cpu_rsps_rv
  reg [68 : 0] writeback_dcache_f_cpu_rsps_rv;
  wire [68 : 0] writeback_dcache_f_cpu_rsps_rv$D_IN;
  wire writeback_dcache_f_cpu_rsps_rv$EN;

  // register writeback_dcache_f_dmem_reqs_rv
  reg [297 : 0] writeback_dcache_f_dmem_reqs_rv;
  wire [297 : 0] writeback_dcache_f_dmem_reqs_rv$D_IN;
  wire writeback_dcache_f_dmem_reqs_rv$EN;

  // register writeback_f_dmem_reqs_rv
  reg [110 : 0] writeback_f_dmem_reqs_rv;
  wire [110 : 0] writeback_f_dmem_reqs_rv$D_IN;
  wire writeback_f_dmem_reqs_rv$EN;

  // register writeback_f_dmem_rsps_rv
  reg [58 : 0] writeback_f_dmem_rsps_rv;
  wire [58 : 0] writeback_f_dmem_rsps_rv$D_IN;
  wire writeback_f_dmem_rsps_rv$EN;

  // register writeback_rg_burst_addr
  reg [31 : 0] writeback_rg_burst_addr;
  wire [31 : 0] writeback_rg_burst_addr$D_IN;
  wire writeback_rg_burst_addr$EN;

  // register writeback_rg_burst_count
  reg [9 : 0] writeback_rg_burst_count;
  reg [9 : 0] writeback_rg_burst_count$D_IN;
  wire writeback_rg_burst_count$EN;

  // register writeback_rg_burst_length
  reg [9 : 0] writeback_rg_burst_length;
  wire [9 : 0] writeback_rg_burst_length$D_IN;
  wire writeback_rg_burst_length$EN;

  // register writeback_rg_burst_size
  reg [1 : 0] writeback_rg_burst_size;
  wire [1 : 0] writeback_rg_burst_size$D_IN;
  wire writeback_rg_burst_size$EN;

  // register writeback_rg_data_line
  reg [255 : 0] writeback_rg_data_line;
  wire [255 : 0] writeback_rg_data_line$D_IN;
  wire writeback_rg_data_line$EN;

  // register writeback_rg_dmem_state
  reg writeback_rg_dmem_state;
  wire writeback_rg_dmem_state$D_IN, writeback_rg_dmem_state$EN;

  // register writeback_rg_verbosity
  reg [31 : 0] writeback_rg_verbosity;
  wire [31 : 0] writeback_rg_verbosity$D_IN;
  wire writeback_rg_verbosity$EN;

  // ports of submodule _unnamed_
  reg [31 : 0] _unnamed_$D_IN;
  reg [4 : 0] _unnamed_$ADDR_IN;
  wire [31 : 0] _unnamed_$D_OUT_1, _unnamed_$D_OUT_2;
  wire [4 : 0] _unnamed_$ADDR_1,
	       _unnamed_$ADDR_2,
	       _unnamed_$ADDR_3,
	       _unnamed_$ADDR_4,
	       _unnamed_$ADDR_5;
  wire _unnamed_$WE;

  // ports of submodule csrfile_uart_baudGen_rBaudCounter
  wire [15 : 0] csrfile_uart_baudGen_rBaudCounter$DATA_A,
		csrfile_uart_baudGen_rBaudCounter$DATA_B,
		csrfile_uart_baudGen_rBaudCounter$DATA_C,
		csrfile_uart_baudGen_rBaudCounter$DATA_F,
		csrfile_uart_baudGen_rBaudCounter$Q_OUT;
  wire csrfile_uart_baudGen_rBaudCounter$ADDA,
       csrfile_uart_baudGen_rBaudCounter$ADDB,
       csrfile_uart_baudGen_rBaudCounter$SETC,
       csrfile_uart_baudGen_rBaudCounter$SETF;

  // ports of submodule csrfile_uart_baudGen_rBaudTickCounter
  wire [2 : 0] csrfile_uart_baudGen_rBaudTickCounter$DATA_A,
	       csrfile_uart_baudGen_rBaudTickCounter$DATA_B,
	       csrfile_uart_baudGen_rBaudTickCounter$DATA_C,
	       csrfile_uart_baudGen_rBaudTickCounter$DATA_F,
	       csrfile_uart_baudGen_rBaudTickCounter$Q_OUT;
  wire csrfile_uart_baudGen_rBaudTickCounter$ADDA,
       csrfile_uart_baudGen_rBaudTickCounter$ADDB,
       csrfile_uart_baudGen_rBaudTickCounter$SETC,
       csrfile_uart_baudGen_rBaudTickCounter$SETF;

  // ports of submodule csrfile_uart_fifoRecv
  wire [7 : 0] csrfile_uart_fifoRecv$D_IN, csrfile_uart_fifoRecv$D_OUT;
  wire csrfile_uart_fifoRecv$CLR,
       csrfile_uart_fifoRecv$DEQ,
       csrfile_uart_fifoRecv$EMPTY_N,
       csrfile_uart_fifoRecv$ENQ;

  // ports of submodule csrfile_uart_fifoXmit
  wire [7 : 0] csrfile_uart_fifoXmit$D_IN, csrfile_uart_fifoXmit$D_OUT;
  wire csrfile_uart_fifoXmit$CLR,
       csrfile_uart_fifoXmit$DEQ,
       csrfile_uart_fifoXmit$EMPTY_N,
       csrfile_uart_fifoXmit$ENQ,
       csrfile_uart_fifoXmit$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_csrfile_rl_print_csrs,
       CAN_FIRE_RL_csrfile_rl_update_counters,
       CAN_FIRE_RL_csrfile_send_transimission_data0,
       CAN_FIRE_RL_csrfile_uart_baudGen_assert_2x_baud_tick,
       CAN_FIRE_RL_csrfile_uart_baudGen_baud_count_wire,
       CAN_FIRE_RL_csrfile_uart_baudGen_baud_tick_count_wire,
       CAN_FIRE_RL_csrfile_uart_baudGen_count_baudtick_16x,
       CAN_FIRE_RL_csrfile_uart_baud_generator_clock_enable,
       CAN_FIRE_RL_csrfile_uart_fifoRecv__updateLevelCounter,
       CAN_FIRE_RL_csrfile_uart_fifoXmit__updateLevelCounter,
       CAN_FIRE_RL_csrfile_uart_receive_bit_cell_time_counter,
       CAN_FIRE_RL_csrfile_uart_receive_bit_counter,
       CAN_FIRE_RL_csrfile_uart_receive_buffer_shift,
       CAN_FIRE_RL_csrfile_uart_receive_find_center_of_bit_cell,
       CAN_FIRE_RL_csrfile_uart_receive_parity_bit,
       CAN_FIRE_RL_csrfile_uart_receive_sample_pin,
       CAN_FIRE_RL_csrfile_uart_receive_stop_first_bit,
       CAN_FIRE_RL_csrfile_uart_receive_stop_last_bit,
       CAN_FIRE_RL_csrfile_uart_receive_wait_bit_cell_time_for_sample,
       CAN_FIRE_RL_csrfile_uart_receive_wait_for_start_bit,
       CAN_FIRE_RL_csrfile_uart_rx_connectionif,
       CAN_FIRE_RL_csrfile_uart_transmit_bit_cell_time_counter,
       CAN_FIRE_RL_csrfile_uart_transmit_bit_counter,
       CAN_FIRE_RL_csrfile_uart_transmit_buffer_load,
       CAN_FIRE_RL_csrfile_uart_transmit_buffer_shift,
       CAN_FIRE_RL_csrfile_uart_transmit_send_parity_bit,
       CAN_FIRE_RL_csrfile_uart_transmit_send_start_bit,
       CAN_FIRE_RL_csrfile_uart_transmit_send_stop_bit,
       CAN_FIRE_RL_csrfile_uart_transmit_send_stop_bit1_5,
       CAN_FIRE_RL_csrfile_uart_transmit_send_stop_bit2,
       CAN_FIRE_RL_csrfile_uart_transmit_shift_next_bit,
       CAN_FIRE_RL_csrfile_uart_transmit_wait_1_bit_cell_time,
       CAN_FIRE_RL_csrfile_uart_transmit_wait_for_start_command,
       CAN_FIRE_RL_csrfile_uart_tx_connection,
       CAN_FIRE_RL_execute_rl_handle_execute_requests,
       CAN_FIRE_RL_fetch_icache_rl_discard_stale_responses,
       CAN_FIRE_RL_fetch_rl_handle_redirections,
       CAN_FIRE_RL_fetch_rl_request_icache,
       CAN_FIRE_RL_regfile_rl_reset,
       CAN_FIRE_RL_regfile_rl_signal_reset_completion,
       CAN_FIRE_RL_rl_count_cycles,
       CAN_FIRE_RL_rl_fetch_request,
       CAN_FIRE_RL_rl_fetch_response,
       CAN_FIRE_RL_rl_flush,
       CAN_FIRE_RL_rl_handle_hazards,
       CAN_FIRE_RL_rl_read_execute,
       CAN_FIRE_RL_rl_stop_cpu,
       CAN_FIRE_RL_rl_update_execute,
       CAN_FIRE_RL_rl_write_back_request,
       CAN_FIRE_RL_rl_write_back_response,
       CAN_FIRE_RL_writeback_rl_data_memory_response,
       CAN_FIRE_RL_writeback_rl_follow_up_store_request,
       CAN_FIRE_RL_writeback_rl_handle_memory_request,
       CAN_FIRE_RL_writeback_rl_handle_memory_response,
       CAN_FIRE_RL_writeback_rl_handle_traps,
       CAN_FIRE_RL_writeback_rl_handle_writeback_requests,
       CAN_FIRE_debug_ifc_req_read_memW,
       CAN_FIRE_debug_ifc_reset,
       CAN_FIRE_debug_ifc_reset_complete,
       CAN_FIRE_debug_ifc_rsp_read_memW,
       CAN_FIRE_debug_ifc_run_continue,
       CAN_FIRE_debug_ifc_run_step,
       CAN_FIRE_debug_ifc_set_verbosity,
       CAN_FIRE_debug_ifc_stop,
       CAN_FIRE_debug_ifc_write_gpr,
       CAN_FIRE_debug_ifc_write_memW,
       CAN_FIRE_debug_ifc_write_pc,
       CAN_FIRE_dmem_ifc_rx_put,
       CAN_FIRE_dmem_ifc_tx_get,
       CAN_FIRE_imem_ifc_rx_put,
       CAN_FIRE_imem_ifc_tx_get,
       CAN_FIRE_interrupt_ifc_external,
       CAN_FIRE_interrupt_ifc_software,
       CAN_FIRE_interrupt_ifc_timer,
       CAN_FIRE_uart_ifc_sin,
       CAN_FIRE_write_counter_time,
       WILL_FIRE_RL_csrfile_rl_print_csrs,
       WILL_FIRE_RL_csrfile_rl_update_counters,
       WILL_FIRE_RL_csrfile_send_transimission_data0,
       WILL_FIRE_RL_csrfile_uart_baudGen_assert_2x_baud_tick,
       WILL_FIRE_RL_csrfile_uart_baudGen_baud_count_wire,
       WILL_FIRE_RL_csrfile_uart_baudGen_baud_tick_count_wire,
       WILL_FIRE_RL_csrfile_uart_baudGen_count_baudtick_16x,
       WILL_FIRE_RL_csrfile_uart_baud_generator_clock_enable,
       WILL_FIRE_RL_csrfile_uart_fifoRecv__updateLevelCounter,
       WILL_FIRE_RL_csrfile_uart_fifoXmit__updateLevelCounter,
       WILL_FIRE_RL_csrfile_uart_receive_bit_cell_time_counter,
       WILL_FIRE_RL_csrfile_uart_receive_bit_counter,
       WILL_FIRE_RL_csrfile_uart_receive_buffer_shift,
       WILL_FIRE_RL_csrfile_uart_receive_find_center_of_bit_cell,
       WILL_FIRE_RL_csrfile_uart_receive_parity_bit,
       WILL_FIRE_RL_csrfile_uart_receive_sample_pin,
       WILL_FIRE_RL_csrfile_uart_receive_stop_first_bit,
       WILL_FIRE_RL_csrfile_uart_receive_stop_last_bit,
       WILL_FIRE_RL_csrfile_uart_receive_wait_bit_cell_time_for_sample,
       WILL_FIRE_RL_csrfile_uart_receive_wait_for_start_bit,
       WILL_FIRE_RL_csrfile_uart_rx_connectionif,
       WILL_FIRE_RL_csrfile_uart_transmit_bit_cell_time_counter,
       WILL_FIRE_RL_csrfile_uart_transmit_bit_counter,
       WILL_FIRE_RL_csrfile_uart_transmit_buffer_load,
       WILL_FIRE_RL_csrfile_uart_transmit_buffer_shift,
       WILL_FIRE_RL_csrfile_uart_transmit_send_parity_bit,
       WILL_FIRE_RL_csrfile_uart_transmit_send_start_bit,
       WILL_FIRE_RL_csrfile_uart_transmit_send_stop_bit,
       WILL_FIRE_RL_csrfile_uart_transmit_send_stop_bit1_5,
       WILL_FIRE_RL_csrfile_uart_transmit_send_stop_bit2,
       WILL_FIRE_RL_csrfile_uart_transmit_shift_next_bit,
       WILL_FIRE_RL_csrfile_uart_transmit_wait_1_bit_cell_time,
       WILL_FIRE_RL_csrfile_uart_transmit_wait_for_start_command,
       WILL_FIRE_RL_csrfile_uart_tx_connection,
       WILL_FIRE_RL_execute_rl_handle_execute_requests,
       WILL_FIRE_RL_fetch_icache_rl_discard_stale_responses,
       WILL_FIRE_RL_fetch_rl_handle_redirections,
       WILL_FIRE_RL_fetch_rl_request_icache,
       WILL_FIRE_RL_regfile_rl_reset,
       WILL_FIRE_RL_regfile_rl_signal_reset_completion,
       WILL_FIRE_RL_rl_count_cycles,
       WILL_FIRE_RL_rl_fetch_request,
       WILL_FIRE_RL_rl_fetch_response,
       WILL_FIRE_RL_rl_flush,
       WILL_FIRE_RL_rl_handle_hazards,
       WILL_FIRE_RL_rl_read_execute,
       WILL_FIRE_RL_rl_stop_cpu,
       WILL_FIRE_RL_rl_update_execute,
       WILL_FIRE_RL_rl_write_back_request,
       WILL_FIRE_RL_rl_write_back_response,
       WILL_FIRE_RL_writeback_rl_data_memory_response,
       WILL_FIRE_RL_writeback_rl_follow_up_store_request,
       WILL_FIRE_RL_writeback_rl_handle_memory_request,
       WILL_FIRE_RL_writeback_rl_handle_memory_response,
       WILL_FIRE_RL_writeback_rl_handle_traps,
       WILL_FIRE_RL_writeback_rl_handle_writeback_requests,
       WILL_FIRE_debug_ifc_req_read_memW,
       WILL_FIRE_debug_ifc_reset,
       WILL_FIRE_debug_ifc_reset_complete,
       WILL_FIRE_debug_ifc_rsp_read_memW,
       WILL_FIRE_debug_ifc_run_continue,
       WILL_FIRE_debug_ifc_run_step,
       WILL_FIRE_debug_ifc_set_verbosity,
       WILL_FIRE_debug_ifc_stop,
       WILL_FIRE_debug_ifc_write_gpr,
       WILL_FIRE_debug_ifc_write_memW,
       WILL_FIRE_debug_ifc_write_pc,
       WILL_FIRE_dmem_ifc_rx_put,
       WILL_FIRE_dmem_ifc_tx_get,
       WILL_FIRE_imem_ifc_rx_put,
       WILL_FIRE_imem_ifc_tx_get,
       WILL_FIRE_interrupt_ifc_external,
       WILL_FIRE_interrupt_ifc_software,
       WILL_FIRE_interrupt_ifc_timer,
       WILL_FIRE_uart_ifc_sin,
       WILL_FIRE_write_counter_time;

  // inputs to muxes for submodule ports
  reg [31 : 0] MUX_fetch_rg_burst_addr$write_1__VAL_1,
	       MUX_writeback_rg_burst_addr$write_1__VAL_1;
  reg [2 : 0] MUX_csrfile_uart_rRecvState$write_1__VAL_3;
  wire [255 : 0] MUX_writeback_rg_data_line$write_1__VAL_1,
		 MUX_writeback_rg_data_line$write_1__VAL_2;
  wire [152 : 0] MUX_f_ex_wb_rv$port1__write_1__VAL_1,
		 MUX_f_ex_wb_rv$port1__write_1__VAL_2;
  wire [110 : 0] MUX_f_dmem_reqs_rv$port0__write_1__VAL_1,
		 MUX_f_dmem_reqs_rv$port0__write_1__VAL_2,
		 MUX_writeback_f_dmem_reqs_rv$port0__write_1__VAL_1,
		 MUX_writeback_f_dmem_reqs_rv$port0__write_1__VAL_2;
  wire [73 : 0] MUX_writeback_wr_response$wset_1__VAL_1,
		MUX_writeback_wr_response$wset_1__VAL_2,
		MUX_writeback_wr_response$wset_1__VAL_3;
  wire [66 : 0] MUX_fetch_icache_f_cpu_rsps_rv$port1__write_1__VAL_1,
		MUX_fetch_icache_f_cpu_rsps_rv$port1__write_1__VAL_2;
  wire [63 : 0] MUX_counter_cycle$write_1__VAL_1,
		MUX_counter_instret$write_1__VAL_1;
  wire [37 : 0] MUX_writeback_wr_trap_data$wset_1__VAL_1,
		MUX_writeback_wr_trap_data$wset_1__VAL_2;
  wire [31 : 0] MUX_fetch_rg_fetch_pc$write_1__VAL_2;
  wire [9 : 0] MUX_writeback_rg_burst_count$write_1__VAL_2;
  wire [4 : 0] MUX_regfile_rg_count$write_1__VAL_1;
  wire [2 : 0] MUX_csrfile_uart_rRecvState$write_1__VAL_1,
	       MUX_csrfile_uart_rRecvState$write_1__VAL_2,
	       MUX_csrfile_uart_rRecvState$write_1__VAL_4,
	       MUX_csrfile_uart_rXmitState$write_1__VAL_1,
	       MUX_csrfile_uart_rXmitState$write_1__VAL_2,
	       MUX_csrfile_uart_rXmitState$write_1__VAL_3,
	       MUX_csrfile_uart_rXmitState$write_1__VAL_4,
	       MUX_csrfile_uart_rXmitState$write_1__VAL_5,
	       MUX_csrfile_uart_rXmitState$write_1__VAL_6,
	       MUX_csrfile_uart_rXmitState$write_1__VAL_7;
  wire MUX__unnamed_$upd_1__SEL_1,
       MUX__unnamed_$upd_1__SEL_2,
       MUX__unnamed_$upd_1__SEL_3,
       MUX_counter_instret$write_1__SEL_1,
       MUX_csrfile_uart_rRecvState$write_1__SEL_6,
       MUX_csrfile_uart_rXmitDataOut$write_1__SEL_1,
       MUX_csrfile_uart_rXmitDataOut$write_1__SEL_2,
       MUX_csrfile_uart_rXmitDataOut$write_1__SEL_3,
       MUX_fetch_icache_f_cpu_rsps_rv$port1__write_1__SEL_1,
       MUX_fetch_rg_imem_state$port1__write_1__SEL_1,
       MUX_writeback_rg_burst_count$write_1__SEL_3,
       MUX_writeback_rg_data_line$write_1__SEL_1,
       MUX_writeback_wr_response$wset_1__SEL_2,
       MUX_writeback_wr_response$wset_1__SEL_3,
       MUX_writeback_wr_trap_data$wset_1__SEL_1,
       MUX_writeback_wr_trap_data$wset_1__SEL_2;

  // remaining internal signals
  reg [119 : 0] CASE_execute_wr_requestwget_BITS_123_TO_121_0_ETC__q22,
		IF_execute_wr_request_wget__42_BITS_123_TO_121_ETC___d331,
		IF_execute_wr_request_wget__42_BITS_123_TO_121_ETC___d352,
		IF_execute_wr_request_wget__42_BITS_123_TO_121_ETC___d482,
		IF_execute_wr_request_wget__42_BITS_237_TO_231_ETC___d504;
  reg [115 : 0] CASE_execute_wr_responsewget_BITS_118_TO_116__ETC__q24,
		CASE_f_ex_wb_rv_BITS_118_TO_116_0_f_ex_wb_rv_B_ETC__q4;
  reg [64 : 0] ab__h26526;
  reg [63 : 0] v__h100070,
	       v__h100571,
	       v__h101500,
	       v__h104119,
	       v__h105076,
	       v__h106008,
	       v__h20709,
	       v__h30385,
	       v__h33794,
	       v__h33879,
	       v__h404,
	       v__h525,
	       v__h81213,
	       v__h81673,
	       v__h81791,
	       v__h81884,
	       v__h82351,
	       v__h82633,
	       v__h84672,
	       v__h92930,
	       v__h93186,
	       v__h97217,
	       v__h98247,
	       v__h99118,
	       v__h99356,
	       v__h99453,
	       v__h99537;
  reg [32 : 0] CASE_writeback_wr_requestwget_BITS_118_TO_116_ETC__q10,
	       IF_writeback_wr_request_wget__58_BITS_118_TO_1_ETC___d1432;
  reg [31 : 0] IF_fetch_rg_burst_size_read__115_EQ_0_120_THEN_ETC___d3139,
	       IF_fetch_rg_burst_size_read__115_EQ_0_120_THEN_ETC___d3152,
	       IF_writeback_rg_burst_size_read__718_EQ_0_723__ETC___d2742,
	       IF_writeback_rg_burst_size_read__718_EQ_0_723__ETC___d2755,
	       _theResult____h92845,
	       _theResult___fst_data__h25375,
	       data__h24666,
	       data__h30002,
	       x1_avValue_snd__h24003,
	       y__h50048;
  reg [4 : 0] CASE_writeback_wr_requestwget_BITS_118_TO_116_ETC__q9,
	      dest__h104154;
  reg [3 : 0] CASE_f_ex_wb_rv_BITS_3_TO_0_0_f_ex_wb_rv_BITS__ETC__q2,
	      CASE_f_if_ex_rv_BITS_3_TO_0_0_f_if_ex_rv_BITS__ETC__q1,
	      CASE_writeback_wr_requestwget_BITS_3_TO_0_0_w_ETC__q8,
	      y__h93579;
  reg [2 : 0] CASE_execute_wr_responsewget_BITS_118_TO_116__ETC__q23,
	      CASE_f_ex_wb_rv_BITS_118_TO_116_0_f_ex_wb_rv_B_ETC__q3,
	      CASE_writeback_wr_requestwget_BITS_118_TO_116_ETC__q11;
  reg [1 : 0] IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1924,
	      _theResult___fst_burst_size__h25379,
	      _theResult___snd_burst_size__h24947;
  reg IF_execute_wr_request_wget__42_BITS_123_TO_121_ETC___d369,
      IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1057,
      IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1115,
      IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1119,
      IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1124,
      IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1174,
      IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1180,
      IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1211,
      IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1214,
      IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1414,
      IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1678,
      IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1689,
      IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1935,
      IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1946,
      IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d971;
  wire [255 : 0] v_data_line__h33552;
  wire [127 : 0] _0_CONCAT_IF_execute_wrapper_mul_1_arg_whas__57_ETC___d667;
  wire [119 : 0] IF_execute_wr_request_wget__42_BITS_123_TO_121_ETC___d304,
		 _10_CONCAT_DONTCARE_CONCAT_IF_execute_wr_reques_ETC___d381;
  wire [64 : 0] IF_execute_wr_request_wget__42_BIT_96_42_THEN__ETC___d652,
		ab__h23248,
		ab__h27407,
		ab__h27884;
  wire [63 : 0] _in__h28944,
		ab__h23091,
		ab__h23632,
		ab__h23771,
		ab__h23910,
		execute_wr_requestwget_BITS_96_TO_33__q18,
		in8944_SRL_ab4499_BITS_4_TO_0__q20,
		res___1__h26836,
		v__h26656;
  wire [37 : 0] execute_wr_request_wget__42_BITS_220_TO_216_00_ETC___d387;
  wire [36 : 0] ab__h24155, ab__h24314, ab__h24499;
  wire [31 : 0] IF_IF_execute_wrapper_mod_1_arg_whas__13_THEN__ETC___d725,
		IF_IF_execute_wrapper_mod_1_arg_whas__13_THEN__ETC___d730,
		IF_NOT_writeback_wr_request_wget__58_BITS_11_T_ETC___d1365,
		IF_execute_wrapper_mod_1_arg_whas__13_THEN_exe_ETC___d733,
		IF_writeback_wr_request_wget__58_BITS_11_TO_0__ETC___d1427,
		_theResult___fst__h101419,
		_theResult___fst_addr__h25374,
		_theResult___snd__h101420,
		_theResult___snd_addr__h24942,
		ab4499_BITS_36_TO_5__q19,
		ab7884_BITS_64_TO_33__q21,
		csr_medeleg__read9986_SRL_y3579__q13,
		csr_medeleg__read__h39986,
		csr_mideleg__read2153_SRL_y3579__q12,
		csr_mideleg__read__h32153,
		csr_mie__read__h32101,
		csr_mip__read__h31985,
		csr_mstatus__read__h39917,
		csr_mtvec__read__h40199,
		csr_mucounteren__read__h41834,
		csr_mxuartrx__read__h42140,
		csr_mxuarttx__read__h41986,
		csr_uie__read__h39128,
		csr_uip__read__h39312,
		csr_ustatus__read__h39073,
		csr_utvec__read__h39143,
		data__h104552,
		iFields_imm_U__h100604,
		lui_imm__h26229,
		new_addr___1__h105413,
		new_addr___1__h97562,
		res___1__h27695,
		res__h23500,
		res__h23511,
		res__h27631,
		sx_imm_B__h22655,
		sx_imm_I__h22653,
		sx_imm_J__h22657,
		sx_imm_S__h22654,
		temp_data__h92838,
		temp_data__h92984,
		temp_data__h93053,
		temp_data__h93074,
		this_pc__h99173,
		v1__h100018,
		v2__h100019,
		v__h23364,
		v__h27270,
		v__h27295,
		v__h27538,
		v__h27563,
		v__h27748,
		v__h27769,
		v__h28082,
		v__h28103,
		v__h28358,
		v__h28477,
		v__h28616,
		v__h28758,
		v__h29433,
		v__h29552,
		v__h29671,
		v__h98899,
		writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554,
		writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558,
		writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542,
		writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547,
		x__h101375,
		x__h101440,
		x__h105430,
		x__h26686,
		x__h26712,
		x__h28264,
		x__h30119,
		x__h97579,
		y__h105432,
		y__h28265,
		y__h57256,
		y__h97581;
  wire [30 : 0] cause_code__h93947,
		r1__read__h31987,
		r1__read__h32103,
		r1__read__h42438,
		r1__read__h42982,
		r1__read__h43326,
		r1__read__h43631,
		r1__read__h44847;
  wire [29 : 0] IF_csrfile_rg_prv_port1__read__590_EQ_0_591_AN_ETC___d2654,
		r1__read__h31989,
		r1__read__h32105,
		r1__read__h42450,
		r1__read__h42994,
		r1__read__h43338,
		r1__read__h43643,
		r1__read__h44859;
  wire [28 : 0] r1__read__h31991,
		r1__read__h32107,
		r1__read__h42462,
		r1__read__h43006,
		r1__read__h43350,
		r1__read__h43655;
  wire [27 : 0] r1__read__h31993,
		r1__read__h32109,
		r1__read__h42474,
		r1__read__h43018,
		r1__read__h43362,
		r1__read__h43667;
  wire [26 : 0] r1__read__h31995,
		r1__read__h32111,
		r1__read__h42486,
		r1__read__h43030,
		r1__read__h43374,
		r1__read__h43679;
  wire [25 : 0] r1__read__h31997,
		r1__read__h32113,
		r1__read__h42498,
		r1__read__h43042,
		r1__read__h43386,
		r1__read__h43691;
  wire [24 : 0] r1__read__h31999,
		r1__read__h32115,
		r1__read__h42510,
		r1__read__h43054,
		r1__read__h43398,
		r1__read__h43703;
  wire [23 : 0] r1__read__h32001,
		r1__read__h32117,
		r1__read__h42522,
		r1__read__h43066,
		r1__read__h43410,
		r1__read__h43715,
		r1__read__h44943,
		temp_data2838_BITS_23_TO_0__q7;
  wire [22 : 0] r1__read__h32003,
		r1__read__h32119,
		r1__read__h42534,
		r1__read__h43727;
  wire [21 : 0] r1__read__h32005, r1__read__h32121, r1__read__h42546;
  wire [20 : 0] execute_wr_requestwget_BITS_144_TO_124__q17,
		iFields_imm_J__h100605,
		r1__read__h32007,
		r1__read__h32123,
		r1__read__h42558,
		r1__read__h43739;
  wire [18 : 0] r1__read__h42570, r1__read__h43751;
  wire [16 : 0] r1__read__h42582, r1__read__h43763;
  wire [15 : 0] r1__read__h42594, temp_data2838_BITS_15_TO_0__q6;
  wire [14 : 0] r1__read__h42606, r1__read__h43775, x__h34002;
  wire [13 : 0] r1__read__h42618, r1__read__h43787;
  wire [12 : 0] execute_wr_requestwget_BITS_189_TO_177__q16,
		iFields_imm_B__h100603,
		r1__read__h43799;
  wire [11 : 0] execute_wr_requestwget_BITS_201_TO_190__q15,
		execute_wr_requestwget_BITS_213_TO_202__q14,
		pending_interrupts__h31885,
		pending_interrupts__h31890,
		pending_machine_interrupts__h31886,
		pending_user_interrupts__h31888,
		r1__read__h43811,
		x__h100915,
		y__h31928;
  wire [9 : 0] r1__read__h42630, x__h24026;
  wire [7 : 0] csrfile_wr_meip_whas__78_AND_csrfile_wr_meip_w_ETC___d997,
	       r1__read__h43823,
	       temp_data2838_BITS_7_TO_0__q5;
  wire [4 : 0] dest__h104301, r1__read__h42642, x__h93006;
  wire [3 : 0] IF_IF_csrfile_rg_mie_port0__read__76_OR_NOT_cs_ETC___d1154,
	       IF_IF_csrfile_rg_mie_port0__read__76_OR_NOT_cs_ETC___d1155,
	       IF_IF_writeback_wr_request_wget__58_BITS_88_TO_ETC___d1127,
	       IF_NOT_writeback_wr_request_wget__58_BITS_11_T_ETC___d1129,
	       x__h10437,
	       x__h12252,
	       x__h12278,
	       x__h8796;
  wire [2 : 0] r1__read__h43835,
	       spliced_bits__h105443,
	       spliced_bits__h105514,
	       spliced_bits__h105587,
	       spliced_bits__h97592,
	       spliced_bits__h97663,
	       spliced_bits__h97736;
  wire [1 : 0] memReq_burst_size__h96473,
	       spliced_bits__h105665,
	       spliced_bits__h105736,
	       spliced_bits__h105809,
	       spliced_bits__h97814,
	       spliced_bits__h97885,
	       spliced_bits__h97958,
	       v_transfer_size__h33554,
	       x__h96177;
  wire IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d1463,
       IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d1469,
       IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d1474,
       IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d1479,
       IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d1489,
       IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d1499,
       IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d1537,
       IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d1714,
       IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d1919,
       IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d2020,
       IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d2421,
       IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d2493,
       IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d2526,
       IF_writeback_wr_trap_data_wget__592_BIT_4_593__ETC___d2623,
       IF_writeback_wr_trap_data_wget__592_BIT_4_593__ETC___d2642,
       NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d1732,
       NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d1764,
       NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d1790,
       NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d1811,
       NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d1832,
       NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d1884,
       NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d1905,
       NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d1953,
       NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d1985,
       NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2006,
       NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2071,
       NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2092,
       NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2113,
       NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2134,
       NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2155,
       NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2176,
       NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2197,
       NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2218,
       NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2239,
       NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2260,
       NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2281,
       NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2302,
       NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2323,
       NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2344,
       NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2365,
       NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2386,
       NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2407,
       NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2474,
       NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2479,
       NOT_csrfile_rg_prv_port1__read__590_EQ_0_591_6_ETC___d2644,
       NOT_execute_wr_verbosity_wget__44_SLE_2_45___d746,
       NOT_fetch_rg_verbosity_read__37_SLE_1_795___d2796,
       NOT_fetch_rg_verbosity_read__37_SLE_3_38___d239,
       NOT_rg_verbosity_878_SLE_1_879___d2880,
       NOT_writeback_rg_verbosity_read__438_SLE_3_689___d2690,
       NOT_writeback_wr_request_wget__58_BITS_118_TO__ETC___d1185,
       NOT_writeback_wr_request_wget__58_BITS_11_TO_0_ETC___d1058,
       NOT_writeback_wr_request_wget__58_BITS_11_TO_0_ETC___d1413,
       NOT_writeback_wr_request_wget__58_BITS_11_TO_0_ETC___d961,
       NOT_writeback_wr_request_wget__58_BITS_11_TO_0_ETC___d970,
       NOT_writeback_wr_request_wget__58_BITS_11_TO_0_ETC___d972,
       NOT_writeback_wr_request_wget__58_BIT_119_59_1_ETC___d1509,
       _dfoo1,
       _dfoo5,
       _dfoo7,
       _dfoo9,
       _dor2csrfile_uart_pwXmitCellCountReset$EN_wset,
       csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953,
       csrfile_rg_prv_port1__read__590_EQ_0_591_AND_I_ETC___d2635,
       csrfile_uart_baudGen_rBaudCounter_value__6_PLU_ETC___d44,
       execute_wr_request_wget__42_BITS_96_TO_65_13_E_ETC___d359,
       execute_wr_request_wget__42_BITS_96_TO_65_13_S_ETC___d361,
       execute_wr_request_wget__42_BITS_96_TO_65_13_U_ETC___d363,
       fetch_rg_imem_state_port0__read__798_AND_NOT_f_ETC___d2805,
       r__h32010,
       r__h32029,
       r__h32045,
       r__h42655,
       wr_forwarded_data_wget__919_BITS_36_TO_32_922__ETC___d2923,
       wr_forwarded_data_wget__919_BITS_36_TO_32_922__ETC___d2930,
       writeback_rg_verbosity_read__438_SLE_1___d1439,
       writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1113,
       writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1173,
       writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1175,
       writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1179,
       writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1515,
       writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1694,
       writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1700,
       writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1857,
       writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1863,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1529,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1533,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1706,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1710,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1738,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1742,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1770,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1774,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1796,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1800,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1817,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1821,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1838,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1842,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1869,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1873,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1890,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1894,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1911,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1915,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1959,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1963,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1991,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1995,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2012,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2016,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2077,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2081,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2098,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2102,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2119,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2123,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2140,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2144,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2161,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2165,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2182,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2186,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2203,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2207,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2224,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2228,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2245,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2249,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2266,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2270,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2287,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2291,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2308,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2312,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2329,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2333,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2350,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2354,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2371,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2375,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2392,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2396,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2413,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2417,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2485,
       writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2489,
       writeback_wr_request_wget__58_BITS_95_TO_89_62_ETC___d1491,
       writeback_wr_request_wget__58_BITS_95_TO_89_62_ETC___d1503,
       writeback_wr_request_wget__58_BITS_95_TO_89_62_ETC___d2506,
       writeback_wr_request_wget__58_BITS_95_TO_89_62_ETC___d2513,
       writeback_wr_request_wget__58_BIT_119_59_OR_wr_ETC___d1020,
       x__h105966,
       x__h98186,
       x_port1__read__h95097,
       z__h13666,
       z__h13673,
       z__h13680,
       z__h13687,
       z__h13694,
       z__h13701;

  // actionvalue method imem_ifc_tx_get
  assign imem_ifc_tx_get =
	     { 5'd0,
	       fetch_icache_f_imem_reqs_rv[38:7],
	       37'd0,
	       fetch_icache_f_imem_reqs_rv[6:2],
	       31'h7B800000 } ;
  assign RDY_imem_ifc_tx_get = fetch_icache_f_imem_reqs_rv[39] ;
  assign CAN_FIRE_imem_ifc_tx_get = fetch_icache_f_imem_reqs_rv[39] ;
  assign WILL_FIRE_imem_ifc_tx_get = EN_imem_ifc_tx_get ;

  // action method imem_ifc_rx_put
  assign RDY_imem_ifc_rx_put = !fetch_icache_f_cpu_rsps_rv$port1__read[66] ;
  assign CAN_FIRE_imem_ifc_rx_put =
	     !fetch_icache_f_cpu_rsps_rv$port1__read[66] ;
  assign WILL_FIRE_imem_ifc_rx_put = EN_imem_ifc_rx_put ;

  // actionvalue method dmem_ifc_tx_get
  assign dmem_ifc_tx_get = writeback_f_dmem_reqs_rv$port1__read[109:0] ;
  assign RDY_dmem_ifc_tx_get = writeback_f_dmem_reqs_rv$port1__read[110] ;
  assign CAN_FIRE_dmem_ifc_tx_get =
	     writeback_f_dmem_reqs_rv$port1__read[110] ;
  assign WILL_FIRE_dmem_ifc_tx_get = EN_dmem_ifc_tx_get ;

  // action method dmem_ifc_rx_put
  assign RDY_dmem_ifc_rx_put = !writeback_f_dmem_rsps_rv[58] ;
  assign CAN_FIRE_dmem_ifc_rx_put = !writeback_f_dmem_rsps_rv[58] ;
  assign WILL_FIRE_dmem_ifc_rx_put = EN_dmem_ifc_rx_put ;

  // action method interrupt_ifc_timer
  assign RDY_interrupt_ifc_timer = 1'd1 ;
  assign CAN_FIRE_interrupt_ifc_timer = 1'd1 ;
  assign WILL_FIRE_interrupt_ifc_timer = EN_interrupt_ifc_timer ;

  // action method interrupt_ifc_software
  assign RDY_interrupt_ifc_software = 1'd1 ;
  assign CAN_FIRE_interrupt_ifc_software = 1'd1 ;
  assign WILL_FIRE_interrupt_ifc_software = EN_interrupt_ifc_software ;

  // action method interrupt_ifc_external
  assign RDY_interrupt_ifc_external = 1'd1 ;
  assign CAN_FIRE_interrupt_ifc_external = 1'd1 ;
  assign WILL_FIRE_interrupt_ifc_external = EN_interrupt_ifc_external ;

  // action method debug_ifc_reset
  assign RDY_debug_ifc_reset = rg_cpu_state && !regfile_rg_reset_init ;
  assign CAN_FIRE_debug_ifc_reset = rg_cpu_state && !regfile_rg_reset_init ;
  assign WILL_FIRE_debug_ifc_reset = EN_debug_ifc_reset ;

  // actionvalue method debug_ifc_reset_complete
  assign debug_ifc_reset_complete = regfile_rg_reset_complete ;
  assign RDY_debug_ifc_reset_complete =
	     rg_cpu_state && regfile_rg_reset_complete &&
	     !regfile_rg_reset_init ;
  assign CAN_FIRE_debug_ifc_reset_complete =
	     rg_cpu_state && regfile_rg_reset_complete &&
	     !regfile_rg_reset_init ;
  assign WILL_FIRE_debug_ifc_reset_complete = EN_debug_ifc_reset_complete ;

  // action method debug_ifc_run_continue
  assign RDY_debug_ifc_run_continue = RDY_debug_ifc_read_cycle ;
  assign CAN_FIRE_debug_ifc_run_continue = RDY_debug_ifc_read_cycle ;
  assign WILL_FIRE_debug_ifc_run_continue = EN_debug_ifc_run_continue ;

  // action method debug_ifc_run_step
  assign RDY_debug_ifc_run_step = RDY_debug_ifc_read_cycle ;
  assign CAN_FIRE_debug_ifc_run_step = RDY_debug_ifc_read_cycle ;
  assign WILL_FIRE_debug_ifc_run_step = EN_debug_ifc_run_step ;

  // action method debug_ifc_stop
  assign RDY_debug_ifc_stop = 1'd1 ;
  assign CAN_FIRE_debug_ifc_stop = 1'd1 ;
  assign WILL_FIRE_debug_ifc_stop = EN_debug_ifc_stop ;

  // value method debug_ifc_stop_reason
  assign debug_ifc_stop_reason = rg_stop_reason[2:0] ;
  assign RDY_debug_ifc_stop_reason = RDY_debug_ifc_read_cycle ;

  // value method debug_ifc_read_pc
  assign debug_ifc_read_pc = fetch_rg_fetch_pc - 32'd4 ;
  assign RDY_debug_ifc_read_pc = RDY_debug_ifc_read_cycle ;

  // value method debug_ifc_read_exec_pc
  assign debug_ifc_read_exec_pc = rg_last_commit_pc ;
  assign RDY_debug_ifc_read_exec_pc = RDY_debug_ifc_read_cycle ;

  // action method debug_ifc_write_pc
  assign RDY_debug_ifc_write_pc = rg_cpu_state ;
  assign CAN_FIRE_debug_ifc_write_pc = rg_cpu_state ;
  assign WILL_FIRE_debug_ifc_write_pc = EN_debug_ifc_write_pc ;

  // value method debug_ifc_read_gpr
  assign debug_ifc_read_gpr =
	     (debug_ifc_read_gpr_r == 5'd0) ? 32'd0 : _unnamed_$D_OUT_1 ;
  assign RDY_debug_ifc_read_gpr = RDY_debug_ifc_write_gpr ;

  // action method debug_ifc_write_gpr
  assign RDY_debug_ifc_write_gpr =
	     rg_cpu_mode && rg_cpu_state && !regfile_rg_reset_init ;
  assign CAN_FIRE_debug_ifc_write_gpr = RDY_debug_ifc_write_gpr ;
  assign WILL_FIRE_debug_ifc_write_gpr = EN_debug_ifc_write_gpr ;

  // action method debug_ifc_req_read_memW
  assign RDY_debug_ifc_req_read_memW = RDY_debug_ifc_write_memW ;
  assign CAN_FIRE_debug_ifc_req_read_memW = RDY_debug_ifc_write_memW ;
  assign WILL_FIRE_debug_ifc_req_read_memW = EN_debug_ifc_req_read_memW ;

  // actionvalue method debug_ifc_rsp_read_memW
  assign debug_ifc_rsp_read_memW = f_dmem_rsps_rv[55:24] ;
  assign RDY_debug_ifc_rsp_read_memW =
	     f_dmem_rsps_rv[58] && rg_cpu_mode && rg_cpu_state ;
  assign CAN_FIRE_debug_ifc_rsp_read_memW =
	     f_dmem_rsps_rv[58] && rg_cpu_mode && rg_cpu_state ;
  assign WILL_FIRE_debug_ifc_rsp_read_memW = EN_debug_ifc_rsp_read_memW ;

  // action method debug_ifc_write_memW
  assign RDY_debug_ifc_write_memW =
	     rg_cpu_mode && rg_cpu_state && !f_dmem_reqs_rv[110] ;
  assign CAN_FIRE_debug_ifc_write_memW = RDY_debug_ifc_write_memW ;
  assign WILL_FIRE_debug_ifc_write_memW = EN_debug_ifc_write_memW ;

  // value method debug_ifc_read_instret
  assign debug_ifc_read_instret = counter_instret ;
  assign RDY_debug_ifc_read_instret = RDY_debug_ifc_read_cycle ;

  // value method debug_ifc_read_cycle
  assign debug_ifc_read_cycle = counter_cycle ;
  assign RDY_debug_ifc_read_cycle = rg_cpu_mode && rg_cpu_state ;

  // action method debug_ifc_set_verbosity
  assign RDY_debug_ifc_set_verbosity = 1'd1 ;
  assign CAN_FIRE_debug_ifc_set_verbosity = 1'd1 ;
  assign WILL_FIRE_debug_ifc_set_verbosity = EN_debug_ifc_set_verbosity ;

  // action method uart_ifc_sin
  assign RDY_uart_ifc_sin = 1'd1 ;
  assign CAN_FIRE_uart_ifc_sin = 1'd1 ;
  assign WILL_FIRE_uart_ifc_sin = EN_uart_ifc_sin ;

  // value method uart_ifc_sout
  assign uart_ifc_sout = csrfile_uart_rXmitDataOut ;
  assign RDY_uart_ifc_sout = 1'd1 ;

  // value method uart_ifc_busy
  assign uart_ifc_busy =
	     csrfile_uart_fifoXmit$EMPTY_N || csrfile_uart_fifoRecv$EMPTY_N ;
  assign RDY_uart_ifc_busy = 1'd1 ;

  // action method write_counter_time
  assign RDY_write_counter_time = 1'd1 ;
  assign CAN_FIRE_write_counter_time = 1'd1 ;
  assign WILL_FIRE_write_counter_time = EN_write_counter_time ;

  // value method halt
  assign halt = rg_halt_requested ;
  assign RDY_halt = 1'd1 ;

  // submodule _unnamed_
  RegFile #(.addr_width(32'd5),
	    .data_width(32'd32),
	    .lo(5'd0),
	    .hi(5'd31)) _unnamed_(.CLK(CLK),
				  .ADDR_1(_unnamed_$ADDR_1),
				  .ADDR_2(_unnamed_$ADDR_2),
				  .ADDR_3(_unnamed_$ADDR_3),
				  .ADDR_4(_unnamed_$ADDR_4),
				  .ADDR_5(_unnamed_$ADDR_5),
				  .ADDR_IN(_unnamed_$ADDR_IN),
				  .D_IN(_unnamed_$D_IN),
				  .WE(_unnamed_$WE),
				  .D_OUT_1(_unnamed_$D_OUT_1),
				  .D_OUT_2(_unnamed_$D_OUT_2),
				  .D_OUT_3(),
				  .D_OUT_4(),
				  .D_OUT_5());

  // submodule csrfile_uart_baudGen_rBaudCounter
  Counter #(.width(32'd16),
	    .init(16'd0)) csrfile_uart_baudGen_rBaudCounter(.CLK(CLK),
							    .RST(RST_N),
							    .DATA_A(csrfile_uart_baudGen_rBaudCounter$DATA_A),
							    .DATA_B(csrfile_uart_baudGen_rBaudCounter$DATA_B),
							    .DATA_C(csrfile_uart_baudGen_rBaudCounter$DATA_C),
							    .DATA_F(csrfile_uart_baudGen_rBaudCounter$DATA_F),
							    .ADDA(csrfile_uart_baudGen_rBaudCounter$ADDA),
							    .ADDB(csrfile_uart_baudGen_rBaudCounter$ADDB),
							    .SETC(csrfile_uart_baudGen_rBaudCounter$SETC),
							    .SETF(csrfile_uart_baudGen_rBaudCounter$SETF),
							    .Q_OUT(csrfile_uart_baudGen_rBaudCounter$Q_OUT));

  // submodule csrfile_uart_baudGen_rBaudTickCounter
  Counter #(.width(32'd3),
	    .init(3'd0)) csrfile_uart_baudGen_rBaudTickCounter(.CLK(CLK),
							       .RST(RST_N),
							       .DATA_A(csrfile_uart_baudGen_rBaudTickCounter$DATA_A),
							       .DATA_B(csrfile_uart_baudGen_rBaudTickCounter$DATA_B),
							       .DATA_C(csrfile_uart_baudGen_rBaudTickCounter$DATA_C),
							       .DATA_F(csrfile_uart_baudGen_rBaudTickCounter$DATA_F),
							       .ADDA(csrfile_uart_baudGen_rBaudTickCounter$ADDA),
							       .ADDB(csrfile_uart_baudGen_rBaudTickCounter$ADDB),
							       .SETC(csrfile_uart_baudGen_rBaudTickCounter$SETC),
							       .SETF(csrfile_uart_baudGen_rBaudTickCounter$SETF),
							       .Q_OUT(csrfile_uart_baudGen_rBaudTickCounter$Q_OUT));

  // submodule csrfile_uart_fifoRecv
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) csrfile_uart_fifoRecv(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(csrfile_uart_fifoRecv$D_IN),
						     .ENQ(csrfile_uart_fifoRecv$ENQ),
						     .DEQ(csrfile_uart_fifoRecv$DEQ),
						     .CLR(csrfile_uart_fifoRecv$CLR),
						     .D_OUT(csrfile_uart_fifoRecv$D_OUT),
						     .FULL_N(),
						     .EMPTY_N(csrfile_uart_fifoRecv$EMPTY_N));

  // submodule csrfile_uart_fifoXmit
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) csrfile_uart_fifoXmit(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(csrfile_uart_fifoXmit$D_IN),
						     .ENQ(csrfile_uart_fifoXmit$ENQ),
						     .DEQ(csrfile_uart_fifoXmit$DEQ),
						     .CLR(csrfile_uart_fifoXmit$CLR),
						     .D_OUT(csrfile_uart_fifoXmit$D_OUT),
						     .FULL_N(csrfile_uart_fifoXmit$FULL_N),
						     .EMPTY_N(csrfile_uart_fifoXmit$EMPTY_N));

  // rule RL_rl_write_back_request
  assign CAN_FIRE_RL_rl_write_back_request =
	     f_ex_wb_rv[152] && !rg_cpu_state ;
  assign WILL_FIRE_RL_rl_write_back_request =
	     CAN_FIRE_RL_rl_write_back_request ;

  // rule RL_rl_handle_hazards
  assign CAN_FIRE_RL_rl_handle_hazards =
	     f_if_ex_rv[71] && f_ex_wb_rv[152] && !f_if_ex_rv[38] &&
	     !f_ex_wb_rv[119] ;
  assign WILL_FIRE_RL_rl_handle_hazards = CAN_FIRE_RL_rl_handle_hazards ;

  // rule RL_regfile_rl_reset
  assign CAN_FIRE_RL_regfile_rl_reset =
	     regfile_rg_reset_init && regfile_rg_count != 5'd31 ;
  assign WILL_FIRE_RL_regfile_rl_reset = CAN_FIRE_RL_regfile_rl_reset ;

  // rule RL_regfile_rl_signal_reset_completion
  assign CAN_FIRE_RL_regfile_rl_signal_reset_completion =
	     regfile_rg_reset_init && regfile_rg_count == 5'd31 ;
  assign WILL_FIRE_RL_regfile_rl_signal_reset_completion =
	     CAN_FIRE_RL_regfile_rl_signal_reset_completion ;

  // rule RL_csrfile_uart_tx_connection
  assign CAN_FIRE_RL_csrfile_uart_tx_connection = 1'd1 ;
  assign WILL_FIRE_RL_csrfile_uart_tx_connection = 1'd1 ;

  // rule RL_csrfile_rl_print_csrs
  assign CAN_FIRE_RL_csrfile_rl_print_csrs =
	     csrfile_rg_tmp < csrfile_csr_minstret ;
  assign WILL_FIRE_RL_csrfile_rl_print_csrs =
	     CAN_FIRE_RL_csrfile_rl_print_csrs ;

  // rule RL_csrfile_rl_update_counters
  assign CAN_FIRE_RL_csrfile_rl_update_counters = 1'd1 ;
  assign WILL_FIRE_RL_csrfile_rl_update_counters = 1'd1 ;

  // rule RL_rl_count_cycles
  assign CAN_FIRE_RL_rl_count_cycles = !rg_cpu_state ;
  assign WILL_FIRE_RL_rl_count_cycles = CAN_FIRE_RL_rl_count_cycles ;

  // rule RL_csrfile_uart_baudGen_baud_count_wire
  assign CAN_FIRE_RL_csrfile_uart_baudGen_baud_count_wire = 1'd1 ;
  assign WILL_FIRE_RL_csrfile_uart_baudGen_baud_count_wire = 1'd1 ;

  // rule RL_csrfile_uart_baud_generator_clock_enable
  assign CAN_FIRE_RL_csrfile_uart_baud_generator_clock_enable = 1'd1 ;
  assign WILL_FIRE_RL_csrfile_uart_baud_generator_clock_enable = 1'd1 ;

  // rule RL_csrfile_uart_receive_wait_for_start_bit
  assign CAN_FIRE_RL_csrfile_uart_receive_wait_for_start_bit =
	     csrfile_uart_rRecvState == 3'd0 &&
	     !csrfile_uart_baudGen_rBaudCounter_value__6_PLU_ETC___d44 ;
  assign WILL_FIRE_RL_csrfile_uart_receive_wait_for_start_bit =
	     CAN_FIRE_RL_csrfile_uart_receive_wait_for_start_bit ;

  // rule RL_csrfile_uart_receive_find_center_of_bit_cell
  assign CAN_FIRE_RL_csrfile_uart_receive_find_center_of_bit_cell =
	     csrfile_uart_rRecvState == 3'd1 &&
	     !csrfile_uart_baudGen_rBaudCounter_value__6_PLU_ETC___d44 ;
  assign WILL_FIRE_RL_csrfile_uart_receive_find_center_of_bit_cell =
	     CAN_FIRE_RL_csrfile_uart_receive_find_center_of_bit_cell ;

  // rule RL_csrfile_uart_receive_wait_bit_cell_time_for_sample
  assign CAN_FIRE_RL_csrfile_uart_receive_wait_bit_cell_time_for_sample =
	     csrfile_uart_rRecvState == 3'd2 &&
	     csrfile_uart_rRecvCellCount == 4'hF &&
	     !csrfile_uart_baudGen_rBaudCounter_value__6_PLU_ETC___d44 ;
  assign WILL_FIRE_RL_csrfile_uart_receive_wait_bit_cell_time_for_sample =
	     CAN_FIRE_RL_csrfile_uart_receive_wait_bit_cell_time_for_sample ;

  // rule RL_csrfile_uart_receive_sample_pin
  assign CAN_FIRE_RL_csrfile_uart_receive_sample_pin =
	     CAN_FIRE_RL_csrfile_uart_receive_buffer_shift ;
  assign WILL_FIRE_RL_csrfile_uart_receive_sample_pin =
	     CAN_FIRE_RL_csrfile_uart_receive_buffer_shift ;

  // rule RL_csrfile_uart_receive_parity_bit
  assign CAN_FIRE_RL_csrfile_uart_receive_parity_bit =
	     csrfile_uart_rRecvState == 3'd4 &&
	     !csrfile_uart_baudGen_rBaudCounter_value__6_PLU_ETC___d44 ;
  assign WILL_FIRE_RL_csrfile_uart_receive_parity_bit =
	     CAN_FIRE_RL_csrfile_uart_receive_parity_bit ;

  // rule RL_csrfile_uart_receive_stop_first_bit
  assign CAN_FIRE_RL_csrfile_uart_receive_stop_first_bit =
	     csrfile_uart_rRecvState == 3'd5 &&
	     !csrfile_uart_baudGen_rBaudCounter_value__6_PLU_ETC___d44 ;
  assign WILL_FIRE_RL_csrfile_uart_receive_stop_first_bit =
	     CAN_FIRE_RL_csrfile_uart_receive_stop_first_bit ;

  // rule RL_csrfile_uart_receive_stop_last_bit
  assign CAN_FIRE_RL_csrfile_uart_receive_stop_last_bit =
	     csrfile_uart_rRecvState == 3'd6 &&
	     !csrfile_uart_baudGen_rBaudCounter_value__6_PLU_ETC___d44 ;
  assign WILL_FIRE_RL_csrfile_uart_receive_stop_last_bit =
	     CAN_FIRE_RL_csrfile_uart_receive_stop_last_bit ;

  // rule RL_csrfile_uart_receive_bit_cell_time_counter
  assign CAN_FIRE_RL_csrfile_uart_receive_bit_cell_time_counter =
	     CAN_FIRE_RL_csrfile_uart_baudGen_count_baudtick_16x ;
  assign WILL_FIRE_RL_csrfile_uart_receive_bit_cell_time_counter =
	     CAN_FIRE_RL_csrfile_uart_baudGen_count_baudtick_16x ;

  // rule RL_csrfile_uart_receive_buffer_shift
  assign CAN_FIRE_RL_csrfile_uart_receive_buffer_shift =
	     csrfile_uart_rRecvState == 3'd3 &&
	     !csrfile_uart_baudGen_rBaudCounter_value__6_PLU_ETC___d44 ;
  assign WILL_FIRE_RL_csrfile_uart_receive_buffer_shift =
	     CAN_FIRE_RL_csrfile_uart_receive_buffer_shift ;

  // rule RL_csrfile_uart_receive_bit_counter
  assign CAN_FIRE_RL_csrfile_uart_receive_bit_counter = 1'd1 ;
  assign WILL_FIRE_RL_csrfile_uart_receive_bit_counter = 1'd1 ;

  // rule RL_csrfile_uart_transmit_wait_for_start_command
  assign CAN_FIRE_RL_csrfile_uart_transmit_wait_for_start_command =
	     csrfile_uart_rXmitState == 3'd0 &&
	     !csrfile_uart_baudGen_rBaudCounter_value__6_PLU_ETC___d44 ;
  assign WILL_FIRE_RL_csrfile_uart_transmit_wait_for_start_command =
	     CAN_FIRE_RL_csrfile_uart_transmit_wait_for_start_command ;

  // rule RL_csrfile_uart_transmit_send_start_bit
  assign CAN_FIRE_RL_csrfile_uart_transmit_send_start_bit =
	     csrfile_uart_rXmitState == 3'd1 &&
	     !csrfile_uart_baudGen_rBaudCounter_value__6_PLU_ETC___d44 ;
  assign WILL_FIRE_RL_csrfile_uart_transmit_send_start_bit =
	     CAN_FIRE_RL_csrfile_uart_transmit_send_start_bit ;

  // rule RL_csrfile_uart_transmit_wait_1_bit_cell_time
  assign CAN_FIRE_RL_csrfile_uart_transmit_wait_1_bit_cell_time =
	     csrfile_uart_rXmitState == 3'd2 &&
	     !csrfile_uart_baudGen_rBaudCounter_value__6_PLU_ETC___d44 ;
  assign WILL_FIRE_RL_csrfile_uart_transmit_wait_1_bit_cell_time =
	     CAN_FIRE_RL_csrfile_uart_transmit_wait_1_bit_cell_time ;

  // rule RL_csrfile_uart_transmit_bit_counter
  assign CAN_FIRE_RL_csrfile_uart_transmit_bit_counter = 1'd1 ;
  assign WILL_FIRE_RL_csrfile_uart_transmit_bit_counter = 1'd1 ;

  // rule RL_csrfile_uart_transmit_shift_next_bit
  assign CAN_FIRE_RL_csrfile_uart_transmit_shift_next_bit =
	     csrfile_uart_rXmitState == 3'd3 &&
	     !csrfile_uart_baudGen_rBaudCounter_value__6_PLU_ETC___d44 ;
  assign WILL_FIRE_RL_csrfile_uart_transmit_shift_next_bit =
	     CAN_FIRE_RL_csrfile_uart_transmit_shift_next_bit ;

  // rule RL_csrfile_uart_transmit_buffer_load
  assign CAN_FIRE_RL_csrfile_uart_transmit_buffer_load =
	     csrfile_uart_fifoXmit$EMPTY_N &&
	     csrfile_uart_pwXmitLoadBuffer$whas ;
  assign WILL_FIRE_RL_csrfile_uart_transmit_buffer_load =
	     CAN_FIRE_RL_csrfile_uart_transmit_buffer_load ;

  // rule RL_csrfile_uart_transmit_buffer_shift
  assign CAN_FIRE_RL_csrfile_uart_transmit_buffer_shift =
	     !csrfile_uart_pwXmitLoadBuffer$whas &&
	     CAN_FIRE_RL_csrfile_uart_transmit_shift_next_bit ;
  assign WILL_FIRE_RL_csrfile_uart_transmit_buffer_shift =
	     CAN_FIRE_RL_csrfile_uart_transmit_buffer_shift ;

  // rule RL_csrfile_uart_transmit_send_parity_bit
  assign CAN_FIRE_RL_csrfile_uart_transmit_send_parity_bit =
	     csrfile_uart_rXmitState == 3'd7 &&
	     !csrfile_uart_baudGen_rBaudCounter_value__6_PLU_ETC___d44 ;
  assign WILL_FIRE_RL_csrfile_uart_transmit_send_parity_bit =
	     CAN_FIRE_RL_csrfile_uart_transmit_send_parity_bit ;

  // rule RL_csrfile_uart_transmit_send_stop_bit
  assign CAN_FIRE_RL_csrfile_uart_transmit_send_stop_bit =
	     csrfile_uart_rXmitState == 3'd4 &&
	     !csrfile_uart_baudGen_rBaudCounter_value__6_PLU_ETC___d44 ;
  assign WILL_FIRE_RL_csrfile_uart_transmit_send_stop_bit =
	     CAN_FIRE_RL_csrfile_uart_transmit_send_stop_bit ;

  // rule RL_csrfile_uart_transmit_send_stop_bit1_5
  assign CAN_FIRE_RL_csrfile_uart_transmit_send_stop_bit1_5 =
	     csrfile_uart_rXmitState == 3'd5 &&
	     !csrfile_uart_baudGen_rBaudCounter_value__6_PLU_ETC___d44 ;
  assign WILL_FIRE_RL_csrfile_uart_transmit_send_stop_bit1_5 =
	     CAN_FIRE_RL_csrfile_uart_transmit_send_stop_bit1_5 ;

  // rule RL_csrfile_uart_transmit_send_stop_bit2
  assign CAN_FIRE_RL_csrfile_uart_transmit_send_stop_bit2 =
	     csrfile_uart_rXmitState == 3'd6 &&
	     !csrfile_uart_baudGen_rBaudCounter_value__6_PLU_ETC___d44 ;
  assign WILL_FIRE_RL_csrfile_uart_transmit_send_stop_bit2 =
	     CAN_FIRE_RL_csrfile_uart_transmit_send_stop_bit2 ;

  // rule RL_csrfile_uart_transmit_bit_cell_time_counter
  assign CAN_FIRE_RL_csrfile_uart_transmit_bit_cell_time_counter =
	     CAN_FIRE_RL_csrfile_uart_baudGen_count_baudtick_16x ;
  assign WILL_FIRE_RL_csrfile_uart_transmit_bit_cell_time_counter =
	     CAN_FIRE_RL_csrfile_uart_baudGen_count_baudtick_16x ;

  // rule RL_csrfile_uart_baudGen_baud_tick_count_wire
  assign CAN_FIRE_RL_csrfile_uart_baudGen_baud_tick_count_wire = 1'd1 ;
  assign WILL_FIRE_RL_csrfile_uart_baudGen_baud_tick_count_wire = 1'd1 ;

  // rule RL_csrfile_uart_baudGen_assert_2x_baud_tick
  assign CAN_FIRE_RL_csrfile_uart_baudGen_assert_2x_baud_tick =
	     csrfile_uart_baudGen_rBaudTickCounter$Q_OUT == 3'd0 &&
	     !csrfile_uart_baudGen_rBaudCounter_value__6_PLU_ETC___d44 ;
  assign WILL_FIRE_RL_csrfile_uart_baudGen_assert_2x_baud_tick =
	     CAN_FIRE_RL_csrfile_uart_baudGen_assert_2x_baud_tick ;

  // rule RL_csrfile_uart_baudGen_count_baudtick_16x
  assign CAN_FIRE_RL_csrfile_uart_baudGen_count_baudtick_16x =
	     !csrfile_uart_baudGen_rBaudCounter_value__6_PLU_ETC___d44 ;
  assign WILL_FIRE_RL_csrfile_uart_baudGen_count_baudtick_16x =
	     CAN_FIRE_RL_csrfile_uart_baudGen_count_baudtick_16x ;

  // rule RL_fetch_icache_rl_discard_stale_responses
  assign CAN_FIRE_RL_fetch_icache_rl_discard_stale_responses =
	     fetch_icache_f_cpu_rsps_rv[66] &&
	     !fetch_icache_rg_response_valid &&
	     fetch_icache_rg_imem_state ;
  assign WILL_FIRE_RL_fetch_icache_rl_discard_stale_responses =
	     CAN_FIRE_RL_fetch_icache_rl_discard_stale_responses ;

  // rule RL_writeback_rl_handle_memory_request
  assign CAN_FIRE_RL_writeback_rl_handle_memory_request =
	     writeback_dcache_f_dmem_reqs_rv[297] &&
	     !writeback_f_dmem_reqs_rv[110] &&
	     writeback_rg_burst_count == 10'd0 ;
  assign WILL_FIRE_RL_writeback_rl_handle_memory_request =
	     CAN_FIRE_RL_writeback_rl_handle_memory_request ;

  // rule RL_writeback_rl_handle_writeback_requests
  assign CAN_FIRE_RL_writeback_rl_handle_writeback_requests =
	     !writeback_dcache_f_dmem_reqs_rv$port1__read[297] &&
	     EN_write_counter_time &&
	     CAN_FIRE_RL_rl_write_back_request &&
	     !writeback_rg_dmem_state ;
  assign WILL_FIRE_RL_writeback_rl_handle_writeback_requests =
	     CAN_FIRE_RL_writeback_rl_handle_writeback_requests ;

  // rule RL_csrfile_send_transimission_data0
  assign CAN_FIRE_RL_csrfile_send_transimission_data0 =
	     csrfile_uart_fifoXmit$FULL_N && csrfile_wr_send_to_uart$whas ;
  assign WILL_FIRE_RL_csrfile_send_transimission_data0 =
	     CAN_FIRE_RL_csrfile_send_transimission_data0 ;

  // rule RL_csrfile_uart_rx_connectionif
  assign CAN_FIRE_RL_csrfile_uart_rx_connectionif =
	     csrfile_uart_fifoRecv$EMPTY_N && !csrfile_rg_rx[8] ;
  assign WILL_FIRE_RL_csrfile_uart_rx_connectionif =
	     CAN_FIRE_RL_csrfile_uart_rx_connectionif ;

  // rule RL_csrfile_uart_fifoRecv__updateLevelCounter
  assign CAN_FIRE_RL_csrfile_uart_fifoRecv__updateLevelCounter =
	     CAN_FIRE_RL_csrfile_uart_receive_stop_last_bit !=
	     CAN_FIRE_RL_csrfile_uart_rx_connectionif ;
  assign WILL_FIRE_RL_csrfile_uart_fifoRecv__updateLevelCounter =
	     CAN_FIRE_RL_csrfile_uart_fifoRecv__updateLevelCounter ;

  // rule RL_csrfile_uart_fifoXmit__updateLevelCounter
  assign CAN_FIRE_RL_csrfile_uart_fifoXmit__updateLevelCounter =
	     CAN_FIRE_RL_csrfile_send_transimission_data0 !=
	     CAN_FIRE_RL_csrfile_uart_transmit_buffer_load ;
  assign WILL_FIRE_RL_csrfile_uart_fifoXmit__updateLevelCounter =
	     CAN_FIRE_RL_csrfile_uart_fifoXmit__updateLevelCounter ;

  // rule RL_writeback_rl_data_memory_response
  assign CAN_FIRE_RL_writeback_rl_data_memory_response =
	     writeback_dcache_f_cpu_rsps_rv[68] &&
	     CAN_FIRE_RL_rl_write_back_request &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd0 &&
	     writeback_rg_dmem_state$port1__read ;
  assign WILL_FIRE_RL_writeback_rl_data_memory_response =
	     CAN_FIRE_RL_writeback_rl_data_memory_response ;

  // rule RL_writeback_rl_handle_traps
  assign CAN_FIRE_RL_writeback_rl_handle_traps =
	     CAN_FIRE_RL_rl_write_back_request &&
	     writeback_wr_trap_data$whas ;
  assign WILL_FIRE_RL_writeback_rl_handle_traps =
	     CAN_FIRE_RL_writeback_rl_handle_traps ;

  // rule RL_rl_write_back_response
  assign CAN_FIRE_RL_rl_write_back_response =
	     writeback_wr_response$whas && f_ex_wb_rv[152] &&
	     !regfile_rg_reset_init &&
	     !rg_cpu_state ;
  assign WILL_FIRE_RL_rl_write_back_response =
	     CAN_FIRE_RL_rl_write_back_response ;

  // rule RL_rl_update_execute
  assign CAN_FIRE_RL_rl_update_execute =
	     f_if_ex_rv[71] && !f_ex_wb_rv$port1__read[152] &&
	     !regfile_rg_reset_init &&
	     !rg_cpu_state &&
	     !pwr_stall_execute$whas ;
  assign WILL_FIRE_RL_rl_update_execute = CAN_FIRE_RL_rl_update_execute ;

  // rule RL_execute_rl_handle_execute_requests
  assign CAN_FIRE_RL_execute_rl_handle_execute_requests =
	     WILL_FIRE_RL_rl_update_execute && !f_if_ex_rv[38] ;
  assign WILL_FIRE_RL_execute_rl_handle_execute_requests =
	     CAN_FIRE_RL_execute_rl_handle_execute_requests ;

  // rule RL_rl_read_execute
  assign CAN_FIRE_RL_rl_read_execute =
	     CAN_FIRE_RL_execute_rl_handle_execute_requests &&
	     !f_ex_wb_rv$port1__read[152] &&
	     CAN_FIRE_RL_execute_rl_handle_execute_requests &&
	     f_if_ex_rv[71] &&
	     !rg_cpu_state ;
  assign WILL_FIRE_RL_rl_read_execute = CAN_FIRE_RL_rl_read_execute ;

  // rule RL_rl_fetch_response
  assign CAN_FIRE_RL_rl_fetch_response =
	     fetch_icache_f_cpu_rsps_rv[66] &&
	     fetch_rg_imem_state_port0__read__798_AND_NOT_f_ETC___d2805 &&
	     !rg_cpu_state ;
  assign WILL_FIRE_RL_rl_fetch_response = CAN_FIRE_RL_rl_fetch_response ;

  // rule RL_rl_fetch_request
  assign CAN_FIRE_RL_rl_fetch_request =
	     !fetch_rg_imem_state$port1__read &&
	     (!CAN_FIRE_RL_rl_flush || !fetch_wr_redirect_3$wget[32]) &&
	     !rg_cpu_state ;
  assign WILL_FIRE_RL_rl_fetch_request = CAN_FIRE_RL_rl_fetch_request ;

  // rule RL_rl_flush
  assign CAN_FIRE_RL_rl_flush =
	     WILL_FIRE_RL_rl_write_back_response &&
	     !writeback_wr_response$wget[0] &&
	     !writeback_wr_response$wget[1] &&
	     writeback_wr_response$wget[35] ;
  assign WILL_FIRE_RL_rl_flush = CAN_FIRE_RL_rl_flush ;

  // rule RL_fetch_rl_request_icache
  assign CAN_FIRE_RL_fetch_rl_request_icache =
	     !fetch_icache_rg_imem_state$port1__read &&
	     !fetch_icache_f_imem_reqs_rv$port1__read[39] &&
	     !fetch_icache_f_cpu_rsps_rv$port1__read[66] &&
	     fetch_rg_this_pc$port1__read[32] ;
  assign WILL_FIRE_RL_fetch_rl_request_icache =
	     CAN_FIRE_RL_fetch_rl_request_icache && !EN_imem_ifc_rx_put ;

  // rule RL_fetch_rl_handle_redirections
  assign CAN_FIRE_RL_fetch_rl_handle_redirections =
	     CAN_FIRE_RL_rl_flush && fetch_wr_redirect_3$wget[32] ;
  assign WILL_FIRE_RL_fetch_rl_handle_redirections =
	     CAN_FIRE_RL_fetch_rl_handle_redirections && !EN_debug_ifc_reset ;

  // rule RL_writeback_rl_follow_up_store_request
  assign CAN_FIRE_RL_writeback_rl_follow_up_store_request =
	     !writeback_f_dmem_reqs_rv[110] &&
	     writeback_rg_burst_count != 10'd0 &&
	     writeback_rg_burst_count < writeback_rg_burst_length ;
  assign WILL_FIRE_RL_writeback_rl_follow_up_store_request =
	     CAN_FIRE_RL_writeback_rl_follow_up_store_request ;

  // rule RL_writeback_rl_handle_memory_response
  assign CAN_FIRE_RL_writeback_rl_handle_memory_response =
	     writeback_f_dmem_rsps_rv$port1__read[58] &&
	     !writeback_dcache_f_cpu_rsps_rv$port1__read[68] ;
  assign WILL_FIRE_RL_writeback_rl_handle_memory_response =
	     CAN_FIRE_RL_writeback_rl_handle_memory_response ;

  // rule RL_rl_stop_cpu
  assign CAN_FIRE_RL_rl_stop_cpu =
	     rg_stop_requested$port1__read &&
	     MUX_counter_instret$write_1__SEL_1 ;
  assign WILL_FIRE_RL_rl_stop_cpu =
	     CAN_FIRE_RL_rl_stop_cpu && !EN_debug_ifc_write_memW &&
	     !EN_debug_ifc_rsp_read_memW &&
	     !EN_debug_ifc_run_step &&
	     !EN_debug_ifc_run_continue ;

  // inputs to muxes for submodule ports
  assign MUX__unnamed_$upd_1__SEL_1 =
	     WILL_FIRE_RL_rl_write_back_response &&
	     !writeback_wr_response$wget[0] &&
	     !writeback_wr_response$wget[1] &&
	     writeback_wr_response$wget[68] &&
	     writeback_wr_response$wget[73:69] != 5'd0 ;
  assign MUX__unnamed_$upd_1__SEL_2 =
	     EN_debug_ifc_write_gpr && debug_ifc_write_gpr_r != 5'd0 ;
  assign MUX__unnamed_$upd_1__SEL_3 =
	     WILL_FIRE_RL_regfile_rl_signal_reset_completion ||
	     WILL_FIRE_RL_regfile_rl_reset ;
  assign MUX_counter_instret$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_write_back_response &&
	     writeback_wr_response$wget[2] ;
  assign MUX_csrfile_uart_rRecvState$write_1__SEL_6 =
	     WILL_FIRE_RL_csrfile_uart_receive_parity_bit ||
	     WILL_FIRE_RL_csrfile_uart_receive_sample_pin ;
  assign MUX_csrfile_uart_rXmitDataOut$write_1__SEL_1 =
	     WILL_FIRE_RL_csrfile_uart_transmit_shift_next_bit ||
	     WILL_FIRE_RL_csrfile_uart_transmit_wait_1_bit_cell_time ;
  assign MUX_csrfile_uart_rXmitDataOut$write_1__SEL_2 =
	     WILL_FIRE_RL_csrfile_uart_transmit_send_parity_bit ||
	     WILL_FIRE_RL_csrfile_uart_transmit_send_start_bit ;
  assign MUX_csrfile_uart_rXmitDataOut$write_1__SEL_3 =
	     WILL_FIRE_RL_csrfile_uart_transmit_send_stop_bit2 ||
	     WILL_FIRE_RL_csrfile_uart_transmit_send_stop_bit1_5 ||
	     WILL_FIRE_RL_csrfile_uart_transmit_send_stop_bit ||
	     WILL_FIRE_RL_csrfile_uart_transmit_wait_for_start_command ;
  assign MUX_fetch_icache_f_cpu_rsps_rv$port1__write_1__SEL_1 =
	     WILL_FIRE_RL_fetch_rl_request_icache &&
	     fetch_rg_this_pc$port1__read[1:0] != 2'd0 ;
  assign MUX_fetch_rg_imem_state$port1__write_1__SEL_1 =
	     WILL_FIRE_RL_fetch_rl_handle_redirections || EN_debug_ifc_reset ;
  assign MUX_writeback_rg_burst_count$write_1__SEL_3 =
	     WILL_FIRE_RL_writeback_rl_handle_memory_request &&
	     writeback_dcache_f_dmem_reqs_rv[3:2] != 2'd0 &&
	     { 5'd0, writeback_dcache_f_dmem_reqs_rv[264:260] } > 10'd1 ;
  assign MUX_writeback_rg_data_line$write_1__SEL_1 =
	     WILL_FIRE_RL_writeback_rl_handle_memory_request &&
	     writeback_dcache_f_dmem_reqs_rv[3:2] != 2'd0 ;
  assign MUX_writeback_wr_response$wset_1__SEL_2 =
	     WILL_FIRE_RL_writeback_rl_data_memory_response &&
	     !writeback_dcache_f_cpu_rsps_rv[35] &&
	     !writeback_dcache_f_cpu_rsps_rv[34] ;
  assign MUX_writeback_wr_response$wset_1__SEL_3 =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     (writeback_wr_request$wget[118:116] == 3'd1 ||
	      NOT_writeback_wr_request_wget__58_BITS_118_TO__ETC___d1185) ;
  assign MUX_writeback_wr_trap_data$wset_1__SEL_1 =
	     WILL_FIRE_RL_writeback_rl_data_memory_response &&
	     (writeback_dcache_f_cpu_rsps_rv[35] &&
	      (writeback_wr_request$wget[114:113] == 2'd0 ||
	       writeback_wr_request$wget[114:113] == 2'd1) ||
	      !writeback_dcache_f_cpu_rsps_rv[35] &&
	      writeback_dcache_f_cpu_rsps_rv[34] &&
	      (writeback_wr_request$wget[114:113] == 2'd0 ||
	       writeback_wr_request$wget[114:113] == 2'd1)) ;
  assign MUX_writeback_wr_trap_data$wset_1__SEL_2 =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     writeback_wr_request_wget__58_BIT_119_59_OR_wr_ETC___d1020 ;
  assign MUX_counter_cycle$write_1__VAL_1 = counter_cycle + 64'd1 ;
  assign MUX_counter_instret$write_1__VAL_1 = counter_instret + 64'd1 ;
  assign MUX_csrfile_uart_rRecvState$write_1__VAL_1 =
	     csrfile_uart_rRecvData ? 3'd0 : 3'd1 ;
  assign MUX_csrfile_uart_rRecvState$write_1__VAL_2 =
	     (csrfile_uart_rRecvCellCount == 4'h4) ?
	       (csrfile_uart_rRecvData ? 3'd0 : 3'd2) :
	       3'd1 ;
  always@(csrfile_uart_rRecvBitCount)
  begin
    case (csrfile_uart_rRecvBitCount)
      4'd8, 4'd9, 4'd10: MUX_csrfile_uart_rRecvState$write_1__VAL_3 = 3'd6;
      default: MUX_csrfile_uart_rRecvState$write_1__VAL_3 = 3'd3;
    endcase
  end
  assign MUX_csrfile_uart_rRecvState$write_1__VAL_4 =
	     csrfile_uart_rRecvData ? 3'd2 : 3'd0 ;
  assign MUX_csrfile_uart_rXmitState$write_1__VAL_1 =
	     csrfile_uart_fifoXmit$EMPTY_N ? 3'd1 : 3'd0 ;
  assign MUX_csrfile_uart_rXmitState$write_1__VAL_2 =
	     (csrfile_uart_rXmitCellCount == 4'hF) ? 3'd2 : 3'd1 ;
  assign MUX_csrfile_uart_rXmitState$write_1__VAL_3 =
	     (csrfile_uart_rXmitCellCount == 4'hF) ?
	       ((csrfile_uart_rXmitBitCount == 4'd7) ? 3'd4 : 3'd3) :
	       3'd2 ;
  assign MUX_csrfile_uart_rXmitState$write_1__VAL_4 =
	     (csrfile_uart_rXmitCellCount == 4'hF) ? 3'd4 : 3'd7 ;
  assign MUX_csrfile_uart_rXmitState$write_1__VAL_5 =
	     (csrfile_uart_rXmitCellCount == 4'hF) ? 3'd0 : 3'd4 ;
  assign MUX_csrfile_uart_rXmitState$write_1__VAL_6 =
	     (csrfile_uart_rXmitCellCount == 4'h7) ? 3'd0 : 3'd5 ;
  assign MUX_csrfile_uart_rXmitState$write_1__VAL_7 =
	     (csrfile_uart_rXmitCellCount == 4'hF) ? 3'd0 : 3'd6 ;
  assign MUX_f_dmem_reqs_rv$port0__write_1__VAL_1 =
	     { 6'd32,
	       debug_ifc_req_read_memW_addr,
	       32'hAAAAAAAA /* unspecified value */ ,
	       41'h000F9800010 } ;
  assign MUX_f_dmem_reqs_rv$port0__write_1__VAL_2 =
	     { 6'd36,
	       debug_ifc_write_memW_addr,
	       debug_ifc_write_memW_d,
	       41'h000F9800010 } ;
  assign MUX_f_ex_wb_rv$port1__write_1__VAL_1 =
	     { 1'd1,
	       execute_wr_request$wget[32:1],
	       !execute_wr_response$wget[119],
	       execute_wr_response$wget[119] ?
		 { CASE_execute_wr_responsewget_BITS_118_TO_116__ETC__q23,
		   CASE_execute_wr_responsewget_BITS_118_TO_116__ETC__q24 } :
		 { 81'h0AAAAAAAAAAAAAAAAAAAA /* unspecified value */ ,
		   1'd0,
		   32'hAAAAAAAA /* unspecified value */ ,
		   5'd2 } } ;
  assign MUX_f_ex_wb_rv$port1__write_1__VAL_2 =
	     { 1'd1,
	       f_if_ex_rv[70:39],
	       1'd1,
	       81'h0AAAAAAAAAAAAAAAAAAAA /* unspecified value */ ,
	       f_if_ex_rv[37:4],
	       CASE_f_if_ex_rv_BITS_3_TO_0_0_f_if_ex_rv_BITS__ETC__q1 } ;
  assign MUX_fetch_icache_f_cpu_rsps_rv$port1__write_1__VAL_1 =
	     { 1'd1,
	       32'hAAAAAAAA /* unspecified value */ ,
	       2'd1,
	       fetch_rg_this_pc$port1__read[31:0] } ;
  assign MUX_fetch_icache_f_cpu_rsps_rv$port1__write_1__VAL_2 =
	     { 1'd1,
	       imem_ifc_rx_put[55:24],
	       x__h105966,
	       1'd0,
	       fetch_rg_burst_addr } ;
  always@(fetch_rg_burst_length or
	  fetch_rg_burst_addr or
	  new_addr___1__h105413 or
	  IF_fetch_rg_burst_size_read__115_EQ_0_120_THEN_ETC___d3152 or
	  IF_fetch_rg_burst_size_read__115_EQ_0_120_THEN_ETC___d3139)
  begin
    case (fetch_rg_burst_length)
      10'd1: MUX_fetch_rg_burst_addr$write_1__VAL_1 = new_addr___1__h105413;
      10'd4:
	  MUX_fetch_rg_burst_addr$write_1__VAL_1 =
	      IF_fetch_rg_burst_size_read__115_EQ_0_120_THEN_ETC___d3152;
      10'd8:
	  MUX_fetch_rg_burst_addr$write_1__VAL_1 =
	      IF_fetch_rg_burst_size_read__115_EQ_0_120_THEN_ETC___d3139;
      default: MUX_fetch_rg_burst_addr$write_1__VAL_1 = fetch_rg_burst_addr;
    endcase
  end
  assign MUX_fetch_rg_fetch_pc$write_1__VAL_2 = v__h98899 + 32'd4 ;
  assign MUX_regfile_rg_count$write_1__VAL_1 = regfile_rg_count + 5'd1 ;
  assign MUX_writeback_f_dmem_reqs_rv$port0__write_1__VAL_1 =
	     { 2'd2,
	       (writeback_dcache_f_dmem_reqs_rv[3:2] == 2'd0) ?
		 writeback_dcache_f_dmem_reqs_rv[3:2] :
		 2'd1,
	       2'd0,
	       writeback_dcache_f_dmem_reqs_rv[296:265],
	       writeback_dcache_f_dmem_reqs_rv[35:4],
	       5'd0,
	       writeback_dcache_f_dmem_reqs_rv[264:260],
	       6'd61,
	       memReq_burst_size__h96473,
	       23'd0 } ;
  assign MUX_writeback_f_dmem_reqs_rv$port0__write_1__VAL_2 =
	     { 2'd3,
	       73'h0AAAAAAAAAAAAAAAAAA /* unspecified value */ ,
	       writeback_rg_data_line[31:0],
	       4'b1010 /* unspecified value */  } ;
  always@(writeback_rg_burst_length or
	  writeback_rg_burst_addr or
	  new_addr___1__h97562 or
	  IF_writeback_rg_burst_size_read__718_EQ_0_723__ETC___d2755 or
	  IF_writeback_rg_burst_size_read__718_EQ_0_723__ETC___d2742)
  begin
    case (writeback_rg_burst_length)
      10'd1:
	  MUX_writeback_rg_burst_addr$write_1__VAL_1 = new_addr___1__h97562;
      10'd4:
	  MUX_writeback_rg_burst_addr$write_1__VAL_1 =
	      IF_writeback_rg_burst_size_read__718_EQ_0_723__ETC___d2755;
      10'd8:
	  MUX_writeback_rg_burst_addr$write_1__VAL_1 =
	      IF_writeback_rg_burst_size_read__718_EQ_0_723__ETC___d2742;
      default: MUX_writeback_rg_burst_addr$write_1__VAL_1 =
		   writeback_rg_burst_addr;
    endcase
  end
  assign MUX_writeback_rg_burst_count$write_1__VAL_2 =
	     (writeback_rg_burst_count == writeback_rg_burst_length - 10'd1) ?
	       10'd0 :
	       writeback_rg_burst_count + 10'd1 ;
  assign MUX_writeback_rg_data_line$write_1__VAL_1 =
	     { 32'd0, writeback_dcache_f_dmem_reqs_rv[259:36] } ;
  assign MUX_writeback_rg_data_line$write_1__VAL_2 =
	     { 32'd0, writeback_rg_data_line[255:32] } ;
  assign MUX_writeback_wr_response$wset_1__VAL_1 =
	     { 6'd0,
	       32'hAAAAAAAA /* unspecified value */ ,
	       1'd1,
	       IF_csrfile_rg_prv_port1__read__590_EQ_0_591_AN_ETC___d2654,
	       5'b00100 } ;
  assign MUX_writeback_wr_response$wset_1__VAL_2 =
	     { writeback_wr_request$wget[5:1],
	       writeback_wr_request$wget[114:113] == 2'd0,
	       _theResult____h92845,
	       1'd0,
	       32'hAAAAAAAA /* unspecified value */ ,
	       3'd4 } ;
  assign MUX_writeback_wr_response$wset_1__VAL_3 =
	     { CASE_writeback_wr_requestwget_BITS_118_TO_116_ETC__q9,
	       CASE_writeback_wr_requestwget_BITS_118_TO_116_ETC__q10,
	       IF_writeback_wr_request_wget__58_BITS_118_TO_1_ETC___d1432,
	       CASE_writeback_wr_requestwget_BITS_118_TO_116_ETC__q11 } ;
  assign MUX_writeback_wr_trap_data$wset_1__VAL_1 =
	     { 1'd1,
	       writeback_dcache_f_cpu_rsps_rv[33:2],
	       writeback_dcache_f_cpu_rsps_rv[35] ?
		 ((writeback_wr_request$wget[114:113] == 2'd0) ?
		    5'd5 :
		    5'd7) :
		 ((writeback_wr_request$wget[114:113] == 2'd0) ?
		    5'd4 :
		    5'd6) } ;
  assign MUX_writeback_wr_trap_data$wset_1__VAL_2 =
	     { pending_interrupts__h31890 == 12'd0 &&
	       writeback_wr_request$wget[119] &&
	       writeback_wr_request$wget[37],
	       writeback_wr_request$wget[36:5],
	       pending_interrupts__h31890 != 12'd0 ||
	       writeback_wr_request$wget[119] && writeback_wr_request$wget[4],
	       IF_IF_csrfile_rg_mie_port0__read__76_OR_NOT_cs_ETC___d1155 } ;

  // inlined wires
  assign csrfile_wr_send_to_uart$whas =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d2493 ;
  assign fetch_wr_redirect_3$wget =
	     { 1'd1, writeback_wr_response$wget[34:3] } ;
  assign execute_wr_request$wget =
	     { f_if_ex_rv[6:0],
	       f_if_ex_rv[19:15],
	       f_if_ex_rv[24:20],
	       f_if_ex_rv[11:7],
	       f_if_ex_rv[26:25],
	       f_if_ex_rv[31:20],
	       x__h100915,
	       iFields_imm_B__h100603,
	       iFields_imm_U__h100604,
	       iFields_imm_J__h100605,
	       f_if_ex_rv[14:12],
	       f_if_ex_rv[31:27],
	       f_if_ex_rv[31:25],
	       f_if_ex_rv[31:20],
	       x__h101375,
	       x__h101440,
	       f_if_ex_rv[70:39],
	       f_if_ex_rv[31:0] == 32'h0000006F } ;
  assign execute_wr_response$wget =
	     execute_wr_request$wget[0] ?
	       { 4'd12,
		 115'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ,
		 1'd1 } :
	       IF_execute_wr_request_wget__42_BITS_237_TO_231_ETC___d504 ;
  assign writeback_wr_request$wget =
	     { f_ex_wb_rv[151:119],
	       f_ex_wb_rv[119] ?
		 { 81'h0AAAAAAAAAAAAAAAAAAAA /* unspecified value */ ,
		   f_ex_wb_rv[37:4],
		   CASE_f_ex_wb_rv_BITS_3_TO_0_0_f_ex_wb_rv_BITS__ETC__q2 } :
		 { CASE_f_ex_wb_rv_BITS_118_TO_116_0_f_ex_wb_rv_B_ETC__q3,
		   CASE_f_ex_wb_rv_BITS_118_TO_116_0_f_ex_wb_rv_B_ETC__q4 } } ;
  always@(WILL_FIRE_RL_writeback_rl_handle_traps or
	  MUX_writeback_wr_response$wset_1__VAL_1 or
	  MUX_writeback_wr_response$wset_1__SEL_2 or
	  MUX_writeback_wr_response$wset_1__VAL_2 or
	  MUX_writeback_wr_response$wset_1__SEL_3 or
	  MUX_writeback_wr_response$wset_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_writeback_rl_handle_traps:
	writeback_wr_response$wget = MUX_writeback_wr_response$wset_1__VAL_1;
    MUX_writeback_wr_response$wset_1__SEL_2:
	writeback_wr_response$wget = MUX_writeback_wr_response$wset_1__VAL_2;
    MUX_writeback_wr_response$wset_1__SEL_3:
	writeback_wr_response$wget = MUX_writeback_wr_response$wset_1__VAL_3;
    default: writeback_wr_response$wget =
		 74'h2AAAAAAAAAAAAAAAAAA /* unspecified value */ ;
  endcase
  assign writeback_wr_response$whas =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     (writeback_wr_request$wget[118:116] == 3'd1 ||
	      NOT_writeback_wr_request_wget__58_BITS_118_TO__ETC___d1185) ||
	     WILL_FIRE_RL_writeback_rl_data_memory_response &&
	     !writeback_dcache_f_cpu_rsps_rv[35] &&
	     !writeback_dcache_f_cpu_rsps_rv[34] ||
	     WILL_FIRE_RL_writeback_rl_handle_traps ;
  assign writeback_wr_trap_data$wget =
	     MUX_writeback_wr_trap_data$wset_1__SEL_1 ?
	       MUX_writeback_wr_trap_data$wset_1__VAL_1 :
	       MUX_writeback_wr_trap_data$wset_1__VAL_2 ;
  assign writeback_wr_trap_data$whas =
	     MUX_writeback_wr_trap_data$wset_1__SEL_2 ||
	     MUX_writeback_wr_trap_data$wset_1__SEL_1 ;
  assign wr_forwarded_data$wget = { 1'd1, dest__h104154, data__h104552 } ;
  assign wr_forwarded_data$whas =
	     WILL_FIRE_RL_rl_handle_hazards && dest__h104154 != 5'd0 &&
	     (dest__h104154 == f_if_ex_rv[19:15] ||
	      dest__h104154 == f_if_ex_rv[24:20]) &&
	     (f_ex_wb_rv[118:116] == 3'd1 ||
	      f_ex_wb_rv[118:116] == 3'd2 && f_ex_wb_rv[32]) ;
  assign _write_RL_writeback_rl_handle_writeback_requests$EN_csrfile_rg_medeleg$wget =
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd3 &&
	     writeback_wr_request$wget[95:89] == 7'd115 &&
	     writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1963 ;
  assign _write_RL_writeback_rl_handle_writeback_requests$EN_csrfile_rg_mtvec$wget =
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd3 &&
	     writeback_wr_request$wget[95:89] == 7'd115 &&
	     writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2081 ;
  assign _write_RL_writeback_rl_handle_writeback_requests$EN_csrfile_rg_utvec$wget =
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd3 &&
	     writeback_wr_request$wget[95:89] == 7'd115 &&
	     writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1742 ;
  assign _wset_RL_writeback_rl_handle_writeback_requests$EN_writeback_wr_response$wget =
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     (writeback_wr_request$wget[118:116] == 3'd1 ||
	      NOT_writeback_wr_request_wget__58_BITS_118_TO__ETC___d1185) ;
  assign _wset_RL_writeback_rl_data_memory_response$EN_writeback_wr_response$wget =
	     !writeback_dcache_f_cpu_rsps_rv[35] &&
	     !writeback_dcache_f_cpu_rsps_rv[34] ;
  assign csrfile_uart_pwRecvCellCountReset$whas =
	     WILL_FIRE_RL_csrfile_uart_receive_find_center_of_bit_cell &&
	     csrfile_uart_rRecvCellCount == 4'h4 ||
	     WILL_FIRE_RL_csrfile_uart_receive_stop_last_bit ||
	     WILL_FIRE_RL_csrfile_uart_receive_stop_first_bit ||
	     WILL_FIRE_RL_csrfile_uart_receive_parity_bit ||
	     WILL_FIRE_RL_csrfile_uart_receive_sample_pin ||
	     WILL_FIRE_RL_csrfile_uart_receive_wait_bit_cell_time_for_sample ||
	     WILL_FIRE_RL_csrfile_uart_receive_wait_for_start_bit ;
  assign csrfile_uart_pwRecvResetBitCount$whas =
	     WILL_FIRE_RL_csrfile_uart_receive_wait_for_start_bit &&
	     csrfile_uart_rRecvData ||
	     WILL_FIRE_RL_csrfile_uart_receive_stop_last_bit ;
  assign csrfile_uart_pwRecvEnableBitCount$whas =
	     WILL_FIRE_RL_csrfile_uart_receive_stop_first_bit ||
	     WILL_FIRE_RL_csrfile_uart_receive_parity_bit ||
	     WILL_FIRE_RL_csrfile_uart_receive_sample_pin ;
  assign csrfile_uart_pwXmitCellCountReset$whas =
	     WILL_FIRE_RL_csrfile_uart_transmit_wait_for_start_command &&
	     csrfile_uart_fifoXmit$EMPTY_N ||
	     _dor2csrfile_uart_pwXmitCellCountReset$EN_wset &&
	     csrfile_uart_rXmitCellCount == 4'hF ||
	     WILL_FIRE_RL_csrfile_uart_transmit_send_stop_bit1_5 &&
	     csrfile_uart_rXmitCellCount == 4'h7 ;
  assign csrfile_uart_pwXmitEnableBitCount$whas =
	     WILL_FIRE_RL_csrfile_uart_transmit_wait_1_bit_cell_time &&
	     csrfile_uart_rXmitCellCount == 4'hF &&
	     csrfile_uart_rXmitBitCount != 4'd7 ;
  assign csrfile_uart_pwXmitLoadBuffer$whas =
	     WILL_FIRE_RL_csrfile_uart_transmit_wait_for_start_command &&
	     csrfile_uart_fifoXmit$EMPTY_N ;
  assign pwr_stall_execute$whas =
	     WILL_FIRE_RL_rl_handle_hazards && dest__h104154 != 5'd0 &&
	     (dest__h104154 == f_if_ex_rv[19:15] ||
	      dest__h104154 == f_if_ex_rv[24:20]) &&
	     f_ex_wb_rv[118:116] != 3'd1 &&
	     (f_ex_wb_rv[118:116] != 3'd2 || !f_ex_wb_rv[32]) ;
  assign csrfile_rg_prv$EN_port0__write =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd3 &&
	     writeback_wr_request_wget__58_BITS_95_TO_89_62_ETC___d1491 ;
  assign csrfile_rg_prv$port0__write_1 =
	     (x__h34002 == 15'd16) ? 2'd0 : csrfile_rg_mpp ;
  assign csrfile_rg_prv$port1__write_1 =
	     (x__h96177 == 2'd0 &&
	      IF_writeback_wr_trap_data_wget__592_BIT_4_593__ETC___d2623) ?
	       2'd0 :
	       2'd3 ;
  assign csrfile_rg_prv$port2__read =
	     CAN_FIRE_RL_writeback_rl_handle_traps ?
	       csrfile_rg_prv$port1__write_1 :
	       x__h96177 ;
  assign csrfile_rg_mpp$EN_port0__write =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests && _dfoo1 ;
  assign csrfile_rg_mpp$port0__write_1 =
	     (pending_interrupts__h31890 == 12'd0 &&
	      NOT_writeback_wr_request_wget__58_BIT_119_59_1_ETC___d1509) ?
	       2'd0 :
	       IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1924 ;
  assign csrfile_rg_mpp$port1__read =
	     csrfile_rg_mpp$EN_port0__write ?
	       csrfile_rg_mpp$port0__write_1 :
	       csrfile_rg_mpp ;
  assign csrfile_rg_mpp$EN_port1__write =
	     WILL_FIRE_RL_writeback_rl_handle_traps &&
	     (x__h96177 != 2'd0 ||
	      IF_writeback_wr_trap_data_wget__592_BIT_4_593__ETC___d2642) ;
  assign csrfile_rg_mpp$port2__read =
	     csrfile_rg_mpp$EN_port1__write ?
	       x__h96177 :
	       csrfile_rg_mpp$port1__read ;
  assign csrfile_rg_mpie$EN_port0__write =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests && _dfoo1 ;
  assign csrfile_rg_mpie$port0__write_1 =
	     pending_interrupts__h31890 == 12'd0 &&
	     NOT_writeback_wr_request_wget__58_BIT_119_59_1_ETC___d1509 ||
	     IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1935 ;
  assign csrfile_rg_mpie$port1__read =
	     csrfile_rg_mpie$EN_port0__write ?
	       csrfile_rg_mpie$port0__write_1 :
	       csrfile_rg_mpie ;
  assign csrfile_rg_mpie$EN_port1__write =
	     WILL_FIRE_RL_writeback_rl_handle_traps &&
	     (x__h96177 != 2'd0 ||
	      IF_writeback_wr_trap_data_wget__592_BIT_4_593__ETC___d2642) ;
  assign csrfile_rg_mpie$port1__write_1 =
	     (x__h96177 == 2'd0) ?
	       x_port1__read__h95097 :
	       x__h96177 != 2'd1 && x__h96177 != 2'd2 &&
	       csrfile_rg_mie$port1__read ;
  assign csrfile_rg_mpie$port2__read =
	     csrfile_rg_mpie$EN_port1__write ?
	       csrfile_rg_mpie$port1__write_1 :
	       csrfile_rg_mpie$port1__read ;
  assign csrfile_rg_upie$EN_port0__write =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests && _dfoo7 ;
  assign csrfile_rg_upie$port0__write_1 =
	     IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d1499 ||
	     IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1678 ;
  assign csrfile_rg_upie$port1__read =
	     csrfile_rg_upie$EN_port0__write ?
	       csrfile_rg_upie$port0__write_1 :
	       csrfile_rg_upie ;
  assign csrfile_rg_mie$EN_port0__write =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests && _dfoo5 ;
  assign csrfile_rg_mie$port0__write_1 =
	     (pending_interrupts__h31890 == 12'd0 &&
	      !writeback_wr_request$wget[119] &&
	      writeback_wr_request$wget[118:116] == 3'd3 &&
	      writeback_wr_request_wget__58_BITS_95_TO_89_62_ETC___d1503) ?
	       csrfile_rg_mpie :
	       IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1946 ;
  assign csrfile_rg_mie$port1__read =
	     csrfile_rg_mie$EN_port0__write ?
	       csrfile_rg_mie$port0__write_1 :
	       csrfile_rg_mie ;
  assign csrfile_rg_mie$EN_port1__write =
	     WILL_FIRE_RL_writeback_rl_handle_traps &&
	     (x__h96177 != 2'd0 ||
	      IF_writeback_wr_trap_data_wget__592_BIT_4_593__ETC___d2642) ;
  assign csrfile_rg_mie$port2__read =
	     !csrfile_rg_mie$EN_port1__write && csrfile_rg_mie$port1__read ;
  assign csrfile_rg_uie$EN_port0__write =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests && _dfoo9 ;
  assign csrfile_rg_uie$port0__write_1 =
	     IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d1489 ?
	       ((x__h34002 == 15'd16) ? csrfile_rg_upie : csrfile_rg_mpie) :
	       IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1689 ;
  assign csrfile_rg_uie$EN_port1__write =
	     WILL_FIRE_RL_writeback_rl_handle_traps && x__h96177 == 2'd0 &&
	     IF_writeback_wr_trap_data_wget__592_BIT_4_593__ETC___d2623 ;
  assign csrfile_rg_uie$port2__read =
	     !csrfile_rg_uie$EN_port1__write && x_port1__read__h95097 ;
  assign csrfile_csr_uepc$EN_port0__write =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd3 &&
	     writeback_wr_request$wget[95:89] == 7'd115 &&
	     writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1800 ;
  assign csrfile_csr_uepc$port1__read =
	     csrfile_csr_uepc$EN_port0__write ?
	       csrfile_csr_mbadaddr$port0__write_1 :
	       csrfile_csr_uepc ;
  assign csrfile_csr_uepc$EN_port1__write =
	     WILL_FIRE_RL_writeback_rl_handle_traps && x__h96177 == 2'd0 &&
	     IF_writeback_wr_trap_data_wget__592_BIT_4_593__ETC___d2623 ;
  assign csrfile_csr_uepc$port2__read =
	     csrfile_csr_uepc$EN_port1__write ?
	       writeback_wr_request$wget[151:120] :
	       csrfile_csr_uepc$port1__read ;
  assign csrfile_csr_ucause$EN_port0__write =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd3 &&
	     writeback_wr_request$wget[95:89] == 7'd115 &&
	     writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1821 ;
  assign csrfile_csr_ucause$port1__read =
	     csrfile_csr_ucause$EN_port0__write ?
	       csrfile_csr_mbadaddr$port0__write_1 :
	       csrfile_csr_ucause ;
  assign csrfile_csr_ucause$EN_port1__write =
	     WILL_FIRE_RL_writeback_rl_handle_traps && x__h96177 == 2'd0 &&
	     IF_writeback_wr_trap_data_wget__592_BIT_4_593__ETC___d2623 ;
  assign csrfile_csr_ucause$port2__read =
	     csrfile_csr_ucause$EN_port1__write ?
	       csrfile_csr_mcause$port1__write_1 :
	       csrfile_csr_ucause$port1__read ;
  assign csrfile_csr_ubadaddr$EN_port0__write =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd3 &&
	     writeback_wr_request$wget[95:89] == 7'd115 &&
	     writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1842 ;
  assign csrfile_csr_ubadaddr$port1__read =
	     csrfile_csr_ubadaddr$EN_port0__write ?
	       csrfile_csr_mbadaddr$port0__write_1 :
	       csrfile_csr_ubadaddr ;
  assign csrfile_csr_ubadaddr$EN_port1__write =
	     WILL_FIRE_RL_writeback_rl_handle_traps &&
	     csrfile_rg_prv_port1__read__590_EQ_0_591_AND_I_ETC___d2635 ;
  assign csrfile_csr_ubadaddr$port2__read =
	     csrfile_csr_ubadaddr$EN_port1__write ?
	       writeback_wr_trap_data$wget[36:5] :
	       csrfile_csr_ubadaddr$port1__read ;
  assign csrfile_csr_mcycle$EN_port1__write =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd3 &&
	     writeback_wr_request$wget[95:89] == 7'd115 &&
	     writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2333 ;
  assign csrfile_csr_mcycle$port2__read =
	     csrfile_csr_mcycle$EN_port1__write ?
	       csrfile_csr_mbadaddr$port0__write_1 :
	       counter_cycle[31:0] ;
  assign csrfile_csr_minstret$EN_port1__write =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd3 &&
	     writeback_wr_request$wget[95:89] == 7'd115 &&
	     writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2354 ;
  assign csrfile_csr_minstret$port2__read =
	     csrfile_csr_minstret$EN_port1__write ?
	       csrfile_csr_mbadaddr$port0__write_1 :
	       counter_instret[31:0] ;
  assign csrfile_csr_mcycleh$EN_port1__write =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd3 &&
	     writeback_wr_request$wget[95:89] == 7'd115 &&
	     writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2375 ;
  assign csrfile_csr_mcycleh$port2__read =
	     csrfile_csr_mcycleh$EN_port1__write ?
	       csrfile_csr_mbadaddr$port0__write_1 :
	       counter_cycle[63:32] ;
  assign csrfile_csr_minstreth$EN_port1__write =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd3 &&
	     writeback_wr_request$wget[95:89] == 7'd115 &&
	     writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2396 ;
  assign csrfile_csr_minstreth$port2__read =
	     csrfile_csr_minstreth$EN_port1__write ?
	       csrfile_csr_mbadaddr$port0__write_1 :
	       counter_instret[63:32] ;
  assign csrfile_csr_mepc$EN_port0__write =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd3 &&
	     writeback_wr_request$wget[95:89] == 7'd115 &&
	     writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2123 ;
  assign csrfile_csr_mepc$port1__read =
	     csrfile_csr_mepc$EN_port0__write ?
	       csrfile_csr_mbadaddr$port0__write_1 :
	       csrfile_csr_mepc ;
  assign csrfile_csr_mepc$EN_port1__write =
	     WILL_FIRE_RL_writeback_rl_handle_traps &&
	     (x__h96177 != 2'd0 ||
	      IF_writeback_wr_trap_data_wget__592_BIT_4_593__ETC___d2642) ;
  assign csrfile_csr_mepc$port2__read =
	     csrfile_csr_mepc$EN_port1__write ?
	       writeback_wr_request$wget[151:120] :
	       csrfile_csr_mepc$port1__read ;
  assign csrfile_csr_mcause$EN_port0__write =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd3 &&
	     writeback_wr_request$wget[95:89] == 7'd115 &&
	     writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2144 ;
  assign csrfile_csr_mcause$port1__read =
	     csrfile_csr_mcause$EN_port0__write ?
	       csrfile_csr_mbadaddr$port0__write_1 :
	       csrfile_csr_mcause ;
  assign csrfile_csr_mcause$EN_port1__write =
	     WILL_FIRE_RL_writeback_rl_handle_traps &&
	     (x__h96177 != 2'd0 ||
	      IF_writeback_wr_trap_data_wget__592_BIT_4_593__ETC___d2642) ;
  assign csrfile_csr_mcause$port1__write_1 =
	     { writeback_wr_trap_data$wget[4], cause_code__h93947 } ;
  assign csrfile_csr_mcause$port2__read =
	     csrfile_csr_mcause$EN_port1__write ?
	       csrfile_csr_mcause$port1__write_1 :
	       csrfile_csr_mcause$port1__read ;
  assign csrfile_csr_mbadaddr$EN_port0__write =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd3 &&
	     writeback_wr_request$wget[95:89] == 7'd115 &&
	     writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2165 ;
  always@(writeback_wr_request$wget or
	  writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558 or
	  writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542 or
	  writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547 or
	  writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554)
  begin
    case (writeback_wr_request$wget[88:86])
      3'b001:
	  csrfile_csr_mbadaddr$port0__write_1 =
	      writeback_wr_request$wget[85:54];
      3'b010:
	  csrfile_csr_mbadaddr$port0__write_1 =
	      writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542;
      3'b011:
	  csrfile_csr_mbadaddr$port0__write_1 =
	      writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547;
      3'b101:
	  csrfile_csr_mbadaddr$port0__write_1 =
	      writeback_wr_request$wget[53:22];
      3'b110:
	  csrfile_csr_mbadaddr$port0__write_1 =
	      writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554;
      default: csrfile_csr_mbadaddr$port0__write_1 =
		   writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558;
    endcase
  end
  assign csrfile_csr_mbadaddr$port1__read =
	     csrfile_csr_mbadaddr$EN_port0__write ?
	       csrfile_csr_mbadaddr$port0__write_1 :
	       csrfile_csr_mbadaddr ;
  assign csrfile_csr_mbadaddr$EN_port1__write =
	     WILL_FIRE_RL_writeback_rl_handle_traps &&
	     NOT_csrfile_rg_prv_port1__read__590_EQ_0_591_6_ETC___d2644 ;
  assign csrfile_csr_mbadaddr$port2__read =
	     csrfile_csr_mbadaddr$EN_port1__write ?
	       writeback_wr_trap_data$wget[36:5] :
	       csrfile_csr_mbadaddr$port1__read ;
  assign csrfile_rg_tx$EN_port0__write =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d2493 ;
  always@(writeback_wr_request$wget or
	  writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558 or
	  writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542 or
	  writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547 or
	  writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554)
  begin
    case (writeback_wr_request$wget[88:86])
      3'b001: csrfile_rg_tx$port0__write_1 = writeback_wr_request$wget[61:54];
      3'b010:
	  csrfile_rg_tx$port0__write_1 =
	      writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542[7:0];
      3'b011:
	  csrfile_rg_tx$port0__write_1 =
	      writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547[7:0];
      3'b101: csrfile_rg_tx$port0__write_1 = writeback_wr_request$wget[29:22];
      3'b110:
	  csrfile_rg_tx$port0__write_1 =
	      writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554[7:0];
      default: csrfile_rg_tx$port0__write_1 =
		   writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558[7:0];
    endcase
  end
  assign csrfile_rg_tx$port1__read =
	     csrfile_rg_tx$EN_port0__write ?
	       csrfile_rg_tx$port0__write_1 :
	       csrfile_rg_tx ;
  assign csrfile_rg_rx$port1__write_1 =
	     { 1'b1, csrfile_uart_fifoRecv$D_OUT } ;
  assign csrfile_rg_rx$port2__read =
	     CAN_FIRE_RL_csrfile_uart_rx_connectionif ?
	       csrfile_rg_rx$port1__write_1 :
	       csrfile_rg_rx ;
  assign rg_stop_requested$EN_port0__write =
	     WILL_FIRE_RL_rl_write_back_response &&
	     !writeback_wr_response$wget[0] &&
	     writeback_wr_response$wget[1] ;
  assign rg_stop_requested$port1__read =
	     rg_stop_requested$EN_port0__write || rg_stop_requested ;
  assign rg_stop_requested$EN_port1__write =
	     EN_debug_ifc_run_continue || EN_debug_ifc_run_step ||
	     EN_debug_ifc_stop ||
	     EN_debug_ifc_rsp_read_memW ||
	     EN_debug_ifc_write_memW ;
  always@(EN_debug_ifc_stop or
	  EN_debug_ifc_run_step or
	  EN_debug_ifc_run_continue or
	  EN_debug_ifc_write_memW or EN_debug_ifc_rsp_read_memW)
  case (1'b1)
    EN_debug_ifc_stop || EN_debug_ifc_run_step:
	rg_stop_requested$port1__write_1 = 1'd1;
    EN_debug_ifc_run_continue: rg_stop_requested$port1__write_1 = 1'd0;
    EN_debug_ifc_write_memW || EN_debug_ifc_rsp_read_memW:
	rg_stop_requested$port1__write_1 = 1'd1;
    default: rg_stop_requested$port1__write_1 = 1'b0 /* unspecified value */ ;
  endcase
  assign rg_stop_requested$port2__read =
	     rg_stop_requested$EN_port1__write ?
	       rg_stop_requested$port1__write_1 :
	       rg_stop_requested$port1__read ;
  assign rg_stop_reason$port1__read =
	     WILL_FIRE_RL_rl_stop_cpu ? 4'd8 : rg_stop_reason ;
  assign f_dmem_reqs_rv$EN_port0__write =
	     EN_debug_ifc_req_read_memW || EN_debug_ifc_write_memW ;
  assign f_dmem_reqs_rv$port0__write_1 =
	     EN_debug_ifc_req_read_memW ?
	       MUX_f_dmem_reqs_rv$port0__write_1__VAL_1 :
	       MUX_f_dmem_reqs_rv$port0__write_1__VAL_2 ;
  assign f_dmem_reqs_rv$port1__read =
	     f_dmem_reqs_rv$EN_port0__write ?
	       f_dmem_reqs_rv$port0__write_1 :
	       f_dmem_reqs_rv ;
  assign f_dmem_rsps_rv$port0__write_1 =
	     { 1'd0, 58'h2AAAAAAAAAAAAAA /* unspecified value */  } ;
  assign f_dmem_rsps_rv$port1__read =
	     EN_debug_ifc_rsp_read_memW ?
	       f_dmem_rsps_rv$port0__write_1 :
	       f_dmem_rsps_rv ;
  assign f_if_ex_rv$EN_port0__write =
	     WILL_FIRE_RL_rl_read_execute && execute_wr_response$wget[119] ;
  assign f_if_ex_rv$port0__write_1 =
	     { 1'd0, 71'h2AAAAAAAAAAAAAAAAA /* unspecified value */  } ;
  assign f_if_ex_rv$port1__read =
	     f_if_ex_rv$EN_port0__write ?
	       f_if_ex_rv$port0__write_1 :
	       f_if_ex_rv ;
  assign f_if_ex_rv$port1__write_1 =
	     { 1'd1,
	       this_pc__h99173,
	       fetch_icache_f_cpu_rsps_rv[32] ||
	       fetch_icache_f_cpu_rsps_rv[33],
	       (!fetch_icache_f_cpu_rsps_rv[32] &&
		!fetch_icache_f_cpu_rsps_rv[33]) ?
		 { 5'b01010 /* unspecified value */ ,
		   fetch_icache_f_cpu_rsps_rv[66:34] } :
		 { 1'd1,
		   this_pc__h99173,
		   1'd0,
		   fetch_icache_f_cpu_rsps_rv[32] ? 4'd0 : 4'd1 } } ;
  assign f_if_ex_rv$port2__read =
	     CAN_FIRE_RL_rl_fetch_response ?
	       f_if_ex_rv$port1__write_1 :
	       f_if_ex_rv$port1__read ;
  assign f_if_ex_rv$EN_port2__write =
	     WILL_FIRE_RL_rl_flush || EN_debug_ifc_reset ;
  assign f_if_ex_rv$port3__read =
	     f_if_ex_rv$EN_port2__write ?
	       f_if_ex_rv$port0__write_1 :
	       f_if_ex_rv$port2__read ;
  assign f_ex_wb_rv$port0__write_1 =
	     { 1'd0,
	       152'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  } ;
  assign f_ex_wb_rv$port1__read =
	     CAN_FIRE_RL_rl_write_back_response ?
	       f_ex_wb_rv$port0__write_1 :
	       f_ex_wb_rv ;
  assign f_ex_wb_rv$EN_port1__write =
	     WILL_FIRE_RL_rl_update_execute && f_if_ex_rv[38] ||
	     WILL_FIRE_RL_rl_read_execute ;
  assign f_ex_wb_rv$port1__write_1 =
	     WILL_FIRE_RL_rl_read_execute ?
	       MUX_f_ex_wb_rv$port1__write_1__VAL_1 :
	       MUX_f_ex_wb_rv$port1__write_1__VAL_2 ;
  assign f_ex_wb_rv$port2__read =
	     f_ex_wb_rv$EN_port1__write ?
	       f_ex_wb_rv$port1__write_1 :
	       f_ex_wb_rv$port1__read ;
  assign f_ex_wb_rv$EN_port2__write =
	     WILL_FIRE_RL_rl_flush || EN_debug_ifc_reset ;
  assign f_ex_wb_rv$port3__read =
	     f_ex_wb_rv$EN_port2__write ?
	       f_ex_wb_rv$port0__write_1 :
	       f_ex_wb_rv$port2__read ;
  assign fetch_rg_this_pc$port0__write_1 = { 1'd1, v__h98899 } ;
  assign fetch_rg_this_pc$port1__read =
	     CAN_FIRE_RL_rl_fetch_request ?
	       fetch_rg_this_pc$port0__write_1 :
	       fetch_rg_this_pc ;
  assign fetch_rg_this_pc$EN_port1__write =
	     WILL_FIRE_RL_fetch_rl_handle_redirections ||
	     WILL_FIRE_RL_fetch_rl_request_icache ||
	     EN_debug_ifc_reset ;
  assign fetch_rg_this_pc$port2__read =
	     fetch_rg_this_pc$EN_port1__write ?
	       fetch_rg_redirect_pc$port0__write_1 :
	       fetch_rg_this_pc$port1__read ;
  assign fetch_rg_redirect_pc$EN_port0__write =
	     WILL_FIRE_RL_rl_fetch_request && fetch_rg_redirect_pc[32] ;
  assign fetch_rg_redirect_pc$port0__write_1 =
	     { 1'd0, 32'hAAAAAAAA /* unspecified value */  } ;
  assign fetch_rg_redirect_pc$port1__read =
	     fetch_rg_redirect_pc$EN_port0__write ?
	       fetch_rg_redirect_pc$port0__write_1 :
	       fetch_rg_redirect_pc ;
  assign fetch_rg_redirect_pc$port1__write_1 =
	     { CAN_FIRE_RL_rl_flush && fetch_wr_redirect_3$wget[32],
	       (CAN_FIRE_RL_rl_flush && fetch_wr_redirect_3$wget[32]) ?
		 fetch_wr_redirect_3$wget[31:0] :
		 32'b0 } ;
  assign fetch_rg_redirect_pc$port2__read =
	     WILL_FIRE_RL_fetch_rl_handle_redirections ?
	       fetch_rg_redirect_pc$port1__write_1 :
	       fetch_rg_redirect_pc$port1__read ;
  assign fetch_rg_imem_state$port1__read =
	     !CAN_FIRE_RL_rl_fetch_response && fetch_rg_imem_state ;
  assign fetch_rg_imem_state$EN_port1__write =
	     WILL_FIRE_RL_fetch_rl_handle_redirections ||
	     EN_debug_ifc_reset ||
	     WILL_FIRE_RL_rl_fetch_request ;
  assign fetch_rg_imem_state$port2__read =
	     fetch_rg_imem_state$EN_port1__write ?
	       !MUX_fetch_rg_imem_state$port1__write_1__SEL_1 :
	       fetch_rg_imem_state$port1__read ;
  assign fetch_icache_f_imem_reqs_rv$port0__write_1 =
	     { 1'd0, 39'h2AAAAAAAAA /* unspecified value */  } ;
  assign fetch_icache_f_imem_reqs_rv$port1__read =
	     EN_imem_ifc_tx_get ?
	       fetch_icache_f_imem_reqs_rv$port0__write_1 :
	       fetch_icache_f_imem_reqs_rv ;
  assign fetch_icache_f_imem_reqs_rv$EN_port1__write =
	     WILL_FIRE_RL_fetch_rl_request_icache &&
	     fetch_rg_this_pc$port1__read[1:0] == 2'd0 ;
  assign fetch_icache_f_imem_reqs_rv$port1__write_1 =
	     { 1'd1, fetch_rg_this_pc$port1__read[31:0], 7'd4 } ;
  assign fetch_icache_f_imem_reqs_rv$port2__read =
	     fetch_icache_f_imem_reqs_rv$EN_port1__write ?
	       fetch_icache_f_imem_reqs_rv$port1__write_1 :
	       fetch_icache_f_imem_reqs_rv$port1__read ;
  assign fetch_icache_f_cpu_rsps_rv$EN_port0__write =
	     WILL_FIRE_RL_rl_fetch_response ||
	     WILL_FIRE_RL_fetch_icache_rl_discard_stale_responses ;
  assign fetch_icache_f_cpu_rsps_rv$port0__write_1 =
	     { 1'd0, 66'h2AAAAAAAAAAAAAAAA /* unspecified value */  } ;
  assign fetch_icache_f_cpu_rsps_rv$port1__read =
	     fetch_icache_f_cpu_rsps_rv$EN_port0__write ?
	       fetch_icache_f_cpu_rsps_rv$port0__write_1 :
	       fetch_icache_f_cpu_rsps_rv ;
  assign fetch_icache_f_cpu_rsps_rv$EN_port1__write =
	     WILL_FIRE_RL_fetch_rl_request_icache &&
	     fetch_rg_this_pc$port1__read[1:0] != 2'd0 ||
	     EN_imem_ifc_rx_put ;
  assign fetch_icache_f_cpu_rsps_rv$port1__write_1 =
	     MUX_fetch_icache_f_cpu_rsps_rv$port1__write_1__SEL_1 ?
	       MUX_fetch_icache_f_cpu_rsps_rv$port1__write_1__VAL_1 :
	       MUX_fetch_icache_f_cpu_rsps_rv$port1__write_1__VAL_2 ;
  assign fetch_icache_f_cpu_rsps_rv$port2__read =
	     fetch_icache_f_cpu_rsps_rv$EN_port1__write ?
	       fetch_icache_f_cpu_rsps_rv$port1__write_1 :
	       fetch_icache_f_cpu_rsps_rv$port1__read ;
  assign fetch_icache_rg_response_valid$port2__read =
	     WILL_FIRE_RL_fetch_rl_request_icache ||
	     fetch_icache_rg_response_valid ;
  assign fetch_icache_rg_response_valid$port3__read =
	     !MUX_fetch_rg_imem_state$port1__write_1__SEL_1 &&
	     fetch_icache_rg_response_valid$port2__read ;
  assign fetch_icache_rg_imem_state$EN_port0__write =
	     WILL_FIRE_RL_rl_fetch_response ||
	     WILL_FIRE_RL_fetch_icache_rl_discard_stale_responses ;
  assign fetch_icache_rg_imem_state$port1__read =
	     !fetch_icache_rg_imem_state$EN_port0__write &&
	     fetch_icache_rg_imem_state ;
  assign fetch_icache_rg_imem_state$port2__read =
	     WILL_FIRE_RL_fetch_rl_request_icache ||
	     fetch_icache_rg_imem_state$port1__read ;
  assign writeback_f_dmem_reqs_rv$EN_port0__write =
	     WILL_FIRE_RL_writeback_rl_handle_memory_request ||
	     WILL_FIRE_RL_writeback_rl_follow_up_store_request ;
  assign writeback_f_dmem_reqs_rv$port0__write_1 =
	     WILL_FIRE_RL_writeback_rl_handle_memory_request ?
	       MUX_writeback_f_dmem_reqs_rv$port0__write_1__VAL_1 :
	       MUX_writeback_f_dmem_reqs_rv$port0__write_1__VAL_2 ;
  assign writeback_f_dmem_reqs_rv$port1__read =
	     writeback_f_dmem_reqs_rv$EN_port0__write ?
	       writeback_f_dmem_reqs_rv$port0__write_1 :
	       writeback_f_dmem_reqs_rv ;
  assign writeback_f_dmem_reqs_rv$port1__write_1 =
	     { 1'd0,
	       110'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  } ;
  assign writeback_f_dmem_reqs_rv$port2__read =
	     EN_dmem_ifc_tx_get ?
	       writeback_f_dmem_reqs_rv$port1__write_1 :
	       writeback_f_dmem_reqs_rv$port1__read ;
  assign writeback_f_dmem_reqs_rv$port3__read =
	     EN_debug_ifc_reset ?
	       writeback_f_dmem_reqs_rv$port1__write_1 :
	       writeback_f_dmem_reqs_rv$port2__read ;
  assign writeback_f_dmem_rsps_rv$port0__write_1 = { 1'd1, dmem_ifc_rx_put } ;
  assign writeback_f_dmem_rsps_rv$port1__read =
	     EN_dmem_ifc_rx_put ?
	       writeback_f_dmem_rsps_rv$port0__write_1 :
	       writeback_f_dmem_rsps_rv ;
  assign writeback_f_dmem_rsps_rv$port2__read =
	     CAN_FIRE_RL_writeback_rl_handle_memory_response ?
	       f_dmem_rsps_rv$port0__write_1 :
	       writeback_f_dmem_rsps_rv$port1__read ;
  assign writeback_f_dmem_rsps_rv$port3__read =
	     EN_debug_ifc_reset ?
	       f_dmem_rsps_rv$port0__write_1 :
	       writeback_f_dmem_rsps_rv$port2__read ;
  assign writeback_rg_dmem_state$EN_port0__write =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd0 ;
  assign writeback_rg_dmem_state$port1__read =
	     writeback_rg_dmem_state$EN_port0__write ||
	     writeback_rg_dmem_state ;
  assign writeback_rg_dmem_state$port2__read =
	     !CAN_FIRE_RL_writeback_rl_data_memory_response &&
	     writeback_rg_dmem_state$port1__read ;
  assign writeback_dcache_f_dmem_reqs_rv$port0__write_1 =
	     { 1'd0,
	       297'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  } ;
  assign writeback_dcache_f_dmem_reqs_rv$port1__read =
	     CAN_FIRE_RL_writeback_rl_handle_memory_request ?
	       writeback_dcache_f_dmem_reqs_rv$port0__write_1 :
	       writeback_dcache_f_dmem_reqs_rv ;
  assign writeback_dcache_f_dmem_reqs_rv$EN_port1__write =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd0 ;
  assign writeback_dcache_f_dmem_reqs_rv$port1__write_1 =
	     { 1'd1,
	       writeback_wr_request$wget[110:79],
	       5'd1,
	       v_data_line__h33552,
	       (writeback_wr_request$wget[114:113] == 2'd0) ?
		 writeback_wr_request$wget[114:113] :
		 2'd1,
	       v_transfer_size__h33554 } ;
  assign writeback_dcache_f_dmem_reqs_rv$port2__read =
	     writeback_dcache_f_dmem_reqs_rv$EN_port1__write ?
	       writeback_dcache_f_dmem_reqs_rv$port1__write_1 :
	       writeback_dcache_f_dmem_reqs_rv$port1__read ;
  assign writeback_dcache_f_cpu_rsps_rv$port0__write_1 =
	     { 1'd0, 68'hAAAAAAAAAAAAAAAAA /* unspecified value */  } ;
  assign writeback_dcache_f_cpu_rsps_rv$port1__read =
	     CAN_FIRE_RL_writeback_rl_data_memory_response ?
	       writeback_dcache_f_cpu_rsps_rv$port0__write_1 :
	       writeback_dcache_f_cpu_rsps_rv ;
  assign writeback_dcache_f_cpu_rsps_rv$port1__write_1 =
	     { 1'd1,
	       writeback_f_dmem_rsps_rv$port1__read[55:24],
	       x__h98186,
	       1'd0,
	       writeback_rg_burst_addr,
	       2'b10 /* unspecified value */  } ;
  assign writeback_dcache_f_cpu_rsps_rv$port2__read =
	     CAN_FIRE_RL_writeback_rl_handle_memory_response ?
	       writeback_dcache_f_cpu_rsps_rv$port1__write_1 :
	       writeback_dcache_f_cpu_rsps_rv$port1__read ;

  // register counter_cycle
  assign counter_cycle$D_IN =
	     WILL_FIRE_RL_rl_count_cycles ?
	       MUX_counter_cycle$write_1__VAL_1 :
	       64'd0 ;
  assign counter_cycle$EN =
	     WILL_FIRE_RL_rl_count_cycles || EN_debug_ifc_reset ;

  // register counter_instret
  assign counter_instret$D_IN =
	     MUX_counter_instret$write_1__SEL_1 ?
	       MUX_counter_instret$write_1__VAL_1 :
	       64'd0 ;
  assign counter_instret$EN =
	     WILL_FIRE_RL_rl_write_back_response &&
	     writeback_wr_response$wget[2] ||
	     EN_debug_ifc_reset ;

  // register csrfile_csr_mbadaddr
  assign csrfile_csr_mbadaddr$D_IN = csrfile_csr_mbadaddr$port2__read ;
  assign csrfile_csr_mbadaddr$EN = 1'b1 ;

  // register csrfile_csr_mbase
  assign csrfile_csr_mbase$D_IN = csrfile_csr_mbadaddr$port0__write_1 ;
  assign csrfile_csr_mbase$EN =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd3 &&
	     writeback_wr_request$wget[95:89] == 7'd115 &&
	     writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2207 ;

  // register csrfile_csr_mbound
  assign csrfile_csr_mbound$D_IN = csrfile_csr_mbadaddr$port0__write_1 ;
  assign csrfile_csr_mbound$EN =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd3 &&
	     writeback_wr_request$wget[95:89] == 7'd115 &&
	     writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2228 ;

  // register csrfile_csr_mcause
  assign csrfile_csr_mcause$D_IN = csrfile_csr_mcause$port2__read ;
  assign csrfile_csr_mcause$EN = 1'b1 ;

  // register csrfile_csr_mcycle
  assign csrfile_csr_mcycle$D_IN = csrfile_csr_mcycle$port2__read ;
  assign csrfile_csr_mcycle$EN = 1'b1 ;

  // register csrfile_csr_mcycleh
  assign csrfile_csr_mcycleh$D_IN = csrfile_csr_mcycleh$port2__read ;
  assign csrfile_csr_mcycleh$EN = 1'b1 ;

  // register csrfile_csr_mdbase
  assign csrfile_csr_mdbase$D_IN = csrfile_csr_mbadaddr$port0__write_1 ;
  assign csrfile_csr_mdbase$EN =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd3 &&
	     writeback_wr_request$wget[95:89] == 7'd115 &&
	     writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2291 ;

  // register csrfile_csr_mdbound
  assign csrfile_csr_mdbound$D_IN = csrfile_csr_mbadaddr$port0__write_1 ;
  assign csrfile_csr_mdbound$EN =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd3 &&
	     writeback_wr_request$wget[95:89] == 7'd115 &&
	     writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2312 ;

  // register csrfile_csr_mepc
  assign csrfile_csr_mepc$D_IN = csrfile_csr_mepc$port2__read ;
  assign csrfile_csr_mepc$EN = 1'b1 ;

  // register csrfile_csr_mibase
  assign csrfile_csr_mibase$D_IN = csrfile_csr_mbadaddr$port0__write_1 ;
  assign csrfile_csr_mibase$EN =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd3 &&
	     writeback_wr_request$wget[95:89] == 7'd115 &&
	     writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2249 ;

  // register csrfile_csr_mibound
  assign csrfile_csr_mibound$D_IN = csrfile_csr_mbadaddr$port0__write_1 ;
  assign csrfile_csr_mibound$EN =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd3 &&
	     writeback_wr_request$wget[95:89] == 7'd115 &&
	     writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2270 ;

  // register csrfile_csr_minstret
  assign csrfile_csr_minstret$D_IN = csrfile_csr_minstret$port2__read ;
  assign csrfile_csr_minstret$EN = 1'b1 ;

  // register csrfile_csr_minstreth
  assign csrfile_csr_minstreth$D_IN = csrfile_csr_minstreth$port2__read ;
  assign csrfile_csr_minstreth$EN = 1'b1 ;

  // register csrfile_csr_misa
  assign csrfile_csr_misa$D_IN = csrfile_csr_mbadaddr$port0__write_1 ;
  assign csrfile_csr_misa$EN =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd3 &&
	     writeback_wr_request$wget[95:89] == 7'd115 &&
	     writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1894 ;

  // register csrfile_csr_mscratch
  assign csrfile_csr_mscratch$D_IN = csrfile_csr_mbadaddr$port0__write_1 ;
  assign csrfile_csr_mscratch$EN =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd3 &&
	     writeback_wr_request$wget[95:89] == 7'd115 &&
	     writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2102 ;

  // register csrfile_csr_ubadaddr
  assign csrfile_csr_ubadaddr$D_IN = csrfile_csr_ubadaddr$port2__read ;
  assign csrfile_csr_ubadaddr$EN = 1'b1 ;

  // register csrfile_csr_ucause
  assign csrfile_csr_ucause$D_IN = csrfile_csr_ucause$port2__read ;
  assign csrfile_csr_ucause$EN = 1'b1 ;

  // register csrfile_csr_uepc
  assign csrfile_csr_uepc$D_IN = csrfile_csr_uepc$port2__read ;
  assign csrfile_csr_uepc$EN = 1'b1 ;

  // register csrfile_csr_uscratch
  assign csrfile_csr_uscratch$D_IN = csrfile_csr_mbadaddr$port0__write_1 ;
  assign csrfile_csr_uscratch$EN =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd3 &&
	     writeback_wr_request$wget[95:89] == 7'd115 &&
	     writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1774 ;

  // register csrfile_rg_fs
  always@(writeback_wr_request$wget or
	  writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558 or
	  writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542 or
	  writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547 or
	  writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554)
  begin
    case (writeback_wr_request$wget[88:86])
      3'b001:
	  csrfile_rg_fs$D_IN =
	      (writeback_wr_request$wget[11:0] == 12'd0) ?
		writeback_wr_request$wget[66:65] :
		writeback_wr_request$wget[68:67];
      3'b010:
	  csrfile_rg_fs$D_IN =
	      (writeback_wr_request$wget[11:0] == 12'd0) ?
		writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542[12:11] :
		writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542[14:13];
      3'b011:
	  csrfile_rg_fs$D_IN =
	      (writeback_wr_request$wget[11:0] == 12'd0) ?
		writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547[12:11] :
		writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547[14:13];
      3'b101:
	  csrfile_rg_fs$D_IN =
	      (writeback_wr_request$wget[11:0] == 12'd0) ?
		writeback_wr_request$wget[34:33] :
		writeback_wr_request$wget[36:35];
      3'b110:
	  csrfile_rg_fs$D_IN =
	      (writeback_wr_request$wget[11:0] == 12'd0) ?
		writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554[12:11] :
		writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554[14:13];
      default: csrfile_rg_fs$D_IN =
		   (writeback_wr_request$wget[11:0] == 12'd0) ?
		     writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558[12:11] :
		     writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558[14:13];
    endcase
  end
  assign csrfile_rg_fs$EN =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d1537 ;

  // register csrfile_rg_medeleg
  always@(writeback_wr_request$wget or
	  writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558 or
	  writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542 or
	  writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547 or
	  writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554)
  begin
    case (writeback_wr_request$wget[88:86])
      3'b001: csrfile_rg_medeleg$D_IN = writeback_wr_request$wget[65:54];
      3'b010:
	  csrfile_rg_medeleg$D_IN =
	      writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542[11:0];
      3'b011:
	  csrfile_rg_medeleg$D_IN =
	      writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547[11:0];
      3'b101: csrfile_rg_medeleg$D_IN = writeback_wr_request$wget[33:22];
      3'b110:
	  csrfile_rg_medeleg$D_IN =
	      writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554[11:0];
      default: csrfile_rg_medeleg$D_IN =
		   writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558[11:0];
    endcase
  end
  assign csrfile_rg_medeleg$EN =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd3 &&
	     writeback_wr_request$wget[95:89] == 7'd115 &&
	     writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1963 ;

  // register csrfile_rg_meie
  always@(writeback_wr_request$wget or
	  writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558 or
	  writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542 or
	  writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547 or
	  writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554)
  begin
    case (writeback_wr_request$wget[88:86])
      3'b001: csrfile_rg_meie$D_IN = writeback_wr_request$wget[65];
      3'b010:
	  csrfile_rg_meie$D_IN =
	      writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542[11];
      3'b011:
	  csrfile_rg_meie$D_IN =
	      writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547[11];
      3'b101: csrfile_rg_meie$D_IN = writeback_wr_request$wget[33];
      3'b110:
	  csrfile_rg_meie$D_IN =
	      writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554[11];
      default: csrfile_rg_meie$D_IN =
		   writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558[11];
    endcase
  end
  assign csrfile_rg_meie$EN =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d2020 ;

  // register csrfile_rg_mideleg
  assign csrfile_rg_mideleg$D_IN = csrfile_rg_medeleg$D_IN ;
  assign csrfile_rg_mideleg$EN =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd3 &&
	     writeback_wr_request$wget[95:89] == 7'd115 &&
	     writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1995 ;

  // register csrfile_rg_mie
  assign csrfile_rg_mie$D_IN = csrfile_rg_mie$port2__read ;
  assign csrfile_rg_mie$EN = 1'b1 ;

  // register csrfile_rg_mpie
  assign csrfile_rg_mpie$D_IN = csrfile_rg_mpie$port2__read ;
  assign csrfile_rg_mpie$EN = 1'b1 ;

  // register csrfile_rg_mpp
  assign csrfile_rg_mpp$D_IN = csrfile_rg_mpp$port2__read ;
  assign csrfile_rg_mpp$EN = 1'b1 ;

  // register csrfile_rg_mprv
  always@(writeback_wr_request$wget or
	  writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558 or
	  writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542 or
	  writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547 or
	  writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554)
  begin
    case (writeback_wr_request$wget[88:86])
      3'b001:
	  csrfile_rg_mprv$D_IN =
	      (writeback_wr_request$wget[11:0] == 12'd0) ?
		writeback_wr_request$wget[69] :
		writeback_wr_request$wget[71];
      3'b010:
	  csrfile_rg_mprv$D_IN =
	      (writeback_wr_request$wget[11:0] == 12'd0) ?
		writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542[15] :
		writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542[17];
      3'b011:
	  csrfile_rg_mprv$D_IN =
	      (writeback_wr_request$wget[11:0] == 12'd0) ?
		writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547[15] :
		writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547[17];
      3'b101:
	  csrfile_rg_mprv$D_IN =
	      (writeback_wr_request$wget[11:0] == 12'd0) ?
		writeback_wr_request$wget[37] :
		writeback_wr_request$wget[39];
      3'b110:
	  csrfile_rg_mprv$D_IN =
	      (writeback_wr_request$wget[11:0] == 12'd0) ?
		writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554[15] :
		writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554[17];
      default: csrfile_rg_mprv$D_IN =
		   (writeback_wr_request$wget[11:0] == 12'd0) ?
		     writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558[15] :
		     writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558[17];
    endcase
  end
  assign csrfile_rg_mprv$EN =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d1537 ;

  // register csrfile_rg_msie
  assign csrfile_rg_msie$D_IN =
	     IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1946 ;
  assign csrfile_rg_msie$EN =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d2020 ;

  // register csrfile_rg_mtie
  assign csrfile_rg_mtie$D_IN =
	     IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1935 ;
  assign csrfile_rg_mtie$EN =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d2020 ;

  // register csrfile_rg_mtvec
  always@(writeback_wr_request$wget or
	  writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558 or
	  writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542 or
	  writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547 or
	  writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554)
  begin
    case (writeback_wr_request$wget[88:86])
      3'b001: csrfile_rg_mtvec$D_IN = writeback_wr_request$wget[85:56];
      3'b010:
	  csrfile_rg_mtvec$D_IN =
	      writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542[31:2];
      3'b011:
	  csrfile_rg_mtvec$D_IN =
	      writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547[31:2];
      3'b101: csrfile_rg_mtvec$D_IN = writeback_wr_request$wget[53:24];
      3'b110:
	  csrfile_rg_mtvec$D_IN =
	      writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554[31:2];
      default: csrfile_rg_mtvec$D_IN =
		   writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558[31:2];
    endcase
  end
  assign csrfile_rg_mtvec$EN =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd3 &&
	     writeback_wr_request$wget[95:89] == 7'd115 &&
	     writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2081 ;

  // register csrfile_rg_mxr
  always@(writeback_wr_request$wget or
	  writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558 or
	  writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542 or
	  writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547 or
	  writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554)
  begin
    case (writeback_wr_request$wget[88:86])
      3'b001:
	  csrfile_rg_mxr$D_IN =
	      (writeback_wr_request$wget[11:0] == 12'd0) ?
		writeback_wr_request$wget[71] :
		writeback_wr_request$wget[73];
      3'b010:
	  csrfile_rg_mxr$D_IN =
	      (writeback_wr_request$wget[11:0] == 12'd0) ?
		writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542[17] :
		writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542[19];
      3'b011:
	  csrfile_rg_mxr$D_IN =
	      (writeback_wr_request$wget[11:0] == 12'd0) ?
		writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547[17] :
		writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547[19];
      3'b101:
	  csrfile_rg_mxr$D_IN =
	      (writeback_wr_request$wget[11:0] == 12'd0) ?
		writeback_wr_request$wget[39] :
		writeback_wr_request$wget[41];
      3'b110:
	  csrfile_rg_mxr$D_IN =
	      (writeback_wr_request$wget[11:0] == 12'd0) ?
		writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554[17] :
		writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554[19];
      default: csrfile_rg_mxr$D_IN =
		   (writeback_wr_request$wget[11:0] == 12'd0) ?
		     writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558[17] :
		     writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558[19];
    endcase
  end
  assign csrfile_rg_mxr$EN =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d1537 ;

  // register csrfile_rg_prv
  assign csrfile_rg_prv$D_IN = csrfile_rg_prv$port2__read ;
  assign csrfile_rg_prv$EN = 1'b1 ;

  // register csrfile_rg_pum
  always@(writeback_wr_request$wget or
	  writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558 or
	  writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542 or
	  writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547 or
	  writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554)
  begin
    case (writeback_wr_request$wget[88:86])
      3'b001:
	  csrfile_rg_pum$D_IN =
	      (writeback_wr_request$wget[11:0] == 12'd0) ?
		writeback_wr_request$wget[70] :
		writeback_wr_request$wget[72];
      3'b010:
	  csrfile_rg_pum$D_IN =
	      (writeback_wr_request$wget[11:0] == 12'd0) ?
		writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542[16] :
		writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542[18];
      3'b011:
	  csrfile_rg_pum$D_IN =
	      (writeback_wr_request$wget[11:0] == 12'd0) ?
		writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547[16] :
		writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547[18];
      3'b101:
	  csrfile_rg_pum$D_IN =
	      (writeback_wr_request$wget[11:0] == 12'd0) ?
		writeback_wr_request$wget[38] :
		writeback_wr_request$wget[40];
      3'b110:
	  csrfile_rg_pum$D_IN =
	      (writeback_wr_request$wget[11:0] == 12'd0) ?
		writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554[16] :
		writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554[18];
      default: csrfile_rg_pum$D_IN =
		   (writeback_wr_request$wget[11:0] == 12'd0) ?
		     writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558[16] :
		     writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558[18];
    endcase
  end
  assign csrfile_rg_pum$EN =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d1537 ;

  // register csrfile_rg_rx
  assign csrfile_rg_rx$D_IN = csrfile_rg_rx$port2__read ;
  assign csrfile_rg_rx$EN = 1'b1 ;

  // register csrfile_rg_s_cy
  assign csrfile_rg_s_cy$D_IN = 1'b0 ;
  assign csrfile_rg_s_cy$EN = 1'b0 ;

  // register csrfile_rg_s_ir
  assign csrfile_rg_s_ir$D_IN = 1'b0 ;
  assign csrfile_rg_s_ir$EN = 1'b0 ;

  // register csrfile_rg_s_tm
  assign csrfile_rg_s_tm$D_IN = 1'b0 ;
  assign csrfile_rg_s_tm$EN = 1'b0 ;

  // register csrfile_rg_seie
  always@(writeback_wr_request$wget or
	  writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558 or
	  writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542 or
	  writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547 or
	  writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554)
  begin
    case (writeback_wr_request$wget[88:86])
      3'b001: csrfile_rg_seie$D_IN = writeback_wr_request$wget[63];
      3'b010:
	  csrfile_rg_seie$D_IN =
	      writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542[9];
      3'b011:
	  csrfile_rg_seie$D_IN =
	      writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547[9];
      3'b101: csrfile_rg_seie$D_IN = writeback_wr_request$wget[31];
      3'b110:
	  csrfile_rg_seie$D_IN =
	      writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554[9];
      default: csrfile_rg_seie$D_IN =
		   writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558[9];
    endcase
  end
  assign csrfile_rg_seie$EN =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d2020 ;

  // register csrfile_rg_seip
  assign csrfile_rg_seip$D_IN = 1'b0 ;
  assign csrfile_rg_seip$EN = 1'b0 ;

  // register csrfile_rg_ssie
  always@(writeback_wr_request$wget or
	  writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558 or
	  writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542 or
	  writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547 or
	  writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554)
  begin
    case (writeback_wr_request$wget[88:86])
      3'b001: csrfile_rg_ssie$D_IN = writeback_wr_request$wget[55];
      3'b010:
	  csrfile_rg_ssie$D_IN =
	      writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542[1];
      3'b011:
	  csrfile_rg_ssie$D_IN =
	      writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547[1];
      3'b101: csrfile_rg_ssie$D_IN = writeback_wr_request$wget[23];
      3'b110:
	  csrfile_rg_ssie$D_IN =
	      writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554[1];
      default: csrfile_rg_ssie$D_IN =
		   writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558[1];
    endcase
  end
  assign csrfile_rg_ssie$EN =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d2020 ;

  // register csrfile_rg_ssip
  assign csrfile_rg_ssip$D_IN = 1'b0 ;
  assign csrfile_rg_ssip$EN = 1'b0 ;

  // register csrfile_rg_stie
  always@(writeback_wr_request$wget or
	  writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558 or
	  writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542 or
	  writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547 or
	  writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554)
  begin
    case (writeback_wr_request$wget[88:86])
      3'b001: csrfile_rg_stie$D_IN = writeback_wr_request$wget[59];
      3'b010:
	  csrfile_rg_stie$D_IN =
	      writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542[5];
      3'b011:
	  csrfile_rg_stie$D_IN =
	      writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547[5];
      3'b101: csrfile_rg_stie$D_IN = writeback_wr_request$wget[27];
      3'b110:
	  csrfile_rg_stie$D_IN =
	      writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554[5];
      default: csrfile_rg_stie$D_IN =
		   writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558[5];
    endcase
  end
  assign csrfile_rg_stie$EN =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d2020 ;

  // register csrfile_rg_stip
  assign csrfile_rg_stip$D_IN = 1'b0 ;
  assign csrfile_rg_stip$EN = 1'b0 ;

  // register csrfile_rg_tmp
  assign csrfile_rg_tmp$D_IN = csrfile_csr_minstret ;
  assign csrfile_rg_tmp$EN = CAN_FIRE_RL_csrfile_rl_print_csrs ;

  // register csrfile_rg_tx
  assign csrfile_rg_tx$D_IN = csrfile_rg_tx$port1__read ;
  assign csrfile_rg_tx$EN = 1'b1 ;

  // register csrfile_rg_u_cy
  assign csrfile_rg_u_cy$D_IN =
	     IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1689 ;
  assign csrfile_rg_u_cy$EN =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d2421 ;

  // register csrfile_rg_u_ir
  always@(writeback_wr_request$wget or
	  writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558 or
	  writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542 or
	  writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547 or
	  writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554)
  begin
    case (writeback_wr_request$wget[88:86])
      3'b001: csrfile_rg_u_ir$D_IN = writeback_wr_request$wget[56];
      3'b010:
	  csrfile_rg_u_ir$D_IN =
	      writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542[2];
      3'b011:
	  csrfile_rg_u_ir$D_IN =
	      writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547[2];
      3'b101: csrfile_rg_u_ir$D_IN = writeback_wr_request$wget[24];
      3'b110:
	  csrfile_rg_u_ir$D_IN =
	      writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554[2];
      default: csrfile_rg_u_ir$D_IN =
		   writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558[2];
    endcase
  end
  assign csrfile_rg_u_ir$EN =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d2421 ;

  // register csrfile_rg_u_tm
  assign csrfile_rg_u_tm$D_IN = csrfile_rg_ssie$D_IN ;
  assign csrfile_rg_u_tm$EN =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d2421 ;

  // register csrfile_rg_ueie
  always@(writeback_wr_request$wget or
	  writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558 or
	  writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542 or
	  writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547 or
	  writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554)
  begin
    case (writeback_wr_request$wget[88:86])
      3'b001: csrfile_rg_ueie$D_IN = writeback_wr_request$wget[62];
      3'b010:
	  csrfile_rg_ueie$D_IN =
	      writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542[8];
      3'b011:
	  csrfile_rg_ueie$D_IN =
	      writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547[8];
      3'b101: csrfile_rg_ueie$D_IN = writeback_wr_request$wget[30];
      3'b110:
	  csrfile_rg_ueie$D_IN =
	      writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554[8];
      default: csrfile_rg_ueie$D_IN =
		   writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558[8];
    endcase
  end
  assign csrfile_rg_ueie$EN =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d1714 ;

  // register csrfile_rg_ueip
  assign csrfile_rg_ueip$D_IN = 1'b0 ;
  assign csrfile_rg_ueip$EN = 1'b0 ;

  // register csrfile_rg_uie
  assign csrfile_rg_uie$D_IN = csrfile_rg_uie$port2__read ;
  assign csrfile_rg_uie$EN = 1'b1 ;

  // register csrfile_rg_upie
  assign csrfile_rg_upie$D_IN = csrfile_rg_upie$port1__read ;
  assign csrfile_rg_upie$EN = 1'b1 ;

  // register csrfile_rg_usie
  assign csrfile_rg_usie$D_IN =
	     IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1689 ;
  assign csrfile_rg_usie$EN =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d1714 ;

  // register csrfile_rg_usip
  assign csrfile_rg_usip$D_IN =
	     IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1689 ;
  assign csrfile_rg_usip$EN =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd3 &&
	     writeback_wr_request$wget[95:89] == 7'd115 &&
	     writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1873 ;

  // register csrfile_rg_utie
  assign csrfile_rg_utie$D_IN =
	     IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1678 ;
  assign csrfile_rg_utie$EN =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d1714 ;

  // register csrfile_rg_utip
  assign csrfile_rg_utip$D_IN =
	     IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1678 ;
  assign csrfile_rg_utip$EN =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd3 &&
	     writeback_wr_request$wget[95:89] == 7'd115 &&
	     writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2186 ;

  // register csrfile_rg_utvec
  assign csrfile_rg_utvec$D_IN = csrfile_rg_mtvec$D_IN ;
  assign csrfile_rg_utvec$EN =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd3 &&
	     writeback_wr_request$wget[95:89] == 7'd115 &&
	     writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1742 ;

  // register csrfile_rg_vm
  always@(writeback_wr_request$wget or
	  writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558 or
	  writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542 or
	  writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547 or
	  writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554)
  begin
    case (writeback_wr_request$wget[88:86])
      3'b001:
	  csrfile_rg_vm$D_IN =
	      (writeback_wr_request$wget[11:0] == 12'd0) ?
		writeback_wr_request$wget[80:76] :
		writeback_wr_request$wget[82:78];
      3'b010:
	  csrfile_rg_vm$D_IN =
	      (writeback_wr_request$wget[11:0] == 12'd0) ?
		writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542[26:22] :
		writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542[28:24];
      3'b011:
	  csrfile_rg_vm$D_IN =
	      (writeback_wr_request$wget[11:0] == 12'd0) ?
		writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547[26:22] :
		writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547[28:24];
      3'b101:
	  csrfile_rg_vm$D_IN =
	      (writeback_wr_request$wget[11:0] == 12'd0) ?
		writeback_wr_request$wget[48:44] :
		writeback_wr_request$wget[50:46];
      3'b110:
	  csrfile_rg_vm$D_IN =
	      (writeback_wr_request$wget[11:0] == 12'd0) ?
		writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554[26:22] :
		writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554[28:24];
      default: csrfile_rg_vm$D_IN =
		   (writeback_wr_request$wget[11:0] == 12'd0) ?
		     writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558[26:22] :
		     writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558[28:24];
    endcase
  end
  assign csrfile_rg_vm$EN =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d1537 ;

  // register csrfile_rg_xs
  always@(writeback_wr_request$wget or
	  writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558 or
	  writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542 or
	  writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547 or
	  writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554)
  begin
    case (writeback_wr_request$wget[88:86])
      3'b001:
	  csrfile_rg_xs$D_IN =
	      (writeback_wr_request$wget[11:0] == 12'd0) ?
		writeback_wr_request$wget[68:67] :
		writeback_wr_request$wget[70:69];
      3'b010:
	  csrfile_rg_xs$D_IN =
	      (writeback_wr_request$wget[11:0] == 12'd0) ?
		writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542[14:13] :
		writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542[16:15];
      3'b011:
	  csrfile_rg_xs$D_IN =
	      (writeback_wr_request$wget[11:0] == 12'd0) ?
		writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547[14:13] :
		writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547[16:15];
      3'b101:
	  csrfile_rg_xs$D_IN =
	      (writeback_wr_request$wget[11:0] == 12'd0) ?
		writeback_wr_request$wget[36:35] :
		writeback_wr_request$wget[38:37];
      3'b110:
	  csrfile_rg_xs$D_IN =
	      (writeback_wr_request$wget[11:0] == 12'd0) ?
		writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554[14:13] :
		writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554[16:15];
      default: csrfile_rg_xs$D_IN =
		   (writeback_wr_request$wget[11:0] == 12'd0) ?
		     writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558[14:13] :
		     writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558[16:15];
    endcase
  end
  assign csrfile_rg_xs$EN =
	     WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	     IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d1537 ;

  // register csrfile_uart_fifoRecv_countReg
  assign csrfile_uart_fifoRecv_countReg$D_IN =
	     CAN_FIRE_RL_csrfile_uart_receive_stop_last_bit ?
	       csrfile_uart_fifoRecv_countReg + 2'd1 :
	       csrfile_uart_fifoRecv_countReg - 2'd1 ;
  assign csrfile_uart_fifoRecv_countReg$EN =
	     CAN_FIRE_RL_csrfile_uart_fifoRecv__updateLevelCounter ;

  // register csrfile_uart_fifoXmit_countReg
  assign csrfile_uart_fifoXmit_countReg$D_IN =
	     CAN_FIRE_RL_csrfile_send_transimission_data0 ?
	       csrfile_uart_fifoXmit_countReg + 2'd1 :
	       csrfile_uart_fifoXmit_countReg - 2'd1 ;
  assign csrfile_uart_fifoXmit_countReg$EN =
	     CAN_FIRE_RL_csrfile_uart_fifoXmit__updateLevelCounter ;

  // register csrfile_uart_rRecvBitCount
  assign csrfile_uart_rRecvBitCount$D_IN =
	     csrfile_uart_pwRecvResetBitCount$whas ? 4'd0 : x__h10437 ;
  assign csrfile_uart_rRecvBitCount$EN =
	     csrfile_uart_pwRecvResetBitCount$whas ||
	     csrfile_uart_pwRecvEnableBitCount$whas ;

  // register csrfile_uart_rRecvCellCount
  assign csrfile_uart_rRecvCellCount$D_IN =
	     csrfile_uart_pwRecvCellCountReset$whas ? 4'd0 : x__h8796 ;
  assign csrfile_uart_rRecvCellCount$EN =
	     CAN_FIRE_RL_csrfile_uart_baudGen_count_baudtick_16x ;

  // register csrfile_uart_rRecvData
  assign csrfile_uart_rRecvData$D_IN = uart_ifc_sin_in ;
  assign csrfile_uart_rRecvData$EN = EN_uart_ifc_sin ;

  // register csrfile_uart_rRecvParity
  assign csrfile_uart_rRecvParity$D_IN = csrfile_uart_rRecvData ;
  assign csrfile_uart_rRecvParity$EN =
	     CAN_FIRE_RL_csrfile_uart_receive_parity_bit ;

  // register csrfile_uart_rRecvState
  always@(WILL_FIRE_RL_csrfile_uart_receive_wait_for_start_bit or
	  MUX_csrfile_uart_rRecvState$write_1__VAL_1 or
	  WILL_FIRE_RL_csrfile_uart_receive_find_center_of_bit_cell or
	  MUX_csrfile_uart_rRecvState$write_1__VAL_2 or
	  WILL_FIRE_RL_csrfile_uart_receive_wait_bit_cell_time_for_sample or
	  MUX_csrfile_uart_rRecvState$write_1__VAL_3 or
	  WILL_FIRE_RL_csrfile_uart_receive_stop_first_bit or
	  MUX_csrfile_uart_rRecvState$write_1__VAL_4 or
	  WILL_FIRE_RL_csrfile_uart_receive_stop_last_bit or
	  MUX_csrfile_uart_rRecvState$write_1__SEL_6)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_csrfile_uart_receive_wait_for_start_bit:
	  csrfile_uart_rRecvState$D_IN =
	      MUX_csrfile_uart_rRecvState$write_1__VAL_1;
      WILL_FIRE_RL_csrfile_uart_receive_find_center_of_bit_cell:
	  csrfile_uart_rRecvState$D_IN =
	      MUX_csrfile_uart_rRecvState$write_1__VAL_2;
      WILL_FIRE_RL_csrfile_uart_receive_wait_bit_cell_time_for_sample:
	  csrfile_uart_rRecvState$D_IN =
	      MUX_csrfile_uart_rRecvState$write_1__VAL_3;
      WILL_FIRE_RL_csrfile_uart_receive_stop_first_bit:
	  csrfile_uart_rRecvState$D_IN =
	      MUX_csrfile_uart_rRecvState$write_1__VAL_4;
      WILL_FIRE_RL_csrfile_uart_receive_stop_last_bit:
	  csrfile_uart_rRecvState$D_IN = 3'd0;
      MUX_csrfile_uart_rRecvState$write_1__SEL_6:
	  csrfile_uart_rRecvState$D_IN = 3'd2;
      default: csrfile_uart_rRecvState$D_IN = 3'b010 /* unspecified value */ ;
    endcase
  end
  assign csrfile_uart_rRecvState$EN =
	     WILL_FIRE_RL_csrfile_uart_receive_wait_for_start_bit ||
	     WILL_FIRE_RL_csrfile_uart_receive_find_center_of_bit_cell ||
	     WILL_FIRE_RL_csrfile_uart_receive_wait_bit_cell_time_for_sample ||
	     WILL_FIRE_RL_csrfile_uart_receive_stop_first_bit ||
	     WILL_FIRE_RL_csrfile_uart_receive_stop_last_bit ||
	     WILL_FIRE_RL_csrfile_uart_receive_parity_bit ||
	     WILL_FIRE_RL_csrfile_uart_receive_sample_pin ;

  // register csrfile_uart_rXmitBitCount
  assign csrfile_uart_rXmitBitCount$D_IN =
	     CAN_FIRE_RL_csrfile_uart_transmit_wait_for_start_command ?
	       4'd0 :
	       x__h12278 ;
  assign csrfile_uart_rXmitBitCount$EN =
	     CAN_FIRE_RL_csrfile_uart_transmit_wait_for_start_command ||
	     csrfile_uart_pwXmitEnableBitCount$whas ;

  // register csrfile_uart_rXmitCellCount
  assign csrfile_uart_rXmitCellCount$D_IN =
	     csrfile_uart_pwXmitCellCountReset$whas ? 4'd0 : x__h12252 ;
  assign csrfile_uart_rXmitCellCount$EN =
	     CAN_FIRE_RL_csrfile_uart_baudGen_count_baudtick_16x ;

  // register csrfile_uart_rXmitDataOut
  always@(MUX_csrfile_uart_rXmitDataOut$write_1__SEL_1 or
	  csrfile_uart_vrXmitBuffer_0 or
	  MUX_csrfile_uart_rXmitDataOut$write_1__SEL_2 or
	  MUX_csrfile_uart_rXmitDataOut$write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_csrfile_uart_rXmitDataOut$write_1__SEL_1:
	  csrfile_uart_rXmitDataOut$D_IN = csrfile_uart_vrXmitBuffer_0;
      MUX_csrfile_uart_rXmitDataOut$write_1__SEL_2:
	  csrfile_uart_rXmitDataOut$D_IN = 1'b0;
      MUX_csrfile_uart_rXmitDataOut$write_1__SEL_3:
	  csrfile_uart_rXmitDataOut$D_IN = 1'b1;
      default: csrfile_uart_rXmitDataOut$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign csrfile_uart_rXmitDataOut$EN =
	     WILL_FIRE_RL_csrfile_uart_transmit_shift_next_bit ||
	     WILL_FIRE_RL_csrfile_uart_transmit_wait_1_bit_cell_time ||
	     WILL_FIRE_RL_csrfile_uart_transmit_send_parity_bit ||
	     WILL_FIRE_RL_csrfile_uart_transmit_send_start_bit ||
	     WILL_FIRE_RL_csrfile_uart_transmit_send_stop_bit2 ||
	     WILL_FIRE_RL_csrfile_uart_transmit_send_stop_bit1_5 ||
	     WILL_FIRE_RL_csrfile_uart_transmit_send_stop_bit ||
	     WILL_FIRE_RL_csrfile_uart_transmit_wait_for_start_command ;

  // register csrfile_uart_rXmitParity
  assign csrfile_uart_rXmitParity$D_IN =
	     z__h13701 ^ csrfile_uart_fifoXmit$D_OUT[7] ;
  assign csrfile_uart_rXmitParity$EN =
	     CAN_FIRE_RL_csrfile_uart_transmit_buffer_load ;

  // register csrfile_uart_rXmitState
  always@(WILL_FIRE_RL_csrfile_uart_transmit_wait_for_start_command or
	  MUX_csrfile_uart_rXmitState$write_1__VAL_1 or
	  WILL_FIRE_RL_csrfile_uart_transmit_send_start_bit or
	  MUX_csrfile_uart_rXmitState$write_1__VAL_2 or
	  WILL_FIRE_RL_csrfile_uart_transmit_wait_1_bit_cell_time or
	  MUX_csrfile_uart_rXmitState$write_1__VAL_3 or
	  WILL_FIRE_RL_csrfile_uart_transmit_send_parity_bit or
	  MUX_csrfile_uart_rXmitState$write_1__VAL_4 or
	  WILL_FIRE_RL_csrfile_uart_transmit_send_stop_bit or
	  MUX_csrfile_uart_rXmitState$write_1__VAL_5 or
	  WILL_FIRE_RL_csrfile_uart_transmit_send_stop_bit1_5 or
	  MUX_csrfile_uart_rXmitState$write_1__VAL_6 or
	  WILL_FIRE_RL_csrfile_uart_transmit_send_stop_bit2 or
	  MUX_csrfile_uart_rXmitState$write_1__VAL_7 or
	  WILL_FIRE_RL_csrfile_uart_transmit_shift_next_bit)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_csrfile_uart_transmit_wait_for_start_command:
	  csrfile_uart_rXmitState$D_IN =
	      MUX_csrfile_uart_rXmitState$write_1__VAL_1;
      WILL_FIRE_RL_csrfile_uart_transmit_send_start_bit:
	  csrfile_uart_rXmitState$D_IN =
	      MUX_csrfile_uart_rXmitState$write_1__VAL_2;
      WILL_FIRE_RL_csrfile_uart_transmit_wait_1_bit_cell_time:
	  csrfile_uart_rXmitState$D_IN =
	      MUX_csrfile_uart_rXmitState$write_1__VAL_3;
      WILL_FIRE_RL_csrfile_uart_transmit_send_parity_bit:
	  csrfile_uart_rXmitState$D_IN =
	      MUX_csrfile_uart_rXmitState$write_1__VAL_4;
      WILL_FIRE_RL_csrfile_uart_transmit_send_stop_bit:
	  csrfile_uart_rXmitState$D_IN =
	      MUX_csrfile_uart_rXmitState$write_1__VAL_5;
      WILL_FIRE_RL_csrfile_uart_transmit_send_stop_bit1_5:
	  csrfile_uart_rXmitState$D_IN =
	      MUX_csrfile_uart_rXmitState$write_1__VAL_6;
      WILL_FIRE_RL_csrfile_uart_transmit_send_stop_bit2:
	  csrfile_uart_rXmitState$D_IN =
	      MUX_csrfile_uart_rXmitState$write_1__VAL_7;
      WILL_FIRE_RL_csrfile_uart_transmit_shift_next_bit:
	  csrfile_uart_rXmitState$D_IN = 3'd2;
      default: csrfile_uart_rXmitState$D_IN = 3'b010 /* unspecified value */ ;
    endcase
  end
  assign csrfile_uart_rXmitState$EN =
	     WILL_FIRE_RL_csrfile_uart_transmit_wait_for_start_command ||
	     WILL_FIRE_RL_csrfile_uart_transmit_send_start_bit ||
	     WILL_FIRE_RL_csrfile_uart_transmit_wait_1_bit_cell_time ||
	     WILL_FIRE_RL_csrfile_uart_transmit_send_parity_bit ||
	     WILL_FIRE_RL_csrfile_uart_transmit_send_stop_bit ||
	     WILL_FIRE_RL_csrfile_uart_transmit_send_stop_bit1_5 ||
	     WILL_FIRE_RL_csrfile_uart_transmit_send_stop_bit2 ||
	     WILL_FIRE_RL_csrfile_uart_transmit_shift_next_bit ;

  // register csrfile_uart_vrRecvBuffer_0
  assign csrfile_uart_vrRecvBuffer_0$D_IN = csrfile_uart_vrRecvBuffer_1 ;
  assign csrfile_uart_vrRecvBuffer_0$EN =
	     CAN_FIRE_RL_csrfile_uart_receive_buffer_shift ;

  // register csrfile_uart_vrRecvBuffer_1
  assign csrfile_uart_vrRecvBuffer_1$D_IN = csrfile_uart_vrRecvBuffer_2 ;
  assign csrfile_uart_vrRecvBuffer_1$EN =
	     CAN_FIRE_RL_csrfile_uart_receive_buffer_shift ;

  // register csrfile_uart_vrRecvBuffer_2
  assign csrfile_uart_vrRecvBuffer_2$D_IN = csrfile_uart_vrRecvBuffer_3 ;
  assign csrfile_uart_vrRecvBuffer_2$EN =
	     CAN_FIRE_RL_csrfile_uart_receive_buffer_shift ;

  // register csrfile_uart_vrRecvBuffer_3
  assign csrfile_uart_vrRecvBuffer_3$D_IN = csrfile_uart_vrRecvBuffer_4 ;
  assign csrfile_uart_vrRecvBuffer_3$EN =
	     CAN_FIRE_RL_csrfile_uart_receive_buffer_shift ;

  // register csrfile_uart_vrRecvBuffer_4
  assign csrfile_uart_vrRecvBuffer_4$D_IN = csrfile_uart_vrRecvBuffer_5 ;
  assign csrfile_uart_vrRecvBuffer_4$EN =
	     CAN_FIRE_RL_csrfile_uart_receive_buffer_shift ;

  // register csrfile_uart_vrRecvBuffer_5
  assign csrfile_uart_vrRecvBuffer_5$D_IN = csrfile_uart_vrRecvBuffer_6 ;
  assign csrfile_uart_vrRecvBuffer_5$EN =
	     CAN_FIRE_RL_csrfile_uart_receive_buffer_shift ;

  // register csrfile_uart_vrRecvBuffer_6
  assign csrfile_uart_vrRecvBuffer_6$D_IN = csrfile_uart_vrRecvBuffer_7 ;
  assign csrfile_uart_vrRecvBuffer_6$EN =
	     CAN_FIRE_RL_csrfile_uart_receive_buffer_shift ;

  // register csrfile_uart_vrRecvBuffer_7
  assign csrfile_uart_vrRecvBuffer_7$D_IN = csrfile_uart_rRecvData ;
  assign csrfile_uart_vrRecvBuffer_7$EN =
	     CAN_FIRE_RL_csrfile_uart_receive_buffer_shift ;

  // register csrfile_uart_vrXmitBuffer_0
  assign csrfile_uart_vrXmitBuffer_0$D_IN =
	     WILL_FIRE_RL_csrfile_uart_transmit_buffer_load ?
	       csrfile_uart_fifoXmit$D_OUT[0] :
	       csrfile_uart_vrXmitBuffer_1 ;
  assign csrfile_uart_vrXmitBuffer_0$EN =
	     WILL_FIRE_RL_csrfile_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_csrfile_uart_transmit_buffer_shift ;

  // register csrfile_uart_vrXmitBuffer_1
  assign csrfile_uart_vrXmitBuffer_1$D_IN =
	     WILL_FIRE_RL_csrfile_uart_transmit_buffer_load ?
	       csrfile_uart_fifoXmit$D_OUT[1] :
	       csrfile_uart_vrXmitBuffer_2 ;
  assign csrfile_uart_vrXmitBuffer_1$EN =
	     WILL_FIRE_RL_csrfile_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_csrfile_uart_transmit_buffer_shift ;

  // register csrfile_uart_vrXmitBuffer_2
  assign csrfile_uart_vrXmitBuffer_2$D_IN =
	     WILL_FIRE_RL_csrfile_uart_transmit_buffer_load ?
	       csrfile_uart_fifoXmit$D_OUT[2] :
	       csrfile_uart_vrXmitBuffer_3 ;
  assign csrfile_uart_vrXmitBuffer_2$EN =
	     WILL_FIRE_RL_csrfile_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_csrfile_uart_transmit_buffer_shift ;

  // register csrfile_uart_vrXmitBuffer_3
  assign csrfile_uart_vrXmitBuffer_3$D_IN =
	     WILL_FIRE_RL_csrfile_uart_transmit_buffer_load ?
	       csrfile_uart_fifoXmit$D_OUT[3] :
	       csrfile_uart_vrXmitBuffer_4 ;
  assign csrfile_uart_vrXmitBuffer_3$EN =
	     WILL_FIRE_RL_csrfile_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_csrfile_uart_transmit_buffer_shift ;

  // register csrfile_uart_vrXmitBuffer_4
  assign csrfile_uart_vrXmitBuffer_4$D_IN =
	     WILL_FIRE_RL_csrfile_uart_transmit_buffer_load ?
	       csrfile_uart_fifoXmit$D_OUT[4] :
	       csrfile_uart_vrXmitBuffer_5 ;
  assign csrfile_uart_vrXmitBuffer_4$EN =
	     WILL_FIRE_RL_csrfile_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_csrfile_uart_transmit_buffer_shift ;

  // register csrfile_uart_vrXmitBuffer_5
  assign csrfile_uart_vrXmitBuffer_5$D_IN =
	     WILL_FIRE_RL_csrfile_uart_transmit_buffer_load ?
	       csrfile_uart_fifoXmit$D_OUT[5] :
	       csrfile_uart_vrXmitBuffer_6 ;
  assign csrfile_uart_vrXmitBuffer_5$EN =
	     WILL_FIRE_RL_csrfile_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_csrfile_uart_transmit_buffer_shift ;

  // register csrfile_uart_vrXmitBuffer_6
  assign csrfile_uart_vrXmitBuffer_6$D_IN =
	     WILL_FIRE_RL_csrfile_uart_transmit_buffer_load ?
	       csrfile_uart_fifoXmit$D_OUT[6] :
	       csrfile_uart_vrXmitBuffer_7 ;
  assign csrfile_uart_vrXmitBuffer_6$EN =
	     WILL_FIRE_RL_csrfile_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_csrfile_uart_transmit_buffer_shift ;

  // register csrfile_uart_vrXmitBuffer_7
  assign csrfile_uart_vrXmitBuffer_7$D_IN =
	     !WILL_FIRE_RL_csrfile_uart_transmit_buffer_load ||
	     csrfile_uart_fifoXmit$D_OUT[7] ;
  assign csrfile_uart_vrXmitBuffer_7$EN =
	     WILL_FIRE_RL_csrfile_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_csrfile_uart_transmit_buffer_shift ;

  // register execute_rg_last_exec_pc
  assign execute_rg_last_exec_pc$D_IN = execute_wr_request$wget[32:1] ;
  assign execute_rg_last_exec_pc$EN = CAN_FIRE_RL_rl_read_execute ;

  // register f_dmem_reqs_rv
  assign f_dmem_reqs_rv$D_IN = f_dmem_reqs_rv$port1__read ;
  assign f_dmem_reqs_rv$EN = 1'b1 ;

  // register f_dmem_rsps_rv
  assign f_dmem_rsps_rv$D_IN = f_dmem_rsps_rv$port1__read ;
  assign f_dmem_rsps_rv$EN = 1'b1 ;

  // register f_ex_wb_rv
  assign f_ex_wb_rv$D_IN = f_ex_wb_rv$port3__read ;
  assign f_ex_wb_rv$EN = 1'b1 ;

  // register f_if_ex_rv
  assign f_if_ex_rv$D_IN = f_if_ex_rv$port3__read ;
  assign f_if_ex_rv$EN = 1'b1 ;

  // register fetch_icache_f_cpu_rsps_rv
  assign fetch_icache_f_cpu_rsps_rv$D_IN =
	     fetch_icache_f_cpu_rsps_rv$port2__read ;
  assign fetch_icache_f_cpu_rsps_rv$EN = 1'b1 ;

  // register fetch_icache_f_imem_reqs_rv
  assign fetch_icache_f_imem_reqs_rv$D_IN =
	     fetch_icache_f_imem_reqs_rv$port2__read ;
  assign fetch_icache_f_imem_reqs_rv$EN = 1'b1 ;

  // register fetch_icache_rg_imem_state
  assign fetch_icache_rg_imem_state$D_IN =
	     fetch_icache_rg_imem_state$port2__read ;
  assign fetch_icache_rg_imem_state$EN = 1'b1 ;

  // register fetch_icache_rg_response_valid
  assign fetch_icache_rg_response_valid$D_IN =
	     fetch_icache_rg_response_valid$port3__read ;
  assign fetch_icache_rg_response_valid$EN = 1'b1 ;

  // register fetch_rg_burst_addr
  assign fetch_rg_burst_addr$D_IN =
	     EN_imem_ifc_rx_put ?
	       MUX_fetch_rg_burst_addr$write_1__VAL_1 :
	       fetch_icache_f_imem_reqs_rv[38:7] ;
  assign fetch_rg_burst_addr$EN = EN_imem_ifc_tx_get || EN_imem_ifc_rx_put ;

  // register fetch_rg_burst_length
  assign fetch_rg_burst_length$D_IN =
	     { 5'd0, fetch_icache_f_imem_reqs_rv[6:2] } ;
  assign fetch_rg_burst_length$EN = EN_imem_ifc_tx_get ;

  // register fetch_rg_burst_size
  assign fetch_rg_burst_size$D_IN = 2'd3 ;
  assign fetch_rg_burst_size$EN = EN_imem_ifc_tx_get ;

  // register fetch_rg_fetch_pc
  always@(EN_debug_ifc_write_pc or
	  debug_ifc_write_pc_d or
	  WILL_FIRE_RL_rl_fetch_request or
	  MUX_fetch_rg_fetch_pc$write_1__VAL_2 or EN_debug_ifc_reset)
  begin
    case (1'b1) // synopsys parallel_case
      EN_debug_ifc_write_pc: fetch_rg_fetch_pc$D_IN = debug_ifc_write_pc_d;
      WILL_FIRE_RL_rl_fetch_request:
	  fetch_rg_fetch_pc$D_IN = MUX_fetch_rg_fetch_pc$write_1__VAL_2;
      EN_debug_ifc_reset: fetch_rg_fetch_pc$D_IN = 32'h80000000;
      default: fetch_rg_fetch_pc$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign fetch_rg_fetch_pc$EN =
	     EN_debug_ifc_write_pc || WILL_FIRE_RL_rl_fetch_request ||
	     EN_debug_ifc_reset ;

  // register fetch_rg_imem_state
  assign fetch_rg_imem_state$D_IN = fetch_rg_imem_state$port2__read ;
  assign fetch_rg_imem_state$EN = 1'b1 ;

  // register fetch_rg_redirect_pc
  assign fetch_rg_redirect_pc$D_IN = fetch_rg_redirect_pc$port2__read ;
  assign fetch_rg_redirect_pc$EN = 1'b1 ;

  // register fetch_rg_this_pc
  assign fetch_rg_this_pc$D_IN = fetch_rg_this_pc$port2__read ;
  assign fetch_rg_this_pc$EN = 1'b1 ;

  // register fetch_rg_verbosity
  assign fetch_rg_verbosity$D_IN = rg_verbosity ;
  assign fetch_rg_verbosity$EN = EN_debug_ifc_reset ;

  // register regfile_rg_count
  assign regfile_rg_count$D_IN =
	     WILL_FIRE_RL_regfile_rl_reset ?
	       MUX_regfile_rg_count$write_1__VAL_1 :
	       5'd0 ;
  assign regfile_rg_count$EN =
	     WILL_FIRE_RL_regfile_rl_reset ||
	     WILL_FIRE_RL_regfile_rl_signal_reset_completion ;

  // register regfile_rg_reset_complete
  assign regfile_rg_reset_complete$D_IN = !EN_debug_ifc_reset_complete ;
  assign regfile_rg_reset_complete$EN =
	     EN_debug_ifc_reset_complete ||
	     WILL_FIRE_RL_regfile_rl_signal_reset_completion ;

  // register regfile_rg_reset_init
  assign regfile_rg_reset_init$D_IN =
	     !WILL_FIRE_RL_regfile_rl_signal_reset_completion ;
  assign regfile_rg_reset_init$EN =
	     WILL_FIRE_RL_regfile_rl_signal_reset_completion ||
	     EN_debug_ifc_reset ;

  // register rg_cpu_mode
  assign rg_cpu_mode$D_IN = 1'd1 ;
  assign rg_cpu_mode$EN = EN_debug_ifc_reset ;

  // register rg_cpu_state
  assign rg_cpu_state$D_IN = WILL_FIRE_RL_rl_stop_cpu ;
  assign rg_cpu_state$EN =
	     EN_debug_ifc_write_pc && !rg_cpu_mode ||
	     EN_debug_ifc_run_continue ||
	     EN_debug_ifc_run_step ||
	     WILL_FIRE_RL_rl_stop_cpu ;

  // register rg_dmem_state
  assign rg_dmem_state$D_IN = rg_dmem_state ;
  assign rg_dmem_state$EN = 1'b1 ;

  // register rg_halt_requested
  assign rg_halt_requested$D_IN = writeback_wr_response$wget[0] ;
  assign rg_halt_requested$EN = CAN_FIRE_RL_rl_write_back_response ;

  // register rg_last_commit_pc
  assign rg_last_commit_pc$D_IN =
	     WILL_FIRE_RL_rl_write_back_request ?
	       f_ex_wb_rv[151:120] :
	       32'h80000000 ;
  assign rg_last_commit_pc$EN =
	     WILL_FIRE_RL_rl_write_back_request || EN_debug_ifc_reset ;

  // register rg_stop_reason
  assign rg_stop_reason$D_IN = rg_stop_reason$port1__read ;
  assign rg_stop_reason$EN = 1'b1 ;

  // register rg_stop_requested
  assign rg_stop_requested$D_IN = rg_stop_requested$port2__read ;
  assign rg_stop_requested$EN = 1'b1 ;

  // register rg_verbosity
  assign rg_verbosity$D_IN = debug_ifc_set_verbosity_verbosity ;
  assign rg_verbosity$EN = EN_debug_ifc_set_verbosity ;

  // register writeback_dcache_f_cpu_rsps_rv
  assign writeback_dcache_f_cpu_rsps_rv$D_IN =
	     writeback_dcache_f_cpu_rsps_rv$port2__read ;
  assign writeback_dcache_f_cpu_rsps_rv$EN = 1'b1 ;

  // register writeback_dcache_f_dmem_reqs_rv
  assign writeback_dcache_f_dmem_reqs_rv$D_IN =
	     writeback_dcache_f_dmem_reqs_rv$port2__read ;
  assign writeback_dcache_f_dmem_reqs_rv$EN = 1'b1 ;

  // register writeback_f_dmem_reqs_rv
  assign writeback_f_dmem_reqs_rv$D_IN =
	     writeback_f_dmem_reqs_rv$port3__read ;
  assign writeback_f_dmem_reqs_rv$EN = 1'b1 ;

  // register writeback_f_dmem_rsps_rv
  assign writeback_f_dmem_rsps_rv$D_IN =
	     writeback_f_dmem_rsps_rv$port3__read ;
  assign writeback_f_dmem_rsps_rv$EN = 1'b1 ;

  // register writeback_rg_burst_addr
  assign writeback_rg_burst_addr$D_IN =
	     WILL_FIRE_RL_writeback_rl_handle_memory_response ?
	       MUX_writeback_rg_burst_addr$write_1__VAL_1 :
	       writeback_dcache_f_dmem_reqs_rv[296:265] ;
  assign writeback_rg_burst_addr$EN =
	     WILL_FIRE_RL_writeback_rl_handle_memory_request ||
	     WILL_FIRE_RL_writeback_rl_handle_memory_response ;

  // register writeback_rg_burst_count
  always@(EN_debug_ifc_reset or
	  WILL_FIRE_RL_writeback_rl_follow_up_store_request or
	  MUX_writeback_rg_burst_count$write_1__VAL_2 or
	  MUX_writeback_rg_burst_count$write_1__SEL_3)
  case (1'b1)
    EN_debug_ifc_reset: writeback_rg_burst_count$D_IN = 10'd0;
    WILL_FIRE_RL_writeback_rl_follow_up_store_request:
	writeback_rg_burst_count$D_IN =
	    MUX_writeback_rg_burst_count$write_1__VAL_2;
    MUX_writeback_rg_burst_count$write_1__SEL_3:
	writeback_rg_burst_count$D_IN = 10'd1;
    default: writeback_rg_burst_count$D_IN =
		 10'b1010101010 /* unspecified value */ ;
  endcase
  assign writeback_rg_burst_count$EN =
	     WILL_FIRE_RL_writeback_rl_handle_memory_request &&
	     writeback_dcache_f_dmem_reqs_rv[3:2] != 2'd0 &&
	     { 5'd0, writeback_dcache_f_dmem_reqs_rv[264:260] } > 10'd1 ||
	     WILL_FIRE_RL_writeback_rl_follow_up_store_request ||
	     EN_debug_ifc_reset ;

  // register writeback_rg_burst_length
  assign writeback_rg_burst_length$D_IN =
	     { 5'd0, writeback_dcache_f_dmem_reqs_rv[264:260] } ;
  assign writeback_rg_burst_length$EN =
	     CAN_FIRE_RL_writeback_rl_handle_memory_request ;

  // register writeback_rg_burst_size
  assign writeback_rg_burst_size$D_IN = memReq_burst_size__h96473 ;
  assign writeback_rg_burst_size$EN =
	     CAN_FIRE_RL_writeback_rl_handle_memory_request ;

  // register writeback_rg_data_line
  assign writeback_rg_data_line$D_IN =
	     MUX_writeback_rg_data_line$write_1__SEL_1 ?
	       MUX_writeback_rg_data_line$write_1__VAL_1 :
	       MUX_writeback_rg_data_line$write_1__VAL_2 ;
  assign writeback_rg_data_line$EN =
	     WILL_FIRE_RL_writeback_rl_handle_memory_request &&
	     writeback_dcache_f_dmem_reqs_rv[3:2] != 2'd0 ||
	     WILL_FIRE_RL_writeback_rl_follow_up_store_request ;

  // register writeback_rg_dmem_state
  assign writeback_rg_dmem_state$D_IN = writeback_rg_dmem_state$port2__read ;
  assign writeback_rg_dmem_state$EN = 1'b1 ;

  // register writeback_rg_verbosity
  assign writeback_rg_verbosity$D_IN = rg_verbosity ;
  assign writeback_rg_verbosity$EN = EN_debug_ifc_reset ;

  // submodule _unnamed_
  assign _unnamed_$ADDR_1 =
	     (rg_cpu_mode && rg_cpu_state && !regfile_rg_reset_init) ?
	       debug_ifc_read_gpr_r :
	       f_if_ex_rv[24:20] ;
  assign _unnamed_$ADDR_2 = f_if_ex_rv[19:15] ;
  assign _unnamed_$ADDR_3 = 5'h0 ;
  assign _unnamed_$ADDR_4 = 5'h0 ;
  assign _unnamed_$ADDR_5 = 5'h0 ;
  always@(MUX__unnamed_$upd_1__SEL_1 or
	  writeback_wr_response$wget or
	  MUX__unnamed_$upd_1__SEL_2 or
	  debug_ifc_write_gpr_r or
	  MUX__unnamed_$upd_1__SEL_3 or
	  regfile_rg_count or EN_debug_ifc_reset_complete)
  begin
    case (1'b1) // synopsys parallel_case
      MUX__unnamed_$upd_1__SEL_1:
	  _unnamed_$ADDR_IN = writeback_wr_response$wget[73:69];
      MUX__unnamed_$upd_1__SEL_2: _unnamed_$ADDR_IN = debug_ifc_write_gpr_r;
      MUX__unnamed_$upd_1__SEL_3: _unnamed_$ADDR_IN = regfile_rg_count;
      EN_debug_ifc_reset_complete: _unnamed_$ADDR_IN = 5'd5;
      default: _unnamed_$ADDR_IN = 5'b01010 /* unspecified value */ ;
    endcase
  end
  always@(MUX__unnamed_$upd_1__SEL_1 or
	  writeback_wr_response$wget or
	  MUX__unnamed_$upd_1__SEL_2 or
	  debug_ifc_write_gpr_d or
	  MUX__unnamed_$upd_1__SEL_3 or EN_debug_ifc_reset_complete)
  begin
    case (1'b1) // synopsys parallel_case
      MUX__unnamed_$upd_1__SEL_1:
	  _unnamed_$D_IN = writeback_wr_response$wget[67:36];
      MUX__unnamed_$upd_1__SEL_2: _unnamed_$D_IN = debug_ifc_write_gpr_d;
      MUX__unnamed_$upd_1__SEL_3: _unnamed_$D_IN = 32'd0;
      EN_debug_ifc_reset_complete: _unnamed_$D_IN = 32'h80000000;
      default: _unnamed_$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign _unnamed_$WE =
	     WILL_FIRE_RL_rl_write_back_response &&
	     !writeback_wr_response$wget[0] &&
	     !writeback_wr_response$wget[1] &&
	     writeback_wr_response$wget[68] &&
	     writeback_wr_response$wget[73:69] != 5'd0 ||
	     EN_debug_ifc_write_gpr && debug_ifc_write_gpr_r != 5'd0 ||
	     WILL_FIRE_RL_regfile_rl_signal_reset_completion ||
	     WILL_FIRE_RL_regfile_rl_reset ||
	     EN_debug_ifc_reset_complete ;

  // submodule csrfile_uart_baudGen_rBaudCounter
  assign csrfile_uart_baudGen_rBaudCounter$DATA_A = 16'd1 ;
  assign csrfile_uart_baudGen_rBaudCounter$DATA_B = 16'h0 ;
  assign csrfile_uart_baudGen_rBaudCounter$DATA_C = 16'h0 ;
  assign csrfile_uart_baudGen_rBaudCounter$DATA_F = 16'd0 ;
  assign csrfile_uart_baudGen_rBaudCounter$ADDA =
	     csrfile_uart_baudGen_rBaudCounter_value__6_PLU_ETC___d44 ;
  assign csrfile_uart_baudGen_rBaudCounter$ADDB = 1'b0 ;
  assign csrfile_uart_baudGen_rBaudCounter$SETC = 1'b0 ;
  assign csrfile_uart_baudGen_rBaudCounter$SETF =
	     CAN_FIRE_RL_csrfile_uart_baudGen_count_baudtick_16x ;

  // submodule csrfile_uart_baudGen_rBaudTickCounter
  assign csrfile_uart_baudGen_rBaudTickCounter$DATA_A = 3'd1 ;
  assign csrfile_uart_baudGen_rBaudTickCounter$DATA_B = 3'h0 ;
  assign csrfile_uart_baudGen_rBaudTickCounter$DATA_C = 3'h0 ;
  assign csrfile_uart_baudGen_rBaudTickCounter$DATA_F = 3'h0 ;
  assign csrfile_uart_baudGen_rBaudTickCounter$ADDA =
	     CAN_FIRE_RL_csrfile_uart_baudGen_count_baudtick_16x ;
  assign csrfile_uart_baudGen_rBaudTickCounter$ADDB = 1'b0 ;
  assign csrfile_uart_baudGen_rBaudTickCounter$SETC = 1'b0 ;
  assign csrfile_uart_baudGen_rBaudTickCounter$SETF = 1'b0 ;

  // submodule csrfile_uart_fifoRecv
  assign csrfile_uart_fifoRecv$D_IN =
	     { csrfile_uart_vrRecvBuffer_7,
	       csrfile_uart_vrRecvBuffer_6,
	       csrfile_uart_vrRecvBuffer_5,
	       csrfile_uart_vrRecvBuffer_4,
	       csrfile_uart_vrRecvBuffer_3,
	       csrfile_uart_vrRecvBuffer_2,
	       csrfile_uart_vrRecvBuffer_1,
	       csrfile_uart_vrRecvBuffer_0 } ;
  assign csrfile_uart_fifoRecv$ENQ =
	     CAN_FIRE_RL_csrfile_uart_receive_stop_last_bit ;
  assign csrfile_uart_fifoRecv$DEQ =
	     CAN_FIRE_RL_csrfile_uart_rx_connectionif ;
  assign csrfile_uart_fifoRecv$CLR = 1'b0 ;

  // submodule csrfile_uart_fifoXmit
  assign csrfile_uart_fifoXmit$D_IN = csrfile_rg_tx$port1__read ;
  assign csrfile_uart_fifoXmit$ENQ =
	     CAN_FIRE_RL_csrfile_send_transimission_data0 ;
  assign csrfile_uart_fifoXmit$DEQ =
	     CAN_FIRE_RL_csrfile_uart_transmit_buffer_load ;
  assign csrfile_uart_fifoXmit$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_IF_csrfile_rg_mie_port0__read__76_OR_NOT_cs_ETC___d1154 =
	     pending_interrupts__h31890[0] ?
	       4'd0 :
	       (pending_interrupts__h31890[1] ?
		  4'd1 :
		  (pending_interrupts__h31890[2] ?
		     4'd2 :
		     (pending_interrupts__h31890[3] ?
			4'd3 :
			(pending_interrupts__h31890[4] ?
			   4'd4 :
			   (pending_interrupts__h31890[5] ?
			      4'd5 :
			      (pending_interrupts__h31890[6] ?
				 4'd6 :
				 (pending_interrupts__h31890[7] ?
				    4'd7 :
				    (pending_interrupts__h31890[8] ?
				       4'd8 :
				       (pending_interrupts__h31890[9] ?
					  4'd9 :
					  (pending_interrupts__h31890[10] ?
					     4'd10 :
					     (pending_interrupts__h31890[11] ?
						4'd11 :
						4'd15))))))))))) ;
  assign IF_IF_csrfile_rg_mie_port0__read__76_OR_NOT_cs_ETC___d1155 =
	     (pending_interrupts__h31890 == 12'd0) ?
	       (writeback_wr_request$wget[119] ?
		  CASE_writeback_wr_requestwget_BITS_3_TO_0_0_w_ETC__q8 :
		  IF_NOT_writeback_wr_request_wget__58_BITS_11_T_ETC___d1129) :
	       IF_IF_csrfile_rg_mie_port0__read__76_OR_NOT_cs_ETC___d1154 ;
  assign IF_IF_execute_wrapper_mod_1_arg_whas__13_THEN__ETC___d725 =
	     (ab__h27884[32:1] == 32'd0) ? 32'd1 : ab__h27884[32:1] ;
  assign IF_IF_execute_wrapper_mod_1_arg_whas__13_THEN__ETC___d730 =
	     x__h28264 % y__h28265 ;
  assign IF_IF_writeback_wr_request_wget__58_BITS_88_TO_ETC___d1127 =
	     (IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d971 &&
	      IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1119) ?
	       4'd8 :
	       ((IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d971 &&
		 IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1124) ?
		  4'd11 :
		  4'd15) ;
  assign IF_NOT_writeback_wr_request_wget__58_BITS_11_T_ETC___d1129 =
	     NOT_writeback_wr_request_wget__58_BITS_11_TO_0_ETC___d1058 ?
	       4'd2 :
	       ((IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d971 &&
		 IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1115) ?
		  4'd3 :
		  IF_IF_writeback_wr_request_wget__58_BITS_88_TO_ETC___d1127) ;
  assign IF_NOT_writeback_wr_request_wget__58_BITS_11_T_ETC___d1365 =
	     (writeback_wr_request$wget[11:0] != 12'd801 &&
	      writeback_wr_request$wget[11:0] != 12'd802 &&
	      writeback_wr_request$wget[11:0] != 12'd1792 &&
	      writeback_wr_request$wget[11:0] != 12'd1793 &&
	      writeback_wr_request$wget[11:0] != 12'd1794 &&
	      writeback_wr_request$wget[11:0] != 12'd1920 &&
	      writeback_wr_request$wget[11:0] != 12'd1921 &&
	      writeback_wr_request$wget[11:0] != 12'd1922 &&
	      writeback_wr_request$wget[11:0] != 12'd1918) ?
	       csr_mxuarttx__read__h41986 :
	       ((writeback_wr_request$wget[11:0] == 12'd1918) ?
		  csr_mxuartrx__read__h42140 :
		  32'b0) ;
  assign IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d1463 =
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd0 &&
	     !writeback_rg_verbosity_read__438_SLE_1___d1439 &&
	     writeback_wr_request$wget[114:113] == 2'd0 ;
  assign IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d1469 =
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd0 &&
	     !writeback_rg_verbosity_read__438_SLE_1___d1439 &&
	     writeback_wr_request$wget[114:113] == 2'd1 ;
  assign IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d1474 =
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd2 &&
	     writeback_wr_request$wget[70] &&
	     !writeback_rg_verbosity_read__438_SLE_1___d1439 ;
  assign IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d1479 =
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd2 &&
	     !writeback_wr_request$wget[70] &&
	     !writeback_rg_verbosity_read__438_SLE_1___d1439 ;
  assign IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d1489 =
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd3 &&
	     writeback_wr_request$wget[95:89] == 7'd115 &&
	     (x__h34002 == 15'd16 ||
	      x__h34002 == 15'd6160 && csrfile_rg_prv == 2'd3 &&
	      csrfile_rg_mpp == 2'd0) ;
  assign IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d1499 =
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd3 &&
	     writeback_wr_request$wget[95:89] == 7'd115 &&
	     x__h34002 == 15'd16 ;
  assign IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d1537 =
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd3 &&
	     writeback_wr_request$wget[95:89] == 7'd115 &&
	     writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1533 ;
  assign IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d1714 =
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd3 &&
	     writeback_wr_request$wget[95:89] == 7'd115 &&
	     writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1710 ;
  assign IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d1919 =
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd3 &&
	     writeback_wr_request$wget[95:89] == 7'd115 &&
	     writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1915 ;
  assign IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d2020 =
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd3 &&
	     writeback_wr_request$wget[95:89] == 7'd115 &&
	     writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2016 ;
  assign IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d2421 =
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd3 &&
	     writeback_wr_request$wget[95:89] == 7'd115 &&
	     writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2417 ;
  assign IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d2493 =
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd3 &&
	     writeback_wr_request$wget[95:89] == 7'd115 &&
	     writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2489 ;
  assign IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d2526 =
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] != 3'd1 &&
	     writeback_wr_request$wget[118:116] != 3'd0 &&
	     writeback_wr_request$wget[118:116] != 3'd2 &&
	     writeback_wr_request$wget[118:116] != 3'd3 &&
	     !writeback_rg_verbosity_read__438_SLE_1___d1439 ;
  assign IF_csrfile_rg_prv_port1__read__590_EQ_0_591_AN_ETC___d2654 =
	     (x__h96177 == 2'd0 &&
	      IF_writeback_wr_trap_data_wget__592_BIT_4_593__ETC___d2623) ?
	       csrfile_rg_utvec :
	       csrfile_rg_mtvec ;
  assign IF_execute_wr_request_wget__42_BITS_123_TO_121_ETC___d304 =
	     (execute_wr_request$wget[123:121] == 3'b0 ||
	      execute_wr_request$wget[123:121] == 3'b010 ||
	      execute_wr_request$wget[123:121] == 3'b011 ||
	      execute_wr_request$wget[123:121] == 3'b100 ||
	      execute_wr_request$wget[123:121] == 3'b111 ||
	      execute_wr_request$wget[123:121] == 3'b110 ||
	      x__h24026 == 10'd128 ||
	      x__h24026 == 10'd640 ||
	      x__h24026 == 10'd672) ?
	       { 4'd9,
		 79'h2AAAAAAAAAAAAAAAAAAA /* unspecified value */ ,
		 data__h24666,
		 execute_wr_request$wget[220:216] } :
	       { 1'd0,
		 119'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  } ;
  assign IF_execute_wr_request_wget__42_BIT_96_42_THEN__ETC___d652 =
	     { x__h26686,
	       x__h26712,
	       execute_wr_request$wget[96] != execute_wr_request$wget[64] } ;
  assign IF_execute_wrapper_mod_1_arg_whas__13_THEN_exe_ETC___d733 =
	     ab__h27884[64:33] %
	     IF_IF_execute_wrapper_mod_1_arg_whas__13_THEN__ETC___d725 ;
  assign IF_writeback_wr_request_wget__58_BITS_11_TO_0__ETC___d1427 =
	     (x__h34002 == 15'd16) ? csrfile_csr_uepc : csrfile_csr_mepc ;
  assign IF_writeback_wr_trap_data_wget__592_BIT_4_593__ETC___d2623 =
	     writeback_wr_trap_data$wget[4] ?
	       csr_mideleg__read2153_SRL_y3579__q12[0] :
	       csr_medeleg__read9986_SRL_y3579__q13[0] ;
  assign IF_writeback_wr_trap_data_wget__592_BIT_4_593__ETC___d2642 =
	     writeback_wr_trap_data$wget[4] ?
	       !csr_mideleg__read2153_SRL_y3579__q12[0] :
	       !csr_medeleg__read9986_SRL_y3579__q13[0] ;
  assign NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d1732 =
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[53:22] != 32'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd5 ;
  assign NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d1764 =
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[53:22] != 32'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd64 ;
  assign NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d1790 =
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[53:22] != 32'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd65 ;
  assign NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d1811 =
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[53:22] != 32'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd66 ;
  assign NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d1832 =
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[53:22] != 32'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd67 ;
  assign NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d1884 =
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[53:22] != 32'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd769 ;
  assign NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d1905 =
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[53:22] != 32'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd768 ;
  assign NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d1953 =
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[53:22] != 32'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd770 ;
  assign NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d1985 =
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[53:22] != 32'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd771 ;
  assign NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2006 =
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[53:22] != 32'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd772 ;
  assign NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2071 =
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[53:22] != 32'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd773 ;
  assign NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2092 =
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[53:22] != 32'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd832 ;
  assign NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2113 =
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[53:22] != 32'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd833 ;
  assign NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2134 =
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[53:22] != 32'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd834 ;
  assign NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2155 =
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[53:22] != 32'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd835 ;
  assign NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2176 =
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[53:22] != 32'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd836 ;
  assign NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2197 =
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[53:22] != 32'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd896 ;
  assign NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2218 =
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[53:22] != 32'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd897 ;
  assign NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2239 =
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[53:22] != 32'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd898 ;
  assign NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2260 =
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[53:22] != 32'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd899 ;
  assign NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2281 =
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[53:22] != 32'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd900 ;
  assign NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2302 =
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[53:22] != 32'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd901 ;
  assign NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2323 =
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[53:22] != 32'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd2816 ;
  assign NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2344 =
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[53:22] != 32'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd2818 ;
  assign NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2365 =
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[53:22] != 32'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd2944 ;
  assign NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2386 =
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[53:22] != 32'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd2946 ;
  assign NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2407 =
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[53:22] != 32'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd800 ;
  assign NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2474 =
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[11:10] != 2'b11 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] != 12'd0 &&
	     writeback_wr_request$wget[11:0] != 12'd4 &&
	     writeback_wr_request$wget[11:0] != 12'd5 &&
	     writeback_wr_request$wget[11:0] != 12'd64 &&
	     writeback_wr_request$wget[11:0] != 12'd65 &&
	     writeback_wr_request$wget[11:0] != 12'd66 &&
	     writeback_wr_request$wget[11:0] != 12'd67 &&
	     writeback_wr_request$wget[11:0] != 12'd68 &&
	     writeback_wr_request$wget[11:0] != 12'd3072 &&
	     writeback_wr_request$wget[11:0] != 12'd3073 &&
	     writeback_wr_request$wget[11:0] != 12'd3074 &&
	     writeback_wr_request$wget[11:0] != 12'd3200 &&
	     writeback_wr_request$wget[11:0] != 12'd3201 &&
	     writeback_wr_request$wget[11:0] != 12'd3202 &&
	     writeback_wr_request$wget[11:0] != 12'd769 &&
	     writeback_wr_request$wget[11:0] != 12'd3857 &&
	     writeback_wr_request$wget[11:0] != 12'd3858 &&
	     writeback_wr_request$wget[11:0] != 12'd3859 &&
	     writeback_wr_request$wget[11:0] != 12'd3860 &&
	     writeback_wr_request$wget[11:0] != 12'd768 &&
	     writeback_wr_request$wget[11:0] != 12'd770 &&
	     writeback_wr_request$wget[11:0] != 12'd771 &&
	     writeback_wr_request$wget[11:0] != 12'd772 &&
	     writeback_wr_request$wget[11:0] != 12'd773 &&
	     writeback_wr_request$wget[11:0] != 12'd832 &&
	     writeback_wr_request$wget[11:0] != 12'd833 &&
	     writeback_wr_request$wget[11:0] != 12'd834 &&
	     writeback_wr_request$wget[11:0] != 12'd835 &&
	     writeback_wr_request$wget[11:0] != 12'd836 &&
	     writeback_wr_request$wget[11:0] != 12'd896 &&
	     writeback_wr_request$wget[11:0] != 12'd897 &&
	     writeback_wr_request$wget[11:0] != 12'd898 &&
	     writeback_wr_request$wget[11:0] != 12'd899 &&
	     writeback_wr_request$wget[11:0] != 12'd900 &&
	     writeback_wr_request$wget[11:0] != 12'd901 &&
	     writeback_wr_request$wget[11:0] != 12'd2816 &&
	     writeback_wr_request$wget[11:0] != 12'd2818 &&
	     writeback_wr_request$wget[11:0] != 12'd2944 &&
	     writeback_wr_request$wget[11:0] != 12'd2946 &&
	     writeback_wr_request$wget[11:0] != 12'd800 &&
	     writeback_wr_request$wget[11:0] != 12'd801 &&
	     writeback_wr_request$wget[11:0] != 12'd802 &&
	     writeback_wr_request$wget[11:0] != 12'd1792 &&
	     writeback_wr_request$wget[11:0] != 12'd1793 &&
	     writeback_wr_request$wget[11:0] != 12'd1794 &&
	     writeback_wr_request$wget[11:0] != 12'd1920 &&
	     writeback_wr_request$wget[11:0] != 12'd1921 &&
	     writeback_wr_request$wget[11:0] != 12'd1922 &&
	     writeback_wr_request$wget[11:0] != 12'd1918 ;
  assign NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2479 =
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     (writeback_wr_request$wget[21:17] == 5'd0 ||
	      writeback_wr_request$wget[11:10] != 2'b11) &&
	     writeback_wr_request$wget[53:22] != 32'd0 &&
	     writeback_wr_request$wget[11:0] != 12'd0 &&
	     writeback_wr_request$wget[11:0] != 12'd4 &&
	     writeback_wr_request$wget[11:0] != 12'd5 &&
	     writeback_wr_request$wget[11:0] != 12'd64 &&
	     writeback_wr_request$wget[11:0] != 12'd65 &&
	     writeback_wr_request$wget[11:0] != 12'd66 &&
	     writeback_wr_request$wget[11:0] != 12'd67 &&
	     writeback_wr_request$wget[11:0] != 12'd68 &&
	     writeback_wr_request$wget[11:0] != 12'd3072 &&
	     writeback_wr_request$wget[11:0] != 12'd3073 &&
	     writeback_wr_request$wget[11:0] != 12'd3074 &&
	     writeback_wr_request$wget[11:0] != 12'd3200 &&
	     writeback_wr_request$wget[11:0] != 12'd3201 &&
	     writeback_wr_request$wget[11:0] != 12'd3202 &&
	     writeback_wr_request$wget[11:0] != 12'd769 &&
	     writeback_wr_request$wget[11:0] != 12'd3857 &&
	     writeback_wr_request$wget[11:0] != 12'd3858 &&
	     writeback_wr_request$wget[11:0] != 12'd3859 &&
	     writeback_wr_request$wget[11:0] != 12'd3860 &&
	     writeback_wr_request$wget[11:0] != 12'd768 &&
	     writeback_wr_request$wget[11:0] != 12'd770 &&
	     writeback_wr_request$wget[11:0] != 12'd771 &&
	     writeback_wr_request$wget[11:0] != 12'd772 &&
	     writeback_wr_request$wget[11:0] != 12'd773 &&
	     writeback_wr_request$wget[11:0] != 12'd832 &&
	     writeback_wr_request$wget[11:0] != 12'd833 &&
	     writeback_wr_request$wget[11:0] != 12'd834 &&
	     writeback_wr_request$wget[11:0] != 12'd835 &&
	     writeback_wr_request$wget[11:0] != 12'd836 &&
	     writeback_wr_request$wget[11:0] != 12'd896 &&
	     writeback_wr_request$wget[11:0] != 12'd897 &&
	     writeback_wr_request$wget[11:0] != 12'd898 &&
	     writeback_wr_request$wget[11:0] != 12'd899 &&
	     writeback_wr_request$wget[11:0] != 12'd900 &&
	     writeback_wr_request$wget[11:0] != 12'd901 &&
	     writeback_wr_request$wget[11:0] != 12'd2816 &&
	     writeback_wr_request$wget[11:0] != 12'd2818 &&
	     writeback_wr_request$wget[11:0] != 12'd2944 &&
	     writeback_wr_request$wget[11:0] != 12'd2946 &&
	     writeback_wr_request$wget[11:0] != 12'd800 &&
	     writeback_wr_request$wget[11:0] != 12'd801 &&
	     writeback_wr_request$wget[11:0] != 12'd802 &&
	     writeback_wr_request$wget[11:0] != 12'd1792 &&
	     writeback_wr_request$wget[11:0] != 12'd1793 &&
	     writeback_wr_request$wget[11:0] != 12'd1794 &&
	     writeback_wr_request$wget[11:0] != 12'd1920 &&
	     writeback_wr_request$wget[11:0] != 12'd1921 &&
	     writeback_wr_request$wget[11:0] != 12'd1922 &&
	     writeback_wr_request$wget[11:0] != 12'd1918 ;
  assign NOT_csrfile_rg_prv_port1__read__590_EQ_0_591_6_ETC___d2644 =
	     (x__h96177 != 2'd0 ||
	      IF_writeback_wr_trap_data_wget__592_BIT_4_593__ETC___d2642) &&
	     !writeback_wr_trap_data$wget[4] &&
	     (writeback_wr_trap_data$wget[3:0] == 4'd0 ||
	      writeback_wr_trap_data$wget[3:0] == 4'd1 ||
	      writeback_wr_trap_data$wget[3:0] == 4'd4 ||
	      writeback_wr_trap_data$wget[3:0] == 4'd5 ||
	      writeback_wr_trap_data$wget[3:0] == 4'd6 ||
	      writeback_wr_trap_data$wget[3:0] == 4'd7) ;
  assign NOT_execute_wr_verbosity_wget__44_SLE_2_45___d746 =
	     (rg_verbosity ^ 32'h80000000) > 32'h80000002 ;
  assign NOT_fetch_rg_verbosity_read__37_SLE_1_795___d2796 =
	     (fetch_rg_verbosity ^ 32'h80000000) > 32'h80000001 ;
  assign NOT_fetch_rg_verbosity_read__37_SLE_3_38___d239 =
	     (fetch_rg_verbosity ^ 32'h80000000) > 32'h80000003 ;
  assign NOT_rg_verbosity_878_SLE_1_879___d2880 =
	     (rg_verbosity ^ 32'h80000000) > 32'h80000001 ;
  assign NOT_writeback_rg_verbosity_read__438_SLE_3_689___d2690 =
	     (writeback_rg_verbosity ^ 32'h80000000) > 32'h80000003 ;
  assign NOT_writeback_wr_request_wget__58_BITS_118_TO__ETC___d1185 =
	     writeback_wr_request$wget[118:116] != 3'd0 &&
	     (writeback_wr_request$wget[95:89] == 7'd115 &&
	      writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1175 &&
	      IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1180 ||
	      writeback_wr_request$wget[118:116] != 3'd3) ;
  assign NOT_writeback_wr_request_wget__58_BITS_11_TO_0_ETC___d1058 =
	     x__h34002 != 15'd0 && x__h34002 != 15'd8 &&
	     x__h34002 != 15'd16 &&
	     x__h34002 != 15'd2064 &&
	     x__h34002 != 15'd4112 &&
	     x__h34002 != 15'd6160 &&
	     writeback_wr_request$wget[88:86] != 3'b001 &&
	     writeback_wr_request$wget[88:86] != 3'b010 &&
	     writeback_wr_request$wget[88:86] != 3'b011 &&
	     writeback_wr_request$wget[88:86] != 3'b101 &&
	     writeback_wr_request$wget[88:86] != 3'b110 &&
	     writeback_wr_request$wget[88:86] != 3'b111 ||
	     IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1057 ;
  assign NOT_writeback_wr_request_wget__58_BITS_11_TO_0_ETC___d1413 =
	     NOT_writeback_wr_request_wget__58_BITS_11_TO_0_ETC___d961 &&
	     (x__h34002 == 15'd16 ||
	      x__h34002 == 15'd6160 && csrfile_rg_prv == 2'd3) ;
  assign NOT_writeback_wr_request_wget__58_BITS_11_TO_0_ETC___d961 =
	     writeback_wr_request$wget[11:0] == 12'd801 ||
	     writeback_wr_request$wget[11:0] == 12'd802 ||
	     csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 ||
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:10] == 2'b11 ;
  assign NOT_writeback_wr_request_wget__58_BITS_11_TO_0_ETC___d970 =
	     NOT_writeback_wr_request_wget__58_BITS_11_TO_0_ETC___d961 ||
	     x__h34002 == 15'd0 ||
	     x__h34002 == 15'd8 ||
	     x__h34002 == 15'd2064 ||
	     x__h34002 == 15'd4112 ||
	     x__h34002 == 15'd6160 && csrfile_rg_prv != 2'd3 ;
  assign NOT_writeback_wr_request_wget__58_BITS_11_TO_0_ETC___d972 =
	     x__h34002 != 15'd0 && x__h34002 != 15'd8 &&
	     x__h34002 != 15'd16 &&
	     x__h34002 != 15'd2064 &&
	     x__h34002 != 15'd4112 &&
	     x__h34002 != 15'd6160 &&
	     writeback_wr_request$wget[88:86] != 3'b001 &&
	     writeback_wr_request$wget[88:86] != 3'b010 &&
	     writeback_wr_request$wget[88:86] != 3'b011 &&
	     writeback_wr_request$wget[88:86] != 3'b101 &&
	     writeback_wr_request$wget[88:86] != 3'b110 &&
	     writeback_wr_request$wget[88:86] != 3'b111 ||
	     IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d971 ;
  assign NOT_writeback_wr_request_wget__58_BIT_119_59_1_ETC___d1509 =
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd3 &&
	     writeback_wr_request$wget[95:89] == 7'd115 &&
	     x__h34002 == 15'd6160 &&
	     csrfile_rg_prv == 2'd3 ;
  assign _0_CONCAT_IF_execute_wrapper_mul_1_arg_whas__57_ETC___d667 =
	     { 32'd0, ab__h26526[64:33] } * { 32'd0, ab__h26526[32:1] } ;
  assign _10_CONCAT_DONTCARE_CONCAT_IF_execute_wr_reques_ETC___d381 =
	     { 4'd10,
	       45'h0AAAAAAAAAAA /* unspecified value */ ,
	       IF_execute_wr_request_wget__42_BITS_123_TO_121_ETC___d369,
	       execute_wr_request$wget[32:1] + sx_imm_B__h22655,
	       5'b01010 /* unspecified value */ ,
	       1'd0,
	       32'hAAAAAAAA /* unspecified value */  } ;
  assign _dfoo1 =
	     pending_interrupts__h31890 == 12'd0 &&
	     NOT_writeback_wr_request_wget__58_BIT_119_59_1_ETC___d1509 ||
	     IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d1919 ;
  assign _dfoo5 =
	     pending_interrupts__h31890 == 12'd0 &&
	     !writeback_wr_request$wget[119] &&
	     writeback_wr_request$wget[118:116] == 3'd3 &&
	     writeback_wr_request_wget__58_BITS_95_TO_89_62_ETC___d1503 ||
	     IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d1919 ;
  assign _dfoo7 =
	     IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d1499 ||
	     IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d1537 ;
  assign _dfoo9 =
	     IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d1489 ||
	     IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d1537 ;
  assign _dor2csrfile_uart_pwXmitCellCountReset$EN_wset =
	     WILL_FIRE_RL_csrfile_uart_transmit_send_stop_bit2 ||
	     WILL_FIRE_RL_csrfile_uart_transmit_send_stop_bit ||
	     WILL_FIRE_RL_csrfile_uart_transmit_send_parity_bit ||
	     WILL_FIRE_RL_csrfile_uart_transmit_wait_1_bit_cell_time ||
	     WILL_FIRE_RL_csrfile_uart_transmit_send_start_bit ;
  assign _in__h28944 =
	     ab4499_BITS_36_TO_5__q19[31] ?
	       { {32{ab4499_BITS_36_TO_5__q19[31]}},
		 ab4499_BITS_36_TO_5__q19 } :
	       { 32'd0, ab__h24499[36:5] } ;
  assign _theResult___fst__h101419 =
	     wr_forwarded_data_wget__919_BITS_36_TO_32_922__ETC___d2923 ?
	       wr_forwarded_data$wget[31:0] :
	       v1__h100018 ;
  assign _theResult___fst_addr__h25374 =
	     execute_wr_request$wget[96:65] + sx_imm_S__h22654 ;
  assign _theResult___snd__h101420 =
	     wr_forwarded_data_wget__919_BITS_36_TO_32_922__ETC___d2930 ?
	       wr_forwarded_data$wget[31:0] :
	       v2__h100019 ;
  assign _theResult___snd_addr__h24942 =
	     execute_wr_request$wget[96:65] + sx_imm_I__h22653 ;
  assign ab4499_BITS_36_TO_5__q19 = ab__h24499[36:5] ;
  assign ab7884_BITS_64_TO_33__q21 = ab__h27884[64:33] ;
  assign ab__h23091 =
	     (execute_wr_request$wget[237:231] == 7'd19) ?
	       { execute_wr_request$wget[96:65], sx_imm_I__h22653 } :
	       execute_wr_request$wget[96:33] ;
  assign ab__h23248 =
	     (execute_wr_request$wget[237:231] == 7'd19) ?
	       { execute_wr_request$wget[96:65],
		 sx_imm_I__h22653,
		 execute_wr_request$wget[123:121] == 3'b010 } :
	       { execute_wr_request$wget[96:33], x__h24026 == 10'd256 } ;
  assign ab__h23632 = ab__h23091 ;
  assign ab__h23771 = ab__h23091 ;
  assign ab__h23910 = ab__h23091 ;
  assign ab__h24155 =
	     { execute_wr_request$wget[96:65],
	       (execute_wr_request$wget[237:231] == 7'd19) ?
		 sx_imm_I__h22653[4:0] :
		 execute_wr_request$wget[37:33] } ;
  assign ab__h24314 = ab__h24155 ;
  assign ab__h24499 = ab__h24155 ;
  assign ab__h27407 =
	     (x__h24026 == 10'd513) ?
	       IF_execute_wr_request_wget__42_BIT_96_42_THEN__ETC___d652 :
	       { execute_wr_request$wget[96:33], 1'd0 } ;
  assign ab__h27884 =
	     { execute_wr_request$wget[96:33], x__h24026 == 10'd769 } ;
  assign cause_code__h93947 = { 27'd0, y__h93579 } ;
  assign csr_medeleg__read9986_SRL_y3579__q13 =
	     csr_medeleg__read__h39986 >> y__h93579 ;
  assign csr_medeleg__read__h39986 = { 20'd0, csrfile_rg_medeleg } ;
  assign csr_mideleg__read2153_SRL_y3579__q12 =
	     csr_mideleg__read__h32153 >> y__h93579 ;
  assign csr_mideleg__read__h32153 = { 20'd0, csrfile_rg_mideleg } ;
  assign csr_mie__read__h32101 = { r1__read__h32103, csrfile_rg_usie } ;
  assign csr_mip__read__h31985 = { r1__read__h31987, csrfile_rg_usip } ;
  assign csr_mstatus__read__h39917 = { r1__read__h43631, csrfile_rg_uie } ;
  assign csr_mtvec__read__h40199 = { csrfile_rg_mtvec, 2'd0 } ;
  assign csr_mucounteren__read__h41834 =
	     { r1__read__h44847, csrfile_rg_u_cy } ;
  assign csr_mxuartrx__read__h42140 = { 23'd0, csrfile_rg_rx } ;
  assign csr_mxuarttx__read__h41986 = { r1__read__h44943, csrfile_rg_tx } ;
  assign csr_uie__read__h39128 = { r1__read__h42982, csrfile_rg_usie } ;
  assign csr_uip__read__h39312 = { r1__read__h43326, csrfile_rg_usip } ;
  assign csr_ustatus__read__h39073 = { r1__read__h42438, csrfile_rg_uie } ;
  assign csr_utvec__read__h39143 = { csrfile_rg_utvec, 2'b0 } ;
  assign csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 =
	     csrfile_rg_prv < writeback_wr_request$wget[9:8] ;
  assign csrfile_rg_prv_port1__read__590_EQ_0_591_AND_I_ETC___d2635 =
	     x__h96177 == 2'd0 &&
	     IF_writeback_wr_trap_data_wget__592_BIT_4_593__ETC___d2623 &&
	     !writeback_wr_trap_data$wget[4] &&
	     (writeback_wr_trap_data$wget[3:0] == 4'd0 ||
	      writeback_wr_trap_data$wget[3:0] == 4'd1 ||
	      writeback_wr_trap_data$wget[3:0] == 4'd4 ||
	      writeback_wr_trap_data$wget[3:0] == 4'd5 ||
	      writeback_wr_trap_data$wget[3:0] == 4'd6 ||
	      writeback_wr_trap_data$wget[3:0] == 4'd7) ;
  assign csrfile_uart_baudGen_rBaudCounter_value__6_PLU_ETC___d44 =
	     csrfile_uart_baudGen_rBaudCounter$Q_OUT + 16'd1 < 16'd130 ;
  assign csrfile_wr_meip_whas__78_AND_csrfile_wr_meip_w_ETC___d997 =
	     { r__h32010 & csrfile_rg_meie,
	       2'd0,
	       csrfile_rg_ueip & csrfile_rg_ueie,
	       r__h32029 & csrfile_rg_mtie,
	       2'd0,
	       csrfile_rg_utip & csrfile_rg_utie } ;
  assign data__h104552 =
	     (f_ex_wb_rv[118:116] == 3'd1) ?
	       f_ex_wb_rv[36:5] :
	       f_ex_wb_rv[31:0] ;
  assign dest__h104301 = f_ex_wb_rv[32] ? f_ex_wb_rv[37:33] : 5'd0 ;
  assign execute_wr_request_wget__42_BITS_220_TO_216_00_ETC___d387 =
	     { execute_wr_request$wget[220:216],
	       1'd1,
	       execute_wr_request$wget[32:1] + 32'd4 } ;
  assign execute_wr_request_wget__42_BITS_96_TO_65_13_E_ETC___d359 =
	     execute_wr_request$wget[96:65] ==
	     execute_wr_request$wget[64:33] ;
  assign execute_wr_request_wget__42_BITS_96_TO_65_13_S_ETC___d361 =
	     (execute_wr_request$wget[96:65] ^ 32'h80000000) <
	     (execute_wr_request$wget[64:33] ^ 32'h80000000) ;
  assign execute_wr_request_wget__42_BITS_96_TO_65_13_U_ETC___d363 =
	     execute_wr_request$wget[96:65] < execute_wr_request$wget[64:33] ;
  assign execute_wr_requestwget_BITS_144_TO_124__q17 =
	     execute_wr_request$wget[144:124] ;
  assign execute_wr_requestwget_BITS_189_TO_177__q16 =
	     execute_wr_request$wget[189:177] ;
  assign execute_wr_requestwget_BITS_201_TO_190__q15 =
	     execute_wr_request$wget[201:190] ;
  assign execute_wr_requestwget_BITS_213_TO_202__q14 =
	     execute_wr_request$wget[213:202] ;
  assign execute_wr_requestwget_BITS_96_TO_33__q18 =
	     execute_wr_request$wget[96:33] ;
  assign fetch_rg_imem_state_port0__read__798_AND_NOT_f_ETC___d2805 =
	     fetch_rg_imem_state &&
	     (!CAN_FIRE_RL_rl_flush || !fetch_wr_redirect_3$wget[32]) &&
	     fetch_icache_rg_response_valid &&
	     fetch_icache_rg_imem_state &&
	     !f_if_ex_rv$port1__read[71] ;
  assign iFields_imm_B__h100603 =
	     { f_if_ex_rv[31],
	       f_if_ex_rv[7],
	       f_if_ex_rv[30:25],
	       f_if_ex_rv[11:8],
	       1'b0 } ;
  assign iFields_imm_J__h100605 =
	     { f_if_ex_rv[31],
	       f_if_ex_rv[19:12],
	       f_if_ex_rv[20],
	       f_if_ex_rv[30:21],
	       1'b0 } ;
  assign iFields_imm_U__h100604 = { f_if_ex_rv[31:12], 12'b0 } ;
  assign in8944_SRL_ab4499_BITS_4_TO_0__q20 = _in__h28944 >> ab__h24499[4:0] ;
  assign lui_imm__h26229 =
	     execute_wr_request$wget[32:1] +
	     execute_wr_request$wget[176:145] ;
  assign memReq_burst_size__h96473 =
	     (writeback_dcache_f_dmem_reqs_rv[1:0] == 2'd2) ?
	       2'd3 :
	       writeback_dcache_f_dmem_reqs_rv[1:0] ;
  assign new_addr___1__h105413 = x__h105430 + 32'd1 ;
  assign new_addr___1__h97562 = x__h97579 + 32'd1 ;
  assign pending_interrupts__h31885 =
	     { csrfile_wr_meip_whas__78_AND_csrfile_wr_meip_w_ETC___d997,
	       r__h32045 & csrfile_rg_msie,
	       2'd0,
	       csrfile_rg_usip & csrfile_rg_usie } ;
  assign pending_interrupts__h31890 =
	     ((csrfile_rg_mie || csrfile_rg_prv != 2'd3) ?
		pending_machine_interrupts__h31886 :
		12'd0) |
	     ((csrfile_rg_uie && csrfile_rg_prv == 2'd0) ?
		pending_user_interrupts__h31888 :
		12'd0) ;
  assign pending_machine_interrupts__h31886 =
	     pending_interrupts__h31885 & y__h31928 ;
  assign pending_user_interrupts__h31888 =
	     pending_interrupts__h31885 & csrfile_rg_mideleg ;
  assign r1__read__h31987 = { r1__read__h31989, 1'b0 } ;
  assign r1__read__h31989 = { r1__read__h31991, 1'b0 } ;
  assign r1__read__h31991 = { r1__read__h31993, r__h32045 } ;
  assign r1__read__h31993 = { r1__read__h31995, csrfile_rg_utip } ;
  assign r1__read__h31995 = { r1__read__h31997, 1'b0 } ;
  assign r1__read__h31997 = { r1__read__h31999, 1'b0 } ;
  assign r1__read__h31999 = { r1__read__h32001, r__h32029 } ;
  assign r1__read__h32001 = { r1__read__h32003, csrfile_rg_ueip } ;
  assign r1__read__h32003 = { r1__read__h32005, 1'b0 } ;
  assign r1__read__h32005 = { r1__read__h32007, 1'b0 } ;
  assign r1__read__h32007 = { 20'd0, r__h32010 } ;
  assign r1__read__h32103 = { r1__read__h32105, csrfile_rg_ssie } ;
  assign r1__read__h32105 = { r1__read__h32107, 1'd0 } ;
  assign r1__read__h32107 = { r1__read__h32109, csrfile_rg_msie } ;
  assign r1__read__h32109 = { r1__read__h32111, csrfile_rg_utie } ;
  assign r1__read__h32111 = { r1__read__h32113, csrfile_rg_stie } ;
  assign r1__read__h32113 = { r1__read__h32115, 1'd0 } ;
  assign r1__read__h32115 = { r1__read__h32117, csrfile_rg_mtie } ;
  assign r1__read__h32117 = { r1__read__h32119, csrfile_rg_ueie } ;
  assign r1__read__h32119 = { r1__read__h32121, csrfile_rg_seie } ;
  assign r1__read__h32121 = { r1__read__h32123, 1'd0 } ;
  assign r1__read__h32123 = { 20'd0, csrfile_rg_meie } ;
  assign r1__read__h42438 = { r1__read__h42450, 1'b0 } ;
  assign r1__read__h42450 = { r1__read__h42462, 1'b0 } ;
  assign r1__read__h42462 = { r1__read__h42474, 1'b0 } ;
  assign r1__read__h42474 = { r1__read__h42486, csrfile_rg_upie } ;
  assign r1__read__h42486 = { r1__read__h42498, 1'b0 } ;
  assign r1__read__h42498 = { r1__read__h42510, 1'b0 } ;
  assign r1__read__h42510 = { r1__read__h42522, 1'b0 } ;
  assign r1__read__h42522 = { r1__read__h42534, 1'b0 } ;
  assign r1__read__h42534 = { r1__read__h42546, 1'b0 } ;
  assign r1__read__h42546 = { r1__read__h42558, 1'b0 } ;
  assign r1__read__h42558 = { r1__read__h42570, csrfile_rg_fs } ;
  assign r1__read__h42570 = { r1__read__h42582, csrfile_rg_xs } ;
  assign r1__read__h42582 = { r1__read__h42594, csrfile_rg_mprv } ;
  assign r1__read__h42594 = { r1__read__h42606, csrfile_rg_pum } ;
  assign r1__read__h42606 = { r1__read__h42618, csrfile_rg_mxr } ;
  assign r1__read__h42618 = { r1__read__h42630, 4'b0 } ;
  assign r1__read__h42630 = { r1__read__h42642, csrfile_rg_vm } ;
  assign r1__read__h42642 = { r__h42655, 4'd0 } ;
  assign r1__read__h42982 = { r1__read__h42994, 1'b0 } ;
  assign r1__read__h42994 = { r1__read__h43006, 1'b0 } ;
  assign r1__read__h43006 = { r1__read__h43018, 1'b0 } ;
  assign r1__read__h43018 = { r1__read__h43030, csrfile_rg_utie } ;
  assign r1__read__h43030 = { r1__read__h43042, 1'b0 } ;
  assign r1__read__h43042 = { r1__read__h43054, 1'b0 } ;
  assign r1__read__h43054 = { r1__read__h43066, 1'b0 } ;
  assign r1__read__h43066 = { 23'd0, csrfile_rg_ueie } ;
  assign r1__read__h43326 = { r1__read__h43338, 1'b0 } ;
  assign r1__read__h43338 = { r1__read__h43350, 1'b0 } ;
  assign r1__read__h43350 = { r1__read__h43362, 1'b0 } ;
  assign r1__read__h43362 = { r1__read__h43374, csrfile_rg_utip } ;
  assign r1__read__h43374 = { r1__read__h43386, 1'b0 } ;
  assign r1__read__h43386 = { r1__read__h43398, 1'b0 } ;
  assign r1__read__h43398 = { r1__read__h43410, 1'b0 } ;
  assign r1__read__h43410 = { 23'd0, csrfile_rg_ueip } ;
  assign r1__read__h43631 = { r1__read__h43643, 1'd0 } ;
  assign r1__read__h43643 = { r1__read__h43655, 1'd0 } ;
  assign r1__read__h43655 = { r1__read__h43667, csrfile_rg_mie } ;
  assign r1__read__h43667 = { r1__read__h43679, csrfile_rg_upie } ;
  assign r1__read__h43679 = { r1__read__h43691, 1'd0 } ;
  assign r1__read__h43691 = { r1__read__h43703, 1'd0 } ;
  assign r1__read__h43703 = { r1__read__h43715, csrfile_rg_mpie } ;
  assign r1__read__h43715 = { r1__read__h43727, 1'd0 } ;
  assign r1__read__h43727 = { r1__read__h43739, 2'd0 } ;
  assign r1__read__h43739 = { r1__read__h43751, csrfile_rg_mpp } ;
  assign r1__read__h43751 = { r1__read__h43763, csrfile_rg_fs } ;
  assign r1__read__h43763 = { r1__read__h43775, csrfile_rg_xs } ;
  assign r1__read__h43775 = { r1__read__h43787, csrfile_rg_mprv } ;
  assign r1__read__h43787 = { r1__read__h43799, csrfile_rg_pum } ;
  assign r1__read__h43799 = { r1__read__h43811, csrfile_rg_mxr } ;
  assign r1__read__h43811 = { r1__read__h43823, 4'b0 } ;
  assign r1__read__h43823 = { r1__read__h43835, csrfile_rg_vm } ;
  assign r1__read__h43835 = { r__h42655, 2'd0 } ;
  assign r1__read__h44847 = { r1__read__h44859, csrfile_rg_u_tm } ;
  assign r1__read__h44859 = { 29'd0, csrfile_rg_u_ir } ;
  assign r1__read__h44943 = { 23'd0, csrfile_uart_fifoXmit$FULL_N } ;
  assign r__h32010 =
	     EN_interrupt_ifc_external && interrupt_ifc_external_meip ;
  assign r__h32029 = EN_interrupt_ifc_timer && interrupt_ifc_timer_mtip ;
  assign r__h32045 =
	     EN_interrupt_ifc_software && interrupt_ifc_software_msip ;
  assign r__h42655 = csrfile_rg_xs == 2'b11 || csrfile_rg_fs == 2'b11 ;
  assign res___1__h26836 =
	     ~_0_CONCAT_IF_execute_wrapper_mul_1_arg_whas__57_ETC___d667[63:0] +
	     64'd1 ;
  assign res___1__h27695 = ~res__h27631 + 32'd1 ;
  assign res__h23500 =
	     ((ab__h23248[64:33] ^ 32'h80000000) <
	      (ab__h23248[32:1] ^ 32'h80000000)) ?
	       32'd1 :
	       32'd0 ;
  assign res__h23511 =
	     (ab__h23248[64:33] < ab__h23248[32:1]) ? 32'd1 : 32'd0 ;
  assign res__h27631 =
	     ab__h27407[64:33] /
	     ((ab__h27407[32:1] == 32'd0) ? 32'd1 : ab__h27407[32:1]) ;
  assign spliced_bits__h105443 = fetch_rg_burst_addr[2:0] + 3'd1 ;
  assign spliced_bits__h105514 = fetch_rg_burst_addr[3:1] + 3'd1 ;
  assign spliced_bits__h105587 = fetch_rg_burst_addr[4:2] + 3'd1 ;
  assign spliced_bits__h105665 = fetch_rg_burst_addr[1:0] + 2'd1 ;
  assign spliced_bits__h105736 = fetch_rg_burst_addr[2:1] + 2'd1 ;
  assign spliced_bits__h105809 = fetch_rg_burst_addr[3:2] + 2'd1 ;
  assign spliced_bits__h97592 = writeback_rg_burst_addr[2:0] + 3'd1 ;
  assign spliced_bits__h97663 = writeback_rg_burst_addr[3:1] + 3'd1 ;
  assign spliced_bits__h97736 = writeback_rg_burst_addr[4:2] + 3'd1 ;
  assign spliced_bits__h97814 = writeback_rg_burst_addr[1:0] + 2'd1 ;
  assign spliced_bits__h97885 = writeback_rg_burst_addr[2:1] + 2'd1 ;
  assign spliced_bits__h97958 = writeback_rg_burst_addr[3:2] + 2'd1 ;
  assign sx_imm_B__h22655 =
	     { {19{execute_wr_requestwget_BITS_189_TO_177__q16[12]}},
	       execute_wr_requestwget_BITS_189_TO_177__q16 } ;
  assign sx_imm_I__h22653 =
	     { {20{execute_wr_requestwget_BITS_213_TO_202__q14[11]}},
	       execute_wr_requestwget_BITS_213_TO_202__q14 } ;
  assign sx_imm_J__h22657 =
	     { {11{execute_wr_requestwget_BITS_144_TO_124__q17[20]}},
	       execute_wr_requestwget_BITS_144_TO_124__q17 } ;
  assign sx_imm_S__h22654 =
	     { {20{execute_wr_requestwget_BITS_201_TO_190__q15[11]}},
	       execute_wr_requestwget_BITS_201_TO_190__q15 } ;
  assign temp_data2838_BITS_15_TO_0__q6 = temp_data__h92838[15:0] ;
  assign temp_data2838_BITS_23_TO_0__q7 = temp_data__h92838[23:0] ;
  assign temp_data2838_BITS_7_TO_0__q5 = temp_data__h92838[7:0] ;
  assign temp_data__h92838 =
	     writeback_dcache_f_cpu_rsps_rv[67:36] >> x__h93006 ;
  assign temp_data__h92984 =
	     writeback_wr_request$wget[0] ?
	       { 24'd0, temp_data__h92838[7:0] } :
	       { {24{temp_data2838_BITS_7_TO_0__q5[7]}},
		 temp_data2838_BITS_7_TO_0__q5 } ;
  assign temp_data__h93053 =
	     writeback_wr_request$wget[0] ?
	       { 16'd0, temp_data__h92838[15:0] } :
	       { {16{temp_data2838_BITS_15_TO_0__q6[15]}},
		 temp_data2838_BITS_15_TO_0__q6 } ;
  assign temp_data__h93074 =
	     writeback_wr_request$wget[0] ?
	       { 8'd0, temp_data__h92838[23:0] } :
	       { {8{temp_data2838_BITS_23_TO_0__q7[23]}},
		 temp_data2838_BITS_23_TO_0__q7 } ;
  assign this_pc__h99173 = fetch_rg_fetch_pc - 32'd4 ;
  assign v1__h100018 =
	     (f_if_ex_rv[19:15] == 5'd0) ? 32'd0 : _unnamed_$D_OUT_2 ;
  assign v2__h100019 =
	     (f_if_ex_rv[24:20] == 5'd0) ? 32'd0 : _unnamed_$D_OUT_1 ;
  assign v__h23364 = ab__h23248[0] ? res__h23500 : res__h23511 ;
  assign v__h26656 =
	     ab__h26526[0] ?
	       res___1__h26836 :
	       _0_CONCAT_IF_execute_wrapper_mul_1_arg_whas__57_ETC___d667[63:0] ;
  assign v__h27270 =
	     (execute_wr_request$wget[64:33] == 32'd0) ?
	       32'hFFFFFFFF :
	       v__h27295 ;
  assign v__h27295 =
	     (execute_wr_request$wget[96:65] == 32'h80000000 &&
	      execute_wr_request$wget[64:33] == 32'hFFFFFFFF) ?
	       32'h80000000 :
	       v__h27563 ;
  assign v__h27538 =
	     (execute_wr_request$wget[64:33] == 32'd0) ?
	       32'hFFFFFFFF :
	       v__h27563 ;
  assign v__h27563 = ab__h27407[0] ? res___1__h27695 : res__h27631 ;
  assign v__h27748 =
	     (execute_wr_request$wget[64:33] == 32'd0) ?
	       execute_wr_request$wget[96:65] :
	       v__h27769 ;
  assign v__h27769 =
	     (execute_wr_request$wget[96:65] == 32'h80000000 &&
	      execute_wr_request$wget[64:33] == 32'hFFFFFFFF) ?
	       32'd0 :
	       v__h28103 ;
  assign v__h28082 =
	     (execute_wr_request$wget[64:33] == 32'd0) ?
	       execute_wr_request$wget[96:65] :
	       v__h28103 ;
  assign v__h28103 =
	     ab__h27884[0] ?
	       (ab7884_BITS_64_TO_33__q21[31] ?
		  -IF_IF_execute_wrapper_mod_1_arg_whas__13_THEN__ETC___d730 :
		  IF_IF_execute_wrapper_mod_1_arg_whas__13_THEN__ETC___d730) :
	       IF_execute_wrapper_mod_1_arg_whas__13_THEN_exe_ETC___d733 ;
  assign v__h28358 = ab__h23091[63:32] + ab__h23091[31:0] ;
  assign v__h28477 =
	     execute_wr_requestwget_BITS_96_TO_33__q18[63:32] -
	     execute_wr_requestwget_BITS_96_TO_33__q18[31:0] ;
  assign v__h28616 = ab__h24155[36:5] << ab__h24155[4:0] ;
  assign v__h28758 = ab__h24314[36:5] >> ab__h24314[4:0] ;
  assign v__h29433 = ab__h23632[63:32] ^ ab__h23632[31:0] ;
  assign v__h29552 = ab__h23771[63:32] & ab__h23771[31:0] ;
  assign v__h29671 = ab__h23910[63:32] | ab__h23910[31:0] ;
  assign v__h98899 =
	     fetch_rg_redirect_pc[32] ?
	       fetch_rg_redirect_pc[31:0] :
	       fetch_rg_fetch_pc ;
  assign v_data_line__h33552 = { 224'd0, writeback_wr_request$wget[78:47] } ;
  assign v_transfer_size__h33554 =
	     (writeback_wr_request$wget[30:29] == 2'd3) ?
	       2'd2 :
	       writeback_wr_request$wget[30:29] ;
  assign wr_forwarded_data_wget__919_BITS_36_TO_32_922__ETC___d2923 =
	     wr_forwarded_data$wget[36:32] == f_if_ex_rv[19:15] ;
  assign wr_forwarded_data_wget__919_BITS_36_TO_32_922__ETC___d2930 =
	     wr_forwarded_data$wget[36:32] == f_if_ex_rv[24:20] ;
  assign writeback_rg_verbosity_read__438_SLE_1___d1439 =
	     (writeback_rg_verbosity ^ 32'h80000000) <= 32'h80000001 ;
  assign writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1113 =
	     writeback_wr_request$wget[11:0] != 12'd801 &&
	     writeback_wr_request$wget[11:0] != 12'd802 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     (writeback_wr_request$wget[21:17] == 5'd0 ||
	      writeback_wr_request$wget[11:10] != 2'b11) ;
  assign writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1173 =
	     writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1113 &&
	     x__h34002 != 15'd0 &&
	     x__h34002 != 15'd8 &&
	     x__h34002 != 15'd2064 &&
	     x__h34002 != 15'd4112 &&
	     (x__h34002 != 15'd6160 || csrfile_rg_prv == 2'd3) ;
  assign writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1175 =
	     (x__h34002 == 15'd0 || x__h34002 == 15'd8 ||
	      x__h34002 == 15'd16 ||
	      x__h34002 == 15'd2064 ||
	      x__h34002 == 15'd4112 ||
	      x__h34002 == 15'd6160 ||
	      writeback_wr_request$wget[88:86] == 3'b001 ||
	      writeback_wr_request$wget[88:86] == 3'b010 ||
	      writeback_wr_request$wget[88:86] == 3'b011 ||
	      writeback_wr_request$wget[88:86] == 3'b101 ||
	      writeback_wr_request$wget[88:86] == 3'b110 ||
	      writeback_wr_request$wget[88:86] == 3'b111) &&
	     IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1174 ;
  assign writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1179 =
	     writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1113 ||
	     x__h34002 == 15'd16 ||
	     x__h34002 == 15'd6160 && csrfile_rg_prv == 2'd3 ;
  assign writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1515 =
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     (writeback_wr_request$wget[11:0] == 12'd0 ||
	      writeback_wr_request$wget[11:0] == 12'd768) ;
  assign writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1694 =
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     (writeback_wr_request$wget[11:0] == 12'd4 ||
	      writeback_wr_request$wget[11:0] == 12'd772) ;
  assign writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1700 =
	     writeback_wr_request$wget[11:0] != 12'd801 &&
	     writeback_wr_request$wget[11:0] != 12'd802 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     (writeback_wr_request$wget[21:17] == 5'd0 ||
	      writeback_wr_request$wget[11:10] != 2'b11) &&
	     writeback_wr_request$wget[53:22] != 32'd0 &&
	     (writeback_wr_request$wget[11:0] == 12'd4 ||
	      writeback_wr_request$wget[11:0] == 12'd772) ;
  assign writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1857 =
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     (writeback_wr_request$wget[11:0] == 12'd68 ||
	      writeback_wr_request$wget[11:0] == 12'd836) ;
  assign writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1863 =
	     writeback_wr_request$wget[11:0] != 12'd801 &&
	     writeback_wr_request$wget[11:0] != 12'd802 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     (writeback_wr_request$wget[21:17] == 5'd0 ||
	      writeback_wr_request$wget[11:10] != 2'b11) &&
	     writeback_wr_request$wget[53:22] != 32'd0 &&
	     (writeback_wr_request$wget[11:0] == 12'd68 ||
	      writeback_wr_request$wget[11:0] == 12'd836) ;
  assign writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554 =
	     writeback_wr_request$wget[53:22] | y__h50048 ;
  assign writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558 =
	     writeback_wr_request$wget[53:22] & y__h57256 ;
  assign writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542 =
	     writeback_wr_request$wget[85:54] | y__h50048 ;
  assign writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547 =
	     writeback_wr_request$wget[85:54] & y__h57256 ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1529 =
	     writeback_wr_request$wget[88:86] == 3'b011 &&
	     writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1515 ||
	     writeback_wr_request$wget[88:86] == 3'b101 &&
	     writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1113 &&
	     writeback_wr_request$wget[53:22] != 32'd0 &&
	     (writeback_wr_request$wget[11:0] == 12'd0 ||
	      writeback_wr_request$wget[11:0] == 12'd768) ||
	     (writeback_wr_request$wget[88:86] == 3'b110 ||
	      writeback_wr_request$wget[88:86] == 3'b111) &&
	     writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1113 &&
	     writeback_wr_request$wget[53:22] != 32'd0 &&
	     (writeback_wr_request$wget[11:0] == 12'd0 ||
	      writeback_wr_request$wget[11:0] == 12'd768) ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1533 =
	     writeback_wr_request$wget[88:86] == 3'b001 &&
	     writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1515 ||
	     writeback_wr_request$wget[88:86] != 3'b001 &&
	     (writeback_wr_request$wget[88:86] == 3'b010 &&
	      writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1515 ||
	      writeback_wr_request$wget[88:86] != 3'b010 &&
	      writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1529) ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1706 =
	     writeback_wr_request$wget[88:86] == 3'b011 &&
	     writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1694 ||
	     writeback_wr_request$wget[88:86] == 3'b101 &&
	     writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1700 ||
	     (writeback_wr_request$wget[88:86] == 3'b110 ||
	      writeback_wr_request$wget[88:86] == 3'b111) &&
	     writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1700 ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1710 =
	     writeback_wr_request$wget[88:86] == 3'b001 &&
	     writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1694 ||
	     writeback_wr_request$wget[88:86] != 3'b001 &&
	     (writeback_wr_request$wget[88:86] == 3'b010 &&
	      writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1694 ||
	      writeback_wr_request$wget[88:86] != 3'b010 &&
	      writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1706) ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1738 =
	     writeback_wr_request$wget[88:86] == 3'b011 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd5 ||
	     writeback_wr_request$wget[88:86] == 3'b101 &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d1732 ||
	     (writeback_wr_request$wget[88:86] == 3'b110 ||
	      writeback_wr_request$wget[88:86] == 3'b111) &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d1732 ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1742 =
	     writeback_wr_request$wget[88:86] == 3'b001 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd5 ||
	     writeback_wr_request$wget[88:86] != 3'b001 &&
	     (writeback_wr_request$wget[88:86] == 3'b010 &&
	      !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	      writeback_wr_request$wget[21:17] != 5'd0 &&
	      writeback_wr_request$wget[11:0] == 12'd5 ||
	      writeback_wr_request$wget[88:86] != 3'b010 &&
	      writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1738) ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1770 =
	     writeback_wr_request$wget[88:86] == 3'b011 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd64 ||
	     writeback_wr_request$wget[88:86] == 3'b101 &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d1764 ||
	     (writeback_wr_request$wget[88:86] == 3'b110 ||
	      writeback_wr_request$wget[88:86] == 3'b111) &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d1764 ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1774 =
	     writeback_wr_request$wget[88:86] == 3'b001 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd64 ||
	     writeback_wr_request$wget[88:86] != 3'b001 &&
	     (writeback_wr_request$wget[88:86] == 3'b010 &&
	      !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	      writeback_wr_request$wget[21:17] != 5'd0 &&
	      writeback_wr_request$wget[11:0] == 12'd64 ||
	      writeback_wr_request$wget[88:86] != 3'b010 &&
	      writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1770) ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1796 =
	     writeback_wr_request$wget[88:86] == 3'b011 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd65 ||
	     writeback_wr_request$wget[88:86] == 3'b101 &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d1790 ||
	     (writeback_wr_request$wget[88:86] == 3'b110 ||
	      writeback_wr_request$wget[88:86] == 3'b111) &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d1790 ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1800 =
	     writeback_wr_request$wget[88:86] == 3'b001 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd65 ||
	     writeback_wr_request$wget[88:86] != 3'b001 &&
	     (writeback_wr_request$wget[88:86] == 3'b010 &&
	      !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	      writeback_wr_request$wget[21:17] != 5'd0 &&
	      writeback_wr_request$wget[11:0] == 12'd65 ||
	      writeback_wr_request$wget[88:86] != 3'b010 &&
	      writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1796) ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1817 =
	     writeback_wr_request$wget[88:86] == 3'b011 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd66 ||
	     writeback_wr_request$wget[88:86] == 3'b101 &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d1811 ||
	     (writeback_wr_request$wget[88:86] == 3'b110 ||
	      writeback_wr_request$wget[88:86] == 3'b111) &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d1811 ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1821 =
	     writeback_wr_request$wget[88:86] == 3'b001 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd66 ||
	     writeback_wr_request$wget[88:86] != 3'b001 &&
	     (writeback_wr_request$wget[88:86] == 3'b010 &&
	      !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	      writeback_wr_request$wget[21:17] != 5'd0 &&
	      writeback_wr_request$wget[11:0] == 12'd66 ||
	      writeback_wr_request$wget[88:86] != 3'b010 &&
	      writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1817) ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1838 =
	     writeback_wr_request$wget[88:86] == 3'b011 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd67 ||
	     writeback_wr_request$wget[88:86] == 3'b101 &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d1832 ||
	     (writeback_wr_request$wget[88:86] == 3'b110 ||
	      writeback_wr_request$wget[88:86] == 3'b111) &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d1832 ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1842 =
	     writeback_wr_request$wget[88:86] == 3'b001 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd67 ||
	     writeback_wr_request$wget[88:86] != 3'b001 &&
	     (writeback_wr_request$wget[88:86] == 3'b010 &&
	      !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	      writeback_wr_request$wget[21:17] != 5'd0 &&
	      writeback_wr_request$wget[11:0] == 12'd67 ||
	      writeback_wr_request$wget[88:86] != 3'b010 &&
	      writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1838) ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1869 =
	     writeback_wr_request$wget[88:86] == 3'b011 &&
	     writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1857 ||
	     writeback_wr_request$wget[88:86] == 3'b101 &&
	     writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1863 ||
	     (writeback_wr_request$wget[88:86] == 3'b110 ||
	      writeback_wr_request$wget[88:86] == 3'b111) &&
	     writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1863 ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1873 =
	     writeback_wr_request$wget[88:86] == 3'b001 &&
	     writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1857 ||
	     writeback_wr_request$wget[88:86] != 3'b001 &&
	     (writeback_wr_request$wget[88:86] == 3'b010 &&
	      writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1857 ||
	      writeback_wr_request$wget[88:86] != 3'b010 &&
	      writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1869) ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1890 =
	     writeback_wr_request$wget[88:86] == 3'b011 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd769 ||
	     writeback_wr_request$wget[88:86] == 3'b101 &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d1884 ||
	     (writeback_wr_request$wget[88:86] == 3'b110 ||
	      writeback_wr_request$wget[88:86] == 3'b111) &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d1884 ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1894 =
	     writeback_wr_request$wget[88:86] == 3'b001 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd769 ||
	     writeback_wr_request$wget[88:86] != 3'b001 &&
	     (writeback_wr_request$wget[88:86] == 3'b010 &&
	      !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	      writeback_wr_request$wget[21:17] != 5'd0 &&
	      writeback_wr_request$wget[11:0] == 12'd769 ||
	      writeback_wr_request$wget[88:86] != 3'b010 &&
	      writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1890) ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1911 =
	     writeback_wr_request$wget[88:86] == 3'b011 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd768 ||
	     writeback_wr_request$wget[88:86] == 3'b101 &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d1905 ||
	     (writeback_wr_request$wget[88:86] == 3'b110 ||
	      writeback_wr_request$wget[88:86] == 3'b111) &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d1905 ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1915 =
	     writeback_wr_request$wget[88:86] == 3'b001 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd768 ||
	     writeback_wr_request$wget[88:86] != 3'b001 &&
	     (writeback_wr_request$wget[88:86] == 3'b010 &&
	      !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	      writeback_wr_request$wget[21:17] != 5'd0 &&
	      writeback_wr_request$wget[11:0] == 12'd768 ||
	      writeback_wr_request$wget[88:86] != 3'b010 &&
	      writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1911) ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1959 =
	     writeback_wr_request$wget[88:86] == 3'b011 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd770 ||
	     writeback_wr_request$wget[88:86] == 3'b101 &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d1953 ||
	     (writeback_wr_request$wget[88:86] == 3'b110 ||
	      writeback_wr_request$wget[88:86] == 3'b111) &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d1953 ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1963 =
	     writeback_wr_request$wget[88:86] == 3'b001 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd770 ||
	     writeback_wr_request$wget[88:86] != 3'b001 &&
	     (writeback_wr_request$wget[88:86] == 3'b010 &&
	      !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	      writeback_wr_request$wget[21:17] != 5'd0 &&
	      writeback_wr_request$wget[11:0] == 12'd770 ||
	      writeback_wr_request$wget[88:86] != 3'b010 &&
	      writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1959) ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1991 =
	     writeback_wr_request$wget[88:86] == 3'b011 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd771 ||
	     writeback_wr_request$wget[88:86] == 3'b101 &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d1985 ||
	     (writeback_wr_request$wget[88:86] == 3'b110 ||
	      writeback_wr_request$wget[88:86] == 3'b111) &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d1985 ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1995 =
	     writeback_wr_request$wget[88:86] == 3'b001 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd771 ||
	     writeback_wr_request$wget[88:86] != 3'b001 &&
	     (writeback_wr_request$wget[88:86] == 3'b010 &&
	      !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	      writeback_wr_request$wget[21:17] != 5'd0 &&
	      writeback_wr_request$wget[11:0] == 12'd771 ||
	      writeback_wr_request$wget[88:86] != 3'b010 &&
	      writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d1991) ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2012 =
	     writeback_wr_request$wget[88:86] == 3'b011 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd772 ||
	     writeback_wr_request$wget[88:86] == 3'b101 &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2006 ||
	     (writeback_wr_request$wget[88:86] == 3'b110 ||
	      writeback_wr_request$wget[88:86] == 3'b111) &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2006 ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2016 =
	     writeback_wr_request$wget[88:86] == 3'b001 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd772 ||
	     writeback_wr_request$wget[88:86] != 3'b001 &&
	     (writeback_wr_request$wget[88:86] == 3'b010 &&
	      !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	      writeback_wr_request$wget[21:17] != 5'd0 &&
	      writeback_wr_request$wget[11:0] == 12'd772 ||
	      writeback_wr_request$wget[88:86] != 3'b010 &&
	      writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2012) ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2077 =
	     writeback_wr_request$wget[88:86] == 3'b011 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd773 ||
	     writeback_wr_request$wget[88:86] == 3'b101 &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2071 ||
	     (writeback_wr_request$wget[88:86] == 3'b110 ||
	      writeback_wr_request$wget[88:86] == 3'b111) &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2071 ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2081 =
	     writeback_wr_request$wget[88:86] == 3'b001 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd773 ||
	     writeback_wr_request$wget[88:86] != 3'b001 &&
	     (writeback_wr_request$wget[88:86] == 3'b010 &&
	      !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	      writeback_wr_request$wget[21:17] != 5'd0 &&
	      writeback_wr_request$wget[11:0] == 12'd773 ||
	      writeback_wr_request$wget[88:86] != 3'b010 &&
	      writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2077) ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2098 =
	     writeback_wr_request$wget[88:86] == 3'b011 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd832 ||
	     writeback_wr_request$wget[88:86] == 3'b101 &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2092 ||
	     (writeback_wr_request$wget[88:86] == 3'b110 ||
	      writeback_wr_request$wget[88:86] == 3'b111) &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2092 ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2102 =
	     writeback_wr_request$wget[88:86] == 3'b001 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd832 ||
	     writeback_wr_request$wget[88:86] != 3'b001 &&
	     (writeback_wr_request$wget[88:86] == 3'b010 &&
	      !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	      writeback_wr_request$wget[21:17] != 5'd0 &&
	      writeback_wr_request$wget[11:0] == 12'd832 ||
	      writeback_wr_request$wget[88:86] != 3'b010 &&
	      writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2098) ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2119 =
	     writeback_wr_request$wget[88:86] == 3'b011 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd833 ||
	     writeback_wr_request$wget[88:86] == 3'b101 &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2113 ||
	     (writeback_wr_request$wget[88:86] == 3'b110 ||
	      writeback_wr_request$wget[88:86] == 3'b111) &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2113 ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2123 =
	     writeback_wr_request$wget[88:86] == 3'b001 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd833 ||
	     writeback_wr_request$wget[88:86] != 3'b001 &&
	     (writeback_wr_request$wget[88:86] == 3'b010 &&
	      !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	      writeback_wr_request$wget[21:17] != 5'd0 &&
	      writeback_wr_request$wget[11:0] == 12'd833 ||
	      writeback_wr_request$wget[88:86] != 3'b010 &&
	      writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2119) ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2140 =
	     writeback_wr_request$wget[88:86] == 3'b011 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd834 ||
	     writeback_wr_request$wget[88:86] == 3'b101 &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2134 ||
	     (writeback_wr_request$wget[88:86] == 3'b110 ||
	      writeback_wr_request$wget[88:86] == 3'b111) &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2134 ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2144 =
	     writeback_wr_request$wget[88:86] == 3'b001 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd834 ||
	     writeback_wr_request$wget[88:86] != 3'b001 &&
	     (writeback_wr_request$wget[88:86] == 3'b010 &&
	      !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	      writeback_wr_request$wget[21:17] != 5'd0 &&
	      writeback_wr_request$wget[11:0] == 12'd834 ||
	      writeback_wr_request$wget[88:86] != 3'b010 &&
	      writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2140) ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2161 =
	     writeback_wr_request$wget[88:86] == 3'b011 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd835 ||
	     writeback_wr_request$wget[88:86] == 3'b101 &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2155 ||
	     (writeback_wr_request$wget[88:86] == 3'b110 ||
	      writeback_wr_request$wget[88:86] == 3'b111) &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2155 ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2165 =
	     writeback_wr_request$wget[88:86] == 3'b001 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd835 ||
	     writeback_wr_request$wget[88:86] != 3'b001 &&
	     (writeback_wr_request$wget[88:86] == 3'b010 &&
	      !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	      writeback_wr_request$wget[21:17] != 5'd0 &&
	      writeback_wr_request$wget[11:0] == 12'd835 ||
	      writeback_wr_request$wget[88:86] != 3'b010 &&
	      writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2161) ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2182 =
	     writeback_wr_request$wget[88:86] == 3'b011 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd836 ||
	     writeback_wr_request$wget[88:86] == 3'b101 &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2176 ||
	     (writeback_wr_request$wget[88:86] == 3'b110 ||
	      writeback_wr_request$wget[88:86] == 3'b111) &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2176 ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2186 =
	     writeback_wr_request$wget[88:86] == 3'b001 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd836 ||
	     writeback_wr_request$wget[88:86] != 3'b001 &&
	     (writeback_wr_request$wget[88:86] == 3'b010 &&
	      !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	      writeback_wr_request$wget[21:17] != 5'd0 &&
	      writeback_wr_request$wget[11:0] == 12'd836 ||
	      writeback_wr_request$wget[88:86] != 3'b010 &&
	      writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2182) ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2203 =
	     writeback_wr_request$wget[88:86] == 3'b011 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd896 ||
	     writeback_wr_request$wget[88:86] == 3'b101 &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2197 ||
	     (writeback_wr_request$wget[88:86] == 3'b110 ||
	      writeback_wr_request$wget[88:86] == 3'b111) &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2197 ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2207 =
	     writeback_wr_request$wget[88:86] == 3'b001 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd896 ||
	     writeback_wr_request$wget[88:86] != 3'b001 &&
	     (writeback_wr_request$wget[88:86] == 3'b010 &&
	      !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	      writeback_wr_request$wget[21:17] != 5'd0 &&
	      writeback_wr_request$wget[11:0] == 12'd896 ||
	      writeback_wr_request$wget[88:86] != 3'b010 &&
	      writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2203) ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2224 =
	     writeback_wr_request$wget[88:86] == 3'b011 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd897 ||
	     writeback_wr_request$wget[88:86] == 3'b101 &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2218 ||
	     (writeback_wr_request$wget[88:86] == 3'b110 ||
	      writeback_wr_request$wget[88:86] == 3'b111) &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2218 ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2228 =
	     writeback_wr_request$wget[88:86] == 3'b001 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd897 ||
	     writeback_wr_request$wget[88:86] != 3'b001 &&
	     (writeback_wr_request$wget[88:86] == 3'b010 &&
	      !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	      writeback_wr_request$wget[21:17] != 5'd0 &&
	      writeback_wr_request$wget[11:0] == 12'd897 ||
	      writeback_wr_request$wget[88:86] != 3'b010 &&
	      writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2224) ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2245 =
	     writeback_wr_request$wget[88:86] == 3'b011 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd898 ||
	     writeback_wr_request$wget[88:86] == 3'b101 &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2239 ||
	     (writeback_wr_request$wget[88:86] == 3'b110 ||
	      writeback_wr_request$wget[88:86] == 3'b111) &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2239 ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2249 =
	     writeback_wr_request$wget[88:86] == 3'b001 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd898 ||
	     writeback_wr_request$wget[88:86] != 3'b001 &&
	     (writeback_wr_request$wget[88:86] == 3'b010 &&
	      !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	      writeback_wr_request$wget[21:17] != 5'd0 &&
	      writeback_wr_request$wget[11:0] == 12'd898 ||
	      writeback_wr_request$wget[88:86] != 3'b010 &&
	      writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2245) ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2266 =
	     writeback_wr_request$wget[88:86] == 3'b011 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd899 ||
	     writeback_wr_request$wget[88:86] == 3'b101 &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2260 ||
	     (writeback_wr_request$wget[88:86] == 3'b110 ||
	      writeback_wr_request$wget[88:86] == 3'b111) &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2260 ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2270 =
	     writeback_wr_request$wget[88:86] == 3'b001 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd899 ||
	     writeback_wr_request$wget[88:86] != 3'b001 &&
	     (writeback_wr_request$wget[88:86] == 3'b010 &&
	      !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	      writeback_wr_request$wget[21:17] != 5'd0 &&
	      writeback_wr_request$wget[11:0] == 12'd899 ||
	      writeback_wr_request$wget[88:86] != 3'b010 &&
	      writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2266) ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2287 =
	     writeback_wr_request$wget[88:86] == 3'b011 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd900 ||
	     writeback_wr_request$wget[88:86] == 3'b101 &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2281 ||
	     (writeback_wr_request$wget[88:86] == 3'b110 ||
	      writeback_wr_request$wget[88:86] == 3'b111) &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2281 ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2291 =
	     writeback_wr_request$wget[88:86] == 3'b001 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd900 ||
	     writeback_wr_request$wget[88:86] != 3'b001 &&
	     (writeback_wr_request$wget[88:86] == 3'b010 &&
	      !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	      writeback_wr_request$wget[21:17] != 5'd0 &&
	      writeback_wr_request$wget[11:0] == 12'd900 ||
	      writeback_wr_request$wget[88:86] != 3'b010 &&
	      writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2287) ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2308 =
	     writeback_wr_request$wget[88:86] == 3'b011 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd901 ||
	     writeback_wr_request$wget[88:86] == 3'b101 &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2302 ||
	     (writeback_wr_request$wget[88:86] == 3'b110 ||
	      writeback_wr_request$wget[88:86] == 3'b111) &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2302 ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2312 =
	     writeback_wr_request$wget[88:86] == 3'b001 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd901 ||
	     writeback_wr_request$wget[88:86] != 3'b001 &&
	     (writeback_wr_request$wget[88:86] == 3'b010 &&
	      !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	      writeback_wr_request$wget[21:17] != 5'd0 &&
	      writeback_wr_request$wget[11:0] == 12'd901 ||
	      writeback_wr_request$wget[88:86] != 3'b010 &&
	      writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2308) ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2329 =
	     writeback_wr_request$wget[88:86] == 3'b011 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd2816 ||
	     writeback_wr_request$wget[88:86] == 3'b101 &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2323 ||
	     (writeback_wr_request$wget[88:86] == 3'b110 ||
	      writeback_wr_request$wget[88:86] == 3'b111) &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2323 ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2333 =
	     writeback_wr_request$wget[88:86] == 3'b001 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd2816 ||
	     writeback_wr_request$wget[88:86] != 3'b001 &&
	     (writeback_wr_request$wget[88:86] == 3'b010 &&
	      !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	      writeback_wr_request$wget[21:17] != 5'd0 &&
	      writeback_wr_request$wget[11:0] == 12'd2816 ||
	      writeback_wr_request$wget[88:86] != 3'b010 &&
	      writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2329) ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2350 =
	     writeback_wr_request$wget[88:86] == 3'b011 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd2818 ||
	     writeback_wr_request$wget[88:86] == 3'b101 &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2344 ||
	     (writeback_wr_request$wget[88:86] == 3'b110 ||
	      writeback_wr_request$wget[88:86] == 3'b111) &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2344 ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2354 =
	     writeback_wr_request$wget[88:86] == 3'b001 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd2818 ||
	     writeback_wr_request$wget[88:86] != 3'b001 &&
	     (writeback_wr_request$wget[88:86] == 3'b010 &&
	      !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	      writeback_wr_request$wget[21:17] != 5'd0 &&
	      writeback_wr_request$wget[11:0] == 12'd2818 ||
	      writeback_wr_request$wget[88:86] != 3'b010 &&
	      writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2350) ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2371 =
	     writeback_wr_request$wget[88:86] == 3'b011 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd2944 ||
	     writeback_wr_request$wget[88:86] == 3'b101 &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2365 ||
	     (writeback_wr_request$wget[88:86] == 3'b110 ||
	      writeback_wr_request$wget[88:86] == 3'b111) &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2365 ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2375 =
	     writeback_wr_request$wget[88:86] == 3'b001 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd2944 ||
	     writeback_wr_request$wget[88:86] != 3'b001 &&
	     (writeback_wr_request$wget[88:86] == 3'b010 &&
	      !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	      writeback_wr_request$wget[21:17] != 5'd0 &&
	      writeback_wr_request$wget[11:0] == 12'd2944 ||
	      writeback_wr_request$wget[88:86] != 3'b010 &&
	      writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2371) ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2392 =
	     writeback_wr_request$wget[88:86] == 3'b011 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd2946 ||
	     writeback_wr_request$wget[88:86] == 3'b101 &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2386 ||
	     (writeback_wr_request$wget[88:86] == 3'b110 ||
	      writeback_wr_request$wget[88:86] == 3'b111) &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2386 ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2396 =
	     writeback_wr_request$wget[88:86] == 3'b001 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd2946 ||
	     writeback_wr_request$wget[88:86] != 3'b001 &&
	     (writeback_wr_request$wget[88:86] == 3'b010 &&
	      !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	      writeback_wr_request$wget[21:17] != 5'd0 &&
	      writeback_wr_request$wget[11:0] == 12'd2946 ||
	      writeback_wr_request$wget[88:86] != 3'b010 &&
	      writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2392) ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2413 =
	     writeback_wr_request$wget[88:86] == 3'b011 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd800 ||
	     writeback_wr_request$wget[88:86] == 3'b101 &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2407 ||
	     (writeback_wr_request$wget[88:86] == 3'b110 ||
	      writeback_wr_request$wget[88:86] == 3'b111) &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2407 ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2417 =
	     writeback_wr_request$wget[88:86] == 3'b001 &&
	     !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	     writeback_wr_request$wget[21:17] != 5'd0 &&
	     writeback_wr_request$wget[11:0] == 12'd800 ||
	     writeback_wr_request$wget[88:86] != 3'b001 &&
	     (writeback_wr_request$wget[88:86] == 3'b010 &&
	      !csrfile_rg_prv_port0__read__51_ULT_writeback_w_ETC___d953 &&
	      writeback_wr_request$wget[21:17] != 5'd0 &&
	      writeback_wr_request$wget[11:0] == 12'd800 ||
	      writeback_wr_request$wget[88:86] != 3'b010 &&
	      writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2413) ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2485 =
	     writeback_wr_request$wget[88:86] == 3'b011 &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2474 ||
	     writeback_wr_request$wget[88:86] == 3'b101 &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2479 ||
	     (writeback_wr_request$wget[88:86] == 3'b110 ||
	      writeback_wr_request$wget[88:86] == 3'b111) &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2479 ;
  assign writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2489 =
	     writeback_wr_request$wget[88:86] == 3'b001 &&
	     NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2474 ||
	     writeback_wr_request$wget[88:86] != 3'b001 &&
	     (writeback_wr_request$wget[88:86] == 3'b010 &&
	      NOT_csrfile_rg_prv_port0__read__51_ULT_writeba_ETC___d2474 ||
	      writeback_wr_request$wget[88:86] != 3'b010 &&
	      writeback_wr_request_wget__58_BITS_88_TO_86_65_ETC___d2485) ;
  assign writeback_wr_request_wget__58_BITS_95_TO_89_62_ETC___d1491 =
	     writeback_wr_request$wget[95:89] == 7'd115 &&
	     (x__h34002 == 15'd16 ||
	      x__h34002 == 15'd6160 && csrfile_rg_prv == 2'd3) ;
  assign writeback_wr_request_wget__58_BITS_95_TO_89_62_ETC___d1503 =
	     writeback_wr_request$wget[95:89] == 7'd115 &&
	     x__h34002 == 15'd6160 &&
	     csrfile_rg_prv == 2'd3 &&
	     csrfile_rg_mpp == 2'd3 ;
  assign writeback_wr_request_wget__58_BITS_95_TO_89_62_ETC___d2506 =
	     writeback_wr_request$wget[95:89] == 7'd115 &&
	     writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1175 &&
	     IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1180 &&
	     IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1211 &&
	     !writeback_rg_verbosity_read__438_SLE_1___d1439 ;
  assign writeback_wr_request_wget__58_BITS_95_TO_89_62_ETC___d2513 =
	     writeback_wr_request$wget[95:89] == 7'd115 &&
	     writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1175 &&
	     IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1180 &&
	     IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1214 &&
	     IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1414 &&
	     !writeback_rg_verbosity_read__438_SLE_1___d1439 ;
  assign writeback_wr_request_wget__58_BIT_119_59_OR_wr_ETC___d1020 =
	     writeback_wr_request$wget[119] ||
	     writeback_wr_request$wget[118:116] == 3'd3 &&
	     writeback_wr_request$wget[95:89] == 7'd115 &&
	     NOT_writeback_wr_request_wget__58_BITS_11_TO_0_ETC___d972 ||
	     pending_interrupts__h31890 != 12'd0 ;
  assign x__h100915 = { f_if_ex_rv[31:25], f_if_ex_rv[11:7] } ;
  assign x__h101375 =
	     (wr_forwarded_data$whas && wr_forwarded_data$wget[37]) ?
	       _theResult___fst__h101419 :
	       v1__h100018 ;
  assign x__h101440 =
	     (wr_forwarded_data$whas && wr_forwarded_data$wget[37]) ?
	       _theResult___snd__h101420 :
	       v2__h100019 ;
  assign x__h10437 = csrfile_uart_rRecvBitCount + 4'd1 ;
  assign x__h105430 = fetch_rg_burst_addr + y__h105432 ;
  assign x__h105966 = imem_ifc_rx_put[23:22] != 2'd0 ;
  assign x__h12252 = csrfile_uart_rXmitCellCount + 4'd1 ;
  assign x__h12278 = csrfile_uart_rXmitBitCount + 4'd1 ;
  assign x__h24026 =
	     { execute_wr_request$wget[123:121],
	       execute_wr_request$wget[115:109] } ;
  assign x__h26686 =
	     execute_wr_request$wget[96] ?
	       ~execute_wr_request$wget[96:65] + 32'd1 :
	       execute_wr_request$wget[96:65] ;
  assign x__h26712 =
	     execute_wr_request$wget[64] ?
	       ~execute_wr_request$wget[64:33] + 32'd1 :
	       execute_wr_request$wget[64:33] ;
  assign x__h28264 =
	     ab7884_BITS_64_TO_33__q21[31] ?
	       -ab__h27884[64:33] :
	       ab__h27884[64:33] ;
  assign x__h30119 = { 27'd0, execute_wr_request$wget[230:226] } ;
  assign x__h34002 =
	     { writeback_wr_request$wget[11:0],
	       writeback_wr_request$wget[88:86] } ;
  assign x__h8796 = csrfile_uart_rRecvCellCount + 4'd1 ;
  assign x__h93006 = { writeback_wr_request$wget[80:79], 3'b0 } ;
  assign x__h96177 =
	     csrfile_rg_prv$EN_port0__write ?
	       csrfile_rg_prv$port0__write_1 :
	       csrfile_rg_prv ;
  assign x__h97579 = writeback_rg_burst_addr + y__h97581 ;
  assign x__h98186 = writeback_f_dmem_rsps_rv$port1__read[23:22] != 2'd0 ;
  assign x_port1__read__h95097 =
	     csrfile_rg_uie$EN_port0__write ?
	       csrfile_rg_uie$port0__write_1 :
	       csrfile_rg_uie ;
  assign y__h105432 = { 30'd0, fetch_rg_burst_size } ;
  assign y__h28265 =
	     IF_IF_execute_wrapper_mod_1_arg_whas__13_THEN__ETC___d725[31] ?
	       ((ab__h27884[32:1] == 32'd0) ?
		  32'hFFFFFFFF :
		  -ab__h27884[32:1]) :
	       IF_IF_execute_wrapper_mod_1_arg_whas__13_THEN__ETC___d725 ;
  assign y__h31928 = ~csrfile_rg_mideleg ;
  assign y__h57256 = ~y__h50048 ;
  assign y__h97581 = { 30'd0, writeback_rg_burst_size } ;
  assign z__h13666 =
	     csrfile_uart_fifoXmit$D_OUT[0] ^ csrfile_uart_fifoXmit$D_OUT[1] ;
  assign z__h13673 = z__h13666 ^ csrfile_uart_fifoXmit$D_OUT[2] ;
  assign z__h13680 = z__h13673 ^ csrfile_uart_fifoXmit$D_OUT[3] ;
  assign z__h13687 = z__h13680 ^ csrfile_uart_fifoXmit$D_OUT[4] ;
  assign z__h13694 = z__h13687 ^ csrfile_uart_fifoXmit$D_OUT[5] ;
  assign z__h13701 = z__h13694 ^ csrfile_uart_fifoXmit$D_OUT[6] ;
  always@(f_ex_wb_rv or dest__h104301)
  begin
    case (f_ex_wb_rv[118:116])
      3'd0:
	  dest__h104154 =
	      (f_ex_wb_rv[114:113] == 2'd0) ? f_ex_wb_rv[5:1] : 5'd0;
      3'd1: dest__h104154 = f_ex_wb_rv[4:0];
      3'd2: dest__h104154 = dest__h104301;
      3'd3: dest__h104154 = f_ex_wb_rv[16:12];
      default: dest__h104154 = 5'd0;
    endcase
  end
  always@(writeback_rg_burst_size or
	  writeback_rg_burst_addr or
	  spliced_bits__h97592 or
	  spliced_bits__h97663 or spliced_bits__h97736)
  begin
    case (writeback_rg_burst_size)
      2'd0:
	  IF_writeback_rg_burst_size_read__718_EQ_0_723__ETC___d2742 =
	      { writeback_rg_burst_addr[31:3], spliced_bits__h97592 };
      2'd1:
	  IF_writeback_rg_burst_size_read__718_EQ_0_723__ETC___d2742 =
	      { writeback_rg_burst_addr[31:4],
		spliced_bits__h97663,
		writeback_rg_burst_addr[0] };
      2'd2:
	  IF_writeback_rg_burst_size_read__718_EQ_0_723__ETC___d2742 =
	      writeback_rg_burst_addr;
      2'd3:
	  IF_writeback_rg_burst_size_read__718_EQ_0_723__ETC___d2742 =
	      { writeback_rg_burst_addr[31:5],
		spliced_bits__h97736,
		writeback_rg_burst_addr[1:0] };
    endcase
  end
  always@(writeback_rg_burst_size or
	  writeback_rg_burst_addr or
	  spliced_bits__h97814 or
	  spliced_bits__h97885 or spliced_bits__h97958)
  begin
    case (writeback_rg_burst_size)
      2'd0:
	  IF_writeback_rg_burst_size_read__718_EQ_0_723__ETC___d2755 =
	      { writeback_rg_burst_addr[31:2], spliced_bits__h97814 };
      2'd1:
	  IF_writeback_rg_burst_size_read__718_EQ_0_723__ETC___d2755 =
	      { writeback_rg_burst_addr[31:3],
		spliced_bits__h97885,
		writeback_rg_burst_addr[0] };
      2'd2:
	  IF_writeback_rg_burst_size_read__718_EQ_0_723__ETC___d2755 =
	      writeback_rg_burst_addr;
      2'd3:
	  IF_writeback_rg_burst_size_read__718_EQ_0_723__ETC___d2755 =
	      { writeback_rg_burst_addr[31:4],
		spliced_bits__h97958,
		writeback_rg_burst_addr[1:0] };
    endcase
  end
  always@(fetch_rg_burst_size or
	  fetch_rg_burst_addr or
	  spliced_bits__h105443 or
	  spliced_bits__h105514 or spliced_bits__h105587)
  begin
    case (fetch_rg_burst_size)
      2'd0:
	  IF_fetch_rg_burst_size_read__115_EQ_0_120_THEN_ETC___d3139 =
	      { fetch_rg_burst_addr[31:3], spliced_bits__h105443 };
      2'd1:
	  IF_fetch_rg_burst_size_read__115_EQ_0_120_THEN_ETC___d3139 =
	      { fetch_rg_burst_addr[31:4],
		spliced_bits__h105514,
		fetch_rg_burst_addr[0] };
      2'd2:
	  IF_fetch_rg_burst_size_read__115_EQ_0_120_THEN_ETC___d3139 =
	      fetch_rg_burst_addr;
      2'd3:
	  IF_fetch_rg_burst_size_read__115_EQ_0_120_THEN_ETC___d3139 =
	      { fetch_rg_burst_addr[31:5],
		spliced_bits__h105587,
		fetch_rg_burst_addr[1:0] };
    endcase
  end
  always@(fetch_rg_burst_size or
	  fetch_rg_burst_addr or
	  spliced_bits__h105665 or
	  spliced_bits__h105736 or spliced_bits__h105809)
  begin
    case (fetch_rg_burst_size)
      2'd0:
	  IF_fetch_rg_burst_size_read__115_EQ_0_120_THEN_ETC___d3152 =
	      { fetch_rg_burst_addr[31:2], spliced_bits__h105665 };
      2'd1:
	  IF_fetch_rg_burst_size_read__115_EQ_0_120_THEN_ETC___d3152 =
	      { fetch_rg_burst_addr[31:3],
		spliced_bits__h105736,
		fetch_rg_burst_addr[0] };
      2'd2:
	  IF_fetch_rg_burst_size_read__115_EQ_0_120_THEN_ETC___d3152 =
	      fetch_rg_burst_addr;
      2'd3:
	  IF_fetch_rg_burst_size_read__115_EQ_0_120_THEN_ETC___d3152 =
	      { fetch_rg_burst_addr[31:4],
		spliced_bits__h105809,
		fetch_rg_burst_addr[1:0] };
    endcase
  end
  always@(f_if_ex_rv)
  begin
    case (f_if_ex_rv[3:0])
      4'd0,
      4'd1,
      4'd2,
      4'd3,
      4'd4,
      4'd5,
      4'd6,
      4'd7,
      4'd8,
      4'd9,
      4'd10,
      4'd11:
	  CASE_f_if_ex_rv_BITS_3_TO_0_0_f_if_ex_rv_BITS__ETC__q1 =
	      f_if_ex_rv[3:0];
      default: CASE_f_if_ex_rv_BITS_3_TO_0_0_f_if_ex_rv_BITS__ETC__q1 = 4'd15;
    endcase
  end
  always@(f_ex_wb_rv)
  begin
    case (f_ex_wb_rv[3:0])
      4'd0,
      4'd1,
      4'd2,
      4'd3,
      4'd4,
      4'd5,
      4'd6,
      4'd7,
      4'd8,
      4'd9,
      4'd10,
      4'd11:
	  CASE_f_ex_wb_rv_BITS_3_TO_0_0_f_ex_wb_rv_BITS__ETC__q2 =
	      f_ex_wb_rv[3:0];
      default: CASE_f_ex_wb_rv_BITS_3_TO_0_0_f_ex_wb_rv_BITS__ETC__q2 = 4'd15;
    endcase
  end
  always@(f_ex_wb_rv)
  begin
    case (f_ex_wb_rv[118:116])
      3'd0, 3'd1, 3'd2, 3'd3:
	  CASE_f_ex_wb_rv_BITS_118_TO_116_0_f_ex_wb_rv_B_ETC__q3 =
	      f_ex_wb_rv[118:116];
      default: CASE_f_ex_wb_rv_BITS_118_TO_116_0_f_ex_wb_rv_B_ETC__q3 = 3'd4;
    endcase
  end
  always@(f_ex_wb_rv)
  begin
    case (f_ex_wb_rv[118:116])
      3'd0, 3'd1:
	  CASE_f_ex_wb_rv_BITS_118_TO_116_0_f_ex_wb_rv_B_ETC__q4 =
	      f_ex_wb_rv[115:0];
      3'd2:
	  CASE_f_ex_wb_rv_BITS_118_TO_116_0_f_ex_wb_rv_B_ETC__q4 =
	      { 45'h0AAAAAAAAAAA /* unspecified value */ , f_ex_wb_rv[70:0] };
      default: CASE_f_ex_wb_rv_BITS_118_TO_116_0_f_ex_wb_rv_B_ETC__q4 =
		   f_ex_wb_rv[115:0];
    endcase
  end
  always@(writeback_wr_request$wget or
	  writeback_dcache_f_cpu_rsps_rv or
	  temp_data__h92984 or
	  temp_data__h93053 or temp_data__h93074 or temp_data__h92838)
  begin
    case (writeback_wr_request$wget[30:29])
      2'd0: _theResult____h92845 = temp_data__h92984;
      2'd1: _theResult____h92845 = temp_data__h93053;
      2'd2: _theResult____h92845 = temp_data__h93074;
      2'd3: _theResult____h92845 = temp_data__h92838;
    endcase
  end
  always@(writeback_wr_request$wget or
	  x__h34002 or
	  csrfile_rg_prv or
	  NOT_writeback_wr_request_wget__58_BITS_11_TO_0_ETC___d970)
  begin
    case (writeback_wr_request$wget[88:86])
      3'b001, 3'b010, 3'b011, 3'b101, 3'b110, 3'b111:
	  IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d971 =
	      NOT_writeback_wr_request_wget__58_BITS_11_TO_0_ETC___d970;
      default: IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d971 =
		   x__h34002 == 15'd0 || x__h34002 == 15'd8 ||
		   x__h34002 == 15'd2064 ||
		   x__h34002 == 15'd4112 ||
		   x__h34002 == 15'd6160 && csrfile_rg_prv != 2'd3;
    endcase
  end
  always@(writeback_wr_request$wget or
	  x__h34002 or
	  NOT_writeback_wr_request_wget__58_BITS_11_TO_0_ETC___d961)
  begin
    case (writeback_wr_request$wget[88:86])
      3'b001, 3'b010, 3'b011, 3'b101, 3'b110, 3'b111:
	  IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1057 =
	      NOT_writeback_wr_request_wget__58_BITS_11_TO_0_ETC___d961 ||
	      x__h34002 != 15'd0 && x__h34002 != 15'd8;
      default: IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1057 =
		   x__h34002 != 15'd0 && x__h34002 != 15'd8;
    endcase
  end
  always@(writeback_wr_request$wget or
	  x__h34002 or
	  csrfile_rg_prv or
	  writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1113)
  begin
    case (writeback_wr_request$wget[88:86])
      3'b001, 3'b010, 3'b011, 3'b101, 3'b110, 3'b111:
	  IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1119 =
	      writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1113 &&
	      x__h34002 == 15'd0 &&
	      csrfile_rg_prv == 2'd0;
      default: IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1119 =
		   x__h34002 == 15'd0 && csrfile_rg_prv == 2'd0;
    endcase
  end
  always@(writeback_wr_request$wget or
	  x__h34002 or
	  writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1113)
  begin
    case (writeback_wr_request$wget[88:86])
      3'b001, 3'b010, 3'b011, 3'b101, 3'b110, 3'b111:
	  IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1115 =
	      writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1113 &&
	      x__h34002 == 15'd8;
      default: IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1115 =
		   x__h34002 == 15'd8;
    endcase
  end
  always@(writeback_wr_request$wget or
	  x__h34002 or
	  csrfile_rg_prv or
	  writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1113)
  begin
    case (writeback_wr_request$wget[88:86])
      3'b001, 3'b010, 3'b011, 3'b101, 3'b110, 3'b111:
	  IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1124 =
	      writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1113 &&
	      x__h34002 == 15'd0 &&
	      csrfile_rg_prv != 2'd0;
      default: IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1124 =
		   x__h34002 == 15'd0 && csrfile_rg_prv != 2'd0;
    endcase
  end
  always@(writeback_wr_request$wget or
	  x__h34002 or
	  csrfile_rg_prv or
	  writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1173)
  begin
    case (writeback_wr_request$wget[88:86])
      3'b001, 3'b010, 3'b011, 3'b101, 3'b110, 3'b111:
	  IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1174 =
	      writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1173;
      default: IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1174 =
		   x__h34002 != 15'd0 && x__h34002 != 15'd8 &&
		   x__h34002 != 15'd2064 &&
		   x__h34002 != 15'd4112 &&
		   (x__h34002 != 15'd6160 || csrfile_rg_prv == 2'd3);
    endcase
  end
  always@(writeback_wr_request$wget or
	  x__h34002 or
	  csrfile_rg_prv or
	  writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1179)
  begin
    case (writeback_wr_request$wget[88:86])
      3'b001, 3'b010, 3'b011, 3'b101, 3'b110, 3'b111:
	  IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1180 =
	      writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1179;
      default: IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1180 =
		   x__h34002 == 15'd16 ||
		   x__h34002 == 15'd6160 && csrfile_rg_prv == 2'd3;
    endcase
  end
  always@(writeback_wr_request$wget or
	  writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1113)
  begin
    case (writeback_wr_request$wget[88:86])
      3'b001, 3'b010, 3'b011, 3'b101, 3'b110:
	  IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1211 =
	      writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1113;
      default: IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1211 =
		   writeback_wr_request$wget[88:86] == 3'b111 &&
		   writeback_wr_request_wget__58_BITS_11_TO_0_64__ETC___d1113;
    endcase
  end
  always@(writeback_wr_request$wget or
	  NOT_writeback_wr_request_wget__58_BITS_11_TO_0_ETC___d961)
  begin
    case (writeback_wr_request$wget[88:86])
      3'b001, 3'b010, 3'b011, 3'b101, 3'b110:
	  IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1214 =
	      NOT_writeback_wr_request_wget__58_BITS_11_TO_0_ETC___d961;
      default: IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1214 =
		   writeback_wr_request$wget[88:86] != 3'b111 ||
		   NOT_writeback_wr_request_wget__58_BITS_11_TO_0_ETC___d961;
    endcase
  end
  always@(writeback_wr_request$wget or
	  x__h34002 or
	  csrfile_rg_prv or
	  NOT_writeback_wr_request_wget__58_BITS_11_TO_0_ETC___d1413)
  begin
    case (writeback_wr_request$wget[88:86])
      3'b001, 3'b010, 3'b011, 3'b101, 3'b110, 3'b111:
	  IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1414 =
	      NOT_writeback_wr_request_wget__58_BITS_11_TO_0_ETC___d1413;
      default: IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1414 =
		   x__h34002 == 15'd16 ||
		   x__h34002 == 15'd6160 && csrfile_rg_prv == 2'd3;
    endcase
  end
  always@(writeback_wr_request$wget or
	  IF_NOT_writeback_wr_request_wget__58_BITS_11_T_ETC___d1365 or
	  csr_ustatus__read__h39073 or
	  csr_uie__read__h39128 or
	  csr_utvec__read__h39143 or
	  csrfile_csr_uscratch or
	  csrfile_csr_uepc or
	  csrfile_csr_ucause or
	  csrfile_csr_ubadaddr or
	  csr_uip__read__h39312 or
	  csr_mstatus__read__h39917 or
	  csrfile_csr_misa or
	  csr_medeleg__read__h39986 or
	  csr_mideleg__read__h32153 or
	  csr_mie__read__h32101 or
	  csr_mtvec__read__h40199 or
	  csr_mucounteren__read__h41834 or
	  csrfile_csr_mscratch or
	  csrfile_csr_mepc or
	  csrfile_csr_mcause or
	  csrfile_csr_mbadaddr or
	  csr_mip__read__h31985 or
	  csrfile_csr_mbase or
	  csrfile_csr_mbound or
	  csrfile_csr_mibase or
	  csrfile_csr_mibound or
	  csrfile_csr_mdbase or
	  csrfile_csr_mdbound or
	  counter_cycle or counter_instret or write_counter_time_data)
  begin
    case (writeback_wr_request$wget[11:0])
      12'd0: y__h50048 = csr_ustatus__read__h39073;
      12'd4: y__h50048 = csr_uie__read__h39128;
      12'd5: y__h50048 = csr_utvec__read__h39143;
      12'd64: y__h50048 = csrfile_csr_uscratch;
      12'd65: y__h50048 = csrfile_csr_uepc;
      12'd66: y__h50048 = csrfile_csr_ucause;
      12'd67: y__h50048 = csrfile_csr_ubadaddr;
      12'd68: y__h50048 = csr_uip__read__h39312;
      12'd768: y__h50048 = csr_mstatus__read__h39917;
      12'd769: y__h50048 = csrfile_csr_misa;
      12'd770: y__h50048 = csr_medeleg__read__h39986;
      12'd771: y__h50048 = csr_mideleg__read__h32153;
      12'd772: y__h50048 = csr_mie__read__h32101;
      12'd773: y__h50048 = csr_mtvec__read__h40199;
      12'd800: y__h50048 = csr_mucounteren__read__h41834;
      12'd832: y__h50048 = csrfile_csr_mscratch;
      12'd833: y__h50048 = csrfile_csr_mepc;
      12'd834: y__h50048 = csrfile_csr_mcause;
      12'd835: y__h50048 = csrfile_csr_mbadaddr;
      12'd836: y__h50048 = csr_mip__read__h31985;
      12'd896: y__h50048 = csrfile_csr_mbase;
      12'd897: y__h50048 = csrfile_csr_mbound;
      12'd898: y__h50048 = csrfile_csr_mibase;
      12'd899: y__h50048 = csrfile_csr_mibound;
      12'd900: y__h50048 = csrfile_csr_mdbase;
      12'd901: y__h50048 = csrfile_csr_mdbound;
      12'd2816, 12'd3072: y__h50048 = counter_cycle[31:0];
      12'd2818, 12'd3074: y__h50048 = counter_instret[31:0];
      12'd2944, 12'd3200: y__h50048 = counter_cycle[63:32];
      12'd2946, 12'd3202: y__h50048 = counter_instret[63:32];
      12'd3073: y__h50048 = write_counter_time_data[31:0];
      12'd3201: y__h50048 = write_counter_time_data[63:32];
      12'd3857, 12'd3858, 12'd3859, 12'd3860: y__h50048 = 32'd0;
      default: y__h50048 =
		   IF_NOT_writeback_wr_request_wget__58_BITS_11_T_ETC___d1365;
    endcase
  end
  always@(writeback_wr_request$wget or
	  IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1214 or
	  IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1414 or
	  IF_writeback_wr_request_wget__58_BITS_11_TO_0__ETC___d1427)
  begin
    case (writeback_wr_request$wget[118:116])
      3'd1:
	  IF_writeback_wr_request_wget__58_BITS_118_TO_1_ETC___d1432 =
	      { 1'd0, 32'hAAAAAAAA /* unspecified value */  };
      3'd2:
	  IF_writeback_wr_request_wget__58_BITS_118_TO_1_ETC___d1432 =
	      writeback_wr_request$wget[70:38];
      default: IF_writeback_wr_request_wget__58_BITS_118_TO_1_ETC___d1432 =
		   { writeback_wr_request$wget[118:116] == 3'd3 &&
		     IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1214 &&
		     IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1414,
		     IF_writeback_wr_request_wget__58_BITS_11_TO_0__ETC___d1427 };
    endcase
  end
  always@(writeback_wr_request$wget or
	  writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558 or
	  writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542 or
	  writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547 or
	  writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554)
  begin
    case (writeback_wr_request$wget[88:86])
      3'b001:
	  IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1678 =
	      writeback_wr_request$wget[58];
      3'b010:
	  IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1678 =
	      writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542[4];
      3'b011:
	  IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1678 =
	      writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547[4];
      3'b101:
	  IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1678 =
	      writeback_wr_request$wget[26];
      3'b110:
	  IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1678 =
	      writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554[4];
      default: IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1678 =
		   writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558[4];
    endcase
  end
  always@(writeback_wr_request$wget or
	  writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558 or
	  writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542 or
	  writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547 or
	  writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554)
  begin
    case (writeback_wr_request$wget[88:86])
      3'b001:
	  IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1689 =
	      writeback_wr_request$wget[54];
      3'b010:
	  IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1689 =
	      writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542[0];
      3'b011:
	  IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1689 =
	      writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547[0];
      3'b101:
	  IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1689 =
	      writeback_wr_request$wget[22];
      3'b110:
	  IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1689 =
	      writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554[0];
      default: IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1689 =
		   writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558[0];
    endcase
  end
  always@(writeback_wr_request$wget or
	  writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558 or
	  writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542 or
	  writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547 or
	  writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554)
  begin
    case (writeback_wr_request$wget[88:86])
      3'b001:
	  IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1935 =
	      writeback_wr_request$wget[61];
      3'b010:
	  IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1935 =
	      writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542[7];
      3'b011:
	  IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1935 =
	      writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547[7];
      3'b101:
	  IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1935 =
	      writeback_wr_request$wget[29];
      3'b110:
	  IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1935 =
	      writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554[7];
      default: IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1935 =
		   writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558[7];
    endcase
  end
  always@(writeback_wr_request$wget or
	  writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558 or
	  writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542 or
	  writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547 or
	  writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554)
  begin
    case (writeback_wr_request$wget[88:86])
      3'b001:
	  IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1946 =
	      writeback_wr_request$wget[57];
      3'b010:
	  IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1946 =
	      writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542[3];
      3'b011:
	  IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1946 =
	      writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547[3];
      3'b101:
	  IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1946 =
	      writeback_wr_request$wget[25];
      3'b110:
	  IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1946 =
	      writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554[3];
      default: IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1946 =
		   writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558[3];
    endcase
  end
  always@(writeback_wr_request$wget)
  begin
    case (writeback_wr_request$wget[3:0])
      4'd0,
      4'd1,
      4'd2,
      4'd3,
      4'd4,
      4'd5,
      4'd6,
      4'd7,
      4'd8,
      4'd9,
      4'd10,
      4'd11:
	  CASE_writeback_wr_requestwget_BITS_3_TO_0_0_w_ETC__q8 =
	      writeback_wr_request$wget[3:0];
      default: CASE_writeback_wr_requestwget_BITS_3_TO_0_0_w_ETC__q8 = 4'd15;
    endcase
  end
  always@(writeback_wr_request$wget or
	  writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558 or
	  writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542 or
	  writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547 or
	  writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554)
  begin
    case (writeback_wr_request$wget[88:86])
      3'b001:
	  IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1924 =
	      writeback_wr_request$wget[66:65];
      3'b010:
	  IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1924 =
	      writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1542[12:11];
      3'b011:
	  IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1924 =
	      writeback_wr_request_wget__58_BITS_85_TO_54_54_ETC___d1547[12:11];
      3'b101:
	  IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1924 =
	      writeback_wr_request$wget[34:33];
      3'b110:
	  IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1924 =
	      writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1554[12:11];
      default: IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1924 =
		   writeback_wr_request_wget__58_BITS_53_TO_22_51_ETC___d1558[12:11];
    endcase
  end
  always@(writeback_wr_request$wget)
  begin
    case (writeback_wr_request$wget[118:116])
      3'd1:
	  CASE_writeback_wr_requestwget_BITS_118_TO_116_ETC__q9 =
	      writeback_wr_request$wget[4:0];
      3'd2:
	  CASE_writeback_wr_requestwget_BITS_118_TO_116_ETC__q9 =
	      writeback_wr_request$wget[37:33];
      3'd3:
	  CASE_writeback_wr_requestwget_BITS_118_TO_116_ETC__q9 =
	      writeback_wr_request$wget[16:12];
      default: CASE_writeback_wr_requestwget_BITS_118_TO_116_ETC__q9 = 5'd0;
    endcase
  end
  always@(writeback_wr_request$wget or
	  IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1211 or
	  y__h50048)
  begin
    case (writeback_wr_request$wget[118:116])
      3'd1:
	  CASE_writeback_wr_requestwget_BITS_118_TO_116_ETC__q10 =
	      { 1'd1, writeback_wr_request$wget[36:5] };
      3'd2:
	  CASE_writeback_wr_requestwget_BITS_118_TO_116_ETC__q10 =
	      { writeback_wr_request$wget[70] &&
		writeback_wr_request$wget[32],
		writeback_wr_request$wget[31:0] };
      default: CASE_writeback_wr_requestwget_BITS_118_TO_116_ETC__q10 =
		   { writeback_wr_request$wget[118:116] == 3'd3 &&
		     IF_writeback_wr_request_wget__58_BITS_88_TO_86_ETC___d1211,
		     y__h50048 };
    endcase
  end
  always@(writeback_wr_request$wget)
  begin
    case (writeback_wr_request$wget[118:116])
      3'd1, 3'd2, 3'd3:
	  CASE_writeback_wr_requestwget_BITS_118_TO_116_ETC__q11 = 3'd4;
      default: CASE_writeback_wr_requestwget_BITS_118_TO_116_ETC__q11 = 3'd5;
    endcase
  end
  always@(writeback_wr_trap_data$wget)
  begin
    case (writeback_wr_trap_data$wget[3:0])
      4'd0,
      4'd1,
      4'd2,
      4'd3,
      4'd4,
      4'd5,
      4'd6,
      4'd7,
      4'd8,
      4'd9,
      4'd10,
      4'd11:
	  y__h93579 = writeback_wr_trap_data$wget[3:0];
      default: y__h93579 = 4'd15;
    endcase
  end
  always@(execute_wr_request$wget)
  begin
    case (execute_wr_request$wget[123:121])
      3'b0, 3'b100: _theResult___snd_burst_size__h24947 = 2'd0;
      3'b001, 3'b101: _theResult___snd_burst_size__h24947 = 2'd1;
      3'b010: _theResult___snd_burst_size__h24947 = 2'd3;
      default: _theResult___snd_burst_size__h24947 = 2'd3;
    endcase
  end
  always@(execute_wr_request$wget)
  begin
    case (execute_wr_request$wget[123:121])
      3'b0: _theResult___fst_burst_size__h25379 = 2'd0;
      3'b001: _theResult___fst_burst_size__h25379 = 2'd1;
      default: _theResult___fst_burst_size__h25379 = 2'd3;
    endcase
  end
  always@(execute_wr_request$wget)
  begin
    case (execute_wr_request$wget[123:121])
      3'b0:
	  _theResult___fst_data__h25375 =
	      { 24'b0, execute_wr_request$wget[40:33] };
      3'b001:
	  _theResult___fst_data__h25375 =
	      { 16'b0, execute_wr_request$wget[48:33] };
      3'b010: _theResult___fst_data__h25375 = execute_wr_request$wget[64:33];
      default: _theResult___fst_data__h25375 = 32'd0;
    endcase
  end
  always@(execute_wr_request$wget or
	  v__h29671 or v__h28358 or v__h23364 or v__h29433 or v__h29552)
  begin
    case (execute_wr_request$wget[123:121])
      3'b0: x1_avValue_snd__h24003 = v__h28358;
      3'b010, 3'b011: x1_avValue_snd__h24003 = v__h23364;
      3'b100: x1_avValue_snd__h24003 = v__h29433;
      3'b111: x1_avValue_snd__h24003 = v__h29552;
      default: x1_avValue_snd__h24003 = v__h29671;
    endcase
  end
  always@(x__h24026 or
	  x1_avValue_snd__h24003 or
	  v__h28616 or v__h28758 or in8944_SRL_ab4499_BITS_4_TO_0__q20)
  begin
    case (x__h24026)
      10'd128: data__h24666 = v__h28616;
      10'd640: data__h24666 = v__h28758;
      10'd672: data__h24666 = in8944_SRL_ab4499_BITS_4_TO_0__q20[31:0];
      default: data__h24666 = x1_avValue_snd__h24003;
    endcase
  end
  always@(execute_wr_request$wget or
	  execute_wr_request_wget__42_BITS_96_TO_65_13_U_ETC___d363 or
	  execute_wr_request_wget__42_BITS_96_TO_65_13_E_ETC___d359 or
	  execute_wr_request_wget__42_BITS_96_TO_65_13_S_ETC___d361)
  begin
    case (execute_wr_request$wget[123:121])
      3'b0:
	  IF_execute_wr_request_wget__42_BITS_123_TO_121_ETC___d369 =
	      execute_wr_request_wget__42_BITS_96_TO_65_13_E_ETC___d359;
      3'b001:
	  IF_execute_wr_request_wget__42_BITS_123_TO_121_ETC___d369 =
	      !execute_wr_request_wget__42_BITS_96_TO_65_13_E_ETC___d359;
      3'b100:
	  IF_execute_wr_request_wget__42_BITS_123_TO_121_ETC___d369 =
	      execute_wr_request_wget__42_BITS_96_TO_65_13_S_ETC___d361;
      3'b101:
	  IF_execute_wr_request_wget__42_BITS_123_TO_121_ETC___d369 =
	      !execute_wr_request_wget__42_BITS_96_TO_65_13_S_ETC___d361;
      3'b110:
	  IF_execute_wr_request_wget__42_BITS_123_TO_121_ETC___d369 =
	      execute_wr_request_wget__42_BITS_96_TO_65_13_U_ETC___d363;
      default: IF_execute_wr_request_wget__42_BITS_123_TO_121_ETC___d369 =
		   !execute_wr_request_wget__42_BITS_96_TO_65_13_U_ETC___d363;
    endcase
  end
  always@(x__h24026 or
	  execute_wr_request$wget or
	  IF_execute_wr_request_wget__42_BIT_96_42_THEN__ETC___d652 or
	  x__h26686)
  begin
    case (x__h24026)
      10'd1: ab__h26526 = { execute_wr_request$wget[96:33], 1'd0 };
      10'd129:
	  ab__h26526 =
	      IF_execute_wr_request_wget__42_BIT_96_42_THEN__ETC___d652;
      10'd257:
	  ab__h26526 =
	      { x__h26686,
		execute_wr_request$wget[64:33],
		execute_wr_request$wget[96] };
      default: ab__h26526 = { execute_wr_request$wget[96:33], 1'd0 };
    endcase
  end
  always@(x__h24026 or
	  v__h29671 or
	  v__h28358 or
	  v__h26656 or
	  v__h28477 or
	  v__h28616 or
	  v__h23364 or
	  v__h29433 or
	  v__h27270 or
	  v__h28758 or
	  v__h27538 or
	  in8944_SRL_ab4499_BITS_4_TO_0__q20 or
	  v__h27748 or v__h29552 or v__h28082)
  begin
    case (x__h24026)
      10'd0: data__h30002 = v__h28358;
      10'd1: data__h30002 = v__h26656[31:0];
      10'd32: data__h30002 = v__h28477;
      10'd128: data__h30002 = v__h28616;
      10'd129, 10'd257, 10'd385: data__h30002 = v__h26656[63:32];
      10'd256, 10'd384: data__h30002 = v__h23364;
      10'd512: data__h30002 = v__h29433;
      10'd513: data__h30002 = v__h27270;
      10'd640: data__h30002 = v__h28758;
      10'd641: data__h30002 = v__h27538;
      10'd672: data__h30002 = in8944_SRL_ab4499_BITS_4_TO_0__q20[31:0];
      10'd769: data__h30002 = v__h27748;
      10'd896: data__h30002 = v__h29552;
      10'd897: data__h30002 = v__h28082;
      default: data__h30002 = v__h29671;
    endcase
  end
  always@(x__h24026 or data__h30002 or execute_wr_request$wget)
  begin
    case (x__h24026)
      10'd0,
      10'd1,
      10'd32,
      10'd128,
      10'd129,
      10'd256,
      10'd257,
      10'd384,
      10'd385,
      10'd512,
      10'd513,
      10'd640,
      10'd641,
      10'd672,
      10'd768,
      10'd769,
      10'd896,
      10'd897:
	  IF_execute_wr_request_wget__42_BITS_123_TO_121_ETC___d482 =
	      { 4'd9,
		79'h2AAAAAAAAAAAAAAAAAAA /* unspecified value */ ,
		data__h30002,
		execute_wr_request$wget[220:216] };
      default: IF_execute_wr_request_wget__42_BITS_123_TO_121_ETC___d482 =
		   { 1'd0,
		     119'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  };
    endcase
  end
  always@(execute_wr_request$wget or
	  _theResult___fst_addr__h25374 or
	  _theResult___fst_data__h25375 or
	  _theResult___fst_burst_size__h25379)
  begin
    case (execute_wr_request$wget[123:121])
      3'b0, 3'b001, 3'b010:
	  IF_execute_wr_request_wget__42_BITS_123_TO_121_ETC___d352 =
	      { 9'd260,
		_theResult___fst_addr__h25374,
		_theResult___fst_data__h25375,
		16'd124,
		_theResult___fst_burst_size__h25379,
		23'd0,
		6'b101010 /* unspecified value */  };
      default: IF_execute_wr_request_wget__42_BITS_123_TO_121_ETC___d352 =
		   { 1'd0,
		     119'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  };
    endcase
  end
  always@(execute_wr_request$wget or
	  _theResult___snd_addr__h24942 or
	  _theResult___snd_burst_size__h24947)
  begin
    case (execute_wr_request$wget[123:121])
      3'b0, 3'b001, 3'b010, 3'b100, 3'b101, 3'b110:
	  IF_execute_wr_request_wget__42_BITS_123_TO_121_ETC___d331 =
	      { 9'd256,
		_theResult___snd_addr__h24942,
		48'd124,
		_theResult___snd_burst_size__h24947,
		23'd0,
		execute_wr_request$wget[220:216],
		execute_wr_request$wget[123:121] != 3'b0 &&
		execute_wr_request$wget[123:121] != 3'b001 &&
		execute_wr_request$wget[123:121] != 3'b010 };
      default: IF_execute_wr_request_wget__42_BITS_123_TO_121_ETC___d331 =
		   { 1'd0,
		     119'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  };
    endcase
  end
  always@(execute_wr_request$wget or
	  _10_CONCAT_DONTCARE_CONCAT_IF_execute_wr_reques_ETC___d381)
  begin
    case (execute_wr_request$wget[123:121])
      3'b0, 3'b001, 3'b100, 3'b101, 3'b110, 3'b111:
	  CASE_execute_wr_requestwget_BITS_123_TO_121_0_ETC__q22 =
	      _10_CONCAT_DONTCARE_CONCAT_IF_execute_wr_reques_ETC___d381;
      default: CASE_execute_wr_requestwget_BITS_123_TO_121_0_ETC__q22 =
		   { 1'd0,
		     119'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  };
    endcase
  end
  always@(execute_wr_request$wget or
	  IF_execute_wr_request_wget__42_BITS_123_TO_121_ETC___d331 or
	  IF_execute_wr_request_wget__42_BITS_123_TO_121_ETC___d304 or
	  lui_imm__h26229 or
	  IF_execute_wr_request_wget__42_BITS_123_TO_121_ETC___d352 or
	  IF_execute_wr_request_wget__42_BITS_123_TO_121_ETC___d482 or
	  CASE_execute_wr_requestwget_BITS_123_TO_121_0_ETC__q22 or
	  _theResult___snd_addr__h24942 or
	  execute_wr_request_wget__42_BITS_220_TO_216_00_ETC___d387 or
	  sx_imm_J__h22657 or x__h30119)
  begin
    case (execute_wr_request$wget[237:231])
      7'd3:
	  IF_execute_wr_request_wget__42_BITS_237_TO_231_ETC___d504 =
	      IF_execute_wr_request_wget__42_BITS_123_TO_121_ETC___d331;
      7'd15:
	  IF_execute_wr_request_wget__42_BITS_237_TO_231_ETC___d504 =
	      { 4'd9,
		79'h2AAAAAAAAAAAAAAAAAAA /* unspecified value */ ,
		37'd0 };
      7'd19:
	  IF_execute_wr_request_wget__42_BITS_237_TO_231_ETC___d504 =
	      IF_execute_wr_request_wget__42_BITS_123_TO_121_ETC___d304;
      7'd23:
	  IF_execute_wr_request_wget__42_BITS_237_TO_231_ETC___d504 =
	      { 4'd9,
		79'h2AAAAAAAAAAAAAAAAAAA /* unspecified value */ ,
		lui_imm__h26229,
		execute_wr_request$wget[220:216] };
      7'd35:
	  IF_execute_wr_request_wget__42_BITS_237_TO_231_ETC___d504 =
	      IF_execute_wr_request_wget__42_BITS_123_TO_121_ETC___d352;
      7'd51:
	  IF_execute_wr_request_wget__42_BITS_237_TO_231_ETC___d504 =
	      IF_execute_wr_request_wget__42_BITS_123_TO_121_ETC___d482;
      7'd55:
	  IF_execute_wr_request_wget__42_BITS_237_TO_231_ETC___d504 =
	      { 4'd9,
		79'h2AAAAAAAAAAAAAAAAAAA /* unspecified value */ ,
		execute_wr_request$wget[176:145],
		execute_wr_request$wget[220:216] };
      7'd99:
	  IF_execute_wr_request_wget__42_BITS_237_TO_231_ETC___d504 =
	      CASE_execute_wr_requestwget_BITS_123_TO_121_0_ETC__q22;
      7'd103:
	  IF_execute_wr_request_wget__42_BITS_237_TO_231_ETC___d504 =
	      (execute_wr_request$wget[123:121] == 3'b0) ?
		{ 4'd10,
		  45'h0AAAAAAAAAAA /* unspecified value */ ,
		  1'd1,
		  _theResult___snd_addr__h24942[31:1],
		  1'd0,
		  execute_wr_request_wget__42_BITS_220_TO_216_00_ETC___d387 } :
		{ 1'd0,
		  119'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  };
      7'b1101111:
	  IF_execute_wr_request_wget__42_BITS_237_TO_231_ETC___d504 =
	      { 4'd10,
		45'h0AAAAAAAAAAA /* unspecified value */ ,
		1'd1,
		execute_wr_request$wget[32:1] + sx_imm_J__h22657,
		execute_wr_request_wget__42_BITS_220_TO_216_00_ETC___d387 };
      7'd115:
	  IF_execute_wr_request_wget__42_BITS_237_TO_231_ETC___d504 =
	      { 4'd11,
		20'b10101010101010101010 /* unspecified value */ ,
		execute_wr_request$wget[237:231],
		execute_wr_request$wget[123:121],
		execute_wr_request$wget[96:65],
		x__h30119,
		execute_wr_request$wget[230:226],
		execute_wr_request$wget[220:216],
		execute_wr_request$wget[108:97] };
      default: IF_execute_wr_request_wget__42_BITS_237_TO_231_ETC___d504 =
		   { 1'd0,
		     119'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  };
    endcase
  end
  always@(execute_wr_response$wget)
  begin
    case (execute_wr_response$wget[118:116])
      3'd0, 3'd1, 3'd2, 3'd3:
	  CASE_execute_wr_responsewget_BITS_118_TO_116__ETC__q23 =
	      execute_wr_response$wget[118:116];
      default: CASE_execute_wr_responsewget_BITS_118_TO_116__ETC__q23 = 3'd4;
    endcase
  end
  always@(execute_wr_response$wget)
  begin
    case (execute_wr_response$wget[118:116])
      3'd0, 3'd1:
	  CASE_execute_wr_responsewget_BITS_118_TO_116__ETC__q24 =
	      execute_wr_response$wget[115:0];
      3'd2:
	  CASE_execute_wr_responsewget_BITS_118_TO_116__ETC__q24 =
	      { 45'h0AAAAAAAAAAA /* unspecified value */ ,
		execute_wr_response$wget[70:0] };
      default: CASE_execute_wr_responsewget_BITS_118_TO_116__ETC__q24 =
		   execute_wr_response$wget[115:0];
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        counter_cycle <= `BSV_ASSIGNMENT_DELAY 64'd0;
	counter_instret <= `BSV_ASSIGNMENT_DELAY 64'd0;
	csrfile_csr_mbadaddr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	csrfile_csr_mbase <= `BSV_ASSIGNMENT_DELAY 32'd0;
	csrfile_csr_mbound <= `BSV_ASSIGNMENT_DELAY 32'd0;
	csrfile_csr_mcause <= `BSV_ASSIGNMENT_DELAY 32'd0;
	csrfile_csr_mcycle <= `BSV_ASSIGNMENT_DELAY 32'd0;
	csrfile_csr_mcycleh <= `BSV_ASSIGNMENT_DELAY 32'd0;
	csrfile_csr_mdbase <= `BSV_ASSIGNMENT_DELAY 32'd0;
	csrfile_csr_mdbound <= `BSV_ASSIGNMENT_DELAY 32'd0;
	csrfile_csr_mepc <= `BSV_ASSIGNMENT_DELAY 32'd0;
	csrfile_csr_mibase <= `BSV_ASSIGNMENT_DELAY 32'd0;
	csrfile_csr_mibound <= `BSV_ASSIGNMENT_DELAY 32'd0;
	csrfile_csr_minstret <= `BSV_ASSIGNMENT_DELAY 32'd0;
	csrfile_csr_minstreth <= `BSV_ASSIGNMENT_DELAY 32'd0;
	csrfile_csr_misa <= `BSV_ASSIGNMENT_DELAY 32'h40141129;
	csrfile_csr_mscratch <= `BSV_ASSIGNMENT_DELAY 32'd0;
	csrfile_csr_ubadaddr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	csrfile_csr_ucause <= `BSV_ASSIGNMENT_DELAY 32'd0;
	csrfile_csr_uepc <= `BSV_ASSIGNMENT_DELAY 32'd0;
	csrfile_csr_uscratch <= `BSV_ASSIGNMENT_DELAY 32'd0;
	csrfile_rg_fs <= `BSV_ASSIGNMENT_DELAY 2'd0;
	csrfile_rg_medeleg <= `BSV_ASSIGNMENT_DELAY 12'd0;
	csrfile_rg_meie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	csrfile_rg_mideleg <= `BSV_ASSIGNMENT_DELAY 12'd0;
	csrfile_rg_mie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	csrfile_rg_mpie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	csrfile_rg_mpp <= `BSV_ASSIGNMENT_DELAY 2'd0;
	csrfile_rg_mprv <= `BSV_ASSIGNMENT_DELAY 1'd0;
	csrfile_rg_msie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	csrfile_rg_mtie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	csrfile_rg_mtvec <= `BSV_ASSIGNMENT_DELAY 30'd1024;
	csrfile_rg_mxr <= `BSV_ASSIGNMENT_DELAY 1'd0;
	csrfile_rg_prv <= `BSV_ASSIGNMENT_DELAY 2'd3;
	csrfile_rg_pum <= `BSV_ASSIGNMENT_DELAY 1'd0;
	csrfile_rg_rx <= `BSV_ASSIGNMENT_DELAY 9'd0;
	csrfile_rg_s_cy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	csrfile_rg_s_ir <= `BSV_ASSIGNMENT_DELAY 1'd0;
	csrfile_rg_s_tm <= `BSV_ASSIGNMENT_DELAY 1'd0;
	csrfile_rg_seie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	csrfile_rg_seip <= `BSV_ASSIGNMENT_DELAY 1'd0;
	csrfile_rg_ssie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	csrfile_rg_ssip <= `BSV_ASSIGNMENT_DELAY 1'd0;
	csrfile_rg_stie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	csrfile_rg_stip <= `BSV_ASSIGNMENT_DELAY 1'd0;
	csrfile_rg_tmp <= `BSV_ASSIGNMENT_DELAY 32'd0;
	csrfile_rg_tx <= `BSV_ASSIGNMENT_DELAY 8'd0;
	csrfile_rg_u_cy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	csrfile_rg_u_ir <= `BSV_ASSIGNMENT_DELAY 1'd0;
	csrfile_rg_u_tm <= `BSV_ASSIGNMENT_DELAY 1'd0;
	csrfile_rg_ueie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	csrfile_rg_ueip <= `BSV_ASSIGNMENT_DELAY 1'd0;
	csrfile_rg_uie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	csrfile_rg_upie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	csrfile_rg_usie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	csrfile_rg_usip <= `BSV_ASSIGNMENT_DELAY 1'd0;
	csrfile_rg_utie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	csrfile_rg_utip <= `BSV_ASSIGNMENT_DELAY 1'd0;
	csrfile_rg_utvec <= `BSV_ASSIGNMENT_DELAY 30'd8192;
	csrfile_rg_vm <= `BSV_ASSIGNMENT_DELAY 5'd0;
	csrfile_rg_xs <= `BSV_ASSIGNMENT_DELAY 2'd0;
	csrfile_uart_fifoRecv_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	csrfile_uart_fifoXmit_countReg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	csrfile_uart_rRecvData <= `BSV_ASSIGNMENT_DELAY 1'd1;
	f_dmem_reqs_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      110'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  };
	f_dmem_rsps_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 58'h2AAAAAAAAAAAAAA /* unspecified value */  };
	f_ex_wb_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      152'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  };
	f_if_ex_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 71'h2AAAAAAAAAAAAAAAAA /* unspecified value */  };
	fetch_icache_f_cpu_rsps_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 66'h2AAAAAAAAAAAAAAAA /* unspecified value */  };
	fetch_icache_f_imem_reqs_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 39'h2AAAAAAAAA /* unspecified value */  };
	fetch_icache_rg_imem_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fetch_icache_rg_response_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fetch_rg_imem_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fetch_rg_redirect_pc <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 32'hAAAAAAAA /* unspecified value */  };
	fetch_rg_this_pc <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 32'hAAAAAAAA /* unspecified value */  };
	fetch_rg_verbosity <= `BSV_ASSIGNMENT_DELAY 32'd0;
	regfile_rg_count <= `BSV_ASSIGNMENT_DELAY 5'd0;
	regfile_rg_reset_complete <= `BSV_ASSIGNMENT_DELAY 1'd0;
	regfile_rg_reset_init <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_cpu_mode <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_cpu_state <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_dmem_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_halt_requested <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_stop_reason <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 3'b010 /* unspecified value */  };
	rg_stop_requested <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_verbosity <= `BSV_ASSIGNMENT_DELAY 32'd4;
	writeback_dcache_f_cpu_rsps_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 68'hAAAAAAAAAAAAAAAAA /* unspecified value */  };
	writeback_dcache_f_dmem_reqs_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      297'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  };
	writeback_f_dmem_reqs_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      110'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  };
	writeback_f_dmem_rsps_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 58'h2AAAAAAAAAAAAAA /* unspecified value */  };
	writeback_rg_burst_count <= `BSV_ASSIGNMENT_DELAY 10'd0;
	writeback_rg_dmem_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	writeback_rg_verbosity <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (counter_cycle$EN)
	  counter_cycle <= `BSV_ASSIGNMENT_DELAY counter_cycle$D_IN;
	if (counter_instret$EN)
	  counter_instret <= `BSV_ASSIGNMENT_DELAY counter_instret$D_IN;
	if (csrfile_csr_mbadaddr$EN)
	  csrfile_csr_mbadaddr <= `BSV_ASSIGNMENT_DELAY
	      csrfile_csr_mbadaddr$D_IN;
	if (csrfile_csr_mbase$EN)
	  csrfile_csr_mbase <= `BSV_ASSIGNMENT_DELAY csrfile_csr_mbase$D_IN;
	if (csrfile_csr_mbound$EN)
	  csrfile_csr_mbound <= `BSV_ASSIGNMENT_DELAY csrfile_csr_mbound$D_IN;
	if (csrfile_csr_mcause$EN)
	  csrfile_csr_mcause <= `BSV_ASSIGNMENT_DELAY csrfile_csr_mcause$D_IN;
	if (csrfile_csr_mcycle$EN)
	  csrfile_csr_mcycle <= `BSV_ASSIGNMENT_DELAY csrfile_csr_mcycle$D_IN;
	if (csrfile_csr_mcycleh$EN)
	  csrfile_csr_mcycleh <= `BSV_ASSIGNMENT_DELAY
	      csrfile_csr_mcycleh$D_IN;
	if (csrfile_csr_mdbase$EN)
	  csrfile_csr_mdbase <= `BSV_ASSIGNMENT_DELAY csrfile_csr_mdbase$D_IN;
	if (csrfile_csr_mdbound$EN)
	  csrfile_csr_mdbound <= `BSV_ASSIGNMENT_DELAY
	      csrfile_csr_mdbound$D_IN;
	if (csrfile_csr_mepc$EN)
	  csrfile_csr_mepc <= `BSV_ASSIGNMENT_DELAY csrfile_csr_mepc$D_IN;
	if (csrfile_csr_mibase$EN)
	  csrfile_csr_mibase <= `BSV_ASSIGNMENT_DELAY csrfile_csr_mibase$D_IN;
	if (csrfile_csr_mibound$EN)
	  csrfile_csr_mibound <= `BSV_ASSIGNMENT_DELAY
	      csrfile_csr_mibound$D_IN;
	if (csrfile_csr_minstret$EN)
	  csrfile_csr_minstret <= `BSV_ASSIGNMENT_DELAY
	      csrfile_csr_minstret$D_IN;
	if (csrfile_csr_minstreth$EN)
	  csrfile_csr_minstreth <= `BSV_ASSIGNMENT_DELAY
	      csrfile_csr_minstreth$D_IN;
	if (csrfile_csr_misa$EN)
	  csrfile_csr_misa <= `BSV_ASSIGNMENT_DELAY csrfile_csr_misa$D_IN;
	if (csrfile_csr_mscratch$EN)
	  csrfile_csr_mscratch <= `BSV_ASSIGNMENT_DELAY
	      csrfile_csr_mscratch$D_IN;
	if (csrfile_csr_ubadaddr$EN)
	  csrfile_csr_ubadaddr <= `BSV_ASSIGNMENT_DELAY
	      csrfile_csr_ubadaddr$D_IN;
	if (csrfile_csr_ucause$EN)
	  csrfile_csr_ucause <= `BSV_ASSIGNMENT_DELAY csrfile_csr_ucause$D_IN;
	if (csrfile_csr_uepc$EN)
	  csrfile_csr_uepc <= `BSV_ASSIGNMENT_DELAY csrfile_csr_uepc$D_IN;
	if (csrfile_csr_uscratch$EN)
	  csrfile_csr_uscratch <= `BSV_ASSIGNMENT_DELAY
	      csrfile_csr_uscratch$D_IN;
	if (csrfile_rg_fs$EN)
	  csrfile_rg_fs <= `BSV_ASSIGNMENT_DELAY csrfile_rg_fs$D_IN;
	if (csrfile_rg_medeleg$EN)
	  csrfile_rg_medeleg <= `BSV_ASSIGNMENT_DELAY csrfile_rg_medeleg$D_IN;
	if (csrfile_rg_meie$EN)
	  csrfile_rg_meie <= `BSV_ASSIGNMENT_DELAY csrfile_rg_meie$D_IN;
	if (csrfile_rg_mideleg$EN)
	  csrfile_rg_mideleg <= `BSV_ASSIGNMENT_DELAY csrfile_rg_mideleg$D_IN;
	if (csrfile_rg_mie$EN)
	  csrfile_rg_mie <= `BSV_ASSIGNMENT_DELAY csrfile_rg_mie$D_IN;
	if (csrfile_rg_mpie$EN)
	  csrfile_rg_mpie <= `BSV_ASSIGNMENT_DELAY csrfile_rg_mpie$D_IN;
	if (csrfile_rg_mpp$EN)
	  csrfile_rg_mpp <= `BSV_ASSIGNMENT_DELAY csrfile_rg_mpp$D_IN;
	if (csrfile_rg_mprv$EN)
	  csrfile_rg_mprv <= `BSV_ASSIGNMENT_DELAY csrfile_rg_mprv$D_IN;
	if (csrfile_rg_msie$EN)
	  csrfile_rg_msie <= `BSV_ASSIGNMENT_DELAY csrfile_rg_msie$D_IN;
	if (csrfile_rg_mtie$EN)
	  csrfile_rg_mtie <= `BSV_ASSIGNMENT_DELAY csrfile_rg_mtie$D_IN;
	if (csrfile_rg_mtvec$EN)
	  csrfile_rg_mtvec <= `BSV_ASSIGNMENT_DELAY csrfile_rg_mtvec$D_IN;
	if (csrfile_rg_mxr$EN)
	  csrfile_rg_mxr <= `BSV_ASSIGNMENT_DELAY csrfile_rg_mxr$D_IN;
	if (csrfile_rg_prv$EN)
	  csrfile_rg_prv <= `BSV_ASSIGNMENT_DELAY csrfile_rg_prv$D_IN;
	if (csrfile_rg_pum$EN)
	  csrfile_rg_pum <= `BSV_ASSIGNMENT_DELAY csrfile_rg_pum$D_IN;
	if (csrfile_rg_rx$EN)
	  csrfile_rg_rx <= `BSV_ASSIGNMENT_DELAY csrfile_rg_rx$D_IN;
	if (csrfile_rg_s_cy$EN)
	  csrfile_rg_s_cy <= `BSV_ASSIGNMENT_DELAY csrfile_rg_s_cy$D_IN;
	if (csrfile_rg_s_ir$EN)
	  csrfile_rg_s_ir <= `BSV_ASSIGNMENT_DELAY csrfile_rg_s_ir$D_IN;
	if (csrfile_rg_s_tm$EN)
	  csrfile_rg_s_tm <= `BSV_ASSIGNMENT_DELAY csrfile_rg_s_tm$D_IN;
	if (csrfile_rg_seie$EN)
	  csrfile_rg_seie <= `BSV_ASSIGNMENT_DELAY csrfile_rg_seie$D_IN;
	if (csrfile_rg_seip$EN)
	  csrfile_rg_seip <= `BSV_ASSIGNMENT_DELAY csrfile_rg_seip$D_IN;
	if (csrfile_rg_ssie$EN)
	  csrfile_rg_ssie <= `BSV_ASSIGNMENT_DELAY csrfile_rg_ssie$D_IN;
	if (csrfile_rg_ssip$EN)
	  csrfile_rg_ssip <= `BSV_ASSIGNMENT_DELAY csrfile_rg_ssip$D_IN;
	if (csrfile_rg_stie$EN)
	  csrfile_rg_stie <= `BSV_ASSIGNMENT_DELAY csrfile_rg_stie$D_IN;
	if (csrfile_rg_stip$EN)
	  csrfile_rg_stip <= `BSV_ASSIGNMENT_DELAY csrfile_rg_stip$D_IN;
	if (csrfile_rg_tmp$EN)
	  csrfile_rg_tmp <= `BSV_ASSIGNMENT_DELAY csrfile_rg_tmp$D_IN;
	if (csrfile_rg_tx$EN)
	  csrfile_rg_tx <= `BSV_ASSIGNMENT_DELAY csrfile_rg_tx$D_IN;
	if (csrfile_rg_u_cy$EN)
	  csrfile_rg_u_cy <= `BSV_ASSIGNMENT_DELAY csrfile_rg_u_cy$D_IN;
	if (csrfile_rg_u_ir$EN)
	  csrfile_rg_u_ir <= `BSV_ASSIGNMENT_DELAY csrfile_rg_u_ir$D_IN;
	if (csrfile_rg_u_tm$EN)
	  csrfile_rg_u_tm <= `BSV_ASSIGNMENT_DELAY csrfile_rg_u_tm$D_IN;
	if (csrfile_rg_ueie$EN)
	  csrfile_rg_ueie <= `BSV_ASSIGNMENT_DELAY csrfile_rg_ueie$D_IN;
	if (csrfile_rg_ueip$EN)
	  csrfile_rg_ueip <= `BSV_ASSIGNMENT_DELAY csrfile_rg_ueip$D_IN;
	if (csrfile_rg_uie$EN)
	  csrfile_rg_uie <= `BSV_ASSIGNMENT_DELAY csrfile_rg_uie$D_IN;
	if (csrfile_rg_upie$EN)
	  csrfile_rg_upie <= `BSV_ASSIGNMENT_DELAY csrfile_rg_upie$D_IN;
	if (csrfile_rg_usie$EN)
	  csrfile_rg_usie <= `BSV_ASSIGNMENT_DELAY csrfile_rg_usie$D_IN;
	if (csrfile_rg_usip$EN)
	  csrfile_rg_usip <= `BSV_ASSIGNMENT_DELAY csrfile_rg_usip$D_IN;
	if (csrfile_rg_utie$EN)
	  csrfile_rg_utie <= `BSV_ASSIGNMENT_DELAY csrfile_rg_utie$D_IN;
	if (csrfile_rg_utip$EN)
	  csrfile_rg_utip <= `BSV_ASSIGNMENT_DELAY csrfile_rg_utip$D_IN;
	if (csrfile_rg_utvec$EN)
	  csrfile_rg_utvec <= `BSV_ASSIGNMENT_DELAY csrfile_rg_utvec$D_IN;
	if (csrfile_rg_vm$EN)
	  csrfile_rg_vm <= `BSV_ASSIGNMENT_DELAY csrfile_rg_vm$D_IN;
	if (csrfile_rg_xs$EN)
	  csrfile_rg_xs <= `BSV_ASSIGNMENT_DELAY csrfile_rg_xs$D_IN;
	if (csrfile_uart_fifoRecv_countReg$EN)
	  csrfile_uart_fifoRecv_countReg <= `BSV_ASSIGNMENT_DELAY
	      csrfile_uart_fifoRecv_countReg$D_IN;
	if (csrfile_uart_fifoXmit_countReg$EN)
	  csrfile_uart_fifoXmit_countReg <= `BSV_ASSIGNMENT_DELAY
	      csrfile_uart_fifoXmit_countReg$D_IN;
	if (csrfile_uart_rRecvData$EN)
	  csrfile_uart_rRecvData <= `BSV_ASSIGNMENT_DELAY
	      csrfile_uart_rRecvData$D_IN;
	if (f_dmem_reqs_rv$EN)
	  f_dmem_reqs_rv <= `BSV_ASSIGNMENT_DELAY f_dmem_reqs_rv$D_IN;
	if (f_dmem_rsps_rv$EN)
	  f_dmem_rsps_rv <= `BSV_ASSIGNMENT_DELAY f_dmem_rsps_rv$D_IN;
	if (f_ex_wb_rv$EN)
	  f_ex_wb_rv <= `BSV_ASSIGNMENT_DELAY f_ex_wb_rv$D_IN;
	if (f_if_ex_rv$EN)
	  f_if_ex_rv <= `BSV_ASSIGNMENT_DELAY f_if_ex_rv$D_IN;
	if (fetch_icache_f_cpu_rsps_rv$EN)
	  fetch_icache_f_cpu_rsps_rv <= `BSV_ASSIGNMENT_DELAY
	      fetch_icache_f_cpu_rsps_rv$D_IN;
	if (fetch_icache_f_imem_reqs_rv$EN)
	  fetch_icache_f_imem_reqs_rv <= `BSV_ASSIGNMENT_DELAY
	      fetch_icache_f_imem_reqs_rv$D_IN;
	if (fetch_icache_rg_imem_state$EN)
	  fetch_icache_rg_imem_state <= `BSV_ASSIGNMENT_DELAY
	      fetch_icache_rg_imem_state$D_IN;
	if (fetch_icache_rg_response_valid$EN)
	  fetch_icache_rg_response_valid <= `BSV_ASSIGNMENT_DELAY
	      fetch_icache_rg_response_valid$D_IN;
	if (fetch_rg_imem_state$EN)
	  fetch_rg_imem_state <= `BSV_ASSIGNMENT_DELAY
	      fetch_rg_imem_state$D_IN;
	if (fetch_rg_redirect_pc$EN)
	  fetch_rg_redirect_pc <= `BSV_ASSIGNMENT_DELAY
	      fetch_rg_redirect_pc$D_IN;
	if (fetch_rg_this_pc$EN)
	  fetch_rg_this_pc <= `BSV_ASSIGNMENT_DELAY fetch_rg_this_pc$D_IN;
	if (fetch_rg_verbosity$EN)
	  fetch_rg_verbosity <= `BSV_ASSIGNMENT_DELAY fetch_rg_verbosity$D_IN;
	if (regfile_rg_count$EN)
	  regfile_rg_count <= `BSV_ASSIGNMENT_DELAY regfile_rg_count$D_IN;
	if (regfile_rg_reset_complete$EN)
	  regfile_rg_reset_complete <= `BSV_ASSIGNMENT_DELAY
	      regfile_rg_reset_complete$D_IN;
	if (regfile_rg_reset_init$EN)
	  regfile_rg_reset_init <= `BSV_ASSIGNMENT_DELAY
	      regfile_rg_reset_init$D_IN;
	if (rg_cpu_mode$EN)
	  rg_cpu_mode <= `BSV_ASSIGNMENT_DELAY rg_cpu_mode$D_IN;
	if (rg_cpu_state$EN)
	  rg_cpu_state <= `BSV_ASSIGNMENT_DELAY rg_cpu_state$D_IN;
	if (rg_dmem_state$EN)
	  rg_dmem_state <= `BSV_ASSIGNMENT_DELAY rg_dmem_state$D_IN;
	if (rg_halt_requested$EN)
	  rg_halt_requested <= `BSV_ASSIGNMENT_DELAY rg_halt_requested$D_IN;
	if (rg_stop_reason$EN)
	  rg_stop_reason <= `BSV_ASSIGNMENT_DELAY rg_stop_reason$D_IN;
	if (rg_stop_requested$EN)
	  rg_stop_requested <= `BSV_ASSIGNMENT_DELAY rg_stop_requested$D_IN;
	if (rg_verbosity$EN)
	  rg_verbosity <= `BSV_ASSIGNMENT_DELAY rg_verbosity$D_IN;
	if (writeback_dcache_f_cpu_rsps_rv$EN)
	  writeback_dcache_f_cpu_rsps_rv <= `BSV_ASSIGNMENT_DELAY
	      writeback_dcache_f_cpu_rsps_rv$D_IN;
	if (writeback_dcache_f_dmem_reqs_rv$EN)
	  writeback_dcache_f_dmem_reqs_rv <= `BSV_ASSIGNMENT_DELAY
	      writeback_dcache_f_dmem_reqs_rv$D_IN;
	if (writeback_f_dmem_reqs_rv$EN)
	  writeback_f_dmem_reqs_rv <= `BSV_ASSIGNMENT_DELAY
	      writeback_f_dmem_reqs_rv$D_IN;
	if (writeback_f_dmem_rsps_rv$EN)
	  writeback_f_dmem_rsps_rv <= `BSV_ASSIGNMENT_DELAY
	      writeback_f_dmem_rsps_rv$D_IN;
	if (writeback_rg_burst_count$EN)
	  writeback_rg_burst_count <= `BSV_ASSIGNMENT_DELAY
	      writeback_rg_burst_count$D_IN;
	if (writeback_rg_dmem_state$EN)
	  writeback_rg_dmem_state <= `BSV_ASSIGNMENT_DELAY
	      writeback_rg_dmem_state$D_IN;
	if (writeback_rg_verbosity$EN)
	  writeback_rg_verbosity <= `BSV_ASSIGNMENT_DELAY
	      writeback_rg_verbosity$D_IN;
      end
    if (csrfile_uart_vrRecvBuffer_0$EN)
      csrfile_uart_vrRecvBuffer_0 <= `BSV_ASSIGNMENT_DELAY
	  csrfile_uart_vrRecvBuffer_0$D_IN;
    if (csrfile_uart_vrRecvBuffer_1$EN)
      csrfile_uart_vrRecvBuffer_1 <= `BSV_ASSIGNMENT_DELAY
	  csrfile_uart_vrRecvBuffer_1$D_IN;
    if (csrfile_uart_vrRecvBuffer_2$EN)
      csrfile_uart_vrRecvBuffer_2 <= `BSV_ASSIGNMENT_DELAY
	  csrfile_uart_vrRecvBuffer_2$D_IN;
    if (csrfile_uart_vrRecvBuffer_3$EN)
      csrfile_uart_vrRecvBuffer_3 <= `BSV_ASSIGNMENT_DELAY
	  csrfile_uart_vrRecvBuffer_3$D_IN;
    if (csrfile_uart_vrRecvBuffer_4$EN)
      csrfile_uart_vrRecvBuffer_4 <= `BSV_ASSIGNMENT_DELAY
	  csrfile_uart_vrRecvBuffer_4$D_IN;
    if (csrfile_uart_vrRecvBuffer_5$EN)
      csrfile_uart_vrRecvBuffer_5 <= `BSV_ASSIGNMENT_DELAY
	  csrfile_uart_vrRecvBuffer_5$D_IN;
    if (csrfile_uart_vrRecvBuffer_6$EN)
      csrfile_uart_vrRecvBuffer_6 <= `BSV_ASSIGNMENT_DELAY
	  csrfile_uart_vrRecvBuffer_6$D_IN;
    if (csrfile_uart_vrRecvBuffer_7$EN)
      csrfile_uart_vrRecvBuffer_7 <= `BSV_ASSIGNMENT_DELAY
	  csrfile_uart_vrRecvBuffer_7$D_IN;
    if (csrfile_uart_vrXmitBuffer_0$EN)
      csrfile_uart_vrXmitBuffer_0 <= `BSV_ASSIGNMENT_DELAY
	  csrfile_uart_vrXmitBuffer_0$D_IN;
    if (csrfile_uart_vrXmitBuffer_1$EN)
      csrfile_uart_vrXmitBuffer_1 <= `BSV_ASSIGNMENT_DELAY
	  csrfile_uart_vrXmitBuffer_1$D_IN;
    if (csrfile_uart_vrXmitBuffer_2$EN)
      csrfile_uart_vrXmitBuffer_2 <= `BSV_ASSIGNMENT_DELAY
	  csrfile_uart_vrXmitBuffer_2$D_IN;
    if (csrfile_uart_vrXmitBuffer_3$EN)
      csrfile_uart_vrXmitBuffer_3 <= `BSV_ASSIGNMENT_DELAY
	  csrfile_uart_vrXmitBuffer_3$D_IN;
    if (csrfile_uart_vrXmitBuffer_4$EN)
      csrfile_uart_vrXmitBuffer_4 <= `BSV_ASSIGNMENT_DELAY
	  csrfile_uart_vrXmitBuffer_4$D_IN;
    if (csrfile_uart_vrXmitBuffer_5$EN)
      csrfile_uart_vrXmitBuffer_5 <= `BSV_ASSIGNMENT_DELAY
	  csrfile_uart_vrXmitBuffer_5$D_IN;
    if (csrfile_uart_vrXmitBuffer_6$EN)
      csrfile_uart_vrXmitBuffer_6 <= `BSV_ASSIGNMENT_DELAY
	  csrfile_uart_vrXmitBuffer_6$D_IN;
    if (csrfile_uart_vrXmitBuffer_7$EN)
      csrfile_uart_vrXmitBuffer_7 <= `BSV_ASSIGNMENT_DELAY
	  csrfile_uart_vrXmitBuffer_7$D_IN;
    if (execute_rg_last_exec_pc$EN)
      execute_rg_last_exec_pc <= `BSV_ASSIGNMENT_DELAY
	  execute_rg_last_exec_pc$D_IN;
    if (fetch_rg_burst_addr$EN)
      fetch_rg_burst_addr <= `BSV_ASSIGNMENT_DELAY fetch_rg_burst_addr$D_IN;
    if (fetch_rg_burst_length$EN)
      fetch_rg_burst_length <= `BSV_ASSIGNMENT_DELAY
	  fetch_rg_burst_length$D_IN;
    if (fetch_rg_burst_size$EN)
      fetch_rg_burst_size <= `BSV_ASSIGNMENT_DELAY fetch_rg_burst_size$D_IN;
    if (fetch_rg_fetch_pc$EN)
      fetch_rg_fetch_pc <= `BSV_ASSIGNMENT_DELAY fetch_rg_fetch_pc$D_IN;
    if (rg_last_commit_pc$EN)
      rg_last_commit_pc <= `BSV_ASSIGNMENT_DELAY rg_last_commit_pc$D_IN;
    if (writeback_rg_burst_addr$EN)
      writeback_rg_burst_addr <= `BSV_ASSIGNMENT_DELAY
	  writeback_rg_burst_addr$D_IN;
    if (writeback_rg_burst_length$EN)
      writeback_rg_burst_length <= `BSV_ASSIGNMENT_DELAY
	  writeback_rg_burst_length$D_IN;
    if (writeback_rg_burst_size$EN)
      writeback_rg_burst_size <= `BSV_ASSIGNMENT_DELAY
	  writeback_rg_burst_size$D_IN;
    if (writeback_rg_data_line$EN)
      writeback_rg_data_line <= `BSV_ASSIGNMENT_DELAY
	  writeback_rg_data_line$D_IN;
  end

  always@(posedge CLK or `BSV_RESET_EDGE RST_N)
  if (RST_N == `BSV_RESET_VALUE)
    begin
      csrfile_uart_rRecvBitCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
      csrfile_uart_rRecvCellCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
      csrfile_uart_rRecvParity <= `BSV_ASSIGNMENT_DELAY 1'd0;
      csrfile_uart_rRecvState <= `BSV_ASSIGNMENT_DELAY 3'd0;
      csrfile_uart_rXmitBitCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
      csrfile_uart_rXmitCellCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
      csrfile_uart_rXmitDataOut <= `BSV_ASSIGNMENT_DELAY 1'd1;
      csrfile_uart_rXmitParity <= `BSV_ASSIGNMENT_DELAY 1'd0;
      csrfile_uart_rXmitState <= `BSV_ASSIGNMENT_DELAY 3'd0;
    end
  else
    begin
      if (csrfile_uart_rRecvBitCount$EN)
	csrfile_uart_rRecvBitCount <= `BSV_ASSIGNMENT_DELAY
	    csrfile_uart_rRecvBitCount$D_IN;
      if (csrfile_uart_rRecvCellCount$EN)
	csrfile_uart_rRecvCellCount <= `BSV_ASSIGNMENT_DELAY
	    csrfile_uart_rRecvCellCount$D_IN;
      if (csrfile_uart_rRecvParity$EN)
	csrfile_uart_rRecvParity <= `BSV_ASSIGNMENT_DELAY
	    csrfile_uart_rRecvParity$D_IN;
      if (csrfile_uart_rRecvState$EN)
	csrfile_uart_rRecvState <= `BSV_ASSIGNMENT_DELAY
	    csrfile_uart_rRecvState$D_IN;
      if (csrfile_uart_rXmitBitCount$EN)
	csrfile_uart_rXmitBitCount <= `BSV_ASSIGNMENT_DELAY
	    csrfile_uart_rXmitBitCount$D_IN;
      if (csrfile_uart_rXmitCellCount$EN)
	csrfile_uart_rXmitCellCount <= `BSV_ASSIGNMENT_DELAY
	    csrfile_uart_rXmitCellCount$D_IN;
      if (csrfile_uart_rXmitDataOut$EN)
	csrfile_uart_rXmitDataOut <= `BSV_ASSIGNMENT_DELAY
	    csrfile_uart_rXmitDataOut$D_IN;
      if (csrfile_uart_rXmitParity$EN)
	csrfile_uart_rXmitParity <= `BSV_ASSIGNMENT_DELAY
	    csrfile_uart_rXmitParity$D_IN;
      if (csrfile_uart_rXmitState$EN)
	csrfile_uart_rXmitState <= `BSV_ASSIGNMENT_DELAY
	    csrfile_uart_rXmitState$D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    counter_cycle = 64'hAAAAAAAAAAAAAAAA;
    counter_instret = 64'hAAAAAAAAAAAAAAAA;
    csrfile_csr_mbadaddr = 32'hAAAAAAAA;
    csrfile_csr_mbase = 32'hAAAAAAAA;
    csrfile_csr_mbound = 32'hAAAAAAAA;
    csrfile_csr_mcause = 32'hAAAAAAAA;
    csrfile_csr_mcycle = 32'hAAAAAAAA;
    csrfile_csr_mcycleh = 32'hAAAAAAAA;
    csrfile_csr_mdbase = 32'hAAAAAAAA;
    csrfile_csr_mdbound = 32'hAAAAAAAA;
    csrfile_csr_mepc = 32'hAAAAAAAA;
    csrfile_csr_mibase = 32'hAAAAAAAA;
    csrfile_csr_mibound = 32'hAAAAAAAA;
    csrfile_csr_minstret = 32'hAAAAAAAA;
    csrfile_csr_minstreth = 32'hAAAAAAAA;
    csrfile_csr_misa = 32'hAAAAAAAA;
    csrfile_csr_mscratch = 32'hAAAAAAAA;
    csrfile_csr_ubadaddr = 32'hAAAAAAAA;
    csrfile_csr_ucause = 32'hAAAAAAAA;
    csrfile_csr_uepc = 32'hAAAAAAAA;
    csrfile_csr_uscratch = 32'hAAAAAAAA;
    csrfile_rg_fs = 2'h2;
    csrfile_rg_medeleg = 12'hAAA;
    csrfile_rg_meie = 1'h0;
    csrfile_rg_mideleg = 12'hAAA;
    csrfile_rg_mie = 1'h0;
    csrfile_rg_mpie = 1'h0;
    csrfile_rg_mpp = 2'h2;
    csrfile_rg_mprv = 1'h0;
    csrfile_rg_msie = 1'h0;
    csrfile_rg_mtie = 1'h0;
    csrfile_rg_mtvec = 30'h2AAAAAAA;
    csrfile_rg_mxr = 1'h0;
    csrfile_rg_prv = 2'h2;
    csrfile_rg_pum = 1'h0;
    csrfile_rg_rx = 9'h0AA;
    csrfile_rg_s_cy = 1'h0;
    csrfile_rg_s_ir = 1'h0;
    csrfile_rg_s_tm = 1'h0;
    csrfile_rg_seie = 1'h0;
    csrfile_rg_seip = 1'h0;
    csrfile_rg_ssie = 1'h0;
    csrfile_rg_ssip = 1'h0;
    csrfile_rg_stie = 1'h0;
    csrfile_rg_stip = 1'h0;
    csrfile_rg_tmp = 32'hAAAAAAAA;
    csrfile_rg_tx = 8'hAA;
    csrfile_rg_u_cy = 1'h0;
    csrfile_rg_u_ir = 1'h0;
    csrfile_rg_u_tm = 1'h0;
    csrfile_rg_ueie = 1'h0;
    csrfile_rg_ueip = 1'h0;
    csrfile_rg_uie = 1'h0;
    csrfile_rg_upie = 1'h0;
    csrfile_rg_usie = 1'h0;
    csrfile_rg_usip = 1'h0;
    csrfile_rg_utie = 1'h0;
    csrfile_rg_utip = 1'h0;
    csrfile_rg_utvec = 30'h2AAAAAAA;
    csrfile_rg_vm = 5'h0A;
    csrfile_rg_xs = 2'h2;
    csrfile_uart_fifoRecv_countReg = 2'h2;
    csrfile_uart_fifoXmit_countReg = 2'h2;
    csrfile_uart_rRecvBitCount = 4'hA;
    csrfile_uart_rRecvCellCount = 4'hA;
    csrfile_uart_rRecvData = 1'h0;
    csrfile_uart_rRecvParity = 1'h0;
    csrfile_uart_rRecvState = 3'h2;
    csrfile_uart_rXmitBitCount = 4'hA;
    csrfile_uart_rXmitCellCount = 4'hA;
    csrfile_uart_rXmitDataOut = 1'h0;
    csrfile_uart_rXmitParity = 1'h0;
    csrfile_uart_rXmitState = 3'h2;
    csrfile_uart_vrRecvBuffer_0 = 1'h0;
    csrfile_uart_vrRecvBuffer_1 = 1'h0;
    csrfile_uart_vrRecvBuffer_2 = 1'h0;
    csrfile_uart_vrRecvBuffer_3 = 1'h0;
    csrfile_uart_vrRecvBuffer_4 = 1'h0;
    csrfile_uart_vrRecvBuffer_5 = 1'h0;
    csrfile_uart_vrRecvBuffer_6 = 1'h0;
    csrfile_uart_vrRecvBuffer_7 = 1'h0;
    csrfile_uart_vrXmitBuffer_0 = 1'h0;
    csrfile_uart_vrXmitBuffer_1 = 1'h0;
    csrfile_uart_vrXmitBuffer_2 = 1'h0;
    csrfile_uart_vrXmitBuffer_3 = 1'h0;
    csrfile_uart_vrXmitBuffer_4 = 1'h0;
    csrfile_uart_vrXmitBuffer_5 = 1'h0;
    csrfile_uart_vrXmitBuffer_6 = 1'h0;
    csrfile_uart_vrXmitBuffer_7 = 1'h0;
    execute_rg_last_exec_pc = 32'hAAAAAAAA;
    f_dmem_reqs_rv = 111'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA;
    f_dmem_rsps_rv = 59'h2AAAAAAAAAAAAAA;
    f_ex_wb_rv = 153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    f_if_ex_rv = 72'hAAAAAAAAAAAAAAAAAA;
    fetch_icache_f_cpu_rsps_rv = 67'h2AAAAAAAAAAAAAAAA;
    fetch_icache_f_imem_reqs_rv = 40'hAAAAAAAAAA;
    fetch_icache_rg_imem_state = 1'h0;
    fetch_icache_rg_response_valid = 1'h0;
    fetch_rg_burst_addr = 32'hAAAAAAAA;
    fetch_rg_burst_length = 10'h2AA;
    fetch_rg_burst_size = 2'h2;
    fetch_rg_fetch_pc = 32'hAAAAAAAA;
    fetch_rg_imem_state = 1'h0;
    fetch_rg_redirect_pc = 33'h0AAAAAAAA;
    fetch_rg_this_pc = 33'h0AAAAAAAA;
    fetch_rg_verbosity = 32'hAAAAAAAA;
    regfile_rg_count = 5'h0A;
    regfile_rg_reset_complete = 1'h0;
    regfile_rg_reset_init = 1'h0;
    rg_cpu_mode = 1'h0;
    rg_cpu_state = 1'h0;
    rg_dmem_state = 1'h0;
    rg_halt_requested = 1'h0;
    rg_last_commit_pc = 32'hAAAAAAAA;
    rg_stop_reason = 4'hA;
    rg_stop_requested = 1'h0;
    rg_verbosity = 32'hAAAAAAAA;
    writeback_dcache_f_cpu_rsps_rv = 69'h0AAAAAAAAAAAAAAAAA;
    writeback_dcache_f_dmem_reqs_rv =
	298'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    writeback_f_dmem_reqs_rv = 111'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA;
    writeback_f_dmem_rsps_rv = 59'h2AAAAAAAAAAAAAA;
    writeback_rg_burst_addr = 32'hAAAAAAAA;
    writeback_rg_burst_count = 10'h2AA;
    writeback_rg_burst_length = 10'h2AA;
    writeback_rg_burst_size = 2'h2;
    writeback_rg_data_line =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    writeback_rg_dmem_state = 1'h0;
    writeback_rg_verbosity = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_imem_ifc_tx_get &&
	  NOT_fetch_rg_verbosity_read__37_SLE_3_38___d239)
	begin
	  v__h105076 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_imem_ifc_tx_get &&
	  NOT_fetch_rg_verbosity_read__37_SLE_3_38___d239)
	$display(v__h105076,
		 " CPU: FETCH: Request to Memory. Addr: %h, burst_length: %d",
		 fetch_icache_f_imem_reqs_rv[38:7],
		 $unsigned({ 5'd0, fetch_icache_f_imem_reqs_rv[6:2] }));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_regfile_rl_reset)
	begin
	  v__h404 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_regfile_rl_reset)
	$display(v__h404,
		 " REGFILE: Reset started. lo: %d, hi: %d",
		 5'd0,
		 5'd31);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_regfile_rl_signal_reset_completion)
	begin
	  v__h525 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_regfile_rl_signal_reset_completion)
	$display(v__h525, " REGFILE: Reset Done");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeback_rl_handle_memory_request &&
	  NOT_writeback_rg_verbosity_read__438_SLE_3_689___d2690)
	begin
	  v__h97217 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeback_rl_handle_memory_request &&
	  NOT_writeback_rg_verbosity_read__438_SLE_3_689___d2690)
	$write(v__h97217, " CPU: WRITE-BACK: Memory-I/O. Request. Type: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeback_rl_handle_memory_request &&
	  NOT_writeback_rg_verbosity_read__438_SLE_3_689___d2690 &&
	  writeback_dcache_f_dmem_reqs_rv[3:2] == 2'd0)
	$write("READ ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeback_rl_handle_memory_request &&
	  NOT_writeback_rg_verbosity_read__438_SLE_3_689___d2690 &&
	  writeback_dcache_f_dmem_reqs_rv[3:2] != 2'd0)
	$write("WRITE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeback_rl_handle_memory_request &&
	  NOT_writeback_rg_verbosity_read__438_SLE_3_689___d2690)
	$write(" Addr: %h, Data: %h",
	       writeback_dcache_f_dmem_reqs_rv[296:265],
	       writeback_dcache_f_dmem_reqs_rv[35:4],
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	  pending_interrupts__h31890 == 12'd0 &&
	  !writeback_wr_request$wget[119] &&
	  writeback_wr_request$wget[118:116] == 3'd1 &&
	  !writeback_rg_verbosity_read__438_SLE_1___d1439)
	begin
	  v__h81673 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	  pending_interrupts__h31890 == 12'd0 &&
	  !writeback_wr_request$wget[119] &&
	  writeback_wr_request$wget[118:116] == 3'd1 &&
	  !writeback_rg_verbosity_read__438_SLE_1___d1439)
	$display(v__h81673,
		 " CPU: WRITE-BACK: Instruction (PC: %h) performed an arithematic or logical operation. ARF Updated. REG: %d Value: %h",
		 writeback_wr_request$wget[151:120],
		 writeback_wr_request$wget[4:0],
		 writeback_wr_request$wget[36:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	  IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d1463)
	begin
	  v__h81791 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	  IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d1463)
	$display(v__h81791,
		 " CPU: WRITE-BACK: Instruction (PC: %h) requested a LOAD operation. Addr: %h",
		 writeback_wr_request$wget[151:120],
		 writeback_wr_request$wget[110:79]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	  IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d1469)
	begin
	  v__h81884 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	  IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d1469)
	$display(v__h81884,
		 " CPU: WRITE-BACK: Instruction (PC: %h) requested a STORE operation. Addr: %h, data: %h",
		 writeback_wr_request$wget[151:120],
		 writeback_wr_request$wget[110:79],
		 writeback_wr_request$wget[78:47]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	  IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d1474)
	begin
	  v__h33794 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	  IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d1474)
	$display(v__h33794,
		 " CPU: WRITE-BACK: Branch instruction (PC: %h) encountered. Taken. Updated PC: %h",
		 writeback_wr_request$wget[151:120],
		 writeback_wr_request$wget[69:38]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	  IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d1479)
	begin
	  v__h33879 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	  IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d1479)
	$display(v__h33879,
		 " CPU: WRITE-BACK: Branch instruction (PC: %h) encountered. Not Taken",
		 writeback_wr_request$wget[151:120]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	  pending_interrupts__h31890 == 12'd0 &&
	  !writeback_wr_request$wget[119] &&
	  writeback_wr_request$wget[118:116] == 3'd3 &&
	  writeback_wr_request_wget__58_BITS_95_TO_89_62_ETC___d2506)
	begin
	  v__h82351 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	  pending_interrupts__h31890 == 12'd0 &&
	  !writeback_wr_request$wget[119] &&
	  writeback_wr_request$wget[118:116] == 3'd3 &&
	  writeback_wr_request_wget__58_BITS_95_TO_89_62_ETC___d2506)
	$display(v__h82351,
		 " CPU: WRITE-BACK: Instruction (PC: %h) performed a CSR operation. ARF Updated. REG: %d Value: %h",
		 writeback_wr_request$wget[151:120],
		 writeback_wr_request$wget[16:12],
		 y__h50048);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	  pending_interrupts__h31890 == 12'd0 &&
	  !writeback_wr_request$wget[119] &&
	  writeback_wr_request$wget[118:116] == 3'd3 &&
	  writeback_wr_request_wget__58_BITS_95_TO_89_62_ETC___d2513)
	begin
	  v__h82633 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	  pending_interrupts__h31890 == 12'd0 &&
	  !writeback_wr_request$wget[119] &&
	  writeback_wr_request$wget[118:116] == 3'd3 &&
	  writeback_wr_request_wget__58_BITS_95_TO_89_62_ETC___d2513)
	$display(v__h82633,
		 " CPU: WRITE-BACK: Instruction (PC: %h) performed a CSR (*RET) operation. Redirecting to PC: %h",
		 writeback_wr_request$wget[151:120],
		 IF_writeback_wr_request_wget__58_BITS_11_TO_0__ETC___d1427);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	  IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d2526)
	begin
	  v__h84672 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	  IF_csrfile_rg_mie_port0__read__76_OR_NOT_csrfi_ETC___d2526)
	$display(v__h84672,
		 " CPU: WRITE-BACK: [[HALTING]]. Reason: End of Instruction Stream. PC: %h",
		 writeback_wr_request$wget[151:120]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	  pending_interrupts__h31890 != 12'd0 &&
	  !writeback_rg_verbosity_read__438_SLE_1___d1439)
	begin
	  v__h81213 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	  pending_interrupts__h31890 != 12'd0 &&
	  !writeback_rg_verbosity_read__438_SLE_1___d1439)
	$display(v__h81213,
		 " CPU: Interrupt pending. PC: %h, Cause: %h",
		 writeback_wr_request$wget[151:120],
		 IF_IF_csrfile_rg_mie_port0__read__76_OR_NOT_cs_ETC___d1154);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeback_rl_data_memory_response &&
	  !writeback_dcache_f_cpu_rsps_rv[35] &&
	  !writeback_dcache_f_cpu_rsps_rv[34] &&
	  !writeback_rg_verbosity_read__438_SLE_1___d1439 &&
	  writeback_wr_request$wget[114:113] == 2'd0)
	begin
	  v__h92930 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeback_rl_data_memory_response &&
	  !writeback_dcache_f_cpu_rsps_rv[35] &&
	  !writeback_dcache_f_cpu_rsps_rv[34] &&
	  !writeback_rg_verbosity_read__438_SLE_1___d1439 &&
	  writeback_wr_request$wget[114:113] == 2'd0)
	$display(v__h92930,
		 " CPU: WRITE-BACK: Instruction (PC: %h) performed a LOAD operation. Addr: %h, REG: %d, Value: %h",
		 writeback_wr_request$wget[151:120],
		 writeback_dcache_f_cpu_rsps_rv[33:2],
		 writeback_wr_request$wget[5:1],
		 _theResult____h92845);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeback_rl_data_memory_response &&
	  !writeback_dcache_f_cpu_rsps_rv[35] &&
	  !writeback_dcache_f_cpu_rsps_rv[34] &&
	  !writeback_rg_verbosity_read__438_SLE_1___d1439 &&
	  writeback_wr_request$wget[114:113] == 2'd1)
	begin
	  v__h93186 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeback_rl_data_memory_response &&
	  !writeback_dcache_f_cpu_rsps_rv[35] &&
	  !writeback_dcache_f_cpu_rsps_rv[34] &&
	  !writeback_rg_verbosity_read__438_SLE_1___d1439 &&
	  writeback_wr_request$wget[114:113] == 2'd1)
	$display(v__h93186,
		 " CPU: WRITE-BACK: Instruction (PC: %h) performed a STORE operation. Addr: %h, Value: %h",
		 writeback_wr_request$wget[151:120],
		 writeback_dcache_f_cpu_rsps_rv[33:2],
		 writeback_wr_request$wget[78:47]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeback_rl_data_memory_response &&
	  WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	  !writeback_dcache_f_cpu_rsps_rv[35] &&
	  !writeback_dcache_f_cpu_rsps_rv[34] &&
	  _wset_RL_writeback_rl_handle_writeback_requests$EN_writeback_wr_response$wget)
	$display("Error: \"BSV_src/CPU_src/WriteBackStage.bsv\", line 209, column 14: (R0002)\n  Conflict-free rules RL_writeback_rl_data_memory_response and\n  RL_writeback_rl_handle_writeback_requests called conflicting methods wset\n  and wset of module instance writeback_wr_response.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeback_rl_data_memory_response &&
	  WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	  (writeback_dcache_f_cpu_rsps_rv[35] &&
	   (writeback_wr_request$wget[114:113] == 2'd0 ||
	    writeback_wr_request$wget[114:113] == 2'd1) ||
	   !writeback_dcache_f_cpu_rsps_rv[35] &&
	   writeback_dcache_f_cpu_rsps_rv[34] &&
	   (writeback_wr_request$wget[114:113] == 2'd0 ||
	    writeback_wr_request$wget[114:113] == 2'd1)) &&
	  writeback_wr_request_wget__58_BIT_119_59_OR_wr_ETC___d1020)
	$display("Error: \"BSV_src/CPU_src/WriteBackStage.bsv\", line 209, column 14: (R0002)\n  Conflict-free rules RL_writeback_rl_data_memory_response and\n  RL_writeback_rl_handle_writeback_requests called conflicting methods wset\n  and wset of module instance writeback_wr_trap_data.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeback_rl_handle_traps &&
	  WILL_FIRE_RL_writeback_rl_data_memory_response &&
	  _wset_RL_writeback_rl_data_memory_response$EN_writeback_wr_response$wget)
	$display("Error: \"BSV_src/CPU_src/WriteBackStage.bsv\", line 262, column 14: (R0002)\n  Conflict-free rules RL_writeback_rl_handle_traps and\n  RL_writeback_rl_data_memory_response called conflicting methods wset and\n  wset of module instance writeback_wr_response.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeback_rl_handle_traps &&
	  WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	  (x__h96177 == 2'd0 || x__h96177 == 2'd0 ||
	   (writeback_wr_trap_data$wget[3:0] == 4'd0 ||
	    writeback_wr_trap_data$wget[3:0] == 4'd1 ||
	    writeback_wr_trap_data$wget[3:0] == 4'd4 ||
	    writeback_wr_trap_data$wget[3:0] == 4'd5 ||
	    writeback_wr_trap_data$wget[3:0] == 4'd6 ||
	    writeback_wr_trap_data$wget[3:0] == 4'd7) &&
	   x__h96177 == 2'd0) &&
	  !writeback_wr_trap_data$wget[4] &&
	  _write_RL_writeback_rl_handle_writeback_requests$EN_csrfile_rg_medeleg$wget)
	$display("Error: \"BSV_src/CPU_src/WriteBackStage.bsv\", line 262, column 14: (R0002)\n  Conflict-free rules RL_writeback_rl_handle_traps and\n  RL_writeback_rl_handle_writeback_requests called conflicting methods read\n  and write of module instance csrfile_rg_medeleg.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeback_rl_handle_traps &&
	  WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	  (x__h96177 != 2'd0 ||
	   !IF_writeback_wr_trap_data_wget__592_BIT_4_593__ETC___d2623) &&
	  _write_RL_writeback_rl_handle_writeback_requests$EN_csrfile_rg_mtvec$wget)
	$display("Error: \"BSV_src/CPU_src/WriteBackStage.bsv\", line 262, column 14: (R0002)\n  Conflict-free rules RL_writeback_rl_handle_traps and\n  RL_writeback_rl_handle_writeback_requests called conflicting methods read\n  and write of module instance csrfile_rg_mtvec.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeback_rl_handle_traps &&
	  WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	  IF_writeback_wr_trap_data_wget__592_BIT_4_593__ETC___d2623 &&
	  x__h96177 == 2'd0 &&
	  _write_RL_writeback_rl_handle_writeback_requests$EN_csrfile_rg_utvec$wget)
	$display("Error: \"BSV_src/CPU_src/WriteBackStage.bsv\", line 262, column 14: (R0002)\n  Conflict-free rules RL_writeback_rl_handle_traps and\n  RL_writeback_rl_handle_writeback_requests called conflicting methods read\n  and write of module instance csrfile_rg_utvec.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeback_rl_handle_traps &&
	  WILL_FIRE_RL_writeback_rl_handle_writeback_requests &&
	  _wset_RL_writeback_rl_handle_writeback_requests$EN_writeback_wr_response$wget)
	$display("Error: \"BSV_src/CPU_src/WriteBackStage.bsv\", line 262, column 14: (R0002)\n  Conflict-free rules RL_writeback_rl_handle_traps and\n  RL_writeback_rl_handle_writeback_requests called conflicting methods wset\n  and wset of module instance writeback_wr_response.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_update_execute && !f_if_ex_rv[38] &&
	  NOT_rg_verbosity_878_SLE_1_879___d2880)
	begin
	  v__h100070 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_update_execute && !f_if_ex_rv[38] &&
	  NOT_rg_verbosity_878_SLE_1_879___d2880)
	$display(v__h100070,
		 " CPU: DECODE: Instruction decoded. PC: %h, Instruction: %h",
		 f_if_ex_rv[70:39],
		 f_if_ex_rv[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_update_execute && !f_if_ex_rv[38] &&
	  (rg_verbosity ^ 32'h80000000) > 32'h80000002)
	begin
	  v__h100571 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_update_execute && !f_if_ex_rv[38] &&
	  (rg_verbosity ^ 32'h80000000) > 32'h80000002)
	$display(v__h100571,
		 " CPU: DECODE: Opcode: %b, rs1: %d, rs2: %d, rd: %d, f3: %b, f7: %b",
		 f_if_ex_rv[6:0],
		 f_if_ex_rv[19:15],
		 f_if_ex_rv[24:20],
		 f_if_ex_rv[11:7],
		 f_if_ex_rv[14:12],
		 f_if_ex_rv[31:25]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_update_execute && !f_if_ex_rv[38] &&
	  NOT_rg_verbosity_878_SLE_1_879___d2880)
	begin
	  v__h101500 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_update_execute && !f_if_ex_rv[38] &&
	  NOT_rg_verbosity_878_SLE_1_879___d2880)
	$display(v__h101500,
		 " CPU: EXECUTE: Setting up EXECUTE unit. PC: %h",
		 f_if_ex_rv[70:39]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_execute_rl_handle_execute_requests &&
	  NOT_execute_wr_verbosity_wget__44_SLE_2_45___d746)
	begin
	  v__h30385 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_execute_rl_handle_execute_requests &&
	  NOT_execute_wr_verbosity_wget__44_SLE_2_45___d746)
	$write(v__h30385, " CPU: EXECUTE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_execute && WILL_FIRE_RL_rl_update_execute &&
	  !rg_cpu_state &&
	  CAN_FIRE_RL_execute_rl_handle_execute_requests &&
	  f_if_ex_rv[71] &&
	  CAN_FIRE_RL_execute_rl_handle_execute_requests &&
	  f_if_ex_rv[38])
	$display("Error: \"BSV_src/CPU_src/CPU.bsv\", line 309, column 9: (R0002)\n  Conflict-free rules RL_rl_read_execute and RL_rl_update_execute called\n  conflicting methods port1__read and port1__write of module instance\n  f_ex_wb_rv.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fetch_response && fetch_icache_f_cpu_rsps_rv[32] &&
	  NOT_fetch_rg_verbosity_read__37_SLE_1_795___d2796)
	begin
	  v__h99356 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fetch_response && fetch_icache_f_cpu_rsps_rv[32] &&
	  NOT_fetch_rg_verbosity_read__37_SLE_1_795___d2796)
	$display(v__h99356,
		 " CPU: FETCH: [[ERROR]]. Exception MCAUSE_INSTRN_ADDR_MISALN occurred for PC: %h",
		 this_pc__h99173);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fetch_response && !fetch_icache_f_cpu_rsps_rv[32] &&
	  fetch_icache_f_cpu_rsps_rv[33] &&
	  NOT_fetch_rg_verbosity_read__37_SLE_1_795___d2796)
	begin
	  v__h99453 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fetch_response && !fetch_icache_f_cpu_rsps_rv[32] &&
	  fetch_icache_f_cpu_rsps_rv[33] &&
	  NOT_fetch_rg_verbosity_read__37_SLE_1_795___d2796)
	$display(v__h99453,
		 " CPU: FETCH: [[ERROR]] Exception MCAUSE_INSTRN_ACCESS_FAULT occurred for PC: %h",
		 this_pc__h99173);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fetch_response && !fetch_icache_f_cpu_rsps_rv[32] &&
	  !fetch_icache_f_cpu_rsps_rv[33] &&
	  NOT_fetch_rg_verbosity_read__37_SLE_1_795___d2796)
	begin
	  v__h99537 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fetch_response && !fetch_icache_f_cpu_rsps_rv[32] &&
	  !fetch_icache_f_cpu_rsps_rv[33] &&
	  NOT_fetch_rg_verbosity_read__37_SLE_1_795___d2796)
	$display(v__h99537,
		 " CPU: FETCH: Response received from Instruction Memory for PC: %h. Recived Data: %h",
		 this_pc__h99173,
		 fetch_icache_f_cpu_rsps_rv[65:34]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_imem_ifc_rx_put &&
	  NOT_fetch_rg_verbosity_read__37_SLE_3_38___d239)
	begin
	  v__h106008 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_imem_ifc_rx_put &&
	  NOT_fetch_rg_verbosity_read__37_SLE_3_38___d239)
	$display(v__h106008,
		 " CPU: FETCH: Response from Memory. Addr: %h, data: %h",
		 fetch_rg_burst_addr,
		 imem_ifc_rx_put[55:24]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fetch_request &&
	  NOT_fetch_rg_verbosity_read__37_SLE_1_795___d2796)
	begin
	  v__h99118 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fetch_request &&
	  NOT_fetch_rg_verbosity_read__37_SLE_1_795___d2796)
	$display(v__h99118,
		 " CPU: FETCH: Transfer initiated for PC = %0h\n\n",
		 v__h98899);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_flush && NOT_rg_verbosity_878_SLE_1_879___d2880)
	begin
	  v__h104119 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_flush && NOT_rg_verbosity_878_SLE_1_879___d2880)
	$display(v__h104119, " CPU: [FLUSH]\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_rl_handle_redirections &&
	  NOT_fetch_rg_verbosity_read__37_SLE_3_38___d239)
	begin
	  v__h20709 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fetch_rl_handle_redirections &&
	  NOT_fetch_rg_verbosity_read__37_SLE_3_38___d239)
	$display(v__h20709, " CPU: FETCH: Handling redirections");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeback_rl_handle_memory_response &&
	  NOT_writeback_rg_verbosity_read__438_SLE_3_689___d2690)
	begin
	  v__h98247 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeback_rl_handle_memory_response &&
	  NOT_writeback_rg_verbosity_read__438_SLE_3_689___d2690)
	$write(v__h98247, " CPU: WRITE_BACK: Memory-I/O. Response. Type: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeback_rl_handle_memory_response &&
	  NOT_writeback_rg_verbosity_read__438_SLE_3_689___d2690 &&
	  writeback_f_dmem_rsps_rv$port1__read[57:56] == 2'd0)
	$write("READ ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeback_rl_handle_memory_response &&
	  NOT_writeback_rg_verbosity_read__438_SLE_3_689___d2690 &&
	  writeback_f_dmem_rsps_rv$port1__read[57:56] == 2'd1)
	$write("WRITE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeback_rl_handle_memory_response &&
	  NOT_writeback_rg_verbosity_read__438_SLE_3_689___d2690 &&
	  writeback_f_dmem_rsps_rv$port1__read[57:56] != 2'd0 &&
	  writeback_f_dmem_rsps_rv$port1__read[57:56] != 2'd1)
	$write("UNKNOWN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_writeback_rl_handle_memory_response &&
	  NOT_writeback_rg_verbosity_read__438_SLE_3_689___d2690)
	$write(" Addr: %h, Data: %h, Size: %d, Length: %d",
	       writeback_rg_burst_addr,
	       writeback_f_dmem_rsps_rv$port1__read[55:24],
	       writeback_rg_burst_size,
	       $unsigned(writeback_rg_burst_length),
	       "\n");
  end
  // synopsys translate_on
endmodule  // mkCPU_Model

