//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// On Fri Jan 22 01:17:53 IST 2016
//
//
// Ports:
// Name                         I/O  size props
// RDY__start                     O     1 reg
// RDY__deque                     O     1 reg
// RDY__set_flush                 O     1 const
// result_                        O   151 reg
// RDY_result_                    O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// _start__operand1               I    32
// _start__operand2               I    32
// _start__destination_address    I     5 reg
// _start__program_counter        I    32 reg
// _start__fsr                    I    32 reg
// _start__rob_number             I     4 reg
// _start__sign                   I     1 reg
// _start__summed_exponent        I    10 reg
// _start__invalid                I     1 reg
// _start__infinity               I     1 reg
// _start__zero                   I     1 reg
// _set_flush__flush              I     1
// EN__start                      I     1
// EN__deque                      I     1
// EN__set_flush                  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkinteger_multiplier_for_spfmul(CLK,
				       RST_N,

				       _start__operand1,
				       _start__operand2,
				       _start__destination_address,
				       _start__program_counter,
				       _start__fsr,
				       _start__rob_number,
				       _start__sign,
				       _start__summed_exponent,
				       _start__invalid,
				       _start__infinity,
				       _start__zero,
				       EN__start,
				       RDY__start,

				       EN__deque,
				       RDY__deque,

				       _set_flush__flush,
				       EN__set_flush,
				       RDY__set_flush,

				       result_,
				       RDY_result_);
  input  CLK;
  input  RST_N;

  // action method _start
  input  [31 : 0] _start__operand1;
  input  [31 : 0] _start__operand2;
  input  [4 : 0] _start__destination_address;
  input  [31 : 0] _start__program_counter;
  input  [31 : 0] _start__fsr;
  input  [3 : 0] _start__rob_number;
  input  _start__sign;
  input  [9 : 0] _start__summed_exponent;
  input  _start__invalid;
  input  _start__infinity;
  input  _start__zero;
  input  EN__start;
  output RDY__start;

  // action method _deque
  input  EN__deque;
  output RDY__deque;

  // action method _set_flush
  input  _set_flush__flush;
  input  EN__set_flush;
  output RDY__set_flush;

  // value method result_
  output [150 : 0] result_;
  output RDY_result_;

  // signals for module outputs
  wire [150 : 0] result_;
  wire RDY__deque, RDY__set_flush, RDY__start, RDY_result_;

  // ports of submodule ff_final_result
  wire [150 : 0] ff_final_result$D_IN, ff_final_result$D_OUT;
  wire ff_final_result$CLR,
       ff_final_result$DEQ,
       ff_final_result$EMPTY_N,
       ff_final_result$ENQ,
       ff_final_result$FULL_N;

  // ports of submodule ff_stage1
  wire [1110 : 0] ff_stage1$D_IN, ff_stage1$D_OUT;
  wire ff_stage1$CLR,
       ff_stage1$DEQ,
       ff_stage1$EMPTY_N,
       ff_stage1$ENQ,
       ff_stage1$FULL_N;

  // ports of submodule ff_stage2
  wire [470 : 0] ff_stage2$D_IN, ff_stage2$D_OUT;
  wire ff_stage2$CLR,
       ff_stage2$DEQ,
       ff_stage2$EMPTY_N,
       ff_stage2$ENQ,
       ff_stage2$FULL_N;

  // ports of submodule ff_stage3
  wire [214 : 0] ff_stage3$D_IN, ff_stage3$D_OUT;
  wire ff_stage3$CLR,
       ff_stage3$DEQ,
       ff_stage3$EMPTY_N,
       ff_stage3$ENQ,
       ff_stage3$FULL_N;

  // ports of submodule ff_stage3a
  wire [231 : 0] ff_stage3a$D_IN, ff_stage3a$D_OUT;
  wire ff_stage3a$CLR,
       ff_stage3a$DEQ,
       ff_stage3a$EMPTY_N,
       ff_stage3a$ENQ,
       ff_stage3a$FULL_N;

  // ports of submodule ff_stage3b
  wire [247 : 0] ff_stage3b$D_IN, ff_stage3b$D_OUT;
  wire ff_stage3b$CLR,
       ff_stage3b$DEQ,
       ff_stage3b$EMPTY_N,
       ff_stage3b$ENQ,
       ff_stage3b$FULL_N;

  // ports of submodule ff_stage3c
  wire [263 : 0] ff_stage3c$D_IN, ff_stage3c$D_OUT;
  wire ff_stage3c$CLR,
       ff_stage3c$DEQ,
       ff_stage3c$EMPTY_N,
       ff_stage3c$ENQ,
       ff_stage3c$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_flush_data,
       CAN_FIRE_RL_rl_rb_nb1,
       CAN_FIRE_RL_rl_rb_nb2,
       CAN_FIRE_RL_rl_rb_nb3,
       CAN_FIRE_RL_rl_rb_nb4,
       CAN_FIRE_RL_rl_wallace_tree_part1,
       CAN_FIRE_RL_rl_wallace_tree_part2,
       CAN_FIRE__deque,
       CAN_FIRE__set_flush,
       CAN_FIRE__start,
       WILL_FIRE_RL_rl_flush_data,
       WILL_FIRE_RL_rl_rb_nb1,
       WILL_FIRE_RL_rl_rb_nb2,
       WILL_FIRE_RL_rl_rb_nb3,
       WILL_FIRE_RL_rl_rb_nb4,
       WILL_FIRE_RL_rl_wallace_tree_part1,
       WILL_FIRE_RL_rl_wallace_tree_part2,
       WILL_FIRE__deque,
       WILL_FIRE__set_flush,
       WILL_FIRE__start;

  // remaining internal signals
  wire [383 : 0] x_stage2__h1071;
  wire [255 : 0] wallace_rba_part1___d21;
  wire [127 : 0] data1__h4131, data1__h4306, data1__h4479, lv_res__h3761;
  wire [63 : 0] _theResult____h4701,
		gen_pp___d103,
		gen_pp___d108,
		gen_pp___d113,
		gen_pp___d118,
		gen_pp___d123,
		gen_pp___d128,
		gen_pp___d133,
		gen_pp___d138,
		gen_pp___d143,
		gen_pp___d148,
		gen_pp___d153,
		gen_pp___d158,
		gen_pp___d83,
		gen_pp___d88,
		gen_pp___d93,
		gen_pp___d98,
		lv_inp1__h3723,
		lv_inp2__h3724,
		lv_lmultp__h4702,
		lv_s2_1m__h3726,
		lv_s2_1p__h3725,
		lv_s2_2m__h3728,
		lv_s2_2p__h3727,
		normal_binary_product4__h4481;
  wire [61 : 0] spliced_bits__h8587;
  wire [59 : 0] spliced_bits__h8394;
  wire [57 : 0] spliced_bits__h8201;
  wire [55 : 0] spliced_bits__h8008;
  wire [53 : 0] spliced_bits__h7815;
  wire [51 : 0] spliced_bits__h7622;
  wire [49 : 0] spliced_bits__h7429;
  wire [48 : 0] data2__h4480, normal_binary_product3__h4308;
  wire [47 : 0] spliced_bits__h7236;
  wire [45 : 0] spliced_bits__h7043;
  wire [43 : 0] spliced_bits__h6850;
  wire [41 : 0] spliced_bits__h6657;
  wire [39 : 0] spliced_bits__h6464;
  wire [37 : 0] spliced_bits__h6271;
  wire [35 : 0] spliced_bits__h5966;
  wire [32 : 0] data2__h4307, normal_binary_product2__h4133;
  wire [31 : 0] IF_start__operand2_BIT_31_7_THEN_4294967295_EL_ETC___d78;
  wire [16 : 0] data2__h4132, normal_binary_product1__h4008;

  // action method _start
  assign RDY__start = ff_stage1$FULL_N ;
  assign CAN_FIRE__start = ff_stage1$FULL_N ;
  assign WILL_FIRE__start = EN__start ;

  // action method _deque
  assign RDY__deque = ff_final_result$EMPTY_N ;
  assign CAN_FIRE__deque = ff_final_result$EMPTY_N ;
  assign WILL_FIRE__deque = EN__deque ;

  // action method _set_flush
  assign RDY__set_flush = 1'd1 ;
  assign CAN_FIRE__set_flush = 1'd1 ;
  assign WILL_FIRE__set_flush = EN__set_flush ;

  // value method result_
  assign result_ = ff_final_result$D_OUT ;
  assign RDY_result_ = ff_final_result$EMPTY_N ;

  // submodule ff_final_result
  FIFO2 #(.width(32'd151), .guarded(32'd1)) ff_final_result(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ff_final_result$D_IN),
							    .ENQ(ff_final_result$ENQ),
							    .DEQ(ff_final_result$DEQ),
							    .CLR(ff_final_result$CLR),
							    .D_OUT(ff_final_result$D_OUT),
							    .FULL_N(ff_final_result$FULL_N),
							    .EMPTY_N(ff_final_result$EMPTY_N));

  // submodule ff_stage1
  FIFO2 #(.width(32'd1111), .guarded(32'd1)) ff_stage1(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(ff_stage1$D_IN),
						       .ENQ(ff_stage1$ENQ),
						       .DEQ(ff_stage1$DEQ),
						       .CLR(ff_stage1$CLR),
						       .D_OUT(ff_stage1$D_OUT),
						       .FULL_N(ff_stage1$FULL_N),
						       .EMPTY_N(ff_stage1$EMPTY_N));

  // submodule ff_stage2
  FIFO2 #(.width(32'd471), .guarded(32'd1)) ff_stage2(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(ff_stage2$D_IN),
						      .ENQ(ff_stage2$ENQ),
						      .DEQ(ff_stage2$DEQ),
						      .CLR(ff_stage2$CLR),
						      .D_OUT(ff_stage2$D_OUT),
						      .FULL_N(ff_stage2$FULL_N),
						      .EMPTY_N(ff_stage2$EMPTY_N));

  // submodule ff_stage3
  FIFO2 #(.width(32'd215), .guarded(32'd1)) ff_stage3(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(ff_stage3$D_IN),
						      .ENQ(ff_stage3$ENQ),
						      .DEQ(ff_stage3$DEQ),
						      .CLR(ff_stage3$CLR),
						      .D_OUT(ff_stage3$D_OUT),
						      .FULL_N(ff_stage3$FULL_N),
						      .EMPTY_N(ff_stage3$EMPTY_N));

  // submodule ff_stage3a
  FIFO2 #(.width(32'd232), .guarded(32'd1)) ff_stage3a(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(ff_stage3a$D_IN),
						       .ENQ(ff_stage3a$ENQ),
						       .DEQ(ff_stage3a$DEQ),
						       .CLR(ff_stage3a$CLR),
						       .D_OUT(ff_stage3a$D_OUT),
						       .FULL_N(ff_stage3a$FULL_N),
						       .EMPTY_N(ff_stage3a$EMPTY_N));

  // submodule ff_stage3b
  FIFO2 #(.width(32'd248), .guarded(32'd1)) ff_stage3b(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(ff_stage3b$D_IN),
						       .ENQ(ff_stage3b$ENQ),
						       .DEQ(ff_stage3b$DEQ),
						       .CLR(ff_stage3b$CLR),
						       .D_OUT(ff_stage3b$D_OUT),
						       .FULL_N(ff_stage3b$FULL_N),
						       .EMPTY_N(ff_stage3b$EMPTY_N));

  // submodule ff_stage3c
  FIFO2 #(.width(32'd264), .guarded(32'd1)) ff_stage3c(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(ff_stage3c$D_IN),
						       .ENQ(ff_stage3c$ENQ),
						       .DEQ(ff_stage3c$DEQ),
						       .CLR(ff_stage3c$CLR),
						       .D_OUT(ff_stage3c$D_OUT),
						       .FULL_N(ff_stage3c$FULL_N),
						       .EMPTY_N(ff_stage3c$EMPTY_N));

  // rule RL_rl_flush_data
  assign CAN_FIRE_RL_rl_flush_data = EN__set_flush && _set_flush__flush ;
  assign WILL_FIRE_RL_rl_flush_data = CAN_FIRE_RL_rl_flush_data ;

  // rule RL_rl_wallace_tree_part1
  assign CAN_FIRE_RL_rl_wallace_tree_part1 =
	     ff_stage1$EMPTY_N && ff_stage2$FULL_N &&
	     (!EN__set_flush || !_set_flush__flush) ;
  assign WILL_FIRE_RL_rl_wallace_tree_part1 =
	     CAN_FIRE_RL_rl_wallace_tree_part1 ;

  // rule RL_rl_wallace_tree_part2
  assign CAN_FIRE_RL_rl_wallace_tree_part2 =
	     ff_stage2$EMPTY_N && ff_stage3$FULL_N &&
	     (!EN__set_flush || !_set_flush__flush) ;
  assign WILL_FIRE_RL_rl_wallace_tree_part2 =
	     CAN_FIRE_RL_rl_wallace_tree_part2 ;

  // rule RL_rl_rb_nb1
  assign CAN_FIRE_RL_rl_rb_nb1 =
	     ff_stage3$EMPTY_N && ff_stage3a$FULL_N &&
	     (!EN__set_flush || !_set_flush__flush) ;
  assign WILL_FIRE_RL_rl_rb_nb1 = CAN_FIRE_RL_rl_rb_nb1 ;

  // rule RL_rl_rb_nb2
  assign CAN_FIRE_RL_rl_rb_nb2 =
	     ff_stage3b$FULL_N && ff_stage3a$EMPTY_N &&
	     (!EN__set_flush || !_set_flush__flush) ;
  assign WILL_FIRE_RL_rl_rb_nb2 = CAN_FIRE_RL_rl_rb_nb2 ;

  // rule RL_rl_rb_nb3
  assign CAN_FIRE_RL_rl_rb_nb3 =
	     ff_stage3c$FULL_N && ff_stage3b$EMPTY_N &&
	     (!EN__set_flush || !_set_flush__flush) ;
  assign WILL_FIRE_RL_rl_rb_nb3 = CAN_FIRE_RL_rl_rb_nb3 ;

  // rule RL_rl_rb_nb4
  assign CAN_FIRE_RL_rl_rb_nb4 =
	     ff_final_result$FULL_N && ff_stage3c$EMPTY_N &&
	     (!EN__set_flush || !_set_flush__flush) ;
  assign WILL_FIRE_RL_rl_rb_nb4 = CAN_FIRE_RL_rl_rb_nb4 ;

  // submodule ff_final_result
  assign ff_final_result$D_IN =
	     { ff_stage3c$D_OUT[263:177], normal_binary_product4__h4481 } ;
  assign ff_final_result$ENQ = CAN_FIRE_RL_rl_rb_nb4 ;
  assign ff_final_result$DEQ = EN__deque ;
  assign ff_final_result$CLR = CAN_FIRE_RL_rl_flush_data ;

  // submodule ff_stage1
  assign ff_stage1$D_IN =
	     { _start__destination_address,
	       _start__rob_number,
	       _start__fsr,
	       _start__program_counter,
	       spliced_bits__h5966,
	       28'd0,
	       spliced_bits__h6271,
	       26'd0,
	       spliced_bits__h6464,
	       24'd0,
	       spliced_bits__h6657,
	       22'd0,
	       spliced_bits__h6850,
	       20'd0,
	       spliced_bits__h7043,
	       18'd0,
	       spliced_bits__h7236,
	       16'd0,
	       spliced_bits__h7429,
	       14'd0,
	       spliced_bits__h7622,
	       12'd0,
	       spliced_bits__h7815,
	       10'd0,
	       spliced_bits__h8008,
	       8'd0,
	       spliced_bits__h8201,
	       6'd0,
	       spliced_bits__h8394,
	       4'd0,
	       spliced_bits__h8587,
	       2'd0,
	       gen_pp___d153[61:0],
	       2'b11,
	       gen_pp___d158,
	       _start__summed_exponent,
	       _start__infinity,
	       _start__invalid,
	       _start__zero,
	       _start__sign } ;
  assign ff_stage1$ENQ = EN__start ;
  assign ff_stage1$DEQ =
	     ff_stage1$EMPTY_N && ff_stage2$FULL_N &&
	     (!EN__set_flush || !_set_flush__flush) ;
  assign ff_stage1$CLR = EN__set_flush && _set_flush__flush ;

  // submodule ff_stage2
  assign ff_stage2$D_IN =
	     { ff_stage1$D_OUT[1110:1038],
	       ff_stage1$D_OUT[13:4],
	       ff_stage1$D_OUT[0],
	       ff_stage1$D_OUT[3:1],
	       x_stage2__h1071 } ;
  assign ff_stage2$ENQ = CAN_FIRE_RL_rl_wallace_tree_part1 ;
  assign ff_stage2$DEQ = CAN_FIRE_RL_rl_wallace_tree_part2 ;
  assign ff_stage2$CLR = CAN_FIRE_RL_rl_flush_data ;

  // submodule ff_stage3
  assign ff_stage3$D_IN = { ff_stage2$D_OUT[470:384], lv_res__h3761 } ;
  assign ff_stage3$ENQ = CAN_FIRE_RL_rl_wallace_tree_part2 ;
  assign ff_stage3$DEQ = CAN_FIRE_RL_rl_rb_nb1 ;
  assign ff_stage3$CLR = CAN_FIRE_RL_rl_flush_data ;

  // submodule ff_stage3a
  assign ff_stage3a$D_IN =
	     { ff_stage3$D_OUT, normal_binary_product1__h4008 } ;
  assign ff_stage3a$ENQ = CAN_FIRE_RL_rl_rb_nb1 ;
  assign ff_stage3a$DEQ = CAN_FIRE_RL_rl_rb_nb2 ;
  assign ff_stage3a$CLR = CAN_FIRE_RL_rl_flush_data ;

  // submodule ff_stage3b
  assign ff_stage3b$D_IN =
	     { ff_stage3a$D_OUT[231:17], normal_binary_product2__h4133 } ;
  assign ff_stage3b$ENQ = CAN_FIRE_RL_rl_rb_nb2 ;
  assign ff_stage3b$DEQ = CAN_FIRE_RL_rl_rb_nb3 ;
  assign ff_stage3b$CLR = CAN_FIRE_RL_rl_flush_data ;

  // submodule ff_stage3c
  assign ff_stage3c$D_IN =
	     { ff_stage3b$D_OUT[247:33], normal_binary_product3__h4308 } ;
  assign ff_stage3c$ENQ = CAN_FIRE_RL_rl_rb_nb3 ;
  assign ff_stage3c$DEQ = CAN_FIRE_RL_rl_rb_nb4 ;
  assign ff_stage3c$CLR = CAN_FIRE_RL_rl_flush_data ;

  // remaining internal signals
  module_rb_nb1 instance_rb_nb1_0(.rb_nb1_rb(ff_stage3$D_OUT[127:0]),
				  .rb_nb1(normal_binary_product1__h4008));
  module_wallace_rba_part2 instance_wallace_rba_part2_20(.wallace_rba_part2_s2_1p(lv_s2_1p__h3725),
							 .wallace_rba_part2_s2_1m(lv_s2_1m__h3726),
							 .wallace_rba_part2_s2_2p(lv_s2_2p__h3727),
							 .wallace_rba_part2_s2_2m(lv_s2_2m__h3728),
							 .wallace_rba_part2_inp1(lv_inp1__h3723),
							 .wallace_rba_part2_inp2(lv_inp2__h3724),
							 .wallace_rba_part2(lv_res__h3761));
  module_rb_nb2 instance_rb_nb2_1(.rb_nb2_rb(data1__h4131),
				  .rb_nb2_fwd(data2__h4132),
				  .rb_nb2(normal_binary_product2__h4133));
  module_rb_nb3 instance_rb_nb3_2(.rb_nb3_rb(data1__h4306),
				  .rb_nb3_fwd(data2__h4307),
				  .rb_nb3(normal_binary_product3__h4308));
  module_rb_nb4 instance_rb_nb4_19(.rb_nb4_rb(data1__h4479),
				   .rb_nb4_fwd(data2__h4480),
				   .rb_nb4(normal_binary_product4__h4481));
  module_wallace_rba_part1 instance_wallace_rba_part1_21(.wallace_rba_part1_inp(ff_stage1$D_OUT[1037:14]),
							 .wallace_rba_part1(wallace_rba_part1___d21));
  module_gen_pp instance_gen_pp_4(.gen_pp_multp(_theResult____h4701),
				  .gen_pp_lmultp(lv_lmultp__h4702),
				  .gen_pp_sel(_start__operand1[31:29]),
				  .gen_pp_inv(32'd1),
				  .gen_pp(gen_pp___d83));
  module_gen_pp instance_gen_pp_3(.gen_pp_multp(_theResult____h4701),
				  .gen_pp_lmultp(lv_lmultp__h4702),
				  .gen_pp_sel(_start__operand1[29:27]),
				  .gen_pp_inv(32'd0),
				  .gen_pp(gen_pp___d88));
  module_gen_pp instance_gen_pp_5(.gen_pp_multp(_theResult____h4701),
				  .gen_pp_lmultp(lv_lmultp__h4702),
				  .gen_pp_sel(_start__operand1[27:25]),
				  .gen_pp_inv(32'd1),
				  .gen_pp(gen_pp___d93));
  module_gen_pp instance_gen_pp_6(.gen_pp_multp(_theResult____h4701),
				  .gen_pp_lmultp(lv_lmultp__h4702),
				  .gen_pp_sel(_start__operand1[25:23]),
				  .gen_pp_inv(32'd0),
				  .gen_pp(gen_pp___d98));
  module_gen_pp instance_gen_pp_7(.gen_pp_multp(_theResult____h4701),
				  .gen_pp_lmultp(lv_lmultp__h4702),
				  .gen_pp_sel(_start__operand1[23:21]),
				  .gen_pp_inv(32'd1),
				  .gen_pp(gen_pp___d103));
  module_gen_pp instance_gen_pp_8(.gen_pp_multp(_theResult____h4701),
				  .gen_pp_lmultp(lv_lmultp__h4702),
				  .gen_pp_sel(_start__operand1[21:19]),
				  .gen_pp_inv(32'd0),
				  .gen_pp(gen_pp___d108));
  module_gen_pp instance_gen_pp_9(.gen_pp_multp(_theResult____h4701),
				  .gen_pp_lmultp(lv_lmultp__h4702),
				  .gen_pp_sel(_start__operand1[19:17]),
				  .gen_pp_inv(32'd1),
				  .gen_pp(gen_pp___d113));
  module_gen_pp instance_gen_pp_10(.gen_pp_multp(_theResult____h4701),
				   .gen_pp_lmultp(lv_lmultp__h4702),
				   .gen_pp_sel(_start__operand1[17:15]),
				   .gen_pp_inv(32'd0),
				   .gen_pp(gen_pp___d118));
  module_gen_pp instance_gen_pp_12(.gen_pp_multp(_theResult____h4701),
				   .gen_pp_lmultp(lv_lmultp__h4702),
				   .gen_pp_sel(_start__operand1[13:11]),
				   .gen_pp_inv(32'd0),
				   .gen_pp(gen_pp___d128));
  module_gen_pp instance_gen_pp_11(.gen_pp_multp(_theResult____h4701),
				   .gen_pp_lmultp(lv_lmultp__h4702),
				   .gen_pp_sel(_start__operand1[15:13]),
				   .gen_pp_inv(32'd1),
				   .gen_pp(gen_pp___d123));
  module_gen_pp instance_gen_pp_13(.gen_pp_multp(_theResult____h4701),
				   .gen_pp_lmultp(lv_lmultp__h4702),
				   .gen_pp_sel(_start__operand1[11:9]),
				   .gen_pp_inv(32'd1),
				   .gen_pp(gen_pp___d133));
  module_gen_pp instance_gen_pp_14(.gen_pp_multp(_theResult____h4701),
				   .gen_pp_lmultp(lv_lmultp__h4702),
				   .gen_pp_sel(_start__operand1[9:7]),
				   .gen_pp_inv(32'd0),
				   .gen_pp(gen_pp___d138));
  module_gen_pp instance_gen_pp_15(.gen_pp_multp(_theResult____h4701),
				   .gen_pp_lmultp(lv_lmultp__h4702),
				   .gen_pp_sel(_start__operand1[7:5]),
				   .gen_pp_inv(32'd1),
				   .gen_pp(gen_pp___d143));
  module_gen_pp instance_gen_pp_16(.gen_pp_multp(_theResult____h4701),
				   .gen_pp_lmultp(lv_lmultp__h4702),
				   .gen_pp_sel(_start__operand1[5:3]),
				   .gen_pp_inv(32'd0),
				   .gen_pp(gen_pp___d148));
  module_gen_pp instance_gen_pp_17(.gen_pp_multp(_theResult____h4701),
				   .gen_pp_lmultp(lv_lmultp__h4702),
				   .gen_pp_sel(_start__operand1[3:1]),
				   .gen_pp_inv(32'd1),
				   .gen_pp(gen_pp___d153));
  module_gen_pp instance_gen_pp_18(.gen_pp_multp(_theResult____h4701),
				   .gen_pp_lmultp(lv_lmultp__h4702),
				   .gen_pp_sel({ _start__operand1[1:0],
						 1'd0 }),
				   .gen_pp_inv(32'd0),
				   .gen_pp(gen_pp___d158));
  assign IF_start__operand2_BIT_31_7_THEN_4294967295_EL_ETC___d78 =
	     _start__operand2[31] ? 32'hFFFFFFFF : 32'b0 ;
  assign _theResult____h4701 =
	     { IF_start__operand2_BIT_31_7_THEN_4294967295_EL_ETC___d78,
	       _start__operand2 } ;
  assign data1__h4131 = ff_stage3a$D_OUT[144:17] ;
  assign data1__h4306 = ff_stage3b$D_OUT[160:33] ;
  assign data1__h4479 = ff_stage3c$D_OUT[176:49] ;
  assign data2__h4132 = ff_stage3a$D_OUT[16:0] ;
  assign data2__h4307 = ff_stage3b$D_OUT[32:0] ;
  assign data2__h4480 = ff_stage3c$D_OUT[48:0] ;
  assign lv_inp1__h3723 = ff_stage2$D_OUT[383:320] ;
  assign lv_inp2__h3724 = ff_stage2$D_OUT[319:256] ;
  assign lv_lmultp__h4702 =
	     { IF_start__operand2_BIT_31_7_THEN_4294967295_EL_ETC___d78[30:0],
	       _start__operand2,
	       1'd0 } ;
  assign lv_s2_1m__h3726 = ff_stage2$D_OUT[191:128] ;
  assign lv_s2_1p__h3725 = ff_stage2$D_OUT[255:192] ;
  assign lv_s2_2m__h3728 = ff_stage2$D_OUT[63:0] ;
  assign lv_s2_2p__h3727 = ff_stage2$D_OUT[127:64] ;
  assign spliced_bits__h5966 = { gen_pp___d83[33:0], 2'b11 } ;
  assign spliced_bits__h6271 = { gen_pp___d88[35:0], 2'b0 } ;
  assign spliced_bits__h6464 = { gen_pp___d93[37:0], 2'b11 } ;
  assign spliced_bits__h6657 = { gen_pp___d98[39:0], 2'b0 } ;
  assign spliced_bits__h6850 = { gen_pp___d103[41:0], 2'b11 } ;
  assign spliced_bits__h7043 = { gen_pp___d108[43:0], 2'b0 } ;
  assign spliced_bits__h7236 = { gen_pp___d113[45:0], 2'b11 } ;
  assign spliced_bits__h7429 = { gen_pp___d118[47:0], 2'b0 } ;
  assign spliced_bits__h7622 = { gen_pp___d123[49:0], 2'b11 } ;
  assign spliced_bits__h7815 = { gen_pp___d128[51:0], 2'b0 } ;
  assign spliced_bits__h8008 = { gen_pp___d133[53:0], 2'b11 } ;
  assign spliced_bits__h8201 = { gen_pp___d138[55:0], 2'b0 } ;
  assign spliced_bits__h8394 = { gen_pp___d143[57:0], 2'b11 } ;
  assign spliced_bits__h8587 = { gen_pp___d148[59:0], 2'b0 } ;
  assign x_stage2__h1071 =
	     { ff_stage1$D_OUT[973:910],
	       ff_stage1$D_OUT[1037:974],
	       wallace_rba_part1___d21 } ;
endmodule  // mkinteger_multiplier_for_spfmul

