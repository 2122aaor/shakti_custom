//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// On Tue Sep 29 16:56:19 IST 2015
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTb_Processor(CLK,
		      RST_N);
  input  CLK;
  input  RST_N;

  // inlined wires
  wire rg_cnt_1$wget, rg_cnt_d_1$wget;

  // register rg_block
  reg [127 : 0] rg_block;
  wire [127 : 0] rg_block$D_IN;
  wire rg_block$EN;

  // register rg_cnt
  reg rg_cnt;
  wire rg_cnt$D_IN, rg_cnt$EN;

  // register rg_cnt_d
  reg rg_cnt_d;
  wire rg_cnt_d$D_IN, rg_cnt_d$EN;

  // register rg_dblock
  reg [255 : 0] rg_dblock;
  wire [255 : 0] rg_dblock$D_IN;
  wire rg_dblock$EN;

  // register rg_in_address
  reg [63 : 0] rg_in_address;
  wire [63 : 0] rg_in_address$D_IN;
  wire rg_in_address$EN;

  // register rg_in_daddress
  reg [63 : 0] rg_in_daddress;
  wire [63 : 0] rg_in_daddress$D_IN;
  wire rg_in_daddress$EN;

  // register rg_token
  reg [4 : 0] rg_token;
  wire [4 : 0] rg_token$D_IN;
  wire rg_token$EN;

  // register rg_write_back_address
  reg [63 : 0] rg_write_back_address;
  wire [63 : 0] rg_write_back_address$D_IN;
  wire rg_write_back_address$EN;

  // register rg_write_back_data
  reg [255 : 0] rg_write_back_data;
  wire [255 : 0] rg_write_back_data$D_IN;
  wire rg_write_back_data$EN;

  // register rg_write_back_loop
  reg [2 : 0] rg_write_back_loop;
  wire [2 : 0] rg_write_back_loop$D_IN;
  wire rg_write_back_loop$EN;

  // ports of submodule data_memory
  wire [63 : 0] data_memory$ADDR_1,
		data_memory$ADDR_2,
		data_memory$ADDR_3,
		data_memory$ADDR_4,
		data_memory$ADDR_5,
		data_memory$ADDR_IN,
		data_memory$D_IN,
		data_memory$D_OUT_1,
		data_memory$D_OUT_2,
		data_memory$D_OUT_3,
		data_memory$D_OUT_4;
  wire data_memory$WE;

  // ports of submodule instr_memory
  wire [63 : 0] instr_memory$ADDR_1,
		instr_memory$ADDR_2,
		instr_memory$ADDR_3,
		instr_memory$ADDR_4,
		instr_memory$ADDR_5,
		instr_memory$ADDR_IN;
  wire [31 : 0] instr_memory$D_IN,
		instr_memory$D_OUT_1,
		instr_memory$D_OUT_2,
		instr_memory$D_OUT_3,
		instr_memory$D_OUT_4;
  wire instr_memory$WE;

  // ports of submodule processor
  wire [324 : 0] processor$write_back_data;
  wire [320 : 0] processor$response_from_memory_to_dcache_resp;
  wire [197 : 0] processor$response_from_memory_to_icache_resp;
  wire [133 : 0] processor$request_to_memory_from_dcache;
  wire [74 : 0] processor$request_to_memory_from_icache;
  wire processor$EN_request_to_memory_from_dcache,
       processor$EN_request_to_memory_from_icache,
       processor$EN_response_from_memory_to_dcache,
       processor$EN_response_from_memory_to_icache,
       processor$EN_write_back_data,
       processor$RDY_request_to_memory_from_dcache,
       processor$RDY_request_to_memory_from_icache,
       processor$RDY_response_from_memory_to_dcache,
       processor$RDY_response_from_memory_to_icache,
       processor$RDY_write_back_data,
       processor$flush_dcache,
       processor$flush_icache;

  // rule scheduling signals
  wire CAN_FIRE_RL_rg_cnt__dreg_update,
       CAN_FIRE_RL_rg_cnt_d__dreg_update,
       CAN_FIRE_RL_rl_dcache_to_memory,
       CAN_FIRE_RL_rl_icache_to_memory,
       CAN_FIRE_RL_rl_memory_to_dcache,
       CAN_FIRE_RL_rl_memory_to_icache,
       CAN_FIRE_RL_rl_read_write_back_data,
       CAN_FIRE_RL_rl_update_mem_with_write_back,
       WILL_FIRE_RL_rg_cnt__dreg_update,
       WILL_FIRE_RL_rg_cnt_d__dreg_update,
       WILL_FIRE_RL_rl_dcache_to_memory,
       WILL_FIRE_RL_rl_icache_to_memory,
       WILL_FIRE_RL_rl_memory_to_dcache,
       WILL_FIRE_RL_rl_memory_to_icache,
       WILL_FIRE_RL_rl_read_write_back_data,
       WILL_FIRE_RL_rl_update_mem_with_write_back;

  // inputs to muxes for submodule ports
  wire [255 : 0] MUX_rg_write_back_data$write_1__VAL_1;
  wire [63 : 0] MUX_rg_write_back_address$write_1__VAL_1,
		MUX_rg_write_back_address$write_1__VAL_2;
  wire [2 : 0] MUX_rg_write_back_loop$write_1__VAL_1;
  wire MUX_data_memory$upd_1__SEL_1;

  // remaining internal signals
  reg [63 : 0] v__h2971;
  wire [255 : 0] v__h2144;
  wire [63 : 0] dcache_address__h2066, icache_address__h1528;
  wire [2 : 0] x__h2932;
  wire _0_CONCAT_processor_request_to_memory_from_dcac_ETC___d53;

  // submodule data_memory
  RegFileLoad #(.file("rtl_mem_init.txt"),
		.addr_width(32'd64),
		.data_width(32'd64),
		.lo(64'd0),
		.hi(64'd1048575),
		.binary(1'd0)) data_memory(.CLK(CLK),
					   .ADDR_1(data_memory$ADDR_1),
					   .ADDR_2(data_memory$ADDR_2),
					   .ADDR_3(data_memory$ADDR_3),
					   .ADDR_4(data_memory$ADDR_4),
					   .ADDR_5(data_memory$ADDR_5),
					   .ADDR_IN(data_memory$ADDR_IN),
					   .D_IN(data_memory$D_IN),
					   .WE(data_memory$WE),
					   .D_OUT_1(data_memory$D_OUT_1),
					   .D_OUT_2(data_memory$D_OUT_2),
					   .D_OUT_3(data_memory$D_OUT_3),
					   .D_OUT_4(data_memory$D_OUT_4),
					   .D_OUT_5());

  // submodule instr_memory
  RegFileLoad #(.file("input.hex"),
		.addr_width(32'd64),
		.data_width(32'd32),
		.lo(64'd0),
		.hi(64'd20200),
		.binary(1'd0)) instr_memory(.CLK(CLK),
					    .ADDR_1(instr_memory$ADDR_1),
					    .ADDR_2(instr_memory$ADDR_2),
					    .ADDR_3(instr_memory$ADDR_3),
					    .ADDR_4(instr_memory$ADDR_4),
					    .ADDR_5(instr_memory$ADDR_5),
					    .ADDR_IN(instr_memory$ADDR_IN),
					    .D_IN(instr_memory$D_IN),
					    .WE(instr_memory$WE),
					    .D_OUT_1(instr_memory$D_OUT_1),
					    .D_OUT_2(instr_memory$D_OUT_2),
					    .D_OUT_3(instr_memory$D_OUT_3),
					    .D_OUT_4(instr_memory$D_OUT_4),
					    .D_OUT_5());

  // submodule processor
  mkProcessor processor(.CLK(CLK),
			.RST_N(RST_N),
			.response_from_memory_to_dcache_resp(processor$response_from_memory_to_dcache_resp),
			.response_from_memory_to_icache_resp(processor$response_from_memory_to_icache_resp),
			.EN_request_to_memory_from_icache(processor$EN_request_to_memory_from_icache),
			.EN_response_from_memory_to_icache(processor$EN_response_from_memory_to_icache),
			.EN_request_to_memory_from_dcache(processor$EN_request_to_memory_from_dcache),
			.EN_response_from_memory_to_dcache(processor$EN_response_from_memory_to_dcache),
			.EN_write_back_data(processor$EN_write_back_data),
			.request_to_memory_from_icache(processor$request_to_memory_from_icache),
			.RDY_request_to_memory_from_icache(processor$RDY_request_to_memory_from_icache),
			.RDY_response_from_memory_to_icache(processor$RDY_response_from_memory_to_icache),
			.request_to_memory_from_dcache(processor$request_to_memory_from_dcache),
			.RDY_request_to_memory_from_dcache(processor$RDY_request_to_memory_from_dcache),
			.RDY_response_from_memory_to_dcache(processor$RDY_response_from_memory_to_dcache),
			.flush_icache(processor$flush_icache),
			.RDY_flush_icache(),
			.flush_dcache(processor$flush_dcache),
			.RDY_flush_dcache(),
			.write_back_data(processor$write_back_data),
			.RDY_write_back_data(processor$RDY_write_back_data));

  // rule RL_rl_memory_to_icache
  assign CAN_FIRE_RL_rl_memory_to_icache =
	     processor$RDY_response_from_memory_to_icache && rg_cnt &&
	     !processor$flush_dcache ;
  assign WILL_FIRE_RL_rl_memory_to_icache = CAN_FIRE_RL_rl_memory_to_icache ;

  // rule RL_rl_memory_to_dcache
  assign CAN_FIRE_RL_rl_memory_to_dcache =
	     processor$RDY_response_from_memory_to_dcache && rg_cnt_d &&
	     !processor$flush_dcache ;
  assign WILL_FIRE_RL_rl_memory_to_dcache = CAN_FIRE_RL_rl_memory_to_dcache ;

  // rule RL_rl_icache_to_memory
  assign CAN_FIRE_RL_rl_icache_to_memory =
	     processor$RDY_request_to_memory_from_icache && !rg_cnt &&
	     !processor$flush_icache ;
  assign WILL_FIRE_RL_rl_icache_to_memory = CAN_FIRE_RL_rl_icache_to_memory ;

  // rule RL_rl_dcache_to_memory
  assign CAN_FIRE_RL_rl_dcache_to_memory =
	     processor$RDY_request_to_memory_from_dcache && !rg_cnt_d &&
	     !processor$flush_dcache ;
  assign WILL_FIRE_RL_rl_dcache_to_memory = CAN_FIRE_RL_rl_dcache_to_memory ;

  // rule RL_rl_read_write_back_data
  assign CAN_FIRE_RL_rl_read_write_back_data =
	     processor$RDY_write_back_data && rg_write_back_loop == 3'd0 ;
  assign WILL_FIRE_RL_rl_read_write_back_data =
	     CAN_FIRE_RL_rl_read_write_back_data &&
	     !WILL_FIRE_RL_rl_dcache_to_memory ;

  // rule RL_rl_update_mem_with_write_back
  assign CAN_FIRE_RL_rl_update_mem_with_write_back =
	     rg_write_back_loop != 3'd0 ;
  assign WILL_FIRE_RL_rl_update_mem_with_write_back =
	     CAN_FIRE_RL_rl_update_mem_with_write_back &&
	     !WILL_FIRE_RL_rl_dcache_to_memory ;

  // rule RL_rg_cnt__dreg_update
  assign CAN_FIRE_RL_rg_cnt__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_rg_cnt__dreg_update = 1'd1 ;

  // rule RL_rg_cnt_d__dreg_update
  assign CAN_FIRE_RL_rg_cnt_d__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_rg_cnt_d__dreg_update = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_data_memory$upd_1__SEL_1 =
	     WILL_FIRE_RL_rl_dcache_to_memory &&
	     processor$request_to_memory_from_dcache[64] ;
  assign MUX_rg_write_back_address$write_1__VAL_1 =
	     { 3'd0, processor$write_back_data[324:264] } ;
  assign MUX_rg_write_back_address$write_1__VAL_2 =
	     rg_write_back_address + 64'd1 ;
  assign MUX_rg_write_back_data$write_1__VAL_1 =
	     { 64'd0, rg_write_back_data[255:64] } ;
  assign MUX_rg_write_back_loop$write_1__VAL_1 =
	     (rg_write_back_loop == 3'd4) ? 3'd0 : x__h2932 ;

  // inlined wires
  assign rg_cnt_1$wget = rg_cnt + 1'd1 ;
  assign rg_cnt_d_1$wget = rg_cnt_d + 1'd1 ;

  // register rg_block
  assign rg_block$D_IN =
	     { instr_memory$D_OUT_2,
	       instr_memory$D_OUT_3,
	       instr_memory$D_OUT_1,
	       instr_memory$D_OUT_4 } ;
  assign rg_block$EN = CAN_FIRE_RL_rl_icache_to_memory ;

  // register rg_cnt
  assign rg_cnt$D_IN = CAN_FIRE_RL_rl_icache_to_memory && rg_cnt_1$wget ;
  assign rg_cnt$EN = 1'd1 ;

  // register rg_cnt_d
  assign rg_cnt_d$D_IN = CAN_FIRE_RL_rl_dcache_to_memory && rg_cnt_d_1$wget ;
  assign rg_cnt_d$EN = 1'd1 ;

  // register rg_dblock
  assign rg_dblock$D_IN =
	     _0_CONCAT_processor_request_to_memory_from_dcac_ETC___d53 ?
	       v__h2144 :
	       256'd0 ;
  assign rg_dblock$EN =
	     WILL_FIRE_RL_rl_dcache_to_memory &&
	     !processor$request_to_memory_from_dcache[64] ;

  // register rg_in_address
  assign rg_in_address$D_IN = processor$request_to_memory_from_icache[74:11] ;
  assign rg_in_address$EN = CAN_FIRE_RL_rl_icache_to_memory ;

  // register rg_in_daddress
  assign rg_in_daddress$D_IN =
	     processor$request_to_memory_from_dcache[133:70] ;
  assign rg_in_daddress$EN = CAN_FIRE_RL_rl_dcache_to_memory ;

  // register rg_token
  assign rg_token$D_IN = processor$request_to_memory_from_icache[4:0] ;
  assign rg_token$EN = CAN_FIRE_RL_rl_icache_to_memory ;

  // register rg_write_back_address
  assign rg_write_back_address$D_IN =
	     WILL_FIRE_RL_rl_read_write_back_data ?
	       MUX_rg_write_back_address$write_1__VAL_1 :
	       MUX_rg_write_back_address$write_1__VAL_2 ;
  assign rg_write_back_address$EN =
	     WILL_FIRE_RL_rl_read_write_back_data ||
	     WILL_FIRE_RL_rl_update_mem_with_write_back ;

  // register rg_write_back_data
  assign rg_write_back_data$D_IN =
	     WILL_FIRE_RL_rl_update_mem_with_write_back ?
	       MUX_rg_write_back_data$write_1__VAL_1 :
	       processor$write_back_data[260:5] ;
  assign rg_write_back_data$EN =
	     WILL_FIRE_RL_rl_update_mem_with_write_back ||
	     WILL_FIRE_RL_rl_read_write_back_data ;

  // register rg_write_back_loop
  assign rg_write_back_loop$D_IN =
	     WILL_FIRE_RL_rl_update_mem_with_write_back ?
	       MUX_rg_write_back_loop$write_1__VAL_1 :
	       3'd1 ;
  assign rg_write_back_loop$EN =
	     WILL_FIRE_RL_rl_update_mem_with_write_back ||
	     WILL_FIRE_RL_rl_read_write_back_data ;

  // submodule data_memory
  assign data_memory$ADDR_1 = dcache_address__h2066 + 64'd1 ;
  assign data_memory$ADDR_2 = dcache_address__h2066 + 64'd3 ;
  assign data_memory$ADDR_3 = dcache_address__h2066 + 64'd2 ;
  assign data_memory$ADDR_4 = dcache_address__h2066 ;
  assign data_memory$ADDR_5 = 64'h0 ;
  assign data_memory$ADDR_IN =
	     MUX_data_memory$upd_1__SEL_1 ?
	       dcache_address__h2066 :
	       rg_write_back_address ;
  assign data_memory$D_IN =
	     MUX_data_memory$upd_1__SEL_1 ?
	       processor$request_to_memory_from_dcache[63:0] :
	       rg_write_back_data[63:0] ;
  assign data_memory$WE =
	     WILL_FIRE_RL_rl_dcache_to_memory &&
	     processor$request_to_memory_from_dcache[64] ||
	     WILL_FIRE_RL_rl_update_mem_with_write_back ;

  // submodule instr_memory
  assign instr_memory$ADDR_1 = icache_address__h1528 + 64'd1 ;
  assign instr_memory$ADDR_2 = icache_address__h1528 + 64'd3 ;
  assign instr_memory$ADDR_3 = icache_address__h1528 + 64'd2 ;
  assign instr_memory$ADDR_4 = icache_address__h1528 ;
  assign instr_memory$ADDR_5 = 64'h0 ;
  assign instr_memory$ADDR_IN = 64'h0 ;
  assign instr_memory$D_IN = 32'h0 ;
  assign instr_memory$WE = 1'b0 ;

  // submodule processor
  assign processor$response_from_memory_to_dcache_resp =
	     { rg_dblock, 1'd0, rg_in_daddress } ;
  assign processor$response_from_memory_to_icache_resp =
	     { rg_block, 1'd0, rg_in_address, rg_token } ;
  assign processor$EN_request_to_memory_from_icache =
	     CAN_FIRE_RL_rl_icache_to_memory ;
  assign processor$EN_response_from_memory_to_icache =
	     CAN_FIRE_RL_rl_memory_to_icache ;
  assign processor$EN_request_to_memory_from_dcache =
	     CAN_FIRE_RL_rl_dcache_to_memory ;
  assign processor$EN_response_from_memory_to_dcache =
	     CAN_FIRE_RL_rl_memory_to_dcache ;
  assign processor$EN_write_back_data = WILL_FIRE_RL_rl_read_write_back_data ;

  // remaining internal signals
  assign _0_CONCAT_processor_request_to_memory_from_dcac_ETC___d53 =
	     dcache_address__h2066 <= 64'd1048576 ;
  assign dcache_address__h2066 =
	     { 3'd0, processor$request_to_memory_from_dcache[133:73] } ;
  assign icache_address__h1528 =
	     { 2'd0, processor$request_to_memory_from_icache[74:13] } ;
  assign v__h2144 =
	     { data_memory$D_OUT_2,
	       data_memory$D_OUT_3,
	       data_memory$D_OUT_1,
	       data_memory$D_OUT_4 } ;
  assign x__h2932 = rg_write_back_loop + 3'd1 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_block <= `BSV_ASSIGNMENT_DELAY 128'd0;
	rg_cnt <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_cnt_d <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_dblock <= `BSV_ASSIGNMENT_DELAY 256'd0;
	rg_in_address <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_in_daddress <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_token <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_write_back_address <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_write_back_data <= `BSV_ASSIGNMENT_DELAY 256'd0;
	rg_write_back_loop <= `BSV_ASSIGNMENT_DELAY 3'd0;
      end
    else
      begin
        if (rg_block$EN) rg_block <= `BSV_ASSIGNMENT_DELAY rg_block$D_IN;
	if (rg_cnt$EN) rg_cnt <= `BSV_ASSIGNMENT_DELAY rg_cnt$D_IN;
	if (rg_cnt_d$EN) rg_cnt_d <= `BSV_ASSIGNMENT_DELAY rg_cnt_d$D_IN;
	if (rg_dblock$EN) rg_dblock <= `BSV_ASSIGNMENT_DELAY rg_dblock$D_IN;
	if (rg_in_address$EN)
	  rg_in_address <= `BSV_ASSIGNMENT_DELAY rg_in_address$D_IN;
	if (rg_in_daddress$EN)
	  rg_in_daddress <= `BSV_ASSIGNMENT_DELAY rg_in_daddress$D_IN;
	if (rg_token$EN) rg_token <= `BSV_ASSIGNMENT_DELAY rg_token$D_IN;
	if (rg_write_back_address$EN)
	  rg_write_back_address <= `BSV_ASSIGNMENT_DELAY
	      rg_write_back_address$D_IN;
	if (rg_write_back_data$EN)
	  rg_write_back_data <= `BSV_ASSIGNMENT_DELAY rg_write_back_data$D_IN;
	if (rg_write_back_loop$EN)
	  rg_write_back_loop <= `BSV_ASSIGNMENT_DELAY rg_write_back_loop$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_block = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_cnt = 1'h0;
    rg_cnt_d = 1'h0;
    rg_dblock =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_in_address = 64'hAAAAAAAAAAAAAAAA;
    rg_in_daddress = 64'hAAAAAAAAAAAAAAAA;
    rg_token = 5'h0A;
    rg_write_back_address = 64'hAAAAAAAAAAAAAAAA;
    rg_write_back_data =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_write_back_loop = 3'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_memory_to_icache)
	$display("response_memory data_block obtained with_data %h Address :%h token : %d",
		 rg_block,
		 rg_in_address,
		 rg_token);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_memory_to_dcache)
	$display("response_memory_dcache data_block obtained with_data %h Address :%h",
		 rg_dblock,
		 rg_in_daddress);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_icache_to_memory)
	$display("icache_request_to_memory data_block requested original address :%d with_shifted_address %d token :%d",
		 processor$request_to_memory_from_icache[74:11],
		 icache_address__h1528,
		 processor$request_to_memory_from_icache[4:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_dcache_to_memory &&
	  !processor$request_to_memory_from_dcache[64] &&
	  _0_CONCAT_processor_request_to_memory_from_dcac_ETC___d53)
	$display("dcache_request_to_memory data_block requested original address :%h with_shifted_address %h unpack_version %h",
		 processor$request_to_memory_from_dcache[133:70],
		 dcache_address__h2066,
		 dcache_address__h2066);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_write_back_data)
	$display("Write Back Data reached memory and updated");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_update_mem_with_write_back)
	begin
	  v__h2971 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_update_mem_with_write_back)
	$display("TB: Writing into memory for address: %h with data :%h:",
		 rg_write_back_address,
		 rg_write_back_data[63:0],
		 v__h2971);
  end
  // synopsys translate_on
endmodule  // mkTb_Processor

