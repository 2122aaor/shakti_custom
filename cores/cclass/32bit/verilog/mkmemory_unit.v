//
// Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
//
// On Tue Mar 28 10:03:00 IST 2017
//
//
// Ports:
// Name                         I/O  size props
// response_from_memory_write     O     1 const
// RDY_response_from_memory_write  O     1
// response_from_memory_read      O     1
// RDY_response_from_memory_read  O     1
// request_to_memory_read         O   297
// RDY_request_to_memory_read     O     1
// request_to_memory_write        O   297
// RDY_request_to_memory_write    O     1
// communicate_with_core          O    70
// RDY_communicate_with_core      O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// response_from_memory_write_mem_data  I    66 reg
// response_from_memory_read_mem_data  I    66 reg
// communicate_with_core_execdata  I    74
// EN_response_from_memory_write  I     1
// EN_response_from_memory_read   I     1
// EN_request_to_memory_read      I     1
// EN_request_to_memory_write     I     1
// EN_communicate_with_core       I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkmemory_unit(CLK,
		     RST_N,

		     response_from_memory_write_mem_data,
		     EN_response_from_memory_write,
		     response_from_memory_write,
		     RDY_response_from_memory_write,

		     response_from_memory_read_mem_data,
		     EN_response_from_memory_read,
		     response_from_memory_read,
		     RDY_response_from_memory_read,

		     EN_request_to_memory_read,
		     request_to_memory_read,
		     RDY_request_to_memory_read,

		     EN_request_to_memory_write,
		     request_to_memory_write,
		     RDY_request_to_memory_write,

		     communicate_with_core_execdata,
		     EN_communicate_with_core,
		     communicate_with_core,
		     RDY_communicate_with_core);
  input  CLK;
  input  RST_N;

  // actionvalue method response_from_memory_write
  input  [65 : 0] response_from_memory_write_mem_data;
  input  EN_response_from_memory_write;
  output response_from_memory_write;
  output RDY_response_from_memory_write;

  // actionvalue method response_from_memory_read
  input  [65 : 0] response_from_memory_read_mem_data;
  input  EN_response_from_memory_read;
  output response_from_memory_read;
  output RDY_response_from_memory_read;

  // actionvalue method request_to_memory_read
  input  EN_request_to_memory_read;
  output [296 : 0] request_to_memory_read;
  output RDY_request_to_memory_read;

  // actionvalue method request_to_memory_write
  input  EN_request_to_memory_write;
  output [296 : 0] request_to_memory_write;
  output RDY_request_to_memory_write;

  // actionvalue method communicate_with_core
  input  [73 : 0] communicate_with_core_execdata;
  input  EN_communicate_with_core;
  output [69 : 0] communicate_with_core;
  output RDY_communicate_with_core;

  // signals for module outputs
  wire [296 : 0] request_to_memory_read, request_to_memory_write;
  wire [69 : 0] communicate_with_core;
  wire RDY_communicate_with_core,
       RDY_request_to_memory_read,
       RDY_request_to_memory_write,
       RDY_response_from_memory_read,
       RDY_response_from_memory_write,
       response_from_memory_read,
       response_from_memory_write;

  // inlined wires
  wire [72 : 0] wr_req_to_cache$wget;
  wire [69 : 0] wr_communicate_to_core$wget;
  wire wr_req_to_cache$whas;

  // register rg_execdata
  reg [73 : 0] rg_execdata;
  wire [73 : 0] rg_execdata$D_IN;
  wire rg_execdata$EN;

  // register rg_state_wait_for_response
  reg rg_state_wait_for_response;
  wire rg_state_wait_for_response$D_IN, rg_state_wait_for_response$EN;

  // ports of submodule dcache
  wire [296 : 0] dcache$request_to_memory_read,
		 dcache$request_to_memory_write;
  wire [72 : 0] dcache$request_from_cpu_req;
  wire [68 : 0] dcache$response_to_cpu;
  wire [65 : 0] dcache$response_from_memory_read_resp,
		dcache$response_from_memory_write_resp;
  wire dcache$EN_clear_all,
       dcache$EN_request_from_cpu,
       dcache$EN_request_to_memory_read,
       dcache$EN_request_to_memory_write,
       dcache$EN_response_from_memory_read,
       dcache$EN_response_from_memory_write,
       dcache$RDY_request_from_cpu,
       dcache$RDY_request_to_memory_read,
       dcache$RDY_request_to_memory_write,
       dcache$RDY_response_from_memory_read,
       dcache$RDY_response_from_memory_write,
       dcache$RDY_response_to_cpu,
       dcache$response_from_memory_read,
       dcache$response_from_memory_write;

  // rule scheduling signals
  wire CAN_FIRE_RL_read_response_from_cache,
       CAN_FIRE_RL_send_request_to_cache,
       CAN_FIRE_communicate_with_core,
       CAN_FIRE_request_to_memory_read,
       CAN_FIRE_request_to_memory_write,
       CAN_FIRE_response_from_memory_read,
       CAN_FIRE_response_from_memory_write,
       WILL_FIRE_RL_read_response_from_cache,
       WILL_FIRE_RL_send_request_to_cache,
       WILL_FIRE_communicate_with_core,
       WILL_FIRE_request_to_memory_read,
       WILL_FIRE_request_to_memory_write,
       WILL_FIRE_response_from_memory_read,
       WILL_FIRE_response_from_memory_write;

  // remaining internal signals
  reg [63 : 0] v__h1763, v__h407;
  reg [31 : 0] CASE_rg_execdata_BITS_43_TO_42_0_0_CONCAT_dcac_ETC__q1,
	       CASE_rg_execdata_BITS_43_TO_42_0_0_CONCAT_dcac_ETC__q2,
	       CASE_rg_execdata_BITS_43_TO_42_0_SEXT_dcachere_ETC__q11,
	       CASE_rg_execdata_BITS_43_TO_42_0_SEXT_dcachere_ETC__q8,
	       CASE_rg_execdata_BITS_9_TO_8_0_CASE_rg_execdat_ETC__q12,
	       CASE_rg_execdata_BITS_9_TO_8_0_CASE_rg_execdat_ETC__q3;
  reg [3 : 0] CASE_wr_communicate_to_corewget_BITS_35_TO_32_ETC__q13;
  wire [31 : 0] x__h482;
  wire [15 : 0] dcacheresponse_to_cpu_BITS_51_TO_36__q9,
		dcacheresponse_to_cpu_BITS_67_TO_52__q10;
  wire [7 : 0] dcacheresponse_to_cpu_BITS_43_TO_36__q4,
	       dcacheresponse_to_cpu_BITS_51_TO_44__q5,
	       dcacheresponse_to_cpu_BITS_59_TO_52__q6,
	       dcacheresponse_to_cpu_BITS_67_TO_60__q7;

  // actionvalue method response_from_memory_write
  assign response_from_memory_write = dcache$response_from_memory_write ;
  assign RDY_response_from_memory_write =
	     dcache$RDY_response_from_memory_write ;
  assign CAN_FIRE_response_from_memory_write =
	     dcache$RDY_response_from_memory_write ;
  assign WILL_FIRE_response_from_memory_write =
	     EN_response_from_memory_write ;

  // actionvalue method response_from_memory_read
  assign response_from_memory_read = dcache$response_from_memory_read ;
  assign RDY_response_from_memory_read =
	     dcache$RDY_response_from_memory_read ;
  assign CAN_FIRE_response_from_memory_read =
	     dcache$RDY_response_from_memory_read ;
  assign WILL_FIRE_response_from_memory_read = EN_response_from_memory_read ;

  // actionvalue method request_to_memory_read
  assign request_to_memory_read = dcache$request_to_memory_read ;
  assign RDY_request_to_memory_read = dcache$RDY_request_to_memory_read ;
  assign CAN_FIRE_request_to_memory_read = dcache$RDY_request_to_memory_read ;
  assign WILL_FIRE_request_to_memory_read = EN_request_to_memory_read ;

  // actionvalue method request_to_memory_write
  assign request_to_memory_write = dcache$request_to_memory_write ;
  assign RDY_request_to_memory_write = dcache$RDY_request_to_memory_write ;
  assign CAN_FIRE_request_to_memory_write =
	     dcache$RDY_request_to_memory_write ;
  assign WILL_FIRE_request_to_memory_write = EN_request_to_memory_write ;

  // actionvalue method communicate_with_core
  assign communicate_with_core =
	     { CAN_FIRE_RL_read_response_from_cache &&
	       wr_communicate_to_core$wget[69],
	       wr_communicate_to_core$wget[68:36],
	       CASE_wr_communicate_to_corewget_BITS_35_TO_32_ETC__q13,
	       wr_communicate_to_core$wget[31:0] } ;
  assign RDY_communicate_with_core = 1'd1 ;
  assign CAN_FIRE_communicate_with_core = 1'd1 ;
  assign WILL_FIRE_communicate_with_core = EN_communicate_with_core ;

  // submodule dcache
  mkdcache dcache(.CLK(CLK),
		  .RST_N(RST_N),
		  .request_from_cpu_req(dcache$request_from_cpu_req),
		  .response_from_memory_read_resp(dcache$response_from_memory_read_resp),
		  .response_from_memory_write_resp(dcache$response_from_memory_write_resp),
		  .EN_request_from_cpu(dcache$EN_request_from_cpu),
		  .EN_request_to_memory_read(dcache$EN_request_to_memory_read),
		  .EN_request_to_memory_write(dcache$EN_request_to_memory_write),
		  .EN_response_from_memory_read(dcache$EN_response_from_memory_read),
		  .EN_response_from_memory_write(dcache$EN_response_from_memory_write),
		  .EN_clear_all(dcache$EN_clear_all),
		  .RDY_request_from_cpu(dcache$RDY_request_from_cpu),
		  .response_to_cpu(dcache$response_to_cpu),
		  .RDY_response_to_cpu(dcache$RDY_response_to_cpu),
		  .request_to_memory_read(dcache$request_to_memory_read),
		  .RDY_request_to_memory_read(dcache$RDY_request_to_memory_read),
		  .request_to_memory_write(dcache$request_to_memory_write),
		  .RDY_request_to_memory_write(dcache$RDY_request_to_memory_write),
		  .response_from_memory_read(dcache$response_from_memory_read),
		  .RDY_response_from_memory_read(dcache$RDY_response_from_memory_read),
		  .response_from_memory_write(dcache$response_from_memory_write),
		  .RDY_response_from_memory_write(dcache$RDY_response_from_memory_write),
		  .RDY_clear_all());

  // rule RL_read_response_from_cache
  assign CAN_FIRE_RL_read_response_from_cache =
	     dcache$RDY_response_to_cpu && dcache$response_to_cpu[68] ;
  assign WILL_FIRE_RL_read_response_from_cache =
	     CAN_FIRE_RL_read_response_from_cache ;

  // rule RL_send_request_to_cache
  assign CAN_FIRE_RL_send_request_to_cache =
	     dcache$RDY_request_from_cpu && wr_req_to_cache$whas ;
  assign WILL_FIRE_RL_send_request_to_cache =
	     CAN_FIRE_RL_send_request_to_cache ;

  // inlined wires
  assign wr_communicate_to_core$wget =
	     { 1'd1,
	       x__h482,
	       dcache$response_to_cpu[34] || dcache$response_to_cpu[35],
	       (dcache$response_to_cpu[34] &&
		dcache$response_to_cpu[1:0] == 2'd0) ?
		 4'd4 :
		 ((!dcache$response_to_cpu[34] &&
		   dcache$response_to_cpu[1:0] == 2'd0) ?
		    4'd5 :
		    ((dcache$response_to_cpu[34] &&
		      dcache$response_to_cpu[1:0] != 2'd0) ?
		       4'd6 :
		       ((!dcache$response_to_cpu[34] &&
			 dcache$response_to_cpu[1:0] != 2'd0) ?
			  4'd7 :
			  4'd11))),
	       rg_execdata[73:42] } ;
  assign wr_req_to_cache$wget =
	     { communicate_with_core_execdata[73:42],
	       communicate_with_core_execdata[6:5],
	       communicate_with_core_execdata[41:8],
	       communicate_with_core_execdata[4:0] } ;
  assign wr_req_to_cache$whas =
	     EN_communicate_with_core &&
	     (!CAN_FIRE_RL_read_response_from_cache ||
	      !wr_communicate_to_core$wget[69]) ;

  // register rg_execdata
  assign rg_execdata$D_IN = communicate_with_core_execdata ;
  assign rg_execdata$EN = wr_req_to_cache$whas ;

  // register rg_state_wait_for_response
  assign rg_state_wait_for_response$D_IN = 1'b0 ;
  assign rg_state_wait_for_response$EN = 1'b0 ;

  // submodule dcache
  assign dcache$request_from_cpu_req = wr_req_to_cache$wget ;
  assign dcache$response_from_memory_read_resp =
	     response_from_memory_read_mem_data ;
  assign dcache$response_from_memory_write_resp =
	     response_from_memory_write_mem_data ;
  assign dcache$EN_request_from_cpu = CAN_FIRE_RL_send_request_to_cache ;
  assign dcache$EN_request_to_memory_read = EN_request_to_memory_read ;
  assign dcache$EN_request_to_memory_write = EN_request_to_memory_write ;
  assign dcache$EN_response_from_memory_read = EN_response_from_memory_read ;
  assign dcache$EN_response_from_memory_write =
	     EN_response_from_memory_write ;
  assign dcache$EN_clear_all = 1'b0 ;

  // remaining internal signals
  assign dcacheresponse_to_cpu_BITS_43_TO_36__q4 =
	     dcache$response_to_cpu[43:36] ;
  assign dcacheresponse_to_cpu_BITS_51_TO_36__q9 =
	     dcache$response_to_cpu[51:36] ;
  assign dcacheresponse_to_cpu_BITS_51_TO_44__q5 =
	     dcache$response_to_cpu[51:44] ;
  assign dcacheresponse_to_cpu_BITS_59_TO_52__q6 =
	     dcache$response_to_cpu[59:52] ;
  assign dcacheresponse_to_cpu_BITS_67_TO_52__q10 =
	     dcache$response_to_cpu[67:52] ;
  assign dcacheresponse_to_cpu_BITS_67_TO_60__q7 =
	     dcache$response_to_cpu[67:60] ;
  assign x__h482 =
	     (dcache$response_to_cpu[1:0] == 2'd0) ?
	       (rg_execdata[7] ?
		  CASE_rg_execdata_BITS_9_TO_8_0_CASE_rg_execdat_ETC__q3 :
		  CASE_rg_execdata_BITS_9_TO_8_0_CASE_rg_execdat_ETC__q12) :
	       32'd0 ;
  always@(rg_execdata or dcache$response_to_cpu)
  begin
    case (rg_execdata[43:42])
      2'd0:
	  CASE_rg_execdata_BITS_43_TO_42_0_0_CONCAT_dcac_ETC__q1 =
	      { 24'd0, dcache$response_to_cpu[43:36] };
      2'd1:
	  CASE_rg_execdata_BITS_43_TO_42_0_0_CONCAT_dcac_ETC__q1 =
	      { 24'd0, dcache$response_to_cpu[51:44] };
      2'd2:
	  CASE_rg_execdata_BITS_43_TO_42_0_0_CONCAT_dcac_ETC__q1 =
	      { 24'd0, dcache$response_to_cpu[59:52] };
      2'd3:
	  CASE_rg_execdata_BITS_43_TO_42_0_0_CONCAT_dcac_ETC__q1 =
	      { 24'd0, dcache$response_to_cpu[67:60] };
    endcase
  end
  always@(rg_execdata or dcache$response_to_cpu)
  begin
    case (rg_execdata[43:42])
      2'd0:
	  CASE_rg_execdata_BITS_43_TO_42_0_0_CONCAT_dcac_ETC__q2 =
	      { 16'd0, dcache$response_to_cpu[51:36] };
      2'd2:
	  CASE_rg_execdata_BITS_43_TO_42_0_0_CONCAT_dcac_ETC__q2 =
	      { 16'd0, dcache$response_to_cpu[67:52] };
      default: CASE_rg_execdata_BITS_43_TO_42_0_0_CONCAT_dcac_ETC__q2 = 32'd0;
    endcase
  end
  always@(rg_execdata or
	  CASE_rg_execdata_BITS_43_TO_42_0_0_CONCAT_dcac_ETC__q1 or
	  CASE_rg_execdata_BITS_43_TO_42_0_0_CONCAT_dcac_ETC__q2 or
	  dcache$response_to_cpu)
  begin
    case (rg_execdata[9:8])
      2'd0:
	  CASE_rg_execdata_BITS_9_TO_8_0_CASE_rg_execdat_ETC__q3 =
	      CASE_rg_execdata_BITS_43_TO_42_0_0_CONCAT_dcac_ETC__q1;
      2'd1:
	  CASE_rg_execdata_BITS_9_TO_8_0_CASE_rg_execdat_ETC__q3 =
	      CASE_rg_execdata_BITS_43_TO_42_0_0_CONCAT_dcac_ETC__q2;
      2'd2:
	  CASE_rg_execdata_BITS_9_TO_8_0_CASE_rg_execdat_ETC__q3 =
	      dcache$response_to_cpu[67:36];
      2'd3: CASE_rg_execdata_BITS_9_TO_8_0_CASE_rg_execdat_ETC__q3 = 32'd0;
    endcase
  end
  always@(rg_execdata or
	  dcacheresponse_to_cpu_BITS_43_TO_36__q4 or
	  dcacheresponse_to_cpu_BITS_51_TO_44__q5 or
	  dcacheresponse_to_cpu_BITS_59_TO_52__q6 or
	  dcacheresponse_to_cpu_BITS_67_TO_60__q7)
  begin
    case (rg_execdata[43:42])
      2'd0:
	  CASE_rg_execdata_BITS_43_TO_42_0_SEXT_dcachere_ETC__q8 =
	      { {24{dcacheresponse_to_cpu_BITS_43_TO_36__q4[7]}},
		dcacheresponse_to_cpu_BITS_43_TO_36__q4 };
      2'd1:
	  CASE_rg_execdata_BITS_43_TO_42_0_SEXT_dcachere_ETC__q8 =
	      { {24{dcacheresponse_to_cpu_BITS_51_TO_44__q5[7]}},
		dcacheresponse_to_cpu_BITS_51_TO_44__q5 };
      2'd2:
	  CASE_rg_execdata_BITS_43_TO_42_0_SEXT_dcachere_ETC__q8 =
	      { {24{dcacheresponse_to_cpu_BITS_59_TO_52__q6[7]}},
		dcacheresponse_to_cpu_BITS_59_TO_52__q6 };
      2'd3:
	  CASE_rg_execdata_BITS_43_TO_42_0_SEXT_dcachere_ETC__q8 =
	      { {24{dcacheresponse_to_cpu_BITS_67_TO_60__q7[7]}},
		dcacheresponse_to_cpu_BITS_67_TO_60__q7 };
    endcase
  end
  always@(rg_execdata or
	  dcacheresponse_to_cpu_BITS_51_TO_36__q9 or
	  dcacheresponse_to_cpu_BITS_67_TO_52__q10)
  begin
    case (rg_execdata[43:42])
      2'd0:
	  CASE_rg_execdata_BITS_43_TO_42_0_SEXT_dcachere_ETC__q11 =
	      { {16{dcacheresponse_to_cpu_BITS_51_TO_36__q9[15]}},
		dcacheresponse_to_cpu_BITS_51_TO_36__q9 };
      2'd2:
	  CASE_rg_execdata_BITS_43_TO_42_0_SEXT_dcachere_ETC__q11 =
	      { {16{dcacheresponse_to_cpu_BITS_67_TO_52__q10[15]}},
		dcacheresponse_to_cpu_BITS_67_TO_52__q10 };
      default: CASE_rg_execdata_BITS_43_TO_42_0_SEXT_dcachere_ETC__q11 =
		   32'd0;
    endcase
  end
  always@(rg_execdata or
	  CASE_rg_execdata_BITS_43_TO_42_0_SEXT_dcachere_ETC__q8 or
	  CASE_rg_execdata_BITS_43_TO_42_0_SEXT_dcachere_ETC__q11 or
	  dcache$response_to_cpu)
  begin
    case (rg_execdata[9:8])
      2'd0:
	  CASE_rg_execdata_BITS_9_TO_8_0_CASE_rg_execdat_ETC__q12 =
	      CASE_rg_execdata_BITS_43_TO_42_0_SEXT_dcachere_ETC__q8;
      2'd1:
	  CASE_rg_execdata_BITS_9_TO_8_0_CASE_rg_execdat_ETC__q12 =
	      CASE_rg_execdata_BITS_43_TO_42_0_SEXT_dcachere_ETC__q11;
      2'd2:
	  CASE_rg_execdata_BITS_9_TO_8_0_CASE_rg_execdat_ETC__q12 =
	      dcache$response_to_cpu[67:36];
      2'd3: CASE_rg_execdata_BITS_9_TO_8_0_CASE_rg_execdat_ETC__q12 = 32'd0;
    endcase
  end
  always@(wr_communicate_to_core$wget)
  begin
    case (wr_communicate_to_core$wget[35:32])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd4, 4'd5, 4'd6, 4'd7, 4'd8:
	  CASE_wr_communicate_to_corewget_BITS_35_TO_32_ETC__q13 =
	      wr_communicate_to_core$wget[35:32];
      default: CASE_wr_communicate_to_corewget_BITS_35_TO_32_ETC__q13 = 4'd11;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_execdata <= `BSV_ASSIGNMENT_DELAY
	    74'h2AAAAAAAAAAAAAAAAAA /* unspecified value */ ;
	rg_state_wait_for_response <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (rg_execdata$EN)
	  rg_execdata <= `BSV_ASSIGNMENT_DELAY rg_execdata$D_IN;
	if (rg_state_wait_for_response$EN)
	  rg_state_wait_for_response <= `BSV_ASSIGNMENT_DELAY
	      rg_state_wait_for_response$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_execdata = 74'h2AAAAAAAAAAAAAAAAAA;
    rg_state_wait_for_response = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_read_response_from_cache)
	begin
	  v__h407 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_read_response_from_cache)
	$display(v__h407,
		 "\tMEM_UNIT: got response from DCACHE: Data: %h Address: %h",
		 dcache$response_to_cpu[67:36],
		 dcache$response_to_cpu[33:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_communicate_with_core &&
	  (!CAN_FIRE_RL_read_response_from_cache ||
	   !wr_communicate_to_core$wget[69]))
	begin
	  v__h1763 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_communicate_with_core &&
	  (!CAN_FIRE_RL_read_response_from_cache ||
	   !wr_communicate_to_core$wget[69]))
	$write(v__h1763,
	       "\tMEM_UNIT: Address: %h Data: %h Access: ",
	       communicate_with_core_execdata[73:42],
	       communicate_with_core_execdata[41:10]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_communicate_with_core &&
	  (!CAN_FIRE_RL_read_response_from_cache ||
	   !wr_communicate_to_core$wget[69]) &&
	  communicate_with_core_execdata[6:5] == 2'd0)
	$write("Load");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_communicate_with_core &&
	  (!CAN_FIRE_RL_read_response_from_cache ||
	   !wr_communicate_to_core$wget[69]) &&
	  communicate_with_core_execdata[6:5] == 2'd1)
	$write("Store");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_communicate_with_core &&
	  (!CAN_FIRE_RL_read_response_from_cache ||
	   !wr_communicate_to_core$wget[69]) &&
	  communicate_with_core_execdata[6:5] != 2'd0 &&
	  communicate_with_core_execdata[6:5] != 2'd1)
	$write("Atomic");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_communicate_with_core &&
	  (!CAN_FIRE_RL_read_response_from_cache ||
	   !wr_communicate_to_core$wget[69]))
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mkmemory_unit

