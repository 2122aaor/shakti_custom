//
// Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
//
// On Tue Mar 28 10:39:14 IST 2017
//
//
// Ports:
// Name                         I/O  size props
// tlm_tx_get                     O    67
// RDY_tlm_tx_get                 O     1
// RDY_tlm_rx_put                 O     1
// AWID                           O     4
// AWADDR                         O    32
// AWLEN                          O     4
// AWSIZE                         O     3
// AWBURST                        O     2
// AWLOCK                         O     2
// AWCACHE                        O     4
// AWPROT                         O     3
// AWVALID                        O     1
// WID                            O     4
// WDATA                          O    32
// WSTRB                          O     4
// WLAST                          O     1
// WVALID                         O     1
// BREADY                         O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// tlm_rx_put                     I   119
// AWREADY                        I     1
// WREADY                         I     1
// BID                            I     4
// BRESP                          I     2
// BVALID                         I     1
// EN_tlm_rx_put                  I     1
// EN_tlm_tx_get                  I     1
//
// Combinational paths from inputs to outputs:
//   (tlm_rx_put, BID, BRESP, BVALID, EN_tlm_rx_put) -> RDY_tlm_tx_get
//   (tlm_rx_put, EN_tlm_rx_put) -> AWID
//   (tlm_rx_put, EN_tlm_rx_put) -> AWADDR
//   (tlm_rx_put, EN_tlm_rx_put) -> AWLEN
//   (tlm_rx_put, EN_tlm_rx_put) -> AWSIZE
//   (tlm_rx_put, EN_tlm_rx_put) -> AWBURST
//   (tlm_rx_put, EN_tlm_rx_put) -> AWLOCK
//   (tlm_rx_put, EN_tlm_rx_put) -> AWCACHE
//   (tlm_rx_put, EN_tlm_rx_put) -> AWPROT
//   (tlm_rx_put, EN_tlm_rx_put) -> AWVALID
//   (tlm_rx_put, EN_tlm_rx_put) -> WID
//   (tlm_rx_put, EN_tlm_rx_put) -> WDATA
//   (tlm_rx_put, EN_tlm_rx_put) -> WSTRB
//   (tlm_rx_put, EN_tlm_rx_put) -> WLAST
//   (tlm_rx_put, EN_tlm_rx_put) -> WVALID
//   (tlm_rx_put, BID, BRESP, BVALID, EN_tlm_rx_put) -> tlm_tx_get
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkAxiWrMasterStd(CLK,
			RST_N,

			EN_tlm_tx_get,
			tlm_tx_get,
			RDY_tlm_tx_get,

			tlm_rx_put,
			EN_tlm_rx_put,
			RDY_tlm_rx_put,

			AWID,

			AWADDR,

			AWLEN,

			AWSIZE,

			AWBURST,

			AWLOCK,

			AWCACHE,

			AWPROT,

			AWVALID,

			AWREADY,

			WID,

			WDATA,

			WSTRB,

			WLAST,

			WVALID,

			WREADY,

			BREADY,

			BID,

			BRESP,

			BVALID);
  input  CLK;
  input  RST_N;

  // actionvalue method tlm_tx_get
  input  EN_tlm_tx_get;
  output [66 : 0] tlm_tx_get;
  output RDY_tlm_tx_get;

  // action method tlm_rx_put
  input  [118 : 0] tlm_rx_put;
  input  EN_tlm_rx_put;
  output RDY_tlm_rx_put;

  // value method fabric_bus_awID
  output [3 : 0] AWID;

  // value method fabric_bus_awADDR
  output [31 : 0] AWADDR;

  // value method fabric_bus_awLEN
  output [3 : 0] AWLEN;

  // value method fabric_bus_awSIZE
  output [2 : 0] AWSIZE;

  // value method fabric_bus_awBURST
  output [1 : 0] AWBURST;

  // value method fabric_bus_awLOCK
  output [1 : 0] AWLOCK;

  // value method fabric_bus_awCACHE
  output [3 : 0] AWCACHE;

  // value method fabric_bus_awPROT
  output [2 : 0] AWPROT;

  // value method fabric_bus_awVALID
  output AWVALID;

  // action method fabric_bus_awREADY
  input  AWREADY;

  // value method fabric_bus_wID
  output [3 : 0] WID;

  // value method fabric_bus_wDATA
  output [31 : 0] WDATA;

  // value method fabric_bus_wSTRB
  output [3 : 0] WSTRB;

  // value method fabric_bus_wLAST
  output WLAST;

  // value method fabric_bus_wVALID
  output WVALID;

  // action method fabric_bus_wREADY
  input  WREADY;

  // value method fabric_bus_bREADY
  output BREADY;

  // action method fabric_bus_bID
  input  [3 : 0] BID;

  // action method fabric_bus_bRESP
  input  [1 : 0] BRESP;

  // action method fabric_bus_bVALID
  input  BVALID;

  // signals for module outputs
  wire [66 : 0] tlm_tx_get;
  wire [31 : 0] AWADDR, WDATA;
  wire [3 : 0] AWCACHE, AWID, AWLEN, WID, WSTRB;
  wire [2 : 0] AWPROT, AWSIZE;
  wire [1 : 0] AWBURST, AWLOCK;
  wire AWVALID, BREADY, RDY_tlm_rx_put, RDY_tlm_tx_get, WLAST, WVALID;

  // inlined wires
  wire [119 : 0] fifo_rx_rv$port0__write_1,
		 fifo_rx_rv$port1__read,
		 fifo_rx_rv$port1__write_1,
		 fifo_rx_rv$port2__read;
  wire [67 : 0] fifo_tx_rv$port0__write_1,
		fifo_tx_rv$port1__read,
		fifo_tx_rv$port1__write_1,
		fifo_tx_rv$port2__read;
  wire [54 : 0] wr_addr_fifo_fifof_rv$port0__write_1,
		wr_addr_fifo_fifof_rv$port1__read,
		wr_addr_fifo_fifof_rv$port1__write_1,
		wr_addr_fifo_fifof_rv$port2__read;
  wire [41 : 0] wr_data_fifo_fifof_rv$port0__write_1,
		wr_data_fifo_fifof_rv$port1__read,
		wr_data_fifo_fifof_rv$port1__write_1,
		wr_data_fifo_fifof_rv$port2__read;
  wire [6 : 0] wr_resp_fifo_fifof_rv$port0__write_1,
	       wr_resp_fifo_fifof_rv$port1__read,
	       wr_resp_fifo_fifof_rv$port1__write_1,
	       wr_resp_fifo_fifof_rv$port2__read;
  wire [5 : 0] wr_resp_fifo_data_wire$wget;
  wire fifo_rx_rv$EN_port1__write, wr_data_fifo_fifof_rv$EN_port0__write;

  // register count
  reg [9 : 0] count;
  wire [9 : 0] count$D_IN;
  wire count$EN;

  // register descriptor
  reg [117 : 0] descriptor;
  wire [117 : 0] descriptor$D_IN;
  wire descriptor$EN;

  // register fifo_rx_rv
  reg [119 : 0] fifo_rx_rv;
  wire [119 : 0] fifo_rx_rv$D_IN;
  wire fifo_rx_rv$EN;

  // register fifo_tx_rv
  reg [67 : 0] fifo_tx_rv;
  wire [67 : 0] fifo_tx_rv$D_IN;
  wire fifo_tx_rv$EN;

  // register saved_data
  reg [40 : 0] saved_data;
  wire [40 : 0] saved_data$D_IN;
  wire saved_data$EN;

  // register wr_addr_fifo_fifof_rv
  reg [54 : 0] wr_addr_fifo_fifof_rv;
  wire [54 : 0] wr_addr_fifo_fifof_rv$D_IN;
  wire wr_addr_fifo_fifof_rv$EN;

  // register wr_data_fifo_fifof_rv
  reg [41 : 0] wr_data_fifo_fifof_rv;
  wire [41 : 0] wr_data_fifo_fifof_rv$D_IN;
  wire wr_data_fifo_fifof_rv$EN;

  // register wr_resp_fifo_fifof_rv
  reg [6 : 0] wr_resp_fifo_fifof_rv;
  wire [6 : 0] wr_resp_fifo_fifof_rv$D_IN;
  wire wr_resp_fifo_fifof_rv$EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_data_write,
       CAN_FIRE_RL_every,
       CAN_FIRE_RL_grab_response,
       CAN_FIRE_RL_start_read,
       CAN_FIRE_RL_start_write,
       CAN_FIRE_RL_wr_addr_fifo_do_deq,
       CAN_FIRE_RL_wr_addr_fifo_get_data,
       CAN_FIRE_RL_wr_data_fifo_do_deq,
       CAN_FIRE_RL_wr_data_fifo_get_data,
       CAN_FIRE_RL_wr_resp_fifo_do_enq,
       CAN_FIRE_fabric_bus_awREADY,
       CAN_FIRE_fabric_bus_bID,
       CAN_FIRE_fabric_bus_bRESP,
       CAN_FIRE_fabric_bus_bVALID,
       CAN_FIRE_fabric_bus_wREADY,
       CAN_FIRE_tlm_rx_put,
       CAN_FIRE_tlm_tx_get,
       WILL_FIRE_RL_data_write,
       WILL_FIRE_RL_every,
       WILL_FIRE_RL_grab_response,
       WILL_FIRE_RL_start_read,
       WILL_FIRE_RL_start_write,
       WILL_FIRE_RL_wr_addr_fifo_do_deq,
       WILL_FIRE_RL_wr_addr_fifo_get_data,
       WILL_FIRE_RL_wr_data_fifo_do_deq,
       WILL_FIRE_RL_wr_data_fifo_get_data,
       WILL_FIRE_RL_wr_resp_fifo_do_enq,
       WILL_FIRE_fabric_bus_awREADY,
       WILL_FIRE_fabric_bus_bID,
       WILL_FIRE_fabric_bus_bRESP,
       WILL_FIRE_fabric_bus_bVALID,
       WILL_FIRE_fabric_bus_wREADY,
       WILL_FIRE_tlm_rx_put,
       WILL_FIRE_tlm_tx_get;

  // inputs to muxes for submodule ports
  wire [117 : 0] MUX_descriptor$write_1__VAL_1, MUX_descriptor$write_1__VAL_2;
  wire [41 : 0] MUX_wr_data_fifo_fifof_rv$port0__write_1__VAL_1,
		MUX_wr_data_fifo_fifof_rv$port0__write_1__VAL_2;
  wire [40 : 0] MUX_saved_data$write_1__VAL_1, MUX_saved_data$write_1__VAL_2;
  wire [9 : 0] MUX_count$write_1__VAL_2;

  // remaining internal signals
  reg [63 : 0] v__h28482;
  reg [3 : 0] wr_data_strb__h15623, wr_data_strb__h2607;
  reg [2 : 0] x__h3097;
  reg [1 : 0] CASE_fifo_rx_rvport1__read_BITS_35_TO_34_0_1__ETC__q1,
	      CASE_wr_resp_fifo_fifof_rvport1__read_BITS_1__ETC__q4;
  wire [53 : 0] wr_addr_fifo_fifof_rvport1__read_BITS_53_TO_0__q2;
  wire [40 : 0] wr_data_fifo_fifof_rvport1__read_BITS_40_TO_0__q3;
  wire [31 : 0] _0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327,
		_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86,
		addr___1__h15930,
		addr___1__h3487,
		addr__h15901,
		addr__h3457,
		log_length__h15927,
		log_length__h3484,
		log_size__h15926,
		log_size__h3483,
		mask__h15929,
		mask__h3486,
		total__h15928,
		total__h3485,
		x__h15942,
		x__h15950,
		x__h3499,
		x__h3508,
		x_addr__h15904,
		x_addr__h3460,
		y__h15560,
		y__h15943,
		y__h27998,
		y__h3500;
  wire [9 : 0] value__h3069;
  wire [4 : 0] value__h14746, value__h21273, value__h27184, value__h8835;
  wire [3 : 0] mask__h15706,
	       mask__h2717,
	       out___1__h15707,
	       out___1__h2718,
	       x__h15719,
	       x__h2730;
  wire [2 : 0] value__h15951, value__h3509, y__h15721, y__h2732;

  // actionvalue method tlm_tx_get
  assign tlm_tx_get = fifo_tx_rv$port1__read[66:0] ;
  assign RDY_tlm_tx_get = fifo_tx_rv$port1__read[67] ;
  assign CAN_FIRE_tlm_tx_get = fifo_tx_rv$port1__read[67] ;
  assign WILL_FIRE_tlm_tx_get = EN_tlm_tx_get ;

  // action method tlm_rx_put
  assign RDY_tlm_rx_put = !fifo_rx_rv[119] ;
  assign CAN_FIRE_tlm_rx_put = !fifo_rx_rv[119] ;
  assign WILL_FIRE_tlm_rx_put = EN_tlm_rx_put ;

  // value method fabric_bus_awID
  assign AWID =
	     wr_addr_fifo_fifof_rv$port1__read[54] ?
	       wr_addr_fifo_fifof_rvport1__read_BITS_53_TO_0__q2[53:50] :
	       4'd0 ;

  // value method fabric_bus_awADDR
  assign AWADDR =
	     wr_addr_fifo_fifof_rv$port1__read[54] ?
	       wr_addr_fifo_fifof_rvport1__read_BITS_53_TO_0__q2[31:0] :
	       32'd0 ;

  // value method fabric_bus_awLEN
  assign AWLEN =
	     wr_addr_fifo_fifof_rv$port1__read[54] ?
	       wr_addr_fifo_fifof_rvport1__read_BITS_53_TO_0__q2[49:46] :
	       4'd0 ;

  // value method fabric_bus_awSIZE
  assign AWSIZE =
	     wr_addr_fifo_fifof_rv$port1__read[54] ?
	       wr_addr_fifo_fifof_rvport1__read_BITS_53_TO_0__q2[45:43] :
	       3'd0 ;

  // value method fabric_bus_awBURST
  assign AWBURST =
	     wr_addr_fifo_fifof_rv$port1__read[54] ?
	       wr_addr_fifo_fifof_rvport1__read_BITS_53_TO_0__q2[42:41] :
	       2'd0 ;

  // value method fabric_bus_awLOCK
  assign AWLOCK =
	     wr_addr_fifo_fifof_rv$port1__read[54] ?
	       wr_addr_fifo_fifof_rvport1__read_BITS_53_TO_0__q2[40:39] :
	       2'd0 ;

  // value method fabric_bus_awCACHE
  assign AWCACHE =
	     wr_addr_fifo_fifof_rv$port1__read[54] ?
	       wr_addr_fifo_fifof_rvport1__read_BITS_53_TO_0__q2[38:35] :
	       4'd0 ;

  // value method fabric_bus_awPROT
  assign AWPROT =
	     wr_addr_fifo_fifof_rv$port1__read[54] ?
	       wr_addr_fifo_fifof_rvport1__read_BITS_53_TO_0__q2[34:32] :
	       3'd0 ;

  // value method fabric_bus_awVALID
  assign AWVALID = wr_addr_fifo_fifof_rv$port1__read[54] ;

  // action method fabric_bus_awREADY
  assign CAN_FIRE_fabric_bus_awREADY = 1'd1 ;
  assign WILL_FIRE_fabric_bus_awREADY = 1'd1 ;

  // value method fabric_bus_wID
  assign WID =
	     wr_data_fifo_fifof_rv$port1__read[41] ?
	       wr_data_fifo_fifof_rvport1__read_BITS_40_TO_0__q3[40:37] :
	       4'd0 ;

  // value method fabric_bus_wDATA
  assign WDATA =
	     wr_data_fifo_fifof_rv$port1__read[41] ?
	       wr_data_fifo_fifof_rvport1__read_BITS_40_TO_0__q3[36:5] :
	       32'd0 ;

  // value method fabric_bus_wSTRB
  assign WSTRB =
	     wr_data_fifo_fifof_rv$port1__read[41] ?
	       wr_data_fifo_fifof_rvport1__read_BITS_40_TO_0__q3[4:1] :
	       4'd0 ;

  // value method fabric_bus_wLAST
  assign WLAST =
	     wr_data_fifo_fifof_rv$port1__read[41] &&
	     wr_data_fifo_fifof_rvport1__read_BITS_40_TO_0__q3[0] ;

  // value method fabric_bus_wVALID
  assign WVALID = wr_data_fifo_fifof_rv$port1__read[41] ;

  // action method fabric_bus_wREADY
  assign CAN_FIRE_fabric_bus_wREADY = 1'd1 ;
  assign WILL_FIRE_fabric_bus_wREADY = 1'd1 ;

  // value method fabric_bus_bREADY
  assign BREADY = !wr_resp_fifo_fifof_rv[6] ;

  // action method fabric_bus_bID
  assign CAN_FIRE_fabric_bus_bID = 1'd1 ;
  assign WILL_FIRE_fabric_bus_bID = 1'd1 ;

  // action method fabric_bus_bRESP
  assign CAN_FIRE_fabric_bus_bRESP = 1'd1 ;
  assign WILL_FIRE_fabric_bus_bRESP = 1'd1 ;

  // action method fabric_bus_bVALID
  assign CAN_FIRE_fabric_bus_bVALID = 1'd1 ;
  assign WILL_FIRE_fabric_bus_bVALID = 1'd1 ;

  // rule RL_every
  assign CAN_FIRE_RL_every = 1'd1 ;
  assign WILL_FIRE_RL_every = 1'd1 ;

  // rule RL_start_write
  assign CAN_FIRE_RL_start_write =
	     fifo_rx_rv$port1__read[119] && !wr_addr_fifo_fifof_rv[54] &&
	     !wr_data_fifo_fifof_rv[41] &&
	     !fifo_rx_rv$port1__read[118] &&
	     fifo_rx_rv$port1__read[117:116] == 2'd1 ;
  assign WILL_FIRE_RL_start_write = CAN_FIRE_RL_start_write ;

  // rule RL_data_write
  assign CAN_FIRE_RL_data_write =
	     fifo_rx_rv$port1__read[119] && !wr_data_fifo_fifof_rv[41] &&
	     fifo_rx_rv$port1__read[118] ;
  assign WILL_FIRE_RL_data_write = CAN_FIRE_RL_data_write ;

  // rule RL_start_read
  assign CAN_FIRE_RL_start_read =
	     fifo_rx_rv$port1__read[119] && !fifo_rx_rv$port1__read[118] &&
	     fifo_rx_rv$port1__read[117:116] == 2'd0 ;
  assign WILL_FIRE_RL_start_read = CAN_FIRE_RL_start_read ;

  // rule RL_wr_addr_fifo_get_data
  assign CAN_FIRE_RL_wr_addr_fifo_get_data =
	     wr_addr_fifo_fifof_rv$port1__read[54] ;
  assign WILL_FIRE_RL_wr_addr_fifo_get_data =
	     wr_addr_fifo_fifof_rv$port1__read[54] ;

  // rule RL_wr_addr_fifo_do_deq
  assign CAN_FIRE_RL_wr_addr_fifo_do_deq =
	     wr_addr_fifo_fifof_rv$port1__read[54] && AWREADY ;
  assign WILL_FIRE_RL_wr_addr_fifo_do_deq = CAN_FIRE_RL_wr_addr_fifo_do_deq ;

  // rule RL_wr_data_fifo_get_data
  assign CAN_FIRE_RL_wr_data_fifo_get_data =
	     wr_data_fifo_fifof_rv$port1__read[41] ;
  assign WILL_FIRE_RL_wr_data_fifo_get_data =
	     wr_data_fifo_fifof_rv$port1__read[41] ;

  // rule RL_wr_data_fifo_do_deq
  assign CAN_FIRE_RL_wr_data_fifo_do_deq =
	     wr_data_fifo_fifof_rv$port1__read[41] && WREADY ;
  assign WILL_FIRE_RL_wr_data_fifo_do_deq = CAN_FIRE_RL_wr_data_fifo_do_deq ;

  // rule RL_wr_resp_fifo_do_enq
  assign CAN_FIRE_RL_wr_resp_fifo_do_enq =
	     !wr_resp_fifo_fifof_rv[6] && BVALID ;
  assign WILL_FIRE_RL_wr_resp_fifo_do_enq = CAN_FIRE_RL_wr_resp_fifo_do_enq ;

  // rule RL_grab_response
  assign CAN_FIRE_RL_grab_response =
	     wr_resp_fifo_fifof_rv$port1__read[6] && !fifo_tx_rv[67] ;
  assign WILL_FIRE_RL_grab_response =
	     CAN_FIRE_RL_grab_response && !WILL_FIRE_RL_start_read ;

  // inputs to muxes for submodule ports
  assign MUX_count$write_1__VAL_2 = count - 10'd1 ;
  assign MUX_descriptor$write_1__VAL_1 =
	     { fifo_rx_rv$port1__read[117:114],
	       x_addr__h3460,
	       fifo_rx_rv$port1__read[81:0] } ;
  assign MUX_descriptor$write_1__VAL_2 =
	     { descriptor[117:114], x_addr__h15904, descriptor[81:0] } ;
  assign MUX_saved_data$write_1__VAL_1 =
	     { saved_data[40:37],
	       fifo_rx_rv$port1__read[44:13],
	       wr_data_strb__h15623,
	       count == 10'd1 } ;
  assign MUX_saved_data$write_1__VAL_2 =
	     { fifo_rx_rv$port1__read[16:13],
	       fifo_rx_rv$port1__read[81:50],
	       wr_data_strb__h2607,
	       fifo_rx_rv$port1__read[49:40] == 10'd1 } ;
  assign MUX_wr_data_fifo_fifof_rv$port0__write_1__VAL_1 =
	     { 1'd1,
	       fifo_rx_rv$port1__read[16:13],
	       fifo_rx_rv$port1__read[81:50],
	       wr_data_strb__h2607,
	       fifo_rx_rv$port1__read[49:40] == 10'd1 } ;
  assign MUX_wr_data_fifo_fifof_rv$port0__write_1__VAL_2 =
	     { 1'd1,
	       saved_data[40:37],
	       fifo_rx_rv$port1__read[44:13],
	       wr_data_strb__h15623,
	       count == 10'd1 } ;

  // inlined wires
  assign wr_resp_fifo_data_wire$wget = { BID, BRESP } ;
  assign wr_addr_fifo_fifof_rv$port0__write_1 =
	     { 1'd1,
	       fifo_rx_rv$port1__read[16:13],
	       value__h3069[3:0],
	       x__h3097,
	       CASE_fifo_rx_rvport1__read_BITS_35_TO_34_0_1__ETC__q1,
	       fifo_rx_rv$port1__read[8:0],
	       fifo_rx_rv$port1__read[113:82] } ;
  assign wr_addr_fifo_fifof_rv$port1__read =
	     CAN_FIRE_RL_start_write ?
	       wr_addr_fifo_fifof_rv$port0__write_1 :
	       wr_addr_fifo_fifof_rv ;
  assign wr_addr_fifo_fifof_rv$port1__write_1 =
	     { 1'd0, 54'h2AAAAAAAAAAAAA /* unspecified value */  } ;
  assign wr_addr_fifo_fifof_rv$port2__read =
	     CAN_FIRE_RL_wr_addr_fifo_do_deq ?
	       wr_addr_fifo_fifof_rv$port1__write_1 :
	       wr_addr_fifo_fifof_rv$port1__read ;
  assign wr_data_fifo_fifof_rv$EN_port0__write =
	     WILL_FIRE_RL_start_write || WILL_FIRE_RL_data_write ;
  assign wr_data_fifo_fifof_rv$port0__write_1 =
	     WILL_FIRE_RL_start_write ?
	       MUX_wr_data_fifo_fifof_rv$port0__write_1__VAL_1 :
	       MUX_wr_data_fifo_fifof_rv$port0__write_1__VAL_2 ;
  assign wr_data_fifo_fifof_rv$port1__read =
	     wr_data_fifo_fifof_rv$EN_port0__write ?
	       wr_data_fifo_fifof_rv$port0__write_1 :
	       wr_data_fifo_fifof_rv ;
  assign wr_data_fifo_fifof_rv$port1__write_1 =
	     { 1'd0, 41'h0AAAAAAAAAA /* unspecified value */  } ;
  assign wr_data_fifo_fifof_rv$port2__read =
	     CAN_FIRE_RL_wr_data_fifo_do_deq ?
	       wr_data_fifo_fifof_rv$port1__write_1 :
	       wr_data_fifo_fifof_rv$port1__read ;
  assign wr_resp_fifo_fifof_rv$port0__write_1 =
	     { 1'd1, wr_resp_fifo_data_wire$wget } ;
  assign wr_resp_fifo_fifof_rv$port1__read =
	     CAN_FIRE_RL_wr_resp_fifo_do_enq ?
	       wr_resp_fifo_fifof_rv$port0__write_1 :
	       wr_resp_fifo_fifof_rv ;
  assign wr_resp_fifo_fifof_rv$port1__write_1 =
	     { 1'd0, 6'b101010 /* unspecified value */  } ;
  assign wr_resp_fifo_fifof_rv$port2__read =
	     WILL_FIRE_RL_grab_response ?
	       wr_resp_fifo_fifof_rv$port1__write_1 :
	       wr_resp_fifo_fifof_rv$port1__read ;
  assign fifo_rx_rv$port0__write_1 = { 1'd1, tlm_rx_put } ;
  assign fifo_rx_rv$port1__read =
	     EN_tlm_rx_put ? fifo_rx_rv$port0__write_1 : fifo_rx_rv ;
  assign fifo_rx_rv$EN_port1__write =
	     WILL_FIRE_RL_data_write || WILL_FIRE_RL_start_read ||
	     WILL_FIRE_RL_start_write ;
  assign fifo_rx_rv$port1__write_1 =
	     { 1'd0,
	       119'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  } ;
  assign fifo_rx_rv$port2__read =
	     fifo_rx_rv$EN_port1__write ?
	       fifo_rx_rv$port1__write_1 :
	       fifo_rx_rv$port1__read ;
  assign fifo_tx_rv$port0__write_1 =
	     { 35'h500000000,
	       CASE_wr_resp_fifo_fifof_rvport1__read_BITS_1__ETC__q4,
	       14'd0,
	       wr_resp_fifo_fifof_rv$port1__read[5:2],
	       13'd0 } ;
  assign fifo_tx_rv$port1__read =
	     WILL_FIRE_RL_grab_response ?
	       fifo_tx_rv$port0__write_1 :
	       fifo_tx_rv ;
  assign fifo_tx_rv$port1__write_1 =
	     { 1'd0, 67'h2AAAAAAAAAAAAAAAA /* unspecified value */  } ;
  assign fifo_tx_rv$port2__read =
	     EN_tlm_tx_get ?
	       fifo_tx_rv$port1__write_1 :
	       fifo_tx_rv$port1__read ;

  // register count
  assign count$D_IN =
	     WILL_FIRE_RL_start_write ?
	       value__h3069 :
	       MUX_count$write_1__VAL_2 ;
  assign count$EN = WILL_FIRE_RL_start_write || WILL_FIRE_RL_data_write ;

  // register descriptor
  assign descriptor$D_IN =
	     WILL_FIRE_RL_start_write ?
	       MUX_descriptor$write_1__VAL_1 :
	       MUX_descriptor$write_1__VAL_2 ;
  assign descriptor$EN = WILL_FIRE_RL_start_write || WILL_FIRE_RL_data_write ;

  // register fifo_rx_rv
  assign fifo_rx_rv$D_IN = fifo_rx_rv$port2__read ;
  assign fifo_rx_rv$EN = 1'b1 ;

  // register fifo_tx_rv
  assign fifo_tx_rv$D_IN = fifo_tx_rv$port2__read ;
  assign fifo_tx_rv$EN = 1'b1 ;

  // register saved_data
  assign saved_data$D_IN =
	     WILL_FIRE_RL_data_write ?
	       MUX_saved_data$write_1__VAL_1 :
	       MUX_saved_data$write_1__VAL_2 ;
  assign saved_data$EN = WILL_FIRE_RL_data_write || WILL_FIRE_RL_start_write ;

  // register wr_addr_fifo_fifof_rv
  assign wr_addr_fifo_fifof_rv$D_IN = wr_addr_fifo_fifof_rv$port2__read ;
  assign wr_addr_fifo_fifof_rv$EN = 1'b1 ;

  // register wr_data_fifo_fifof_rv
  assign wr_data_fifo_fifof_rv$D_IN = wr_data_fifo_fifof_rv$port2__read ;
  assign wr_data_fifo_fifof_rv$EN = 1'b1 ;

  // register wr_resp_fifo_fifof_rv
  assign wr_resp_fifo_fifof_rv$D_IN = wr_resp_fifo_fifof_rv$port2__read ;
  assign wr_resp_fifo_fifof_rv$EN = 1'b1 ;

  // remaining internal signals
  assign _0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327 =
	     { 30'd0, descriptor[33:32] } + 32'd1 ;
  assign _0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86 =
	     { 30'd0, fifo_rx_rv$port1__read[33:32] } + 32'd1 ;
  assign addr___1__h15930 = x__h15942 | y__h15943 ;
  assign addr___1__h3487 = x__h3499 | y__h3500 ;
  assign addr__h15901 = descriptor[113:82] + x__h15950 ;
  assign addr__h3457 = fifo_rx_rv$port1__read[113:82] + x__h3508 ;
  assign log_length__h15927 =
	     (descriptor[40] || descriptor[41] || descriptor[42] ||
	      descriptor[43] ||
	      descriptor[44] ||
	      descriptor[45] ||
	      descriptor[46] ||
	      descriptor[47] ||
	      descriptor[48] ||
	      descriptor[49]) ?
	       { 27'd0, value__h27184 } :
	       32'd32 ;
  assign log_length__h3484 =
	     (fifo_rx_rv$port1__read[40] || fifo_rx_rv$port1__read[41] ||
	      fifo_rx_rv$port1__read[42] ||
	      fifo_rx_rv$port1__read[43] ||
	      fifo_rx_rv$port1__read[44] ||
	      fifo_rx_rv$port1__read[45] ||
	      fifo_rx_rv$port1__read[46] ||
	      fifo_rx_rv$port1__read[47] ||
	      fifo_rx_rv$port1__read[48] ||
	      fifo_rx_rv$port1__read[49]) ?
	       { 27'd0, value__h14746 } :
	       32'd32 ;
  assign log_size__h15926 =
	     (_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[0] ||
	      _0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[1] ||
	      _0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[2] ||
	      _0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[3] ||
	      _0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[4] ||
	      _0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[5] ||
	      _0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[6] ||
	      _0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[7] ||
	      _0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[8] ||
	      _0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[9] ||
	      _0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[10] ||
	      _0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[11] ||
	      _0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[12] ||
	      _0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[13] ||
	      _0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[14] ||
	      _0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[15] ||
	      _0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[16] ||
	      _0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[17] ||
	      _0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[18] ||
	      _0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[19] ||
	      _0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[20] ||
	      _0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[21] ||
	      _0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[22] ||
	      _0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[23] ||
	      _0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[24] ||
	      _0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[25] ||
	      _0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[26] ||
	      _0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[27] ||
	      _0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[28] ||
	      _0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[29] ||
	      _0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[30] ||
	      _0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[31]) ?
	       { 27'd0, value__h21273 } :
	       32'd32 ;
  assign log_size__h3483 =
	     (_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[0] ||
	      _0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[1] ||
	      _0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[2] ||
	      _0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[3] ||
	      _0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[4] ||
	      _0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[5] ||
	      _0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[6] ||
	      _0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[7] ||
	      _0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[8] ||
	      _0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[9] ||
	      _0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[10] ||
	      _0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[11] ||
	      _0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[12] ||
	      _0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[13] ||
	      _0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[14] ||
	      _0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[15] ||
	      _0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[16] ||
	      _0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[17] ||
	      _0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[18] ||
	      _0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[19] ||
	      _0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[20] ||
	      _0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[21] ||
	      _0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[22] ||
	      _0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[23] ||
	      _0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[24] ||
	      _0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[25] ||
	      _0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[26] ||
	      _0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[27] ||
	      _0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[28] ||
	      _0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[29] ||
	      _0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[30] ||
	      _0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[31]) ?
	       { 27'd0, value__h8835 } :
	       32'd32 ;
  assign mask__h15706 = ~x__h15719 ;
  assign mask__h15929 = (32'd1 << total__h15928) - 32'd1 ;
  assign mask__h2717 = ~x__h2730 ;
  assign mask__h3486 = (32'd1 << total__h3485) - 32'd1 ;
  assign out___1__h15707 = mask__h15706 << descriptor[83:82] ;
  assign out___1__h2718 = mask__h2717 << fifo_rx_rv$port1__read[83:82] ;
  assign total__h15928 = log_size__h15926 + log_length__h15927 ;
  assign total__h3485 = log_size__h3483 + log_length__h3484 ;
  assign value__h14746 =
	     (!fifo_rx_rv$port1__read[40] && !fifo_rx_rv$port1__read[41] &&
	      !fifo_rx_rv$port1__read[42] &&
	      !fifo_rx_rv$port1__read[43] &&
	      !fifo_rx_rv$port1__read[44] &&
	      !fifo_rx_rv$port1__read[45] &&
	      !fifo_rx_rv$port1__read[46] &&
	      !fifo_rx_rv$port1__read[47]) ?
	       (fifo_rx_rv$port1__read[48] ? 5'd8 : 5'd9) :
	       ((!fifo_rx_rv$port1__read[40] && !fifo_rx_rv$port1__read[41] &&
		 !fifo_rx_rv$port1__read[42] &&
		 !fifo_rx_rv$port1__read[43]) ?
		  ((!fifo_rx_rv$port1__read[44] &&
		    !fifo_rx_rv$port1__read[45]) ?
		     (fifo_rx_rv$port1__read[46] ? 5'd6 : 5'd7) :
		     (fifo_rx_rv$port1__read[44] ? 5'd4 : 5'd5)) :
		  ((!fifo_rx_rv$port1__read[40] &&
		    !fifo_rx_rv$port1__read[41]) ?
		     (fifo_rx_rv$port1__read[42] ? 5'd2 : 5'd3) :
		     (fifo_rx_rv$port1__read[40] ? 5'd0 : 5'd1))) ;
  assign value__h15951 = (descriptor[35:34] == 2'd2) ? 3'd0 : y__h15721 ;
  assign value__h21273 =
	     (!_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[0] &&
	      !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[1] &&
	      !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[2] &&
	      !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[3] &&
	      !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[4] &&
	      !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[5] &&
	      !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[6] &&
	      !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[7] &&
	      !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[8] &&
	      !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[9] &&
	      !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[10] &&
	      !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[11] &&
	      !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[12] &&
	      !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[13] &&
	      !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[14] &&
	      !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[15]) ?
	       ((!_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[16] &&
		 !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[17] &&
		 !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[18] &&
		 !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[19] &&
		 !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[20] &&
		 !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[21] &&
		 !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[22] &&
		 !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[23]) ?
		  ((!_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[24] &&
		    !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[25] &&
		    !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[26] &&
		    !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[27]) ?
		     ((!_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[28] &&
		       !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[29]) ?
			(_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[30] ?
			   5'd30 :
			   5'd31) :
			(_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[28] ?
			   5'd28 :
			   5'd29)) :
		     ((!_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[24] &&
		       !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[25]) ?
			(_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[26] ?
			   5'd26 :
			   5'd27) :
			(_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[24] ?
			   5'd24 :
			   5'd25))) :
		  ((!_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[16] &&
		    !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[17] &&
		    !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[18] &&
		    !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[19]) ?
		     ((!_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[20] &&
		       !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[21]) ?
			(_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[22] ?
			   5'd22 :
			   5'd23) :
			(_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[20] ?
			   5'd20 :
			   5'd21)) :
		     ((!_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[16] &&
		       !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[17]) ?
			(_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[18] ?
			   5'd18 :
			   5'd19) :
			(_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[16] ?
			   5'd16 :
			   5'd17)))) :
	       ((!_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[0] &&
		 !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[1] &&
		 !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[2] &&
		 !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[3] &&
		 !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[4] &&
		 !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[5] &&
		 !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[6] &&
		 !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[7]) ?
		  ((!_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[8] &&
		    !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[9] &&
		    !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[10] &&
		    !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[11]) ?
		     ((!_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[12] &&
		       !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[13]) ?
			(_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[14] ?
			   5'd14 :
			   5'd15) :
			(_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[12] ?
			   5'd12 :
			   5'd13)) :
		     ((!_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[8] &&
		       !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[9]) ?
			(_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[10] ?
			   5'd10 :
			   5'd11) :
			(_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[8] ?
			   5'd8 :
			   5'd9))) :
		  ((!_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[0] &&
		    !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[1] &&
		    !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[2] &&
		    !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[3]) ?
		     ((!_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[4] &&
		       !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[5]) ?
			(_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[6] ?
			   5'd6 :
			   5'd7) :
			(_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[4] ?
			   5'd4 :
			   5'd5)) :
		     ((!_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[0] &&
		       !_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[1]) ?
			(_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[2] ?
			   5'd2 :
			   5'd3) :
			(_0_CONCAT_descriptor_99_BITS_33_TO_32_04_26_PLUS_1___d327[0] ?
			   5'd0 :
			   5'd1)))) ;
  assign value__h27184 =
	     (!descriptor[40] && !descriptor[41] && !descriptor[42] &&
	      !descriptor[43] &&
	      !descriptor[44] &&
	      !descriptor[45] &&
	      !descriptor[46] &&
	      !descriptor[47]) ?
	       (descriptor[48] ? 5'd8 : 5'd9) :
	       ((!descriptor[40] && !descriptor[41] && !descriptor[42] &&
		 !descriptor[43]) ?
		  ((!descriptor[44] && !descriptor[45]) ?
		     (descriptor[46] ? 5'd6 : 5'd7) :
		     (descriptor[44] ? 5'd4 : 5'd5)) :
		  ((!descriptor[40] && !descriptor[41]) ?
		     (descriptor[42] ? 5'd2 : 5'd3) :
		     (descriptor[40] ? 5'd0 : 5'd1))) ;
  assign value__h3069 = fifo_rx_rv$port1__read[49:40] - 10'd1 ;
  assign value__h3509 =
	     (fifo_rx_rv$port1__read[35:34] == 2'd2) ? 3'd0 : y__h2732 ;
  assign value__h8835 =
	     (!_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[0] &&
	      !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[1] &&
	      !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[2] &&
	      !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[3] &&
	      !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[4] &&
	      !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[5] &&
	      !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[6] &&
	      !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[7] &&
	      !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[8] &&
	      !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[9] &&
	      !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[10] &&
	      !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[11] &&
	      !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[12] &&
	      !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[13] &&
	      !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[14] &&
	      !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[15]) ?
	       ((!_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[16] &&
		 !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[17] &&
		 !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[18] &&
		 !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[19] &&
		 !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[20] &&
		 !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[21] &&
		 !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[22] &&
		 !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[23]) ?
		  ((!_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[24] &&
		    !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[25] &&
		    !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[26] &&
		    !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[27]) ?
		     ((!_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[28] &&
		       !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[29]) ?
			(_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[30] ?
			   5'd30 :
			   5'd31) :
			(_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[28] ?
			   5'd28 :
			   5'd29)) :
		     ((!_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[24] &&
		       !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[25]) ?
			(_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[26] ?
			   5'd26 :
			   5'd27) :
			(_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[24] ?
			   5'd24 :
			   5'd25))) :
		  ((!_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[16] &&
		    !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[17] &&
		    !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[18] &&
		    !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[19]) ?
		     ((!_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[20] &&
		       !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[21]) ?
			(_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[22] ?
			   5'd22 :
			   5'd23) :
			(_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[20] ?
			   5'd20 :
			   5'd21)) :
		     ((!_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[16] &&
		       !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[17]) ?
			(_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[18] ?
			   5'd18 :
			   5'd19) :
			(_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[16] ?
			   5'd16 :
			   5'd17)))) :
	       ((!_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[0] &&
		 !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[1] &&
		 !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[2] &&
		 !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[3] &&
		 !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[4] &&
		 !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[5] &&
		 !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[6] &&
		 !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[7]) ?
		  ((!_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[8] &&
		    !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[9] &&
		    !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[10] &&
		    !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[11]) ?
		     ((!_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[12] &&
		       !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[13]) ?
			(_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[14] ?
			   5'd14 :
			   5'd15) :
			(_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[12] ?
			   5'd12 :
			   5'd13)) :
		     ((!_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[8] &&
		       !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[9]) ?
			(_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[10] ?
			   5'd10 :
			   5'd11) :
			(_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[8] ?
			   5'd8 :
			   5'd9))) :
		  ((!_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[0] &&
		    !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[1] &&
		    !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[2] &&
		    !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[3]) ?
		     ((!_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[4] &&
		       !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[5]) ?
			(_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[6] ?
			   5'd6 :
			   5'd7) :
			(_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[4] ?
			   5'd4 :
			   5'd5)) :
		     ((!_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[0] &&
		       !_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[1]) ?
			(_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[2] ?
			   5'd2 :
			   5'd3) :
			(_0_CONCAT_fifo_rx_rv_port1__read__9_BITS_33_TO__ETC___d86[0] ?
			   5'd0 :
			   5'd1)))) ;
  assign wr_addr_fifo_fifof_rvport1__read_BITS_53_TO_0__q2 =
	     wr_addr_fifo_fifof_rv$port1__read[53:0] ;
  assign wr_data_fifo_fifof_rvport1__read_BITS_40_TO_0__q3 =
	     wr_data_fifo_fifof_rv$port1__read[40:0] ;
  assign x__h15719 = 4'd15 << y__h15721 ;
  assign x__h15942 = addr__h15901 & mask__h15929 ;
  assign x__h15950 = { 29'd0, value__h15951 } ;
  assign x__h2730 = 4'd15 << y__h2732 ;
  assign x__h3499 = addr__h3457 & mask__h3486 ;
  assign x__h3508 = { 29'd0, value__h3509 } ;
  assign x_addr__h15904 =
	     (descriptor[35:34] == 2'd1) ? addr___1__h15930 : addr__h15901 ;
  assign x_addr__h3460 =
	     (fifo_rx_rv$port1__read[35:34] == 2'd1) ?
	       addr___1__h3487 :
	       addr__h3457 ;
  assign y__h15560 = ~mask__h3486 ;
  assign y__h15721 = { 1'b0, descriptor[33:32] } + 3'd1 ;
  assign y__h15943 = descriptor[113:82] & y__h27998 ;
  assign y__h2732 = { 1'b0, fifo_rx_rv$port1__read[33:32] } + 3'd1 ;
  assign y__h27998 = ~mask__h15929 ;
  assign y__h3500 = fifo_rx_rv$port1__read[113:82] & y__h15560 ;
  always@(fifo_rx_rv$port1__read)
  begin
    case (fifo_rx_rv$port1__read[33:32])
      2'd0: x__h3097 = 3'd0;
      2'd1: x__h3097 = 3'd1;
      default: x__h3097 = 3'd2;
    endcase
  end
  always@(fifo_rx_rv$port1__read or out___1__h2718)
  begin
    case (fifo_rx_rv$port1__read[39:36])
      4'd0, 4'd15: wr_data_strb__h2607 = out___1__h2718;
      default: wr_data_strb__h2607 = fifo_rx_rv$port1__read[39:36];
    endcase
  end
  always@(descriptor or out___1__h15707)
  begin
    case (descriptor[39:36])
      4'd0, 4'd15: wr_data_strb__h15623 = out___1__h15707;
      default: wr_data_strb__h15623 = descriptor[39:36];
    endcase
  end
  always@(fifo_rx_rv$port1__read)
  begin
    case (fifo_rx_rv$port1__read[35:34])
      2'd0: CASE_fifo_rx_rvport1__read_BITS_35_TO_34_0_1__ETC__q1 = 2'd1;
      2'd2: CASE_fifo_rx_rvport1__read_BITS_35_TO_34_0_1__ETC__q1 = 2'd0;
      default: CASE_fifo_rx_rvport1__read_BITS_35_TO_34_0_1__ETC__q1 = 2'd2;
    endcase
  end
  always@(wr_resp_fifo_fifof_rv$port1__read)
  begin
    case (wr_resp_fifo_fifof_rv$port1__read[1:0])
      2'd0:
	  CASE_wr_resp_fifo_fifof_rvport1__read_BITS_1__ETC__q4 =
	      wr_resp_fifo_fifof_rv$port1__read[1:0];
      2'd1: CASE_wr_resp_fifo_fifof_rvport1__read_BITS_1__ETC__q4 = 2'd3;
      2'd2: CASE_wr_resp_fifo_fifof_rvport1__read_BITS_1__ETC__q4 = 2'd1;
      2'd3: CASE_wr_resp_fifo_fifof_rvport1__read_BITS_1__ETC__q4 = 2'd2;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        count <= `BSV_ASSIGNMENT_DELAY 10'd0;
	descriptor <= `BSV_ASSIGNMENT_DELAY
	    118'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
	fifo_rx_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      119'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  };
	fifo_tx_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 67'h2AAAAAAAAAAAAAAAA /* unspecified value */  };
	saved_data <= `BSV_ASSIGNMENT_DELAY
	    41'h0AAAAAAAAAA /* unspecified value */ ;
	wr_addr_fifo_fifof_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 54'h2AAAAAAAAAAAAA /* unspecified value */  };
	wr_data_fifo_fifof_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 41'h0AAAAAAAAAA /* unspecified value */  };
	wr_resp_fifo_fifof_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 6'b101010 /* unspecified value */  };
      end
    else
      begin
        if (count$EN) count <= `BSV_ASSIGNMENT_DELAY count$D_IN;
	if (descriptor$EN)
	  descriptor <= `BSV_ASSIGNMENT_DELAY descriptor$D_IN;
	if (fifo_rx_rv$EN)
	  fifo_rx_rv <= `BSV_ASSIGNMENT_DELAY fifo_rx_rv$D_IN;
	if (fifo_tx_rv$EN)
	  fifo_tx_rv <= `BSV_ASSIGNMENT_DELAY fifo_tx_rv$D_IN;
	if (saved_data$EN)
	  saved_data <= `BSV_ASSIGNMENT_DELAY saved_data$D_IN;
	if (wr_addr_fifo_fifof_rv$EN)
	  wr_addr_fifo_fifof_rv <= `BSV_ASSIGNMENT_DELAY
	      wr_addr_fifo_fifof_rv$D_IN;
	if (wr_data_fifo_fifof_rv$EN)
	  wr_data_fifo_fifof_rv <= `BSV_ASSIGNMENT_DELAY
	      wr_data_fifo_fifof_rv$D_IN;
	if (wr_resp_fifo_fifof_rv$EN)
	  wr_resp_fifo_fifof_rv <= `BSV_ASSIGNMENT_DELAY
	      wr_resp_fifo_fifof_rv$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    count = 10'h2AA;
    descriptor = 118'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    fifo_rx_rv = 120'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    fifo_tx_rv = 68'hAAAAAAAAAAAAAAAAA;
    saved_data = 41'h0AAAAAAAAAA;
    wr_addr_fifo_fifof_rv = 55'h2AAAAAAAAAAAAA;
    wr_data_fifo_fifof_rv = 42'h2AAAAAAAAAA;
    wr_resp_fifo_fifof_rv = 7'h2A;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_read)
	begin
	  v__h28482 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_read)
	$display("(%0d) ERROR: AxiWrMaster cannot handle READ OPS!",
		 v__h28482);
  end
  // synopsys translate_on
endmodule  // mkAxiWrMasterStd

