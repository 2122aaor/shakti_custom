//
// Generated by Bluespec Compiler, version 2015.09.beta2 (build 34689, 2015-09-07)
//
// On Mon Dec 19 16:37:06 IST 2016
//
//
// Ports:
// Name                         I/O  size props
// inputs                         O   333
// RDY_inputs                     O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// inputs__opcode                 I     5
// inputs__funct3                 I     3
// inputs__funct7                 I     7
// inputs__operand1               I    64
// inputs__operand2               I    64
// inputs__immediate_value        I    20
// inputs_program_counter         I    64
// inputs_dest_addr               I     5
// inputs_pred_type               I     1
// inputs_is_imm                  I     1
// EN_inputs                      I     1
//
// Combinational paths from inputs to outputs:
//   (inputs__opcode,
//    inputs__funct3,
//    inputs__funct7,
//    inputs__operand1,
//    inputs__operand2,
//    inputs__immediate_value,
//    inputs_program_counter,
//    inputs_dest_addr,
//    inputs_pred_type,
//    inputs_is_imm,
//    EN_inputs) -> inputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkexecution_unit(CLK,
			RST_N,

			inputs__opcode,
			inputs__funct3,
			inputs__funct7,
			inputs__operand1,
			inputs__operand2,
			inputs__immediate_value,
			inputs_program_counter,
			inputs_dest_addr,
			inputs_pred_type,
			inputs_is_imm,
			EN_inputs,
			inputs,
			RDY_inputs);
  input  CLK;
  input  RST_N;

  // actionvalue method inputs
  input  [4 : 0] inputs__opcode;
  input  [2 : 0] inputs__funct3;
  input  [6 : 0] inputs__funct7;
  input  [63 : 0] inputs__operand1;
  input  [63 : 0] inputs__operand2;
  input  [19 : 0] inputs__immediate_value;
  input  [63 : 0] inputs_program_counter;
  input  [4 : 0] inputs_dest_addr;
  input  inputs_pred_type;
  input  inputs_is_imm;
  input  EN_inputs;
  output [332 : 0] inputs;
  output RDY_inputs;

  // signals for module outputs
  wire [332 : 0] inputs;
  wire RDY_inputs;

  // register rg_state
  reg rg_state;
  wire rg_state$D_IN, rg_state$EN;

  // ports of submodule muldiv
  wire [64 : 0] muldiv$_start;
  wire [63 : 0] muldiv$_start_inp1, muldiv$_start_inp2;
  wire [2 : 0] muldiv$_start_funct;
  wire muldiv$EN__start, muldiv$_start_word32;

  // rule scheduling signals
  wire CAN_FIRE_inputs, WILL_FIRE_inputs;

  // remaining internal signals
  reg [63 : 0] v__h307, v__h363, v__h443;
  wire [262 : 0] fn_branch___d27;
  wire [132 : 0] fn_arithmetic___d31;
  wire [63 : 0] x1_avValue_aluresult__h411, x__h530, x__h582;
  wire [4 : 0] IF_inputs__opcode_EQ_0b1100_OR_inputs__opcode__ETC___d50,
	       x1_avValue_destination__h417;
  wire [1 : 0] IF_inputs__opcode_EQ_0b1100_OR_inputs__opcode__ETC___d41;
  wire x1_avValue_signextend__h415;

  // actionvalue method inputs
  assign inputs =
	     { inputs__opcode != 5'b01100 && inputs__opcode != 5'b01110 ||
	       inputs__funct7 != 7'd1 ||
	       muldiv$_start[64],
	       x__h530,
	       (inputs__opcode == 5'b01100 || inputs__opcode == 5'b01110) &&
	       inputs__funct7 == 7'd1 ||
	       inputs__opcode[4:2] == 3'b110 ||
	       fn_arithmetic___d31[68],
	       x__h582,
	       IF_inputs__opcode_EQ_0b1100_OR_inputs__opcode__ETC___d41,
	       (inputs__opcode != 5'b01100 && inputs__opcode != 5'b01110 ||
		inputs__funct7 != 7'd1) &&
	       x1_avValue_signextend__h415,
	       (inputs__opcode != 5'b01100 && inputs__opcode != 5'b01110 ||
		inputs__funct7 != 7'd1) &&
	       (inputs__opcode[4:2] == 3'b110 || fn_arithmetic___d31[0]),
	       IF_inputs__opcode_EQ_0b1100_OR_inputs__opcode__ETC___d50,
	       fn_branch___d27[193:65],
	       inputs__opcode[4:2] != 3'b110 || fn_branch___d27[64],
	       (inputs__opcode[4:2] == 3'b110 && !fn_branch___d27[64]) ?
		 fn_branch___d27[63:0] :
		 ((inputs__opcode[4:2] != 3'b110) ?
		    64'd0 :
		    fn_branch___d27[63:0]) } ;
  assign RDY_inputs = 1'd1 ;
  assign CAN_FIRE_inputs = 1'd1 ;
  assign WILL_FIRE_inputs = EN_inputs ;

  // submodule muldiv
  mkmuldiv muldiv(.CLK(CLK),
		  .RST_N(RST_N),
		  ._start_funct(muldiv$_start_funct),
		  ._start_inp1(muldiv$_start_inp1),
		  ._start_inp2(muldiv$_start_inp2),
		  ._start_word32(muldiv$_start_word32),
		  .EN__start(muldiv$EN__start),
		  ._start(muldiv$_start),
		  .RDY__start());

  // register rg_state
  assign rg_state$D_IN = 1'd0 ;
  assign rg_state$EN =
	     EN_inputs &&
	     (inputs__opcode == 5'b01100 || inputs__opcode == 5'b01110) &&
	     inputs__funct7 == 7'd1 &&
	     muldiv$_start[64] ;

  // submodule muldiv
  assign muldiv$_start_funct = inputs__funct3 ;
  assign muldiv$_start_inp1 = inputs__operand1 ;
  assign muldiv$_start_inp2 = inputs__operand2 ;
  assign muldiv$_start_word32 = inputs__opcode[1] ;
  assign muldiv$EN__start =
	     EN_inputs &&
	     (inputs__opcode == 5'b01100 || inputs__opcode == 5'b01110) &&
	     inputs__funct7 == 7'd1 ;

  // remaining internal signals
  module_fn_arithmetic instance_fn_arithmetic_0(.fn_arithmetic__opcode(inputs__opcode),
						.fn_arithmetic__funct3(inputs__funct3),
						.fn_arithmetic__funct7(inputs__funct7),
						.fn_arithmetic__operand1(inputs__operand1),
						.fn_arithmetic__operand2(inputs_is_imm ?
									   { {44{inputs__immediate_value[19]}},
									     inputs__immediate_value } :
									   inputs__operand2),
						.fn_arithmetic__immediate_value(inputs__immediate_value),
						.fn_arithmetic_program_counter(inputs_program_counter),
						.fn_arithmetic(fn_arithmetic___d31));
  module_fn_branch instance_fn_branch_1(.fn_branch__dest_addr(inputs_dest_addr),
					.fn_branch__opcode(inputs__opcode),
					.fn_branch__funct3(inputs__funct3),
					.fn_branch__current_pc(inputs_program_counter),
					.fn_branch__immediate_value(inputs__immediate_value),
					.fn_branch__operand1(inputs__operand1),
					.fn_branch__operand2(inputs__operand2),
					.fn_branch__prediction(inputs_pred_type),
					.fn_branch(fn_branch___d27));
  assign IF_inputs__opcode_EQ_0b1100_OR_inputs__opcode__ETC___d41 =
	     ((inputs__opcode == 5'b01100 || inputs__opcode == 5'b01110) &&
	      inputs__funct7 == 7'd1 ||
	      inputs__opcode[4:2] == 3'b110) ?
	       2'd0 :
	       fn_arithmetic___d31[3:2] ;
  assign IF_inputs__opcode_EQ_0b1100_OR_inputs__opcode__ETC___d50 =
	     ((inputs__opcode == 5'b01100 || inputs__opcode == 5'b01110) &&
	      inputs__funct7 == 7'd1) ?
	       inputs_dest_addr :
	       x1_avValue_destination__h417 ;
  assign x1_avValue_aluresult__h411 =
	     (inputs__opcode[4:2] == 3'b110) ?
	       fn_branch___d27[262:199] :
	       fn_arithmetic___d31[132:69] ;
  assign x1_avValue_destination__h417 =
	     (inputs__opcode[4:2] == 3'b110) ?
	       fn_branch___d27[198:194] :
	       inputs_dest_addr ;
  assign x1_avValue_signextend__h415 =
	     inputs__opcode[4:2] != 3'b110 && fn_arithmetic___d31[1] ;
  assign x__h530 =
	     ((inputs__opcode == 5'b01100 || inputs__opcode == 5'b01110) &&
	      inputs__funct7 == 7'd1) ?
	       muldiv$_start[63:0] :
	       x1_avValue_aluresult__h411 ;
  assign x__h582 =
	     ((inputs__opcode == 5'b01100 || inputs__opcode == 5'b01110) &&
	      inputs__funct7 == 7'd1 ||
	      inputs__opcode[4:2] == 3'b110) ?
	       64'd0 :
	       inputs__operand2 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_state = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_inputs &&
	  (inputs__opcode == 5'b01100 || inputs__opcode == 5'b01110) &&
	  inputs__funct7 == 7'd1 &&
	  muldiv$_start[64])
	begin
	  v__h443 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_inputs &&
	  (inputs__opcode == 5'b01100 || inputs__opcode == 5'b01110) &&
	  inputs__funct7 == 7'd1 &&
	  muldiv$_start[64])
	$display(v__h443, "Output from DIV/MUL : %h", muldiv$_start[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_inputs &&
	  (inputs__opcode != 5'b01100 && inputs__opcode != 5'b01110 ||
	   inputs__funct7 != 7'd1) &&
	  inputs__opcode[4:2] == 3'b110)
	begin
	  v__h363 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_inputs &&
	  (inputs__opcode != 5'b01100 && inputs__opcode != 5'b01110 ||
	   inputs__funct7 != 7'd1) &&
	  inputs__opcode[4:2] == 3'b110)
	$display(v__h363, "\t Sending inputs to branch unit");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_inputs &&
	  (inputs__opcode != 5'b01100 && inputs__opcode != 5'b01110 ||
	   inputs__funct7 != 7'd1) &&
	  inputs__opcode[4:2] != 3'b110)
	begin
	  v__h307 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_inputs &&
	  (inputs__opcode != 5'b01100 && inputs__opcode != 5'b01110 ||
	   inputs__funct7 != 7'd1) &&
	  inputs__opcode[4:2] != 3'b110)
	$display(v__h307, "\t Sending inputs to Arithmetic unit");
  end
  // synopsys translate_on
endmodule  // mkexecution_unit

