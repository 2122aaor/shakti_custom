//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// On Fri Jan 22 01:17:57 IST 2016
//
//
// Ports:
// Name                         I/O  size props
// RDY__start                     O     1
// RDY__deque_buffer_reset_ready_signal  O     1
// RDY__set_flush                 O     1 const
// result_multiplication_         O   105
// RDY_result_multiplication_     O     1 reg
// ready_                         O     1 const
// RDY_ready_                     O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// _start__operand1               I    32
// _start__operand2               I    32
// _start__destination            I     5
// _start__rob_number             I     4
// _start__fsr                    I    32
// _start__program_counter        I    32
// _set_flush__flush              I     1
// EN__start                      I     1
// EN__deque_buffer_reset_ready_signal  I     1
// EN__set_flush                  I     1
//
// Combinational paths from inputs to outputs:
//   (_set_flush__flush, EN__set_flush) -> RDY__start
//   (_set_flush__flush, EN__set_flush) -> RDY__deque_buffer_reset_ready_signal
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkfpu_spfloating_multiplier(CLK,
				   RST_N,

				   _start__operand1,
				   _start__operand2,
				   _start__destination,
				   _start__rob_number,
				   _start__fsr,
				   _start__program_counter,
				   EN__start,
				   RDY__start,

				   EN__deque_buffer_reset_ready_signal,
				   RDY__deque_buffer_reset_ready_signal,

				   _set_flush__flush,
				   EN__set_flush,
				   RDY__set_flush,

				   result_multiplication_,
				   RDY_result_multiplication_,

				   ready_,
				   RDY_ready_);
  input  CLK;
  input  RST_N;

  // action method _start
  input  [31 : 0] _start__operand1;
  input  [31 : 0] _start__operand2;
  input  [4 : 0] _start__destination;
  input  [3 : 0] _start__rob_number;
  input  [31 : 0] _start__fsr;
  input  [31 : 0] _start__program_counter;
  input  EN__start;
  output RDY__start;

  // action method _deque_buffer_reset_ready_signal
  input  EN__deque_buffer_reset_ready_signal;
  output RDY__deque_buffer_reset_ready_signal;

  // action method _set_flush
  input  _set_flush__flush;
  input  EN__set_flush;
  output RDY__set_flush;

  // value method result_multiplication_
  output [104 : 0] result_multiplication_;
  output RDY_result_multiplication_;

  // value method ready_
  output ready_;
  output RDY_ready_;

  // signals for module outputs
  wire [104 : 0] result_multiplication_;
  wire RDY__deque_buffer_reset_ready_signal,
       RDY__set_flush,
       RDY__start,
       RDY_ready_,
       RDY_result_multiplication_,
       ready_;

  // inlined wires
  wire [135 : 0] ff_input_register_rv$port1__read,
		 ff_input_register_rv$port1__write_1,
		 ff_input_register_rv$port2__read,
		 ff_input_register_rv$port3__read;
  wire [114 : 0] ff_stage3_rv$port3__read;

  // register ff_input_register_rv
  reg [135 : 0] ff_input_register_rv;
  wire [135 : 0] ff_input_register_rv$D_IN;
  wire ff_input_register_rv$EN;

  // register ff_stage3_rv
  reg [114 : 0] ff_stage3_rv;
  wire [114 : 0] ff_stage3_rv$D_IN;
  wire ff_stage3_rv$EN;

  // register rg_exponent_a
  reg [10 : 0] rg_exponent_a;
  wire [10 : 0] rg_exponent_a$D_IN;
  wire rg_exponent_a$EN;

  // register rg_leftzeros
  reg [6 : 0] rg_leftzeros;
  wire [6 : 0] rg_leftzeros$D_IN;
  wire rg_leftzeros$EN;

  // ports of submodule integer_multiplier
  wire [150 : 0] integer_multiplier$result_;
  wire [31 : 0] integer_multiplier$_start__fsr,
		integer_multiplier$_start__operand1,
		integer_multiplier$_start__operand2,
		integer_multiplier$_start__program_counter;
  wire [9 : 0] integer_multiplier$_start__summed_exponent;
  wire [4 : 0] integer_multiplier$_start__destination_address;
  wire [3 : 0] integer_multiplier$_start__rob_number;
  wire integer_multiplier$EN__deque,
       integer_multiplier$EN__set_flush,
       integer_multiplier$EN__start,
       integer_multiplier$RDY__deque,
       integer_multiplier$RDY__start,
       integer_multiplier$RDY_result_,
       integer_multiplier$_set_flush__flush,
       integer_multiplier$_start__infinity,
       integer_multiplier$_start__invalid,
       integer_multiplier$_start__sign,
       integer_multiplier$_start__zero;

  // ports of submodule output_
  wire [104 : 0] output_$D_IN, output_$D_OUT;
  wire output_$CLR, output_$DEQ, output_$EMPTY_N, output_$ENQ, output_$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_flush_all_fifos,
       CAN_FIRE_RL_rl_stage1_after_input_stage,
       CAN_FIRE_RL_rl_stage_3,
       CAN_FIRE__deque_buffer_reset_ready_signal,
       CAN_FIRE__set_flush,
       CAN_FIRE__start,
       WILL_FIRE_RL_rl_flush_all_fifos,
       WILL_FIRE_RL_rl_stage1_after_input_stage,
       WILL_FIRE_RL_rl_stage_3,
       WILL_FIRE__deque_buffer_reset_ready_signal,
       WILL_FIRE__set_flush,
       WILL_FIRE__start;

  // remaining internal signals
  reg [2 : 0] CASE_output_D_OUT_BITS_3_TO_1_0_output_D_OUT_ETC__q1;
  reg IF_integer_multiplier_result___5_BITS_117_TO_1_ETC___d97;
  wire [69 : 0] IF_integer_multiplier_result___5_BITS_47_TO_0__ETC___d69,
		lv_new_mantissa___1__h1964,
		lv_new_mantissa__h1408,
		lv_new_mantissa__h1423;
  wire [63 : 0] x_final_result__h1472;
  wire [31 : 0] _theResult_____1_snd_fst__h2357, lv_fsr__h1438, x__h2353;
  wire [30 : 0] IF_IF_IF_IF_integer_multiplier_result___5_BITS_ETC___d131,
		IF_integer_multiplier_result___5_BIT_66_8_THEN_ETC___d133;
  wire [24 : 0] IF_IF_integer_multiplier_result___5_BITS_117_T_ETC___d101,
		lv_rounded_mantissa__h2224;
  wire [9 : 0] IF_IF_IF_integer_multiplier_result___5_BITS_11_ETC___d106,
	       IF_integer_multiplier_result___5_BIT_77_8_OR_i_ETC___d54,
	       lv_exponent___1__h1962,
	       lv_exponent___1__h2281,
	       lv_exponent__h1425,
	       lv_exponent__h2687,
	       lv_v_shr___1__h1749,
	       x__h3041,
	       x__h3042,
	       y__h3043;
  wire [5 : 0] x__h1655;
  wire [3 : 0] IF_NOT_integer_multiplier_result___5_BIT_64_9__ETC___d151,
	       IF_NOT_integer_multiplier_result___5_BIT_65_2__ETC___d153;
  wire IF_integer_multiplier_result___5_BITS_47_TO_0__ETC___d65,
       NOT_integer_multiplier_result___5_BIT_64_9_4_A_ETC___d113,
       _theResult_____1_fst__h1581,
       _theResult_____5__h1432,
       lv_inexact__h1433,
       lv_roundup___1__h1924,
       lv_roundup___1__h2117,
       lv_roundup___1__h2160,
       lv_underflow__h1428,
       start__operand1_BITS_22_TO_0_65_EQ_0_79_AND_st_ETC___d191,
       start__operand1_BITS_30_TO_23_56_EQ_0b11111111_ETC___d194,
       start__operand1_BITS_30_TO_23_56_EQ_0b11111111_ETC___d202,
       start__operand2_BITS_22_TO_0_69_EQ_0_83_AND_st_ETC___d189,
       x__h1978,
       x__h2130,
       x__h2174,
       x__h3100,
       x__h3316,
       x__h3319,
       x__h3417,
       y__h1936,
       y__h2129,
       y__h2173;

  // action method _start
  assign RDY__start = !ff_input_register_rv$port1__read[135] ;
  assign CAN_FIRE__start = !ff_input_register_rv$port1__read[135] ;
  assign WILL_FIRE__start = EN__start ;

  // action method _deque_buffer_reset_ready_signal
  assign RDY__deque_buffer_reset_ready_signal =
	     (!EN__set_flush || !_set_flush__flush) && output_$EMPTY_N ;
  assign CAN_FIRE__deque_buffer_reset_ready_signal =
	     (!EN__set_flush || !_set_flush__flush) && output_$EMPTY_N ;
  assign WILL_FIRE__deque_buffer_reset_ready_signal =
	     EN__deque_buffer_reset_ready_signal ;

  // action method _set_flush
  assign RDY__set_flush = 1'd1 ;
  assign CAN_FIRE__set_flush = 1'd1 ;
  assign WILL_FIRE__set_flush = EN__set_flush ;

  // value method result_multiplication_
  assign result_multiplication_ =
	     { output_$D_OUT[104:4],
	       CASE_output_D_OUT_BITS_3_TO_1_0_output_D_OUT_ETC__q1,
	       output_$D_OUT[0] } ;
  assign RDY_result_multiplication_ = output_$EMPTY_N ;

  // value method ready_
  assign ready_ = 1'h0 ;
  assign RDY_ready_ = 1'd1 ;

  // submodule integer_multiplier
  mkinteger_multiplier_for_spfmul integer_multiplier(.CLK(CLK),
						     .RST_N(RST_N),
						     ._set_flush__flush(integer_multiplier$_set_flush__flush),
						     ._start__destination_address(integer_multiplier$_start__destination_address),
						     ._start__fsr(integer_multiplier$_start__fsr),
						     ._start__infinity(integer_multiplier$_start__infinity),
						     ._start__invalid(integer_multiplier$_start__invalid),
						     ._start__operand1(integer_multiplier$_start__operand1),
						     ._start__operand2(integer_multiplier$_start__operand2),
						     ._start__program_counter(integer_multiplier$_start__program_counter),
						     ._start__rob_number(integer_multiplier$_start__rob_number),
						     ._start__sign(integer_multiplier$_start__sign),
						     ._start__summed_exponent(integer_multiplier$_start__summed_exponent),
						     ._start__zero(integer_multiplier$_start__zero),
						     .EN__start(integer_multiplier$EN__start),
						     .EN__deque(integer_multiplier$EN__deque),
						     .EN__set_flush(integer_multiplier$EN__set_flush),
						     .RDY__start(integer_multiplier$RDY__start),
						     .RDY__deque(integer_multiplier$RDY__deque),
						     .RDY__set_flush(),
						     .result_(integer_multiplier$result_),
						     .RDY_result_(integer_multiplier$RDY_result_));

  // submodule output_
  FIFO2 #(.width(32'd105), .guarded(32'd1)) output_(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(output_$D_IN),
						    .ENQ(output_$ENQ),
						    .DEQ(output_$DEQ),
						    .CLR(output_$CLR),
						    .D_OUT(output_$D_OUT),
						    .FULL_N(output_$FULL_N),
						    .EMPTY_N(output_$EMPTY_N));

  // rule RL_rl_stage1_after_input_stage
  assign CAN_FIRE_RL_rl_stage1_after_input_stage =
	     ff_input_register_rv[135] && integer_multiplier$RDY__start &&
	     (!EN__set_flush || !_set_flush__flush) ;
  assign WILL_FIRE_RL_rl_stage1_after_input_stage =
	     CAN_FIRE_RL_rl_stage1_after_input_stage ;

  // rule RL_rl_flush_all_fifos
  assign CAN_FIRE_RL_rl_flush_all_fifos = EN__set_flush && _set_flush__flush ;
  assign WILL_FIRE_RL_rl_flush_all_fifos = CAN_FIRE_RL_rl_flush_all_fifos ;

  // rule RL_rl_stage_3
  assign CAN_FIRE_RL_rl_stage_3 = WILL_FIRE_RL_rl_stage_3 ;
  assign WILL_FIRE_RL_rl_stage_3 =
	     integer_multiplier$RDY_result_ &&
	     integer_multiplier$RDY__deque &&
	     output_$FULL_N &&
	     (!EN__set_flush || !_set_flush__flush) ;

  // inlined wires
  assign ff_stage3_rv$port3__read =
	     CAN_FIRE_RL_rl_flush_all_fifos ?
	       115'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       ff_stage3_rv ;
  assign ff_input_register_rv$port1__read =
	     CAN_FIRE_RL_rl_stage1_after_input_stage ?
	       136'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       ff_input_register_rv ;
  assign ff_input_register_rv$port1__write_1 =
	     { 1'd1,
	       _start__operand1[30:23] != 8'd0,
	       _start__operand1[22:0],
	       _start__operand2[30:23] != 8'd0,
	       _start__operand2[22:0],
	       x__h3417,
	       lv_exponent__h2687,
	       _start__rob_number,
	       _start__destination,
	       _start__program_counter,
	       x__h3100,
	       x__h3316,
	       x__h3319,
	       _start__fsr } ;
  assign ff_input_register_rv$port2__read =
	     EN__start ?
	       ff_input_register_rv$port1__write_1 :
	       ff_input_register_rv$port1__read ;
  assign ff_input_register_rv$port3__read =
	     CAN_FIRE_RL_rl_flush_all_fifos ?
	       136'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       ff_input_register_rv$port2__read ;

  // register ff_input_register_rv
  assign ff_input_register_rv$D_IN = ff_input_register_rv$port3__read ;
  assign ff_input_register_rv$EN = 1'b1 ;

  // register ff_stage3_rv
  assign ff_stage3_rv$D_IN = ff_stage3_rv$port3__read ;
  assign ff_stage3_rv$EN = 1'b1 ;

  // register rg_exponent_a
  assign rg_exponent_a$D_IN = 11'd682 ;
  assign rg_exponent_a$EN = CAN_FIRE_RL_rl_flush_all_fifos ;

  // register rg_leftzeros
  assign rg_leftzeros$D_IN = 7'd42 ;
  assign rg_leftzeros$EN = CAN_FIRE_RL_rl_flush_all_fifos ;

  // submodule integer_multiplier
  assign integer_multiplier$_set_flush__flush = 1'd1 ;
  assign integer_multiplier$_start__destination_address =
	     ff_input_register_rv[71:67] ;
  assign integer_multiplier$_start__fsr = ff_input_register_rv[31:0] ;
  assign integer_multiplier$_start__infinity = ff_input_register_rv[34] ;
  assign integer_multiplier$_start__invalid = ff_input_register_rv[33] ;
  assign integer_multiplier$_start__operand1 =
	     { 8'b0, ff_input_register_rv[134:111] } ;
  assign integer_multiplier$_start__operand2 =
	     { 8'b0, ff_input_register_rv[110:87] } ;
  assign integer_multiplier$_start__program_counter =
	     ff_input_register_rv[66:35] ;
  assign integer_multiplier$_start__rob_number = ff_input_register_rv[75:72] ;
  assign integer_multiplier$_start__sign = ff_input_register_rv[86] ;
  assign integer_multiplier$_start__summed_exponent =
	     ff_input_register_rv[85:76] ;
  assign integer_multiplier$_start__zero = ff_input_register_rv[32] ;
  assign integer_multiplier$EN__start =
	     ff_input_register_rv[135] && integer_multiplier$RDY__start &&
	     (!EN__set_flush || !_set_flush__flush) ;
  assign integer_multiplier$EN__deque =
	     integer_multiplier$RDY_result_ &&
	     integer_multiplier$RDY__deque &&
	     output_$FULL_N &&
	     (!EN__set_flush || !_set_flush__flush) ;
  assign integer_multiplier$EN__set_flush = CAN_FIRE_RL_rl_flush_all_fifos ;

  // submodule output_
  assign output_$D_IN =
	     { integer_multiplier$result_[150:146],
	       lv_fsr__h1438,
	       x_final_result__h1472,
	       IF_NOT_integer_multiplier_result___5_BIT_65_2__ETC___d153 } ;
  assign output_$ENQ = WILL_FIRE_RL_rl_stage_3 ;
  assign output_$DEQ = EN__deque_buffer_reset_ready_signal ;
  assign output_$CLR = CAN_FIRE_RL_rl_flush_all_fifos ;

  // remaining internal signals
  assign IF_IF_IF_IF_integer_multiplier_result___5_BITS_ETC___d131 =
	     (IF_IF_IF_integer_multiplier_result___5_BITS_11_ETC___d106[8] ||
	      IF_IF_IF_integer_multiplier_result___5_BITS_11_ETC___d106[7:0] ==
	      8'd255) ?
	       ((integer_multiplier$result_[117:115] == 3'b001 ||
		 integer_multiplier$result_[117:115] == 3'b010 &&
		 !integer_multiplier$result_[67] ||
		 integer_multiplier$result_[117:115] == 3'b011 &&
		 integer_multiplier$result_[67]) ?
		  31'h7F7FFFFF :
		  31'h7F800000) :
	       { IF_IF_IF_integer_multiplier_result___5_BITS_11_ETC___d106[7:0],
		 IF_IF_integer_multiplier_result___5_BITS_117_T_ETC___d101[22:0] } ;
  assign IF_IF_IF_integer_multiplier_result___5_BITS_11_ETC___d106 =
	     IF_IF_integer_multiplier_result___5_BITS_117_T_ETC___d101[24] ?
	       lv_exponent___1__h2281 :
	       lv_exponent__h1425 ;
  assign IF_IF_integer_multiplier_result___5_BITS_117_T_ETC___d101 =
	     IF_integer_multiplier_result___5_BITS_117_TO_1_ETC___d97 ?
	       lv_rounded_mantissa__h2224 :
	       { 1'b0,
		 IF_integer_multiplier_result___5_BITS_47_TO_0__ETC___d69[68:45] } ;
  assign IF_NOT_integer_multiplier_result___5_BIT_64_9__ETC___d151 =
	     NOT_integer_multiplier_result___5_BIT_64_9_4_A_ETC___d113 ?
	       4'd7 :
	       ((!integer_multiplier$result_[64] &&
		 !integer_multiplier$result_[66] &&
		 lv_underflow__h1428) ?
		  4'd9 :
		  4'd11) ;
  assign IF_NOT_integer_multiplier_result___5_BIT_65_2__ETC___d153 =
	     (!integer_multiplier$result_[65] &&
	      (integer_multiplier$result_[64] ||
	       integer_multiplier$result_[66] ||
	       IF_integer_multiplier_result___5_BITS_47_TO_0__ETC___d65 &&
	       !IF_IF_IF_integer_multiplier_result___5_BITS_11_ETC___d106[8] &&
	       IF_IF_IF_integer_multiplier_result___5_BITS_11_ETC___d106[7:0] !=
	       8'd255 &&
	       !lv_inexact__h1433)) ?
	       4'd0 :
	       (integer_multiplier$result_[65] ?
		  4'd3 :
		  IF_NOT_integer_multiplier_result___5_BIT_64_9__ETC___d151) ;
  assign IF_integer_multiplier_result___5_BITS_47_TO_0__ETC___d65 =
	     lv_new_mantissa__h1423[69] ?
	       !integer_multiplier$result_[77] &&
	       integer_multiplier$result_[76:68] != 9'd0 :
	       lv_new_mantissa__h1423[68] &&
	       !integer_multiplier$result_[77] &&
	       integer_multiplier$result_[76:68] != 9'd0 ;
  assign IF_integer_multiplier_result___5_BITS_47_TO_0__ETC___d69 =
	     lv_new_mantissa__h1423[69] ?
	       lv_new_mantissa___1__h1964 :
	       lv_new_mantissa__h1423 ;
  assign IF_integer_multiplier_result___5_BIT_66_8_THEN_ETC___d133 =
	     integer_multiplier$result_[66] ?
	       31'h7F800000 :
	       (lv_underflow__h1428 ?
		  { 8'd0,
		    IF_IF_integer_multiplier_result___5_BITS_117_T_ETC___d101[22:0] } :
		  IF_IF_IF_IF_integer_multiplier_result___5_BITS_ETC___d131) ;
  assign IF_integer_multiplier_result___5_BIT_77_8_OR_i_ETC___d54 =
	     (integer_multiplier$result_[77] ||
	      integer_multiplier$result_[76:68] == 9'd0) ?
	       lv_v_shr___1__h1749 :
	       10'd0 ;
  assign NOT_integer_multiplier_result___5_BIT_64_9_4_A_ETC___d113 =
	     !integer_multiplier$result_[64] &&
	     !integer_multiplier$result_[66] &&
	     IF_integer_multiplier_result___5_BITS_47_TO_0__ETC___d65 &&
	     (IF_IF_IF_integer_multiplier_result___5_BITS_11_ETC___d106[8] ||
	      IF_IF_IF_integer_multiplier_result___5_BITS_11_ETC___d106[7:0] ==
	      8'd255) ;
  assign _theResult_____1_fst__h1581 =
	     !integer_multiplier$result_[65] &&
	     NOT_integer_multiplier_result___5_BIT_64_9_4_A_ETC___d113 ;
  assign _theResult_____1_snd_fst__h2357 =
	     { integer_multiplier$result_[67],
	       integer_multiplier$result_[64] ?
		 31'd0 :
		 IF_integer_multiplier_result___5_BIT_66_8_THEN_ETC___d133 } ;
  assign _theResult_____5__h1432 =
	     IF_integer_multiplier_result___5_BITS_47_TO_0__ETC___d69[42:0] !=
	     43'd0 ||
	     lv_new_mantissa__h1423[69] && lv_new_mantissa__h1423[45] ;
  assign lv_exponent___1__h1962 = integer_multiplier$result_[77:68] + 10'd1 ;
  assign lv_exponent___1__h2281 = lv_exponent__h1425 + 10'd1 ;
  assign lv_exponent__h1425 =
	     lv_new_mantissa__h1423[69] ?
	       lv_exponent___1__h1962 :
	       integer_multiplier$result_[77:68] ;
  assign lv_exponent__h2687 = x__h3041 - 10'b0001111111 ;
  assign lv_fsr__h1438 =
	     { integer_multiplier$result_[141:120],
	       integer_multiplier$result_[66],
	       integer_multiplier$result_[64],
	       integer_multiplier$result_[117:115],
	       integer_multiplier$result_[65],
	       1'b0,
	       _theResult_____1_fst__h1581,
	       lv_underflow__h1428,
	       lv_inexact__h1433 } ;
  assign lv_inexact__h1433 = x__h2174 | _theResult_____5__h1432 ;
  assign lv_new_mantissa___1__h1964 = { 1'd0, lv_new_mantissa__h1423[69:1] } ;
  assign lv_new_mantissa__h1408 =
	     { integer_multiplier$result_[47:0], 22'd0 } ;
  assign lv_new_mantissa__h1423 = lv_new_mantissa__h1408 >> x__h1655 ;
  assign lv_rounded_mantissa__h2224 =
	     { 1'b0,
	       IF_integer_multiplier_result___5_BITS_47_TO_0__ETC___d69[68:45] } +
	     25'd1 ;
  assign lv_roundup___1__h1924 =
	     IF_integer_multiplier_result___5_BITS_47_TO_0__ETC___d69[44] &
	     y__h1936 ;
  assign lv_roundup___1__h2117 =
	     IF_integer_multiplier_result___5_BITS_47_TO_0__ETC___d69[44] &
	     y__h2129 ;
  assign lv_roundup___1__h2160 = lv_inexact__h1433 & y__h2173 ;
  assign lv_underflow__h1428 =
	     lv_new_mantissa__h1423[69] ?
	       integer_multiplier$result_[77] ||
	       integer_multiplier$result_[76:68] == 9'd0 :
	       !lv_new_mantissa__h1423[68] ||
	       integer_multiplier$result_[77] ||
	       integer_multiplier$result_[76:68] == 9'd0 ;
  assign lv_v_shr___1__h1749 = 10'd1 - integer_multiplier$result_[77:68] ;
  assign start__operand1_BITS_22_TO_0_65_EQ_0_79_AND_st_ETC___d191 =
	     _start__operand1[22:0] == 23'd0 &
	     _start__operand1[30:23] == 8'd0 ;
  assign start__operand1_BITS_30_TO_23_56_EQ_0b11111111_ETC___d194 =
	     (_start__operand1[30:23] == 8'b11111111 &&
	      _start__operand1[22:0] == 23'd0 ||
	      _start__operand2[30:23] == 8'b11111111 &&
	      _start__operand2[22:0] == 23'd0) &&
	     !start__operand2_BITS_22_TO_0_69_EQ_0_83_AND_st_ETC___d189 &&
	     !start__operand1_BITS_22_TO_0_65_EQ_0_79_AND_st_ETC___d191 ;
  assign start__operand1_BITS_30_TO_23_56_EQ_0b11111111_ETC___d202 =
	     (_start__operand1[30:23] == 8'b11111111 &&
	      _start__operand1[22:0] == 23'd0 ||
	      _start__operand2[30:23] == 8'b11111111 &&
	      _start__operand2[22:0] == 23'd0) &&
	     (start__operand2_BITS_22_TO_0_69_EQ_0_83_AND_st_ETC___d189 ||
	      start__operand1_BITS_22_TO_0_65_EQ_0_79_AND_st_ETC___d191) ;
  assign start__operand2_BITS_22_TO_0_69_EQ_0_83_AND_st_ETC___d189 =
	     _start__operand2[22:0] == 23'd0 &
	     _start__operand2[30:23] == 8'd0 ;
  assign x__h1655 =
	     IF_integer_multiplier_result___5_BIT_77_8_OR_i_ETC___d54[6] ?
	       6'd63 :
	       IF_integer_multiplier_result___5_BIT_77_8_OR_i_ETC___d54[5:0] ;
  assign x__h1978 =
	     IF_integer_multiplier_result___5_BITS_47_TO_0__ETC___d69[45] |
	     IF_integer_multiplier_result___5_BITS_47_TO_0__ETC___d69[43] ;
  assign x__h2130 =
	     IF_integer_multiplier_result___5_BITS_47_TO_0__ETC___d69[43] |
	     _theResult_____5__h1432 ;
  assign x__h2174 =
	     IF_integer_multiplier_result___5_BITS_47_TO_0__ETC___d69[44] |
	     IF_integer_multiplier_result___5_BITS_47_TO_0__ETC___d69[43] ;
  assign x__h2353 =
	     integer_multiplier$result_[65] ?
	       32'h7FFFFFFF :
	       _theResult_____1_snd_fst__h2357 ;
  assign x__h3041 = x__h3042 + y__h3043 ;
  assign x__h3042 = { 2'b0, _start__operand1[30:23] } ;
  assign x__h3100 =
	     (_start__operand1[30:23] != 8'b11111111 ||
	      _start__operand1[22:0] == 23'd0) &&
	     (_start__operand2[30:23] != 8'b11111111 ||
	      _start__operand2[22:0] == 23'd0) &&
	     start__operand1_BITS_30_TO_23_56_EQ_0b11111111_ETC___d194 ;
  assign x__h3316 =
	     _start__operand1[30:23] == 8'b11111111 &&
	     _start__operand1[22:0] != 23'd0 ||
	     _start__operand2[30:23] == 8'b11111111 &&
	     _start__operand2[22:0] != 23'd0 ||
	     start__operand1_BITS_30_TO_23_56_EQ_0b11111111_ETC___d202 ;
  assign x__h3319 =
	     (_start__operand1[30:23] != 8'b11111111 ||
	      _start__operand1[22:0] == 23'd0) &&
	     (_start__operand2[30:23] != 8'b11111111 ||
	      _start__operand2[22:0] == 23'd0) &&
	     (_start__operand1[30:23] != 8'b11111111 ||
	      _start__operand1[22:0] != 23'd0) &&
	     (_start__operand2[30:23] != 8'b11111111 ||
	      _start__operand2[22:0] != 23'd0) &&
	     (start__operand1_BITS_22_TO_0_65_EQ_0_79_AND_st_ETC___d191 ||
	      start__operand2_BITS_22_TO_0_69_EQ_0_83_AND_st_ETC___d189) ;
  assign x__h3417 = _start__operand1[31] ^ _start__operand2[31] ;
  assign x_final_result__h1472 = { 32'd0, x__h2353 } ;
  assign y__h1936 = x__h1978 | _theResult_____5__h1432 ;
  assign y__h2129 = x__h2130 | integer_multiplier$result_[67] ;
  assign y__h2173 = ~integer_multiplier$result_[67] ;
  assign y__h3043 = { 2'b0, _start__operand2[30:23] } ;
  always@(output_$D_OUT)
  begin
    case (output_$D_OUT[3:1])
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4:
	  CASE_output_D_OUT_BITS_3_TO_1_0_output_D_OUT_ETC__q1 =
	      output_$D_OUT[3:1];
      default: CASE_output_D_OUT_BITS_3_TO_1_0_output_D_OUT_ETC__q1 = 3'd5;
    endcase
  end
  always@(integer_multiplier$result_ or
	  lv_inexact__h1433 or
	  lv_roundup___1__h1924 or
	  lv_roundup___1__h2160 or lv_roundup___1__h2117)
  begin
    case (integer_multiplier$result_[117:115])
      3'b0:
	  IF_integer_multiplier_result___5_BITS_117_TO_1_ETC___d97 =
	      lv_roundup___1__h1924;
      3'b011:
	  IF_integer_multiplier_result___5_BITS_117_TO_1_ETC___d97 =
	      lv_roundup___1__h2160;
      3'b100:
	  IF_integer_multiplier_result___5_BITS_117_TO_1_ETC___d97 =
	      lv_roundup___1__h2117;
      default: IF_integer_multiplier_result___5_BITS_117_TO_1_ETC___d97 =
		   integer_multiplier$result_[117:115] == 3'b010 &&
		   lv_inexact__h1433 & integer_multiplier$result_[67];
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        ff_input_register_rv <= `BSV_ASSIGNMENT_DELAY
	    136'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	ff_stage3_rv <= `BSV_ASSIGNMENT_DELAY
	    115'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	rg_exponent_a <= `BSV_ASSIGNMENT_DELAY 11'd682;
	rg_leftzeros <= `BSV_ASSIGNMENT_DELAY 7'd42;
      end
    else
      begin
        if (ff_input_register_rv$EN)
	  ff_input_register_rv <= `BSV_ASSIGNMENT_DELAY
	      ff_input_register_rv$D_IN;
	if (ff_stage3_rv$EN)
	  ff_stage3_rv <= `BSV_ASSIGNMENT_DELAY ff_stage3_rv$D_IN;
	if (rg_exponent_a$EN)
	  rg_exponent_a <= `BSV_ASSIGNMENT_DELAY rg_exponent_a$D_IN;
	if (rg_leftzeros$EN)
	  rg_leftzeros <= `BSV_ASSIGNMENT_DELAY rg_leftzeros$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    ff_input_register_rv = 136'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ff_stage3_rv = 115'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_exponent_a = 11'h2AA;
    rg_leftzeros = 7'h2A;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkfpu_spfloating_multiplier

