//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// On Fri Jan 22 01:18:01 IST 2016
//
//
// Ports:
// Name                         I/O  size props
// RDY__start                     O     1 const
// fpu_result_                    O   106
// RDY_fpu_result_                O     1 const
// RDY__set_flush                 O     1 const
// inputs_taken_                  O     1
// RDY_inputs_taken_              O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// _start_operand1                I    64
// _start_operand2                I    64
// _start_operand3                I    64
// _start_instruction             I    32
// _start_destination             I     5
// _start_fsr                     I    32
// _start_rob_number              I     4
// _start_pc                      I    32
// _set_flush_f                   I     1
// EN__start                      I     1
// EN__set_flush                  I     1
//
// Combinational paths from inputs to outputs:
//   (_start_instruction,
//    _set_flush_f,
//    EN__start,
//    EN__set_flush) -> inputs_taken_
//   (_set_flush_f, EN__set_flush) -> fpu_result_
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkfpu(CLK,
	     RST_N,

	     _start_operand1,
	     _start_operand2,
	     _start_operand3,
	     _start_instruction,
	     _start_destination,
	     _start_fsr,
	     _start_rob_number,
	     _start_pc,
	     EN__start,
	     RDY__start,

	     fpu_result_,
	     RDY_fpu_result_,

	     _set_flush_f,
	     EN__set_flush,
	     RDY__set_flush,

	     inputs_taken_,
	     RDY_inputs_taken_);
  input  CLK;
  input  RST_N;

  // action method _start
  input  [63 : 0] _start_operand1;
  input  [63 : 0] _start_operand2;
  input  [63 : 0] _start_operand3;
  input  [31 : 0] _start_instruction;
  input  [4 : 0] _start_destination;
  input  [31 : 0] _start_fsr;
  input  [3 : 0] _start_rob_number;
  input  [31 : 0] _start_pc;
  input  EN__start;
  output RDY__start;

  // value method fpu_result_
  output [105 : 0] fpu_result_;
  output RDY_fpu_result_;

  // action method _set_flush
  input  _set_flush_f;
  input  EN__set_flush;
  output RDY__set_flush;

  // value method inputs_taken_
  output inputs_taken_;
  output RDY_inputs_taken_;

  // signals for module outputs
  wire [105 : 0] fpu_result_;
  wire RDY__set_flush,
       RDY__start,
       RDY_fpu_result_,
       RDY_inputs_taken_,
       inputs_taken_;

  // inlined wires
  reg [105 : 0] wr_result$wget;
  wire [141 : 0] inst_dpfpu_add_sub_ff_stage1_rv$port1__read,
		 inst_dpfpu_add_sub_ff_stage1_rv$port1__write_1,
		 inst_dpfpu_add_sub_ff_stage1_rv$port2__read;
  wire [105 : 0] inst_dpfpu_add_sub_ff_final_out_rv$port1__read,
		 inst_dpfpu_add_sub_ff_final_out_rv$port1__write_1,
		 inst_dpfpu_add_sub_ff_final_out_rv$port2__read,
		 inst_dpfpu_fclass_ff_final_out_rv$port1__read,
		 inst_dpfpu_fclass_ff_final_out_rv$port1__write_1,
		 inst_dpfpu_fclass_ff_final_out_rv$port2__read,
		 inst_dpfpu_sign_injection_ff_final_out_rv$port1__read,
		 inst_dpfpu_sign_injection_ff_final_out_rv$port1__write_1,
		 inst_dpfpu_sign_injection_ff_final_out_rv$port2__read,
		 inst_spfpu_add_sub_ff_final_out_rv$port1__read,
		 inst_spfpu_add_sub_ff_final_out_rv$port1__write_1,
		 inst_spfpu_add_sub_ff_final_out_rv$port2__read,
		 inst_spfpu_fclass_ff_final_out_rv$port1__read,
		 inst_spfpu_fclass_ff_final_out_rv$port1__write_1,
		 inst_spfpu_fclass_ff_final_out_rv$port2__read,
		 inst_spfpu_sign_injection_ff_final_out_rv$port1__read,
		 inst_spfpu_sign_injection_ff_final_out_rv$port1__write_1,
		 inst_spfpu_sign_injection_ff_final_out_rv$port2__read;
  wire [85 : 0] inst_dpfpu_add_sub_ff_stage2_rv$port1__read,
		inst_dpfpu_add_sub_ff_stage2_rv$port1__write_1,
		inst_dpfpu_add_sub_ff_stage2_rv$port2__read;
  wire [80 : 0] inst_spfpu_add_sub_ff_stage1_rv$port1__read,
		inst_spfpu_add_sub_ff_stage1_rv$port1__write_1,
		inst_spfpu_add_sub_ff_stage1_rv$port2__read;
  wire [53 : 0] inst_spfpu_add_sub_ff_stage2_rv$port1__read,
		inst_spfpu_add_sub_ff_stage2_rv$port1__write_1,
		inst_spfpu_add_sub_ff_stage2_rv$port2__read;
  wire [32 : 0] wr_instruction$wget;
  wire inst_dpfpu_add_sub_ff_stage1_rv$EN_port1__write,
       inst_dpfpu_fclass_ff_final_out_rv$EN_port1__write,
       inst_dpfpu_sign_injection_ff_final_out_rv$EN_port1__write,
       inst_spfpu_add_sub_ff_stage1_rv$EN_port1__write,
       inst_spfpu_fclass_ff_final_out_rv$EN_port1__write,
       inst_spfpu_sign_injection_ff_final_out_rv$EN_port1__write,
       wr_inputs_taken$whas,
       wr_result$whas;

  // register inst_dpfpu_add_sub_ff_final_out_rv
  reg [105 : 0] inst_dpfpu_add_sub_ff_final_out_rv;
  wire [105 : 0] inst_dpfpu_add_sub_ff_final_out_rv$D_IN;
  wire inst_dpfpu_add_sub_ff_final_out_rv$EN;

  // register inst_dpfpu_add_sub_ff_stage1_rv
  reg [141 : 0] inst_dpfpu_add_sub_ff_stage1_rv;
  wire [141 : 0] inst_dpfpu_add_sub_ff_stage1_rv$D_IN;
  wire inst_dpfpu_add_sub_ff_stage1_rv$EN;

  // register inst_dpfpu_add_sub_ff_stage2_rv
  reg [85 : 0] inst_dpfpu_add_sub_ff_stage2_rv;
  wire [85 : 0] inst_dpfpu_add_sub_ff_stage2_rv$D_IN;
  wire inst_dpfpu_add_sub_ff_stage2_rv$EN;

  // register inst_dpfpu_add_sub_rg_ready_signal
  reg inst_dpfpu_add_sub_rg_ready_signal;
  wire inst_dpfpu_add_sub_rg_ready_signal$D_IN,
       inst_dpfpu_add_sub_rg_ready_signal$EN;

  // register inst_dpfpu_fclass_ff_final_out_rv
  reg [105 : 0] inst_dpfpu_fclass_ff_final_out_rv;
  wire [105 : 0] inst_dpfpu_fclass_ff_final_out_rv$D_IN;
  wire inst_dpfpu_fclass_ff_final_out_rv$EN;

  // register inst_dpfpu_fclass_rg_ready_signal
  reg inst_dpfpu_fclass_rg_ready_signal;
  wire inst_dpfpu_fclass_rg_ready_signal$D_IN,
       inst_dpfpu_fclass_rg_ready_signal$EN;

  // register inst_dpfpu_sign_injection_ff_final_out_rv
  reg [105 : 0] inst_dpfpu_sign_injection_ff_final_out_rv;
  wire [105 : 0] inst_dpfpu_sign_injection_ff_final_out_rv$D_IN;
  wire inst_dpfpu_sign_injection_ff_final_out_rv$EN;

  // register inst_dpfpu_sign_injection_rg_ready_signal
  reg inst_dpfpu_sign_injection_rg_ready_signal;
  wire inst_dpfpu_sign_injection_rg_ready_signal$D_IN,
       inst_dpfpu_sign_injection_rg_ready_signal$EN;

  // register inst_spfpu_add_sub_ff_final_out_rv
  reg [105 : 0] inst_spfpu_add_sub_ff_final_out_rv;
  wire [105 : 0] inst_spfpu_add_sub_ff_final_out_rv$D_IN;
  wire inst_spfpu_add_sub_ff_final_out_rv$EN;

  // register inst_spfpu_add_sub_ff_stage1_rv
  reg [80 : 0] inst_spfpu_add_sub_ff_stage1_rv;
  wire [80 : 0] inst_spfpu_add_sub_ff_stage1_rv$D_IN;
  wire inst_spfpu_add_sub_ff_stage1_rv$EN;

  // register inst_spfpu_add_sub_ff_stage2_rv
  reg [53 : 0] inst_spfpu_add_sub_ff_stage2_rv;
  wire [53 : 0] inst_spfpu_add_sub_ff_stage2_rv$D_IN;
  wire inst_spfpu_add_sub_ff_stage2_rv$EN;

  // register inst_spfpu_add_sub_rg_ready_signal
  reg inst_spfpu_add_sub_rg_ready_signal;
  wire inst_spfpu_add_sub_rg_ready_signal$D_IN,
       inst_spfpu_add_sub_rg_ready_signal$EN;

  // register inst_spfpu_fclass_ff_final_out_rv
  reg [105 : 0] inst_spfpu_fclass_ff_final_out_rv;
  wire [105 : 0] inst_spfpu_fclass_ff_final_out_rv$D_IN;
  wire inst_spfpu_fclass_ff_final_out_rv$EN;

  // register inst_spfpu_fclass_rg_ready_signal
  reg inst_spfpu_fclass_rg_ready_signal;
  wire inst_spfpu_fclass_rg_ready_signal$D_IN,
       inst_spfpu_fclass_rg_ready_signal$EN;

  // register inst_spfpu_sign_injection_ff_final_out_rv
  reg [105 : 0] inst_spfpu_sign_injection_ff_final_out_rv;
  wire [105 : 0] inst_spfpu_sign_injection_ff_final_out_rv$D_IN;
  wire inst_spfpu_sign_injection_ff_final_out_rv$EN;

  // register inst_spfpu_sign_injection_rg_ready_signal
  reg inst_spfpu_sign_injection_rg_ready_signal;
  wire inst_spfpu_sign_injection_rg_ready_signal$D_IN,
       inst_spfpu_sign_injection_rg_ready_signal$EN;

  // ports of submodule inst_dpfpu_divider
  wire [104 : 0] inst_dpfpu_divider$final_result_;
  wire [63 : 0] inst_dpfpu_divider$_start_operand1,
		inst_dpfpu_divider$_start_operand2;
  wire [31 : 0] inst_dpfpu_divider$_start_fsr, inst_dpfpu_divider$_start_pc;
  wire [4 : 0] inst_dpfpu_divider$_start_destination;
  wire [3 : 0] inst_dpfpu_divider$_start_rob_number;
  wire inst_dpfpu_divider$EN__deque_buffer_reset_ready_signal,
       inst_dpfpu_divider$EN__set_flush,
       inst_dpfpu_divider$EN__start,
       inst_dpfpu_divider$RDY__deque_buffer_reset_ready_signal,
       inst_dpfpu_divider$RDY__start,
       inst_dpfpu_divider$RDY_final_result_,
       inst_dpfpu_divider$_set_flush_f;

  // ports of submodule inst_fpu_compare_min_max
  wire [104 : 0] inst_fpu_compare_min_max$result_;
  wire [63 : 0] inst_fpu_compare_min_max$_start_operand1,
		inst_fpu_compare_min_max$_start_operand2;
  wire [31 : 0] inst_fpu_compare_min_max$_start_fsr,
		inst_fpu_compare_min_max$_start_pc;
  wire [4 : 0] inst_fpu_compare_min_max$_start_destination;
  wire [3 : 0] inst_fpu_compare_min_max$_start_rob_number;
  wire [2 : 0] inst_fpu_compare_min_max$_start_which_cmp_instr;
  wire inst_fpu_compare_min_max$EN__deque_buffer,
       inst_fpu_compare_min_max$EN__set_flush,
       inst_fpu_compare_min_max$EN__start,
       inst_fpu_compare_min_max$RDY__deque_buffer,
       inst_fpu_compare_min_max$RDY__start,
       inst_fpu_compare_min_max$RDY_result_,
       inst_fpu_compare_min_max$_set_flush_f,
       inst_fpu_compare_min_max$_start_cmp_or_min_max,
       inst_fpu_compare_min_max$_start_is_dp;

  // ports of submodule inst_fpu_convert_sp_dp
  wire [104 : 0] inst_fpu_convert_sp_dp$result_;
  wire [63 : 0] inst_fpu_convert_sp_dp$_start_input_fp;
  wire [31 : 0] inst_fpu_convert_sp_dp$_start_fsr,
		inst_fpu_convert_sp_dp$_start_pc;
  wire [4 : 0] inst_fpu_convert_sp_dp$_start_destination;
  wire [3 : 0] inst_fpu_convert_sp_dp$_start_rob_number;
  wire inst_fpu_convert_sp_dp$EN__deque_buffer,
       inst_fpu_convert_sp_dp$EN__set_flush,
       inst_fpu_convert_sp_dp$EN__start,
       inst_fpu_convert_sp_dp$RDY__deque_buffer,
       inst_fpu_convert_sp_dp$RDY__start,
       inst_fpu_convert_sp_dp$RDY_result_,
       inst_fpu_convert_sp_dp$_set_flush_f,
       inst_fpu_convert_sp_dp$_start_is_dp;

  // ports of submodule inst_fpu_int_to_fp
  wire [104 : 0] inst_fpu_int_to_fp$result_;
  wire [63 : 0] inst_fpu_int_to_fp$_start_inp_int;
  wire [31 : 0] inst_fpu_int_to_fp$_start_fsr,
		inst_fpu_int_to_fp$_start_instruction,
		inst_fpu_int_to_fp$_start_pc;
  wire [4 : 0] inst_fpu_int_to_fp$_start__destination;
  wire [3 : 0] inst_fpu_int_to_fp$_start_rob_number;
  wire inst_fpu_int_to_fp$EN__deque_buffer,
       inst_fpu_int_to_fp$EN__set_flush,
       inst_fpu_int_to_fp$EN__start,
       inst_fpu_int_to_fp$RDY__deque_buffer,
       inst_fpu_int_to_fp$RDY__start,
       inst_fpu_int_to_fp$RDY_result_,
       inst_fpu_int_to_fp$_set_flush_f;

  // ports of submodule inst_spfloating_multiplier
  wire [104 : 0] inst_spfloating_multiplier$result_multiplication_;
  wire [31 : 0] inst_spfloating_multiplier$_start__fsr,
		inst_spfloating_multiplier$_start__operand1,
		inst_spfloating_multiplier$_start__operand2,
		inst_spfloating_multiplier$_start__program_counter;
  wire [4 : 0] inst_spfloating_multiplier$_start__destination;
  wire [3 : 0] inst_spfloating_multiplier$_start__rob_number;
  wire inst_spfloating_multiplier$EN__deque_buffer_reset_ready_signal,
       inst_spfloating_multiplier$EN__set_flush,
       inst_spfloating_multiplier$EN__start,
       inst_spfloating_multiplier$RDY__deque_buffer_reset_ready_signal,
       inst_spfloating_multiplier$RDY__start,
       inst_spfloating_multiplier$RDY_result_multiplication_,
       inst_spfloating_multiplier$_set_flush__flush;

  // ports of submodule inst_spfm_add_sub
  wire [104 : 0] inst_spfm_add_sub$get_result;
  wire [31 : 0] inst_spfm_add_sub$_start_fsr,
		inst_spfm_add_sub$_start_operand1,
		inst_spfm_add_sub$_start_operand2,
		inst_spfm_add_sub$_start_operand3;
  wire inst_spfm_add_sub$EN__start,
       inst_spfm_add_sub$EN_deque_buffer,
       inst_spfm_add_sub$RDY__start,
       inst_spfm_add_sub$RDY_deque_buffer,
       inst_spfm_add_sub$RDY_get_result,
       inst_spfm_add_sub$_start__negate,
       inst_spfm_add_sub$_start_operation;

  // ports of submodule inst_spfp_to_int
  wire [104 : 0] inst_spfp_to_int$get_result;
  wire [31 : 0] inst_spfp_to_int$_start_fsr, inst_spfp_to_int$_start_input_sp;
  wire inst_spfp_to_int$EN__start,
       inst_spfp_to_int$EN_deque_buffer,
       inst_spfp_to_int$RDY__start,
       inst_spfp_to_int$RDY_deque_buffer,
       inst_spfp_to_int$RDY_get_result,
       inst_spfp_to_int$_start_convert_unsigned;

  // ports of submodule inst_spfpu_divider
  wire [104 : 0] inst_spfpu_divider$final_result_;
  wire [31 : 0] inst_spfpu_divider$_start_fsr,
		inst_spfpu_divider$_start_operand1,
		inst_spfpu_divider$_start_operand2,
		inst_spfpu_divider$_start_pc;
  wire [4 : 0] inst_spfpu_divider$_start_destination;
  wire [3 : 0] inst_spfpu_divider$_start_rob_number;
  wire inst_spfpu_divider$EN__deque_buffer_reset_ready_signal,
       inst_spfpu_divider$EN__set_flush,
       inst_spfpu_divider$EN__start,
       inst_spfpu_divider$RDY__deque_buffer_reset_ready_signal,
       inst_spfpu_divider$RDY__start,
       inst_spfpu_divider$RDY_final_result_,
       inst_spfpu_divider$_set_flush_f;

  // ports of submodule inst_spfpu_sqrt
  wire [104 : 0] inst_spfpu_sqrt$get_result;
  wire [31 : 0] inst_spfpu_sqrt$_start_fsr,
		inst_spfpu_sqrt$_start_inp,
		inst_spfpu_sqrt$_start_pc;
  wire [4 : 0] inst_spfpu_sqrt$_start_destination;
  wire [3 : 0] inst_spfpu_sqrt$_start_rob_number;
  wire inst_spfpu_sqrt$EN__start,
       inst_spfpu_sqrt$EN_deque_buffer,
       inst_spfpu_sqrt$RDY__start,
       inst_spfpu_sqrt$RDY_deque_buffer,
       inst_spfpu_sqrt$RDY_get_result;

  // rule scheduling signals
  wire CAN_FIRE_RL_inst_dpfpu_add_sub_rl_flush,
       CAN_FIRE_RL_inst_dpfpu_add_sub_rl_stage2,
       CAN_FIRE_RL_inst_dpfpu_add_sub_rl_stage3,
       CAN_FIRE_RL_inst_dpfpu_fclass_rl_flush,
       CAN_FIRE_RL_inst_dpfpu_sign_injection_rl_flush,
       CAN_FIRE_RL_inst_spfpu_add_sub_rl_flush,
       CAN_FIRE_RL_inst_spfpu_add_sub_rl_stage2,
       CAN_FIRE_RL_inst_spfpu_add_sub_rl_stage3,
       CAN_FIRE_RL_inst_spfpu_fclass_rl_flush,
       CAN_FIRE_RL_inst_spfpu_sign_injection_rl_flush,
       CAN_FIRE_RL_rl_flush_all_fifos,
       CAN_FIRE_RL_rl_get_output_from_dpfclass,
       CAN_FIRE_RL_rl_get_output_from_dpfpu_add_sub,
       CAN_FIRE_RL_rl_get_output_from_dpfpu_divider,
       CAN_FIRE_RL_rl_get_output_from_dpfpu_sign_injection,
       CAN_FIRE_RL_rl_get_output_from_fm_add_sub,
       CAN_FIRE_RL_rl_get_output_from_fp_to_int,
       CAN_FIRE_RL_rl_get_output_from_fpu_compare_min_max,
       CAN_FIRE_RL_rl_get_output_from_fpu_convert_sp_dp,
       CAN_FIRE_RL_rl_get_output_from_fpu_int_to_fp,
       CAN_FIRE_RL_rl_get_output_from_spfclass,
       CAN_FIRE_RL_rl_get_output_from_spfloating_multiplier,
       CAN_FIRE_RL_rl_get_output_from_spfpu_add_sub,
       CAN_FIRE_RL_rl_get_output_from_spfpu_divider,
       CAN_FIRE_RL_rl_get_output_from_spfpu_sign_injection,
       CAN_FIRE_RL_rl_get_output_from_spfpu_sqrt,
       CAN_FIRE_RL_rl_give_inputs_to_dpfpu_divider,
       CAN_FIRE_RL_rl_give_inputs_to_fm_add_sub,
       CAN_FIRE_RL_rl_give_inputs_to_fp_to_int,
       CAN_FIRE_RL_rl_give_inputs_to_fpu_add_sub,
       CAN_FIRE_RL_rl_give_inputs_to_fpu_compare_min_max,
       CAN_FIRE_RL_rl_give_inputs_to_fpu_convert_sp_dp,
       CAN_FIRE_RL_rl_give_inputs_to_fpu_int_to_fp,
       CAN_FIRE_RL_rl_give_inputs_to_fpu_sign_injection,
       CAN_FIRE_RL_rl_give_inputs_to_spfloating_classify,
       CAN_FIRE_RL_rl_give_inputs_to_spfloating_multiplier,
       CAN_FIRE_RL_rl_give_inputs_to_spfpu_divider,
       CAN_FIRE_RL_rl_give_inputs_to_spfpu_sqrt,
       CAN_FIRE__set_flush,
       CAN_FIRE__start,
       WILL_FIRE_RL_inst_dpfpu_add_sub_rl_flush,
       WILL_FIRE_RL_inst_dpfpu_add_sub_rl_stage2,
       WILL_FIRE_RL_inst_dpfpu_add_sub_rl_stage3,
       WILL_FIRE_RL_inst_dpfpu_fclass_rl_flush,
       WILL_FIRE_RL_inst_dpfpu_sign_injection_rl_flush,
       WILL_FIRE_RL_inst_spfpu_add_sub_rl_flush,
       WILL_FIRE_RL_inst_spfpu_add_sub_rl_stage2,
       WILL_FIRE_RL_inst_spfpu_add_sub_rl_stage3,
       WILL_FIRE_RL_inst_spfpu_fclass_rl_flush,
       WILL_FIRE_RL_inst_spfpu_sign_injection_rl_flush,
       WILL_FIRE_RL_rl_flush_all_fifos,
       WILL_FIRE_RL_rl_get_output_from_dpfclass,
       WILL_FIRE_RL_rl_get_output_from_dpfpu_add_sub,
       WILL_FIRE_RL_rl_get_output_from_dpfpu_divider,
       WILL_FIRE_RL_rl_get_output_from_dpfpu_sign_injection,
       WILL_FIRE_RL_rl_get_output_from_fm_add_sub,
       WILL_FIRE_RL_rl_get_output_from_fp_to_int,
       WILL_FIRE_RL_rl_get_output_from_fpu_compare_min_max,
       WILL_FIRE_RL_rl_get_output_from_fpu_convert_sp_dp,
       WILL_FIRE_RL_rl_get_output_from_fpu_int_to_fp,
       WILL_FIRE_RL_rl_get_output_from_spfclass,
       WILL_FIRE_RL_rl_get_output_from_spfloating_multiplier,
       WILL_FIRE_RL_rl_get_output_from_spfpu_add_sub,
       WILL_FIRE_RL_rl_get_output_from_spfpu_divider,
       WILL_FIRE_RL_rl_get_output_from_spfpu_sign_injection,
       WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt,
       WILL_FIRE_RL_rl_give_inputs_to_dpfpu_divider,
       WILL_FIRE_RL_rl_give_inputs_to_fm_add_sub,
       WILL_FIRE_RL_rl_give_inputs_to_fp_to_int,
       WILL_FIRE_RL_rl_give_inputs_to_fpu_add_sub,
       WILL_FIRE_RL_rl_give_inputs_to_fpu_compare_min_max,
       WILL_FIRE_RL_rl_give_inputs_to_fpu_convert_sp_dp,
       WILL_FIRE_RL_rl_give_inputs_to_fpu_int_to_fp,
       WILL_FIRE_RL_rl_give_inputs_to_fpu_sign_injection,
       WILL_FIRE_RL_rl_give_inputs_to_spfloating_classify,
       WILL_FIRE_RL_rl_give_inputs_to_spfloating_multiplier,
       WILL_FIRE_RL_rl_give_inputs_to_spfpu_divider,
       WILL_FIRE_RL_rl_give_inputs_to_spfpu_sqrt,
       WILL_FIRE__set_flush,
       WILL_FIRE__start;

  // inputs to muxes for submodule ports
  wire [105 : 0] MUX_wr_result$wset_1__VAL_1,
		 MUX_wr_result$wset_1__VAL_10,
		 MUX_wr_result$wset_1__VAL_11,
		 MUX_wr_result$wset_1__VAL_12,
		 MUX_wr_result$wset_1__VAL_13,
		 MUX_wr_result$wset_1__VAL_14,
		 MUX_wr_result$wset_1__VAL_15,
		 MUX_wr_result$wset_1__VAL_2,
		 MUX_wr_result$wset_1__VAL_3,
		 MUX_wr_result$wset_1__VAL_4,
		 MUX_wr_result$wset_1__VAL_5,
		 MUX_wr_result$wset_1__VAL_6,
		 MUX_wr_result$wset_1__VAL_7,
		 MUX_wr_result$wset_1__VAL_8,
		 MUX_wr_result$wset_1__VAL_9;

  // remaining internal signals
  reg [63 : 0] _theResult_____1_snd_snd__h13060;
  reg [31 : 0] _theResult_____1_snd_snd__h6001;
  reg [2 : 0] CASE_inst_dpfpu_add_sub_ff_final_out_rv_BITS_3_ETC__q4,
	      CASE_inst_dpfpu_dividerfinal_result_BITS_3_TO_ETC__q9,
	      CASE_inst_dpfpu_fclass_ff_final_out_rv_BITS_3__ETC__q14,
	      CASE_inst_dpfpu_sign_injection_ff_final_out_rv_ETC__q5,
	      CASE_inst_fpu_compare_min_maxresult_BITS_3_TO_ETC__q1,
	      CASE_inst_fpu_convert_sp_dpresult_BITS_3_TO_1_ETC__q3,
	      CASE_inst_fpu_int_to_fpresult_BITS_3_TO_1_0_i_ETC__q2,
	      CASE_inst_spfloating_multiplierresult_multipl_ETC__q13,
	      CASE_inst_spfm_add_subget_result_BITS_3_TO_1__ETC__q12,
	      CASE_inst_spfp_to_intget_result_BITS_3_TO_1_0_ETC__q11,
	      CASE_inst_spfpu_add_sub_ff_final_out_rv_BITS_3_ETC__q6,
	      CASE_inst_spfpu_dividerfinal_result_BITS_3_TO_ETC__q8,
	      CASE_inst_spfpu_fclass_ff_final_out_rv_BITS_3__ETC__q15,
	      CASE_inst_spfpu_sign_injection_ff_final_out_rv_ETC__q7,
	      CASE_inst_spfpu_sqrtget_result_BITS_3_TO_1_0__ETC__q10,
	      CASE_wr_resultwget_BITS_3_TO_1_0_wr_resultwg_ETC__q16;
  reg CASE_wr_instructionwget_BITS_14_TO_12_0b0_ope_ETC__q17,
      CASE_wr_instructionwget_BITS_14_TO_12_0b0_ope_ETC__q18,
      IF_inst_dpfpu_add_sub_ff_stage2_rv_port0__read_ETC___d461,
      IF_inst_spfpu_add_sub_ff_stage2_rv_port0__read_ETC___d170;
  wire [63 : 0] lv_final_output___1__h13105,
		lv_final_output__h13061,
		operand2__h16400,
		v_final_result__h12902,
		v_final_result__h34884,
		v_final_result__h35282,
		v_final_result__h39705,
		v_final_result__h40590,
		v_final_result__h5843,
		x__h38518,
		x__read__h742,
		y_avValue_snd_snd_snd__h13045,
		y_avValue_snd_snd_snd_snd_snd_snd__h13029,
		y_avValue_snd_snd_snd_snd_snd_snd__h13031,
		y_avValue_snd_snd_snd_snd_snd_snd_snd__h13009,
		y_avValue_snd_snd_snd_snd_snd_snd_snd_snd_snd_snd__h12985;
  wire [56 : 0] IF_IF_wr_operand1_whas__55_THEN_wr_operand1_wg_ETC___d808,
		_theResult_____3__h12265,
		_theResult_____4__h17666,
		_theResult_____5__h17665,
		_theResult_____5__h7421,
		lv_new_mantissa___1__h12610,
		lv_new_mantissa___2__h12268,
		lv_new_mantissa___2__h12618,
		lv_new_mantissa__h11867,
		lv_new_mantissa__h11951,
		lv_sum_mantissa__h7461,
		lv_sum_mantissa__h7469,
		lv_sum_mantissa__h7470,
		mantissa_to_shift___1__h27419,
		mantissa_to_shift__h17678,
		result__h18381,
		result__h18457,
		v_new_mantissa__h7656,
		x__h27593,
		x__h27677;
  wire [31 : 0] lv_final_output___1__h6046,
		lv_final_output__h6002,
		lv_fsr__h12823,
		lv_fsr__h5764,
		x__h35295,
		x__h6019,
		y_avValue_snd_snd_snd__h5986,
		y_avValue_snd_snd_snd_snd_snd_snd__h5970,
		y_avValue_snd_snd_snd_snd_snd_snd__h5972,
		y_avValue_snd_snd_snd_snd_snd_snd_snd__h5950,
		y_avValue_snd_snd_snd_snd_snd_snd_snd_snd_snd_snd__h5926;
  wire [27 : 0] IF_IF_wr_operand1_whas__55_THEN_wr_operand1_wg_ETC___d940,
		_theResult_____3__h5206,
		_theResult_____4__h28144,
		_theResult_____5__h2450,
		_theResult_____5__h28143,
		lv_new_mantissa___1__h5551,
		lv_new_mantissa___2__h5209,
		lv_new_mantissa___2__h5559,
		lv_new_mantissa__h4808,
		lv_new_mantissa__h4892,
		lv_sum_mantissa__h2490,
		lv_sum_mantissa__h2498,
		lv_sum_mantissa__h2499,
		mantissa_to_shift___1__h33088,
		mantissa_to_shift__h28156,
		result__h28632,
		result__h28708,
		v_new_mantissa__h2685,
		x__h33260,
		x__h33344;
  wire [12 : 0] _0b0_CONCAT_inst_dpfpu_add_sub_ff_stage1_rv_por_ETC___d401,
		x__h7702,
		x__h7704,
		y__h7703,
		y__h7705;
  wire [10 : 0] _theResult_____3_snd_fst__h18365,
		exp_diff__h17679,
		lv_exp_out___1__h12619,
		lv_exp_out__h12267,
		lv_minuend__h17675,
		lv_zeros_on_right__h17680,
		v_exponent_out__h7659;
  wire [9 : 0] _0b0_CONCAT_inst_spfpu_add_sub_ff_stage1_rv_por_ETC___d110,
	       x__h2731,
	       x__h2733,
	       x__h39719,
	       x__h40604,
	       y__h2732,
	       y__h2734;
  wire [7 : 0] _theResult_____3_snd_fst__h28616,
	       exp_diff__h28157,
	       lv_exp_out___1__h5560,
	       lv_exp_out__h5208,
	       lv_minuend__h28153,
	       lv_zeros_on_right__h28158,
	       v_exponent_out__h2688;
  wire [5 : 0] _theResult_____3__h7563, lv_zeros_on_left__h7766, x__h17703;
  wire [4 : 0] _theResult_____3__h2592, lv_zeros_on_left__h2795, x__h28181;
  wire [1 : 0] IF_IF_wr_operand1_whas__55_THEN_wr_operand1_wg_ETC___d856,
	       IF_IF_wr_operand1_whas__55_THEN_wr_operand1_wg_ETC___d857,
	       IF_IF_wr_operand1_whas__55_THEN_wr_operand1_wg_ETC___d985,
	       IF_IF_wr_operand1_whas__55_THEN_wr_operand1_wg_ETC___d986,
	       IF_wr_instruction_wget__45_BITS_14_TO_12_04_EQ_ETC___d850,
	       IF_wr_instruction_wget__45_BITS_14_TO_12_04_EQ_ETC___d855,
	       IF_wr_instruction_wget__45_BITS_14_TO_12_04_EQ_ETC___d980,
	       _theResult_____6_snd__h27835,
	       _theResult_____6_snd__h27854,
	       _theResult_____6_snd__h33502,
	       _theResult_____6_snd__h33521,
	       lv_is_infinity___1__h27830,
	       lv_is_infinity___1__h27850,
	       lv_is_infinity___1__h33497,
	       lv_is_infinity___1__h33517,
	       x__h27815,
	       x__h27857,
	       x__h33482,
	       x__h33524;
  wire IF_wr_operand1_whas__55_THEN_wr_operand1_wget__ETC___d677,
       IF_wr_operand1_whas__55_THEN_wr_operand1_wget__ETC___d868,
       _theResult_____4__h2505,
       _theResult_____4__h7476,
       inst_dpfpu_add_sub_ff_stage1_rv_port0__read__4_ETC___d270,
       inst_dpfpu_add_sub_ff_stage2_rv_port0__read__2_ETC___d499,
       inst_spfpu_add_sub_ff_stage1_rv_port0__read_BI_ETC___d37,
       inst_spfpu_add_sub_ff_stage2_rv_port0__read__3_ETC___d208,
       lv_inexact__h12263,
       lv_inexact__h5204,
       lv_roundup___1__h12420,
       lv_roundup___1__h12536,
       lv_roundup___1__h12552,
       lv_roundup___1__h5361,
       lv_roundup___1__h5477,
       lv_roundup___1__h5493,
       x1_avValue_snd_snd_fst__h12916,
       x1_avValue_snd_snd_fst__h5857,
       x1_avValue_snd_snd_snd_fst__h12946,
       x1_avValue_snd_snd_snd_fst__h5887,
       x1_avValue_snd_snd_snd_snd_snd_snd_snd_snd_snd_fst__h12986,
       x1_avValue_snd_snd_snd_snd_snd_snd_snd_snd_snd_fst__h5927,
       x__h12016,
       x__h12458,
       x__h12549,
       x__h12564,
       x__h2483,
       x__h2485,
       x__h2487,
       x__h27678,
       x__h33345,
       x__h4957,
       x__h5399,
       x__h5490,
       x__h5505,
       x__h7454,
       x__h7456,
       x__h7458,
       y__h12432,
       y__h12548,
       y__h12550,
       y__h2484,
       y__h2486,
       y__h27974,
       y__h33639,
       y__h5373,
       y__h5489,
       y__h5491,
       y__h7455,
       y__h7457,
       y_avValue_snd_fst__h12954,
       y_avValue_snd_fst__h5895;

  // action method _start
  assign RDY__start = 1'd1 ;
  assign CAN_FIRE__start = 1'd1 ;
  assign WILL_FIRE__start = EN__start ;

  // value method fpu_result_
  assign fpu_result_ =
	     { wr_result$whas && wr_result$wget[105],
	       wr_result$wget[104:4],
	       CASE_wr_resultwget_BITS_3_TO_1_0_wr_resultwg_ETC__q16,
	       wr_result$wget[0] } ;
  assign RDY_fpu_result_ = 1'd1 ;

  // action method _set_flush
  assign RDY__set_flush = 1'd1 ;
  assign CAN_FIRE__set_flush = 1'd1 ;
  assign WILL_FIRE__set_flush = EN__set_flush ;

  // value method inputs_taken_
  assign inputs_taken_ = wr_inputs_taken$whas ;
  assign RDY_inputs_taken_ = 1'd1 ;

  // submodule inst_dpfpu_divider
  mkfpu_dpfloating_divider inst_dpfpu_divider(.CLK(CLK),
					      .RST_N(RST_N),
					      ._set_flush_f(inst_dpfpu_divider$_set_flush_f),
					      ._start_destination(inst_dpfpu_divider$_start_destination),
					      ._start_fsr(inst_dpfpu_divider$_start_fsr),
					      ._start_operand1(inst_dpfpu_divider$_start_operand1),
					      ._start_operand2(inst_dpfpu_divider$_start_operand2),
					      ._start_pc(inst_dpfpu_divider$_start_pc),
					      ._start_rob_number(inst_dpfpu_divider$_start_rob_number),
					      .EN__start(inst_dpfpu_divider$EN__start),
					      .EN__deque_buffer_reset_ready_signal(inst_dpfpu_divider$EN__deque_buffer_reset_ready_signal),
					      .EN__set_flush(inst_dpfpu_divider$EN__set_flush),
					      .RDY__start(inst_dpfpu_divider$RDY__start),
					      .final_result_(inst_dpfpu_divider$final_result_),
					      .RDY_final_result_(inst_dpfpu_divider$RDY_final_result_),
					      .RDY__deque_buffer_reset_ready_signal(inst_dpfpu_divider$RDY__deque_buffer_reset_ready_signal),
					      .RDY__set_flush());

  // submodule inst_fpu_compare_min_max
  mkfpu_compare_min_max inst_fpu_compare_min_max(.CLK(CLK),
						 .RST_N(RST_N),
						 ._set_flush_f(inst_fpu_compare_min_max$_set_flush_f),
						 ._start_cmp_or_min_max(inst_fpu_compare_min_max$_start_cmp_or_min_max),
						 ._start_destination(inst_fpu_compare_min_max$_start_destination),
						 ._start_fsr(inst_fpu_compare_min_max$_start_fsr),
						 ._start_is_dp(inst_fpu_compare_min_max$_start_is_dp),
						 ._start_operand1(inst_fpu_compare_min_max$_start_operand1),
						 ._start_operand2(inst_fpu_compare_min_max$_start_operand2),
						 ._start_pc(inst_fpu_compare_min_max$_start_pc),
						 ._start_rob_number(inst_fpu_compare_min_max$_start_rob_number),
						 ._start_which_cmp_instr(inst_fpu_compare_min_max$_start_which_cmp_instr),
						 .EN__start(inst_fpu_compare_min_max$EN__start),
						 .EN__deque_buffer(inst_fpu_compare_min_max$EN__deque_buffer),
						 .EN__set_flush(inst_fpu_compare_min_max$EN__set_flush),
						 .RDY__start(inst_fpu_compare_min_max$RDY__start),
						 .result_(inst_fpu_compare_min_max$result_),
						 .RDY_result_(inst_fpu_compare_min_max$RDY_result_),
						 .RDY__deque_buffer(inst_fpu_compare_min_max$RDY__deque_buffer),
						 .RDY__set_flush());

  // submodule inst_fpu_convert_sp_dp
  mkfpu_convert_sp_dp inst_fpu_convert_sp_dp(.CLK(CLK),
					     .RST_N(RST_N),
					     ._set_flush_f(inst_fpu_convert_sp_dp$_set_flush_f),
					     ._start_destination(inst_fpu_convert_sp_dp$_start_destination),
					     ._start_fsr(inst_fpu_convert_sp_dp$_start_fsr),
					     ._start_input_fp(inst_fpu_convert_sp_dp$_start_input_fp),
					     ._start_is_dp(inst_fpu_convert_sp_dp$_start_is_dp),
					     ._start_pc(inst_fpu_convert_sp_dp$_start_pc),
					     ._start_rob_number(inst_fpu_convert_sp_dp$_start_rob_number),
					     .EN__start(inst_fpu_convert_sp_dp$EN__start),
					     .EN__deque_buffer(inst_fpu_convert_sp_dp$EN__deque_buffer),
					     .EN__set_flush(inst_fpu_convert_sp_dp$EN__set_flush),
					     .RDY__start(inst_fpu_convert_sp_dp$RDY__start),
					     .result_(inst_fpu_convert_sp_dp$result_),
					     .RDY_result_(inst_fpu_convert_sp_dp$RDY_result_),
					     .RDY__deque_buffer(inst_fpu_convert_sp_dp$RDY__deque_buffer),
					     .RDY__set_flush());

  // submodule inst_fpu_int_to_fp
  mkfpu_int_to_fp inst_fpu_int_to_fp(.CLK(CLK),
				     .RST_N(RST_N),
				     ._set_flush_f(inst_fpu_int_to_fp$_set_flush_f),
				     ._start__destination(inst_fpu_int_to_fp$_start__destination),
				     ._start_fsr(inst_fpu_int_to_fp$_start_fsr),
				     ._start_inp_int(inst_fpu_int_to_fp$_start_inp_int),
				     ._start_instruction(inst_fpu_int_to_fp$_start_instruction),
				     ._start_pc(inst_fpu_int_to_fp$_start_pc),
				     ._start_rob_number(inst_fpu_int_to_fp$_start_rob_number),
				     .EN__start(inst_fpu_int_to_fp$EN__start),
				     .EN__deque_buffer(inst_fpu_int_to_fp$EN__deque_buffer),
				     .EN__set_flush(inst_fpu_int_to_fp$EN__set_flush),
				     .RDY__start(inst_fpu_int_to_fp$RDY__start),
				     .result_(inst_fpu_int_to_fp$result_),
				     .RDY_result_(inst_fpu_int_to_fp$RDY_result_),
				     .RDY__deque_buffer(inst_fpu_int_to_fp$RDY__deque_buffer),
				     .RDY__set_flush());

  // submodule inst_spfloating_multiplier
  mkfpu_spfloating_multiplier inst_spfloating_multiplier(.CLK(CLK),
							 .RST_N(RST_N),
							 ._set_flush__flush(inst_spfloating_multiplier$_set_flush__flush),
							 ._start__destination(inst_spfloating_multiplier$_start__destination),
							 ._start__fsr(inst_spfloating_multiplier$_start__fsr),
							 ._start__operand1(inst_spfloating_multiplier$_start__operand1),
							 ._start__operand2(inst_spfloating_multiplier$_start__operand2),
							 ._start__program_counter(inst_spfloating_multiplier$_start__program_counter),
							 ._start__rob_number(inst_spfloating_multiplier$_start__rob_number),
							 .EN__start(inst_spfloating_multiplier$EN__start),
							 .EN__deque_buffer_reset_ready_signal(inst_spfloating_multiplier$EN__deque_buffer_reset_ready_signal),
							 .EN__set_flush(inst_spfloating_multiplier$EN__set_flush),
							 .RDY__start(inst_spfloating_multiplier$RDY__start),
							 .RDY__deque_buffer_reset_ready_signal(inst_spfloating_multiplier$RDY__deque_buffer_reset_ready_signal),
							 .RDY__set_flush(),
							 .result_multiplication_(inst_spfloating_multiplier$result_multiplication_),
							 .RDY_result_multiplication_(inst_spfloating_multiplier$RDY_result_multiplication_),
							 .ready_(),
							 .RDY_ready_());

  // submodule inst_spfm_add_sub
  mkfpu_fm_add_sub inst_spfm_add_sub(.CLK(CLK),
				     .RST_N(RST_N),
				     ._start__negate(inst_spfm_add_sub$_start__negate),
				     ._start_fsr(inst_spfm_add_sub$_start_fsr),
				     ._start_operand1(inst_spfm_add_sub$_start_operand1),
				     ._start_operand2(inst_spfm_add_sub$_start_operand2),
				     ._start_operand3(inst_spfm_add_sub$_start_operand3),
				     ._start_operation(inst_spfm_add_sub$_start_operation),
				     .EN__start(inst_spfm_add_sub$EN__start),
				     .EN_deque_buffer(inst_spfm_add_sub$EN_deque_buffer),
				     .RDY__start(inst_spfm_add_sub$RDY__start),
				     .RDY_deque_buffer(inst_spfm_add_sub$RDY_deque_buffer),
				     .get_result(inst_spfm_add_sub$get_result),
				     .RDY_get_result(inst_spfm_add_sub$RDY_get_result));

  // submodule inst_spfp_to_int
  mkfpu_fp_to_int inst_spfp_to_int(.CLK(CLK),
				   .RST_N(RST_N),
				   ._start_convert_unsigned(inst_spfp_to_int$_start_convert_unsigned),
				   ._start_fsr(inst_spfp_to_int$_start_fsr),
				   ._start_input_sp(inst_spfp_to_int$_start_input_sp),
				   .EN__start(inst_spfp_to_int$EN__start),
				   .EN_deque_buffer(inst_spfp_to_int$EN_deque_buffer),
				   .RDY__start(inst_spfp_to_int$RDY__start),
				   .RDY_deque_buffer(inst_spfp_to_int$RDY_deque_buffer),
				   .get_result(inst_spfp_to_int$get_result),
				   .RDY_get_result(inst_spfp_to_int$RDY_get_result));

  // submodule inst_spfpu_divider
  mkfpu_spfloating_divider inst_spfpu_divider(.CLK(CLK),
					      .RST_N(RST_N),
					      ._set_flush_f(inst_spfpu_divider$_set_flush_f),
					      ._start_destination(inst_spfpu_divider$_start_destination),
					      ._start_fsr(inst_spfpu_divider$_start_fsr),
					      ._start_operand1(inst_spfpu_divider$_start_operand1),
					      ._start_operand2(inst_spfpu_divider$_start_operand2),
					      ._start_pc(inst_spfpu_divider$_start_pc),
					      ._start_rob_number(inst_spfpu_divider$_start_rob_number),
					      .EN__start(inst_spfpu_divider$EN__start),
					      .EN__deque_buffer_reset_ready_signal(inst_spfpu_divider$EN__deque_buffer_reset_ready_signal),
					      .EN__set_flush(inst_spfpu_divider$EN__set_flush),
					      .RDY__start(inst_spfpu_divider$RDY__start),
					      .final_result_(inst_spfpu_divider$final_result_),
					      .RDY_final_result_(inst_spfpu_divider$RDY_final_result_),
					      .RDY__deque_buffer_reset_ready_signal(inst_spfpu_divider$RDY__deque_buffer_reset_ready_signal),
					      .RDY__set_flush());

  // submodule inst_spfpu_sqrt
  mkfpu_sqrt inst_spfpu_sqrt(.CLK(CLK),
			     .RST_N(RST_N),
			     ._start_destination(inst_spfpu_sqrt$_start_destination),
			     ._start_fsr(inst_spfpu_sqrt$_start_fsr),
			     ._start_inp(inst_spfpu_sqrt$_start_inp),
			     ._start_pc(inst_spfpu_sqrt$_start_pc),
			     ._start_rob_number(inst_spfpu_sqrt$_start_rob_number),
			     .EN__start(inst_spfpu_sqrt$EN__start),
			     .EN_deque_buffer(inst_spfpu_sqrt$EN_deque_buffer),
			     .RDY__start(inst_spfpu_sqrt$RDY__start),
			     .RDY_deque_buffer(inst_spfpu_sqrt$RDY_deque_buffer),
			     .get_result(inst_spfpu_sqrt$get_result),
			     .RDY_get_result(inst_spfpu_sqrt$RDY_get_result));

  // rule RL_rl_flush_all_fifos
  assign CAN_FIRE_RL_rl_flush_all_fifos = EN__set_flush && _set_flush_f ;
  assign WILL_FIRE_RL_rl_flush_all_fifos = CAN_FIRE_RL_rl_flush_all_fifos ;

  // rule RL_rl_get_output_from_fpu_int_to_fp
  assign CAN_FIRE_RL_rl_get_output_from_fpu_int_to_fp =
	     inst_fpu_int_to_fp$RDY__deque_buffer &&
	     inst_fpu_int_to_fp$RDY_result_ &&
	     (!EN__set_flush || !_set_flush_f) ;
  assign WILL_FIRE_RL_rl_get_output_from_fpu_int_to_fp =
	     CAN_FIRE_RL_rl_get_output_from_fpu_int_to_fp &&
	     !WILL_FIRE_RL_rl_get_output_from_fpu_convert_sp_dp ;

  // rule RL_rl_give_inputs_to_fpu_int_to_fp
  assign CAN_FIRE_RL_rl_give_inputs_to_fpu_int_to_fp =
	     inst_fpu_int_to_fp$RDY__start &&
	     (!EN__set_flush || !_set_flush_f) &&
	     EN__start &&
	     wr_instruction$wget[32] &&
	     (wr_instruction$wget[31:25] == 7'b1101000 ||
	      wr_instruction$wget[31:25] == 7'b1101001) ;
  assign WILL_FIRE_RL_rl_give_inputs_to_fpu_int_to_fp =
	     CAN_FIRE_RL_rl_give_inputs_to_fpu_int_to_fp ;

  // rule RL_rl_get_output_from_fpu_compare_min_max
  assign CAN_FIRE_RL_rl_get_output_from_fpu_compare_min_max =
	     inst_fpu_compare_min_max$RDY__deque_buffer &&
	     inst_fpu_compare_min_max$RDY_result_ &&
	     (!EN__set_flush || !_set_flush_f) ;
  assign WILL_FIRE_RL_rl_get_output_from_fpu_compare_min_max =
	     CAN_FIRE_RL_rl_get_output_from_fpu_compare_min_max &&
	     !WILL_FIRE_RL_rl_get_output_from_fpu_int_to_fp &&
	     !WILL_FIRE_RL_rl_get_output_from_fpu_convert_sp_dp ;

  // rule RL_rl_give_inputs_to_fpu_compare_min_max
  assign CAN_FIRE_RL_rl_give_inputs_to_fpu_compare_min_max =
	     inst_fpu_compare_min_max$RDY__start &&
	     (!EN__set_flush || !_set_flush_f) &&
	     EN__start &&
	     wr_instruction$wget[32] &&
	     (wr_instruction$wget[31:27] == 5'b00101 ||
	      wr_instruction$wget[31:27] == 5'b10100) ;
  assign WILL_FIRE_RL_rl_give_inputs_to_fpu_compare_min_max =
	     CAN_FIRE_RL_rl_give_inputs_to_fpu_compare_min_max ;

  // rule RL_rl_get_output_from_fpu_convert_sp_dp
  assign CAN_FIRE_RL_rl_get_output_from_fpu_convert_sp_dp =
	     inst_fpu_convert_sp_dp$RDY__deque_buffer &&
	     inst_fpu_convert_sp_dp$RDY_result_ &&
	     (!EN__set_flush || !_set_flush_f) ;
  assign WILL_FIRE_RL_rl_get_output_from_fpu_convert_sp_dp =
	     CAN_FIRE_RL_rl_get_output_from_fpu_convert_sp_dp ;

  // rule RL_rl_give_inputs_to_fpu_convert_sp_dp
  assign CAN_FIRE_RL_rl_give_inputs_to_fpu_convert_sp_dp =
	     inst_fpu_convert_sp_dp$RDY__start &&
	     (!EN__set_flush || !_set_flush_f) &&
	     EN__start &&
	     wr_instruction$wget[32] &&
	     (wr_instruction$wget[31:25] == 7'b0100000 ||
	      wr_instruction$wget[31:25] == 7'b0100001) ;
  assign WILL_FIRE_RL_rl_give_inputs_to_fpu_convert_sp_dp =
	     CAN_FIRE_RL_rl_give_inputs_to_fpu_convert_sp_dp ;

  // rule RL_rl_get_output_from_dpfpu_add_sub
  assign CAN_FIRE_RL_rl_get_output_from_dpfpu_add_sub =
	     inst_dpfpu_add_sub_ff_final_out_rv[105] &&
	     (!EN__set_flush || !_set_flush_f) ;
  assign WILL_FIRE_RL_rl_get_output_from_dpfpu_add_sub =
	     CAN_FIRE_RL_rl_get_output_from_dpfpu_add_sub &&
	     !WILL_FIRE_RL_rl_get_output_from_fpu_compare_min_max &&
	     !WILL_FIRE_RL_rl_get_output_from_fpu_int_to_fp &&
	     !WILL_FIRE_RL_rl_get_output_from_fpu_convert_sp_dp ;

  // rule RL_rl_get_output_from_spfpu_add_sub
  assign CAN_FIRE_RL_rl_get_output_from_spfpu_add_sub =
	     inst_spfpu_add_sub_ff_final_out_rv[105] &&
	     (!EN__set_flush || !_set_flush_f) ;
  assign WILL_FIRE_RL_rl_get_output_from_spfpu_add_sub =
	     CAN_FIRE_RL_rl_get_output_from_spfpu_add_sub &&
	     !WILL_FIRE_RL_rl_get_output_from_dpfpu_add_sub &&
	     !WILL_FIRE_RL_rl_get_output_from_fpu_compare_min_max &&
	     !WILL_FIRE_RL_rl_get_output_from_fpu_int_to_fp &&
	     !WILL_FIRE_RL_rl_get_output_from_fpu_convert_sp_dp ;

  // rule RL_rl_get_output_from_dpfpu_sign_injection
  assign CAN_FIRE_RL_rl_get_output_from_dpfpu_sign_injection =
	     inst_dpfpu_sign_injection_ff_final_out_rv[105] &&
	     (!EN__set_flush || !_set_flush_f) ;
  assign WILL_FIRE_RL_rl_get_output_from_dpfpu_sign_injection =
	     CAN_FIRE_RL_rl_get_output_from_dpfpu_sign_injection &&
	     !WILL_FIRE_RL_rl_get_output_from_spfpu_add_sub &&
	     !WILL_FIRE_RL_rl_get_output_from_dpfpu_add_sub &&
	     !WILL_FIRE_RL_rl_get_output_from_fpu_compare_min_max &&
	     !WILL_FIRE_RL_rl_get_output_from_fpu_int_to_fp &&
	     !WILL_FIRE_RL_rl_get_output_from_fpu_convert_sp_dp ;

  // rule RL_rl_get_output_from_spfpu_sign_injection
  assign CAN_FIRE_RL_rl_get_output_from_spfpu_sign_injection =
	     inst_spfpu_sign_injection_ff_final_out_rv[105] &&
	     (!EN__set_flush || !_set_flush_f) ;
  assign WILL_FIRE_RL_rl_get_output_from_spfpu_sign_injection =
	     CAN_FIRE_RL_rl_get_output_from_spfpu_sign_injection &&
	     !WILL_FIRE_RL_rl_get_output_from_dpfpu_sign_injection &&
	     !WILL_FIRE_RL_rl_get_output_from_spfpu_add_sub &&
	     !WILL_FIRE_RL_rl_get_output_from_dpfpu_add_sub &&
	     !WILL_FIRE_RL_rl_get_output_from_fpu_compare_min_max &&
	     !WILL_FIRE_RL_rl_get_output_from_fpu_int_to_fp &&
	     !WILL_FIRE_RL_rl_get_output_from_fpu_convert_sp_dp ;

  // rule RL_rl_give_inputs_to_fpu_sign_injection
  assign CAN_FIRE_RL_rl_give_inputs_to_fpu_sign_injection =
	     !inst_dpfpu_sign_injection_ff_final_out_rv$port1__read[105] &&
	     !inst_spfpu_sign_injection_ff_final_out_rv$port1__read[105] &&
	     (!EN__set_flush || !_set_flush_f) &&
	     EN__start &&
	     wr_instruction$wget[32] &&
	     (wr_instruction$wget[31:25] == 7'b0010000 ||
	      wr_instruction$wget[6:2] == 5'b10001) ;
  assign WILL_FIRE_RL_rl_give_inputs_to_fpu_sign_injection =
	     CAN_FIRE_RL_rl_give_inputs_to_fpu_sign_injection &&
	     !WILL_FIRE_RL_rl_give_inputs_to_fpu_convert_sp_dp &&
	     !WILL_FIRE_RL_rl_give_inputs_to_fpu_compare_min_max &&
	     !WILL_FIRE_RL_rl_give_inputs_to_fpu_int_to_fp ;

  // rule RL_rl_get_output_from_spfpu_divider
  assign CAN_FIRE_RL_rl_get_output_from_spfpu_divider =
	     inst_spfpu_divider$RDY__deque_buffer_reset_ready_signal &&
	     inst_spfpu_divider$RDY_final_result_ &&
	     (!EN__set_flush || !_set_flush_f) ;
  assign WILL_FIRE_RL_rl_get_output_from_spfpu_divider =
	     CAN_FIRE_RL_rl_get_output_from_spfpu_divider &&
	     !WILL_FIRE_RL_rl_get_output_from_spfpu_sign_injection &&
	     !WILL_FIRE_RL_rl_get_output_from_dpfpu_sign_injection &&
	     !WILL_FIRE_RL_rl_get_output_from_spfpu_add_sub &&
	     !WILL_FIRE_RL_rl_get_output_from_dpfpu_add_sub &&
	     !WILL_FIRE_RL_rl_get_output_from_fpu_compare_min_max &&
	     !WILL_FIRE_RL_rl_get_output_from_fpu_int_to_fp &&
	     !WILL_FIRE_RL_rl_get_output_from_fpu_convert_sp_dp ;

  // rule RL_rl_give_inputs_to_spfpu_divider
  assign CAN_FIRE_RL_rl_give_inputs_to_spfpu_divider =
	     inst_spfpu_divider$RDY__start &&
	     (!EN__set_flush || !_set_flush_f) &&
	     EN__start &&
	     wr_instruction$wget[32] &&
	     wr_instruction$wget[31:25] == 7'b0001100 ;
  assign WILL_FIRE_RL_rl_give_inputs_to_spfpu_divider =
	     CAN_FIRE_RL_rl_give_inputs_to_spfpu_divider &&
	     !WILL_FIRE_RL_rl_give_inputs_to_fpu_sign_injection ;

  // rule RL_rl_get_output_from_dpfpu_divider
  assign CAN_FIRE_RL_rl_get_output_from_dpfpu_divider =
	     inst_dpfpu_divider$RDY__deque_buffer_reset_ready_signal &&
	     inst_dpfpu_divider$RDY_final_result_ &&
	     (!EN__set_flush || !_set_flush_f) ;
  assign WILL_FIRE_RL_rl_get_output_from_dpfpu_divider =
	     CAN_FIRE_RL_rl_get_output_from_dpfpu_divider &&
	     !WILL_FIRE_RL_rl_get_output_from_spfpu_divider &&
	     !WILL_FIRE_RL_rl_get_output_from_spfpu_sign_injection &&
	     !WILL_FIRE_RL_rl_get_output_from_dpfpu_sign_injection &&
	     !WILL_FIRE_RL_rl_get_output_from_spfpu_add_sub &&
	     !WILL_FIRE_RL_rl_get_output_from_dpfpu_add_sub &&
	     !WILL_FIRE_RL_rl_get_output_from_fpu_compare_min_max &&
	     !WILL_FIRE_RL_rl_get_output_from_fpu_int_to_fp &&
	     !WILL_FIRE_RL_rl_get_output_from_fpu_convert_sp_dp ;

  // rule RL_rl_give_inputs_to_dpfpu_divider
  assign CAN_FIRE_RL_rl_give_inputs_to_dpfpu_divider =
	     inst_dpfpu_divider$RDY__start &&
	     (!EN__set_flush || !_set_flush_f) &&
	     EN__start &&
	     wr_instruction$wget[32] &&
	     wr_instruction$wget[31:25] == 7'b0001101 ;
  assign WILL_FIRE_RL_rl_give_inputs_to_dpfpu_divider =
	     CAN_FIRE_RL_rl_give_inputs_to_dpfpu_divider &&
	     !WILL_FIRE_RL_rl_give_inputs_to_fpu_sign_injection ;

  // rule RL_rl_get_output_from_spfpu_sqrt
  assign CAN_FIRE_RL_rl_get_output_from_spfpu_sqrt =
	     inst_spfpu_sqrt$RDY_get_result &&
	     inst_spfpu_sqrt$RDY_deque_buffer &&
	     (!EN__set_flush || !_set_flush_f) ;
  assign WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt =
	     CAN_FIRE_RL_rl_get_output_from_spfpu_sqrt &&
	     !WILL_FIRE_RL_rl_get_output_from_dpfpu_divider &&
	     !WILL_FIRE_RL_rl_get_output_from_spfpu_divider &&
	     !WILL_FIRE_RL_rl_get_output_from_spfpu_sign_injection &&
	     !WILL_FIRE_RL_rl_get_output_from_dpfpu_sign_injection &&
	     !WILL_FIRE_RL_rl_get_output_from_spfpu_add_sub &&
	     !WILL_FIRE_RL_rl_get_output_from_dpfpu_add_sub &&
	     !WILL_FIRE_RL_rl_get_output_from_fpu_compare_min_max &&
	     !WILL_FIRE_RL_rl_get_output_from_fpu_int_to_fp &&
	     !WILL_FIRE_RL_rl_get_output_from_fpu_convert_sp_dp ;

  // rule RL_rl_give_inputs_to_spfpu_sqrt
  assign CAN_FIRE_RL_rl_give_inputs_to_spfpu_sqrt =
	     inst_spfpu_sqrt$RDY__start &&
	     (!EN__set_flush || !_set_flush_f) &&
	     EN__start &&
	     wr_instruction$wget[32] &&
	     wr_instruction$wget[31:25] == 7'b0101100 ;
  assign WILL_FIRE_RL_rl_give_inputs_to_spfpu_sqrt =
	     CAN_FIRE_RL_rl_give_inputs_to_spfpu_sqrt &&
	     !WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt &&
	     !WILL_FIRE_RL_rl_give_inputs_to_fpu_sign_injection ;

  // rule RL_rl_get_output_from_fp_to_int
  assign CAN_FIRE_RL_rl_get_output_from_fp_to_int =
	     inst_spfp_to_int$RDY_get_result &&
	     inst_spfp_to_int$RDY_deque_buffer &&
	     (!EN__set_flush || !_set_flush_f) ;
  assign WILL_FIRE_RL_rl_get_output_from_fp_to_int =
	     CAN_FIRE_RL_rl_get_output_from_fp_to_int &&
	     !WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt &&
	     !WILL_FIRE_RL_rl_get_output_from_dpfpu_divider &&
	     !WILL_FIRE_RL_rl_get_output_from_spfpu_divider &&
	     !WILL_FIRE_RL_rl_get_output_from_spfpu_sign_injection &&
	     !WILL_FIRE_RL_rl_get_output_from_dpfpu_sign_injection &&
	     !WILL_FIRE_RL_rl_get_output_from_spfpu_add_sub &&
	     !WILL_FIRE_RL_rl_get_output_from_dpfpu_add_sub &&
	     !WILL_FIRE_RL_rl_get_output_from_fpu_compare_min_max &&
	     !WILL_FIRE_RL_rl_get_output_from_fpu_int_to_fp &&
	     !WILL_FIRE_RL_rl_get_output_from_fpu_convert_sp_dp ;

  // rule RL_rl_give_inputs_to_fp_to_int
  assign CAN_FIRE_RL_rl_give_inputs_to_fp_to_int =
	     inst_spfp_to_int$RDY__start &&
	     (!EN__set_flush || !_set_flush_f) &&
	     EN__start &&
	     wr_instruction$wget[32] &&
	     wr_instruction$wget[31:25] == 7'b1100000 ;
  assign WILL_FIRE_RL_rl_give_inputs_to_fp_to_int =
	     CAN_FIRE_RL_rl_give_inputs_to_fp_to_int &&
	     !WILL_FIRE_RL_rl_give_inputs_to_fpu_sign_injection ;

  // rule RL_rl_give_inputs_to_fm_add_sub
  assign CAN_FIRE_RL_rl_give_inputs_to_fm_add_sub =
	     inst_spfm_add_sub$RDY__start &&
	     (!EN__set_flush || !_set_flush_f) &&
	     EN__start &&
	     wr_instruction$wget[32] &&
	     (wr_instruction$wget[6:2] == 5'b10000 ||
	      wr_instruction$wget[6:2] == 5'b10001 ||
	      wr_instruction$wget[6:2] == 5'b10010 ||
	      wr_instruction$wget[6:2] == 5'b10011) ;
  assign WILL_FIRE_RL_rl_give_inputs_to_fm_add_sub =
	     CAN_FIRE_RL_rl_give_inputs_to_fm_add_sub &&
	     !WILL_FIRE_RL_rl_give_inputs_to_fp_to_int &&
	     !WILL_FIRE_RL_rl_give_inputs_to_spfpu_sqrt &&
	     !WILL_FIRE_RL_rl_give_inputs_to_dpfpu_divider &&
	     !WILL_FIRE_RL_rl_give_inputs_to_spfpu_divider &&
	     !WILL_FIRE_RL_rl_give_inputs_to_fpu_sign_injection &&
	     !WILL_FIRE_RL_rl_give_inputs_to_fpu_convert_sp_dp &&
	     !WILL_FIRE_RL_rl_give_inputs_to_fpu_compare_min_max &&
	     !WILL_FIRE_RL_rl_give_inputs_to_fpu_int_to_fp ;

  // rule RL_rl_get_output_from_fm_add_sub
  assign CAN_FIRE_RL_rl_get_output_from_fm_add_sub =
	     inst_spfm_add_sub$RDY_get_result &&
	     inst_spfm_add_sub$RDY_deque_buffer &&
	     (!EN__set_flush || !_set_flush_f) ;
  assign WILL_FIRE_RL_rl_get_output_from_fm_add_sub =
	     CAN_FIRE_RL_rl_get_output_from_fm_add_sub &&
	     !WILL_FIRE_RL_rl_get_output_from_fp_to_int &&
	     !WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt &&
	     !WILL_FIRE_RL_rl_get_output_from_dpfpu_divider &&
	     !WILL_FIRE_RL_rl_get_output_from_spfpu_divider &&
	     !WILL_FIRE_RL_rl_get_output_from_spfpu_sign_injection &&
	     !WILL_FIRE_RL_rl_get_output_from_dpfpu_sign_injection &&
	     !WILL_FIRE_RL_rl_get_output_from_spfpu_add_sub &&
	     !WILL_FIRE_RL_rl_get_output_from_dpfpu_add_sub &&
	     !WILL_FIRE_RL_rl_get_output_from_fpu_compare_min_max &&
	     !WILL_FIRE_RL_rl_get_output_from_fpu_int_to_fp &&
	     !WILL_FIRE_RL_rl_get_output_from_fpu_convert_sp_dp ;

  // rule RL_rl_give_inputs_to_spfloating_multiplier
  assign CAN_FIRE_RL_rl_give_inputs_to_spfloating_multiplier =
	     inst_spfloating_multiplier$RDY__start &&
	     (!EN__set_flush || !_set_flush_f) &&
	     EN__start &&
	     wr_instruction$wget[32] &&
	     wr_instruction$wget[31:25] == 7'b0001000 ;
  assign WILL_FIRE_RL_rl_give_inputs_to_spfloating_multiplier =
	     CAN_FIRE_RL_rl_give_inputs_to_spfloating_multiplier &&
	     !WILL_FIRE_RL_rl_give_inputs_to_fm_add_sub &&
	     !WILL_FIRE_RL_rl_give_inputs_to_fpu_sign_injection ;

  // rule RL_rl_get_output_from_spfloating_multiplier
  assign CAN_FIRE_RL_rl_get_output_from_spfloating_multiplier =
	     inst_spfloating_multiplier$RDY__deque_buffer_reset_ready_signal &&
	     inst_spfloating_multiplier$RDY_result_multiplication_ &&
	     (!EN__set_flush || !_set_flush_f) ;
  assign WILL_FIRE_RL_rl_get_output_from_spfloating_multiplier =
	     CAN_FIRE_RL_rl_get_output_from_spfloating_multiplier &&
	     !WILL_FIRE_RL_rl_get_output_from_spfclass &&
	     !WILL_FIRE_RL_rl_get_output_from_fm_add_sub &&
	     !WILL_FIRE_RL_rl_get_output_from_fp_to_int &&
	     !WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt &&
	     !WILL_FIRE_RL_rl_get_output_from_dpfpu_divider &&
	     !WILL_FIRE_RL_rl_get_output_from_spfpu_divider &&
	     !WILL_FIRE_RL_rl_get_output_from_spfpu_sign_injection &&
	     !WILL_FIRE_RL_rl_get_output_from_dpfpu_sign_injection &&
	     !WILL_FIRE_RL_rl_get_output_from_spfpu_add_sub &&
	     !WILL_FIRE_RL_rl_get_output_from_dpfpu_add_sub &&
	     !WILL_FIRE_RL_rl_get_output_from_fpu_compare_min_max &&
	     !WILL_FIRE_RL_rl_get_output_from_fpu_int_to_fp &&
	     !WILL_FIRE_RL_rl_get_output_from_fpu_convert_sp_dp ;

  // rule RL_rl_get_output_from_spfclass
  assign CAN_FIRE_RL_rl_get_output_from_spfclass =
	     inst_spfpu_fclass_ff_final_out_rv[105] &&
	     (!EN__set_flush || !_set_flush_f) ;
  assign WILL_FIRE_RL_rl_get_output_from_spfclass =
	     CAN_FIRE_RL_rl_get_output_from_spfclass &&
	     !WILL_FIRE_RL_rl_get_output_from_fm_add_sub &&
	     !WILL_FIRE_RL_rl_get_output_from_fp_to_int &&
	     !WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt &&
	     !WILL_FIRE_RL_rl_get_output_from_dpfpu_divider &&
	     !WILL_FIRE_RL_rl_get_output_from_spfpu_divider &&
	     !WILL_FIRE_RL_rl_get_output_from_spfpu_sign_injection &&
	     !WILL_FIRE_RL_rl_get_output_from_dpfpu_sign_injection &&
	     !WILL_FIRE_RL_rl_get_output_from_spfpu_add_sub &&
	     !WILL_FIRE_RL_rl_get_output_from_dpfpu_add_sub &&
	     !WILL_FIRE_RL_rl_get_output_from_fpu_compare_min_max &&
	     !WILL_FIRE_RL_rl_get_output_from_fpu_int_to_fp &&
	     !WILL_FIRE_RL_rl_get_output_from_fpu_convert_sp_dp ;

  // rule RL_rl_get_output_from_dpfclass
  assign CAN_FIRE_RL_rl_get_output_from_dpfclass =
	     inst_dpfpu_fclass_ff_final_out_rv[105] &&
	     (!EN__set_flush || !_set_flush_f) ;
  assign WILL_FIRE_RL_rl_get_output_from_dpfclass =
	     CAN_FIRE_RL_rl_get_output_from_dpfclass &&
	     !WILL_FIRE_RL_rl_get_output_from_spfloating_multiplier &&
	     !WILL_FIRE_RL_rl_get_output_from_spfclass &&
	     !WILL_FIRE_RL_rl_get_output_from_fm_add_sub &&
	     !WILL_FIRE_RL_rl_get_output_from_fp_to_int &&
	     !WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt &&
	     !WILL_FIRE_RL_rl_get_output_from_dpfpu_divider &&
	     !WILL_FIRE_RL_rl_get_output_from_spfpu_divider &&
	     !WILL_FIRE_RL_rl_get_output_from_spfpu_sign_injection &&
	     !WILL_FIRE_RL_rl_get_output_from_dpfpu_sign_injection &&
	     !WILL_FIRE_RL_rl_get_output_from_spfpu_add_sub &&
	     !WILL_FIRE_RL_rl_get_output_from_dpfpu_add_sub &&
	     !WILL_FIRE_RL_rl_get_output_from_fpu_compare_min_max &&
	     !WILL_FIRE_RL_rl_get_output_from_fpu_int_to_fp &&
	     !WILL_FIRE_RL_rl_get_output_from_fpu_convert_sp_dp ;

  // rule RL_rl_give_inputs_to_spfloating_classify
  assign CAN_FIRE_RL_rl_give_inputs_to_spfloating_classify =
	     !inst_dpfpu_fclass_ff_final_out_rv$port1__read[105] &&
	     !inst_spfpu_fclass_ff_final_out_rv$port1__read[105] &&
	     (!EN__set_flush || !_set_flush_f) &&
	     EN__start &&
	     wr_instruction$wget[32] &&
	     (wr_instruction$wget[31:25] == 7'b1110000 ||
	      wr_instruction$wget[31:25] == 7'b1110001) &&
	     wr_instruction$wget[14:12] == 3'b001 ;
  assign WILL_FIRE_RL_rl_give_inputs_to_spfloating_classify =
	     CAN_FIRE_RL_rl_give_inputs_to_spfloating_classify &&
	     !WILL_FIRE_RL_rl_give_inputs_to_fm_add_sub &&
	     !WILL_FIRE_RL_rl_give_inputs_to_fpu_sign_injection ;

  // rule RL_inst_spfpu_add_sub_rl_flush
  assign CAN_FIRE_RL_inst_spfpu_add_sub_rl_flush = 1'b0 ;
  assign WILL_FIRE_RL_inst_spfpu_add_sub_rl_flush = 1'b0 ;

  // rule RL_inst_spfpu_add_sub_rl_stage3
  assign CAN_FIRE_RL_inst_spfpu_add_sub_rl_stage3 =
	     inst_spfpu_add_sub_ff_stage2_rv[53] &&
	     !inst_spfpu_add_sub_ff_final_out_rv$port1__read[105] ;
  assign WILL_FIRE_RL_inst_spfpu_add_sub_rl_stage3 =
	     CAN_FIRE_RL_inst_spfpu_add_sub_rl_stage3 ;

  // rule RL_inst_spfpu_add_sub_rl_stage2
  assign CAN_FIRE_RL_inst_spfpu_add_sub_rl_stage2 =
	     inst_spfpu_add_sub_ff_stage1_rv[80] &&
	     !inst_spfpu_add_sub_ff_stage2_rv$port1__read[53] ;
  assign WILL_FIRE_RL_inst_spfpu_add_sub_rl_stage2 =
	     CAN_FIRE_RL_inst_spfpu_add_sub_rl_stage2 ;

  // rule RL_inst_dpfpu_add_sub_rl_flush
  assign CAN_FIRE_RL_inst_dpfpu_add_sub_rl_flush = 1'b0 ;
  assign WILL_FIRE_RL_inst_dpfpu_add_sub_rl_flush = 1'b0 ;

  // rule RL_inst_dpfpu_add_sub_rl_stage3
  assign CAN_FIRE_RL_inst_dpfpu_add_sub_rl_stage3 =
	     inst_dpfpu_add_sub_ff_stage2_rv[85] &&
	     !inst_dpfpu_add_sub_ff_final_out_rv$port1__read[105] ;
  assign WILL_FIRE_RL_inst_dpfpu_add_sub_rl_stage3 =
	     CAN_FIRE_RL_inst_dpfpu_add_sub_rl_stage3 ;

  // rule RL_inst_dpfpu_add_sub_rl_stage2
  assign CAN_FIRE_RL_inst_dpfpu_add_sub_rl_stage2 =
	     inst_dpfpu_add_sub_ff_stage1_rv[141] &&
	     !inst_dpfpu_add_sub_ff_stage2_rv$port1__read[85] ;
  assign WILL_FIRE_RL_inst_dpfpu_add_sub_rl_stage2 =
	     CAN_FIRE_RL_inst_dpfpu_add_sub_rl_stage2 ;

  // rule RL_rl_give_inputs_to_fpu_add_sub
  assign CAN_FIRE_RL_rl_give_inputs_to_fpu_add_sub =
	     !inst_dpfpu_add_sub_ff_stage1_rv$port1__read[141] &&
	     !inst_spfpu_add_sub_ff_stage1_rv$port1__read[80] &&
	     (!EN__set_flush || !_set_flush_f) &&
	     EN__start &&
	     wr_instruction$wget[32] &&
	     (wr_instruction$wget[31:25] == 7'b0 ||
	      wr_instruction$wget[31:25] == 7'b0000001 ||
	      wr_instruction$wget[31:25] == 7'b0000100 ||
	      wr_instruction$wget[31:25] == 7'b0000101) ;
  assign WILL_FIRE_RL_rl_give_inputs_to_fpu_add_sub =
	     CAN_FIRE_RL_rl_give_inputs_to_fpu_add_sub &&
	     !WILL_FIRE_RL_rl_give_inputs_to_fm_add_sub &&
	     !WILL_FIRE_RL_rl_give_inputs_to_fpu_sign_injection ;

  // rule RL_inst_spfpu_sign_injection_rl_flush
  assign CAN_FIRE_RL_inst_spfpu_sign_injection_rl_flush = 1'b0 ;
  assign WILL_FIRE_RL_inst_spfpu_sign_injection_rl_flush = 1'b0 ;

  // rule RL_inst_dpfpu_sign_injection_rl_flush
  assign CAN_FIRE_RL_inst_dpfpu_sign_injection_rl_flush = 1'b0 ;
  assign WILL_FIRE_RL_inst_dpfpu_sign_injection_rl_flush = 1'b0 ;

  // rule RL_inst_spfpu_fclass_rl_flush
  assign CAN_FIRE_RL_inst_spfpu_fclass_rl_flush = 1'b0 ;
  assign WILL_FIRE_RL_inst_spfpu_fclass_rl_flush = 1'b0 ;

  // rule RL_inst_dpfpu_fclass_rl_flush
  assign CAN_FIRE_RL_inst_dpfpu_fclass_rl_flush = 1'b0 ;
  assign WILL_FIRE_RL_inst_dpfpu_fclass_rl_flush = 1'b0 ;

  // inputs to muxes for submodule ports
  assign MUX_wr_result$wset_1__VAL_1 =
	     { 1'd1,
	       inst_fpu_int_to_fp$result_[104:4],
	       CASE_inst_fpu_int_to_fpresult_BITS_3_TO_1_0_i_ETC__q2,
	       inst_fpu_int_to_fp$result_[0] } ;
  assign MUX_wr_result$wset_1__VAL_2 =
	     { 1'd1,
	       inst_fpu_compare_min_max$result_[104:4],
	       CASE_inst_fpu_compare_min_maxresult_BITS_3_TO_ETC__q1,
	       inst_fpu_compare_min_max$result_[0] } ;
  assign MUX_wr_result$wset_1__VAL_3 =
	     { 1'd1,
	       inst_fpu_convert_sp_dp$result_[104:4],
	       CASE_inst_fpu_convert_sp_dpresult_BITS_3_TO_1_ETC__q3,
	       inst_fpu_convert_sp_dp$result_[0] } ;
  assign MUX_wr_result$wset_1__VAL_4 =
	     { 1'd1,
	       inst_dpfpu_add_sub_ff_final_out_rv[104:4],
	       CASE_inst_dpfpu_add_sub_ff_final_out_rv_BITS_3_ETC__q4,
	       inst_dpfpu_add_sub_ff_final_out_rv[0] } ;
  assign MUX_wr_result$wset_1__VAL_5 =
	     { 1'd1,
	       inst_spfpu_add_sub_ff_final_out_rv[104:4],
	       CASE_inst_spfpu_add_sub_ff_final_out_rv_BITS_3_ETC__q6,
	       inst_spfpu_add_sub_ff_final_out_rv[0] } ;
  assign MUX_wr_result$wset_1__VAL_6 =
	     { 1'd1,
	       inst_dpfpu_sign_injection_ff_final_out_rv[104:4],
	       CASE_inst_dpfpu_sign_injection_ff_final_out_rv_ETC__q5,
	       inst_dpfpu_sign_injection_ff_final_out_rv[0] } ;
  assign MUX_wr_result$wset_1__VAL_7 =
	     { 1'd1,
	       inst_spfpu_sign_injection_ff_final_out_rv[104:4],
	       CASE_inst_spfpu_sign_injection_ff_final_out_rv_ETC__q7,
	       inst_spfpu_sign_injection_ff_final_out_rv[0] } ;
  assign MUX_wr_result$wset_1__VAL_8 =
	     { 1'd1,
	       inst_spfpu_divider$final_result_[104:4],
	       CASE_inst_spfpu_dividerfinal_result_BITS_3_TO_ETC__q8,
	       inst_spfpu_divider$final_result_[0] } ;
  assign MUX_wr_result$wset_1__VAL_9 =
	     { 1'd1,
	       inst_dpfpu_divider$final_result_[104:4],
	       CASE_inst_dpfpu_dividerfinal_result_BITS_3_TO_ETC__q9,
	       inst_dpfpu_divider$final_result_[0] } ;
  assign MUX_wr_result$wset_1__VAL_10 =
	     { 1'd1,
	       inst_spfpu_sqrt$get_result[104:4],
	       CASE_inst_spfpu_sqrtget_result_BITS_3_TO_1_0__ETC__q10,
	       inst_spfpu_sqrt$get_result[0] } ;
  assign MUX_wr_result$wset_1__VAL_11 =
	     { 1'd1,
	       inst_spfp_to_int$get_result[104:4],
	       CASE_inst_spfp_to_intget_result_BITS_3_TO_1_0_ETC__q11,
	       inst_spfp_to_int$get_result[0] } ;
  assign MUX_wr_result$wset_1__VAL_12 =
	     { 1'd1,
	       inst_spfm_add_sub$get_result[104:4],
	       CASE_inst_spfm_add_subget_result_BITS_3_TO_1__ETC__q12,
	       inst_spfm_add_sub$get_result[0] } ;
  assign MUX_wr_result$wset_1__VAL_13 =
	     { 1'd1,
	       inst_spfloating_multiplier$result_multiplication_[104:4],
	       CASE_inst_spfloating_multiplierresult_multipl_ETC__q13,
	       inst_spfloating_multiplier$result_multiplication_[0] } ;
  assign MUX_wr_result$wset_1__VAL_14 =
	     { 1'd1,
	       inst_spfpu_fclass_ff_final_out_rv[104:4],
	       CASE_inst_spfpu_fclass_ff_final_out_rv_BITS_3__ETC__q15,
	       inst_spfpu_fclass_ff_final_out_rv[0] } ;
  assign MUX_wr_result$wset_1__VAL_15 =
	     { 1'd1,
	       inst_dpfpu_fclass_ff_final_out_rv[104:4],
	       CASE_inst_dpfpu_fclass_ff_final_out_rv_BITS_3__ETC__q14,
	       inst_dpfpu_fclass_ff_final_out_rv[0] } ;

  // inlined wires
  always@(WILL_FIRE_RL_rl_get_output_from_fpu_int_to_fp or
	  MUX_wr_result$wset_1__VAL_1 or
	  WILL_FIRE_RL_rl_get_output_from_fpu_compare_min_max or
	  MUX_wr_result$wset_1__VAL_2 or
	  WILL_FIRE_RL_rl_get_output_from_fpu_convert_sp_dp or
	  MUX_wr_result$wset_1__VAL_3 or
	  WILL_FIRE_RL_rl_get_output_from_dpfpu_add_sub or
	  MUX_wr_result$wset_1__VAL_4 or
	  WILL_FIRE_RL_rl_get_output_from_spfpu_add_sub or
	  MUX_wr_result$wset_1__VAL_5 or
	  WILL_FIRE_RL_rl_get_output_from_dpfpu_sign_injection or
	  MUX_wr_result$wset_1__VAL_6 or
	  WILL_FIRE_RL_rl_get_output_from_spfpu_sign_injection or
	  MUX_wr_result$wset_1__VAL_7 or
	  WILL_FIRE_RL_rl_get_output_from_spfpu_divider or
	  MUX_wr_result$wset_1__VAL_8 or
	  WILL_FIRE_RL_rl_get_output_from_dpfpu_divider or
	  MUX_wr_result$wset_1__VAL_9 or
	  WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt or
	  MUX_wr_result$wset_1__VAL_10 or
	  WILL_FIRE_RL_rl_get_output_from_fp_to_int or
	  MUX_wr_result$wset_1__VAL_11 or
	  WILL_FIRE_RL_rl_get_output_from_fm_add_sub or
	  MUX_wr_result$wset_1__VAL_12 or
	  WILL_FIRE_RL_rl_get_output_from_spfloating_multiplier or
	  MUX_wr_result$wset_1__VAL_13 or
	  WILL_FIRE_RL_rl_get_output_from_spfclass or
	  MUX_wr_result$wset_1__VAL_14 or
	  WILL_FIRE_RL_rl_get_output_from_dpfclass or
	  MUX_wr_result$wset_1__VAL_15)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_get_output_from_fpu_int_to_fp:
	  wr_result$wget = MUX_wr_result$wset_1__VAL_1;
      WILL_FIRE_RL_rl_get_output_from_fpu_compare_min_max:
	  wr_result$wget = MUX_wr_result$wset_1__VAL_2;
      WILL_FIRE_RL_rl_get_output_from_fpu_convert_sp_dp:
	  wr_result$wget = MUX_wr_result$wset_1__VAL_3;
      WILL_FIRE_RL_rl_get_output_from_dpfpu_add_sub:
	  wr_result$wget = MUX_wr_result$wset_1__VAL_4;
      WILL_FIRE_RL_rl_get_output_from_spfpu_add_sub:
	  wr_result$wget = MUX_wr_result$wset_1__VAL_5;
      WILL_FIRE_RL_rl_get_output_from_dpfpu_sign_injection:
	  wr_result$wget = MUX_wr_result$wset_1__VAL_6;
      WILL_FIRE_RL_rl_get_output_from_spfpu_sign_injection:
	  wr_result$wget = MUX_wr_result$wset_1__VAL_7;
      WILL_FIRE_RL_rl_get_output_from_spfpu_divider:
	  wr_result$wget = MUX_wr_result$wset_1__VAL_8;
      WILL_FIRE_RL_rl_get_output_from_dpfpu_divider:
	  wr_result$wget = MUX_wr_result$wset_1__VAL_9;
      WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt:
	  wr_result$wget = MUX_wr_result$wset_1__VAL_10;
      WILL_FIRE_RL_rl_get_output_from_fp_to_int:
	  wr_result$wget = MUX_wr_result$wset_1__VAL_11;
      WILL_FIRE_RL_rl_get_output_from_fm_add_sub:
	  wr_result$wget = MUX_wr_result$wset_1__VAL_12;
      WILL_FIRE_RL_rl_get_output_from_spfloating_multiplier:
	  wr_result$wget = MUX_wr_result$wset_1__VAL_13;
      WILL_FIRE_RL_rl_get_output_from_spfclass:
	  wr_result$wget = MUX_wr_result$wset_1__VAL_14;
      WILL_FIRE_RL_rl_get_output_from_dpfclass:
	  wr_result$wget = MUX_wr_result$wset_1__VAL_15;
      default: wr_result$wget =
		   106'h2AAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign wr_result$whas =
	     WILL_FIRE_RL_rl_get_output_from_fpu_int_to_fp ||
	     WILL_FIRE_RL_rl_get_output_from_fpu_compare_min_max ||
	     WILL_FIRE_RL_rl_get_output_from_fpu_convert_sp_dp ||
	     WILL_FIRE_RL_rl_get_output_from_dpfpu_add_sub ||
	     WILL_FIRE_RL_rl_get_output_from_spfpu_add_sub ||
	     WILL_FIRE_RL_rl_get_output_from_dpfpu_sign_injection ||
	     WILL_FIRE_RL_rl_get_output_from_spfpu_sign_injection ||
	     WILL_FIRE_RL_rl_get_output_from_spfpu_divider ||
	     WILL_FIRE_RL_rl_get_output_from_dpfpu_divider ||
	     WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt ||
	     WILL_FIRE_RL_rl_get_output_from_fp_to_int ||
	     WILL_FIRE_RL_rl_get_output_from_fm_add_sub ||
	     WILL_FIRE_RL_rl_get_output_from_spfloating_multiplier ||
	     WILL_FIRE_RL_rl_get_output_from_spfclass ||
	     WILL_FIRE_RL_rl_get_output_from_dpfclass ;
  assign wr_inputs_taken$whas =
	     WILL_FIRE_RL_rl_give_inputs_to_spfloating_classify ||
	     WILL_FIRE_RL_rl_give_inputs_to_spfloating_multiplier ||
	     WILL_FIRE_RL_rl_give_inputs_to_fm_add_sub ||
	     WILL_FIRE_RL_rl_give_inputs_to_fp_to_int ||
	     WILL_FIRE_RL_rl_give_inputs_to_spfpu_sqrt ||
	     WILL_FIRE_RL_rl_give_inputs_to_dpfpu_divider ||
	     WILL_FIRE_RL_rl_give_inputs_to_spfpu_divider ||
	     WILL_FIRE_RL_rl_give_inputs_to_fpu_sign_injection ||
	     WILL_FIRE_RL_rl_give_inputs_to_fpu_add_sub ||
	     WILL_FIRE_RL_rl_give_inputs_to_fpu_convert_sp_dp ||
	     WILL_FIRE_RL_rl_give_inputs_to_fpu_compare_min_max ||
	     WILL_FIRE_RL_rl_give_inputs_to_fpu_int_to_fp ;
  assign wr_instruction$wget = { 1'd1, _start_instruction } ;
  assign inst_spfpu_add_sub_ff_final_out_rv$port1__read =
	     WILL_FIRE_RL_rl_get_output_from_spfpu_add_sub ?
	       106'h0AAAAAAAAAAAAAAAAAAAAAAAAAA :
	       inst_spfpu_add_sub_ff_final_out_rv ;
  assign inst_spfpu_add_sub_ff_final_out_rv$port1__write_1 =
	     { 6'd42, lv_fsr__h5764, v_final_result__h5843, 4'hA } ;
  assign inst_spfpu_add_sub_ff_final_out_rv$port2__read =
	     CAN_FIRE_RL_inst_spfpu_add_sub_rl_stage3 ?
	       inst_spfpu_add_sub_ff_final_out_rv$port1__write_1 :
	       inst_spfpu_add_sub_ff_final_out_rv$port1__read ;
  assign inst_spfpu_add_sub_ff_stage1_rv$port1__read =
	     CAN_FIRE_RL_inst_spfpu_add_sub_rl_stage2 ?
	       81'h0AAAAAAAAAAAAAAAAAAAA :
	       inst_spfpu_add_sub_ff_stage1_rv ;
  assign inst_spfpu_add_sub_ff_stage1_rv$EN_port1__write =
	     WILL_FIRE_RL_rl_give_inputs_to_fpu_add_sub &&
	     !wr_instruction$wget[25] ;
  assign inst_spfpu_add_sub_ff_stage1_rv$port1__write_1 =
	     { 1'd1,
	       x__read__h742[31],
	       operand2__h16400[31],
	       wr_instruction$wget[2],
	       x__h33260,
	       x__h33344,
	       lv_minuend__h28153,
	       x__h33345,
	       x__h33482,
	       x__h33524,
	       wr_instruction$wget[14:12],
	       5'd0 } ;
  assign inst_spfpu_add_sub_ff_stage1_rv$port2__read =
	     inst_spfpu_add_sub_ff_stage1_rv$EN_port1__write ?
	       inst_spfpu_add_sub_ff_stage1_rv$port1__write_1 :
	       inst_spfpu_add_sub_ff_stage1_rv$port1__read ;
  assign inst_spfpu_add_sub_ff_stage2_rv$port1__read =
	     CAN_FIRE_RL_inst_spfpu_add_sub_rl_stage3 ?
	       54'h0AAAAAAAAAAAAA :
	       inst_spfpu_add_sub_ff_stage2_rv ;
  assign inst_spfpu_add_sub_ff_stage2_rv$port1__write_1 =
	     { 1'd1,
	       v_new_mantissa__h2685,
	       _theResult_____4__h2505,
	       inst_spfpu_add_sub_ff_stage1_rv[12:8],
	       x__h4957,
	       _0b0_CONCAT_inst_spfpu_add_sub_ff_stage1_rv_por_ETC___d110[9],
	       v_exponent_out__h2688,
	       inst_spfpu_add_sub_ff_stage1_rv[7:5],
	       _theResult_____5__h2450[27],
	       inst_spfpu_add_sub_ff_stage1_rv[4:0] } ;
  assign inst_spfpu_add_sub_ff_stage2_rv$port2__read =
	     CAN_FIRE_RL_inst_spfpu_add_sub_rl_stage2 ?
	       inst_spfpu_add_sub_ff_stage2_rv$port1__write_1 :
	       inst_spfpu_add_sub_ff_stage2_rv$port1__read ;
  assign inst_dpfpu_add_sub_ff_final_out_rv$port1__read =
	     WILL_FIRE_RL_rl_get_output_from_dpfpu_add_sub ?
	       106'h0AAAAAAAAAAAAAAAAAAAAAAAAAA :
	       inst_dpfpu_add_sub_ff_final_out_rv ;
  assign inst_dpfpu_add_sub_ff_final_out_rv$port1__write_1 =
	     { 6'd42, lv_fsr__h12823, v_final_result__h12902, 4'hA } ;
  assign inst_dpfpu_add_sub_ff_final_out_rv$port2__read =
	     CAN_FIRE_RL_inst_dpfpu_add_sub_rl_stage3 ?
	       inst_dpfpu_add_sub_ff_final_out_rv$port1__write_1 :
	       inst_dpfpu_add_sub_ff_final_out_rv$port1__read ;
  assign inst_dpfpu_add_sub_ff_stage1_rv$port1__read =
	     CAN_FIRE_RL_inst_dpfpu_add_sub_rl_stage2 ?
	       142'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       inst_dpfpu_add_sub_ff_stage1_rv ;
  assign inst_dpfpu_add_sub_ff_stage1_rv$EN_port1__write =
	     WILL_FIRE_RL_rl_give_inputs_to_fpu_add_sub &&
	     wr_instruction$wget[25] ;
  assign inst_dpfpu_add_sub_ff_stage1_rv$port1__write_1 =
	     { 1'd1,
	       x__read__h742[63],
	       operand2__h16400[63],
	       wr_instruction$wget[2],
	       x__h27593,
	       x__h27677,
	       lv_minuend__h17675,
	       x__h27678,
	       x__h27815,
	       x__h27857,
	       wr_instruction$wget[14:12],
	       5'd0 } ;
  assign inst_dpfpu_add_sub_ff_stage1_rv$port2__read =
	     inst_dpfpu_add_sub_ff_stage1_rv$EN_port1__write ?
	       inst_dpfpu_add_sub_ff_stage1_rv$port1__write_1 :
	       inst_dpfpu_add_sub_ff_stage1_rv$port1__read ;
  assign inst_dpfpu_add_sub_ff_stage2_rv$port1__read =
	     CAN_FIRE_RL_inst_dpfpu_add_sub_rl_stage3 ?
	       86'h0AAAAAAAAAAAAAAAAAAAAA :
	       inst_dpfpu_add_sub_ff_stage2_rv ;
  assign inst_dpfpu_add_sub_ff_stage2_rv$port1__write_1 =
	     { 1'd1,
	       v_new_mantissa__h7656,
	       _theResult_____4__h7476,
	       inst_dpfpu_add_sub_ff_stage1_rv[12:8],
	       x__h12016,
	       _0b0_CONCAT_inst_dpfpu_add_sub_ff_stage1_rv_por_ETC___d401[12],
	       v_exponent_out__h7659,
	       inst_dpfpu_add_sub_ff_stage1_rv[7:5],
	       _theResult_____5__h7421[56],
	       inst_dpfpu_add_sub_ff_stage1_rv[4:0] } ;
  assign inst_dpfpu_add_sub_ff_stage2_rv$port2__read =
	     CAN_FIRE_RL_inst_dpfpu_add_sub_rl_stage2 ?
	       inst_dpfpu_add_sub_ff_stage2_rv$port1__write_1 :
	       inst_dpfpu_add_sub_ff_stage2_rv$port1__read ;
  assign inst_spfpu_sign_injection_ff_final_out_rv$port1__read =
	     WILL_FIRE_RL_rl_get_output_from_spfpu_sign_injection ?
	       106'h0AAAAAAAAAAAAAAAAAAAAAAAAAA :
	       inst_spfpu_sign_injection_ff_final_out_rv ;
  assign inst_spfpu_sign_injection_ff_final_out_rv$EN_port1__write =
	     WILL_FIRE_RL_rl_give_inputs_to_fpu_sign_injection &&
	     !wr_instruction$wget[25] ;
  assign inst_spfpu_sign_injection_ff_final_out_rv$port1__write_1 =
	     { 38'h2AAAAAAAAA, v_final_result__h35282, 4'hA } ;
  assign inst_spfpu_sign_injection_ff_final_out_rv$port2__read =
	     inst_spfpu_sign_injection_ff_final_out_rv$EN_port1__write ?
	       inst_spfpu_sign_injection_ff_final_out_rv$port1__write_1 :
	       inst_spfpu_sign_injection_ff_final_out_rv$port1__read ;
  assign inst_dpfpu_sign_injection_ff_final_out_rv$port1__read =
	     WILL_FIRE_RL_rl_get_output_from_dpfpu_sign_injection ?
	       106'h0AAAAAAAAAAAAAAAAAAAAAAAAAA :
	       inst_dpfpu_sign_injection_ff_final_out_rv ;
  assign inst_dpfpu_sign_injection_ff_final_out_rv$EN_port1__write =
	     WILL_FIRE_RL_rl_give_inputs_to_fpu_sign_injection &&
	     wr_instruction$wget[25] ;
  assign inst_dpfpu_sign_injection_ff_final_out_rv$port1__write_1 =
	     { 38'h2AAAAAAAAA, v_final_result__h34884, 4'hA } ;
  assign inst_dpfpu_sign_injection_ff_final_out_rv$port2__read =
	     inst_dpfpu_sign_injection_ff_final_out_rv$EN_port1__write ?
	       inst_dpfpu_sign_injection_ff_final_out_rv$port1__write_1 :
	       inst_dpfpu_sign_injection_ff_final_out_rv$port1__read ;
  assign inst_spfpu_fclass_ff_final_out_rv$port1__read =
	     WILL_FIRE_RL_rl_get_output_from_spfclass ?
	       106'h0AAAAAAAAAAAAAAAAAAAAAAAAAA :
	       inst_spfpu_fclass_ff_final_out_rv ;
  assign inst_spfpu_fclass_ff_final_out_rv$EN_port1__write =
	     WILL_FIRE_RL_rl_give_inputs_to_spfloating_classify &&
	     !wr_instruction$wget[25] ;
  assign inst_spfpu_fclass_ff_final_out_rv$port1__write_1 =
	     { 38'h2AAAAAAAAA, v_final_result__h39705, 4'hA } ;
  assign inst_spfpu_fclass_ff_final_out_rv$port2__read =
	     inst_spfpu_fclass_ff_final_out_rv$EN_port1__write ?
	       inst_spfpu_fclass_ff_final_out_rv$port1__write_1 :
	       inst_spfpu_fclass_ff_final_out_rv$port1__read ;
  assign inst_dpfpu_fclass_ff_final_out_rv$port1__read =
	     WILL_FIRE_RL_rl_get_output_from_dpfclass ?
	       106'h0AAAAAAAAAAAAAAAAAAAAAAAAAA :
	       inst_dpfpu_fclass_ff_final_out_rv ;
  assign inst_dpfpu_fclass_ff_final_out_rv$EN_port1__write =
	     WILL_FIRE_RL_rl_give_inputs_to_spfloating_classify &&
	     wr_instruction$wget[25] ;
  assign inst_dpfpu_fclass_ff_final_out_rv$port1__write_1 =
	     { 38'h2AAAAAAAAA, v_final_result__h40590, 4'hA } ;
  assign inst_dpfpu_fclass_ff_final_out_rv$port2__read =
	     inst_dpfpu_fclass_ff_final_out_rv$EN_port1__write ?
	       inst_dpfpu_fclass_ff_final_out_rv$port1__write_1 :
	       inst_dpfpu_fclass_ff_final_out_rv$port1__read ;

  // register inst_dpfpu_add_sub_ff_final_out_rv
  assign inst_dpfpu_add_sub_ff_final_out_rv$D_IN =
	     inst_dpfpu_add_sub_ff_final_out_rv$port2__read ;
  assign inst_dpfpu_add_sub_ff_final_out_rv$EN = 1'b1 ;

  // register inst_dpfpu_add_sub_ff_stage1_rv
  assign inst_dpfpu_add_sub_ff_stage1_rv$D_IN =
	     inst_dpfpu_add_sub_ff_stage1_rv$port2__read ;
  assign inst_dpfpu_add_sub_ff_stage1_rv$EN = 1'b1 ;

  // register inst_dpfpu_add_sub_ff_stage2_rv
  assign inst_dpfpu_add_sub_ff_stage2_rv$D_IN =
	     inst_dpfpu_add_sub_ff_stage2_rv$port2__read ;
  assign inst_dpfpu_add_sub_ff_stage2_rv$EN = 1'b1 ;

  // register inst_dpfpu_add_sub_rg_ready_signal
  assign inst_dpfpu_add_sub_rg_ready_signal$D_IN = 1'd0 ;
  assign inst_dpfpu_add_sub_rg_ready_signal$EN = 1'b0 ;

  // register inst_dpfpu_fclass_ff_final_out_rv
  assign inst_dpfpu_fclass_ff_final_out_rv$D_IN =
	     inst_dpfpu_fclass_ff_final_out_rv$port2__read ;
  assign inst_dpfpu_fclass_ff_final_out_rv$EN = 1'b1 ;

  // register inst_dpfpu_fclass_rg_ready_signal
  assign inst_dpfpu_fclass_rg_ready_signal$D_IN = 1'd0 ;
  assign inst_dpfpu_fclass_rg_ready_signal$EN = 1'b0 ;

  // register inst_dpfpu_sign_injection_ff_final_out_rv
  assign inst_dpfpu_sign_injection_ff_final_out_rv$D_IN =
	     inst_dpfpu_sign_injection_ff_final_out_rv$port2__read ;
  assign inst_dpfpu_sign_injection_ff_final_out_rv$EN = 1'b1 ;

  // register inst_dpfpu_sign_injection_rg_ready_signal
  assign inst_dpfpu_sign_injection_rg_ready_signal$D_IN = 1'd0 ;
  assign inst_dpfpu_sign_injection_rg_ready_signal$EN = 1'b0 ;

  // register inst_spfpu_add_sub_ff_final_out_rv
  assign inst_spfpu_add_sub_ff_final_out_rv$D_IN =
	     inst_spfpu_add_sub_ff_final_out_rv$port2__read ;
  assign inst_spfpu_add_sub_ff_final_out_rv$EN = 1'b1 ;

  // register inst_spfpu_add_sub_ff_stage1_rv
  assign inst_spfpu_add_sub_ff_stage1_rv$D_IN =
	     inst_spfpu_add_sub_ff_stage1_rv$port2__read ;
  assign inst_spfpu_add_sub_ff_stage1_rv$EN = 1'b1 ;

  // register inst_spfpu_add_sub_ff_stage2_rv
  assign inst_spfpu_add_sub_ff_stage2_rv$D_IN =
	     inst_spfpu_add_sub_ff_stage2_rv$port2__read ;
  assign inst_spfpu_add_sub_ff_stage2_rv$EN = 1'b1 ;

  // register inst_spfpu_add_sub_rg_ready_signal
  assign inst_spfpu_add_sub_rg_ready_signal$D_IN = 1'd0 ;
  assign inst_spfpu_add_sub_rg_ready_signal$EN = 1'b0 ;

  // register inst_spfpu_fclass_ff_final_out_rv
  assign inst_spfpu_fclass_ff_final_out_rv$D_IN =
	     inst_spfpu_fclass_ff_final_out_rv$port2__read ;
  assign inst_spfpu_fclass_ff_final_out_rv$EN = 1'b1 ;

  // register inst_spfpu_fclass_rg_ready_signal
  assign inst_spfpu_fclass_rg_ready_signal$D_IN = 1'd0 ;
  assign inst_spfpu_fclass_rg_ready_signal$EN = 1'b0 ;

  // register inst_spfpu_sign_injection_ff_final_out_rv
  assign inst_spfpu_sign_injection_ff_final_out_rv$D_IN =
	     inst_spfpu_sign_injection_ff_final_out_rv$port2__read ;
  assign inst_spfpu_sign_injection_ff_final_out_rv$EN = 1'b1 ;

  // register inst_spfpu_sign_injection_rg_ready_signal
  assign inst_spfpu_sign_injection_rg_ready_signal$D_IN = 1'd0 ;
  assign inst_spfpu_sign_injection_rg_ready_signal$EN = 1'b0 ;

  // submodule inst_dpfpu_divider
  assign inst_dpfpu_divider$_set_flush_f = 1'b0 ;
  assign inst_dpfpu_divider$_start_destination =
	     EN__start ? _start_destination : 5'd0 ;
  assign inst_dpfpu_divider$_start_fsr = EN__start ? _start_fsr : 32'd0 ;
  assign inst_dpfpu_divider$_start_operand1 = x__read__h742 ;
  assign inst_dpfpu_divider$_start_operand2 = operand2__h16400 ;
  assign inst_dpfpu_divider$_start_pc = EN__start ? _start_pc : 32'd0 ;
  assign inst_dpfpu_divider$_start_rob_number =
	     EN__start ? _start_rob_number : 4'd0 ;
  assign inst_dpfpu_divider$EN__start =
	     WILL_FIRE_RL_rl_give_inputs_to_dpfpu_divider ;
  assign inst_dpfpu_divider$EN__deque_buffer_reset_ready_signal =
	     WILL_FIRE_RL_rl_get_output_from_dpfpu_divider ;
  assign inst_dpfpu_divider$EN__set_flush = 1'b0 ;

  // submodule inst_fpu_compare_min_max
  assign inst_fpu_compare_min_max$_set_flush_f = 1'd1 ;
  assign inst_fpu_compare_min_max$_start_cmp_or_min_max =
	     wr_instruction$wget[14] ;
  assign inst_fpu_compare_min_max$_start_destination =
	     inst_dpfpu_divider$_start_destination ;
  assign inst_fpu_compare_min_max$_start_fsr = inst_dpfpu_divider$_start_fsr ;
  assign inst_fpu_compare_min_max$_start_is_dp = wr_instruction$wget[7] ;
  assign inst_fpu_compare_min_max$_start_operand1 = x__read__h742 ;
  assign inst_fpu_compare_min_max$_start_operand2 = operand2__h16400 ;
  assign inst_fpu_compare_min_max$_start_pc = inst_dpfpu_divider$_start_pc ;
  assign inst_fpu_compare_min_max$_start_rob_number =
	     inst_dpfpu_divider$_start_rob_number ;
  assign inst_fpu_compare_min_max$_start_which_cmp_instr =
	     wr_instruction$wget[14:12] ;
  assign inst_fpu_compare_min_max$EN__start =
	     CAN_FIRE_RL_rl_give_inputs_to_fpu_compare_min_max ;
  assign inst_fpu_compare_min_max$EN__deque_buffer =
	     WILL_FIRE_RL_rl_get_output_from_fpu_compare_min_max ;
  assign inst_fpu_compare_min_max$EN__set_flush =
	     CAN_FIRE_RL_rl_flush_all_fifos ;

  // submodule inst_fpu_convert_sp_dp
  assign inst_fpu_convert_sp_dp$_set_flush_f = 1'd1 ;
  assign inst_fpu_convert_sp_dp$_start_destination =
	     inst_dpfpu_divider$_start_destination ;
  assign inst_fpu_convert_sp_dp$_start_fsr = inst_dpfpu_divider$_start_fsr ;
  assign inst_fpu_convert_sp_dp$_start_input_fp = x__read__h742 ;
  assign inst_fpu_convert_sp_dp$_start_is_dp = wr_instruction$wget[25] ;
  assign inst_fpu_convert_sp_dp$_start_pc = inst_dpfpu_divider$_start_pc ;
  assign inst_fpu_convert_sp_dp$_start_rob_number =
	     inst_dpfpu_divider$_start_rob_number ;
  assign inst_fpu_convert_sp_dp$EN__start =
	     CAN_FIRE_RL_rl_give_inputs_to_fpu_convert_sp_dp ;
  assign inst_fpu_convert_sp_dp$EN__deque_buffer =
	     CAN_FIRE_RL_rl_get_output_from_fpu_convert_sp_dp ;
  assign inst_fpu_convert_sp_dp$EN__set_flush =
	     CAN_FIRE_RL_rl_flush_all_fifos ;

  // submodule inst_fpu_int_to_fp
  assign inst_fpu_int_to_fp$_set_flush_f = 1'd1 ;
  assign inst_fpu_int_to_fp$_start__destination =
	     inst_dpfpu_divider$_start_destination ;
  assign inst_fpu_int_to_fp$_start_fsr = inst_dpfpu_divider$_start_fsr ;
  assign inst_fpu_int_to_fp$_start_inp_int = x__read__h742 ;
  assign inst_fpu_int_to_fp$_start_instruction = wr_instruction$wget[31:0] ;
  assign inst_fpu_int_to_fp$_start_pc = inst_dpfpu_divider$_start_pc ;
  assign inst_fpu_int_to_fp$_start_rob_number =
	     inst_dpfpu_divider$_start_rob_number ;
  assign inst_fpu_int_to_fp$EN__start =
	     CAN_FIRE_RL_rl_give_inputs_to_fpu_int_to_fp ;
  assign inst_fpu_int_to_fp$EN__deque_buffer =
	     WILL_FIRE_RL_rl_get_output_from_fpu_int_to_fp ;
  assign inst_fpu_int_to_fp$EN__set_flush = CAN_FIRE_RL_rl_flush_all_fifos ;

  // submodule inst_spfloating_multiplier
  assign inst_spfloating_multiplier$_set_flush__flush = 1'b0 ;
  assign inst_spfloating_multiplier$_start__destination =
	     inst_dpfpu_divider$_start_destination ;
  assign inst_spfloating_multiplier$_start__fsr =
	     inst_dpfpu_divider$_start_fsr ;
  assign inst_spfloating_multiplier$_start__operand1 = x__read__h742[31:0] ;
  assign inst_spfloating_multiplier$_start__operand2 =
	     operand2__h16400[31:0] ;
  assign inst_spfloating_multiplier$_start__program_counter =
	     inst_dpfpu_divider$_start_pc ;
  assign inst_spfloating_multiplier$_start__rob_number =
	     inst_dpfpu_divider$_start_rob_number ;
  assign inst_spfloating_multiplier$EN__start =
	     WILL_FIRE_RL_rl_give_inputs_to_spfloating_multiplier ;
  assign inst_spfloating_multiplier$EN__deque_buffer_reset_ready_signal =
	     WILL_FIRE_RL_rl_get_output_from_spfloating_multiplier ;
  assign inst_spfloating_multiplier$EN__set_flush = 1'b0 ;

  // submodule inst_spfm_add_sub
  assign inst_spfm_add_sub$_start__negate = wr_instruction$wget[3] ;
  assign inst_spfm_add_sub$_start_fsr = inst_dpfpu_divider$_start_fsr ;
  assign inst_spfm_add_sub$_start_operand1 = x__read__h742[31:0] ;
  assign inst_spfm_add_sub$_start_operand2 = operand2__h16400[31:0] ;
  assign inst_spfm_add_sub$_start_operand3 = x__h38518[31:0] ;
  assign inst_spfm_add_sub$_start_operation =
	     wr_instruction$wget[2] ^ wr_instruction$wget[3] ;
  assign inst_spfm_add_sub$EN__start =
	     WILL_FIRE_RL_rl_give_inputs_to_fm_add_sub ;
  assign inst_spfm_add_sub$EN_deque_buffer =
	     WILL_FIRE_RL_rl_get_output_from_fm_add_sub ;

  // submodule inst_spfp_to_int
  assign inst_spfp_to_int$_start_convert_unsigned = wr_instruction$wget[20] ;
  assign inst_spfp_to_int$_start_fsr = inst_dpfpu_divider$_start_fsr ;
  assign inst_spfp_to_int$_start_input_sp = x__read__h742[31:0] ;
  assign inst_spfp_to_int$EN__start =
	     WILL_FIRE_RL_rl_give_inputs_to_fp_to_int ;
  assign inst_spfp_to_int$EN_deque_buffer =
	     WILL_FIRE_RL_rl_get_output_from_fp_to_int ;

  // submodule inst_spfpu_divider
  assign inst_spfpu_divider$_set_flush_f = 1'b0 ;
  assign inst_spfpu_divider$_start_destination =
	     inst_dpfpu_divider$_start_destination ;
  assign inst_spfpu_divider$_start_fsr = inst_dpfpu_divider$_start_fsr ;
  assign inst_spfpu_divider$_start_operand1 = x__read__h742[31:0] ;
  assign inst_spfpu_divider$_start_operand2 = operand2__h16400[31:0] ;
  assign inst_spfpu_divider$_start_pc = inst_dpfpu_divider$_start_pc ;
  assign inst_spfpu_divider$_start_rob_number =
	     inst_dpfpu_divider$_start_rob_number ;
  assign inst_spfpu_divider$EN__start =
	     WILL_FIRE_RL_rl_give_inputs_to_spfpu_divider ;
  assign inst_spfpu_divider$EN__deque_buffer_reset_ready_signal =
	     WILL_FIRE_RL_rl_get_output_from_spfpu_divider ;
  assign inst_spfpu_divider$EN__set_flush = 1'b0 ;

  // submodule inst_spfpu_sqrt
  assign inst_spfpu_sqrt$_start_destination =
	     inst_dpfpu_divider$_start_destination ;
  assign inst_spfpu_sqrt$_start_fsr = inst_dpfpu_divider$_start_fsr ;
  assign inst_spfpu_sqrt$_start_inp = x__read__h742[31:0] ;
  assign inst_spfpu_sqrt$_start_pc = inst_dpfpu_divider$_start_pc ;
  assign inst_spfpu_sqrt$_start_rob_number =
	     inst_dpfpu_divider$_start_rob_number ;
  assign inst_spfpu_sqrt$EN__start =
	     WILL_FIRE_RL_rl_give_inputs_to_spfpu_sqrt ;
  assign inst_spfpu_sqrt$EN_deque_buffer =
	     WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt ;

  // remaining internal signals
  assign IF_IF_wr_operand1_whas__55_THEN_wr_operand1_wg_ETC___d808 =
	     mantissa_to_shift__h17678 >> exp_diff__h17679 ;
  assign IF_IF_wr_operand1_whas__55_THEN_wr_operand1_wg_ETC___d856 =
	     (x__read__h742[62:0] == operand2__h16400[62:0] &&
	      y__h27974 != x__read__h742[63]) ?
	       IF_wr_instruction_wget__45_BITS_14_TO_12_04_EQ_ETC___d855 :
	       2'd0 ;
  assign IF_IF_wr_operand1_whas__55_THEN_wr_operand1_wg_ETC___d857 =
	     (x__read__h742[62:0] == 63'd0 &&
	      operand2__h16400[62:0] == 63'd0) ?
	       IF_wr_instruction_wget__45_BITS_14_TO_12_04_EQ_ETC___d850 :
	       IF_IF_wr_operand1_whas__55_THEN_wr_operand1_wg_ETC___d856 ;
  assign IF_IF_wr_operand1_whas__55_THEN_wr_operand1_wg_ETC___d940 =
	     mantissa_to_shift__h28156 >> exp_diff__h28157 ;
  assign IF_IF_wr_operand1_whas__55_THEN_wr_operand1_wg_ETC___d985 =
	     (x__read__h742[30:0] == operand2__h16400[30:0] &&
	      y__h33639 != x__read__h742[31]) ?
	       IF_wr_instruction_wget__45_BITS_14_TO_12_04_EQ_ETC___d855 :
	       2'd0 ;
  assign IF_IF_wr_operand1_whas__55_THEN_wr_operand1_wg_ETC___d986 =
	     (x__read__h742[30:0] == 31'd0 &&
	      operand2__h16400[30:0] == 31'd0) ?
	       IF_wr_instruction_wget__45_BITS_14_TO_12_04_EQ_ETC___d980 :
	       IF_IF_wr_operand1_whas__55_THEN_wr_operand1_wg_ETC___d985 ;
  assign IF_wr_instruction_wget__45_BITS_14_TO_12_04_EQ_ETC___d850 =
	     (wr_instruction$wget[14:12] == 3'b010 &&
	      x__read__h742[63] | y__h27974 ||
	      wr_instruction$wget[14:12] != 3'b010 &&
	      x__read__h742[63] & y__h27974) ?
	       2'b11 :
	       2'b01 ;
  assign IF_wr_instruction_wget__45_BITS_14_TO_12_04_EQ_ETC___d855 =
	     (wr_instruction$wget[14:12] == 3'b010) ? 2'b11 : 2'b01 ;
  assign IF_wr_instruction_wget__45_BITS_14_TO_12_04_EQ_ETC___d980 =
	     (wr_instruction$wget[14:12] == 3'b010 &&
	      x__read__h742[31] | y__h33639 ||
	      wr_instruction$wget[14:12] != 3'b010 &&
	      x__read__h742[31] & y__h33639) ?
	       2'b11 :
	       2'b01 ;
  assign IF_wr_operand1_whas__55_THEN_wr_operand1_wget__ETC___d677 =
	     x__read__h742[62:52] <= operand2__h16400[62:52] ;
  assign IF_wr_operand1_whas__55_THEN_wr_operand1_wget__ETC___d868 =
	     x__read__h742[30:23] <= operand2__h16400[30:23] ;
  assign _0b0_CONCAT_inst_dpfpu_add_sub_ff_stage1_rv_por_ETC___d401 =
	     x__h7702 - y__h7703 ;
  assign _0b0_CONCAT_inst_spfpu_add_sub_ff_stage1_rv_por_ETC___d110 =
	     x__h2731 - y__h2732 ;
  assign _theResult_____3__h12265 =
	     IF_inst_dpfpu_add_sub_ff_stage2_rv_port0__read_ETC___d461 ?
	       lv_new_mantissa___1__h12610 :
	       inst_dpfpu_add_sub_ff_stage2_rv[84:28] ;
  assign _theResult_____3__h2592 =
	     (!_theResult_____5__h2450[27] &&
	      _theResult_____5__h2450[26:0] != 27'd0) ?
	       lv_zeros_on_left__h2795 :
	       5'd0 ;
  assign _theResult_____3__h5206 =
	     IF_inst_spfpu_add_sub_ff_stage2_rv_port0__read_ETC___d170 ?
	       lv_new_mantissa___1__h5551 :
	       inst_spfpu_add_sub_ff_stage2_rv[52:25] ;
  assign _theResult_____3__h7563 =
	     (!_theResult_____5__h7421[56] &&
	      _theResult_____5__h7421[55:0] != 56'd0) ?
	       lv_zeros_on_left__h7766 :
	       6'd0 ;
  assign _theResult_____3_snd_fst__h18365 =
	     IF_wr_operand1_whas__55_THEN_wr_operand1_wget__ETC___d677 ?
	       x__read__h742[62:52] :
	       operand2__h16400[62:52] ;
  assign _theResult_____3_snd_fst__h28616 =
	     IF_wr_operand1_whas__55_THEN_wr_operand1_wget__ETC___d868 ?
	       x__read__h742[30:23] :
	       operand2__h16400[30:23] ;
  assign _theResult_____4__h17666 =
	     (operand2__h16400[62:52] == 11'd0) ? 57'd0 : result__h18381 ;
  assign _theResult_____4__h2505 =
	     inst_spfpu_add_sub_ff_stage1_rv[76:49] <
	     inst_spfpu_add_sub_ff_stage1_rv[48:21] &&
	     !inst_spfpu_add_sub_ff_stage1_rv[79] &&
	     inst_spfpu_add_sub_ff_stage1_rv_port0__read_BI_ETC___d37 ||
	     inst_spfpu_add_sub_ff_stage1_rv[79] &&
	     (inst_spfpu_add_sub_ff_stage1_rv[76:49] >
	      inst_spfpu_add_sub_ff_stage1_rv[48:21] ||
	      inst_spfpu_add_sub_ff_stage1_rv_port0__read_BI_ETC___d37) ;
  assign _theResult_____4__h28144 =
	     (operand2__h16400[30:23] == 8'd0) ? 28'd0 : result__h28632 ;
  assign _theResult_____4__h7476 =
	     inst_dpfpu_add_sub_ff_stage1_rv[137:81] <
	     inst_dpfpu_add_sub_ff_stage1_rv[80:24] &&
	     !inst_dpfpu_add_sub_ff_stage1_rv[140] &&
	     inst_dpfpu_add_sub_ff_stage1_rv_port0__read__4_ETC___d270 ||
	     inst_dpfpu_add_sub_ff_stage1_rv[140] &&
	     (inst_dpfpu_add_sub_ff_stage1_rv[137:81] >
	      inst_dpfpu_add_sub_ff_stage1_rv[80:24] ||
	      inst_dpfpu_add_sub_ff_stage1_rv_port0__read__4_ETC___d270) ;
  assign _theResult_____5__h17665 =
	     (x__read__h742[62:52] == 11'd0) ? 57'd0 : result__h18457 ;
  assign _theResult_____5__h2450 =
	     (x__h2483 | y__h2484) ?
	       ((inst_spfpu_add_sub_ff_stage1_rv[48:21] <=
		 inst_spfpu_add_sub_ff_stage1_rv[76:49]) ?
		  lv_sum_mantissa__h2499 :
		  lv_sum_mantissa__h2498) :
	       lv_sum_mantissa__h2490 ;
  assign _theResult_____5__h28143 =
	     (x__read__h742[30:23] == 8'd0) ? 28'd0 : result__h28708 ;
  assign _theResult_____5__h7421 =
	     (x__h7454 | y__h7455) ?
	       ((inst_dpfpu_add_sub_ff_stage1_rv[80:24] <=
		 inst_dpfpu_add_sub_ff_stage1_rv[137:81]) ?
		  lv_sum_mantissa__h7470 :
		  lv_sum_mantissa__h7469) :
	       lv_sum_mantissa__h7461 ;
  assign _theResult_____6_snd__h27835 =
	     (x__read__h742[62:52] == 11'd2047 &&
	      x__read__h742[51:0] == 52'd0) ?
	       lv_is_infinity___1__h27830 :
	       _theResult_____6_snd__h27854 ;
  assign _theResult_____6_snd__h27854 =
	     (operand2__h16400[62:52] == 11'd2047 &&
	      operand2__h16400[51:0] == 52'd0) ?
	       lv_is_infinity___1__h27850 :
	       2'd0 ;
  assign _theResult_____6_snd__h33502 =
	     (x__read__h742[30:23] == 8'd255 &&
	      x__read__h742[22:0] == 23'd0) ?
	       lv_is_infinity___1__h33497 :
	       _theResult_____6_snd__h33521 ;
  assign _theResult_____6_snd__h33521 =
	     (operand2__h16400[30:23] == 8'd255 &&
	      operand2__h16400[22:0] == 23'd0) ?
	       lv_is_infinity___1__h33517 :
	       2'd0 ;
  assign exp_diff__h17679 =
	     lv_minuend__h17675 - _theResult_____3_snd_fst__h18365 ;
  assign exp_diff__h28157 =
	     lv_minuend__h28153 - _theResult_____3_snd_fst__h28616 ;
  assign inst_dpfpu_add_sub_ff_stage1_rv_port0__read__4_ETC___d270 =
	     inst_dpfpu_add_sub_ff_stage1_rv[138] ^
	     inst_dpfpu_add_sub_ff_stage1_rv[139] ;
  assign inst_dpfpu_add_sub_ff_stage2_rv_port0__read__2_ETC___d499 =
	     inst_dpfpu_add_sub_ff_stage2_rv[25:24] == 2'd0 &&
	     (inst_dpfpu_add_sub_ff_stage2_rv[21] ||
	      lv_exp_out__h12267 == 11'd2047 ||
	      lv_exp_out__h12267 == 11'd0 &&
	      lv_new_mantissa___2__h12268 != 57'd0 ||
	      inst_dpfpu_add_sub_ff_stage2_rv[20] ||
	      inst_dpfpu_add_sub_ff_stage2_rv[23:22] == 2'd0 &&
	      lv_inexact__h12263) ;
  assign inst_spfpu_add_sub_ff_stage1_rv_port0__read_BI_ETC___d37 =
	     inst_spfpu_add_sub_ff_stage1_rv[77] ^
	     inst_spfpu_add_sub_ff_stage1_rv[78] ;
  assign inst_spfpu_add_sub_ff_stage2_rv_port0__read__3_ETC___d208 =
	     inst_spfpu_add_sub_ff_stage2_rv[22:21] == 2'd0 &&
	     (inst_spfpu_add_sub_ff_stage2_rv[18] ||
	      lv_exp_out__h5208 == 8'd255 ||
	      lv_exp_out__h5208 == 8'd0 &&
	      lv_new_mantissa___2__h5209 != 28'd0 ||
	      inst_spfpu_add_sub_ff_stage2_rv[17] ||
	      inst_spfpu_add_sub_ff_stage2_rv[20:19] == 2'd0 &&
	      lv_inexact__h5204) ;
  assign lv_exp_out___1__h12619 =
	     inst_dpfpu_add_sub_ff_stage2_rv[19:9] + 11'd1 ;
  assign lv_exp_out___1__h5560 =
	     inst_spfpu_add_sub_ff_stage2_rv[16:9] + 8'd1 ;
  assign lv_exp_out__h12267 =
	     _theResult_____3__h12265[56] ?
	       lv_exp_out___1__h12619 :
	       inst_dpfpu_add_sub_ff_stage2_rv[19:9] ;
  assign lv_exp_out__h5208 =
	     _theResult_____3__h5206[27] ?
	       lv_exp_out___1__h5560 :
	       inst_spfpu_add_sub_ff_stage2_rv[16:9] ;
  assign lv_final_output___1__h13105 =
	     { inst_dpfpu_add_sub_ff_stage2_rv[25], 63'h7FF0000000000000 } ;
  assign lv_final_output___1__h6046 =
	     { inst_spfpu_add_sub_ff_stage2_rv[22], 31'h7F800000 } ;
  assign lv_final_output__h13061 =
	     { inst_dpfpu_add_sub_ff_stage2_rv[27],
	       lv_exp_out__h12267,
	       lv_new_mantissa___2__h12268[54:3] } ;
  assign lv_final_output__h6002 =
	     { inst_spfpu_add_sub_ff_stage2_rv[24],
	       lv_exp_out__h5208,
	       lv_new_mantissa___2__h5209[25:3] } ;
  assign lv_fsr__h12823 =
	     { 24'b0,
	       inst_dpfpu_add_sub_ff_stage2_rv[8:6],
	       2'b0,
	       x1_avValue_snd_snd_fst__h12916,
	       x1_avValue_snd_snd_snd_fst__h12946,
	       x1_avValue_snd_snd_snd_snd_snd_snd_snd_snd_snd_fst__h12986 } ;
  assign lv_fsr__h5764 =
	     { 24'b0,
	       inst_spfpu_add_sub_ff_stage2_rv[8:6],
	       2'b0,
	       x1_avValue_snd_snd_fst__h5857,
	       x1_avValue_snd_snd_snd_fst__h5887,
	       x1_avValue_snd_snd_snd_snd_snd_snd_snd_snd_snd_fst__h5927 } ;
  assign lv_inexact__h12263 =
	     x__h12564 | inst_dpfpu_add_sub_ff_stage2_rv[28] ;
  assign lv_inexact__h5204 = x__h5505 | inst_spfpu_add_sub_ff_stage2_rv[25] ;
  assign lv_is_infinity___1__h27830 = { x__read__h742[63], 1'd1 } ;
  assign lv_is_infinity___1__h27850 =
	     { operand2__h16400[63] ^ wr_instruction$wget[2], 1'd1 } ;
  assign lv_is_infinity___1__h33497 = { x__read__h742[31], 1'd1 } ;
  assign lv_is_infinity___1__h33517 =
	     { operand2__h16400[31] ^ wr_instruction$wget[2], 1'd1 } ;
  assign lv_minuend__h17675 =
	     IF_wr_operand1_whas__55_THEN_wr_operand1_wget__ETC___d677 ?
	       operand2__h16400[62:52] :
	       x__read__h742[62:52] ;
  assign lv_minuend__h28153 =
	     IF_wr_operand1_whas__55_THEN_wr_operand1_wget__ETC___d868 ?
	       operand2__h16400[30:23] :
	       x__read__h742[30:23] ;
  assign lv_new_mantissa___1__h12610 =
	     inst_dpfpu_add_sub_ff_stage2_rv[84:28] + 57'd8 ;
  assign lv_new_mantissa___1__h5551 =
	     inst_spfpu_add_sub_ff_stage2_rv[52:25] + 28'd8 ;
  assign lv_new_mantissa___2__h12268 =
	     _theResult_____3__h12265[56] ?
	       lv_new_mantissa___2__h12618 :
	       _theResult_____3__h12265 ;
  assign lv_new_mantissa___2__h12618 =
	     { 1'd0, _theResult_____3__h12265[56:1] } ;
  assign lv_new_mantissa___2__h5209 =
	     _theResult_____3__h5206[27] ?
	       lv_new_mantissa___2__h5559 :
	       _theResult_____3__h5206 ;
  assign lv_new_mantissa___2__h5559 =
	     { 1'd0, _theResult_____3__h5206[27:1] } ;
  assign lv_new_mantissa__h11867 =
	     { 1'b0,
	       _theResult_____5__h7421[56:2],
	       _theResult_____5__h7421[0] | _theResult_____5__h7421[1] } ;
  assign lv_new_mantissa__h11951 =
	     _theResult_____5__h7421 << _theResult_____3__h7563 ;
  assign lv_new_mantissa__h4808 =
	     { 1'b0,
	       _theResult_____5__h2450[27:2],
	       _theResult_____5__h2450[0] | _theResult_____5__h2450[1] } ;
  assign lv_new_mantissa__h4892 =
	     _theResult_____5__h2450 << _theResult_____3__h2592 ;
  assign lv_roundup___1__h12420 =
	     inst_dpfpu_add_sub_ff_stage2_rv[30] & y__h12432 ;
  assign lv_roundup___1__h12536 =
	     inst_dpfpu_add_sub_ff_stage2_rv[30] & y__h12548 ;
  assign lv_roundup___1__h12552 =
	     lv_inexact__h12263 & inst_dpfpu_add_sub_ff_stage2_rv[27] ;
  assign lv_roundup___1__h5361 =
	     inst_spfpu_add_sub_ff_stage2_rv[27] & y__h5373 ;
  assign lv_roundup___1__h5477 =
	     inst_spfpu_add_sub_ff_stage2_rv[27] & y__h5489 ;
  assign lv_roundup___1__h5493 =
	     lv_inexact__h5204 & inst_spfpu_add_sub_ff_stage2_rv[24] ;
  assign lv_sum_mantissa__h2490 =
	     inst_spfpu_add_sub_ff_stage1_rv[76:49] +
	     inst_spfpu_add_sub_ff_stage1_rv[48:21] ;
  assign lv_sum_mantissa__h2498 =
	     inst_spfpu_add_sub_ff_stage1_rv[48:21] -
	     inst_spfpu_add_sub_ff_stage1_rv[76:49] ;
  assign lv_sum_mantissa__h2499 =
	     inst_spfpu_add_sub_ff_stage1_rv[76:49] -
	     inst_spfpu_add_sub_ff_stage1_rv[48:21] ;
  assign lv_sum_mantissa__h7461 =
	     inst_dpfpu_add_sub_ff_stage1_rv[137:81] +
	     inst_dpfpu_add_sub_ff_stage1_rv[80:24] ;
  assign lv_sum_mantissa__h7469 =
	     inst_dpfpu_add_sub_ff_stage1_rv[80:24] -
	     inst_dpfpu_add_sub_ff_stage1_rv[137:81] ;
  assign lv_sum_mantissa__h7470 =
	     inst_dpfpu_add_sub_ff_stage1_rv[137:81] -
	     inst_dpfpu_add_sub_ff_stage1_rv[80:24] ;
  assign lv_zeros_on_left__h2795 =
	     _theResult_____5__h2450[0] ?
	       5'd0 :
	       (_theResult_____5__h2450[1] ?
		  5'd1 :
		  (_theResult_____5__h2450[2] ?
		     5'd2 :
		     (_theResult_____5__h2450[3] ?
			5'd3 :
			(_theResult_____5__h2450[4] ?
			   5'd4 :
			   (_theResult_____5__h2450[5] ?
			      5'd5 :
			      (_theResult_____5__h2450[6] ?
				 5'd6 :
				 (_theResult_____5__h2450[7] ?
				    5'd7 :
				    (_theResult_____5__h2450[8] ?
				       5'd8 :
				       (_theResult_____5__h2450[9] ?
					  5'd9 :
					  (_theResult_____5__h2450[10] ?
					     5'd10 :
					     (_theResult_____5__h2450[11] ?
						5'd11 :
						(_theResult_____5__h2450[12] ?
						   5'd12 :
						   (_theResult_____5__h2450[13] ?
						      5'd13 :
						      (_theResult_____5__h2450[14] ?
							 5'd14 :
							 (_theResult_____5__h2450[15] ?
							    5'd15 :
							    (_theResult_____5__h2450[16] ?
							       5'd16 :
							       (_theResult_____5__h2450[17] ?
								  5'd17 :
								  (_theResult_____5__h2450[18] ?
								     5'd18 :
								     (_theResult_____5__h2450[19] ?
									5'd19 :
									(_theResult_____5__h2450[20] ?
									   5'd20 :
									   (_theResult_____5__h2450[21] ?
									      5'd21 :
									      (_theResult_____5__h2450[22] ?
										 5'd22 :
										 (_theResult_____5__h2450[23] ?
										    5'd23 :
										    (_theResult_____5__h2450[24] ?
										       5'd24 :
										       (_theResult_____5__h2450[25] ?
											  5'd25 :
											  (_theResult_____5__h2450[26] ?
											     5'd26 :
											     5'd27)))))))))))))))))))))))))) ;
  assign lv_zeros_on_left__h7766 =
	     _theResult_____5__h7421[0] ?
	       6'd0 :
	       (_theResult_____5__h7421[1] ?
		  6'd1 :
		  (_theResult_____5__h7421[2] ?
		     6'd2 :
		     (_theResult_____5__h7421[3] ?
			6'd3 :
			(_theResult_____5__h7421[4] ?
			   6'd4 :
			   (_theResult_____5__h7421[5] ?
			      6'd5 :
			      (_theResult_____5__h7421[6] ?
				 6'd6 :
				 (_theResult_____5__h7421[7] ?
				    6'd7 :
				    (_theResult_____5__h7421[8] ?
				       6'd8 :
				       (_theResult_____5__h7421[9] ?
					  6'd9 :
					  (_theResult_____5__h7421[10] ?
					     6'd10 :
					     (_theResult_____5__h7421[11] ?
						6'd11 :
						(_theResult_____5__h7421[12] ?
						   6'd12 :
						   (_theResult_____5__h7421[13] ?
						      6'd13 :
						      (_theResult_____5__h7421[14] ?
							 6'd14 :
							 (_theResult_____5__h7421[15] ?
							    6'd15 :
							    (_theResult_____5__h7421[16] ?
							       6'd16 :
							       (_theResult_____5__h7421[17] ?
								  6'd17 :
								  (_theResult_____5__h7421[18] ?
								     6'd18 :
								     (_theResult_____5__h7421[19] ?
									6'd19 :
									(_theResult_____5__h7421[20] ?
									   6'd20 :
									   (_theResult_____5__h7421[21] ?
									      6'd21 :
									      (_theResult_____5__h7421[22] ?
										 6'd22 :
										 (_theResult_____5__h7421[23] ?
										    6'd23 :
										    (_theResult_____5__h7421[24] ?
										       6'd24 :
										       (_theResult_____5__h7421[25] ?
											  6'd25 :
											  (_theResult_____5__h7421[26] ?
											     6'd26 :
											     (_theResult_____5__h7421[27] ?
												6'd27 :
												(_theResult_____5__h7421[28] ?
												   6'd28 :
												   (_theResult_____5__h7421[29] ?
												      6'd29 :
												      (_theResult_____5__h7421[30] ?
													 6'd30 :
													 (_theResult_____5__h7421[31] ?
													    6'd31 :
													    (_theResult_____5__h7421[32] ?
													       6'd32 :
													       (_theResult_____5__h7421[33] ?
														  6'd33 :
														  (_theResult_____5__h7421[34] ?
														     6'd34 :
														     (_theResult_____5__h7421[35] ?
															6'd35 :
															(_theResult_____5__h7421[36] ?
															   6'd36 :
															   (_theResult_____5__h7421[37] ?
															      6'd37 :
															      (_theResult_____5__h7421[38] ?
																 6'd38 :
																 (_theResult_____5__h7421[39] ?
																    6'd39 :
																    (_theResult_____5__h7421[40] ?
																       6'd40 :
																       (_theResult_____5__h7421[41] ?
																	  6'd41 :
																	  (_theResult_____5__h7421[42] ?
																	     6'd42 :
																	     (_theResult_____5__h7421[43] ?
																		6'd43 :
																		(_theResult_____5__h7421[44] ?
																		   6'd44 :
																		   (_theResult_____5__h7421[45] ?
																		      6'd45 :
																		      (_theResult_____5__h7421[46] ?
																			 6'd46 :
																			 (_theResult_____5__h7421[47] ?
																			    6'd47 :
																			    (_theResult_____5__h7421[48] ?
																			       6'd48 :
																			       (_theResult_____5__h7421[49] ?
																				  6'd49 :
																				  (_theResult_____5__h7421[50] ?
																				     6'd50 :
																				     (_theResult_____5__h7421[51] ?
																					6'd51 :
																					(_theResult_____5__h7421[52] ?
																					   6'd52 :
																					   (_theResult_____5__h7421[53] ?
																					      6'd53 :
																					      (_theResult_____5__h7421[54] ?
																						 6'd54 :
																						 (_theResult_____5__h7421[55] ?
																						    6'd55 :
																						    6'd56))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign lv_zeros_on_right__h17680 = { 5'd0, x__h17703 } ;
  assign lv_zeros_on_right__h28158 = { 3'd0, x__h28181 } ;
  assign mantissa_to_shift___1__h27419 =
	     { IF_IF_wr_operand1_whas__55_THEN_wr_operand1_wg_ETC___d808[56:1],
	       lv_zeros_on_right__h17680 < exp_diff__h17679 ||
	       IF_IF_wr_operand1_whas__55_THEN_wr_operand1_wg_ETC___d808[0] } ;
  assign mantissa_to_shift___1__h33088 =
	     { IF_IF_wr_operand1_whas__55_THEN_wr_operand1_wg_ETC___d940[27:1],
	       lv_zeros_on_right__h28158 < exp_diff__h28157 ||
	       IF_IF_wr_operand1_whas__55_THEN_wr_operand1_wg_ETC___d940[0] } ;
  assign mantissa_to_shift__h17678 =
	     IF_wr_operand1_whas__55_THEN_wr_operand1_wget__ETC___d677 ?
	       _theResult_____5__h17665 :
	       _theResult_____4__h17666 ;
  assign mantissa_to_shift__h28156 =
	     IF_wr_operand1_whas__55_THEN_wr_operand1_wget__ETC___d868 ?
	       _theResult_____5__h28143 :
	       _theResult_____4__h28144 ;
  assign operand2__h16400 = EN__start ? _start_operand2 : 64'd0 ;
  assign result__h18381 = { 2'd1, operand2__h16400[51:0], 3'b0 } ;
  assign result__h18457 = { 2'd1, x__read__h742[51:0], 3'b0 } ;
  assign result__h28632 = { 2'd1, operand2__h16400[22:0], 3'b0 } ;
  assign result__h28708 = { 2'd1, x__read__h742[22:0], 3'b0 } ;
  assign v_exponent_out__h2688 =
	     (_0b0_CONCAT_inst_spfpu_add_sub_ff_stage1_rv_por_ETC___d110[9] |
	      _0b0_CONCAT_inst_spfpu_add_sub_ff_stage1_rv_por_ETC___d110[8]) ?
	       8'd0 :
	       _0b0_CONCAT_inst_spfpu_add_sub_ff_stage1_rv_por_ETC___d110[7:0] ;
  assign v_exponent_out__h7659 =
	     (_0b0_CONCAT_inst_dpfpu_add_sub_ff_stage1_rv_por_ETC___d401[12] |
	      _0b0_CONCAT_inst_dpfpu_add_sub_ff_stage1_rv_por_ETC___d401[11]) ?
	       11'd0 :
	       _0b0_CONCAT_inst_dpfpu_add_sub_ff_stage1_rv_por_ETC___d401[10:0] ;
  assign v_final_result__h12902 =
	     inst_dpfpu_add_sub_ff_stage2_rv[26] ?
	       64'h7FF8000000000000 :
	       y_avValue_snd_snd_snd_snd_snd_snd_snd_snd_snd_snd__h12985 ;
  assign v_final_result__h34884 =
	     { CASE_wr_instructionwget_BITS_14_TO_12_0b0_ope_ETC__q18,
	       x__read__h742[62:0] } ;
  assign v_final_result__h35282 = { 32'd0, x__h35295 } ;
  assign v_final_result__h39705 = { 54'd0, x__h39719 } ;
  assign v_final_result__h40590 = { 54'd0, x__h40604 } ;
  assign v_final_result__h5843 = { 32'd0, x__h6019 } ;
  assign v_new_mantissa__h2685 =
	     (_0b0_CONCAT_inst_spfpu_add_sub_ff_stage1_rv_por_ETC___d110[9] ||
	      _0b0_CONCAT_inst_spfpu_add_sub_ff_stage1_rv_por_ETC___d110[8]) ?
	       28'd0 :
	       (_theResult_____5__h2450[27] ?
		  lv_new_mantissa__h4808 :
		  lv_new_mantissa__h4892) ;
  assign v_new_mantissa__h7656 =
	     (_0b0_CONCAT_inst_dpfpu_add_sub_ff_stage1_rv_por_ETC___d401[12] ||
	      _0b0_CONCAT_inst_dpfpu_add_sub_ff_stage1_rv_por_ETC___d401[11]) ?
	       57'd0 :
	       (_theResult_____5__h7421[56] ?
		  lv_new_mantissa__h11867 :
		  lv_new_mantissa__h11951) ;
  assign x1_avValue_snd_snd_fst__h12916 =
	     !inst_dpfpu_add_sub_ff_stage2_rv[26] &&
	     inst_dpfpu_add_sub_ff_stage2_rv[25:24] == 2'd0 &&
	     (inst_dpfpu_add_sub_ff_stage2_rv[21] ||
	      lv_exp_out__h12267 == 11'd2047) ;
  assign x1_avValue_snd_snd_fst__h5857 =
	     !inst_spfpu_add_sub_ff_stage2_rv[23] &&
	     inst_spfpu_add_sub_ff_stage2_rv[22:21] == 2'd0 &&
	     (inst_spfpu_add_sub_ff_stage2_rv[18] ||
	      lv_exp_out__h5208 == 8'd255) ;
  assign x1_avValue_snd_snd_snd_fst__h12946 =
	     (inst_dpfpu_add_sub_ff_stage2_rv[26] ||
	      inst_dpfpu_add_sub_ff_stage2_rv[25:24] != 2'd0 ||
	      inst_dpfpu_add_sub_ff_stage2_rv[21] ||
	      lv_exp_out__h12267 == 11'd2047) ?
	       inst_dpfpu_add_sub_ff_stage2_rv[20] :
	       y_avValue_snd_fst__h12954 ;
  assign x1_avValue_snd_snd_snd_fst__h5887 =
	     (inst_spfpu_add_sub_ff_stage2_rv[23] ||
	      inst_spfpu_add_sub_ff_stage2_rv[22:21] != 2'd0 ||
	      inst_spfpu_add_sub_ff_stage2_rv[18] ||
	      lv_exp_out__h5208 == 8'd255) ?
	       inst_spfpu_add_sub_ff_stage2_rv[17] :
	       y_avValue_snd_fst__h5895 ;
  assign x1_avValue_snd_snd_snd_snd_snd_snd_snd_snd_snd_fst__h12986 =
	     !inst_dpfpu_add_sub_ff_stage2_rv[26] &&
	     inst_dpfpu_add_sub_ff_stage2_rv_port0__read__2_ETC___d499 ;
  assign x1_avValue_snd_snd_snd_snd_snd_snd_snd_snd_snd_fst__h5927 =
	     !inst_spfpu_add_sub_ff_stage2_rv[23] &&
	     inst_spfpu_add_sub_ff_stage2_rv_port0__read__3_ETC___d208 ;
  assign x__h12016 =
	     !_0b0_CONCAT_inst_dpfpu_add_sub_ff_stage1_rv_por_ETC___d401[12] &&
	     _0b0_CONCAT_inst_dpfpu_add_sub_ff_stage1_rv_por_ETC___d401[11] ;
  assign x__h12458 =
	     inst_dpfpu_add_sub_ff_stage2_rv[31] |
	     inst_dpfpu_add_sub_ff_stage2_rv[29] ;
  assign x__h12549 =
	     inst_dpfpu_add_sub_ff_stage2_rv[29] |
	     inst_dpfpu_add_sub_ff_stage2_rv[28] ;
  assign x__h12564 =
	     inst_dpfpu_add_sub_ff_stage2_rv[30] |
	     inst_dpfpu_add_sub_ff_stage2_rv[29] ;
  assign x__h17703 =
	     mantissa_to_shift__h17678[56] ?
	       6'd0 :
	       (mantissa_to_shift__h17678[55] ?
		  6'd1 :
		  (mantissa_to_shift__h17678[54] ?
		     6'd2 :
		     (mantissa_to_shift__h17678[53] ?
			6'd3 :
			(mantissa_to_shift__h17678[52] ?
			   6'd4 :
			   (mantissa_to_shift__h17678[51] ?
			      6'd5 :
			      (mantissa_to_shift__h17678[50] ?
				 6'd6 :
				 (mantissa_to_shift__h17678[49] ?
				    6'd7 :
				    (mantissa_to_shift__h17678[48] ?
				       6'd8 :
				       (mantissa_to_shift__h17678[47] ?
					  6'd9 :
					  (mantissa_to_shift__h17678[46] ?
					     6'd10 :
					     (mantissa_to_shift__h17678[45] ?
						6'd11 :
						(mantissa_to_shift__h17678[44] ?
						   6'd12 :
						   (mantissa_to_shift__h17678[43] ?
						      6'd13 :
						      (mantissa_to_shift__h17678[42] ?
							 6'd14 :
							 (mantissa_to_shift__h17678[41] ?
							    6'd15 :
							    (mantissa_to_shift__h17678[40] ?
							       6'd16 :
							       (mantissa_to_shift__h17678[39] ?
								  6'd17 :
								  (mantissa_to_shift__h17678[38] ?
								     6'd18 :
								     (mantissa_to_shift__h17678[37] ?
									6'd19 :
									(mantissa_to_shift__h17678[36] ?
									   6'd20 :
									   (mantissa_to_shift__h17678[35] ?
									      6'd21 :
									      (mantissa_to_shift__h17678[34] ?
										 6'd22 :
										 (mantissa_to_shift__h17678[33] ?
										    6'd23 :
										    (mantissa_to_shift__h17678[32] ?
										       6'd24 :
										       (mantissa_to_shift__h17678[31] ?
											  6'd25 :
											  (mantissa_to_shift__h17678[30] ?
											     6'd26 :
											     (mantissa_to_shift__h17678[29] ?
												6'd27 :
												(mantissa_to_shift__h17678[28] ?
												   6'd28 :
												   (mantissa_to_shift__h17678[27] ?
												      6'd29 :
												      (mantissa_to_shift__h17678[26] ?
													 6'd30 :
													 (mantissa_to_shift__h17678[25] ?
													    6'd31 :
													    (mantissa_to_shift__h17678[24] ?
													       6'd32 :
													       (mantissa_to_shift__h17678[23] ?
														  6'd33 :
														  (mantissa_to_shift__h17678[22] ?
														     6'd34 :
														     (mantissa_to_shift__h17678[21] ?
															6'd35 :
															(mantissa_to_shift__h17678[20] ?
															   6'd36 :
															   (mantissa_to_shift__h17678[19] ?
															      6'd37 :
															      (mantissa_to_shift__h17678[18] ?
																 6'd38 :
																 (mantissa_to_shift__h17678[17] ?
																    6'd39 :
																    (mantissa_to_shift__h17678[16] ?
																       6'd40 :
																       (mantissa_to_shift__h17678[15] ?
																	  6'd41 :
																	  (mantissa_to_shift__h17678[14] ?
																	     6'd42 :
																	     (mantissa_to_shift__h17678[13] ?
																		6'd43 :
																		(mantissa_to_shift__h17678[12] ?
																		   6'd44 :
																		   (mantissa_to_shift__h17678[11] ?
																		      6'd45 :
																		      (mantissa_to_shift__h17678[10] ?
																			 6'd46 :
																			 (mantissa_to_shift__h17678[9] ?
																			    6'd47 :
																			    (mantissa_to_shift__h17678[8] ?
																			       6'd48 :
																			       (mantissa_to_shift__h17678[7] ?
																				  6'd49 :
																				  (mantissa_to_shift__h17678[6] ?
																				     6'd50 :
																				     (mantissa_to_shift__h17678[5] ?
																					6'd51 :
																					(mantissa_to_shift__h17678[4] ?
																					   6'd52 :
																					   (mantissa_to_shift__h17678[3] ?
																					      6'd53 :
																					      (mantissa_to_shift__h17678[2] ?
																						 6'd54 :
																						 (mantissa_to_shift__h17678[1] ?
																						    6'd55 :
																						    (mantissa_to_shift__h17678[0] ?
																						       6'd56 :
																						       6'd57)))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign x__h2483 = x__h2485 & y__h2486 ;
  assign x__h2485 =
	     inst_spfpu_add_sub_ff_stage1_rv[79] ^
	     inst_spfpu_add_sub_ff_stage1_rv[78] ;
  assign x__h2487 = ~x__h2485 ;
  assign x__h2731 = x__h2733 + y__h2734 ;
  assign x__h2733 = { 2'b0, inst_spfpu_add_sub_ff_stage1_rv[20:13] } ;
  assign x__h27593 =
	     IF_wr_operand1_whas__55_THEN_wr_operand1_wget__ETC___d677 ?
	       mantissa_to_shift___1__h27419 :
	       _theResult_____5__h17665 ;
  assign x__h27677 =
	     IF_wr_operand1_whas__55_THEN_wr_operand1_wget__ETC___d677 ?
	       _theResult_____4__h17666 :
	       mantissa_to_shift___1__h27419 ;
  assign x__h27678 =
	     x__read__h742[62:52] == 11'd2047 &&
	     x__read__h742[51:0] == 52'd0 &&
	     operand2__h16400[62:52] == 11'd2047 &&
	     operand2__h16400[51:0] == 52'd0 ||
	     x__read__h742[62:52] == 11'd2047 &&
	     x__read__h742[51:0] != 52'd0 ||
	     operand2__h16400[62:52] == 11'd2047 &&
	     operand2__h16400[51:0] != 52'd0 ;
  assign x__h27815 = x__h27678 ? 2'd0 : _theResult_____6_snd__h27835 ;
  assign x__h27857 =
	     (x__read__h742[62:52] == 11'd2047 &&
	      x__read__h742[51:0] != 52'd0 ||
	      operand2__h16400[62:52] == 11'd2047 &&
	      operand2__h16400[51:0] != 52'd0 ||
	      x__read__h742[62:52] == 11'd2047 &&
	      x__read__h742[51:0] == 52'd0 ||
	      operand2__h16400[62:52] == 11'd2047 &&
	      operand2__h16400[51:0] == 52'd0) ?
	       2'd0 :
	       IF_IF_wr_operand1_whas__55_THEN_wr_operand1_wg_ETC___d857 ;
  assign x__h28181 =
	     mantissa_to_shift__h28156[27] ?
	       5'd0 :
	       (mantissa_to_shift__h28156[26] ?
		  5'd1 :
		  (mantissa_to_shift__h28156[25] ?
		     5'd2 :
		     (mantissa_to_shift__h28156[24] ?
			5'd3 :
			(mantissa_to_shift__h28156[23] ?
			   5'd4 :
			   (mantissa_to_shift__h28156[22] ?
			      5'd5 :
			      (mantissa_to_shift__h28156[21] ?
				 5'd6 :
				 (mantissa_to_shift__h28156[20] ?
				    5'd7 :
				    (mantissa_to_shift__h28156[19] ?
				       5'd8 :
				       (mantissa_to_shift__h28156[18] ?
					  5'd9 :
					  (mantissa_to_shift__h28156[17] ?
					     5'd10 :
					     (mantissa_to_shift__h28156[16] ?
						5'd11 :
						(mantissa_to_shift__h28156[15] ?
						   5'd12 :
						   (mantissa_to_shift__h28156[14] ?
						      5'd13 :
						      (mantissa_to_shift__h28156[13] ?
							 5'd14 :
							 (mantissa_to_shift__h28156[12] ?
							    5'd15 :
							    (mantissa_to_shift__h28156[11] ?
							       5'd16 :
							       (mantissa_to_shift__h28156[10] ?
								  5'd17 :
								  (mantissa_to_shift__h28156[9] ?
								     5'd18 :
								     (mantissa_to_shift__h28156[8] ?
									5'd19 :
									(mantissa_to_shift__h28156[7] ?
									   5'd20 :
									   (mantissa_to_shift__h28156[6] ?
									      5'd21 :
									      (mantissa_to_shift__h28156[5] ?
										 5'd22 :
										 (mantissa_to_shift__h28156[4] ?
										    5'd23 :
										    (mantissa_to_shift__h28156[3] ?
										       5'd24 :
										       (mantissa_to_shift__h28156[2] ?
											  5'd25 :
											  (mantissa_to_shift__h28156[1] ?
											     5'd26 :
											     (mantissa_to_shift__h28156[0] ?
												5'd27 :
												5'd28))))))))))))))))))))))))))) ;
  assign x__h33260 =
	     IF_wr_operand1_whas__55_THEN_wr_operand1_wget__ETC___d868 ?
	       mantissa_to_shift___1__h33088 :
	       _theResult_____5__h28143 ;
  assign x__h33344 =
	     IF_wr_operand1_whas__55_THEN_wr_operand1_wget__ETC___d868 ?
	       _theResult_____4__h28144 :
	       mantissa_to_shift___1__h33088 ;
  assign x__h33345 =
	     x__read__h742[30:23] == 8'd255 && x__read__h742[22:0] == 23'd0 &&
	     operand2__h16400[30:23] == 8'd255 &&
	     operand2__h16400[22:0] == 23'd0 ||
	     x__read__h742[30:23] == 8'd255 && x__read__h742[22:0] != 23'd0 ||
	     operand2__h16400[30:23] == 8'd255 &&
	     operand2__h16400[22:0] != 23'd0 ;
  assign x__h33482 = x__h33345 ? 2'd0 : _theResult_____6_snd__h33502 ;
  assign x__h33524 =
	     (x__read__h742[30:23] == 8'd255 &&
	      x__read__h742[22:0] != 23'd0 ||
	      operand2__h16400[30:23] == 8'd255 &&
	      operand2__h16400[22:0] != 23'd0 ||
	      x__read__h742[30:23] == 8'd255 &&
	      x__read__h742[22:0] == 23'd0 ||
	      operand2__h16400[30:23] == 8'd255 &&
	      operand2__h16400[22:0] == 23'd0) ?
	       2'd0 :
	       IF_IF_wr_operand1_whas__55_THEN_wr_operand1_wg_ETC___d986 ;
  assign x__h35295 =
	     { CASE_wr_instructionwget_BITS_14_TO_12_0b0_ope_ETC__q17,
	       x__read__h742[30:0] } ;
  assign x__h38518 = EN__start ? _start_operand3 : 64'd0 ;
  assign x__h39719 =
	     (x__read__h742[31] && x__read__h742[30:23] == 8'd255 &&
	      x__read__h742[22:0] == 23'd0) ?
	       10'd1 :
	       ((!x__read__h742[22] && x__read__h742[0]) ?
		  10'd256 :
		  ((!x__read__h742[31] && x__read__h742[30:23] == 8'd255 &&
		    x__read__h742[22:0] == 23'd0) ?
		     10'd128 :
		     ((x__read__h742[30:23] == 8'd255 && x__read__h742[22]) ?
			10'd512 :
			((x__read__h742[31] && x__read__h742[30:23] != 8'd0) ?
			   10'd2 :
			   ((!x__read__h742[31] &&
			     x__read__h742[30:23] != 8'd0) ?
			      10'd64 :
			      ((x__read__h742[31] &&
				x__read__h742[30:23] == 8'd0 &&
				x__read__h742[22:0] != 23'd0) ?
				 10'd4 :
				 ((!x__read__h742[31] &&
				   x__read__h742[30:23] == 8'd0 &&
				   x__read__h742[22:0] != 23'd0) ?
				    10'd32 :
				    ((x__read__h742[31] &&
				      x__read__h742[30:23] != 8'd255 &&
				      x__read__h742[22:0] != 23'd8388607) ?
				       10'd8 :
				       ((!x__read__h742[31] &&
					 x__read__h742[30:23] == 8'd0 &&
					 x__read__h742[22:0] == 23'd0) ?
					  10'd16 :
					  10'd0))))))))) ;
  assign x__h40604 =
	     (x__read__h742[63] && x__read__h742[62:52] == 11'd2047 &&
	      x__read__h742[51:0] == 52'd0) ?
	       10'd1 :
	       ((!x__read__h742[51] && x__read__h742[0]) ?
		  10'd256 :
		  ((!x__read__h742[63] && x__read__h742[62:52] == 11'd2047 &&
		    x__read__h742[51:0] == 52'd0) ?
		     10'd128 :
		     ((x__read__h742[62:52] == 11'd2047 &&
		       x__read__h742[51]) ?
			10'd512 :
			((x__read__h742[63] &&
			  x__read__h742[62:52] != 11'd0) ?
			   10'd2 :
			   ((!x__read__h742[63] &&
			     x__read__h742[62:52] != 11'd0) ?
			      10'd64 :
			      ((x__read__h742[63] &&
				x__read__h742[62:52] == 11'd0 &&
				x__read__h742[51:0] != 52'd0) ?
				 10'd4 :
				 ((!x__read__h742[63] &&
				   x__read__h742[62:52] == 11'd0 &&
				   x__read__h742[51:0] != 52'd0) ?
				    10'd32 :
				    ((x__read__h742[63] &&
				      x__read__h742[62:52] != 11'd2047 &&
				      x__read__h742[51:0] !=
				      52'hFFFFFFFFFFFFF) ?
				       10'd8 :
				       ((!x__read__h742[63] &&
					 x__read__h742[62:52] == 11'd0 &&
					 x__read__h742[51:0] == 52'd0) ?
					  10'd16 :
					  10'd0))))))))) ;
  assign x__h4957 =
	     !_0b0_CONCAT_inst_spfpu_add_sub_ff_stage1_rv_por_ETC___d110[9] &&
	     _0b0_CONCAT_inst_spfpu_add_sub_ff_stage1_rv_por_ETC___d110[8] ;
  assign x__h5399 =
	     inst_spfpu_add_sub_ff_stage2_rv[28] |
	     inst_spfpu_add_sub_ff_stage2_rv[26] ;
  assign x__h5490 =
	     inst_spfpu_add_sub_ff_stage2_rv[26] |
	     inst_spfpu_add_sub_ff_stage2_rv[25] ;
  assign x__h5505 =
	     inst_spfpu_add_sub_ff_stage2_rv[27] |
	     inst_spfpu_add_sub_ff_stage2_rv[26] ;
  assign x__h6019 =
	     inst_spfpu_add_sub_ff_stage2_rv[23] ?
	       32'h7FC00000 :
	       y_avValue_snd_snd_snd_snd_snd_snd_snd_snd_snd_snd__h5926 ;
  assign x__h7454 = x__h7456 & y__h7457 ;
  assign x__h7456 =
	     inst_dpfpu_add_sub_ff_stage1_rv[140] ^
	     inst_dpfpu_add_sub_ff_stage1_rv[139] ;
  assign x__h7458 = ~x__h7456 ;
  assign x__h7702 = x__h7704 + y__h7705 ;
  assign x__h7704 = { 2'b0, inst_dpfpu_add_sub_ff_stage1_rv[23:13] } ;
  assign x__read__h742 = EN__start ? _start_operand1 : 64'd0 ;
  assign y__h12432 = x__h12458 | inst_dpfpu_add_sub_ff_stage2_rv[28] ;
  assign y__h12548 = x__h12549 | y__h12550 ;
  assign y__h12550 = ~inst_dpfpu_add_sub_ff_stage2_rv[27] ;
  assign y__h2484 = x__h2487 & inst_spfpu_add_sub_ff_stage1_rv[77] ;
  assign y__h2486 = ~inst_spfpu_add_sub_ff_stage1_rv[77] ;
  assign y__h2732 = { 5'd0, _theResult_____3__h2592 } ;
  assign y__h2734 = { 9'd0, _theResult_____5__h2450[27] } ;
  assign y__h27974 = wr_instruction$wget[2] ^ operand2__h16400[63] ;
  assign y__h33639 = wr_instruction$wget[2] ^ operand2__h16400[31] ;
  assign y__h5373 = x__h5399 | inst_spfpu_add_sub_ff_stage2_rv[25] ;
  assign y__h5489 = x__h5490 | y__h5491 ;
  assign y__h5491 = ~inst_spfpu_add_sub_ff_stage2_rv[24] ;
  assign y__h7455 = x__h7458 & inst_dpfpu_add_sub_ff_stage1_rv[138] ;
  assign y__h7457 = ~inst_dpfpu_add_sub_ff_stage1_rv[138] ;
  assign y__h7703 = { 7'd0, _theResult_____3__h7563 } ;
  assign y__h7705 = { 12'd0, _theResult_____5__h7421[56] } ;
  assign y_avValue_snd_fst__h12954 =
	     lv_exp_out__h12267 == 11'd0 &&
	     lv_new_mantissa___2__h12268 != 57'd0 ||
	     inst_dpfpu_add_sub_ff_stage2_rv[20] ;
  assign y_avValue_snd_fst__h5895 =
	     lv_exp_out__h5208 == 8'd0 &&
	     lv_new_mantissa___2__h5209 != 28'd0 ||
	     inst_spfpu_add_sub_ff_stage2_rv[17] ;
  assign y_avValue_snd_snd_snd__h13045 =
	     { inst_dpfpu_add_sub_ff_stage2_rv[27], 63'd0 } ;
  assign y_avValue_snd_snd_snd__h5986 =
	     { inst_spfpu_add_sub_ff_stage2_rv[24], 31'd0 } ;
  assign y_avValue_snd_snd_snd_snd_snd_snd__h13029 =
	     { inst_dpfpu_add_sub_ff_stage2_rv[27],
	       (inst_dpfpu_add_sub_ff_stage2_rv[8:6] == 3'b011 &&
		!inst_dpfpu_add_sub_ff_stage2_rv[27] ||
		inst_dpfpu_add_sub_ff_stage2_rv[8:6] == 3'b010 &&
		inst_dpfpu_add_sub_ff_stage2_rv[27] ||
		inst_dpfpu_add_sub_ff_stage2_rv[8:6] == 3'b0) ?
		 63'h7FF0000000000000 :
		 63'h7FEFFFFFFFFFFFFF } ;
  assign y_avValue_snd_snd_snd_snd_snd_snd__h13031 =
	     (lv_exp_out__h12267 == 11'd0 &&
	      lv_new_mantissa___2__h12268 != 57'd0 ||
	      inst_dpfpu_add_sub_ff_stage2_rv[20]) ?
	       y_avValue_snd_snd_snd__h13045 :
	       _theResult_____1_snd_snd__h13060 ;
  assign y_avValue_snd_snd_snd_snd_snd_snd__h5970 =
	     { inst_spfpu_add_sub_ff_stage2_rv[24],
	       (inst_spfpu_add_sub_ff_stage2_rv[8:6] == 3'b011 &&
		!inst_spfpu_add_sub_ff_stage2_rv[24] ||
		inst_spfpu_add_sub_ff_stage2_rv[8:6] == 3'b010 &&
		inst_spfpu_add_sub_ff_stage2_rv[24] ||
		inst_spfpu_add_sub_ff_stage2_rv[8:6] == 3'b0) ?
		 31'h7F800000 :
		 31'h7F7FFFFF } ;
  assign y_avValue_snd_snd_snd_snd_snd_snd__h5972 =
	     (lv_exp_out__h5208 == 8'd0 &&
	      lv_new_mantissa___2__h5209 != 28'd0 ||
	      inst_spfpu_add_sub_ff_stage2_rv[17]) ?
	       y_avValue_snd_snd_snd__h5986 :
	       _theResult_____1_snd_snd__h6001 ;
  assign y_avValue_snd_snd_snd_snd_snd_snd_snd__h13009 =
	     (inst_dpfpu_add_sub_ff_stage2_rv[21] ||
	      lv_exp_out__h12267 == 11'd2047) ?
	       y_avValue_snd_snd_snd_snd_snd_snd__h13029 :
	       y_avValue_snd_snd_snd_snd_snd_snd__h13031 ;
  assign y_avValue_snd_snd_snd_snd_snd_snd_snd__h5950 =
	     (inst_spfpu_add_sub_ff_stage2_rv[18] ||
	      lv_exp_out__h5208 == 8'd255) ?
	       y_avValue_snd_snd_snd_snd_snd_snd__h5970 :
	       y_avValue_snd_snd_snd_snd_snd_snd__h5972 ;
  assign y_avValue_snd_snd_snd_snd_snd_snd_snd_snd_snd_snd__h12985 =
	     (inst_dpfpu_add_sub_ff_stage2_rv[25:24] == 2'd0) ?
	       y_avValue_snd_snd_snd_snd_snd_snd_snd__h13009 :
	       lv_final_output___1__h13105 ;
  assign y_avValue_snd_snd_snd_snd_snd_snd_snd_snd_snd_snd__h5926 =
	     (inst_spfpu_add_sub_ff_stage2_rv[22:21] == 2'd0) ?
	       y_avValue_snd_snd_snd_snd_snd_snd_snd__h5950 :
	       lv_final_output___1__h6046 ;
  always@(inst_spfpu_add_sub_ff_stage2_rv or
	  lv_inexact__h5204 or
	  y__h5491 or
	  lv_roundup___1__h5361 or
	  lv_roundup___1__h5493 or lv_roundup___1__h5477)
  begin
    case (inst_spfpu_add_sub_ff_stage2_rv[8:6])
      3'b0:
	  IF_inst_spfpu_add_sub_ff_stage2_rv_port0__read_ETC___d170 =
	      lv_roundup___1__h5361;
      3'b011:
	  IF_inst_spfpu_add_sub_ff_stage2_rv_port0__read_ETC___d170 =
	      lv_roundup___1__h5493;
      3'b100:
	  IF_inst_spfpu_add_sub_ff_stage2_rv_port0__read_ETC___d170 =
	      lv_roundup___1__h5477;
      default: IF_inst_spfpu_add_sub_ff_stage2_rv_port0__read_ETC___d170 =
		   inst_spfpu_add_sub_ff_stage2_rv[8:6] == 3'b010 &&
		   lv_inexact__h5204 & y__h5491;
    endcase
  end
  always@(inst_spfpu_add_sub_ff_stage2_rv or lv_final_output__h6002)
  begin
    case (inst_spfpu_add_sub_ff_stage2_rv[20:19])
      2'd0: _theResult_____1_snd_snd__h6001 = lv_final_output__h6002;
      2'b11: _theResult_____1_snd_snd__h6001 = 32'h80000000;
      default: _theResult_____1_snd_snd__h6001 = 32'd0;
    endcase
  end
  always@(inst_dpfpu_add_sub_ff_stage2_rv or
	  lv_inexact__h12263 or
	  y__h12550 or
	  lv_roundup___1__h12420 or
	  lv_roundup___1__h12552 or lv_roundup___1__h12536)
  begin
    case (inst_dpfpu_add_sub_ff_stage2_rv[8:6])
      3'b0:
	  IF_inst_dpfpu_add_sub_ff_stage2_rv_port0__read_ETC___d461 =
	      lv_roundup___1__h12420;
      3'b011:
	  IF_inst_dpfpu_add_sub_ff_stage2_rv_port0__read_ETC___d461 =
	      lv_roundup___1__h12552;
      3'b100:
	  IF_inst_dpfpu_add_sub_ff_stage2_rv_port0__read_ETC___d461 =
	      lv_roundup___1__h12536;
      default: IF_inst_dpfpu_add_sub_ff_stage2_rv_port0__read_ETC___d461 =
		   inst_dpfpu_add_sub_ff_stage2_rv[8:6] == 3'b010 &&
		   lv_inexact__h12263 & y__h12550;
    endcase
  end
  always@(inst_dpfpu_add_sub_ff_stage2_rv or lv_final_output__h13061)
  begin
    case (inst_dpfpu_add_sub_ff_stage2_rv[23:22])
      2'd0: _theResult_____1_snd_snd__h13060 = lv_final_output__h13061;
      2'b11: _theResult_____1_snd_snd__h13060 = 64'h8000000000000000;
      default: _theResult_____1_snd_snd__h13060 = 64'd0;
    endcase
  end
  always@(inst_fpu_compare_min_max$result_)
  begin
    case (inst_fpu_compare_min_max$result_[3:1])
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4:
	  CASE_inst_fpu_compare_min_maxresult_BITS_3_TO_ETC__q1 =
	      inst_fpu_compare_min_max$result_[3:1];
      default: CASE_inst_fpu_compare_min_maxresult_BITS_3_TO_ETC__q1 = 3'd5;
    endcase
  end
  always@(inst_fpu_int_to_fp$result_)
  begin
    case (inst_fpu_int_to_fp$result_[3:1])
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4:
	  CASE_inst_fpu_int_to_fpresult_BITS_3_TO_1_0_i_ETC__q2 =
	      inst_fpu_int_to_fp$result_[3:1];
      default: CASE_inst_fpu_int_to_fpresult_BITS_3_TO_1_0_i_ETC__q2 = 3'd5;
    endcase
  end
  always@(inst_fpu_convert_sp_dp$result_)
  begin
    case (inst_fpu_convert_sp_dp$result_[3:1])
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4:
	  CASE_inst_fpu_convert_sp_dpresult_BITS_3_TO_1_ETC__q3 =
	      inst_fpu_convert_sp_dp$result_[3:1];
      default: CASE_inst_fpu_convert_sp_dpresult_BITS_3_TO_1_ETC__q3 = 3'd5;
    endcase
  end
  always@(inst_dpfpu_add_sub_ff_final_out_rv)
  begin
    case (inst_dpfpu_add_sub_ff_final_out_rv[3:1])
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4:
	  CASE_inst_dpfpu_add_sub_ff_final_out_rv_BITS_3_ETC__q4 =
	      inst_dpfpu_add_sub_ff_final_out_rv[3:1];
      default: CASE_inst_dpfpu_add_sub_ff_final_out_rv_BITS_3_ETC__q4 = 3'd5;
    endcase
  end
  always@(inst_dpfpu_sign_injection_ff_final_out_rv)
  begin
    case (inst_dpfpu_sign_injection_ff_final_out_rv[3:1])
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4:
	  CASE_inst_dpfpu_sign_injection_ff_final_out_rv_ETC__q5 =
	      inst_dpfpu_sign_injection_ff_final_out_rv[3:1];
      default: CASE_inst_dpfpu_sign_injection_ff_final_out_rv_ETC__q5 = 3'd5;
    endcase
  end
  always@(inst_spfpu_add_sub_ff_final_out_rv)
  begin
    case (inst_spfpu_add_sub_ff_final_out_rv[3:1])
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4:
	  CASE_inst_spfpu_add_sub_ff_final_out_rv_BITS_3_ETC__q6 =
	      inst_spfpu_add_sub_ff_final_out_rv[3:1];
      default: CASE_inst_spfpu_add_sub_ff_final_out_rv_BITS_3_ETC__q6 = 3'd5;
    endcase
  end
  always@(inst_spfpu_sign_injection_ff_final_out_rv)
  begin
    case (inst_spfpu_sign_injection_ff_final_out_rv[3:1])
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4:
	  CASE_inst_spfpu_sign_injection_ff_final_out_rv_ETC__q7 =
	      inst_spfpu_sign_injection_ff_final_out_rv[3:1];
      default: CASE_inst_spfpu_sign_injection_ff_final_out_rv_ETC__q7 = 3'd5;
    endcase
  end
  always@(inst_spfpu_divider$final_result_)
  begin
    case (inst_spfpu_divider$final_result_[3:1])
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4:
	  CASE_inst_spfpu_dividerfinal_result_BITS_3_TO_ETC__q8 =
	      inst_spfpu_divider$final_result_[3:1];
      default: CASE_inst_spfpu_dividerfinal_result_BITS_3_TO_ETC__q8 = 3'd5;
    endcase
  end
  always@(inst_dpfpu_divider$final_result_)
  begin
    case (inst_dpfpu_divider$final_result_[3:1])
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4:
	  CASE_inst_dpfpu_dividerfinal_result_BITS_3_TO_ETC__q9 =
	      inst_dpfpu_divider$final_result_[3:1];
      default: CASE_inst_dpfpu_dividerfinal_result_BITS_3_TO_ETC__q9 = 3'd5;
    endcase
  end
  always@(inst_spfpu_sqrt$get_result)
  begin
    case (inst_spfpu_sqrt$get_result[3:1])
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4:
	  CASE_inst_spfpu_sqrtget_result_BITS_3_TO_1_0__ETC__q10 =
	      inst_spfpu_sqrt$get_result[3:1];
      default: CASE_inst_spfpu_sqrtget_result_BITS_3_TO_1_0__ETC__q10 = 3'd5;
    endcase
  end
  always@(inst_spfp_to_int$get_result)
  begin
    case (inst_spfp_to_int$get_result[3:1])
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4:
	  CASE_inst_spfp_to_intget_result_BITS_3_TO_1_0_ETC__q11 =
	      inst_spfp_to_int$get_result[3:1];
      default: CASE_inst_spfp_to_intget_result_BITS_3_TO_1_0_ETC__q11 = 3'd5;
    endcase
  end
  always@(inst_spfm_add_sub$get_result)
  begin
    case (inst_spfm_add_sub$get_result[3:1])
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4:
	  CASE_inst_spfm_add_subget_result_BITS_3_TO_1__ETC__q12 =
	      inst_spfm_add_sub$get_result[3:1];
      default: CASE_inst_spfm_add_subget_result_BITS_3_TO_1__ETC__q12 = 3'd5;
    endcase
  end
  always@(inst_spfloating_multiplier$result_multiplication_)
  begin
    case (inst_spfloating_multiplier$result_multiplication_[3:1])
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4:
	  CASE_inst_spfloating_multiplierresult_multipl_ETC__q13 =
	      inst_spfloating_multiplier$result_multiplication_[3:1];
      default: CASE_inst_spfloating_multiplierresult_multipl_ETC__q13 = 3'd5;
    endcase
  end
  always@(inst_dpfpu_fclass_ff_final_out_rv)
  begin
    case (inst_dpfpu_fclass_ff_final_out_rv[3:1])
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4:
	  CASE_inst_dpfpu_fclass_ff_final_out_rv_BITS_3__ETC__q14 =
	      inst_dpfpu_fclass_ff_final_out_rv[3:1];
      default: CASE_inst_dpfpu_fclass_ff_final_out_rv_BITS_3__ETC__q14 = 3'd5;
    endcase
  end
  always@(inst_spfpu_fclass_ff_final_out_rv)
  begin
    case (inst_spfpu_fclass_ff_final_out_rv[3:1])
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4:
	  CASE_inst_spfpu_fclass_ff_final_out_rv_BITS_3__ETC__q15 =
	      inst_spfpu_fclass_ff_final_out_rv[3:1];
      default: CASE_inst_spfpu_fclass_ff_final_out_rv_BITS_3__ETC__q15 = 3'd5;
    endcase
  end
  always@(wr_result$wget)
  begin
    case (wr_result$wget[3:1])
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4:
	  CASE_wr_resultwget_BITS_3_TO_1_0_wr_resultwg_ETC__q16 =
	      wr_result$wget[3:1];
      default: CASE_wr_resultwget_BITS_3_TO_1_0_wr_resultwg_ETC__q16 = 3'd5;
    endcase
  end
  always@(wr_instruction$wget or x__read__h742 or operand2__h16400)
  begin
    case (wr_instruction$wget[14:12])
      3'b0:
	  CASE_wr_instructionwget_BITS_14_TO_12_0b0_ope_ETC__q17 =
	      operand2__h16400[31];
      3'b001:
	  CASE_wr_instructionwget_BITS_14_TO_12_0b0_ope_ETC__q17 =
	      ~operand2__h16400[31];
      default: CASE_wr_instructionwget_BITS_14_TO_12_0b0_ope_ETC__q17 =
		   x__read__h742[31] ^ operand2__h16400[31];
    endcase
  end
  always@(wr_instruction$wget or x__read__h742 or operand2__h16400)
  begin
    case (wr_instruction$wget[14:12])
      3'b0:
	  CASE_wr_instructionwget_BITS_14_TO_12_0b0_ope_ETC__q18 =
	      operand2__h16400[63];
      3'b001:
	  CASE_wr_instructionwget_BITS_14_TO_12_0b0_ope_ETC__q18 =
	      ~operand2__h16400[63];
      default: CASE_wr_instructionwget_BITS_14_TO_12_0b0_ope_ETC__q18 =
		   x__read__h742[63] ^ operand2__h16400[63];
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        inst_dpfpu_add_sub_ff_final_out_rv <= `BSV_ASSIGNMENT_DELAY
	    106'h0AAAAAAAAAAAAAAAAAAAAAAAAAA;
	inst_dpfpu_add_sub_ff_stage1_rv <= `BSV_ASSIGNMENT_DELAY
	    142'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	inst_dpfpu_add_sub_ff_stage2_rv <= `BSV_ASSIGNMENT_DELAY
	    86'h0AAAAAAAAAAAAAAAAAAAAA;
	inst_dpfpu_add_sub_rg_ready_signal <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inst_dpfpu_fclass_ff_final_out_rv <= `BSV_ASSIGNMENT_DELAY
	    106'h0AAAAAAAAAAAAAAAAAAAAAAAAAA;
	inst_dpfpu_fclass_rg_ready_signal <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inst_dpfpu_sign_injection_ff_final_out_rv <= `BSV_ASSIGNMENT_DELAY
	    106'h0AAAAAAAAAAAAAAAAAAAAAAAAAA;
	inst_dpfpu_sign_injection_rg_ready_signal <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	inst_spfpu_add_sub_ff_final_out_rv <= `BSV_ASSIGNMENT_DELAY
	    106'h0AAAAAAAAAAAAAAAAAAAAAAAAAA;
	inst_spfpu_add_sub_ff_stage1_rv <= `BSV_ASSIGNMENT_DELAY
	    81'h0AAAAAAAAAAAAAAAAAAAA;
	inst_spfpu_add_sub_ff_stage2_rv <= `BSV_ASSIGNMENT_DELAY
	    54'h0AAAAAAAAAAAAA;
	inst_spfpu_add_sub_rg_ready_signal <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inst_spfpu_fclass_ff_final_out_rv <= `BSV_ASSIGNMENT_DELAY
	    106'h0AAAAAAAAAAAAAAAAAAAAAAAAAA;
	inst_spfpu_fclass_rg_ready_signal <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inst_spfpu_sign_injection_ff_final_out_rv <= `BSV_ASSIGNMENT_DELAY
	    106'h0AAAAAAAAAAAAAAAAAAAAAAAAAA;
	inst_spfpu_sign_injection_rg_ready_signal <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
      end
    else
      begin
        if (inst_dpfpu_add_sub_ff_final_out_rv$EN)
	  inst_dpfpu_add_sub_ff_final_out_rv <= `BSV_ASSIGNMENT_DELAY
	      inst_dpfpu_add_sub_ff_final_out_rv$D_IN;
	if (inst_dpfpu_add_sub_ff_stage1_rv$EN)
	  inst_dpfpu_add_sub_ff_stage1_rv <= `BSV_ASSIGNMENT_DELAY
	      inst_dpfpu_add_sub_ff_stage1_rv$D_IN;
	if (inst_dpfpu_add_sub_ff_stage2_rv$EN)
	  inst_dpfpu_add_sub_ff_stage2_rv <= `BSV_ASSIGNMENT_DELAY
	      inst_dpfpu_add_sub_ff_stage2_rv$D_IN;
	if (inst_dpfpu_add_sub_rg_ready_signal$EN)
	  inst_dpfpu_add_sub_rg_ready_signal <= `BSV_ASSIGNMENT_DELAY
	      inst_dpfpu_add_sub_rg_ready_signal$D_IN;
	if (inst_dpfpu_fclass_ff_final_out_rv$EN)
	  inst_dpfpu_fclass_ff_final_out_rv <= `BSV_ASSIGNMENT_DELAY
	      inst_dpfpu_fclass_ff_final_out_rv$D_IN;
	if (inst_dpfpu_fclass_rg_ready_signal$EN)
	  inst_dpfpu_fclass_rg_ready_signal <= `BSV_ASSIGNMENT_DELAY
	      inst_dpfpu_fclass_rg_ready_signal$D_IN;
	if (inst_dpfpu_sign_injection_ff_final_out_rv$EN)
	  inst_dpfpu_sign_injection_ff_final_out_rv <= `BSV_ASSIGNMENT_DELAY
	      inst_dpfpu_sign_injection_ff_final_out_rv$D_IN;
	if (inst_dpfpu_sign_injection_rg_ready_signal$EN)
	  inst_dpfpu_sign_injection_rg_ready_signal <= `BSV_ASSIGNMENT_DELAY
	      inst_dpfpu_sign_injection_rg_ready_signal$D_IN;
	if (inst_spfpu_add_sub_ff_final_out_rv$EN)
	  inst_spfpu_add_sub_ff_final_out_rv <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_add_sub_ff_final_out_rv$D_IN;
	if (inst_spfpu_add_sub_ff_stage1_rv$EN)
	  inst_spfpu_add_sub_ff_stage1_rv <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_add_sub_ff_stage1_rv$D_IN;
	if (inst_spfpu_add_sub_ff_stage2_rv$EN)
	  inst_spfpu_add_sub_ff_stage2_rv <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_add_sub_ff_stage2_rv$D_IN;
	if (inst_spfpu_add_sub_rg_ready_signal$EN)
	  inst_spfpu_add_sub_rg_ready_signal <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_add_sub_rg_ready_signal$D_IN;
	if (inst_spfpu_fclass_ff_final_out_rv$EN)
	  inst_spfpu_fclass_ff_final_out_rv <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_fclass_ff_final_out_rv$D_IN;
	if (inst_spfpu_fclass_rg_ready_signal$EN)
	  inst_spfpu_fclass_rg_ready_signal <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_fclass_rg_ready_signal$D_IN;
	if (inst_spfpu_sign_injection_ff_final_out_rv$EN)
	  inst_spfpu_sign_injection_ff_final_out_rv <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_sign_injection_ff_final_out_rv$D_IN;
	if (inst_spfpu_sign_injection_rg_ready_signal$EN)
	  inst_spfpu_sign_injection_rg_ready_signal <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_sign_injection_rg_ready_signal$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    inst_dpfpu_add_sub_ff_final_out_rv = 106'h2AAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfpu_add_sub_ff_stage1_rv =
	142'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfpu_add_sub_ff_stage2_rv = 86'h2AAAAAAAAAAAAAAAAAAAAA;
    inst_dpfpu_add_sub_rg_ready_signal = 1'h0;
    inst_dpfpu_fclass_ff_final_out_rv = 106'h2AAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfpu_fclass_rg_ready_signal = 1'h0;
    inst_dpfpu_sign_injection_ff_final_out_rv =
	106'h2AAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfpu_sign_injection_rg_ready_signal = 1'h0;
    inst_spfpu_add_sub_ff_final_out_rv = 106'h2AAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_spfpu_add_sub_ff_stage1_rv = 81'h0AAAAAAAAAAAAAAAAAAAA;
    inst_spfpu_add_sub_ff_stage2_rv = 54'h2AAAAAAAAAAAAA;
    inst_spfpu_add_sub_rg_ready_signal = 1'h0;
    inst_spfpu_fclass_ff_final_out_rv = 106'h2AAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_spfpu_fclass_rg_ready_signal = 1'h0;
    inst_spfpu_sign_injection_ff_final_out_rv =
	106'h2AAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_spfpu_sign_injection_rg_ready_signal = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_fpu_int_to_fp)
	$display("Got output from fpu_int_to_fp");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fpu_int_to_fp)
	$display("Giving inputs to fpu_int_to_fp %h", x__read__h742);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_fpu_compare_min_max)
	$display("Got output from fpu_compare_min_max");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fpu_compare_min_max)
	$display("Giving inputs to fpu_compare_min_max");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_fpu_convert_sp_dp)
	$display("Got output from fpu_convert_sp_dp");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fpu_convert_sp_dp)
	$display("Give inputs to fpu_convert_sp_dp");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_add_sub)
	$display("Got output from dpfpu add_sub unit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_add_sub)
	$display("Got output from spfpu add_sub unit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_sign_injection)
	$display("Got output from dpfpu sign injection");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_sign_injection)
	$display("Got output from spfpu sign injection unit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fpu_sign_injection)
	$display("Giving inputs to the fpu sign injection");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_divider)
	$display("Got output from spfpu divider");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_spfpu_divider)
	$display("Giving inputs to the spfpu divider");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_divider)
	$display("Got output from dpfpu divider");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_dpfpu_divider)
	$display("Giving inputs to the dpfpu divider");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt)
	$display("Got output from spfpu sqrt");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_spfpu_sqrt)
	$display("Giving inputs to the spfpu sqrt");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_fp_to_int)
	$display("Got output from fpu to int conversion Module");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fp_to_int)
	$display("Giving Inputs to fpu to int Conversion Module");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fm_add_sub)
	$display("Giving Inputs to sp fused multiply add Conversion Module");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_fm_add_sub)
	$display("Got output from sp fused multiple add conversion Module");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_spfloating_multiplier)
	$display("Giving inputs to the spfloating multiplier module");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfloating_multiplier)
	$display("Got output from spfloating multiplier module");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfclass)
	$display("Got output from spclassify module");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfclass)
	$display("Got output from dpclassify module");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_spfloating_classify)
	$display("Giving inputs to floating classify module");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_add_sub_rl_stage3 &&
	  !inst_spfpu_add_sub_ff_stage2_rv[23] &&
	  inst_spfpu_add_sub_ff_stage2_rv[22:21] == 2'd0 &&
	  (inst_spfpu_add_sub_ff_stage2_rv[18] ||
	   lv_exp_out__h5208 == 8'd255))
	$display("dpfloat_add_sub: Overflow has occured");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_add_sub_rl_stage3 &&
	  !inst_spfpu_add_sub_ff_stage2_rv[23] &&
	  inst_spfpu_add_sub_ff_stage2_rv[22:21] == 2'd0 &&
	  !inst_spfpu_add_sub_ff_stage2_rv[18] &&
	  lv_exp_out__h5208 != 8'd255 &&
	  (lv_exp_out__h5208 == 8'd0 && lv_new_mantissa___2__h5209 != 28'd0 ||
	   inst_spfpu_add_sub_ff_stage2_rv[17]))
	$display("underflow");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_add_sub_rl_stage2)
	$display("man1: %h mantissa2: %h",
		 inst_spfpu_add_sub_ff_stage1_rv[76:49],
		 inst_spfpu_add_sub_ff_stage1_rv[48:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_add_sub_rl_stage2)
	$display("lv_sum_mantissa= %h", _theResult_____5__h2450);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_add_sub_rl_stage2)
	$display("lv_sign_bit_output: %b", _theResult_____4__h2505);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_add_sub_rl_stage3 &&
	  !inst_dpfpu_add_sub_ff_stage2_rv[26] &&
	  inst_dpfpu_add_sub_ff_stage2_rv[25:24] == 2'd0 &&
	  (inst_dpfpu_add_sub_ff_stage2_rv[21] ||
	   lv_exp_out__h12267 == 11'd2047))
	$display("dpfloat_add_sub: Overflow has occured");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_add_sub_rl_stage3 &&
	  !inst_dpfpu_add_sub_ff_stage2_rv[26] &&
	  inst_dpfpu_add_sub_ff_stage2_rv[25:24] == 2'd0 &&
	  !inst_dpfpu_add_sub_ff_stage2_rv[21] &&
	  lv_exp_out__h12267 != 11'd2047 &&
	  (lv_exp_out__h12267 == 11'd0 &&
	   lv_new_mantissa___2__h12268 != 57'd0 ||
	   inst_dpfpu_add_sub_ff_stage2_rv[20]))
	$display("underflow");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_add_sub_rl_stage2)
	$display("man1: %h mantissa2: %h",
		 inst_dpfpu_add_sub_ff_stage1_rv[137:81],
		 inst_dpfpu_add_sub_ff_stage1_rv[80:24]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_add_sub_rl_stage2)
	$display("lv_sum_mantissa= %h", _theResult_____5__h7421);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_add_sub_rl_stage2)
	$display("lv_sign_bit_output: %b", _theResult_____4__h7476);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fpu_add_sub &&
	  wr_instruction$wget[25])
	$display("zeros on right: %d exp_diff: %d",
		 lv_zeros_on_right__h17680,
		 exp_diff__h17679);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fpu_add_sub &&
	  !wr_instruction$wget[25])
	$display("zeros on right: %d exp_diff: %d",
		 lv_zeros_on_right__h28158,
		 exp_diff__h28157);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fpu_add_sub)
	$display("Giving inputs to the fpu add_sub");
  end
  // synopsys translate_on
endmodule  // mkfpu

