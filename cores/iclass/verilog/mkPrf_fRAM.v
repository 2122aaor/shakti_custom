//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// On Tue Sep 29 16:30:47 IST 2015
//
//
// Ports:
// Name                         I/O  size props
// RDY_update_fRAM_1              O     1 const
// RDY_update_fRAM_2              O     1 const
// RDY_update_whole_fRAM          O     1 const
// to_map_get                     O   224 reg
// RDY_to_map_get                 O     1 const
// return_whole_fRAM              O   224 reg
// RDY_return_whole_fRAM          O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// update_fRAM_1_entry_slot       I     5
// update_fRAM_1_entry_val        I     7
// update_fRAM_2_entry_slot       I     5
// update_fRAM_2_entry_val        I     7
// update_whole_fRAM_entries_fRAM  I   224
// EN_update_fRAM_1               I     1
// EN_update_fRAM_2               I     1
// EN_update_whole_fRAM           I     1
// EN_to_map_get                  I     1 unused
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkPrf_fRAM(CLK,
		  RST_N,

		  update_fRAM_1_entry_slot,
		  update_fRAM_1_entry_val,
		  EN_update_fRAM_1,
		  RDY_update_fRAM_1,

		  update_fRAM_2_entry_slot,
		  update_fRAM_2_entry_val,
		  EN_update_fRAM_2,
		  RDY_update_fRAM_2,

		  update_whole_fRAM_entries_fRAM,
		  EN_update_whole_fRAM,
		  RDY_update_whole_fRAM,

		  EN_to_map_get,
		  to_map_get,
		  RDY_to_map_get,

		  return_whole_fRAM,
		  RDY_return_whole_fRAM);
  input  CLK;
  input  RST_N;

  // action method update_fRAM_1
  input  [4 : 0] update_fRAM_1_entry_slot;
  input  [6 : 0] update_fRAM_1_entry_val;
  input  EN_update_fRAM_1;
  output RDY_update_fRAM_1;

  // action method update_fRAM_2
  input  [4 : 0] update_fRAM_2_entry_slot;
  input  [6 : 0] update_fRAM_2_entry_val;
  input  EN_update_fRAM_2;
  output RDY_update_fRAM_2;

  // action method update_whole_fRAM
  input  [223 : 0] update_whole_fRAM_entries_fRAM;
  input  EN_update_whole_fRAM;
  output RDY_update_whole_fRAM;

  // actionvalue method to_map_get
  input  EN_to_map_get;
  output [223 : 0] to_map_get;
  output RDY_to_map_get;

  // value method return_whole_fRAM
  output [223 : 0] return_whole_fRAM;
  output RDY_return_whole_fRAM;

  // signals for module outputs
  wire [223 : 0] return_whole_fRAM, to_map_get;
  wire RDY_return_whole_fRAM,
       RDY_to_map_get,
       RDY_update_fRAM_1,
       RDY_update_fRAM_2,
       RDY_update_whole_fRAM;

  // register fRAM_0
  reg [6 : 0] fRAM_0;
  reg [6 : 0] fRAM_0$D_IN;
  wire fRAM_0$EN;

  // register fRAM_1
  reg [6 : 0] fRAM_1;
  reg [6 : 0] fRAM_1$D_IN;
  wire fRAM_1$EN;

  // register fRAM_10
  reg [6 : 0] fRAM_10;
  reg [6 : 0] fRAM_10$D_IN;
  wire fRAM_10$EN;

  // register fRAM_11
  reg [6 : 0] fRAM_11;
  reg [6 : 0] fRAM_11$D_IN;
  wire fRAM_11$EN;

  // register fRAM_12
  reg [6 : 0] fRAM_12;
  reg [6 : 0] fRAM_12$D_IN;
  wire fRAM_12$EN;

  // register fRAM_13
  reg [6 : 0] fRAM_13;
  reg [6 : 0] fRAM_13$D_IN;
  wire fRAM_13$EN;

  // register fRAM_14
  reg [6 : 0] fRAM_14;
  reg [6 : 0] fRAM_14$D_IN;
  wire fRAM_14$EN;

  // register fRAM_15
  reg [6 : 0] fRAM_15;
  reg [6 : 0] fRAM_15$D_IN;
  wire fRAM_15$EN;

  // register fRAM_16
  reg [6 : 0] fRAM_16;
  reg [6 : 0] fRAM_16$D_IN;
  wire fRAM_16$EN;

  // register fRAM_17
  reg [6 : 0] fRAM_17;
  reg [6 : 0] fRAM_17$D_IN;
  wire fRAM_17$EN;

  // register fRAM_18
  reg [6 : 0] fRAM_18;
  reg [6 : 0] fRAM_18$D_IN;
  wire fRAM_18$EN;

  // register fRAM_19
  reg [6 : 0] fRAM_19;
  reg [6 : 0] fRAM_19$D_IN;
  wire fRAM_19$EN;

  // register fRAM_2
  reg [6 : 0] fRAM_2;
  reg [6 : 0] fRAM_2$D_IN;
  wire fRAM_2$EN;

  // register fRAM_20
  reg [6 : 0] fRAM_20;
  reg [6 : 0] fRAM_20$D_IN;
  wire fRAM_20$EN;

  // register fRAM_21
  reg [6 : 0] fRAM_21;
  reg [6 : 0] fRAM_21$D_IN;
  wire fRAM_21$EN;

  // register fRAM_22
  reg [6 : 0] fRAM_22;
  reg [6 : 0] fRAM_22$D_IN;
  wire fRAM_22$EN;

  // register fRAM_23
  reg [6 : 0] fRAM_23;
  reg [6 : 0] fRAM_23$D_IN;
  wire fRAM_23$EN;

  // register fRAM_24
  reg [6 : 0] fRAM_24;
  reg [6 : 0] fRAM_24$D_IN;
  wire fRAM_24$EN;

  // register fRAM_25
  reg [6 : 0] fRAM_25;
  reg [6 : 0] fRAM_25$D_IN;
  wire fRAM_25$EN;

  // register fRAM_26
  reg [6 : 0] fRAM_26;
  reg [6 : 0] fRAM_26$D_IN;
  wire fRAM_26$EN;

  // register fRAM_27
  reg [6 : 0] fRAM_27;
  reg [6 : 0] fRAM_27$D_IN;
  wire fRAM_27$EN;

  // register fRAM_28
  reg [6 : 0] fRAM_28;
  reg [6 : 0] fRAM_28$D_IN;
  wire fRAM_28$EN;

  // register fRAM_29
  reg [6 : 0] fRAM_29;
  reg [6 : 0] fRAM_29$D_IN;
  wire fRAM_29$EN;

  // register fRAM_3
  reg [6 : 0] fRAM_3;
  reg [6 : 0] fRAM_3$D_IN;
  wire fRAM_3$EN;

  // register fRAM_30
  reg [6 : 0] fRAM_30;
  reg [6 : 0] fRAM_30$D_IN;
  wire fRAM_30$EN;

  // register fRAM_31
  reg [6 : 0] fRAM_31;
  reg [6 : 0] fRAM_31$D_IN;
  wire fRAM_31$EN;

  // register fRAM_4
  reg [6 : 0] fRAM_4;
  reg [6 : 0] fRAM_4$D_IN;
  wire fRAM_4$EN;

  // register fRAM_5
  reg [6 : 0] fRAM_5;
  reg [6 : 0] fRAM_5$D_IN;
  wire fRAM_5$EN;

  // register fRAM_6
  reg [6 : 0] fRAM_6;
  reg [6 : 0] fRAM_6$D_IN;
  wire fRAM_6$EN;

  // register fRAM_7
  reg [6 : 0] fRAM_7;
  reg [6 : 0] fRAM_7$D_IN;
  wire fRAM_7$EN;

  // register fRAM_8
  reg [6 : 0] fRAM_8;
  reg [6 : 0] fRAM_8$D_IN;
  wire fRAM_8$EN;

  // register fRAM_9
  reg [6 : 0] fRAM_9;
  reg [6 : 0] fRAM_9$D_IN;
  wire fRAM_9$EN;

  // rule scheduling signals
  wire CAN_FIRE_to_map_get,
       CAN_FIRE_update_fRAM_1,
       CAN_FIRE_update_fRAM_2,
       CAN_FIRE_update_whole_fRAM,
       WILL_FIRE_to_map_get,
       WILL_FIRE_update_fRAM_1,
       WILL_FIRE_update_fRAM_2,
       WILL_FIRE_update_whole_fRAM;

  // inputs to muxes for submodule ports
  wire MUX_fRAM_0$write_1__SEL_2,
       MUX_fRAM_0$write_1__SEL_3,
       MUX_fRAM_1$write_1__SEL_2,
       MUX_fRAM_1$write_1__SEL_3,
       MUX_fRAM_10$write_1__SEL_2,
       MUX_fRAM_10$write_1__SEL_3,
       MUX_fRAM_11$write_1__SEL_2,
       MUX_fRAM_11$write_1__SEL_3,
       MUX_fRAM_12$write_1__SEL_2,
       MUX_fRAM_12$write_1__SEL_3,
       MUX_fRAM_13$write_1__SEL_2,
       MUX_fRAM_13$write_1__SEL_3,
       MUX_fRAM_14$write_1__SEL_2,
       MUX_fRAM_14$write_1__SEL_3,
       MUX_fRAM_15$write_1__SEL_2,
       MUX_fRAM_15$write_1__SEL_3,
       MUX_fRAM_16$write_1__SEL_2,
       MUX_fRAM_16$write_1__SEL_3,
       MUX_fRAM_17$write_1__SEL_2,
       MUX_fRAM_17$write_1__SEL_3,
       MUX_fRAM_18$write_1__SEL_2,
       MUX_fRAM_18$write_1__SEL_3,
       MUX_fRAM_19$write_1__SEL_2,
       MUX_fRAM_19$write_1__SEL_3,
       MUX_fRAM_2$write_1__SEL_2,
       MUX_fRAM_2$write_1__SEL_3,
       MUX_fRAM_20$write_1__SEL_2,
       MUX_fRAM_20$write_1__SEL_3,
       MUX_fRAM_21$write_1__SEL_2,
       MUX_fRAM_21$write_1__SEL_3,
       MUX_fRAM_22$write_1__SEL_2,
       MUX_fRAM_22$write_1__SEL_3,
       MUX_fRAM_23$write_1__SEL_2,
       MUX_fRAM_23$write_1__SEL_3,
       MUX_fRAM_24$write_1__SEL_2,
       MUX_fRAM_24$write_1__SEL_3,
       MUX_fRAM_25$write_1__SEL_2,
       MUX_fRAM_25$write_1__SEL_3,
       MUX_fRAM_26$write_1__SEL_2,
       MUX_fRAM_26$write_1__SEL_3,
       MUX_fRAM_27$write_1__SEL_2,
       MUX_fRAM_27$write_1__SEL_3,
       MUX_fRAM_28$write_1__SEL_2,
       MUX_fRAM_28$write_1__SEL_3,
       MUX_fRAM_29$write_1__SEL_2,
       MUX_fRAM_29$write_1__SEL_3,
       MUX_fRAM_3$write_1__SEL_2,
       MUX_fRAM_3$write_1__SEL_3,
       MUX_fRAM_30$write_1__SEL_2,
       MUX_fRAM_30$write_1__SEL_3,
       MUX_fRAM_31$write_1__SEL_2,
       MUX_fRAM_31$write_1__SEL_3,
       MUX_fRAM_4$write_1__SEL_2,
       MUX_fRAM_4$write_1__SEL_3,
       MUX_fRAM_5$write_1__SEL_2,
       MUX_fRAM_5$write_1__SEL_3,
       MUX_fRAM_6$write_1__SEL_2,
       MUX_fRAM_6$write_1__SEL_3,
       MUX_fRAM_7$write_1__SEL_2,
       MUX_fRAM_7$write_1__SEL_3,
       MUX_fRAM_8$write_1__SEL_2,
       MUX_fRAM_8$write_1__SEL_3,
       MUX_fRAM_9$write_1__SEL_2,
       MUX_fRAM_9$write_1__SEL_3;

  // action method update_fRAM_1
  assign RDY_update_fRAM_1 = 1'd1 ;
  assign CAN_FIRE_update_fRAM_1 = 1'd1 ;
  assign WILL_FIRE_update_fRAM_1 = EN_update_fRAM_1 ;

  // action method update_fRAM_2
  assign RDY_update_fRAM_2 = 1'd1 ;
  assign CAN_FIRE_update_fRAM_2 = 1'd1 ;
  assign WILL_FIRE_update_fRAM_2 = EN_update_fRAM_2 ;

  // action method update_whole_fRAM
  assign RDY_update_whole_fRAM = 1'd1 ;
  assign CAN_FIRE_update_whole_fRAM = 1'd1 ;
  assign WILL_FIRE_update_whole_fRAM = EN_update_whole_fRAM ;

  // actionvalue method to_map_get
  assign to_map_get = return_whole_fRAM ;
  assign RDY_to_map_get = 1'd1 ;
  assign CAN_FIRE_to_map_get = 1'd1 ;
  assign WILL_FIRE_to_map_get = EN_to_map_get ;

  // value method return_whole_fRAM
  assign return_whole_fRAM =
	     { fRAM_31,
	       fRAM_30,
	       fRAM_29,
	       fRAM_28,
	       fRAM_27,
	       fRAM_26,
	       fRAM_25,
	       fRAM_24,
	       fRAM_23,
	       fRAM_22,
	       fRAM_21,
	       fRAM_20,
	       fRAM_19,
	       fRAM_18,
	       fRAM_17,
	       fRAM_16,
	       fRAM_15,
	       fRAM_14,
	       fRAM_13,
	       fRAM_12,
	       fRAM_11,
	       fRAM_10,
	       fRAM_9,
	       fRAM_8,
	       fRAM_7,
	       fRAM_6,
	       fRAM_5,
	       fRAM_4,
	       fRAM_3,
	       fRAM_2,
	       fRAM_1,
	       fRAM_0 } ;
  assign RDY_return_whole_fRAM = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_fRAM_0$write_1__SEL_2 =
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd0 ;
  assign MUX_fRAM_0$write_1__SEL_3 =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd0 ;
  assign MUX_fRAM_1$write_1__SEL_2 =
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd1 ;
  assign MUX_fRAM_1$write_1__SEL_3 =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd1 ;
  assign MUX_fRAM_10$write_1__SEL_2 =
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd10 ;
  assign MUX_fRAM_10$write_1__SEL_3 =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd10 ;
  assign MUX_fRAM_11$write_1__SEL_2 =
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd11 ;
  assign MUX_fRAM_11$write_1__SEL_3 =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd11 ;
  assign MUX_fRAM_12$write_1__SEL_2 =
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd12 ;
  assign MUX_fRAM_12$write_1__SEL_3 =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd12 ;
  assign MUX_fRAM_13$write_1__SEL_2 =
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd13 ;
  assign MUX_fRAM_13$write_1__SEL_3 =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd13 ;
  assign MUX_fRAM_14$write_1__SEL_2 =
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd14 ;
  assign MUX_fRAM_14$write_1__SEL_3 =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd14 ;
  assign MUX_fRAM_15$write_1__SEL_2 =
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd15 ;
  assign MUX_fRAM_15$write_1__SEL_3 =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd15 ;
  assign MUX_fRAM_16$write_1__SEL_2 =
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd16 ;
  assign MUX_fRAM_16$write_1__SEL_3 =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd16 ;
  assign MUX_fRAM_17$write_1__SEL_2 =
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd17 ;
  assign MUX_fRAM_17$write_1__SEL_3 =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd17 ;
  assign MUX_fRAM_18$write_1__SEL_2 =
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd18 ;
  assign MUX_fRAM_18$write_1__SEL_3 =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd18 ;
  assign MUX_fRAM_19$write_1__SEL_2 =
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd19 ;
  assign MUX_fRAM_19$write_1__SEL_3 =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd19 ;
  assign MUX_fRAM_2$write_1__SEL_2 =
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd2 ;
  assign MUX_fRAM_2$write_1__SEL_3 =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd2 ;
  assign MUX_fRAM_20$write_1__SEL_2 =
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd20 ;
  assign MUX_fRAM_20$write_1__SEL_3 =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd20 ;
  assign MUX_fRAM_21$write_1__SEL_2 =
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd21 ;
  assign MUX_fRAM_21$write_1__SEL_3 =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd21 ;
  assign MUX_fRAM_22$write_1__SEL_2 =
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd22 ;
  assign MUX_fRAM_22$write_1__SEL_3 =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd22 ;
  assign MUX_fRAM_23$write_1__SEL_2 =
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd23 ;
  assign MUX_fRAM_23$write_1__SEL_3 =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd23 ;
  assign MUX_fRAM_24$write_1__SEL_2 =
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd24 ;
  assign MUX_fRAM_24$write_1__SEL_3 =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd24 ;
  assign MUX_fRAM_25$write_1__SEL_2 =
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd25 ;
  assign MUX_fRAM_25$write_1__SEL_3 =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd25 ;
  assign MUX_fRAM_26$write_1__SEL_2 =
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd26 ;
  assign MUX_fRAM_26$write_1__SEL_3 =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd26 ;
  assign MUX_fRAM_27$write_1__SEL_2 =
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd27 ;
  assign MUX_fRAM_27$write_1__SEL_3 =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd27 ;
  assign MUX_fRAM_28$write_1__SEL_2 =
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd28 ;
  assign MUX_fRAM_28$write_1__SEL_3 =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd28 ;
  assign MUX_fRAM_29$write_1__SEL_2 =
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd29 ;
  assign MUX_fRAM_29$write_1__SEL_3 =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd29 ;
  assign MUX_fRAM_3$write_1__SEL_2 =
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd3 ;
  assign MUX_fRAM_3$write_1__SEL_3 =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd3 ;
  assign MUX_fRAM_30$write_1__SEL_2 =
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd30 ;
  assign MUX_fRAM_30$write_1__SEL_3 =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd30 ;
  assign MUX_fRAM_31$write_1__SEL_2 =
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd31 ;
  assign MUX_fRAM_31$write_1__SEL_3 =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd31 ;
  assign MUX_fRAM_4$write_1__SEL_2 =
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd4 ;
  assign MUX_fRAM_4$write_1__SEL_3 =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd4 ;
  assign MUX_fRAM_5$write_1__SEL_2 =
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd5 ;
  assign MUX_fRAM_5$write_1__SEL_3 =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd5 ;
  assign MUX_fRAM_6$write_1__SEL_2 =
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd6 ;
  assign MUX_fRAM_6$write_1__SEL_3 =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd6 ;
  assign MUX_fRAM_7$write_1__SEL_2 =
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd7 ;
  assign MUX_fRAM_7$write_1__SEL_3 =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd7 ;
  assign MUX_fRAM_8$write_1__SEL_2 =
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd8 ;
  assign MUX_fRAM_8$write_1__SEL_3 =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd8 ;
  assign MUX_fRAM_9$write_1__SEL_2 =
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd9 ;
  assign MUX_fRAM_9$write_1__SEL_3 =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd9 ;

  // register fRAM_0
  always@(EN_update_whole_fRAM or
	  update_whole_fRAM_entries_fRAM or
	  MUX_fRAM_0$write_1__SEL_2 or
	  update_fRAM_2_entry_val or
	  MUX_fRAM_0$write_1__SEL_3 or update_fRAM_1_entry_val)
  case (1'b1)
    EN_update_whole_fRAM: fRAM_0$D_IN = update_whole_fRAM_entries_fRAM[6:0];
    MUX_fRAM_0$write_1__SEL_2: fRAM_0$D_IN = update_fRAM_2_entry_val;
    MUX_fRAM_0$write_1__SEL_3: fRAM_0$D_IN = update_fRAM_1_entry_val;
    default: fRAM_0$D_IN = 7'b0101010 /* unspecified value */ ;
  endcase
  assign fRAM_0$EN =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd0 ||
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd0 ||
	     EN_update_whole_fRAM ;

  // register fRAM_1
  always@(EN_update_whole_fRAM or
	  update_whole_fRAM_entries_fRAM or
	  MUX_fRAM_1$write_1__SEL_2 or
	  update_fRAM_2_entry_val or
	  MUX_fRAM_1$write_1__SEL_3 or update_fRAM_1_entry_val)
  case (1'b1)
    EN_update_whole_fRAM: fRAM_1$D_IN = update_whole_fRAM_entries_fRAM[13:7];
    MUX_fRAM_1$write_1__SEL_2: fRAM_1$D_IN = update_fRAM_2_entry_val;
    MUX_fRAM_1$write_1__SEL_3: fRAM_1$D_IN = update_fRAM_1_entry_val;
    default: fRAM_1$D_IN = 7'b0101010 /* unspecified value */ ;
  endcase
  assign fRAM_1$EN =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd1 ||
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd1 ||
	     EN_update_whole_fRAM ;

  // register fRAM_10
  always@(EN_update_whole_fRAM or
	  update_whole_fRAM_entries_fRAM or
	  MUX_fRAM_10$write_1__SEL_2 or
	  update_fRAM_2_entry_val or
	  MUX_fRAM_10$write_1__SEL_3 or update_fRAM_1_entry_val)
  case (1'b1)
    EN_update_whole_fRAM:
	fRAM_10$D_IN = update_whole_fRAM_entries_fRAM[76:70];
    MUX_fRAM_10$write_1__SEL_2: fRAM_10$D_IN = update_fRAM_2_entry_val;
    MUX_fRAM_10$write_1__SEL_3: fRAM_10$D_IN = update_fRAM_1_entry_val;
    default: fRAM_10$D_IN = 7'b0101010 /* unspecified value */ ;
  endcase
  assign fRAM_10$EN =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd10 ||
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd10 ||
	     EN_update_whole_fRAM ;

  // register fRAM_11
  always@(EN_update_whole_fRAM or
	  update_whole_fRAM_entries_fRAM or
	  MUX_fRAM_11$write_1__SEL_2 or
	  update_fRAM_2_entry_val or
	  MUX_fRAM_11$write_1__SEL_3 or update_fRAM_1_entry_val)
  case (1'b1)
    EN_update_whole_fRAM:
	fRAM_11$D_IN = update_whole_fRAM_entries_fRAM[83:77];
    MUX_fRAM_11$write_1__SEL_2: fRAM_11$D_IN = update_fRAM_2_entry_val;
    MUX_fRAM_11$write_1__SEL_3: fRAM_11$D_IN = update_fRAM_1_entry_val;
    default: fRAM_11$D_IN = 7'b0101010 /* unspecified value */ ;
  endcase
  assign fRAM_11$EN =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd11 ||
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd11 ||
	     EN_update_whole_fRAM ;

  // register fRAM_12
  always@(EN_update_whole_fRAM or
	  update_whole_fRAM_entries_fRAM or
	  MUX_fRAM_12$write_1__SEL_2 or
	  update_fRAM_2_entry_val or
	  MUX_fRAM_12$write_1__SEL_3 or update_fRAM_1_entry_val)
  case (1'b1)
    EN_update_whole_fRAM:
	fRAM_12$D_IN = update_whole_fRAM_entries_fRAM[90:84];
    MUX_fRAM_12$write_1__SEL_2: fRAM_12$D_IN = update_fRAM_2_entry_val;
    MUX_fRAM_12$write_1__SEL_3: fRAM_12$D_IN = update_fRAM_1_entry_val;
    default: fRAM_12$D_IN = 7'b0101010 /* unspecified value */ ;
  endcase
  assign fRAM_12$EN =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd12 ||
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd12 ||
	     EN_update_whole_fRAM ;

  // register fRAM_13
  always@(EN_update_whole_fRAM or
	  update_whole_fRAM_entries_fRAM or
	  MUX_fRAM_13$write_1__SEL_2 or
	  update_fRAM_2_entry_val or
	  MUX_fRAM_13$write_1__SEL_3 or update_fRAM_1_entry_val)
  case (1'b1)
    EN_update_whole_fRAM:
	fRAM_13$D_IN = update_whole_fRAM_entries_fRAM[97:91];
    MUX_fRAM_13$write_1__SEL_2: fRAM_13$D_IN = update_fRAM_2_entry_val;
    MUX_fRAM_13$write_1__SEL_3: fRAM_13$D_IN = update_fRAM_1_entry_val;
    default: fRAM_13$D_IN = 7'b0101010 /* unspecified value */ ;
  endcase
  assign fRAM_13$EN =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd13 ||
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd13 ||
	     EN_update_whole_fRAM ;

  // register fRAM_14
  always@(EN_update_whole_fRAM or
	  update_whole_fRAM_entries_fRAM or
	  MUX_fRAM_14$write_1__SEL_2 or
	  update_fRAM_2_entry_val or
	  MUX_fRAM_14$write_1__SEL_3 or update_fRAM_1_entry_val)
  case (1'b1)
    EN_update_whole_fRAM:
	fRAM_14$D_IN = update_whole_fRAM_entries_fRAM[104:98];
    MUX_fRAM_14$write_1__SEL_2: fRAM_14$D_IN = update_fRAM_2_entry_val;
    MUX_fRAM_14$write_1__SEL_3: fRAM_14$D_IN = update_fRAM_1_entry_val;
    default: fRAM_14$D_IN = 7'b0101010 /* unspecified value */ ;
  endcase
  assign fRAM_14$EN =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd14 ||
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd14 ||
	     EN_update_whole_fRAM ;

  // register fRAM_15
  always@(EN_update_whole_fRAM or
	  update_whole_fRAM_entries_fRAM or
	  MUX_fRAM_15$write_1__SEL_2 or
	  update_fRAM_2_entry_val or
	  MUX_fRAM_15$write_1__SEL_3 or update_fRAM_1_entry_val)
  case (1'b1)
    EN_update_whole_fRAM:
	fRAM_15$D_IN = update_whole_fRAM_entries_fRAM[111:105];
    MUX_fRAM_15$write_1__SEL_2: fRAM_15$D_IN = update_fRAM_2_entry_val;
    MUX_fRAM_15$write_1__SEL_3: fRAM_15$D_IN = update_fRAM_1_entry_val;
    default: fRAM_15$D_IN = 7'b0101010 /* unspecified value */ ;
  endcase
  assign fRAM_15$EN =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd15 ||
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd15 ||
	     EN_update_whole_fRAM ;

  // register fRAM_16
  always@(EN_update_whole_fRAM or
	  update_whole_fRAM_entries_fRAM or
	  MUX_fRAM_16$write_1__SEL_2 or
	  update_fRAM_2_entry_val or
	  MUX_fRAM_16$write_1__SEL_3 or update_fRAM_1_entry_val)
  case (1'b1)
    EN_update_whole_fRAM:
	fRAM_16$D_IN = update_whole_fRAM_entries_fRAM[118:112];
    MUX_fRAM_16$write_1__SEL_2: fRAM_16$D_IN = update_fRAM_2_entry_val;
    MUX_fRAM_16$write_1__SEL_3: fRAM_16$D_IN = update_fRAM_1_entry_val;
    default: fRAM_16$D_IN = 7'b0101010 /* unspecified value */ ;
  endcase
  assign fRAM_16$EN =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd16 ||
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd16 ||
	     EN_update_whole_fRAM ;

  // register fRAM_17
  always@(EN_update_whole_fRAM or
	  update_whole_fRAM_entries_fRAM or
	  MUX_fRAM_17$write_1__SEL_2 or
	  update_fRAM_2_entry_val or
	  MUX_fRAM_17$write_1__SEL_3 or update_fRAM_1_entry_val)
  case (1'b1)
    EN_update_whole_fRAM:
	fRAM_17$D_IN = update_whole_fRAM_entries_fRAM[125:119];
    MUX_fRAM_17$write_1__SEL_2: fRAM_17$D_IN = update_fRAM_2_entry_val;
    MUX_fRAM_17$write_1__SEL_3: fRAM_17$D_IN = update_fRAM_1_entry_val;
    default: fRAM_17$D_IN = 7'b0101010 /* unspecified value */ ;
  endcase
  assign fRAM_17$EN =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd17 ||
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd17 ||
	     EN_update_whole_fRAM ;

  // register fRAM_18
  always@(EN_update_whole_fRAM or
	  update_whole_fRAM_entries_fRAM or
	  MUX_fRAM_18$write_1__SEL_2 or
	  update_fRAM_2_entry_val or
	  MUX_fRAM_18$write_1__SEL_3 or update_fRAM_1_entry_val)
  case (1'b1)
    EN_update_whole_fRAM:
	fRAM_18$D_IN = update_whole_fRAM_entries_fRAM[132:126];
    MUX_fRAM_18$write_1__SEL_2: fRAM_18$D_IN = update_fRAM_2_entry_val;
    MUX_fRAM_18$write_1__SEL_3: fRAM_18$D_IN = update_fRAM_1_entry_val;
    default: fRAM_18$D_IN = 7'b0101010 /* unspecified value */ ;
  endcase
  assign fRAM_18$EN =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd18 ||
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd18 ||
	     EN_update_whole_fRAM ;

  // register fRAM_19
  always@(EN_update_whole_fRAM or
	  update_whole_fRAM_entries_fRAM or
	  MUX_fRAM_19$write_1__SEL_2 or
	  update_fRAM_2_entry_val or
	  MUX_fRAM_19$write_1__SEL_3 or update_fRAM_1_entry_val)
  case (1'b1)
    EN_update_whole_fRAM:
	fRAM_19$D_IN = update_whole_fRAM_entries_fRAM[139:133];
    MUX_fRAM_19$write_1__SEL_2: fRAM_19$D_IN = update_fRAM_2_entry_val;
    MUX_fRAM_19$write_1__SEL_3: fRAM_19$D_IN = update_fRAM_1_entry_val;
    default: fRAM_19$D_IN = 7'b0101010 /* unspecified value */ ;
  endcase
  assign fRAM_19$EN =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd19 ||
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd19 ||
	     EN_update_whole_fRAM ;

  // register fRAM_2
  always@(EN_update_whole_fRAM or
	  update_whole_fRAM_entries_fRAM or
	  MUX_fRAM_2$write_1__SEL_2 or
	  update_fRAM_2_entry_val or
	  MUX_fRAM_2$write_1__SEL_3 or update_fRAM_1_entry_val)
  case (1'b1)
    EN_update_whole_fRAM: fRAM_2$D_IN = update_whole_fRAM_entries_fRAM[20:14];
    MUX_fRAM_2$write_1__SEL_2: fRAM_2$D_IN = update_fRAM_2_entry_val;
    MUX_fRAM_2$write_1__SEL_3: fRAM_2$D_IN = update_fRAM_1_entry_val;
    default: fRAM_2$D_IN = 7'b0101010 /* unspecified value */ ;
  endcase
  assign fRAM_2$EN =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd2 ||
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd2 ||
	     EN_update_whole_fRAM ;

  // register fRAM_20
  always@(EN_update_whole_fRAM or
	  update_whole_fRAM_entries_fRAM or
	  MUX_fRAM_20$write_1__SEL_2 or
	  update_fRAM_2_entry_val or
	  MUX_fRAM_20$write_1__SEL_3 or update_fRAM_1_entry_val)
  case (1'b1)
    EN_update_whole_fRAM:
	fRAM_20$D_IN = update_whole_fRAM_entries_fRAM[146:140];
    MUX_fRAM_20$write_1__SEL_2: fRAM_20$D_IN = update_fRAM_2_entry_val;
    MUX_fRAM_20$write_1__SEL_3: fRAM_20$D_IN = update_fRAM_1_entry_val;
    default: fRAM_20$D_IN = 7'b0101010 /* unspecified value */ ;
  endcase
  assign fRAM_20$EN =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd20 ||
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd20 ||
	     EN_update_whole_fRAM ;

  // register fRAM_21
  always@(EN_update_whole_fRAM or
	  update_whole_fRAM_entries_fRAM or
	  MUX_fRAM_21$write_1__SEL_2 or
	  update_fRAM_2_entry_val or
	  MUX_fRAM_21$write_1__SEL_3 or update_fRAM_1_entry_val)
  case (1'b1)
    EN_update_whole_fRAM:
	fRAM_21$D_IN = update_whole_fRAM_entries_fRAM[153:147];
    MUX_fRAM_21$write_1__SEL_2: fRAM_21$D_IN = update_fRAM_2_entry_val;
    MUX_fRAM_21$write_1__SEL_3: fRAM_21$D_IN = update_fRAM_1_entry_val;
    default: fRAM_21$D_IN = 7'b0101010 /* unspecified value */ ;
  endcase
  assign fRAM_21$EN =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd21 ||
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd21 ||
	     EN_update_whole_fRAM ;

  // register fRAM_22
  always@(EN_update_whole_fRAM or
	  update_whole_fRAM_entries_fRAM or
	  MUX_fRAM_22$write_1__SEL_2 or
	  update_fRAM_2_entry_val or
	  MUX_fRAM_22$write_1__SEL_3 or update_fRAM_1_entry_val)
  case (1'b1)
    EN_update_whole_fRAM:
	fRAM_22$D_IN = update_whole_fRAM_entries_fRAM[160:154];
    MUX_fRAM_22$write_1__SEL_2: fRAM_22$D_IN = update_fRAM_2_entry_val;
    MUX_fRAM_22$write_1__SEL_3: fRAM_22$D_IN = update_fRAM_1_entry_val;
    default: fRAM_22$D_IN = 7'b0101010 /* unspecified value */ ;
  endcase
  assign fRAM_22$EN =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd22 ||
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd22 ||
	     EN_update_whole_fRAM ;

  // register fRAM_23
  always@(EN_update_whole_fRAM or
	  update_whole_fRAM_entries_fRAM or
	  MUX_fRAM_23$write_1__SEL_2 or
	  update_fRAM_2_entry_val or
	  MUX_fRAM_23$write_1__SEL_3 or update_fRAM_1_entry_val)
  case (1'b1)
    EN_update_whole_fRAM:
	fRAM_23$D_IN = update_whole_fRAM_entries_fRAM[167:161];
    MUX_fRAM_23$write_1__SEL_2: fRAM_23$D_IN = update_fRAM_2_entry_val;
    MUX_fRAM_23$write_1__SEL_3: fRAM_23$D_IN = update_fRAM_1_entry_val;
    default: fRAM_23$D_IN = 7'b0101010 /* unspecified value */ ;
  endcase
  assign fRAM_23$EN =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd23 ||
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd23 ||
	     EN_update_whole_fRAM ;

  // register fRAM_24
  always@(EN_update_whole_fRAM or
	  update_whole_fRAM_entries_fRAM or
	  MUX_fRAM_24$write_1__SEL_2 or
	  update_fRAM_2_entry_val or
	  MUX_fRAM_24$write_1__SEL_3 or update_fRAM_1_entry_val)
  case (1'b1)
    EN_update_whole_fRAM:
	fRAM_24$D_IN = update_whole_fRAM_entries_fRAM[174:168];
    MUX_fRAM_24$write_1__SEL_2: fRAM_24$D_IN = update_fRAM_2_entry_val;
    MUX_fRAM_24$write_1__SEL_3: fRAM_24$D_IN = update_fRAM_1_entry_val;
    default: fRAM_24$D_IN = 7'b0101010 /* unspecified value */ ;
  endcase
  assign fRAM_24$EN =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd24 ||
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd24 ||
	     EN_update_whole_fRAM ;

  // register fRAM_25
  always@(EN_update_whole_fRAM or
	  update_whole_fRAM_entries_fRAM or
	  MUX_fRAM_25$write_1__SEL_2 or
	  update_fRAM_2_entry_val or
	  MUX_fRAM_25$write_1__SEL_3 or update_fRAM_1_entry_val)
  case (1'b1)
    EN_update_whole_fRAM:
	fRAM_25$D_IN = update_whole_fRAM_entries_fRAM[181:175];
    MUX_fRAM_25$write_1__SEL_2: fRAM_25$D_IN = update_fRAM_2_entry_val;
    MUX_fRAM_25$write_1__SEL_3: fRAM_25$D_IN = update_fRAM_1_entry_val;
    default: fRAM_25$D_IN = 7'b0101010 /* unspecified value */ ;
  endcase
  assign fRAM_25$EN =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd25 ||
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd25 ||
	     EN_update_whole_fRAM ;

  // register fRAM_26
  always@(EN_update_whole_fRAM or
	  update_whole_fRAM_entries_fRAM or
	  MUX_fRAM_26$write_1__SEL_2 or
	  update_fRAM_2_entry_val or
	  MUX_fRAM_26$write_1__SEL_3 or update_fRAM_1_entry_val)
  case (1'b1)
    EN_update_whole_fRAM:
	fRAM_26$D_IN = update_whole_fRAM_entries_fRAM[188:182];
    MUX_fRAM_26$write_1__SEL_2: fRAM_26$D_IN = update_fRAM_2_entry_val;
    MUX_fRAM_26$write_1__SEL_3: fRAM_26$D_IN = update_fRAM_1_entry_val;
    default: fRAM_26$D_IN = 7'b0101010 /* unspecified value */ ;
  endcase
  assign fRAM_26$EN =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd26 ||
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd26 ||
	     EN_update_whole_fRAM ;

  // register fRAM_27
  always@(EN_update_whole_fRAM or
	  update_whole_fRAM_entries_fRAM or
	  MUX_fRAM_27$write_1__SEL_2 or
	  update_fRAM_2_entry_val or
	  MUX_fRAM_27$write_1__SEL_3 or update_fRAM_1_entry_val)
  case (1'b1)
    EN_update_whole_fRAM:
	fRAM_27$D_IN = update_whole_fRAM_entries_fRAM[195:189];
    MUX_fRAM_27$write_1__SEL_2: fRAM_27$D_IN = update_fRAM_2_entry_val;
    MUX_fRAM_27$write_1__SEL_3: fRAM_27$D_IN = update_fRAM_1_entry_val;
    default: fRAM_27$D_IN = 7'b0101010 /* unspecified value */ ;
  endcase
  assign fRAM_27$EN =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd27 ||
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd27 ||
	     EN_update_whole_fRAM ;

  // register fRAM_28
  always@(EN_update_whole_fRAM or
	  update_whole_fRAM_entries_fRAM or
	  MUX_fRAM_28$write_1__SEL_2 or
	  update_fRAM_2_entry_val or
	  MUX_fRAM_28$write_1__SEL_3 or update_fRAM_1_entry_val)
  case (1'b1)
    EN_update_whole_fRAM:
	fRAM_28$D_IN = update_whole_fRAM_entries_fRAM[202:196];
    MUX_fRAM_28$write_1__SEL_2: fRAM_28$D_IN = update_fRAM_2_entry_val;
    MUX_fRAM_28$write_1__SEL_3: fRAM_28$D_IN = update_fRAM_1_entry_val;
    default: fRAM_28$D_IN = 7'b0101010 /* unspecified value */ ;
  endcase
  assign fRAM_28$EN =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd28 ||
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd28 ||
	     EN_update_whole_fRAM ;

  // register fRAM_29
  always@(EN_update_whole_fRAM or
	  update_whole_fRAM_entries_fRAM or
	  MUX_fRAM_29$write_1__SEL_2 or
	  update_fRAM_2_entry_val or
	  MUX_fRAM_29$write_1__SEL_3 or update_fRAM_1_entry_val)
  case (1'b1)
    EN_update_whole_fRAM:
	fRAM_29$D_IN = update_whole_fRAM_entries_fRAM[209:203];
    MUX_fRAM_29$write_1__SEL_2: fRAM_29$D_IN = update_fRAM_2_entry_val;
    MUX_fRAM_29$write_1__SEL_3: fRAM_29$D_IN = update_fRAM_1_entry_val;
    default: fRAM_29$D_IN = 7'b0101010 /* unspecified value */ ;
  endcase
  assign fRAM_29$EN =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd29 ||
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd29 ||
	     EN_update_whole_fRAM ;

  // register fRAM_3
  always@(EN_update_whole_fRAM or
	  update_whole_fRAM_entries_fRAM or
	  MUX_fRAM_3$write_1__SEL_2 or
	  update_fRAM_2_entry_val or
	  MUX_fRAM_3$write_1__SEL_3 or update_fRAM_1_entry_val)
  case (1'b1)
    EN_update_whole_fRAM: fRAM_3$D_IN = update_whole_fRAM_entries_fRAM[27:21];
    MUX_fRAM_3$write_1__SEL_2: fRAM_3$D_IN = update_fRAM_2_entry_val;
    MUX_fRAM_3$write_1__SEL_3: fRAM_3$D_IN = update_fRAM_1_entry_val;
    default: fRAM_3$D_IN = 7'b0101010 /* unspecified value */ ;
  endcase
  assign fRAM_3$EN =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd3 ||
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd3 ||
	     EN_update_whole_fRAM ;

  // register fRAM_30
  always@(EN_update_whole_fRAM or
	  update_whole_fRAM_entries_fRAM or
	  MUX_fRAM_30$write_1__SEL_2 or
	  update_fRAM_2_entry_val or
	  MUX_fRAM_30$write_1__SEL_3 or update_fRAM_1_entry_val)
  case (1'b1)
    EN_update_whole_fRAM:
	fRAM_30$D_IN = update_whole_fRAM_entries_fRAM[216:210];
    MUX_fRAM_30$write_1__SEL_2: fRAM_30$D_IN = update_fRAM_2_entry_val;
    MUX_fRAM_30$write_1__SEL_3: fRAM_30$D_IN = update_fRAM_1_entry_val;
    default: fRAM_30$D_IN = 7'b0101010 /* unspecified value */ ;
  endcase
  assign fRAM_30$EN =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd30 ||
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd30 ||
	     EN_update_whole_fRAM ;

  // register fRAM_31
  always@(EN_update_whole_fRAM or
	  update_whole_fRAM_entries_fRAM or
	  MUX_fRAM_31$write_1__SEL_2 or
	  update_fRAM_2_entry_val or
	  MUX_fRAM_31$write_1__SEL_3 or update_fRAM_1_entry_val)
  case (1'b1)
    EN_update_whole_fRAM:
	fRAM_31$D_IN = update_whole_fRAM_entries_fRAM[223:217];
    MUX_fRAM_31$write_1__SEL_2: fRAM_31$D_IN = update_fRAM_2_entry_val;
    MUX_fRAM_31$write_1__SEL_3: fRAM_31$D_IN = update_fRAM_1_entry_val;
    default: fRAM_31$D_IN = 7'b0101010 /* unspecified value */ ;
  endcase
  assign fRAM_31$EN =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd31 ||
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd31 ||
	     EN_update_whole_fRAM ;

  // register fRAM_4
  always@(EN_update_whole_fRAM or
	  update_whole_fRAM_entries_fRAM or
	  MUX_fRAM_4$write_1__SEL_2 or
	  update_fRAM_2_entry_val or
	  MUX_fRAM_4$write_1__SEL_3 or update_fRAM_1_entry_val)
  case (1'b1)
    EN_update_whole_fRAM: fRAM_4$D_IN = update_whole_fRAM_entries_fRAM[34:28];
    MUX_fRAM_4$write_1__SEL_2: fRAM_4$D_IN = update_fRAM_2_entry_val;
    MUX_fRAM_4$write_1__SEL_3: fRAM_4$D_IN = update_fRAM_1_entry_val;
    default: fRAM_4$D_IN = 7'b0101010 /* unspecified value */ ;
  endcase
  assign fRAM_4$EN =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd4 ||
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd4 ||
	     EN_update_whole_fRAM ;

  // register fRAM_5
  always@(EN_update_whole_fRAM or
	  update_whole_fRAM_entries_fRAM or
	  MUX_fRAM_5$write_1__SEL_2 or
	  update_fRAM_2_entry_val or
	  MUX_fRAM_5$write_1__SEL_3 or update_fRAM_1_entry_val)
  case (1'b1)
    EN_update_whole_fRAM: fRAM_5$D_IN = update_whole_fRAM_entries_fRAM[41:35];
    MUX_fRAM_5$write_1__SEL_2: fRAM_5$D_IN = update_fRAM_2_entry_val;
    MUX_fRAM_5$write_1__SEL_3: fRAM_5$D_IN = update_fRAM_1_entry_val;
    default: fRAM_5$D_IN = 7'b0101010 /* unspecified value */ ;
  endcase
  assign fRAM_5$EN =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd5 ||
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd5 ||
	     EN_update_whole_fRAM ;

  // register fRAM_6
  always@(EN_update_whole_fRAM or
	  update_whole_fRAM_entries_fRAM or
	  MUX_fRAM_6$write_1__SEL_2 or
	  update_fRAM_2_entry_val or
	  MUX_fRAM_6$write_1__SEL_3 or update_fRAM_1_entry_val)
  case (1'b1)
    EN_update_whole_fRAM: fRAM_6$D_IN = update_whole_fRAM_entries_fRAM[48:42];
    MUX_fRAM_6$write_1__SEL_2: fRAM_6$D_IN = update_fRAM_2_entry_val;
    MUX_fRAM_6$write_1__SEL_3: fRAM_6$D_IN = update_fRAM_1_entry_val;
    default: fRAM_6$D_IN = 7'b0101010 /* unspecified value */ ;
  endcase
  assign fRAM_6$EN =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd6 ||
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd6 ||
	     EN_update_whole_fRAM ;

  // register fRAM_7
  always@(EN_update_whole_fRAM or
	  update_whole_fRAM_entries_fRAM or
	  MUX_fRAM_7$write_1__SEL_2 or
	  update_fRAM_2_entry_val or
	  MUX_fRAM_7$write_1__SEL_3 or update_fRAM_1_entry_val)
  case (1'b1)
    EN_update_whole_fRAM: fRAM_7$D_IN = update_whole_fRAM_entries_fRAM[55:49];
    MUX_fRAM_7$write_1__SEL_2: fRAM_7$D_IN = update_fRAM_2_entry_val;
    MUX_fRAM_7$write_1__SEL_3: fRAM_7$D_IN = update_fRAM_1_entry_val;
    default: fRAM_7$D_IN = 7'b0101010 /* unspecified value */ ;
  endcase
  assign fRAM_7$EN =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd7 ||
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd7 ||
	     EN_update_whole_fRAM ;

  // register fRAM_8
  always@(EN_update_whole_fRAM or
	  update_whole_fRAM_entries_fRAM or
	  MUX_fRAM_8$write_1__SEL_2 or
	  update_fRAM_2_entry_val or
	  MUX_fRAM_8$write_1__SEL_3 or update_fRAM_1_entry_val)
  case (1'b1)
    EN_update_whole_fRAM: fRAM_8$D_IN = update_whole_fRAM_entries_fRAM[62:56];
    MUX_fRAM_8$write_1__SEL_2: fRAM_8$D_IN = update_fRAM_2_entry_val;
    MUX_fRAM_8$write_1__SEL_3: fRAM_8$D_IN = update_fRAM_1_entry_val;
    default: fRAM_8$D_IN = 7'b0101010 /* unspecified value */ ;
  endcase
  assign fRAM_8$EN =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd8 ||
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd8 ||
	     EN_update_whole_fRAM ;

  // register fRAM_9
  always@(EN_update_whole_fRAM or
	  update_whole_fRAM_entries_fRAM or
	  MUX_fRAM_9$write_1__SEL_2 or
	  update_fRAM_2_entry_val or
	  MUX_fRAM_9$write_1__SEL_3 or update_fRAM_1_entry_val)
  case (1'b1)
    EN_update_whole_fRAM: fRAM_9$D_IN = update_whole_fRAM_entries_fRAM[69:63];
    MUX_fRAM_9$write_1__SEL_2: fRAM_9$D_IN = update_fRAM_2_entry_val;
    MUX_fRAM_9$write_1__SEL_3: fRAM_9$D_IN = update_fRAM_1_entry_val;
    default: fRAM_9$D_IN = 7'b0101010 /* unspecified value */ ;
  endcase
  assign fRAM_9$EN =
	     EN_update_fRAM_1 && update_fRAM_1_entry_slot == 5'd9 ||
	     EN_update_fRAM_2 && update_fRAM_2_entry_slot == 5'd9 ||
	     EN_update_whole_fRAM ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        fRAM_0 <= `BSV_ASSIGNMENT_DELAY 7'd0;
	fRAM_1 <= `BSV_ASSIGNMENT_DELAY 7'd1;
	fRAM_10 <= `BSV_ASSIGNMENT_DELAY 7'd10;
	fRAM_11 <= `BSV_ASSIGNMENT_DELAY 7'd11;
	fRAM_12 <= `BSV_ASSIGNMENT_DELAY 7'd12;
	fRAM_13 <= `BSV_ASSIGNMENT_DELAY 7'd13;
	fRAM_14 <= `BSV_ASSIGNMENT_DELAY 7'd14;
	fRAM_15 <= `BSV_ASSIGNMENT_DELAY 7'd15;
	fRAM_16 <= `BSV_ASSIGNMENT_DELAY 7'd16;
	fRAM_17 <= `BSV_ASSIGNMENT_DELAY 7'd17;
	fRAM_18 <= `BSV_ASSIGNMENT_DELAY 7'd18;
	fRAM_19 <= `BSV_ASSIGNMENT_DELAY 7'd19;
	fRAM_2 <= `BSV_ASSIGNMENT_DELAY 7'd2;
	fRAM_20 <= `BSV_ASSIGNMENT_DELAY 7'd20;
	fRAM_21 <= `BSV_ASSIGNMENT_DELAY 7'd21;
	fRAM_22 <= `BSV_ASSIGNMENT_DELAY 7'd22;
	fRAM_23 <= `BSV_ASSIGNMENT_DELAY 7'd23;
	fRAM_24 <= `BSV_ASSIGNMENT_DELAY 7'd24;
	fRAM_25 <= `BSV_ASSIGNMENT_DELAY 7'd25;
	fRAM_26 <= `BSV_ASSIGNMENT_DELAY 7'd26;
	fRAM_27 <= `BSV_ASSIGNMENT_DELAY 7'd27;
	fRAM_28 <= `BSV_ASSIGNMENT_DELAY 7'd28;
	fRAM_29 <= `BSV_ASSIGNMENT_DELAY 7'd29;
	fRAM_3 <= `BSV_ASSIGNMENT_DELAY 7'd3;
	fRAM_30 <= `BSV_ASSIGNMENT_DELAY 7'd30;
	fRAM_31 <= `BSV_ASSIGNMENT_DELAY 7'd31;
	fRAM_4 <= `BSV_ASSIGNMENT_DELAY 7'd4;
	fRAM_5 <= `BSV_ASSIGNMENT_DELAY 7'd5;
	fRAM_6 <= `BSV_ASSIGNMENT_DELAY 7'd6;
	fRAM_7 <= `BSV_ASSIGNMENT_DELAY 7'd7;
	fRAM_8 <= `BSV_ASSIGNMENT_DELAY 7'd8;
	fRAM_9 <= `BSV_ASSIGNMENT_DELAY 7'd9;
      end
    else
      begin
        if (fRAM_0$EN) fRAM_0 <= `BSV_ASSIGNMENT_DELAY fRAM_0$D_IN;
	if (fRAM_1$EN) fRAM_1 <= `BSV_ASSIGNMENT_DELAY fRAM_1$D_IN;
	if (fRAM_10$EN) fRAM_10 <= `BSV_ASSIGNMENT_DELAY fRAM_10$D_IN;
	if (fRAM_11$EN) fRAM_11 <= `BSV_ASSIGNMENT_DELAY fRAM_11$D_IN;
	if (fRAM_12$EN) fRAM_12 <= `BSV_ASSIGNMENT_DELAY fRAM_12$D_IN;
	if (fRAM_13$EN) fRAM_13 <= `BSV_ASSIGNMENT_DELAY fRAM_13$D_IN;
	if (fRAM_14$EN) fRAM_14 <= `BSV_ASSIGNMENT_DELAY fRAM_14$D_IN;
	if (fRAM_15$EN) fRAM_15 <= `BSV_ASSIGNMENT_DELAY fRAM_15$D_IN;
	if (fRAM_16$EN) fRAM_16 <= `BSV_ASSIGNMENT_DELAY fRAM_16$D_IN;
	if (fRAM_17$EN) fRAM_17 <= `BSV_ASSIGNMENT_DELAY fRAM_17$D_IN;
	if (fRAM_18$EN) fRAM_18 <= `BSV_ASSIGNMENT_DELAY fRAM_18$D_IN;
	if (fRAM_19$EN) fRAM_19 <= `BSV_ASSIGNMENT_DELAY fRAM_19$D_IN;
	if (fRAM_2$EN) fRAM_2 <= `BSV_ASSIGNMENT_DELAY fRAM_2$D_IN;
	if (fRAM_20$EN) fRAM_20 <= `BSV_ASSIGNMENT_DELAY fRAM_20$D_IN;
	if (fRAM_21$EN) fRAM_21 <= `BSV_ASSIGNMENT_DELAY fRAM_21$D_IN;
	if (fRAM_22$EN) fRAM_22 <= `BSV_ASSIGNMENT_DELAY fRAM_22$D_IN;
	if (fRAM_23$EN) fRAM_23 <= `BSV_ASSIGNMENT_DELAY fRAM_23$D_IN;
	if (fRAM_24$EN) fRAM_24 <= `BSV_ASSIGNMENT_DELAY fRAM_24$D_IN;
	if (fRAM_25$EN) fRAM_25 <= `BSV_ASSIGNMENT_DELAY fRAM_25$D_IN;
	if (fRAM_26$EN) fRAM_26 <= `BSV_ASSIGNMENT_DELAY fRAM_26$D_IN;
	if (fRAM_27$EN) fRAM_27 <= `BSV_ASSIGNMENT_DELAY fRAM_27$D_IN;
	if (fRAM_28$EN) fRAM_28 <= `BSV_ASSIGNMENT_DELAY fRAM_28$D_IN;
	if (fRAM_29$EN) fRAM_29 <= `BSV_ASSIGNMENT_DELAY fRAM_29$D_IN;
	if (fRAM_3$EN) fRAM_3 <= `BSV_ASSIGNMENT_DELAY fRAM_3$D_IN;
	if (fRAM_30$EN) fRAM_30 <= `BSV_ASSIGNMENT_DELAY fRAM_30$D_IN;
	if (fRAM_31$EN) fRAM_31 <= `BSV_ASSIGNMENT_DELAY fRAM_31$D_IN;
	if (fRAM_4$EN) fRAM_4 <= `BSV_ASSIGNMENT_DELAY fRAM_4$D_IN;
	if (fRAM_5$EN) fRAM_5 <= `BSV_ASSIGNMENT_DELAY fRAM_5$D_IN;
	if (fRAM_6$EN) fRAM_6 <= `BSV_ASSIGNMENT_DELAY fRAM_6$D_IN;
	if (fRAM_7$EN) fRAM_7 <= `BSV_ASSIGNMENT_DELAY fRAM_7$D_IN;
	if (fRAM_8$EN) fRAM_8 <= `BSV_ASSIGNMENT_DELAY fRAM_8$D_IN;
	if (fRAM_9$EN) fRAM_9 <= `BSV_ASSIGNMENT_DELAY fRAM_9$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    fRAM_0 = 7'h2A;
    fRAM_1 = 7'h2A;
    fRAM_10 = 7'h2A;
    fRAM_11 = 7'h2A;
    fRAM_12 = 7'h2A;
    fRAM_13 = 7'h2A;
    fRAM_14 = 7'h2A;
    fRAM_15 = 7'h2A;
    fRAM_16 = 7'h2A;
    fRAM_17 = 7'h2A;
    fRAM_18 = 7'h2A;
    fRAM_19 = 7'h2A;
    fRAM_2 = 7'h2A;
    fRAM_20 = 7'h2A;
    fRAM_21 = 7'h2A;
    fRAM_22 = 7'h2A;
    fRAM_23 = 7'h2A;
    fRAM_24 = 7'h2A;
    fRAM_25 = 7'h2A;
    fRAM_26 = 7'h2A;
    fRAM_27 = 7'h2A;
    fRAM_28 = 7'h2A;
    fRAM_29 = 7'h2A;
    fRAM_3 = 7'h2A;
    fRAM_30 = 7'h2A;
    fRAM_31 = 7'h2A;
    fRAM_4 = 7'h2A;
    fRAM_5 = 7'h2A;
    fRAM_6 = 7'h2A;
    fRAM_7 = 7'h2A;
    fRAM_8 = 7'h2A;
    fRAM_9 = 7'h2A;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkPrf_fRAM

