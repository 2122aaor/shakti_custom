//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// On Tue Sep 29 16:30:28 IST 2015
//
//
// Ports:
// Name                         I/O  size props
// if_commit_stall                O     1
// RDY_if_commit_stall            O     1 const
// return_priv_jump_address       O    64
// RDY_return_priv_jump_address   O     1 const
// RDY_take_exception             O     1 const
// RDY_take_address_exception     O     1 const
// update_register_1              O    65
// RDY_update_register_1          O     1 const
// update_register_2              O    65
// RDY_update_register_2          O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// take_exception_exception_code  I    64 reg
// take_address_exception_address  I    64 reg
// update_register_1_inst_type    I     3
// update_register_1_csr_addr     I    64
// update_register_1_if_csr_valid  I     1
// update_register_1_value        I    64
// update_register_2_inst_type    I     3
// update_register_2_csr_addr     I    64
// update_register_2_if_csr_valid  I     1
// update_register_2_value        I    64
// EN_take_exception              I     1
// EN_take_address_exception      I     1
// EN_update_register_1           I     1
// EN_update_register_2           I     1
//
// Combinational paths from inputs to outputs:
//   (update_register_1_csr_addr,
//    update_register_1_if_csr_valid) -> update_register_1
//   (update_register_2_csr_addr,
//    update_register_2_if_csr_valid) -> update_register_2
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkInterrupt_controller(CLK,
			      RST_N,

			      if_commit_stall,
			      RDY_if_commit_stall,

			      return_priv_jump_address,
			      RDY_return_priv_jump_address,

			      take_exception_exception_code,
			      EN_take_exception,
			      RDY_take_exception,

			      take_address_exception_address,
			      EN_take_address_exception,
			      RDY_take_address_exception,

			      update_register_1_inst_type,
			      update_register_1_csr_addr,
			      update_register_1_if_csr_valid,
			      update_register_1_value,
			      EN_update_register_1,
			      update_register_1,
			      RDY_update_register_1,

			      update_register_2_inst_type,
			      update_register_2_csr_addr,
			      update_register_2_if_csr_valid,
			      update_register_2_value,
			      EN_update_register_2,
			      update_register_2,
			      RDY_update_register_2);
  input  CLK;
  input  RST_N;

  // value method if_commit_stall
  output if_commit_stall;
  output RDY_if_commit_stall;

  // value method return_priv_jump_address
  output [63 : 0] return_priv_jump_address;
  output RDY_return_priv_jump_address;

  // action method take_exception
  input  [63 : 0] take_exception_exception_code;
  input  EN_take_exception;
  output RDY_take_exception;

  // action method take_address_exception
  input  [63 : 0] take_address_exception_address;
  input  EN_take_address_exception;
  output RDY_take_address_exception;

  // actionvalue method update_register_1
  input  [2 : 0] update_register_1_inst_type;
  input  [63 : 0] update_register_1_csr_addr;
  input  update_register_1_if_csr_valid;
  input  [63 : 0] update_register_1_value;
  input  EN_update_register_1;
  output [64 : 0] update_register_1;
  output RDY_update_register_1;

  // actionvalue method update_register_2
  input  [2 : 0] update_register_2_inst_type;
  input  [63 : 0] update_register_2_csr_addr;
  input  update_register_2_if_csr_valid;
  input  [63 : 0] update_register_2_value;
  input  EN_update_register_2;
  output [64 : 0] update_register_2;
  output RDY_update_register_2;

  // signals for module outputs
  wire [64 : 0] update_register_1, update_register_2;
  wire [63 : 0] return_priv_jump_address;
  wire RDY_if_commit_stall,
       RDY_return_priv_jump_address,
       RDY_take_address_exception,
       RDY_take_exception,
       RDY_update_register_1,
       RDY_update_register_2,
       if_commit_stall;

  // inlined wires
  wire rg_stall_commit$EN_port0__write, rg_stall_commit$port1__read;

  // register rg_mbadaddr
  reg [63 : 0] rg_mbadaddr;
  wire [63 : 0] rg_mbadaddr$D_IN;
  wire rg_mbadaddr$EN;

  // register rg_mbase
  reg [63 : 0] rg_mbase;
  wire [63 : 0] rg_mbase$D_IN;
  wire rg_mbase$EN;

  // register rg_mbound
  reg [63 : 0] rg_mbound;
  wire [63 : 0] rg_mbound$D_IN;
  wire rg_mbound$EN;

  // register rg_mcause
  reg [63 : 0] rg_mcause;
  wire [63 : 0] rg_mcause$D_IN;
  wire rg_mcause$EN;

  // register rg_mcpuid
  reg [63 : 0] rg_mcpuid;
  wire [63 : 0] rg_mcpuid$D_IN;
  wire rg_mcpuid$EN;

  // register rg_mdbase
  reg [63 : 0] rg_mdbase;
  wire [63 : 0] rg_mdbase$D_IN;
  wire rg_mdbase$EN;

  // register rg_mdbound
  reg [63 : 0] rg_mdbound;
  wire [63 : 0] rg_mdbound$D_IN;
  wire rg_mdbound$EN;

  // register rg_mepc
  reg [63 : 0] rg_mepc;
  wire [63 : 0] rg_mepc$D_IN;
  wire rg_mepc$EN;

  // register rg_mhartid
  reg [63 : 0] rg_mhartid;
  wire [63 : 0] rg_mhartid$D_IN;
  wire rg_mhartid$EN;

  // register rg_mibase
  reg [63 : 0] rg_mibase;
  wire [63 : 0] rg_mibase$D_IN;
  wire rg_mibase$EN;

  // register rg_mibound
  reg [63 : 0] rg_mibound;
  wire [63 : 0] rg_mibound$D_IN;
  wire rg_mibound$EN;

  // register rg_mie
  reg [63 : 0] rg_mie;
  wire [63 : 0] rg_mie$D_IN;
  wire rg_mie$EN;

  // register rg_mimpid
  reg [63 : 0] rg_mimpid;
  wire [63 : 0] rg_mimpid$D_IN;
  wire rg_mimpid$EN;

  // register rg_mip
  reg [63 : 0] rg_mip;
  wire [63 : 0] rg_mip$D_IN;
  wire rg_mip$EN;

  // register rg_mscratch
  reg [63 : 0] rg_mscratch;
  wire [63 : 0] rg_mscratch$D_IN;
  wire rg_mscratch$EN;

  // register rg_mstatus
  reg [63 : 0] rg_mstatus;
  wire [63 : 0] rg_mstatus$D_IN;
  wire rg_mstatus$EN;

  // register rg_mtdeleg
  reg [63 : 0] rg_mtdeleg;
  wire [63 : 0] rg_mtdeleg$D_IN;
  wire rg_mtdeleg$EN;

  // register rg_mtime
  reg [63 : 0] rg_mtime;
  wire [63 : 0] rg_mtime$D_IN;
  wire rg_mtime$EN;

  // register rg_mtimecmp
  reg [63 : 0] rg_mtimecmp;
  wire [63 : 0] rg_mtimecmp$D_IN;
  wire rg_mtimecmp$EN;

  // register rg_mtimeh
  reg [63 : 0] rg_mtimeh;
  wire [63 : 0] rg_mtimeh$D_IN;
  wire rg_mtimeh$EN;

  // register rg_mtvec
  reg [63 : 0] rg_mtvec;
  wire [63 : 0] rg_mtvec$D_IN;
  wire rg_mtvec$EN;

  // register rg_stall_commit
  reg rg_stall_commit;
  wire rg_stall_commit$D_IN, rg_stall_commit$EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_time_compare,
       CAN_FIRE_take_address_exception,
       CAN_FIRE_take_exception,
       CAN_FIRE_update_register_1,
       CAN_FIRE_update_register_2,
       WILL_FIRE_RL_rl_time_compare,
       WILL_FIRE_take_address_exception,
       WILL_FIRE_take_exception,
       WILL_FIRE_update_register_1,
       WILL_FIRE_update_register_2;

  // inputs to muxes for submodule ports
  reg [63 : 0] MUX_rg_mbase$write_1__VAL_1,
	       MUX_rg_mbase$write_1__VAL_2,
	       MUX_rg_mbound$write_1__VAL_1,
	       MUX_rg_mbound$write_1__VAL_2,
	       MUX_rg_mdbase$write_1__VAL_1,
	       MUX_rg_mdbase$write_1__VAL_2,
	       MUX_rg_mdbound$write_1__VAL_1,
	       MUX_rg_mdbound$write_1__VAL_2,
	       MUX_rg_mepc$write_1__VAL_1,
	       MUX_rg_mepc$write_1__VAL_2,
	       MUX_rg_mibase$write_1__VAL_1,
	       MUX_rg_mibase$write_1__VAL_2,
	       MUX_rg_mibound$write_1__VAL_1,
	       MUX_rg_mibound$write_1__VAL_2,
	       MUX_rg_mie$write_1__VAL_1,
	       MUX_rg_mie$write_1__VAL_2,
	       MUX_rg_mip$write_1__VAL_1,
	       MUX_rg_mip$write_1__VAL_2,
	       MUX_rg_mscratch$write_1__VAL_1,
	       MUX_rg_mscratch$write_1__VAL_2,
	       MUX_rg_mstatus$write_1__VAL_1,
	       MUX_rg_mstatus$write_1__VAL_2,
	       MUX_rg_mtdeleg$write_1__VAL_1,
	       MUX_rg_mtdeleg$write_1__VAL_2,
	       MUX_rg_mtimecmp$write_1__VAL_1,
	       MUX_rg_mtimecmp$write_1__VAL_2,
	       MUX_rg_mtvec$write_1__VAL_1,
	       MUX_rg_mtvec$write_1__VAL_2;
  wire MUX_rg_mbase$write_1__SEL_1,
       MUX_rg_mbound$write_1__SEL_1,
       MUX_rg_mdbase$write_1__SEL_1,
       MUX_rg_mdbound$write_1__SEL_1,
       MUX_rg_mepc$write_1__SEL_1,
       MUX_rg_mibase$write_1__SEL_1,
       MUX_rg_mibound$write_1__SEL_1,
       MUX_rg_mie$write_1__SEL_1,
       MUX_rg_mip$write_1__SEL_1,
       MUX_rg_mscratch$write_1__SEL_1,
       MUX_rg_mstatus$write_1__SEL_1,
       MUX_rg_mtdeleg$write_1__SEL_1,
       MUX_rg_mtimecmp$write_1__SEL_1,
       MUX_rg_mtvec$write_1__SEL_1;

  // remaining internal signals
  reg [63 : 0] CASE_update_register_1_csr_addr_BITS_3_TO_0_0b_ETC__q1,
	       CASE_update_register_2_csr_addr_BITS_3_TO_0_0b_ETC__q2,
	       IF_update_register_1_csr_addr_BITS_3_TO_0_0_EQ_ETC___d186,
	       IF_update_register_1_csr_addr_BITS_3_TO_0_0_EQ_ETC___d193,
	       IF_update_register_1_csr_addr_BITS_7_TO_4_EQ_0_ETC___d196,
	       IF_update_register_2_csr_addr_BITS_3_TO_0_02_E_ETC___d366,
	       IF_update_register_2_csr_addr_BITS_3_TO_0_02_E_ETC___d373,
	       IF_update_register_2_csr_addr_BITS_7_TO_4_00_E_ETC___d376;
  wire [63 : 0] lv_value__h1486,
		lv_value__h4308,
		x__h1886,
		x__h1914,
		x__h2036,
		x__h2053,
		x__h2175,
		x__h2193,
		x__h2315,
		x__h2333,
		x__h2485,
		x__h2502,
		x__h2732,
		x__h2750,
		x__h2872,
		x__h2890,
		x__h3012,
		x__h3030,
		x__h3380,
		x__h3398,
		x__h3520,
		x__h3538,
		x__h3660,
		x__h3678,
		x__h3800,
		x__h3818,
		x__h3940,
		x__h3958,
		x__h4080,
		x__h4098,
		x__h4708,
		x__h4735,
		x__h4857,
		x__h4874,
		x__h4996,
		x__h5013,
		x__h5135,
		x__h5152,
		x__h5304,
		x__h5321,
		x__h5551,
		x__h5568,
		x__h5690,
		x__h5707,
		x__h5829,
		x__h5846,
		x__h6196,
		x__h6213,
		x__h6335,
		x__h6352,
		x__h6474,
		x__h6491,
		x__h6613,
		x__h6630,
		x__h6752,
		x__h6769,
		x__h6891,
		x__h6908;
  wire update_register_1_csr_addr_BITS_11_TO_8_EQ_0b1_ETC___d58,
       update_register_1_csr_addr_BITS_7_TO_4_EQ_0b0__ETC___d18,
       update_register_1_csr_addr_BITS_7_TO_4_EQ_0b0__ETC___d29,
       update_register_1_csr_addr_BITS_7_TO_4_EQ_0b0__ETC___d38,
       update_register_1_csr_addr_BITS_7_TO_4_EQ_0b0__ETC___d48,
       update_register_1_csr_addr_BITS_7_TO_4_EQ_0b10_ETC___d106,
       update_register_1_csr_addr_BITS_7_TO_4_EQ_0b10_ETC___d116,
       update_register_1_csr_addr_BITS_7_TO_4_EQ_0b10_ETC___d124,
       update_register_1_csr_addr_BITS_7_TO_4_EQ_0b10_ETC___d134,
       update_register_1_csr_addr_BITS_7_TO_4_EQ_0b10_ETC___d65,
       update_register_1_csr_addr_BITS_7_TO_4_EQ_0b10_ETC___d73,
       update_register_1_csr_addr_BITS_7_TO_4_EQ_0b10_ETC___d81,
       update_register_1_csr_addr_BITS_7_TO_4_EQ_0b10_ETC___d90,
       update_register_1_csr_addr_BITS_7_TO_4_EQ_0b10_ETC___d98,
       update_register_2_csr_addr_BITS_11_TO_8_98_EQ__ETC___d247,
       update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d210,
       update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d220,
       update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d229,
       update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d238,
       update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d254,
       update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d261,
       update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d268,
       update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d276,
       update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d283,
       update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d290,
       update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d299,
       update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d306,
       update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d315;

  // value method if_commit_stall
  assign if_commit_stall =
	     rg_stall_commit$EN_port0__write || rg_stall_commit ;
  assign RDY_if_commit_stall = 1'd1 ;

  // value method return_priv_jump_address
  assign return_priv_jump_address = rg_mtvec + 64'd192 ;
  assign RDY_return_priv_jump_address = 1'd1 ;

  // action method take_exception
  assign RDY_take_exception = 1'd1 ;
  assign CAN_FIRE_take_exception = 1'd1 ;
  assign WILL_FIRE_take_exception = EN_take_exception ;

  // action method take_address_exception
  assign RDY_take_address_exception = 1'd1 ;
  assign CAN_FIRE_take_address_exception = 1'd1 ;
  assign WILL_FIRE_take_address_exception = EN_take_address_exception ;

  // actionvalue method update_register_1
  assign update_register_1 =
	     { update_register_1_if_csr_valid &&
	       update_register_1_csr_addr[11:8] == 4'b0011 &&
	       ((update_register_1_csr_addr[7:4] == 4'b0) ?
		  update_register_1_csr_addr[3:0] == 4'b0 ||
		  update_register_1_csr_addr[3:0] == 4'b0001 ||
		  update_register_1_csr_addr[3:0] == 4'b0010 ||
		  update_register_1_csr_addr[3:0] == 4'b0100 :
		  update_register_1_csr_addr[7:4] == 4'b0010 ||
		  ((update_register_1_csr_addr[7:4] == 4'b0100) ?
		     update_register_1_csr_addr[3:0] == 4'b0 ||
		     update_register_1_csr_addr[3:0] == 4'b0001 ||
		     update_register_1_csr_addr[3:0] == 4'b0100 :
		     update_register_1_csr_addr[7:4] == 4'b1000 &&
		     (update_register_1_csr_addr[3:0] == 4'b0 ||
		      update_register_1_csr_addr[3:0] == 4'b0001 ||
		      update_register_1_csr_addr[3:0] == 4'b0010 ||
		      update_register_1_csr_addr[3:0] == 4'b0011 ||
		      update_register_1_csr_addr[3:0] == 4'b0100 ||
		      update_register_1_csr_addr[3:0] == 4'b0101))),
	       IF_update_register_1_csr_addr_BITS_7_TO_4_EQ_0_ETC___d196 } ;
  assign RDY_update_register_1 = 1'd1 ;
  assign CAN_FIRE_update_register_1 = 1'd1 ;
  assign WILL_FIRE_update_register_1 = EN_update_register_1 ;

  // actionvalue method update_register_2
  assign update_register_2 =
	     { update_register_2_if_csr_valid &&
	       update_register_2_csr_addr[11:8] == 4'b0011 &&
	       ((update_register_2_csr_addr[7:4] == 4'b0) ?
		  update_register_2_csr_addr[3:0] == 4'b0 ||
		  update_register_2_csr_addr[3:0] == 4'b0001 ||
		  update_register_2_csr_addr[3:0] == 4'b0010 ||
		  update_register_2_csr_addr[3:0] == 4'b0100 :
		  update_register_2_csr_addr[7:4] == 4'b0010 ||
		  ((update_register_2_csr_addr[7:4] == 4'b0100) ?
		     update_register_2_csr_addr[3:0] == 4'b0 ||
		     update_register_2_csr_addr[3:0] == 4'b0001 ||
		     update_register_2_csr_addr[3:0] == 4'b0100 :
		     update_register_2_csr_addr[7:4] == 4'b1000 &&
		     (update_register_2_csr_addr[3:0] == 4'b0 ||
		      update_register_2_csr_addr[3:0] == 4'b0001 ||
		      update_register_2_csr_addr[3:0] == 4'b0010 ||
		      update_register_2_csr_addr[3:0] == 4'b0011 ||
		      update_register_2_csr_addr[3:0] == 4'b0100 ||
		      update_register_2_csr_addr[3:0] == 4'b0101))),
	       IF_update_register_2_csr_addr_BITS_7_TO_4_00_E_ETC___d376 } ;
  assign RDY_update_register_2 = 1'd1 ;
  assign CAN_FIRE_update_register_2 = 1'd1 ;
  assign WILL_FIRE_update_register_2 = EN_update_register_2 ;

  // rule RL_rl_time_compare
  assign CAN_FIRE_RL_rl_time_compare = 1'd1 ;
  assign WILL_FIRE_RL_rl_time_compare = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_rg_mbase$write_1__SEL_1 =
	     EN_update_register_2 && update_register_2_if_csr_valid &&
	     update_register_2_csr_addr[11:8] == 4'b0011 &&
	     update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d276 ;
  assign MUX_rg_mbound$write_1__SEL_1 =
	     EN_update_register_2 && update_register_2_if_csr_valid &&
	     update_register_2_csr_addr[11:8] == 4'b0011 &&
	     update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d283 ;
  assign MUX_rg_mdbase$write_1__SEL_1 =
	     EN_update_register_2 && update_register_2_if_csr_valid &&
	     update_register_2_csr_addr[11:8] == 4'b0011 &&
	     update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d306 ;
  assign MUX_rg_mdbound$write_1__SEL_1 =
	     EN_update_register_2 && update_register_2_if_csr_valid &&
	     update_register_2_csr_addr[11:8] == 4'b0011 &&
	     update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d315 ;
  assign MUX_rg_mepc$write_1__SEL_1 =
	     EN_update_register_2 && update_register_2_if_csr_valid &&
	     update_register_2_csr_addr[11:8] == 4'b0011 &&
	     update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d261 ;
  assign MUX_rg_mibase$write_1__SEL_1 =
	     EN_update_register_2 && update_register_2_if_csr_valid &&
	     update_register_2_csr_addr[11:8] == 4'b0011 &&
	     update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d290 ;
  assign MUX_rg_mibound$write_1__SEL_1 =
	     EN_update_register_2 && update_register_2_if_csr_valid &&
	     update_register_2_csr_addr[11:8] == 4'b0011 &&
	     update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d299 ;
  assign MUX_rg_mie$write_1__SEL_1 =
	     EN_update_register_2 && update_register_2_if_csr_valid &&
	     update_register_2_csr_addr[11:8] == 4'b0011 &&
	     update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d238 ;
  assign MUX_rg_mip$write_1__SEL_1 =
	     EN_update_register_2 && update_register_2_if_csr_valid &&
	     update_register_2_csr_addr[11:8] == 4'b0011 &&
	     update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d268 ;
  assign MUX_rg_mscratch$write_1__SEL_1 =
	     EN_update_register_2 && update_register_2_if_csr_valid &&
	     update_register_2_csr_addr[11:8] == 4'b0011 &&
	     update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d254 ;
  assign MUX_rg_mstatus$write_1__SEL_1 =
	     EN_update_register_2 && update_register_2_if_csr_valid &&
	     update_register_2_csr_addr[11:8] == 4'b0011 &&
	     update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d210 ;
  assign MUX_rg_mtdeleg$write_1__SEL_1 =
	     EN_update_register_2 && update_register_2_if_csr_valid &&
	     update_register_2_csr_addr[11:8] == 4'b0011 &&
	     update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d229 ;
  assign MUX_rg_mtimecmp$write_1__SEL_1 =
	     EN_update_register_2 && update_register_2_if_csr_valid &&
	     update_register_2_csr_addr_BITS_11_TO_8_98_EQ__ETC___d247 ;
  assign MUX_rg_mtvec$write_1__SEL_1 =
	     EN_update_register_2 && update_register_2_if_csr_valid &&
	     update_register_2_csr_addr[11:8] == 4'b0011 &&
	     update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d220 ;
  always@(update_register_2_inst_type or
	  x__h6213 or update_register_2_value or x__h6196)
  begin
    case (update_register_2_inst_type)
      3'd1: MUX_rg_mbase$write_1__VAL_1 = update_register_2_value;
      3'd2: MUX_rg_mbase$write_1__VAL_1 = x__h6196;
      default: MUX_rg_mbase$write_1__VAL_1 = x__h6213;
    endcase
  end
  always@(update_register_1_inst_type or
	  x__h3398 or update_register_1_value or x__h3380)
  begin
    case (update_register_1_inst_type)
      3'd1: MUX_rg_mbase$write_1__VAL_2 = update_register_1_value;
      3'd2: MUX_rg_mbase$write_1__VAL_2 = x__h3380;
      default: MUX_rg_mbase$write_1__VAL_2 = x__h3398;
    endcase
  end
  always@(update_register_2_inst_type or
	  x__h6352 or update_register_2_value or x__h6335)
  begin
    case (update_register_2_inst_type)
      3'd1: MUX_rg_mbound$write_1__VAL_1 = update_register_2_value;
      3'd2: MUX_rg_mbound$write_1__VAL_1 = x__h6335;
      default: MUX_rg_mbound$write_1__VAL_1 = x__h6352;
    endcase
  end
  always@(update_register_1_inst_type or
	  x__h3538 or update_register_1_value or x__h3520)
  begin
    case (update_register_1_inst_type)
      3'd1: MUX_rg_mbound$write_1__VAL_2 = update_register_1_value;
      3'd2: MUX_rg_mbound$write_1__VAL_2 = x__h3520;
      default: MUX_rg_mbound$write_1__VAL_2 = x__h3538;
    endcase
  end
  always@(update_register_2_inst_type or
	  x__h6769 or update_register_2_value or x__h6752)
  begin
    case (update_register_2_inst_type)
      3'd1: MUX_rg_mdbase$write_1__VAL_1 = update_register_2_value;
      3'd2: MUX_rg_mdbase$write_1__VAL_1 = x__h6752;
      default: MUX_rg_mdbase$write_1__VAL_1 = x__h6769;
    endcase
  end
  always@(update_register_1_inst_type or
	  x__h3958 or update_register_1_value or x__h3940)
  begin
    case (update_register_1_inst_type)
      3'd1: MUX_rg_mdbase$write_1__VAL_2 = update_register_1_value;
      3'd2: MUX_rg_mdbase$write_1__VAL_2 = x__h3940;
      default: MUX_rg_mdbase$write_1__VAL_2 = x__h3958;
    endcase
  end
  always@(update_register_2_inst_type or
	  x__h6908 or update_register_2_value or x__h6891)
  begin
    case (update_register_2_inst_type)
      3'd1: MUX_rg_mdbound$write_1__VAL_1 = update_register_2_value;
      3'd2: MUX_rg_mdbound$write_1__VAL_1 = x__h6891;
      default: MUX_rg_mdbound$write_1__VAL_1 = x__h6908;
    endcase
  end
  always@(update_register_1_inst_type or
	  x__h4098 or update_register_1_value or x__h4080)
  begin
    case (update_register_1_inst_type)
      3'd1: MUX_rg_mdbound$write_1__VAL_2 = update_register_1_value;
      3'd2: MUX_rg_mdbound$write_1__VAL_2 = x__h4080;
      default: MUX_rg_mdbound$write_1__VAL_2 = x__h4098;
    endcase
  end
  always@(update_register_2_inst_type or
	  x__h5707 or update_register_2_value or x__h5690)
  begin
    case (update_register_2_inst_type)
      3'd1: MUX_rg_mepc$write_1__VAL_1 = update_register_2_value;
      3'd2: MUX_rg_mepc$write_1__VAL_1 = x__h5690;
      default: MUX_rg_mepc$write_1__VAL_1 = x__h5707;
    endcase
  end
  always@(update_register_1_inst_type or
	  x__h2890 or update_register_1_value or x__h2872)
  begin
    case (update_register_1_inst_type)
      3'd1: MUX_rg_mepc$write_1__VAL_2 = update_register_1_value;
      3'd2: MUX_rg_mepc$write_1__VAL_2 = x__h2872;
      default: MUX_rg_mepc$write_1__VAL_2 = x__h2890;
    endcase
  end
  always@(update_register_2_inst_type or
	  x__h6491 or update_register_2_value or x__h6474)
  begin
    case (update_register_2_inst_type)
      3'd1: MUX_rg_mibase$write_1__VAL_1 = update_register_2_value;
      3'd2: MUX_rg_mibase$write_1__VAL_1 = x__h6474;
      default: MUX_rg_mibase$write_1__VAL_1 = x__h6491;
    endcase
  end
  always@(update_register_1_inst_type or
	  x__h3678 or update_register_1_value or x__h3660)
  begin
    case (update_register_1_inst_type)
      3'd1: MUX_rg_mibase$write_1__VAL_2 = update_register_1_value;
      3'd2: MUX_rg_mibase$write_1__VAL_2 = x__h3660;
      default: MUX_rg_mibase$write_1__VAL_2 = x__h3678;
    endcase
  end
  always@(update_register_2_inst_type or
	  x__h6630 or update_register_2_value or x__h6613)
  begin
    case (update_register_2_inst_type)
      3'd1: MUX_rg_mibound$write_1__VAL_1 = update_register_2_value;
      3'd2: MUX_rg_mibound$write_1__VAL_1 = x__h6613;
      default: MUX_rg_mibound$write_1__VAL_1 = x__h6630;
    endcase
  end
  always@(update_register_1_inst_type or
	  x__h3818 or update_register_1_value or x__h3800)
  begin
    case (update_register_1_inst_type)
      3'd1: MUX_rg_mibound$write_1__VAL_2 = update_register_1_value;
      3'd2: MUX_rg_mibound$write_1__VAL_2 = x__h3800;
      default: MUX_rg_mibound$write_1__VAL_2 = x__h3818;
    endcase
  end
  always@(update_register_2_inst_type or
	  x__h5152 or update_register_2_value or x__h5135)
  begin
    case (update_register_2_inst_type)
      3'd1: MUX_rg_mie$write_1__VAL_1 = update_register_2_value;
      3'd2: MUX_rg_mie$write_1__VAL_1 = x__h5135;
      default: MUX_rg_mie$write_1__VAL_1 = x__h5152;
    endcase
  end
  always@(update_register_1_inst_type or
	  x__h2333 or update_register_1_value or x__h2315)
  begin
    case (update_register_1_inst_type)
      3'd1: MUX_rg_mie$write_1__VAL_2 = update_register_1_value;
      3'd2: MUX_rg_mie$write_1__VAL_2 = x__h2315;
      default: MUX_rg_mie$write_1__VAL_2 = x__h2333;
    endcase
  end
  always@(update_register_2_inst_type or
	  x__h5846 or update_register_2_value or x__h5829)
  begin
    case (update_register_2_inst_type)
      3'd1: MUX_rg_mip$write_1__VAL_1 = update_register_2_value;
      3'd2: MUX_rg_mip$write_1__VAL_1 = x__h5829;
      default: MUX_rg_mip$write_1__VAL_1 = x__h5846;
    endcase
  end
  always@(update_register_1_inst_type or
	  x__h3030 or update_register_1_value or x__h3012)
  begin
    case (update_register_1_inst_type)
      3'd1: MUX_rg_mip$write_1__VAL_2 = update_register_1_value;
      3'd2: MUX_rg_mip$write_1__VAL_2 = x__h3012;
      default: MUX_rg_mip$write_1__VAL_2 = x__h3030;
    endcase
  end
  always@(update_register_2_inst_type or
	  x__h5568 or update_register_2_value or x__h5551)
  begin
    case (update_register_2_inst_type)
      3'd1: MUX_rg_mscratch$write_1__VAL_1 = update_register_2_value;
      3'd2: MUX_rg_mscratch$write_1__VAL_1 = x__h5551;
      default: MUX_rg_mscratch$write_1__VAL_1 = x__h5568;
    endcase
  end
  always@(update_register_1_inst_type or
	  x__h2750 or update_register_1_value or x__h2732)
  begin
    case (update_register_1_inst_type)
      3'd1: MUX_rg_mscratch$write_1__VAL_2 = update_register_1_value;
      3'd2: MUX_rg_mscratch$write_1__VAL_2 = x__h2732;
      default: MUX_rg_mscratch$write_1__VAL_2 = x__h2750;
    endcase
  end
  always@(update_register_2_inst_type or
	  x__h4735 or update_register_2_value or x__h4708)
  begin
    case (update_register_2_inst_type)
      3'd1: MUX_rg_mstatus$write_1__VAL_1 = update_register_2_value;
      3'd2: MUX_rg_mstatus$write_1__VAL_1 = x__h4708;
      default: MUX_rg_mstatus$write_1__VAL_1 = x__h4735;
    endcase
  end
  always@(update_register_1_inst_type or
	  x__h1914 or update_register_1_value or x__h1886)
  begin
    case (update_register_1_inst_type)
      3'd1: MUX_rg_mstatus$write_1__VAL_2 = update_register_1_value;
      3'd2: MUX_rg_mstatus$write_1__VAL_2 = x__h1886;
      default: MUX_rg_mstatus$write_1__VAL_2 = x__h1914;
    endcase
  end
  always@(update_register_2_inst_type or
	  x__h5013 or update_register_2_value or x__h4996)
  begin
    case (update_register_2_inst_type)
      3'd1: MUX_rg_mtdeleg$write_1__VAL_1 = update_register_2_value;
      3'd2: MUX_rg_mtdeleg$write_1__VAL_1 = x__h4996;
      default: MUX_rg_mtdeleg$write_1__VAL_1 = x__h5013;
    endcase
  end
  always@(update_register_1_inst_type or
	  x__h2193 or update_register_1_value or x__h2175)
  begin
    case (update_register_1_inst_type)
      3'd1: MUX_rg_mtdeleg$write_1__VAL_2 = update_register_1_value;
      3'd2: MUX_rg_mtdeleg$write_1__VAL_2 = x__h2175;
      default: MUX_rg_mtdeleg$write_1__VAL_2 = x__h2193;
    endcase
  end
  always@(update_register_2_inst_type or
	  x__h5321 or update_register_2_value or x__h5304)
  begin
    case (update_register_2_inst_type)
      3'd1: MUX_rg_mtimecmp$write_1__VAL_1 = update_register_2_value;
      3'd2: MUX_rg_mtimecmp$write_1__VAL_1 = x__h5304;
      default: MUX_rg_mtimecmp$write_1__VAL_1 = x__h5321;
    endcase
  end
  always@(update_register_1_inst_type or
	  x__h2502 or update_register_1_value or x__h2485)
  begin
    case (update_register_1_inst_type)
      3'd1: MUX_rg_mtimecmp$write_1__VAL_2 = update_register_1_value;
      3'd2: MUX_rg_mtimecmp$write_1__VAL_2 = x__h2485;
      default: MUX_rg_mtimecmp$write_1__VAL_2 = x__h2502;
    endcase
  end
  always@(update_register_2_inst_type or
	  x__h4874 or update_register_2_value or x__h4857)
  begin
    case (update_register_2_inst_type)
      3'd1: MUX_rg_mtvec$write_1__VAL_1 = update_register_2_value;
      3'd2: MUX_rg_mtvec$write_1__VAL_1 = x__h4857;
      default: MUX_rg_mtvec$write_1__VAL_1 = x__h4874;
    endcase
  end
  always@(update_register_1_inst_type or
	  x__h2053 or update_register_1_value or x__h2036)
  begin
    case (update_register_1_inst_type)
      3'd1: MUX_rg_mtvec$write_1__VAL_2 = update_register_1_value;
      3'd2: MUX_rg_mtvec$write_1__VAL_2 = x__h2036;
      default: MUX_rg_mtvec$write_1__VAL_2 = x__h2053;
    endcase
  end

  // inlined wires
  assign rg_stall_commit$EN_port0__write = rg_mtime == rg_mtimecmp ;
  assign rg_stall_commit$port1__read =
	     rg_stall_commit$EN_port0__write || rg_stall_commit ;

  // register rg_mbadaddr
  assign rg_mbadaddr$D_IN = take_address_exception_address ;
  assign rg_mbadaddr$EN = EN_take_address_exception ;

  // register rg_mbase
  assign rg_mbase$D_IN =
	     MUX_rg_mbase$write_1__SEL_1 ?
	       MUX_rg_mbase$write_1__VAL_1 :
	       MUX_rg_mbase$write_1__VAL_2 ;
  assign rg_mbase$EN =
	     EN_update_register_1 && update_register_1_if_csr_valid &&
	     update_register_1_csr_addr[11:8] == 4'b0011 &&
	     update_register_1_csr_addr_BITS_7_TO_4_EQ_0b10_ETC___d90 ||
	     EN_update_register_2 && update_register_2_if_csr_valid &&
	     update_register_2_csr_addr[11:8] == 4'b0011 &&
	     update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d276 ;

  // register rg_mbound
  assign rg_mbound$D_IN =
	     MUX_rg_mbound$write_1__SEL_1 ?
	       MUX_rg_mbound$write_1__VAL_1 :
	       MUX_rg_mbound$write_1__VAL_2 ;
  assign rg_mbound$EN =
	     EN_update_register_1 && update_register_1_if_csr_valid &&
	     update_register_1_csr_addr[11:8] == 4'b0011 &&
	     update_register_1_csr_addr_BITS_7_TO_4_EQ_0b10_ETC___d98 ||
	     EN_update_register_2 && update_register_2_if_csr_valid &&
	     update_register_2_csr_addr[11:8] == 4'b0011 &&
	     update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d283 ;

  // register rg_mcause
  assign rg_mcause$D_IN = take_exception_exception_code ;
  assign rg_mcause$EN = EN_take_exception ;

  // register rg_mcpuid
  assign rg_mcpuid$D_IN = 64'h0 ;
  assign rg_mcpuid$EN = 1'b0 ;

  // register rg_mdbase
  assign rg_mdbase$D_IN =
	     MUX_rg_mdbase$write_1__SEL_1 ?
	       MUX_rg_mdbase$write_1__VAL_1 :
	       MUX_rg_mdbase$write_1__VAL_2 ;
  assign rg_mdbase$EN =
	     EN_update_register_1 && update_register_1_if_csr_valid &&
	     update_register_1_csr_addr[11:8] == 4'b0011 &&
	     update_register_1_csr_addr_BITS_7_TO_4_EQ_0b10_ETC___d124 ||
	     EN_update_register_2 && update_register_2_if_csr_valid &&
	     update_register_2_csr_addr[11:8] == 4'b0011 &&
	     update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d306 ;

  // register rg_mdbound
  assign rg_mdbound$D_IN =
	     MUX_rg_mdbound$write_1__SEL_1 ?
	       MUX_rg_mdbound$write_1__VAL_1 :
	       MUX_rg_mdbound$write_1__VAL_2 ;
  assign rg_mdbound$EN =
	     EN_update_register_1 && update_register_1_if_csr_valid &&
	     update_register_1_csr_addr[11:8] == 4'b0011 &&
	     update_register_1_csr_addr_BITS_7_TO_4_EQ_0b10_ETC___d134 ||
	     EN_update_register_2 && update_register_2_if_csr_valid &&
	     update_register_2_csr_addr[11:8] == 4'b0011 &&
	     update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d315 ;

  // register rg_mepc
  assign rg_mepc$D_IN =
	     MUX_rg_mepc$write_1__SEL_1 ?
	       MUX_rg_mepc$write_1__VAL_1 :
	       MUX_rg_mepc$write_1__VAL_2 ;
  assign rg_mepc$EN =
	     EN_update_register_1 && update_register_1_if_csr_valid &&
	     update_register_1_csr_addr[11:8] == 4'b0011 &&
	     update_register_1_csr_addr_BITS_7_TO_4_EQ_0b10_ETC___d73 ||
	     EN_update_register_2 && update_register_2_if_csr_valid &&
	     update_register_2_csr_addr[11:8] == 4'b0011 &&
	     update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d261 ;

  // register rg_mhartid
  assign rg_mhartid$D_IN = 64'h0 ;
  assign rg_mhartid$EN = 1'b0 ;

  // register rg_mibase
  assign rg_mibase$D_IN =
	     MUX_rg_mibase$write_1__SEL_1 ?
	       MUX_rg_mibase$write_1__VAL_1 :
	       MUX_rg_mibase$write_1__VAL_2 ;
  assign rg_mibase$EN =
	     EN_update_register_1 && update_register_1_if_csr_valid &&
	     update_register_1_csr_addr[11:8] == 4'b0011 &&
	     update_register_1_csr_addr_BITS_7_TO_4_EQ_0b10_ETC___d106 ||
	     EN_update_register_2 && update_register_2_if_csr_valid &&
	     update_register_2_csr_addr[11:8] == 4'b0011 &&
	     update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d290 ;

  // register rg_mibound
  assign rg_mibound$D_IN =
	     MUX_rg_mibound$write_1__SEL_1 ?
	       MUX_rg_mibound$write_1__VAL_1 :
	       MUX_rg_mibound$write_1__VAL_2 ;
  assign rg_mibound$EN =
	     EN_update_register_1 && update_register_1_if_csr_valid &&
	     update_register_1_csr_addr[11:8] == 4'b0011 &&
	     update_register_1_csr_addr_BITS_7_TO_4_EQ_0b10_ETC___d116 ||
	     EN_update_register_2 && update_register_2_if_csr_valid &&
	     update_register_2_csr_addr[11:8] == 4'b0011 &&
	     update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d299 ;

  // register rg_mie
  assign rg_mie$D_IN =
	     MUX_rg_mie$write_1__SEL_1 ?
	       MUX_rg_mie$write_1__VAL_1 :
	       MUX_rg_mie$write_1__VAL_2 ;
  assign rg_mie$EN =
	     EN_update_register_1 && update_register_1_if_csr_valid &&
	     update_register_1_csr_addr[11:8] == 4'b0011 &&
	     update_register_1_csr_addr_BITS_7_TO_4_EQ_0b0__ETC___d48 ||
	     EN_update_register_2 && update_register_2_if_csr_valid &&
	     update_register_2_csr_addr[11:8] == 4'b0011 &&
	     update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d238 ;

  // register rg_mimpid
  assign rg_mimpid$D_IN = 64'h0 ;
  assign rg_mimpid$EN = 1'b0 ;

  // register rg_mip
  assign rg_mip$D_IN =
	     MUX_rg_mip$write_1__SEL_1 ?
	       MUX_rg_mip$write_1__VAL_1 :
	       MUX_rg_mip$write_1__VAL_2 ;
  assign rg_mip$EN =
	     EN_update_register_1 && update_register_1_if_csr_valid &&
	     update_register_1_csr_addr[11:8] == 4'b0011 &&
	     update_register_1_csr_addr_BITS_7_TO_4_EQ_0b10_ETC___d81 ||
	     EN_update_register_2 && update_register_2_if_csr_valid &&
	     update_register_2_csr_addr[11:8] == 4'b0011 &&
	     update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d268 ;

  // register rg_mscratch
  assign rg_mscratch$D_IN =
	     MUX_rg_mscratch$write_1__SEL_1 ?
	       MUX_rg_mscratch$write_1__VAL_1 :
	       MUX_rg_mscratch$write_1__VAL_2 ;
  assign rg_mscratch$EN =
	     EN_update_register_1 && update_register_1_if_csr_valid &&
	     update_register_1_csr_addr[11:8] == 4'b0011 &&
	     update_register_1_csr_addr_BITS_7_TO_4_EQ_0b10_ETC___d65 ||
	     EN_update_register_2 && update_register_2_if_csr_valid &&
	     update_register_2_csr_addr[11:8] == 4'b0011 &&
	     update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d254 ;

  // register rg_mstatus
  assign rg_mstatus$D_IN =
	     MUX_rg_mstatus$write_1__SEL_1 ?
	       MUX_rg_mstatus$write_1__VAL_1 :
	       MUX_rg_mstatus$write_1__VAL_2 ;
  assign rg_mstatus$EN =
	     EN_update_register_1 && update_register_1_if_csr_valid &&
	     update_register_1_csr_addr[11:8] == 4'b0011 &&
	     update_register_1_csr_addr_BITS_7_TO_4_EQ_0b0__ETC___d18 ||
	     EN_update_register_2 && update_register_2_if_csr_valid &&
	     update_register_2_csr_addr[11:8] == 4'b0011 &&
	     update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d210 ;

  // register rg_mtdeleg
  assign rg_mtdeleg$D_IN =
	     MUX_rg_mtdeleg$write_1__SEL_1 ?
	       MUX_rg_mtdeleg$write_1__VAL_1 :
	       MUX_rg_mtdeleg$write_1__VAL_2 ;
  assign rg_mtdeleg$EN =
	     EN_update_register_1 && update_register_1_if_csr_valid &&
	     update_register_1_csr_addr[11:8] == 4'b0011 &&
	     update_register_1_csr_addr_BITS_7_TO_4_EQ_0b0__ETC___d38 ||
	     EN_update_register_2 && update_register_2_if_csr_valid &&
	     update_register_2_csr_addr[11:8] == 4'b0011 &&
	     update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d229 ;

  // register rg_mtime
  assign rg_mtime$D_IN = rg_mtime + 64'd1 ;
  assign rg_mtime$EN = 1'd1 ;

  // register rg_mtimecmp
  assign rg_mtimecmp$D_IN =
	     MUX_rg_mtimecmp$write_1__SEL_1 ?
	       MUX_rg_mtimecmp$write_1__VAL_1 :
	       MUX_rg_mtimecmp$write_1__VAL_2 ;
  assign rg_mtimecmp$EN =
	     EN_update_register_1 && update_register_1_if_csr_valid &&
	     update_register_1_csr_addr_BITS_11_TO_8_EQ_0b1_ETC___d58 ||
	     EN_update_register_2 && update_register_2_if_csr_valid &&
	     update_register_2_csr_addr_BITS_11_TO_8_98_EQ__ETC___d247 ;

  // register rg_mtimeh
  assign rg_mtimeh$D_IN = 64'h0 ;
  assign rg_mtimeh$EN = 1'b0 ;

  // register rg_mtvec
  assign rg_mtvec$D_IN =
	     MUX_rg_mtvec$write_1__SEL_1 ?
	       MUX_rg_mtvec$write_1__VAL_1 :
	       MUX_rg_mtvec$write_1__VAL_2 ;
  assign rg_mtvec$EN =
	     EN_update_register_1 && update_register_1_if_csr_valid &&
	     update_register_1_csr_addr[11:8] == 4'b0011 &&
	     update_register_1_csr_addr_BITS_7_TO_4_EQ_0b0__ETC___d29 ||
	     EN_update_register_2 && update_register_2_if_csr_valid &&
	     update_register_2_csr_addr[11:8] == 4'b0011 &&
	     update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d220 ;

  // register rg_stall_commit
  assign rg_stall_commit$D_IN = rg_stall_commit$port1__read ;
  assign rg_stall_commit$EN = 1'b1 ;

  // remaining internal signals
  assign lv_value__h1486 = ~update_register_1_value ;
  assign lv_value__h4308 = ~update_register_2_value ;
  assign update_register_1_csr_addr_BITS_11_TO_8_EQ_0b1_ETC___d58 =
	     update_register_1_csr_addr[11:8] == 4'b0011 &&
	     update_register_1_csr_addr[7:4] == 4'b0010 &&
	     (update_register_1_inst_type == 3'd1 ||
	      update_register_1_inst_type == 3'd2 ||
	      update_register_1_inst_type == 3'd3) ;
  assign update_register_1_csr_addr_BITS_7_TO_4_EQ_0b0__ETC___d18 =
	     update_register_1_csr_addr[7:4] == 4'b0 &&
	     update_register_1_csr_addr[3:0] == 4'b0 &&
	     (update_register_1_inst_type == 3'd1 ||
	      update_register_1_inst_type == 3'd2 ||
	      update_register_1_inst_type == 3'd3) ;
  assign update_register_1_csr_addr_BITS_7_TO_4_EQ_0b0__ETC___d29 =
	     update_register_1_csr_addr[7:4] == 4'b0 &&
	     update_register_1_csr_addr[3:0] == 4'b0001 &&
	     (update_register_1_inst_type == 3'd1 ||
	      update_register_1_inst_type == 3'd2 ||
	      update_register_1_inst_type == 3'd3) ;
  assign update_register_1_csr_addr_BITS_7_TO_4_EQ_0b0__ETC___d38 =
	     update_register_1_csr_addr[7:4] == 4'b0 &&
	     update_register_1_csr_addr[3:0] == 4'b0010 &&
	     (update_register_1_inst_type == 3'd1 ||
	      update_register_1_inst_type == 3'd2 ||
	      update_register_1_inst_type == 3'd3) ;
  assign update_register_1_csr_addr_BITS_7_TO_4_EQ_0b0__ETC___d48 =
	     update_register_1_csr_addr[7:4] == 4'b0 &&
	     update_register_1_csr_addr[3:0] == 4'b0100 &&
	     (update_register_1_inst_type == 3'd1 ||
	      update_register_1_inst_type == 3'd2 ||
	      update_register_1_inst_type == 3'd3) ;
  assign update_register_1_csr_addr_BITS_7_TO_4_EQ_0b10_ETC___d106 =
	     update_register_1_csr_addr[7:4] == 4'b1000 &&
	     update_register_1_csr_addr[3:0] == 4'b0010 &&
	     (update_register_1_inst_type == 3'd1 ||
	      update_register_1_inst_type == 3'd2 ||
	      update_register_1_inst_type == 3'd3) ;
  assign update_register_1_csr_addr_BITS_7_TO_4_EQ_0b10_ETC___d116 =
	     update_register_1_csr_addr[7:4] == 4'b1000 &&
	     update_register_1_csr_addr[3:0] == 4'b0011 &&
	     (update_register_1_inst_type == 3'd1 ||
	      update_register_1_inst_type == 3'd2 ||
	      update_register_1_inst_type == 3'd3) ;
  assign update_register_1_csr_addr_BITS_7_TO_4_EQ_0b10_ETC___d124 =
	     update_register_1_csr_addr[7:4] == 4'b1000 &&
	     update_register_1_csr_addr[3:0] == 4'b0100 &&
	     (update_register_1_inst_type == 3'd1 ||
	      update_register_1_inst_type == 3'd2 ||
	      update_register_1_inst_type == 3'd3) ;
  assign update_register_1_csr_addr_BITS_7_TO_4_EQ_0b10_ETC___d134 =
	     update_register_1_csr_addr[7:4] == 4'b1000 &&
	     update_register_1_csr_addr[3:0] == 4'b0101 &&
	     (update_register_1_inst_type == 3'd1 ||
	      update_register_1_inst_type == 3'd2 ||
	      update_register_1_inst_type == 3'd3) ;
  assign update_register_1_csr_addr_BITS_7_TO_4_EQ_0b10_ETC___d65 =
	     update_register_1_csr_addr[7:4] == 4'b0100 &&
	     update_register_1_csr_addr[3:0] == 4'b0 &&
	     (update_register_1_inst_type == 3'd1 ||
	      update_register_1_inst_type == 3'd2 ||
	      update_register_1_inst_type == 3'd3) ;
  assign update_register_1_csr_addr_BITS_7_TO_4_EQ_0b10_ETC___d73 =
	     update_register_1_csr_addr[7:4] == 4'b0100 &&
	     update_register_1_csr_addr[3:0] == 4'b0001 &&
	     (update_register_1_inst_type == 3'd1 ||
	      update_register_1_inst_type == 3'd2 ||
	      update_register_1_inst_type == 3'd3) ;
  assign update_register_1_csr_addr_BITS_7_TO_4_EQ_0b10_ETC___d81 =
	     update_register_1_csr_addr[7:4] == 4'b0100 &&
	     update_register_1_csr_addr[3:0] == 4'b0100 &&
	     (update_register_1_inst_type == 3'd1 ||
	      update_register_1_inst_type == 3'd2 ||
	      update_register_1_inst_type == 3'd3) ;
  assign update_register_1_csr_addr_BITS_7_TO_4_EQ_0b10_ETC___d90 =
	     update_register_1_csr_addr[7:4] == 4'b1000 &&
	     update_register_1_csr_addr[3:0] == 4'b0 &&
	     (update_register_1_inst_type == 3'd1 ||
	      update_register_1_inst_type == 3'd2 ||
	      update_register_1_inst_type == 3'd3) ;
  assign update_register_1_csr_addr_BITS_7_TO_4_EQ_0b10_ETC___d98 =
	     update_register_1_csr_addr[7:4] == 4'b1000 &&
	     update_register_1_csr_addr[3:0] == 4'b0001 &&
	     (update_register_1_inst_type == 3'd1 ||
	      update_register_1_inst_type == 3'd2 ||
	      update_register_1_inst_type == 3'd3) ;
  assign update_register_2_csr_addr_BITS_11_TO_8_98_EQ__ETC___d247 =
	     update_register_2_csr_addr[11:8] == 4'b0011 &&
	     update_register_2_csr_addr[7:4] == 4'b0010 &&
	     (update_register_2_inst_type == 3'd1 ||
	      update_register_2_inst_type == 3'd2 ||
	      update_register_2_inst_type == 3'd3) ;
  assign update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d210 =
	     update_register_2_csr_addr[7:4] == 4'b0 &&
	     update_register_2_csr_addr[3:0] == 4'b0 &&
	     (update_register_2_inst_type == 3'd1 ||
	      update_register_2_inst_type == 3'd2 ||
	      update_register_2_inst_type == 3'd3) ;
  assign update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d220 =
	     update_register_2_csr_addr[7:4] == 4'b0 &&
	     update_register_2_csr_addr[3:0] == 4'b0001 &&
	     (update_register_2_inst_type == 3'd1 ||
	      update_register_2_inst_type == 3'd2 ||
	      update_register_2_inst_type == 3'd3) ;
  assign update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d229 =
	     update_register_2_csr_addr[7:4] == 4'b0 &&
	     update_register_2_csr_addr[3:0] == 4'b0010 &&
	     (update_register_2_inst_type == 3'd1 ||
	      update_register_2_inst_type == 3'd2 ||
	      update_register_2_inst_type == 3'd3) ;
  assign update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d238 =
	     update_register_2_csr_addr[7:4] == 4'b0 &&
	     update_register_2_csr_addr[3:0] == 4'b0100 &&
	     (update_register_2_inst_type == 3'd1 ||
	      update_register_2_inst_type == 3'd2 ||
	      update_register_2_inst_type == 3'd3) ;
  assign update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d254 =
	     update_register_2_csr_addr[7:4] == 4'b0100 &&
	     update_register_2_csr_addr[3:0] == 4'b0 &&
	     (update_register_2_inst_type == 3'd1 ||
	      update_register_2_inst_type == 3'd2 ||
	      update_register_2_inst_type == 3'd3) ;
  assign update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d261 =
	     update_register_2_csr_addr[7:4] == 4'b0100 &&
	     update_register_2_csr_addr[3:0] == 4'b0001 &&
	     (update_register_2_inst_type == 3'd1 ||
	      update_register_2_inst_type == 3'd2 ||
	      update_register_2_inst_type == 3'd3) ;
  assign update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d268 =
	     update_register_2_csr_addr[7:4] == 4'b0100 &&
	     update_register_2_csr_addr[3:0] == 4'b0100 &&
	     (update_register_2_inst_type == 3'd1 ||
	      update_register_2_inst_type == 3'd2 ||
	      update_register_2_inst_type == 3'd3) ;
  assign update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d276 =
	     update_register_2_csr_addr[7:4] == 4'b1000 &&
	     update_register_2_csr_addr[3:0] == 4'b0 &&
	     (update_register_2_inst_type == 3'd1 ||
	      update_register_2_inst_type == 3'd2 ||
	      update_register_2_inst_type == 3'd3) ;
  assign update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d283 =
	     update_register_2_csr_addr[7:4] == 4'b1000 &&
	     update_register_2_csr_addr[3:0] == 4'b0001 &&
	     (update_register_2_inst_type == 3'd1 ||
	      update_register_2_inst_type == 3'd2 ||
	      update_register_2_inst_type == 3'd3) ;
  assign update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d290 =
	     update_register_2_csr_addr[7:4] == 4'b1000 &&
	     update_register_2_csr_addr[3:0] == 4'b0010 &&
	     (update_register_2_inst_type == 3'd1 ||
	      update_register_2_inst_type == 3'd2 ||
	      update_register_2_inst_type == 3'd3) ;
  assign update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d299 =
	     update_register_2_csr_addr[7:4] == 4'b1000 &&
	     update_register_2_csr_addr[3:0] == 4'b0011 &&
	     (update_register_2_inst_type == 3'd1 ||
	      update_register_2_inst_type == 3'd2 ||
	      update_register_2_inst_type == 3'd3) ;
  assign update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d306 =
	     update_register_2_csr_addr[7:4] == 4'b1000 &&
	     update_register_2_csr_addr[3:0] == 4'b0100 &&
	     (update_register_2_inst_type == 3'd1 ||
	      update_register_2_inst_type == 3'd2 ||
	      update_register_2_inst_type == 3'd3) ;
  assign update_register_2_csr_addr_BITS_7_TO_4_00_EQ_0_ETC___d315 =
	     update_register_2_csr_addr[7:4] == 4'b1000 &&
	     update_register_2_csr_addr[3:0] == 4'b0101 &&
	     (update_register_2_inst_type == 3'd1 ||
	      update_register_2_inst_type == 3'd2 ||
	      update_register_2_inst_type == 3'd3) ;
  assign x__h1886 = rg_mstatus | update_register_1_value ;
  assign x__h1914 = rg_mstatus & lv_value__h1486 ;
  assign x__h2036 = rg_mtvec | update_register_1_value ;
  assign x__h2053 = rg_mtvec & lv_value__h1486 ;
  assign x__h2175 = rg_mtdeleg | update_register_1_value ;
  assign x__h2193 = rg_mtdeleg & lv_value__h1486 ;
  assign x__h2315 = rg_mie | update_register_1_value ;
  assign x__h2333 = rg_mie & lv_value__h1486 ;
  assign x__h2485 = rg_mtimecmp | update_register_1_value ;
  assign x__h2502 = rg_mtimecmp & lv_value__h1486 ;
  assign x__h2732 = rg_mscratch | update_register_1_value ;
  assign x__h2750 = rg_mscratch & lv_value__h1486 ;
  assign x__h2872 = rg_mepc | update_register_1_value ;
  assign x__h2890 = rg_mepc & lv_value__h1486 ;
  assign x__h3012 = rg_mip | update_register_1_value ;
  assign x__h3030 = rg_mip & lv_value__h1486 ;
  assign x__h3380 = rg_mbase | update_register_1_value ;
  assign x__h3398 = rg_mbase & lv_value__h1486 ;
  assign x__h3520 = rg_mbound | update_register_1_value ;
  assign x__h3538 = rg_mbound & lv_value__h1486 ;
  assign x__h3660 = rg_mibase | update_register_1_value ;
  assign x__h3678 = rg_mibase & lv_value__h1486 ;
  assign x__h3800 = rg_mibound | update_register_1_value ;
  assign x__h3818 = rg_mibound & lv_value__h1486 ;
  assign x__h3940 = rg_mdbase | update_register_1_value ;
  assign x__h3958 = rg_mdbase & lv_value__h1486 ;
  assign x__h4080 = rg_mdbound | update_register_1_value ;
  assign x__h4098 = rg_mdbound & lv_value__h1486 ;
  assign x__h4708 = rg_mstatus | update_register_2_value ;
  assign x__h4735 = rg_mstatus & lv_value__h4308 ;
  assign x__h4857 = rg_mtvec | update_register_2_value ;
  assign x__h4874 = rg_mtvec & lv_value__h4308 ;
  assign x__h4996 = rg_mtdeleg | update_register_2_value ;
  assign x__h5013 = rg_mtdeleg & lv_value__h4308 ;
  assign x__h5135 = rg_mie | update_register_2_value ;
  assign x__h5152 = rg_mie & lv_value__h4308 ;
  assign x__h5304 = rg_mtimecmp | update_register_2_value ;
  assign x__h5321 = rg_mtimecmp & lv_value__h4308 ;
  assign x__h5551 = rg_mscratch | update_register_2_value ;
  assign x__h5568 = rg_mscratch & lv_value__h4308 ;
  assign x__h5690 = rg_mepc | update_register_2_value ;
  assign x__h5707 = rg_mepc & lv_value__h4308 ;
  assign x__h5829 = rg_mip | update_register_2_value ;
  assign x__h5846 = rg_mip & lv_value__h4308 ;
  assign x__h6196 = rg_mbase | update_register_2_value ;
  assign x__h6213 = rg_mbase & lv_value__h4308 ;
  assign x__h6335 = rg_mbound | update_register_2_value ;
  assign x__h6352 = rg_mbound & lv_value__h4308 ;
  assign x__h6474 = rg_mibase | update_register_2_value ;
  assign x__h6491 = rg_mibase & lv_value__h4308 ;
  assign x__h6613 = rg_mibound | update_register_2_value ;
  assign x__h6630 = rg_mibound & lv_value__h4308 ;
  assign x__h6752 = rg_mdbase | update_register_2_value ;
  assign x__h6769 = rg_mdbase & lv_value__h4308 ;
  assign x__h6891 = rg_mdbound | update_register_2_value ;
  assign x__h6908 = rg_mdbound & lv_value__h4308 ;
  always@(update_register_1_csr_addr or
	  rg_mie or rg_mstatus or rg_mtvec or rg_mtdeleg)
  begin
    case (update_register_1_csr_addr[3:0])
      4'b0:
	  IF_update_register_1_csr_addr_BITS_3_TO_0_0_EQ_ETC___d186 =
	      rg_mstatus;
      4'b0001:
	  IF_update_register_1_csr_addr_BITS_3_TO_0_0_EQ_ETC___d186 =
	      rg_mtvec;
      4'b0010:
	  IF_update_register_1_csr_addr_BITS_3_TO_0_0_EQ_ETC___d186 =
	      rg_mtdeleg;
      default: IF_update_register_1_csr_addr_BITS_3_TO_0_0_EQ_ETC___d186 =
		   rg_mie;
    endcase
  end
  always@(update_register_1_csr_addr or
	  rg_mdbound or
	  rg_mbase or rg_mbound or rg_mibase or rg_mibound or rg_mdbase)
  begin
    case (update_register_1_csr_addr[3:0])
      4'b0:
	  IF_update_register_1_csr_addr_BITS_3_TO_0_0_EQ_ETC___d193 =
	      rg_mbase;
      4'b0001:
	  IF_update_register_1_csr_addr_BITS_3_TO_0_0_EQ_ETC___d193 =
	      rg_mbound;
      4'b0010:
	  IF_update_register_1_csr_addr_BITS_3_TO_0_0_EQ_ETC___d193 =
	      rg_mibase;
      4'b0011:
	  IF_update_register_1_csr_addr_BITS_3_TO_0_0_EQ_ETC___d193 =
	      rg_mibound;
      4'b0100:
	  IF_update_register_1_csr_addr_BITS_3_TO_0_0_EQ_ETC___d193 =
	      rg_mdbase;
      default: IF_update_register_1_csr_addr_BITS_3_TO_0_0_EQ_ETC___d193 =
		   rg_mdbound;
    endcase
  end
  always@(update_register_1_csr_addr or rg_mip or rg_mscratch or rg_mepc)
  begin
    case (update_register_1_csr_addr[3:0])
      4'b0:
	  CASE_update_register_1_csr_addr_BITS_3_TO_0_0b_ETC__q1 =
	      rg_mscratch;
      4'b0001:
	  CASE_update_register_1_csr_addr_BITS_3_TO_0_0b_ETC__q1 = rg_mepc;
      default: CASE_update_register_1_csr_addr_BITS_3_TO_0_0b_ETC__q1 =
		   rg_mip;
    endcase
  end
  always@(update_register_1_csr_addr or
	  IF_update_register_1_csr_addr_BITS_3_TO_0_0_EQ_ETC___d193 or
	  IF_update_register_1_csr_addr_BITS_3_TO_0_0_EQ_ETC___d186 or
	  rg_mtimecmp or
	  CASE_update_register_1_csr_addr_BITS_3_TO_0_0b_ETC__q1)
  begin
    case (update_register_1_csr_addr[7:4])
      4'b0:
	  IF_update_register_1_csr_addr_BITS_7_TO_4_EQ_0_ETC___d196 =
	      IF_update_register_1_csr_addr_BITS_3_TO_0_0_EQ_ETC___d186;
      4'b0010:
	  IF_update_register_1_csr_addr_BITS_7_TO_4_EQ_0_ETC___d196 =
	      rg_mtimecmp;
      4'b0100:
	  IF_update_register_1_csr_addr_BITS_7_TO_4_EQ_0_ETC___d196 =
	      CASE_update_register_1_csr_addr_BITS_3_TO_0_0b_ETC__q1;
      default: IF_update_register_1_csr_addr_BITS_7_TO_4_EQ_0_ETC___d196 =
		   IF_update_register_1_csr_addr_BITS_3_TO_0_0_EQ_ETC___d193;
    endcase
  end
  always@(update_register_2_csr_addr or
	  rg_mie or rg_mstatus or rg_mtvec or rg_mtdeleg)
  begin
    case (update_register_2_csr_addr[3:0])
      4'b0:
	  IF_update_register_2_csr_addr_BITS_3_TO_0_02_E_ETC___d366 =
	      rg_mstatus;
      4'b0001:
	  IF_update_register_2_csr_addr_BITS_3_TO_0_02_E_ETC___d366 =
	      rg_mtvec;
      4'b0010:
	  IF_update_register_2_csr_addr_BITS_3_TO_0_02_E_ETC___d366 =
	      rg_mtdeleg;
      default: IF_update_register_2_csr_addr_BITS_3_TO_0_02_E_ETC___d366 =
		   rg_mie;
    endcase
  end
  always@(update_register_2_csr_addr or
	  rg_mdbound or
	  rg_mbase or rg_mbound or rg_mibase or rg_mibound or rg_mdbase)
  begin
    case (update_register_2_csr_addr[3:0])
      4'b0:
	  IF_update_register_2_csr_addr_BITS_3_TO_0_02_E_ETC___d373 =
	      rg_mbase;
      4'b0001:
	  IF_update_register_2_csr_addr_BITS_3_TO_0_02_E_ETC___d373 =
	      rg_mbound;
      4'b0010:
	  IF_update_register_2_csr_addr_BITS_3_TO_0_02_E_ETC___d373 =
	      rg_mibase;
      4'b0011:
	  IF_update_register_2_csr_addr_BITS_3_TO_0_02_E_ETC___d373 =
	      rg_mibound;
      4'b0100:
	  IF_update_register_2_csr_addr_BITS_3_TO_0_02_E_ETC___d373 =
	      rg_mdbase;
      default: IF_update_register_2_csr_addr_BITS_3_TO_0_02_E_ETC___d373 =
		   rg_mdbound;
    endcase
  end
  always@(update_register_2_csr_addr or rg_mip or rg_mscratch or rg_mepc)
  begin
    case (update_register_2_csr_addr[3:0])
      4'b0:
	  CASE_update_register_2_csr_addr_BITS_3_TO_0_0b_ETC__q2 =
	      rg_mscratch;
      4'b0001:
	  CASE_update_register_2_csr_addr_BITS_3_TO_0_0b_ETC__q2 = rg_mepc;
      default: CASE_update_register_2_csr_addr_BITS_3_TO_0_0b_ETC__q2 =
		   rg_mip;
    endcase
  end
  always@(update_register_2_csr_addr or
	  IF_update_register_2_csr_addr_BITS_3_TO_0_02_E_ETC___d373 or
	  IF_update_register_2_csr_addr_BITS_3_TO_0_02_E_ETC___d366 or
	  rg_mtimecmp or
	  CASE_update_register_2_csr_addr_BITS_3_TO_0_0b_ETC__q2)
  begin
    case (update_register_2_csr_addr[7:4])
      4'b0:
	  IF_update_register_2_csr_addr_BITS_7_TO_4_00_E_ETC___d376 =
	      IF_update_register_2_csr_addr_BITS_3_TO_0_02_E_ETC___d366;
      4'b0010:
	  IF_update_register_2_csr_addr_BITS_7_TO_4_00_E_ETC___d376 =
	      rg_mtimecmp;
      4'b0100:
	  IF_update_register_2_csr_addr_BITS_7_TO_4_00_E_ETC___d376 =
	      CASE_update_register_2_csr_addr_BITS_3_TO_0_0b_ETC__q2;
      default: IF_update_register_2_csr_addr_BITS_7_TO_4_00_E_ETC___d376 =
		   IF_update_register_2_csr_addr_BITS_3_TO_0_02_E_ETC___d373;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_mbadaddr <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_mbase <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_mbound <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_mcause <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_mcpuid <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_mdbase <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_mdbound <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_mepc <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_mhartid <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_mibase <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_mibound <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_mie <= `BSV_ASSIGNMENT_DELAY 64'd136;
	rg_mimpid <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_mip <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_mscratch <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_mstatus <= `BSV_ASSIGNMENT_DELAY 64'd63;
	rg_mtdeleg <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_mtime <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_mtimecmp <= `BSV_ASSIGNMENT_DELAY 64'hFFFFFFFFFFFFFFFF;
	rg_mtimeh <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_mtvec <= `BSV_ASSIGNMENT_DELAY 64'hFFFFFFFFFFFFFE00;
	rg_stall_commit <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (rg_mbadaddr$EN)
	  rg_mbadaddr <= `BSV_ASSIGNMENT_DELAY rg_mbadaddr$D_IN;
	if (rg_mbase$EN) rg_mbase <= `BSV_ASSIGNMENT_DELAY rg_mbase$D_IN;
	if (rg_mbound$EN) rg_mbound <= `BSV_ASSIGNMENT_DELAY rg_mbound$D_IN;
	if (rg_mcause$EN) rg_mcause <= `BSV_ASSIGNMENT_DELAY rg_mcause$D_IN;
	if (rg_mcpuid$EN) rg_mcpuid <= `BSV_ASSIGNMENT_DELAY rg_mcpuid$D_IN;
	if (rg_mdbase$EN) rg_mdbase <= `BSV_ASSIGNMENT_DELAY rg_mdbase$D_IN;
	if (rg_mdbound$EN)
	  rg_mdbound <= `BSV_ASSIGNMENT_DELAY rg_mdbound$D_IN;
	if (rg_mepc$EN) rg_mepc <= `BSV_ASSIGNMENT_DELAY rg_mepc$D_IN;
	if (rg_mhartid$EN)
	  rg_mhartid <= `BSV_ASSIGNMENT_DELAY rg_mhartid$D_IN;
	if (rg_mibase$EN) rg_mibase <= `BSV_ASSIGNMENT_DELAY rg_mibase$D_IN;
	if (rg_mibound$EN)
	  rg_mibound <= `BSV_ASSIGNMENT_DELAY rg_mibound$D_IN;
	if (rg_mie$EN) rg_mie <= `BSV_ASSIGNMENT_DELAY rg_mie$D_IN;
	if (rg_mimpid$EN) rg_mimpid <= `BSV_ASSIGNMENT_DELAY rg_mimpid$D_IN;
	if (rg_mip$EN) rg_mip <= `BSV_ASSIGNMENT_DELAY rg_mip$D_IN;
	if (rg_mscratch$EN)
	  rg_mscratch <= `BSV_ASSIGNMENT_DELAY rg_mscratch$D_IN;
	if (rg_mstatus$EN)
	  rg_mstatus <= `BSV_ASSIGNMENT_DELAY rg_mstatus$D_IN;
	if (rg_mtdeleg$EN)
	  rg_mtdeleg <= `BSV_ASSIGNMENT_DELAY rg_mtdeleg$D_IN;
	if (rg_mtime$EN) rg_mtime <= `BSV_ASSIGNMENT_DELAY rg_mtime$D_IN;
	if (rg_mtimecmp$EN)
	  rg_mtimecmp <= `BSV_ASSIGNMENT_DELAY rg_mtimecmp$D_IN;
	if (rg_mtimeh$EN) rg_mtimeh <= `BSV_ASSIGNMENT_DELAY rg_mtimeh$D_IN;
	if (rg_mtvec$EN) rg_mtvec <= `BSV_ASSIGNMENT_DELAY rg_mtvec$D_IN;
	if (rg_stall_commit$EN)
	  rg_stall_commit <= `BSV_ASSIGNMENT_DELAY rg_stall_commit$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_mbadaddr = 64'hAAAAAAAAAAAAAAAA;
    rg_mbase = 64'hAAAAAAAAAAAAAAAA;
    rg_mbound = 64'hAAAAAAAAAAAAAAAA;
    rg_mcause = 64'hAAAAAAAAAAAAAAAA;
    rg_mcpuid = 64'hAAAAAAAAAAAAAAAA;
    rg_mdbase = 64'hAAAAAAAAAAAAAAAA;
    rg_mdbound = 64'hAAAAAAAAAAAAAAAA;
    rg_mepc = 64'hAAAAAAAAAAAAAAAA;
    rg_mhartid = 64'hAAAAAAAAAAAAAAAA;
    rg_mibase = 64'hAAAAAAAAAAAAAAAA;
    rg_mibound = 64'hAAAAAAAAAAAAAAAA;
    rg_mie = 64'hAAAAAAAAAAAAAAAA;
    rg_mimpid = 64'hAAAAAAAAAAAAAAAA;
    rg_mip = 64'hAAAAAAAAAAAAAAAA;
    rg_mscratch = 64'hAAAAAAAAAAAAAAAA;
    rg_mstatus = 64'hAAAAAAAAAAAAAAAA;
    rg_mtdeleg = 64'hAAAAAAAAAAAAAAAA;
    rg_mtime = 64'hAAAAAAAAAAAAAAAA;
    rg_mtimecmp = 64'hAAAAAAAAAAAAAAAA;
    rg_mtimeh = 64'hAAAAAAAAAAAAAAAA;
    rg_mtvec = 64'hAAAAAAAAAAAAAAAA;
    rg_stall_commit = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkInterrupt_controller

