//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// On Fri Jan 22 01:17:37 IST 2016
//
//
// Ports:
// Name                         I/O  size props
// RDY__start                     O     1
// final_result_                  O   105
// RDY_final_result_              O     1 reg
// RDY__deque_buffer_reset_ready_signal  O     1
// RDY__set_flush                 O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// _start_operand1                I    32
// _start_operand2                I    32
// _start_destination             I     5
// _start_rob_number              I     4
// _start_fsr                     I    32
// _start_pc                      I    32
// _set_flush_f                   I     1
// EN__start                      I     1
// EN__deque_buffer_reset_ready_signal  I     1
// EN__set_flush                  I     1
//
// Combinational paths from inputs to outputs:
//   (_set_flush_f, EN__set_flush) -> RDY__start
//   (_set_flush_f, EN__set_flush) -> RDY__deque_buffer_reset_ready_signal
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkfpu_spfloating_divider(CLK,
				RST_N,

				_start_operand1,
				_start_operand2,
				_start_destination,
				_start_rob_number,
				_start_fsr,
				_start_pc,
				EN__start,
				RDY__start,

				final_result_,
				RDY_final_result_,

				EN__deque_buffer_reset_ready_signal,
				RDY__deque_buffer_reset_ready_signal,

				_set_flush_f,
				EN__set_flush,
				RDY__set_flush);
  input  CLK;
  input  RST_N;

  // action method _start
  input  [31 : 0] _start_operand1;
  input  [31 : 0] _start_operand2;
  input  [4 : 0] _start_destination;
  input  [3 : 0] _start_rob_number;
  input  [31 : 0] _start_fsr;
  input  [31 : 0] _start_pc;
  input  EN__start;
  output RDY__start;

  // value method final_result_
  output [104 : 0] final_result_;
  output RDY_final_result_;

  // action method _deque_buffer_reset_ready_signal
  input  EN__deque_buffer_reset_ready_signal;
  output RDY__deque_buffer_reset_ready_signal;

  // action method _set_flush
  input  _set_flush_f;
  input  EN__set_flush;
  output RDY__set_flush;

  // signals for module outputs
  wire [104 : 0] final_result_;
  wire RDY__deque_buffer_reset_ready_signal,
       RDY__set_flush,
       RDY__start,
       RDY_final_result_;

  // inlined wires
  wire [136 : 0] ff_stage1_rv$port1__read,
		 ff_stage1_rv$port1__write_1,
		 ff_stage1_rv$port2__read,
		 ff_stage1_rv$port3__read;
  wire [88 : 0] ff_stage2_rv$port1__read,
		ff_stage2_rv$port1__write_1,
		ff_stage2_rv$port2__read,
		ff_stage2_rv$port3__read;

  // register ff_stage1_rv
  reg [136 : 0] ff_stage1_rv;
  wire [136 : 0] ff_stage1_rv$D_IN;
  wire ff_stage1_rv$EN;

  // register ff_stage2_rv
  reg [88 : 0] ff_stage2_rv;
  wire [88 : 0] ff_stage2_rv$D_IN;
  wire ff_stage2_rv$EN;

  // register rg_ready_signal
  reg rg_ready_signal;
  wire rg_ready_signal$D_IN, rg_ready_signal$EN;

  // ports of submodule ff_final_out
  wire [104 : 0] ff_final_out$D_IN, ff_final_out$D_OUT;
  wire ff_final_out$CLR,
       ff_final_out$DEQ,
       ff_final_out$EMPTY_N,
       ff_final_out$ENQ,
       ff_final_out$FULL_N;

  // ports of submodule int_div
  wire [27 : 0] int_div$output_remainder;
  wire [26 : 0] int_div$_inputs__denominator, int_div$_inputs__numerator;
  wire [25 : 0] int_div$output_quotient;
  wire int_div$EN__inputs, int_div$RDY_output_quotient;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_flush_output_fifo,
       CAN_FIRE_RL_rl_stage2,
       CAN_FIRE_RL_rl_stage3,
       CAN_FIRE__deque_buffer_reset_ready_signal,
       CAN_FIRE__set_flush,
       CAN_FIRE__start,
       WILL_FIRE_RL_rl_flush_output_fifo,
       WILL_FIRE_RL_rl_stage2,
       WILL_FIRE_RL_rl_stage3,
       WILL_FIRE__deque_buffer_reset_ready_signal,
       WILL_FIRE__set_flush,
       WILL_FIRE__start;

  // remaining internal signals
  reg [2 : 0] CASE_ff_final_outD_OUT_BITS_3_TO_1_0_ff_final_ETC__q1;
  reg IF_ff_stage2_rv_port0__read__3_BITS_39_TO_37_4_ETC___d93;
  wire [63 : 0] x_final_result__h1356;
  wire [47 : 0] IF_int_div_output_quotient__3_BIT_25_4_THEN_in_ETC___d65,
		lv_mantissa__h1285;
  wire [31 : 0] _theResult_____1_snd_snd__h1515,
		_theResult_____1_snd_snd__h1526,
		lv_fsr___h1298;
  wire [30 : 0] IF_IF_IF_IF_ff_stage2_rv_port0__read__3_BITS_3_ETC___d124,
		IF_ff_stage2_rv_port0__read__3_BIT_74_7_OR_ff__ETC___d126;
  wire [25 : 0] _theResult____h1280, lv_quotient___1__h1820;
  wire [24 : 0] IF_IF_ff_stage2_rv_port0__read__3_BITS_39_TO_3_ETC___d97,
		lv_rounded_mantissa__h2135;
  wire [23 : 0] lv_dividend__h2652, lv_divisor__h2653, x__h8706, x__h8728;
  wire [9 : 0] IF_IF_IF_ff_stage2_rv_port0__read__3_BITS_39_T_ETC___d100,
	       IF_ff_stage2_rv_port0__read__3_BITS_87_TO_78_2_ETC___d61,
	       lv_exponent___1__h2192,
	       lv_exponent__h1279,
	       lv_new_exponent__h2658,
	       lv_v_shr___1__h1665,
	       x__h2755,
	       x__h2757,
	       x__h2759,
	       x__h2760,
	       x__h2762,
	       x__h2921,
	       y__h2756,
	       y__h2758,
	       y__h2761,
	       y__h2763,
	       y__h2922;
  wire [5 : 0] IF_IF_IF_INV_start_operand1_BITS_30_TO_23_53_E_ETC___d297,
	       IF_IF_IF_INV_start_operand2_BITS_30_TO_23_64_E_ETC___d421,
	       x__h1834;
  wire [4 : 0] IF_IF_INV_start_operand1_BITS_30_TO_23_53_EQ_0_ETC___d251,
	       IF_IF_INV_start_operand2_BITS_30_TO_23_64_EQ_0_ETC___d375,
	       IF_IF_start_operand1_BIT_7_55_OR_start_operand_ETC___d292,
	       IF_IF_start_operand2_BIT_7_79_OR_start_operand_ETC___d416;
  wire [3 : 0] IF_INV_start_operand1_BITS_30_TO_23_53_EQ_0_55_ETC___d209,
	       IF_INV_start_operand2_BITS_30_TO_23_64_EQ_0_66_ETC___d333,
	       IF_NOT_ff_stage2_rv_port0__read__3_BIT_73_3_9__ETC___d147,
	       IF_NOT_ff_stage2_rv_port0__read__3_BIT_76_6_8__ETC___d150,
	       IF_start_operand1_BIT_15_13_OR_start_operand1__ETC___d246,
	       IF_start_operand1_BIT_7_55_OR_start_operand1_B_ETC___d288,
	       IF_start_operand2_BIT_15_37_OR_start_operand2__ETC___d370,
	       IF_start_operand2_BIT_7_79_OR_start_operand2_B_ETC___d412;
  wire [1 : 0] p0_l1__h3105,
	       p0_l1__h5918,
	       p1_l1__h3107,
	       p1_l1__h5920,
	       p2_l1__h3109,
	       p2_l1__h5922,
	       p3_l1__h3111,
	       p3_l1__h5924,
	       p4_l1__h3113,
	       p4_l1__h5926,
	       p5_l1__h3115,
	       p5_l1__h5928;
  wire NOT_ff_stage2_rv_port0__read__3_BIT_74_7_0_AND_ETC___d107,
       _theResult_____1_snd_fst__h1514,
       _theResult_____5__h1290,
       lv_inexact__h1292,
       lv_op1_is_zero__h2641,
       lv_op2_is_infinity__h2644,
       lv_roundup___1__h1755,
       lv_roundup___1__h2028,
       lv_roundup___1__h2071,
       lv_underflow__h1282,
       p0__h3257,
       p0__h6070,
       x__h1625,
       x__h1910,
       x__h2085,
       x__h3271,
       x__h3272,
       x__h3564,
       x__h3567,
       x__h3619,
       x__h3620,
       x__h3882,
       x__h3885,
       x__h4027,
       x__h4028,
       x__h4293,
       x__h4296,
       x__h4348,
       x__h4349,
       x__h4611,
       x__h4614,
       x__h4843,
       x__h4844,
       x__h5109,
       x__h5112,
       x__h5164,
       x__h5165,
       x__h5427,
       x__h5430,
       x__h6084,
       x__h6085,
       x__h6377,
       x__h6380,
       x__h6432,
       x__h6433,
       x__h6695,
       x__h6698,
       x__h6840,
       x__h6841,
       x__h7106,
       x__h7109,
       x__h7161,
       x__h7162,
       x__h7424,
       x__h7427,
       x__h7656,
       x__h7657,
       x__h7922,
       x__h7925,
       x__h7977,
       x__h7978,
       x__h8240,
       x__h8243,
       x__h8752,
       x__h8807,
       x__h8819,
       x__h8821,
       x__h8823,
       x__h8868,
       x__h8892,
       x__h8897,
       y__h1561,
       y__h1767,
       y__h2040,
       y__h2084,
       y__h3565,
       y__h3568,
       y__h3571,
       y__h3883,
       y__h3886,
       y__h3889,
       y__h4294,
       y__h4297,
       y__h4300,
       y__h4612,
       y__h4615,
       y__h4618,
       y__h5110,
       y__h5113,
       y__h5116,
       y__h5428,
       y__h5431,
       y__h5434,
       y__h6378,
       y__h6381,
       y__h6384,
       y__h6696,
       y__h6699,
       y__h6702,
       y__h7107,
       y__h7110,
       y__h7113,
       y__h7425,
       y__h7428,
       y__h7431,
       y__h7923,
       y__h7926,
       y__h7929,
       y__h8241,
       y__h8244,
       y__h8247,
       y__h8820,
       y__h8822,
       y__h8824;

  // action method _start
  assign RDY__start = !ff_stage1_rv$port1__read[136] ;
  assign CAN_FIRE__start = !ff_stage1_rv$port1__read[136] ;
  assign WILL_FIRE__start = EN__start ;

  // value method final_result_
  assign final_result_ =
	     { ff_final_out$D_OUT[104:4],
	       CASE_ff_final_outD_OUT_BITS_3_TO_1_0_ff_final_ETC__q1,
	       ff_final_out$D_OUT[0] } ;
  assign RDY_final_result_ = ff_final_out$EMPTY_N ;

  // action method _deque_buffer_reset_ready_signal
  assign RDY__deque_buffer_reset_ready_signal =
	     (!EN__set_flush || !_set_flush_f) && ff_final_out$EMPTY_N ;
  assign CAN_FIRE__deque_buffer_reset_ready_signal =
	     (!EN__set_flush || !_set_flush_f) && ff_final_out$EMPTY_N ;
  assign WILL_FIRE__deque_buffer_reset_ready_signal =
	     EN__deque_buffer_reset_ready_signal ;

  // action method _set_flush
  assign RDY__set_flush = 1'd1 ;
  assign CAN_FIRE__set_flush = 1'd1 ;
  assign WILL_FIRE__set_flush = EN__set_flush ;

  // submodule ff_final_out
  FIFO2 #(.width(32'd105), .guarded(32'd1)) ff_final_out(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(ff_final_out$D_IN),
							 .ENQ(ff_final_out$ENQ),
							 .DEQ(ff_final_out$DEQ),
							 .CLR(ff_final_out$CLR),
							 .D_OUT(ff_final_out$D_OUT),
							 .FULL_N(ff_final_out$FULL_N),
							 .EMPTY_N(ff_final_out$EMPTY_N));

  // submodule int_div
  mkinteger_divider_for_spfdiv int_div(.CLK(CLK),
				       .RST_N(RST_N),
				       ._inputs__denominator(int_div$_inputs__denominator),
				       ._inputs__numerator(int_div$_inputs__numerator),
				       .EN__inputs(int_div$EN__inputs),
				       .RDY__inputs(),
				       .output_quotient(int_div$output_quotient),
				       .RDY_output_quotient(int_div$RDY_output_quotient),
				       .output_remainder(int_div$output_remainder),
				       .RDY_output_remainder());

  // rule RL_rl_stage3
  assign CAN_FIRE_RL_rl_stage3 =
	     ff_stage2_rv[88] && int_div$RDY_output_quotient &&
	     ff_final_out$FULL_N &&
	     (!EN__set_flush || !_set_flush_f) ;
  assign WILL_FIRE_RL_rl_stage3 = CAN_FIRE_RL_rl_stage3 ;

  // rule RL_rl_stage2
  assign CAN_FIRE_RL_rl_stage2 =
	     ff_stage1_rv[136] && !ff_stage2_rv$port1__read[88] &&
	     (!EN__set_flush || !_set_flush_f) ;
  assign WILL_FIRE_RL_rl_stage2 = CAN_FIRE_RL_rl_stage2 ;

  // rule RL_rl_flush_output_fifo
  assign CAN_FIRE_RL_rl_flush_output_fifo = EN__set_flush && _set_flush_f ;
  assign WILL_FIRE_RL_rl_flush_output_fifo =
	     CAN_FIRE_RL_rl_flush_output_fifo ;

  // inlined wires
  assign ff_stage1_rv$port1__read =
	     CAN_FIRE_RL_rl_stage2 ?
	       137'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       ff_stage1_rv ;
  assign ff_stage1_rv$port1__write_1 =
	     { 1'd1,
	       lv_new_exponent__h2658,
	       x__h8706,
	       x__h8728,
	       x__h8752,
	       x__h8807,
	       x__h8868,
	       x__h8892,
	       x__h8897,
	       _start_destination,
	       _start_rob_number,
	       _start_fsr,
	       _start_pc } ;
  assign ff_stage1_rv$port2__read =
	     EN__start ?
	       ff_stage1_rv$port1__write_1 :
	       ff_stage1_rv$port1__read ;
  assign ff_stage1_rv$port3__read =
	     CAN_FIRE_RL_rl_flush_output_fifo ?
	       137'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       ff_stage1_rv$port2__read ;
  assign ff_stage2_rv$port1__read =
	     CAN_FIRE_RL_rl_stage3 ?
	       89'h0AAAAAAAAAAAAAAAAAAAAAA :
	       ff_stage2_rv ;
  assign ff_stage2_rv$port1__write_1 =
	     { 1'd1, ff_stage1_rv[135:126], ff_stage1_rv[77:0] } ;
  assign ff_stage2_rv$port2__read =
	     CAN_FIRE_RL_rl_stage2 ?
	       ff_stage2_rv$port1__write_1 :
	       ff_stage2_rv$port1__read ;
  assign ff_stage2_rv$port3__read =
	     CAN_FIRE_RL_rl_flush_output_fifo ?
	       89'h0AAAAAAAAAAAAAAAAAAAAAA :
	       ff_stage2_rv$port2__read ;

  // register ff_stage1_rv
  assign ff_stage1_rv$D_IN = ff_stage1_rv$port3__read ;
  assign ff_stage1_rv$EN = 1'b1 ;

  // register ff_stage2_rv
  assign ff_stage2_rv$D_IN = ff_stage2_rv$port3__read ;
  assign ff_stage2_rv$EN = 1'b1 ;

  // register rg_ready_signal
  assign rg_ready_signal$D_IN = WILL_FIRE_RL_rl_stage3 ;
  assign rg_ready_signal$EN =
	     EN__deque_buffer_reset_ready_signal && ff_final_out$FULL_N ||
	     WILL_FIRE_RL_rl_stage3 ;

  // submodule ff_final_out
  assign ff_final_out$D_IN =
	     { ff_stage2_rv[72:68],
	       lv_fsr___h1298,
	       x_final_result__h1356,
	       IF_NOT_ff_stage2_rv_port0__read__3_BIT_76_6_8__ETC___d150 } ;
  assign ff_final_out$ENQ = CAN_FIRE_RL_rl_stage3 ;
  assign ff_final_out$DEQ = EN__deque_buffer_reset_ready_signal ;
  assign ff_final_out$CLR = CAN_FIRE_RL_rl_flush_output_fifo ;

  // submodule int_div
  assign int_div$_inputs__denominator = { ff_stage1_rv[101:78], 3'd0 } ;
  assign int_div$_inputs__numerator = { ff_stage1_rv[125:102], 3'd0 } ;
  assign int_div$EN__inputs = CAN_FIRE_RL_rl_stage2 ;

  // remaining internal signals
  assign IF_IF_IF_IF_ff_stage2_rv_port0__read__3_BITS_3_ETC___d124 =
	     (IF_IF_IF_ff_stage2_rv_port0__read__3_BITS_39_T_ETC___d100[8] ||
	      IF_IF_IF_ff_stage2_rv_port0__read__3_BITS_39_T_ETC___d100[7:0] ==
	      8'd255) ?
	       ((ff_stage2_rv[39:37] == 3'b001 ||
		 ff_stage2_rv[39:37] == 3'b010 && !ff_stage2_rv[77] ||
		 ff_stage2_rv[39:37] == 3'b011 && ff_stage2_rv[77]) ?
		  31'h7F7FFFFF :
		  31'h7F800000) :
	       { IF_IF_IF_ff_stage2_rv_port0__read__3_BITS_39_T_ETC___d100[7:0],
		 IF_IF_ff_stage2_rv_port0__read__3_BITS_39_TO_3_ETC___d97[22:0] } ;
  assign IF_IF_IF_INV_start_operand1_BITS_30_TO_23_53_E_ETC___d297 =
	     IF_IF_INV_start_operand1_BITS_30_TO_23_53_EQ_0_ETC___d251[4] ?
	       { 2'd2,
		 IF_IF_INV_start_operand1_BITS_30_TO_23_53_EQ_0_ETC___d251[3:0] } :
	       (IF_IF_start_operand1_BIT_7_55_OR_start_operand_ETC___d292[4] ?
		  { 2'd3,
		    IF_IF_start_operand1_BIT_7_55_OR_start_operand_ETC___d292[3:0] } :
		  6'd0) ;
  assign IF_IF_IF_INV_start_operand2_BITS_30_TO_23_64_E_ETC___d421 =
	     IF_IF_INV_start_operand2_BITS_30_TO_23_64_EQ_0_ETC___d375[4] ?
	       { 2'd2,
		 IF_IF_INV_start_operand2_BITS_30_TO_23_64_EQ_0_ETC___d375[3:0] } :
	       (IF_IF_start_operand2_BIT_7_79_OR_start_operand_ETC___d416[4] ?
		  { 2'd3,
		    IF_IF_start_operand2_BIT_7_79_OR_start_operand_ETC___d416[3:0] } :
		  6'd0) ;
  assign IF_IF_IF_ff_stage2_rv_port0__read__3_BITS_39_T_ETC___d100 =
	     IF_IF_ff_stage2_rv_port0__read__3_BITS_39_TO_3_ETC___d97[24] ?
	       lv_exponent___1__h2192 :
	       lv_exponent__h1279 ;
  assign IF_IF_INV_start_operand1_BITS_30_TO_23_53_EQ_0_ETC___d251 =
	     IF_INV_start_operand1_BITS_30_TO_23_53_EQ_0_55_ETC___d209[3] ?
	       { 2'd2,
		 IF_INV_start_operand1_BITS_30_TO_23_53_EQ_0_55_ETC___d209[2:0] } :
	       (IF_start_operand1_BIT_15_13_OR_start_operand1__ETC___d246[3] ?
		  { 2'd3,
		    IF_start_operand1_BIT_15_13_OR_start_operand1__ETC___d246[2:0] } :
		  5'd0) ;
  assign IF_IF_INV_start_operand2_BITS_30_TO_23_64_EQ_0_ETC___d375 =
	     IF_INV_start_operand2_BITS_30_TO_23_64_EQ_0_66_ETC___d333[3] ?
	       { 2'd2,
		 IF_INV_start_operand2_BITS_30_TO_23_64_EQ_0_66_ETC___d333[2:0] } :
	       (IF_start_operand2_BIT_15_37_OR_start_operand2__ETC___d370[3] ?
		  { 2'd3,
		    IF_start_operand2_BIT_15_37_OR_start_operand2__ETC___d370[2:0] } :
		  5'd0) ;
  assign IF_IF_ff_stage2_rv_port0__read__3_BITS_39_TO_3_ETC___d97 =
	     IF_ff_stage2_rv_port0__read__3_BITS_39_TO_37_4_ETC___d93 ?
	       lv_rounded_mantissa__h2135 :
	       { 1'b0,
		 IF_int_div_output_quotient__3_BIT_25_4_THEN_in_ETC___d65[47:24] } ;
  assign IF_IF_start_operand1_BIT_7_55_OR_start_operand_ETC___d292 =
	     IF_start_operand1_BIT_7_55_OR_start_operand1_B_ETC___d288[3] ?
	       { 2'd2,
		 IF_start_operand1_BIT_7_55_OR_start_operand1_B_ETC___d288[2:0] } :
	       5'd0 ;
  assign IF_IF_start_operand2_BIT_7_79_OR_start_operand_ETC___d416 =
	     IF_start_operand2_BIT_7_79_OR_start_operand2_B_ETC___d412[3] ?
	       { 2'd2,
		 IF_start_operand2_BIT_7_79_OR_start_operand2_B_ETC___d412[2:0] } :
	       5'd0 ;
  assign IF_INV_start_operand1_BITS_30_TO_23_53_EQ_0_55_ETC___d209 =
	     (x__h3271 | _start_operand1[20]) ?
	       { 2'd2, p0_l1__h3105 } :
	       ((x__h3619 | _start_operand1[16]) ?
		  { 2'd3, p1_l1__h3107 } :
		  4'd0) ;
  assign IF_INV_start_operand2_BITS_30_TO_23_64_EQ_0_66_ETC___d333 =
	     (x__h6084 | _start_operand2[20]) ?
	       { 2'd2, p0_l1__h5918 } :
	       ((x__h6432 | _start_operand2[16]) ?
		  { 2'd3, p1_l1__h5920 } :
		  4'd0) ;
  assign IF_NOT_ff_stage2_rv_port0__read__3_BIT_73_3_9__ETC___d147 =
	     (!ff_stage2_rv[73] &&
	      NOT_ff_stage2_rv_port0__read__3_BIT_74_7_0_AND_ETC___d107) ?
	       4'd7 :
	       ((!ff_stage2_rv[73] && !ff_stage2_rv[74] &&
		 !ff_stage2_rv[75] &&
		 lv_underflow__h1282) ?
		  4'd9 :
		  4'd11) ;
  assign IF_NOT_ff_stage2_rv_port0__read__3_BIT_76_6_8__ETC___d150 =
	     (!ff_stage2_rv[76] &&
	      (ff_stage2_rv[73] ||
	       !ff_stage2_rv[74] &&
	       (ff_stage2_rv[75] ||
		!lv_underflow__h1282 &&
		!IF_IF_IF_ff_stage2_rv_port0__read__3_BITS_39_T_ETC___d100[8] &&
		IF_IF_IF_ff_stage2_rv_port0__read__3_BITS_39_T_ETC___d100[7:0] !=
		8'd255 &&
		!lv_inexact__h1292))) ?
	       4'd0 :
	       (ff_stage2_rv[76] ?
		  4'd3 :
		  ((!ff_stage2_rv[73] && ff_stage2_rv[74]) ?
		     4'd5 :
		     IF_NOT_ff_stage2_rv_port0__read__3_BIT_73_3_9__ETC___d147)) ;
  assign IF_ff_stage2_rv_port0__read__3_BITS_87_TO_78_2_ETC___d61 =
	     lv_underflow__h1282 ? lv_v_shr___1__h1665 : 10'd0 ;
  assign IF_ff_stage2_rv_port0__read__3_BIT_74_7_OR_ff__ETC___d126 =
	     (ff_stage2_rv[74] || ff_stage2_rv[75]) ?
	       31'h7F800000 :
	       (lv_underflow__h1282 ?
		  { 8'd0,
		    IF_IF_ff_stage2_rv_port0__read__3_BITS_39_TO_3_ETC___d97[22:0] } :
		  IF_IF_IF_IF_ff_stage2_rv_port0__read__3_BITS_3_ETC___d124) ;
  assign IF_int_div_output_quotient__3_BIT_25_4_THEN_in_ETC___d65 =
	     lv_mantissa__h1285 >> x__h1834 ;
  assign IF_start_operand1_BIT_15_13_OR_start_operand1__ETC___d246 =
	     (x__h4027 | _start_operand1[12]) ?
	       { 2'd2, p2_l1__h3109 } :
	       ((x__h4348 | _start_operand1[8]) ?
		  { 2'd3, p3_l1__h3111 } :
		  4'd0) ;
  assign IF_start_operand1_BIT_7_55_OR_start_operand1_B_ETC___d288 =
	     (x__h4843 | _start_operand1[4]) ?
	       { 2'd2, p4_l1__h3113 } :
	       ((x__h5164 | _start_operand1[0]) ?
		  { 2'd3, p5_l1__h3115 } :
		  4'd0) ;
  assign IF_start_operand2_BIT_15_37_OR_start_operand2__ETC___d370 =
	     (x__h6840 | _start_operand2[12]) ?
	       { 2'd2, p2_l1__h5922 } :
	       ((x__h7161 | _start_operand2[8]) ?
		  { 2'd3, p3_l1__h5924 } :
		  4'd0) ;
  assign IF_start_operand2_BIT_7_79_OR_start_operand2_B_ETC___d412 =
	     (x__h7656 | _start_operand2[4]) ?
	       { 2'd2, p4_l1__h5926 } :
	       ((x__h7977 | _start_operand2[0]) ?
		  { 2'd3, p5_l1__h5928 } :
		  4'd0) ;
  assign NOT_ff_stage2_rv_port0__read__3_BIT_74_7_0_AND_ETC___d107 =
	     !ff_stage2_rv[74] && !ff_stage2_rv[75] && !lv_underflow__h1282 &&
	     (IF_IF_IF_ff_stage2_rv_port0__read__3_BITS_39_T_ETC___d100[8] ||
	      IF_IF_IF_ff_stage2_rv_port0__read__3_BITS_39_T_ETC___d100[7:0] ==
	      8'd255) ;
  assign _theResult_____1_snd_fst__h1514 =
	     !ff_stage2_rv[76] && !ff_stage2_rv[73] &&
	     NOT_ff_stage2_rv_port0__read__3_BIT_74_7_0_AND_ETC___d107 ;
  assign _theResult_____1_snd_snd__h1515 =
	     ff_stage2_rv[76] ?
	       32'h7FFFFFFF :
	       _theResult_____1_snd_snd__h1526 ;
  assign _theResult_____1_snd_snd__h1526 =
	     { ff_stage2_rv[77],
	       ff_stage2_rv[73] ?
		 31'd0 :
		 IF_ff_stage2_rv_port0__read__3_BIT_74_7_OR_ff__ETC___d126 } ;
  assign _theResult_____5__h1290 =
	     IF_int_div_output_quotient__3_BIT_25_4_THEN_in_ETC___d65[21:0] !=
	     22'd0 ||
	     int_div$output_remainder != 28'd0 ;
  assign _theResult____h1280 =
	     int_div$output_quotient[25] ?
	       int_div$output_quotient :
	       lv_quotient___1__h1820 ;
  assign lv_dividend__h2652 = { p0__h3257, _start_operand1[22:0] } ;
  assign lv_divisor__h2653 = { p0__h6070, _start_operand2[22:0] } ;
  assign lv_exponent___1__h2192 = lv_exponent__h1279 + 10'd1 ;
  assign lv_exponent__h1279 =
	     ff_stage2_rv[87:78] - { 9'd0, ~int_div$output_quotient[25] } ;
  assign lv_fsr___h1298 =
	     { ff_stage2_rv[63:42],
	       ff_stage2_rv[75],
	       ff_stage2_rv[73],
	       ff_stage2_rv[39:37],
	       ff_stage2_rv[76],
	       ff_stage2_rv[74],
	       _theResult_____1_snd_fst__h1514,
	       lv_underflow__h1282,
	       lv_inexact__h1292 } ;
  assign lv_inexact__h1292 = x__h2085 | _theResult_____5__h1290 ;
  assign lv_mantissa__h1285 = { _theResult____h1280, 22'd0 } ;
  assign lv_new_exponent__h2658 = x__h2755 + y__h2756 ;
  assign lv_op1_is_zero__h2641 =
	     _start_operand1[30:23] == 8'd0 &&
	     ~(_start_operand1[22:0] != 23'd0) ;
  assign lv_op2_is_infinity__h2644 =
	     _start_operand2[30:23] == 8'd255 &&
	     ~(_start_operand2[22:0] != 23'd0) ;
  assign lv_quotient___1__h1820 = { int_div$output_quotient[24:0], 1'd0 } ;
  assign lv_rounded_mantissa__h2135 =
	     { 1'b0,
	       IF_int_div_output_quotient__3_BIT_25_4_THEN_in_ETC___d65[47:24] } +
	     25'd1 ;
  assign lv_roundup___1__h1755 =
	     IF_int_div_output_quotient__3_BIT_25_4_THEN_in_ETC___d65[23] &
	     y__h1767 ;
  assign lv_roundup___1__h2028 =
	     IF_int_div_output_quotient__3_BIT_25_4_THEN_in_ETC___d65[23] &
	     y__h2040 ;
  assign lv_roundup___1__h2071 = lv_inexact__h1292 & y__h2084 ;
  assign lv_underflow__h1282 = lv_exponent__h1279[9] | y__h1561 ;
  assign lv_v_shr___1__h1665 = 10'd1 - lv_exponent__h1279 ;
  assign p0__h3257 = ~x__h3564 ;
  assign p0__h6070 = ~x__h6377 ;
  assign p0_l1__h3105 = { x__h3564 & y__h3565, x__h3567 | y__h3568 } ;
  assign p0_l1__h5918 = { x__h6377 & y__h6378, x__h6380 | y__h6381 } ;
  assign p1_l1__h3107 = { x__h3882 & y__h3883, x__h3885 | y__h3886 } ;
  assign p1_l1__h5920 = { x__h6695 & y__h6696, x__h6698 | y__h6699 } ;
  assign p2_l1__h3109 = { x__h4293 & y__h4294, x__h4296 | y__h4297 } ;
  assign p2_l1__h5922 = { x__h7106 & y__h7107, x__h7109 | y__h7110 } ;
  assign p3_l1__h3111 = { x__h4611 & y__h4612, x__h4614 | y__h4615 } ;
  assign p3_l1__h5924 = { x__h7424 & y__h7425, x__h7427 | y__h7428 } ;
  assign p4_l1__h3113 = { x__h5109 & y__h5110, x__h5112 | y__h5113 } ;
  assign p4_l1__h5926 = { x__h7922 & y__h7923, x__h7925 | y__h7926 } ;
  assign p5_l1__h3115 = { x__h5427 & y__h5428, x__h5430 | y__h5431 } ;
  assign p5_l1__h5928 = { x__h8240 & y__h8241, x__h8243 | y__h8244 } ;
  assign x__h1625 = lv_exponent__h1279[8:0] != 9'd0 ;
  assign x__h1834 =
	     IF_ff_stage2_rv_port0__read__3_BITS_87_TO_78_2_ETC___d61[6] ?
	       6'd63 :
	       IF_ff_stage2_rv_port0__read__3_BITS_87_TO_78_2_ETC___d61[5:0] ;
  assign x__h1910 =
	     IF_int_div_output_quotient__3_BIT_25_4_THEN_in_ETC___d65[22] |
	     _theResult_____5__h1290 ;
  assign x__h2085 =
	     IF_int_div_output_quotient__3_BIT_25_4_THEN_in_ETC___d65[23] |
	     IF_int_div_output_quotient__3_BIT_25_4_THEN_in_ETC___d65[22] ;
  assign x__h2755 = x__h2757 - y__h2758 ;
  assign x__h2757 = x__h2759 + 10'b0001111111 ;
  assign x__h2759 = x__h2760 - y__h2761 ;
  assign x__h2760 = x__h2762 + y__h2763 ;
  assign x__h2762 = { 2'd0, _start_operand1[30:23] } ;
  assign x__h2921 = { 2'd0, _start_operand2[30:23] } ;
  assign x__h3271 = x__h3272 | _start_operand1[21] ;
  assign x__h3272 = p0__h3257 | _start_operand1[22] ;
  assign x__h3564 =
	     _start_operand1[30:23] == 8'd0 &&
	     !(~(_start_operand1[22:0] != 23'd0)) ;
  assign x__h3567 = x__h3564 & _start_operand1[22] ;
  assign x__h3619 = x__h3620 | _start_operand1[17] ;
  assign x__h3620 = _start_operand1[19] | _start_operand1[18] ;
  assign x__h3882 = ~_start_operand1[19] ;
  assign x__h3885 = x__h3882 & _start_operand1[18] ;
  assign x__h4027 = x__h4028 | _start_operand1[13] ;
  assign x__h4028 = _start_operand1[15] | _start_operand1[14] ;
  assign x__h4293 = ~_start_operand1[15] ;
  assign x__h4296 = x__h4293 & _start_operand1[14] ;
  assign x__h4348 = x__h4349 | _start_operand1[9] ;
  assign x__h4349 = _start_operand1[11] | _start_operand1[10] ;
  assign x__h4611 = ~_start_operand1[11] ;
  assign x__h4614 = x__h4611 & _start_operand1[10] ;
  assign x__h4843 = x__h4844 | _start_operand1[5] ;
  assign x__h4844 = _start_operand1[7] | _start_operand1[6] ;
  assign x__h5109 = ~_start_operand1[7] ;
  assign x__h5112 = x__h5109 & _start_operand1[6] ;
  assign x__h5164 = x__h5165 | _start_operand1[1] ;
  assign x__h5165 = _start_operand1[3] | _start_operand1[2] ;
  assign x__h5427 = ~_start_operand1[3] ;
  assign x__h5430 = x__h5427 & _start_operand1[2] ;
  assign x__h6084 = x__h6085 | _start_operand2[21] ;
  assign x__h6085 = p0__h6070 | _start_operand2[22] ;
  assign x__h6377 =
	     _start_operand2[30:23] == 8'd0 &&
	     !(~(_start_operand2[22:0] != 23'd0)) ;
  assign x__h6380 = x__h6377 & _start_operand2[22] ;
  assign x__h6432 = x__h6433 | _start_operand2[17] ;
  assign x__h6433 = _start_operand2[19] | _start_operand2[18] ;
  assign x__h6695 = ~_start_operand2[19] ;
  assign x__h6698 = x__h6695 & _start_operand2[18] ;
  assign x__h6840 = x__h6841 | _start_operand2[13] ;
  assign x__h6841 = _start_operand2[15] | _start_operand2[14] ;
  assign x__h7106 = ~_start_operand2[15] ;
  assign x__h7109 = x__h7106 & _start_operand2[14] ;
  assign x__h7161 = x__h7162 | _start_operand2[9] ;
  assign x__h7162 = _start_operand2[11] | _start_operand2[10] ;
  assign x__h7424 = ~_start_operand2[11] ;
  assign x__h7427 = x__h7424 & _start_operand2[10] ;
  assign x__h7656 = x__h7657 | _start_operand2[5] ;
  assign x__h7657 = _start_operand2[7] | _start_operand2[6] ;
  assign x__h7922 = ~_start_operand2[7] ;
  assign x__h7925 = x__h7922 & _start_operand2[6] ;
  assign x__h7977 = x__h7978 | _start_operand2[1] ;
  assign x__h7978 = _start_operand2[3] | _start_operand2[2] ;
  assign x__h8240 = ~_start_operand2[3] ;
  assign x__h8243 = x__h8240 & _start_operand2[2] ;
  assign x__h8706 =
	     lv_dividend__h2652 <<
	     IF_IF_IF_INV_start_operand1_BITS_30_TO_23_53_E_ETC___d297[4:0] ;
  assign x__h8728 =
	     lv_divisor__h2653 <<
	     IF_IF_IF_INV_start_operand2_BITS_30_TO_23_64_E_ETC___d421[4:0] ;
  assign x__h8752 = _start_operand1[31] ^ _start_operand2[31] ;
  assign x__h8807 = x__h8819 | y__h8820 ;
  assign x__h8819 = x__h8821 | y__h8822 ;
  assign x__h8821 = x__h8823 | y__h8824 ;
  assign x__h8823 =
	     _start_operand1[30:23] == 8'd255 &&
	     !(~(_start_operand1[22:0] != 23'd0)) ;
  assign x__h8868 =
	     !x__h8807 &&
	     (_start_operand1[30:23] == 8'd255 &&
	      ~(_start_operand1[22:0] != 23'd0) ||
	      _start_operand2[30:23] == 8'd0 &&
	      ~(_start_operand2[22:0] != 23'd0)) ;
  assign x__h8892 =
	     !x__h8807 &&
	     (_start_operand1[30:23] != 8'd255 ||
	      !(~(_start_operand1[22:0] != 23'd0))) &&
	     _start_operand2[30:23] == 8'd0 &&
	     ~(_start_operand2[22:0] != 23'd0) ;
  assign x__h8897 =
	     !x__h8807 &&
	     (_start_operand1[30:23] != 8'd255 ||
	      !(~(_start_operand1[22:0] != 23'd0))) &&
	     (_start_operand2[30:23] != 8'd0 ||
	      !(~(_start_operand2[22:0] != 23'd0))) &&
	     lv_op2_is_infinity__h2644 | lv_op1_is_zero__h2641 ;
  assign x_final_result__h1356 = { 32'd0, _theResult_____1_snd_snd__h1515 } ;
  assign y__h1561 = ~x__h1625 ;
  assign y__h1767 =
	     x__h1910 |
	     IF_int_div_output_quotient__3_BIT_25_4_THEN_in_ETC___d65[24] ;
  assign y__h2040 = x__h1910 | ff_stage2_rv[77] ;
  assign y__h2084 = ~ff_stage2_rv[77] ;
  assign y__h2756 =
	     { 5'd0,
	       IF_IF_IF_INV_start_operand2_BITS_30_TO_23_64_E_ETC___d421[4:0] } ;
  assign y__h2758 =
	     { 5'd0,
	       IF_IF_IF_INV_start_operand1_BITS_30_TO_23_53_E_ETC___d297[4:0] } ;
  assign y__h2761 = x__h2921 + y__h2922 ;
  assign y__h2763 = { 9'd0, x__h3564 } ;
  assign y__h2922 = { 9'd0, x__h6377 } ;
  assign y__h3565 = ~_start_operand1[22] ;
  assign y__h3568 = x__h3564 & y__h3571 ;
  assign y__h3571 = ~_start_operand1[21] ;
  assign y__h3883 = ~_start_operand1[18] ;
  assign y__h3886 = x__h3882 & y__h3889 ;
  assign y__h3889 = ~_start_operand1[17] ;
  assign y__h4294 = ~_start_operand1[14] ;
  assign y__h4297 = x__h4293 & y__h4300 ;
  assign y__h4300 = ~_start_operand1[13] ;
  assign y__h4612 = ~_start_operand1[10] ;
  assign y__h4615 = x__h4611 & y__h4618 ;
  assign y__h4618 = ~_start_operand1[9] ;
  assign y__h5110 = ~_start_operand1[6] ;
  assign y__h5113 = x__h5109 & y__h5116 ;
  assign y__h5116 = ~_start_operand1[5] ;
  assign y__h5428 = ~_start_operand1[2] ;
  assign y__h5431 = x__h5427 & y__h5434 ;
  assign y__h5434 = ~_start_operand1[1] ;
  assign y__h6378 = ~_start_operand2[22] ;
  assign y__h6381 = x__h6377 & y__h6384 ;
  assign y__h6384 = ~_start_operand2[21] ;
  assign y__h6696 = ~_start_operand2[18] ;
  assign y__h6699 = x__h6695 & y__h6702 ;
  assign y__h6702 = ~_start_operand2[17] ;
  assign y__h7107 = ~_start_operand2[14] ;
  assign y__h7110 = x__h7106 & y__h7113 ;
  assign y__h7113 = ~_start_operand2[13] ;
  assign y__h7425 = ~_start_operand2[10] ;
  assign y__h7428 = x__h7424 & y__h7431 ;
  assign y__h7431 = ~_start_operand2[9] ;
  assign y__h7923 = ~_start_operand2[6] ;
  assign y__h7926 = x__h7922 & y__h7929 ;
  assign y__h7929 = ~_start_operand2[5] ;
  assign y__h8241 = ~_start_operand2[2] ;
  assign y__h8244 = x__h8240 & y__h8247 ;
  assign y__h8247 = ~_start_operand2[1] ;
  assign y__h8820 =
	     lv_op1_is_zero__h2641 &
	     (_start_operand2[30:23] == 8'd0 &&
	      ~(_start_operand2[22:0] != 23'd0)) ;
  assign y__h8822 =
	     (_start_operand1[30:23] == 8'd255 &&
	      ~(_start_operand1[22:0] != 23'd0)) &
	     lv_op2_is_infinity__h2644 ;
  assign y__h8824 =
	     _start_operand2[30:23] == 8'd255 &&
	     !(~(_start_operand2[22:0] != 23'd0)) ;
  always@(ff_final_out$D_OUT)
  begin
    case (ff_final_out$D_OUT[3:1])
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4:
	  CASE_ff_final_outD_OUT_BITS_3_TO_1_0_ff_final_ETC__q1 =
	      ff_final_out$D_OUT[3:1];
      default: CASE_ff_final_outD_OUT_BITS_3_TO_1_0_ff_final_ETC__q1 = 3'd5;
    endcase
  end
  always@(ff_stage2_rv or
	  lv_inexact__h1292 or
	  lv_roundup___1__h1755 or
	  lv_roundup___1__h2071 or lv_roundup___1__h2028)
  begin
    case (ff_stage2_rv[39:37])
      3'b0:
	  IF_ff_stage2_rv_port0__read__3_BITS_39_TO_37_4_ETC___d93 =
	      lv_roundup___1__h1755;
      3'b011:
	  IF_ff_stage2_rv_port0__read__3_BITS_39_TO_37_4_ETC___d93 =
	      lv_roundup___1__h2071;
      3'b100:
	  IF_ff_stage2_rv_port0__read__3_BITS_39_TO_37_4_ETC___d93 =
	      lv_roundup___1__h2028;
      default: IF_ff_stage2_rv_port0__read__3_BITS_39_TO_37_4_ETC___d93 =
		   ff_stage2_rv[39:37] == 3'b010 &&
		   lv_inexact__h1292 & ff_stage2_rv[77];
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        ff_stage1_rv <= `BSV_ASSIGNMENT_DELAY
	    137'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	ff_stage2_rv <= `BSV_ASSIGNMENT_DELAY 89'h0AAAAAAAAAAAAAAAAAAAAAA;
	rg_ready_signal <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (ff_stage1_rv$EN)
	  ff_stage1_rv <= `BSV_ASSIGNMENT_DELAY ff_stage1_rv$D_IN;
	if (ff_stage2_rv$EN)
	  ff_stage2_rv <= `BSV_ASSIGNMENT_DELAY ff_stage2_rv$D_IN;
	if (rg_ready_signal$EN)
	  rg_ready_signal <= `BSV_ASSIGNMENT_DELAY rg_ready_signal$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    ff_stage1_rv = 137'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ff_stage2_rv = 89'h0AAAAAAAAAAAAAAAAAAAAAA;
    rg_ready_signal = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkfpu_spfloating_divider

