//
// Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
//
// On Tue Mar 28 10:39:40 IST 2017
//
//
// Ports:
// Name                         I/O  size props
// _start                         O    38 reg
// RDY__start                     O     1 const
// exception                      O     5
// RDY_exception                  O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// _start_operand1                I    32
// _start_operand2                I    32
// _start_operand3                I    32
// _start_opcode                  I     5
// _start_funct7                  I     7
// _start_funct3                  I     3
// _start_immediate_value         I     2
// _start_fsr                     I    32
// EN__start                      I     1
// EN_exception                   I     1 unused
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkfpu(CLK,
	     RST_N,

	     _start_operand1,
	     _start_operand2,
	     _start_operand3,
	     _start_opcode,
	     _start_funct7,
	     _start_funct3,
	     _start_immediate_value,
	     _start_fsr,
	     EN__start,
	     _start,
	     RDY__start,

	     EN_exception,
	     exception,
	     RDY_exception);
  input  CLK;
  input  RST_N;

  // actionvalue method _start
  input  [31 : 0] _start_operand1;
  input  [31 : 0] _start_operand2;
  input  [31 : 0] _start_operand3;
  input  [4 : 0] _start_opcode;
  input  [6 : 0] _start_funct7;
  input  [2 : 0] _start_funct3;
  input  [1 : 0] _start_immediate_value;
  input  [31 : 0] _start_fsr;
  input  EN__start;
  output [37 : 0] _start;
  output RDY__start;

  // actionvalue method exception
  input  EN_exception;
  output [4 : 0] exception;
  output RDY_exception;

  // signals for module outputs
  wire [37 : 0] _start;
  wire [4 : 0] exception;
  wire RDY__start, RDY_exception;

  // inlined wires
  reg [37 : 0] wr_result_1$wget;
  wire [82 : 0] inst_spfpu_divider_int_div_wr_final_out$wget;
  wire [66 : 0] inst_spfpu_divider_rg_stage1_1$wget;
  wire [36 : 0] inst_fpu_compare_min_max_ff_result$wget,
		inst_fpu_int_to_fp_wr_final_out$wget,
		inst_spfm_add_sub_ff_final_out$wget,
		inst_spfp_to_int_wr_final_out$wget,
		inst_spfpu_divider_wr_final_out$wget,
		inst_spfpu_fclass_ff_final_out$wget,
		inst_spfpu_sign_injection_ff_final_out$wget;
  wire wr_result_1$whas;

  // register inst_spfm_add_sub_ff_input_register
  reg [100 : 0] inst_spfm_add_sub_ff_input_register;
  reg [100 : 0] inst_spfm_add_sub_ff_input_register$D_IN;
  wire inst_spfm_add_sub_ff_input_register$EN;

  // register inst_spfm_add_sub_ff_stage2
  reg [180 : 0] inst_spfm_add_sub_ff_stage2;
  wire [180 : 0] inst_spfm_add_sub_ff_stage2$D_IN;
  wire inst_spfm_add_sub_ff_stage2$EN;

  // register inst_spfm_add_sub_ff_stage3
  reg [181 : 0] inst_spfm_add_sub_ff_stage3;
  wire [181 : 0] inst_spfm_add_sub_ff_stage3$D_IN;
  wire inst_spfm_add_sub_ff_stage3$EN;

  // register inst_spfm_add_sub_ff_stage4
  reg [98 : 0] inst_spfm_add_sub_ff_stage4;
  wire [98 : 0] inst_spfm_add_sub_ff_stage4$D_IN;
  wire inst_spfm_add_sub_ff_stage4$EN;

  // register inst_spfm_add_sub_mult_partial_prod
  reg [128 : 0] inst_spfm_add_sub_mult_partial_prod;
  wire [128 : 0] inst_spfm_add_sub_mult_partial_prod$D_IN;
  wire inst_spfm_add_sub_mult_partial_prod$EN;

  // register inst_spfm_add_sub_mult_rg_state_counter
  reg [6 : 0] inst_spfm_add_sub_mult_rg_state_counter;
  wire [6 : 0] inst_spfm_add_sub_mult_rg_state_counter$D_IN;
  wire inst_spfm_add_sub_mult_rg_state_counter$EN;

  // register inst_spfpu_divider_int_div_rg_inter_stage
  reg [82 : 0] inst_spfpu_divider_int_div_rg_inter_stage;
  wire [82 : 0] inst_spfpu_divider_int_div_rg_inter_stage$D_IN;
  wire inst_spfpu_divider_int_div_rg_inter_stage$EN;

  // register inst_spfpu_divider_int_div_rg_state
  reg [5 : 0] inst_spfpu_divider_int_div_rg_state;
  wire [5 : 0] inst_spfpu_divider_int_div_rg_state$D_IN;
  wire inst_spfpu_divider_int_div_rg_state$EN;

  // register inst_spfpu_divider_rg_stage1
  reg [66 : 0] inst_spfpu_divider_rg_stage1;
  wire [66 : 0] inst_spfpu_divider_rg_stage1$D_IN;
  wire inst_spfpu_divider_rg_stage1$EN;

  // register inst_spfpu_divider_rg_stage2
  reg [18 : 0] inst_spfpu_divider_rg_stage2;
  wire [18 : 0] inst_spfpu_divider_rg_stage2$D_IN;
  wire inst_spfpu_divider_rg_stage2$EN;

  // register inst_spfpu_sqrt_ff_final_out
  reg [37 : 0] inst_spfpu_sqrt_ff_final_out;
  reg [37 : 0] inst_spfpu_sqrt_ff_final_out$D_IN;
  wire inst_spfpu_sqrt_ff_final_out$EN;

  // register inst_spfpu_sqrt_rg_inter_stage
  reg [145 : 0] inst_spfpu_sqrt_rg_inter_stage;
  wire [145 : 0] inst_spfpu_sqrt_rg_inter_stage$D_IN;
  wire inst_spfpu_sqrt_rg_inter_stage$EN;

  // register inst_spfpu_sqrt_rg_state
  reg [31 : 0] inst_spfpu_sqrt_rg_state;
  reg [31 : 0] inst_spfpu_sqrt_rg_state$D_IN;
  wire inst_spfpu_sqrt_rg_state$EN;

  // register take_new_inputs
  reg take_new_inputs;
  wire take_new_inputs$D_IN, take_new_inputs$EN;

  // register wr_exception
  reg [4 : 0] wr_exception;
  wire [4 : 0] wr_exception$D_IN;
  wire wr_exception$EN;

  // register wr_result
  reg [37 : 0] wr_result;
  wire [37 : 0] wr_result$D_IN;
  wire wr_result$EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_inst_spfm_add_sub_mult_rg_state_counter__dreg_update,
       CAN_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage,
       CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_3_after_integer_multiplier_stage,
       CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_4,
       CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage,
       CAN_FIRE_RL_inst_spfpu_divider_int_div_end_stage,
       CAN_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage,
       CAN_FIRE_RL_inst_spfpu_divider_int_div_stage_1,
       CAN_FIRE_RL_inst_spfpu_divider_rg_stage1__dreg_update,
       CAN_FIRE_RL_inst_spfpu_divider_rl_stage2,
       CAN_FIRE_RL_inst_spfpu_divider_rl_stage3,
       CAN_FIRE_RL_inst_spfpu_sqrt_rl_final_stage,
       CAN_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage,
       CAN_FIRE_RL_inst_spfpu_sqrt_rl_stage2,
       CAN_FIRE_RL_rl_get_output_from_fm_add_sub,
       CAN_FIRE_RL_rl_get_output_from_fpu_compare_min_max,
       CAN_FIRE_RL_rl_get_output_from_fpu_int_to_fp,
       CAN_FIRE_RL_rl_get_output_from_spfclass,
       CAN_FIRE_RL_rl_get_output_from_spfp_to_int,
       CAN_FIRE_RL_rl_get_output_from_spfpu_divider,
       CAN_FIRE_RL_rl_get_output_from_spfpu_sign_injection,
       CAN_FIRE_RL_rl_get_output_from_spfpu_sqrt,
       CAN_FIRE_RL_rl_give_inputs_get_outputs_fmv,
       CAN_FIRE_RL_rl_give_inputs_to_fm_add_sub,
       CAN_FIRE_RL_rl_give_inputs_to_fp_to_int,
       CAN_FIRE_RL_rl_give_inputs_to_fpu_add_sub,
       CAN_FIRE_RL_rl_give_inputs_to_fpu_compare_min_max,
       CAN_FIRE_RL_rl_give_inputs_to_fpu_int_to_fp,
       CAN_FIRE_RL_rl_give_inputs_to_fpu_sign_injection,
       CAN_FIRE_RL_rl_give_inputs_to_spfloating_classify,
       CAN_FIRE_RL_rl_give_inputs_to_spfloating_multiplier,
       CAN_FIRE_RL_rl_give_inputs_to_spfpu_divider,
       CAN_FIRE_RL_rl_give_inputs_to_spfpu_sqrt,
       CAN_FIRE_RL_wr_exception__dreg_update,
       CAN_FIRE_RL_wr_result__dreg_update,
       CAN_FIRE__start,
       CAN_FIRE_exception,
       WILL_FIRE_RL_inst_spfm_add_sub_mult_rg_state_counter__dreg_update,
       WILL_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage,
       WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_3_after_integer_multiplier_stage,
       WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_4,
       WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage,
       WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage,
       WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage,
       WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1,
       WILL_FIRE_RL_inst_spfpu_divider_rg_stage1__dreg_update,
       WILL_FIRE_RL_inst_spfpu_divider_rl_stage2,
       WILL_FIRE_RL_inst_spfpu_divider_rl_stage3,
       WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage,
       WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage,
       WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2,
       WILL_FIRE_RL_rl_get_output_from_fm_add_sub,
       WILL_FIRE_RL_rl_get_output_from_fpu_compare_min_max,
       WILL_FIRE_RL_rl_get_output_from_fpu_int_to_fp,
       WILL_FIRE_RL_rl_get_output_from_spfclass,
       WILL_FIRE_RL_rl_get_output_from_spfp_to_int,
       WILL_FIRE_RL_rl_get_output_from_spfpu_divider,
       WILL_FIRE_RL_rl_get_output_from_spfpu_sign_injection,
       WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt,
       WILL_FIRE_RL_rl_give_inputs_get_outputs_fmv,
       WILL_FIRE_RL_rl_give_inputs_to_fm_add_sub,
       WILL_FIRE_RL_rl_give_inputs_to_fp_to_int,
       WILL_FIRE_RL_rl_give_inputs_to_fpu_add_sub,
       WILL_FIRE_RL_rl_give_inputs_to_fpu_compare_min_max,
       WILL_FIRE_RL_rl_give_inputs_to_fpu_int_to_fp,
       WILL_FIRE_RL_rl_give_inputs_to_fpu_sign_injection,
       WILL_FIRE_RL_rl_give_inputs_to_spfloating_classify,
       WILL_FIRE_RL_rl_give_inputs_to_spfloating_multiplier,
       WILL_FIRE_RL_rl_give_inputs_to_spfpu_divider,
       WILL_FIRE_RL_rl_give_inputs_to_spfpu_sqrt,
       WILL_FIRE_RL_wr_exception__dreg_update,
       WILL_FIRE_RL_wr_result__dreg_update,
       WILL_FIRE__start,
       WILL_FIRE_exception;

  // inputs to muxes for submodule ports
  wire [181 : 0] MUX_inst_spfm_add_sub_ff_stage3$write_1__VAL_1,
		 MUX_inst_spfm_add_sub_ff_stage3$write_1__VAL_2;
  wire [180 : 0] MUX_inst_spfm_add_sub_ff_stage2$write_1__VAL_1,
		 MUX_inst_spfm_add_sub_ff_stage2$write_1__VAL_2;
  wire [145 : 0] MUX_inst_spfpu_sqrt_rg_inter_stage$write_1__VAL_1,
		 MUX_inst_spfpu_sqrt_rg_inter_stage$write_1__VAL_2;
  wire [100 : 0] MUX_inst_spfm_add_sub_ff_input_register$write_1__VAL_1,
		 MUX_inst_spfm_add_sub_ff_input_register$write_1__VAL_2,
		 MUX_inst_spfm_add_sub_ff_input_register$write_1__VAL_3,
		 MUX_inst_spfm_add_sub_ff_input_register$write_1__VAL_4;
  wire [98 : 0] MUX_inst_spfm_add_sub_ff_stage4$write_1__VAL_1,
		MUX_inst_spfm_add_sub_ff_stage4$write_1__VAL_2;
  wire [82 : 0] MUX_inst_spfpu_divider_int_div_rg_inter_stage$write_1__VAL_1,
		MUX_inst_spfpu_divider_int_div_rg_inter_stage$write_1__VAL_2;
  wire [37 : 0] MUX_inst_spfpu_sqrt_ff_final_out$write_1__VAL_1,
		MUX_inst_spfpu_sqrt_ff_final_out$write_1__VAL_2,
		MUX_inst_spfpu_sqrt_ff_final_out$write_1__VAL_3,
		MUX_wr_result_1$wset_1__VAL_1,
		MUX_wr_result_1$wset_1__VAL_2,
		MUX_wr_result_1$wset_1__VAL_3,
		MUX_wr_result_1$wset_1__VAL_4,
		MUX_wr_result_1$wset_1__VAL_5,
		MUX_wr_result_1$wset_1__VAL_6,
		MUX_wr_result_1$wset_1__VAL_7,
		MUX_wr_result_1$wset_1__VAL_8,
		MUX_wr_result_1$wset_1__VAL_9;
  wire [31 : 0] MUX_inst_spfpu_sqrt_rg_state$write_1__VAL_1;
  wire [18 : 0] MUX_inst_spfpu_divider_rg_stage2$write_1__VAL_1,
		MUX_inst_spfpu_divider_rg_stage2$write_1__VAL_2;
  wire [5 : 0] MUX_inst_spfpu_divider_int_div_rg_state$write_1__VAL_1;
  wire MUX_inst_spfm_add_sub_ff_input_register$write_1__SEL_4,
       MUX_inst_spfpu_divider_int_div_rg_inter_stage$write_1__SEL_1,
       MUX_inst_spfpu_divider_int_div_rg_state$write_1__SEL_1,
       MUX_inst_spfpu_sqrt_ff_final_out$write_1__SEL_1,
       MUX_inst_spfpu_sqrt_rg_inter_stage$write_1__SEL_1,
       MUX_inst_spfpu_sqrt_rg_state$write_1__SEL_1,
       MUX_take_new_inputs$write_1__SEL_10,
       MUX_wr_result_1$wset_1__SEL_10;

  // remaining internal signals
  reg [72 : 0] mantissa3__h25043;
  reg [63 : 0] v__h1989,
	       v__h2551,
	       v__h70615,
	       v__h70652,
	       v__h71598,
	       v__h71635,
	       v__h71833,
	       v__h71921,
	       v__h72018,
	       v__h72105,
	       v__h72608,
	       v__h72912,
	       v__h72949,
	       v__h80328,
	       v__h80365,
	       v__h88896,
	       v__h88960,
	       v__h90554,
	       v__h90591,
	       v__h90688,
	       v__h90774,
	       v__h90917,
	       v__h91007,
	       v__h91094,
	       v__h91181,
	       v__h91676,
	       v__h91775,
	       v__h91865,
	       v__h91952,
	       v__h92039,
	       v__h92615,
	       v__h92646,
	       v__h93569,
	       v__h93606,
	       v__h93723;
  reg [31 : 0] IF_IF_wr_funct3_whas__346_THEN_wr_funct3_wget__ETC___d1496;
  reg [6 : 0] x__h13547;
  reg [3 : 0] CASE_wr_exception_BITS_3_TO_0_0_wr_exception_B_ETC__q1;
  reg CASE_x__read37_0b0_IF_wr_operand2_whas__241_TH_ETC__q10,
      IF_IF_wr_funct3_whas__346_THEN_wr_funct3_wget__ETC___d1406,
      IF_inst_spfpu_divider_rg_stage2_7_BITS_2_TO_0__ETC___d266,
      IF_inst_spfpu_sqrt_rg_inter_stage_20_BITS_2_TO_ETC___d375,
      _theResult_____3__h90319,
      _theResult____h64899;
  wire [128 : 0] temp1__h13771, x__h13784;
  wire [127 : 0] final_result__h14094,
		 inst_spfm_add_sub_mult_partial_prod_01_BITS_63_ETC___d408;
  wire [72 : 0] IF_inst_spfm_add_sub_ff_stage3_81_BITS_178_TO__ETC___d794,
		_theResult_____3__h54043,
		_theResult_____3_fst__h25157,
		lv_mantissa2__h48900,
		lv_mantissa3__h48901,
		mantissa2__h25030,
		mantissa2__h25383,
		mantissa3__h25152,
		mantissa3__h25162,
		mantissa_to_shift___1__h48898,
		mantissa_to_shift__h48893,
		resultant_mantissa__h54098,
		resultant_mantissa__h54100,
		resultant_mantissa__h54101,
		resultant_mantissa__h64576,
		resultant_mantissa__h64596,
		resultant_mantissa__h64598,
		y_avValue_snd__h64534,
		y_avValue_snd__h64555,
		y_avValue_snd__h64568;
  wire [64 : 0] accum__h13769;
  wire [63 : 0] inp1__h13644, inp2__h13645;
  wire [55 : 0] IF_IF_inst_spfpu_divider_int_div_rg_inter_stag_ETC___d55,
		IF_inst_spfpu_divider_int_div_rg_inter_stage_3_ETC__q6,
		IF_inst_spfpu_divider_int_div_rg_inter_stage_3_ETC__q7,
		_0_CONCAT_inst_spfpu_divider_rg_stage1_7_BITS_5_ETC___d77,
		_0_CONCAT_inst_spfpu_divider_rg_stage1_7_BITS_5_ETC__q8,
		_0_CONCAT_inst_spfpu_divider_rg_stage1_7_BITS_5_ETC__q9,
		inst_spfpu_divider_int_div_rg_inter_stage_BITS_ETC__q2,
		inst_spfpu_divider_int_div_rg_inter_stage_BITS_ETC__q3;
  wire [54 : 0] IF_inst_spfpu_divider_int_div_rg_inter_stage_3_ETC___d24,
		_1_CONCAT_IF_wr_operand1_whas__236_THEN_wr_oper_ETC___d1862,
		x__h89330;
  wire [51 : 0] IF_IF_IF_wr_operand1_whas__236_THEN_wr_operand_ETC___d1766,
		mantissa___1__h88101,
		mantissa__h11980,
		mantissa__h80501,
		mantissa__h80503,
		mantissa__h88177;
  wire [48 : 0] IF_NOT_inst_spfm_add_sub_ff_stage2_34_BITS_45__ETC___d725,
		IF_inst_spfm_add_sub_ff_stage2_34_BIT_99_44_TH_ETC___d465,
		_theResult_____1_fst__h25477,
		_theResult_____1_fst__h25480,
		lv_product_mantissa___1__h21424,
		lv_product_mantissa___1__h21488,
		lv_product_mantissa___1__h25493,
		lv_product_mantissa___2__h25514,
		lv_product_mantissa__h14220,
		lv_product_mantissa__h21404,
		y_avValue_snd_snd_snd_fst__h25422,
		y_avValue_snd_snd_snd_fst__h25444;
  wire [36 : 0] IF_IF_wr_operand2_whas__241_THEN_wr_operand2_w_ETC___d1498;
  wire [31 : 0] IF_IF_IF_wr_operand1_whas__236_THEN_wr_operand_ETC___d1490,
		IF_IF_IF_wr_operand1_whas__236_THEN_wr_operand_ETC___d1493,
		IF_IF_wr_imm_whas__821_THEN_wr_imm_wget__822_E_ETC___d1905,
		IF_NOT_IF_wr_funct3_whas__346_THEN_wr_funct3_w_ETC___d1464,
		IF_NOT_IF_wr_operand2_whas__241_THEN_wr_operan_ETC___d1382,
		IF_inst_spfm_add_sub_ff_stage4_146_BIT_7_177_T_ETC___d1215,
		IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243,
		_operand3__h91734,
		_theResult_____1__h65186,
		_theResult_____1_snd__h11040,
		_theResult_____2__h90320,
		_theResult____h65711,
		_theResult___snd__h70322,
		final_result___1__h90511,
		final_result__h12887,
		final_result__h88560,
		final_result__h89925,
		final_result__h90509,
		lv_final_output__h11017,
		lv_final_output__h65243,
		lv_final_output__h65287,
		lv_final_output__h65331,
		lv_integer_num___1__h66184,
		new_value_final_result__h65729,
		new_value_final_result__h72698,
		new_value_final_result__h90492,
		new_value_final_result__h92796,
		x__read__h720,
		y_avValue_fst__h89627,
		y_avValue_fst__h89872,
		y_avValue_fst__h89896,
		y_avValue_fst__h89910,
		y_avValue_fst__h89917;
  wire [30 : 0] IF_NOT_IF_NOT_IF_wr_operand2_whas__241_THEN_wr_ETC___d1420,
		IF_NOT_inst_spfpu_divider_rg_stage2_7_BITS_17__ETC___d302,
		IF_inst_spfm_add_sub_ff_stage4_146_BIT_2_186_O_ETC___d1211,
		IF_inst_spfpu_divider_rg_stage2_7_BITS_17_TO_8_ETC___d303;
  wire [28 : 0] _remainder___1__h2962,
		_theResult_____3__h12371,
		_theResult_____3__h87999,
		_theResult____h11978,
		lv_remainder__h12067,
		lv_remainder__h12157,
		lv_remainder__h12577,
		lv_remainder_temp__h11975,
		lv_root_rem__h12370,
		lv_root_temp_1__h11976,
		lv_root_temp_2__h11977;
  wire [26 : 0] _denominator__h3506,
		_dividend___1__h2963,
		_dividend__h2714,
		_dividend__h2715,
		_numerator__h3507,
		_theResult___snd_fst__h10431,
		_theResult___snd_fst__h10437,
		inst_spfpu_divider_int_div_wr_final_out_wget___ETC___d172,
		lv_extended_mantissa___1__h12879,
		lv_extended_mantissa__h12378,
		lv_extended_mantissa__h12380,
		lv_quotient___1__h10453,
		lv_quotient___1__h8301,
		lv_quotient___2__h10480,
		lv_quotient__h10359,
		y_avValue_snd_fst__h10405,
		y_avValue_snd_fst__h10411;
  wire [25 : 0] IF_0_CONCAT_IF_IF_IF_wr_operand1_whas__236_THE_ETC___d1794,
		IF_IF_0_CONCAT_IF_IF_IF_wr_operand1_whas__236__ETC__q11,
		result_mantissa__h11981,
		result_mantissa__h12369,
		result_mantissa__h88178,
		x__h12344;
  wire [24 : 0] IF_IF_IF_inst_spfpu_divider_rg_stage2_7_BITS_2_ETC___d276,
		IF_theResult_____45149_BIT_24_THEN_lv_rounded__ETC__q5,
		_theResult_____2__h70331,
		_theResult_____4__h10613,
		_theResult_____4__h65149,
		lv_rounded_mantissa___1__h65169,
		lv_rounded_mantissa__h65403,
		lv_rounded_mantissa__h70541,
		lv_rounded_mantissa__h70596,
		lv_rounded_quotient___1__h10808,
		lv_rounded_quotient__h10612,
		x__h70602,
		y_avValue_snd__h10879;
  wire [23 : 0] _theResult_____5__h70832,
		_theResult____h70827,
		man1__h73273,
		man2__h73274,
		x__h72493,
		x__h80136,
		x__h80164,
		x__h91582;
  wire [22 : 0] lv_mantissa__h89927,
		y_avValue_snd_snd_snd__h90145,
		y_avValue_snd_snd_snd__h90147,
		y_avValue_snd_snd_snd__h90161,
		y_avValue_snd_snd_snd__h90231,
		y_avValue_snd_snd_snd__h90246;
  wire [9 : 0] IF_IF_IF_inst_spfm_add_sub_ff_stage4_146_BITS__ETC___d1195,
	       IF_NOT_IF_inst_spfpu_divider_rg_stage2_7_BITS__ETC___d290,
	       IF_inst_spfm_add_sub_ff_stage3_81_BITS_178_TO__ETC___d1117,
	       INV_898_MINUS_IF_inst_spfm_add_sub_ff_stage2_3_ETC___d704,
	       INV_898_MINUS_inst_spfpu_divider_rg_stage2_7_B_ETC___d211,
	       _0_CONCAT_IF_IF_inst_spfm_add_sub_ff_stage3_81__ETC___d1116,
	       _898_MINUS_IF_inst_spfm_add_sub_ff_stage2_34_BI_ETC___d458,
	       _898_MINUS_inst_spfpu_divider_rg_stage2_7_BITS__ETC___d165,
	       _theResult_____1_snd__h25478,
	       _theResult_____1_snd__h25481,
	       _theResult_____8__h10363,
	       _theResult___fst__h10429,
	       _theResult___fst__h10435,
	       _theResult___snd__h92956,
	       _theResult___snd__h93012,
	       _theResult___snd__h93075,
	       _theResult___snd__h93131,
	       _theResult___snd__h93188,
	       _theResult___snd__h93241,
	       _theResult___snd__h93298,
	       _theResult___snd__h93379,
	       _theResult___snd__h93455,
	       _theResult___snd_fst__h48974,
	       exp1__h73281,
	       exp2__h73282,
	       exp2_temp__h72334,
	       exp2_temp__h91424,
	       exponent2__h25029,
	       exponent2__h25382,
	       exponent3__h25032,
	       exponent3__h25047,
	       exponent_difference__h48894,
	       inst_spfm_add_sub_ff_stage2_34_BITS_45_TO_36_4_ETC___d441,
	       inst_spfpu_divider_rg_stage2_7_BITS_17_TO_8_56_ETC___d157,
	       lv_exponent___1__h10454,
	       lv_exponent___2__h10481,
	       lv_exponent__h10887,
	       lv_exponent__h73283,
	       lv_minuend__h48890,
	       lv_product_exponent___1__h21425,
	       lv_product_exponent___1__h25494,
	       lv_product_exponent___2__h25515,
	       lv_product_exponent__h21406,
	       lv_resultant_exponent___1__h65402,
	       lv_summed_exponent__h72335,
	       lv_summed_exponent__h91425,
	       resultant_exponent___1__h64597,
	       resultant_exponent___2__h64599,
	       resultant_exponent__h64575,
	       v__h10956,
	       x1_avValue_fst__h10352,
	       x__h25533,
	       x__h54231,
	       x__h72372,
	       x__h72376,
	       x__h73365,
	       x__h91462,
	       x__h91464,
	       x__h91466,
	       x__h92799,
	       y__h25532,
	       y__h72373,
	       y__h73364,
	       y__h73366,
	       y__h73367,
	       y__h76741,
	       y__h91463,
	       y_avValue_fst__h10299,
	       y_avValue_fst__h10331,
	       y_avValue_fst__h10350,
	       y_avValue_fst__h10878,
	       y_avValue_fst__h64554,
	       y_avValue_fst__h64567,
	       y_avValue_snd_snd_snd__h25467,
	       y_avValue_snd_snd_snd_snd_fst__h25427,
	       y_avValue_snd_snd_snd_snd_fst__h25450;
  wire [8 : 0] IF_IF_inst_spfpu_sqrt_rg_inter_stage_20_BITS_2_ETC__q4,
	       IF_IF_wr_operand1_whas__236_THEN_wr_operand1_w_ETC___d1754,
	       _theResult_____1_fst__h12880,
	       exponent___1__h80623,
	       exponent__h80496,
	       result_exponent___1__h12945,
	       result_exponent__h80514,
	       x__h80549,
	       x__h80551,
	       x__h80569,
	       x__h80625,
	       y__h80550,
	       y__h80570;
  wire [7 : 0] IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1514,
	       _theResult_____1_fst__h70593,
	       lv_exponent__h70334;
  wire [6 : 0] lv_zeros_on_left__h54130,
	       x__h14025,
	       x__h49034,
	       x__h64708,
	       x__h65651;
  wire [5 : 0] lsb_zeros___1__h21486,
	       lv_leading_zeros__h80502,
	       lv_zeros__h65712,
	       msb_zeros___1__h21427,
	       msb_zeros__h14358,
	       msb_zeros__h21402,
	       x__h25484,
	       x__h88104;
  wire [4 : 0] _theResult_____1_fst__h11039,
	       _theResult_____1_fst__h11048,
	       _theResult_____1_fst__h11057,
	       _theResult_____1_fst__h11111,
	       _theResult_____1_fst__h11130,
	       _theResult___fst__h93378,
	       fflags__h65187,
	       fflags__h90476,
	       lsb_zeros___1__h8299,
	       msb_zeros__h4233,
	       new_value_fflags__h92797,
	       x__h65673,
	       x__h73372,
	       x__h76742;
  wire [2 : 0] x__read__h437, x_wget__h426;
  wire [1 : 0] IF_0b0_CONCAT_IF_wr_operand1_whas__236_THEN_wr_ETC___d1450,
	       IF_IF_wr_operand1_whas__236_THEN_wr_operand1_w_ETC___d1724,
	       IF_wr_imm_whas__821_THEN_wr_imm_wget__822_ELSE_0___d1823,
	       _theResult_____2_snd__h48641,
	       _theResult____h71207,
	       lv_compare_result__h70848,
	       lv_result_is_infinity___1__h48642,
	       lv_result_is_infinity___1__h48673,
	       lv_result_is_infinity__h25379,
	       lv_result_is_zero___1__h25200,
	       lv_result_is_zero___1__h25315,
	       lv_result_is_zero__h25380,
	       v__h25183,
	       v__h25205,
	       v__h25287,
	       x__h64790,
	       y_avValue_snd_snd__h48615;
  wire IF_NOT_inst_spfpu_divider_rg_stage2_7_BITS_17__ETC___d246,
       IF_inst_spfm_add_sub_ff_stage3_81_BITS_178_TO__ETC___d953,
       IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1520,
       IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1521,
       IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1551,
       IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1777,
       IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1828,
       IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1833,
       IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1845,
       IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1849,
       IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1682,
       IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1685,
       INV_898_MINUS_IF_inst_spfm_add_sub_ff_stage2_3_ETC___d707,
       INV_898_MINUS_inst_spfpu_divider_rg_stage2_7_B_ETC___d213,
       NOT_0_CONCAT_inst_spfpu_divider_rg_stage2_7_BI_ETC___d225,
       NOT_IF_wr_operand1_whas__236_THEN_wr_operand1__ETC___d1792,
       NOT_inst_spfm_add_sub_ff_stage2_34_BIT_50_72_7_ETC___d602,
       _0_CONCAT_IF_IF_inst_spfm_add_sub_ff_stage3_81__ETC___d1118,
       _0_CONCAT_IF_IF_inst_spfm_add_sub_ff_stage3_81__ETC___d948,
       _0_CONCAT_inst_spfm_add_sub_ff_stage2_34_BITS_4_ETC___d453,
       _0_CONCAT_inst_spfpu_divider_rg_stage2_7_BITS_1_ETC___d160,
       _898_MINUS_IF_inst_spfm_add_sub_ff_stage2_34_BI_ETC___d459,
       _898_MINUS_inst_spfpu_divider_rg_stage2_7_BITS__ETC___d167,
       _theResult_____4__h54039,
       _theResult_____7__h10611,
       _theResult____h70327,
       exp3_is_zero__h25040,
       inst_spfm_add_sub_ff_stage2_34_BITS_45_TO_36_4_ETC___d442,
       inst_spfm_add_sub_ff_stage2_34_BITS_45_TO_36_4_ETC___d462,
       inst_spfm_add_sub_ff_stage2_34_BIT_46_86_XOR_i_ETC___d593,
       inst_spfm_add_sub_ff_stage2_34_BIT_46_86_XOR_i_ETC___d596,
       inst_spfm_add_sub_ff_stage3_81_BITS_178_TO_169_ETC___d787,
       inst_spfpu_divider_rg_stage2_7_BITS_17_TO_8_56_ETC___d158,
       lv_inexact__h64898,
       lv_inexact__h90318,
       lv_inf__h72206,
       lv_inf__h91276,
       lv_inv__h72207,
       lv_inv__h91277,
       lv_invalid__h89140,
       lv_op1_subnormal__h73203,
       lv_op2_subnormal__h73204,
       lv_op3_is_infinity__h25046,
       lv_result_is_invalid__h25377,
       lv_round_up___1__h10656,
       lv_round_up___1__h10758,
       lv_round_up___1__h10773,
       lv_round_up___1__h65037,
       lv_round_up___1__h65073,
       lv_round_up___1__h90340,
       lv_round_up___1__h90426,
       lv_round_up___1__h90442,
       lv_roundup___1__h12690,
       lv_roundup___1__h12823,
       lv_roundup___1__h12839,
       lv_roundup___1__h70366,
       lv_roundup___1__h70490,
       lv_roundup___1__h70506,
       lv_sticky___1__h21489,
       lv_sticky___1__h8302,
       lv_sticky__h12376,
       lv_sticky__h64896,
       lv_sticky__h90316,
       lv_zero__h72204,
       lv_zero__h89142,
       lv_zero__h91274,
       op3_is_subnormal__h25041,
       resultant_sign__h54041,
       sign2__h25028,
       sign3__h25031,
       start_fsr_BITS_7_TO_5_096_ULE_4___d2097,
       x1_avValue_snd_snd_fst__h90148,
       x__h10689,
       x__h10785,
       x__h10787,
       x__h11296,
       x__h12778,
       x__h12836,
       x__h12851,
       x__h12853,
       x__h48655,
       x__h48685,
       x__h48687,
       x__h48689,
       x__h48691,
       x__h48775,
       x__h54074,
       x__h54079,
       x__h65050,
       x__h65085,
       x__h70421,
       x__h70503,
       x__h70518,
       x__h70520,
       x__h80193,
       x__h80260,
       x__h80284,
       x__h80289,
       x__h90374,
       x__h90439,
       x__h90454,
       x__h92521,
       y__h10668,
       y__h10770,
       y__h10786,
       y__h12702,
       y__h12835,
       y__h12837,
       y__h25234,
       y__h48686,
       y__h48688,
       y__h54075,
       y__h54080,
       y__h65049,
       y__h65099,
       y__h70378,
       y__h70502,
       y__h70504,
       y__h73236,
       y__h73256,
       y__h90352,
       y__h90438,
       y_avValue_snd_snd_fst__h90144,
       y_avValue_snd_snd_fst__h90146;

  // actionvalue method _start
  assign _start = wr_result ;
  assign RDY__start = 1'd1 ;
  assign CAN_FIRE__start = 1'd1 ;
  assign WILL_FIRE__start = EN__start ;

  // actionvalue method exception
  assign exception =
	     { wr_exception[4],
	       CASE_wr_exception_BITS_3_TO_0_0_wr_exception_B_ETC__q1 } ;
  assign RDY_exception = 1'd1 ;
  assign CAN_FIRE_exception = 1'd1 ;
  assign WILL_FIRE_exception = EN_exception ;

  // rule RL_rl_give_inputs_to_fpu_int_to_fp
  assign CAN_FIRE_RL_rl_give_inputs_to_fpu_int_to_fp =
	     MUX_take_new_inputs$write_1__SEL_10 &&
	     (x__h65651 == 7'b1101000 || x__h65651 == 7'b1101001) &&
	     x__h65673 == 5'b10100 ;
  assign WILL_FIRE_RL_rl_give_inputs_to_fpu_int_to_fp =
	     CAN_FIRE_RL_rl_give_inputs_to_fpu_int_to_fp ;

  // rule RL_rl_get_output_from_fpu_int_to_fp
  assign CAN_FIRE_RL_rl_get_output_from_fpu_int_to_fp =
	     CAN_FIRE_RL_rl_give_inputs_to_fpu_int_to_fp ;
  assign WILL_FIRE_RL_rl_get_output_from_fpu_int_to_fp =
	     CAN_FIRE_RL_rl_give_inputs_to_fpu_int_to_fp ;

  // rule RL_rl_give_inputs_to_fpu_compare_min_max
  assign CAN_FIRE_RL_rl_give_inputs_to_fpu_compare_min_max =
	     MUX_take_new_inputs$write_1__SEL_10 &&
	     (x__h65651[6:2] == 5'b00101 || x__h65651[6:2] == 5'b10100) &&
	     x__h65673 == 5'b10100 ;
  assign WILL_FIRE_RL_rl_give_inputs_to_fpu_compare_min_max =
	     CAN_FIRE_RL_rl_give_inputs_to_fpu_compare_min_max ;

  // rule RL_rl_get_output_from_fpu_compare_min_max
  assign CAN_FIRE_RL_rl_get_output_from_fpu_compare_min_max =
	     CAN_FIRE_RL_rl_give_inputs_to_fpu_compare_min_max ;
  assign WILL_FIRE_RL_rl_get_output_from_fpu_compare_min_max =
	     CAN_FIRE_RL_rl_give_inputs_to_fpu_compare_min_max ;

  // rule RL_rl_give_inputs_to_fpu_sign_injection
  assign CAN_FIRE_RL_rl_give_inputs_to_fpu_sign_injection =
	     MUX_take_new_inputs$write_1__SEL_10 &&
	     x__h65651[6:2] == 5'b00100 &&
	     x__h65673 == 5'b10100 ;
  assign WILL_FIRE_RL_rl_give_inputs_to_fpu_sign_injection =
	     CAN_FIRE_RL_rl_give_inputs_to_fpu_sign_injection ;

  // rule RL_rl_get_output_from_spfpu_sign_injection
  assign CAN_FIRE_RL_rl_get_output_from_spfpu_sign_injection =
	     CAN_FIRE_RL_rl_give_inputs_to_fpu_sign_injection ;
  assign WILL_FIRE_RL_rl_get_output_from_spfpu_sign_injection =
	     CAN_FIRE_RL_rl_give_inputs_to_fpu_sign_injection ;

  // rule RL_rl_give_inputs_to_spfpu_divider
  assign CAN_FIRE_RL_rl_give_inputs_to_spfpu_divider =
	     MUX_take_new_inputs$write_1__SEL_10 &&
	     x__h65651[6:2] == 5'b00011 &&
	     x__h65673 == 5'b10100 ;
  assign WILL_FIRE_RL_rl_give_inputs_to_spfpu_divider =
	     CAN_FIRE_RL_rl_give_inputs_to_spfpu_divider ;

  // rule RL_rl_give_inputs_to_fp_to_int
  assign CAN_FIRE_RL_rl_give_inputs_to_fp_to_int =
	     MUX_take_new_inputs$write_1__SEL_10 &&
	     (x__h65651 == 7'b1100000 || x__h65651 == 7'b1100001) &&
	     x__h65673 == 5'b10100 ;
  assign WILL_FIRE_RL_rl_give_inputs_to_fp_to_int =
	     CAN_FIRE_RL_rl_give_inputs_to_fp_to_int ;

  // rule RL_rl_get_output_from_spfp_to_int
  assign CAN_FIRE_RL_rl_get_output_from_spfp_to_int =
	     CAN_FIRE_RL_rl_give_inputs_to_fp_to_int ;
  assign WILL_FIRE_RL_rl_get_output_from_spfp_to_int =
	     CAN_FIRE_RL_rl_give_inputs_to_fp_to_int ;

  // rule RL_rl_give_inputs_to_spfloating_classify
  assign CAN_FIRE_RL_rl_give_inputs_to_spfloating_classify =
	     MUX_take_new_inputs$write_1__SEL_10 &&
	     (x__h65651 == 7'b1110000 || x__h65651 == 7'b1110001) &&
	     x__read__h437 == 3'b001 &&
	     x__h65673 == 5'b10100 ;
  assign WILL_FIRE_RL_rl_give_inputs_to_spfloating_classify =
	     CAN_FIRE_RL_rl_give_inputs_to_spfloating_classify ;

  // rule RL_rl_get_output_from_spfclass
  assign CAN_FIRE_RL_rl_get_output_from_spfclass =
	     CAN_FIRE_RL_rl_give_inputs_to_spfloating_classify ;
  assign WILL_FIRE_RL_rl_get_output_from_spfclass =
	     CAN_FIRE_RL_rl_give_inputs_to_spfloating_classify ;

  // rule RL_rl_give_inputs_get_outputs_fmv
  assign CAN_FIRE_RL_rl_give_inputs_get_outputs_fmv =
	     MUX_take_new_inputs$write_1__SEL_10 &&
	     (x__h65651 == 7'b1110000 || x__h65651 == 7'b1111000) &&
	     x__read__h437 == 3'b0 &&
	     x__h65673 == 5'b10100 ;
  assign WILL_FIRE_RL_rl_give_inputs_get_outputs_fmv =
	     CAN_FIRE_RL_rl_give_inputs_get_outputs_fmv ;

  // rule RL_inst_spfpu_divider_int_div_stage_1
  assign CAN_FIRE_RL_inst_spfpu_divider_int_div_stage_1 =
	     inst_spfpu_divider_int_div_rg_state == 6'd1 ;
  assign WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 =
	     CAN_FIRE_RL_inst_spfpu_divider_int_div_stage_1 ;

  // rule RL_inst_spfpu_divider_int_div_recursive_stage
  assign CAN_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage =
	     inst_spfpu_divider_int_div_rg_state > 6'd1 &&
	     inst_spfpu_divider_int_div_rg_state <= 6'd12 ;
  assign WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage =
	     CAN_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage ;

  // rule RL_inst_spfpu_divider_int_div_end_stage
  assign CAN_FIRE_RL_inst_spfpu_divider_int_div_end_stage =
	     inst_spfpu_divider_int_div_rg_state == 6'd13 ;
  assign WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage =
	     CAN_FIRE_RL_inst_spfpu_divider_int_div_end_stage ;

  // rule RL_inst_spfpu_divider_rl_stage3
  assign CAN_FIRE_RL_inst_spfpu_divider_rl_stage3 =
	     inst_spfpu_divider_int_div_rg_state == 6'd13 &&
	     inst_spfpu_divider_rg_stage2[18] ;
  assign WILL_FIRE_RL_inst_spfpu_divider_rl_stage3 =
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage3 ;

  // rule RL_rl_get_output_from_spfpu_divider
  assign CAN_FIRE_RL_rl_get_output_from_spfpu_divider =
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage3 ;
  assign WILL_FIRE_RL_rl_get_output_from_spfpu_divider =
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage3 ;

  // rule RL_inst_spfpu_divider_rl_stage2
  assign CAN_FIRE_RL_inst_spfpu_divider_rl_stage2 =
	     inst_spfpu_divider_int_div_rg_state == 6'd0 &&
	     inst_spfpu_divider_rg_stage1[66] ;
  assign WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 =
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage2 ;

  // rule RL_inst_spfpu_divider_rg_stage1__dreg_update
  assign CAN_FIRE_RL_inst_spfpu_divider_rg_stage1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inst_spfpu_divider_rg_stage1__dreg_update = 1'd1 ;

  // rule RL_inst_spfpu_sqrt_rl_stage2
  assign CAN_FIRE_RL_inst_spfpu_sqrt_rl_stage2 =
	     inst_spfpu_sqrt_rg_state == 32'd1 ;
  assign WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 =
	     CAN_FIRE_RL_inst_spfpu_sqrt_rl_stage2 &&
	     !WILL_FIRE_RL_rl_give_inputs_to_spfpu_sqrt ;

  // rule RL_inst_spfpu_sqrt_rl_inter_stage
  assign CAN_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage =
	     inst_spfpu_sqrt_rg_state > 32'd1 &&
	     inst_spfpu_sqrt_rg_state < 32'd25 ;
  assign WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage =
	     CAN_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage &&
	     !WILL_FIRE_RL_rl_give_inputs_to_spfpu_sqrt ;

  // rule RL_rl_get_output_from_spfpu_sqrt
  assign CAN_FIRE_RL_rl_get_output_from_spfpu_sqrt =
	     inst_spfpu_sqrt_ff_final_out[37] ;
  assign WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt =
	     inst_spfpu_sqrt_ff_final_out[37] &&
	     !WILL_FIRE_RL_rl_give_inputs_to_spfpu_sqrt ;

  // rule RL_inst_spfpu_sqrt_rl_final_stage
  assign CAN_FIRE_RL_inst_spfpu_sqrt_rl_final_stage =
	     inst_spfpu_sqrt_rg_state == 32'd25 ;
  assign WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage =
	     CAN_FIRE_RL_inst_spfpu_sqrt_rl_final_stage &&
	     !WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt ;

  // rule RL_rl_give_inputs_to_spfpu_sqrt
  assign CAN_FIRE_RL_rl_give_inputs_to_spfpu_sqrt =
	     MUX_take_new_inputs$write_1__SEL_10 &&
	     x__h65651[6:2] == 5'b01011 &&
	     x__h65673 == 5'b10100 ;
  assign WILL_FIRE_RL_rl_give_inputs_to_spfpu_sqrt =
	     CAN_FIRE_RL_rl_give_inputs_to_spfpu_sqrt ;

  // rule RL_inst_spfm_add_sub_rl_stage_5_final_stage
  assign CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage =
	     inst_spfm_add_sub_ff_stage4[98] ;
  assign WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage ;

  // rule RL_rl_get_output_from_fm_add_sub
  assign CAN_FIRE_RL_rl_get_output_from_fm_add_sub =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage ;
  assign WILL_FIRE_RL_rl_get_output_from_fm_add_sub =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage ;

  // rule RL_wr_result__dreg_update
  assign CAN_FIRE_RL_wr_result__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wr_result__dreg_update = 1'd1 ;

  // rule RL_inst_spfm_add_sub_rl_stage_4
  assign CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_4 =
	     inst_spfm_add_sub_ff_stage3[181] ;
  assign WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_4 =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_4 ;

  // rule RL_inst_spfm_add_sub_rl_stage_3_after_integer_multiplier_stage
  assign CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_3_after_integer_multiplier_stage =
	     inst_spfm_add_sub_ff_stage2[180] ;
  assign WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_3_after_integer_multiplier_stage =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_3_after_integer_multiplier_stage ;

  // rule RL_inst_spfm_add_sub_rl_stage1_after_input_stage
  assign CAN_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage =
	     inst_spfm_add_sub_ff_input_register[100] ;
  assign WILL_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage ;

  // rule RL_rl_give_inputs_to_fpu_add_sub
  assign CAN_FIRE_RL_rl_give_inputs_to_fpu_add_sub =
	     MUX_take_new_inputs$write_1__SEL_10 &&
	     (x__h65651[6:2] == 5'b0 || x__h65651[6:2] == 5'b00001) &&
	     x__h65673 == 5'b10100 ;
  assign WILL_FIRE_RL_rl_give_inputs_to_fpu_add_sub =
	     CAN_FIRE_RL_rl_give_inputs_to_fpu_add_sub ;

  // rule RL_rl_give_inputs_to_spfloating_multiplier
  assign CAN_FIRE_RL_rl_give_inputs_to_spfloating_multiplier =
	     MUX_take_new_inputs$write_1__SEL_10 &&
	     x__h65651[6:2] == 5'b00010 &&
	     x__h65673 == 5'b10100 ;
  assign WILL_FIRE_RL_rl_give_inputs_to_spfloating_multiplier =
	     CAN_FIRE_RL_rl_give_inputs_to_spfloating_multiplier ;

  // rule RL_rl_give_inputs_to_fm_add_sub
  assign CAN_FIRE_RL_rl_give_inputs_to_fm_add_sub =
	     MUX_take_new_inputs$write_1__SEL_10 &&
	     (x__h65673 == 5'b10000 || x__h65673 == 5'b10001 ||
	      x__h65673 == 5'b10010 ||
	      x__h65673 == 5'b10011) ;
  assign WILL_FIRE_RL_rl_give_inputs_to_fm_add_sub =
	     CAN_FIRE_RL_rl_give_inputs_to_fm_add_sub ;

  // rule RL_inst_spfm_add_sub_mult_rg_state_counter__dreg_update
  assign CAN_FIRE_RL_inst_spfm_add_sub_mult_rg_state_counter__dreg_update =
	     1'd1 ;
  assign WILL_FIRE_RL_inst_spfm_add_sub_mult_rg_state_counter__dreg_update =
	     1'd1 ;

  // rule RL_wr_exception__dreg_update
  assign CAN_FIRE_RL_wr_exception__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wr_exception__dreg_update = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_inst_spfm_add_sub_ff_input_register$write_1__SEL_4 =
	     inst_spfm_add_sub_ff_input_register[100] &&
	     inst_spfm_add_sub_mult_rg_state_counter == 7'd1 ;
  assign MUX_inst_spfpu_divider_int_div_rg_inter_stage$write_1__SEL_1 =
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 ;
  assign MUX_inst_spfpu_divider_int_div_rg_state$write_1__SEL_1 =
	     WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 ;
  assign MUX_inst_spfpu_sqrt_ff_final_out$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_give_inputs_to_spfpu_sqrt &&
	     IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1777 ;
  assign MUX_inst_spfpu_sqrt_rg_inter_stage$write_1__SEL_1 =
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 ;
  assign MUX_inst_spfpu_sqrt_rg_state$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_give_inputs_to_spfpu_sqrt &&
	     NOT_IF_wr_operand1_whas__236_THEN_wr_operand1__ETC___d1792 ;
  assign MUX_take_new_inputs$write_1__SEL_10 =
	     EN__start &&
	     (_start_funct3 != 3'b111 ||
	      start_fsr_BITS_7_TO_5_096_ULE_4___d2097) &&
	     take_new_inputs &&
	     !wr_result[37] ;
  assign MUX_wr_result_1$wset_1__SEL_10 =
	     EN__start && _start_funct3 == 3'b111 &&
	     !start_fsr_BITS_7_TO_5_096_ULE_4___d2097 ;
  assign MUX_inst_spfm_add_sub_ff_input_register$write_1__VAL_1 =
	     { 1'd1,
	       x__h72493,
	       x__h91582,
	       lv_summed_exponent__h91425,
	       IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1551,
	       _operand3__h91734,
	       lv_inv__h91277,
	       lv_inf__h91276,
	       lv_zero__h91274,
	       x__read__h437,
	       x__h92521,
	       x__h65673[1],
	       1'd0 } ;
  assign MUX_inst_spfm_add_sub_ff_input_register$write_1__VAL_2 =
	     { 1'd1,
	       x__h72493,
	       x__h91582,
	       lv_summed_exponent__h91425,
	       IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1551,
	       32'd0,
	       lv_inv__h91277,
	       lv_inf__h91276,
	       lv_zero__h91274,
	       x__read__h437,
	       3'd5 } ;
  assign MUX_inst_spfm_add_sub_ff_input_register$write_1__VAL_3 =
	     { 25'd25165824,
	       x__h72493,
	       lv_summed_exponent__h72335,
	       x__read__h720[31],
	       IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243,
	       lv_inv__h72207,
	       lv_inf__h72206,
	       lv_zero__h72204,
	       x__read__h437,
	       x__h65651[2],
	       2'd0 } ;
  assign MUX_inst_spfm_add_sub_ff_input_register$write_1__VAL_4 =
	     { 1'd0,
	       100'hAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  } ;
  assign MUX_inst_spfm_add_sub_ff_stage2$write_1__VAL_1 =
	     { 1'd1,
	       final_result__h14094,
	       inst_spfm_add_sub_ff_input_register[6],
	       inst_spfm_add_sub_ff_input_register[8:7],
	       inst_spfm_add_sub_ff_input_register[1],
	       inst_spfm_add_sub_ff_input_register[2],
	       inst_spfm_add_sub_ff_input_register[41],
	       inst_spfm_add_sub_ff_input_register[51:42],
	       inst_spfm_add_sub_ff_input_register[40:9],
	       inst_spfm_add_sub_ff_input_register[5:3],
	       inst_spfm_add_sub_ff_input_register[0] } ;
  assign MUX_inst_spfm_add_sub_ff_stage2$write_1__VAL_2 =
	     { 1'd0,
	       180'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  } ;
  assign MUX_inst_spfm_add_sub_ff_stage3$write_1__VAL_1 =
	     { 1'd1,
	       sign2__h25028,
	       sign3__h25031,
	       exponent2__h25382,
	       exponent3__h25047,
	       mantissa2__h25383,
	       mantissa3__h25043,
	       inst_spfm_add_sub_ff_stage2[3:1],
	       inst_spfm_add_sub_ff_stage2[47],
	       inst_spfm_add_sub_ff_stage2[48],
	       lv_result_is_invalid__h25377,
	       lv_result_is_infinity__h25379,
	       lv_result_is_zero__h25380,
	       !inst_spfm_add_sub_ff_stage2_34_BITS_45_TO_36_4_ETC___d442 ||
	       inst_spfm_add_sub_ff_stage2[99] &&
	       inst_spfm_add_sub_ff_stage2[45:36] == 10'd254,
	       x__h48775,
	       inst_spfm_add_sub_ff_stage2[0] } ;
  assign MUX_inst_spfm_add_sub_ff_stage3$write_1__VAL_2 =
	     { 1'd0,
	       181'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  } ;
  assign MUX_inst_spfm_add_sub_ff_stage4$write_1__VAL_1 =
	     { 1'd1,
	       resultant_sign__h54041,
	       resultant_exponent__h64575,
	       resultant_mantissa__h64576,
	       inst_spfm_add_sub_ff_stage3[12:10],
	       inst_spfm_add_sub_ff_stage3[8:3],
	       x__h64790,
	       inst_spfm_add_sub_ff_stage3[2:0] } ;
  assign MUX_inst_spfm_add_sub_ff_stage4$write_1__VAL_2 =
	     { 1'd0,
	       98'h2AAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  } ;
  assign MUX_inst_spfpu_divider_int_div_rg_inter_stage$write_1__VAL_1 =
	     { inst_spfpu_divider_int_div_rg_inter_stage[82:56],
	       IF_inst_spfpu_divider_int_div_rg_inter_stage_3_ETC___d24[54] ?
		 IF_inst_spfpu_divider_int_div_rg_inter_stage_3_ETC__q6[55:1] :
		 IF_inst_spfpu_divider_int_div_rg_inter_stage_3_ETC__q7[55:1],
	       !IF_inst_spfpu_divider_int_div_rg_inter_stage_3_ETC___d24[54] } ;
  assign MUX_inst_spfpu_divider_int_div_rg_inter_stage$write_1__VAL_2 =
	     { _denominator__h3506,
	       _0_CONCAT_inst_spfpu_divider_rg_stage1_7_BITS_5_ETC___d77[55] ?
		 _0_CONCAT_inst_spfpu_divider_rg_stage1_7_BITS_5_ETC__q8[55:1] :
		 _0_CONCAT_inst_spfpu_divider_rg_stage1_7_BITS_5_ETC__q9[55:1],
	       !_0_CONCAT_inst_spfpu_divider_rg_stage1_7_BITS_5_ETC___d77[55] } ;
  assign MUX_inst_spfpu_divider_int_div_rg_state$write_1__VAL_1 =
	     inst_spfpu_divider_int_div_rg_state + 6'd1 ;
  assign MUX_inst_spfpu_divider_rg_stage2$write_1__VAL_1 =
	     { 1'd1,
	       inst_spfpu_divider_rg_stage1[65:56],
	       inst_spfpu_divider_rg_stage1[7],
	       inst_spfpu_divider_rg_stage1[5],
	       inst_spfpu_divider_rg_stage1[6],
	       inst_spfpu_divider_rg_stage1[4:0] } ;
  assign MUX_inst_spfpu_divider_rg_stage2$write_1__VAL_2 =
	     { 1'd0, 18'b101010101010101010 /* unspecified value */  } ;
  assign MUX_inst_spfpu_sqrt_ff_final_out$write_1__VAL_1 =
	     (x__read__h720[30:23] == 8'd255 &&
	      (x__read__h720[22:0] != 23'd0 || x__read__h720[31]) ||
	      x__read__h720[31] &&
	      (x__read__h720[30:23] == 8'd255 &&
	       x__read__h720[22:0] == 23'd0 ||
	       !IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1521)) ?
	       38'h2FF8000010 :
	       ((x__read__h720[30:23] == 8'd255 &&
		 x__read__h720[22:0] == 23'd0 &&
		 !x__read__h720[31]) ?
		  38'h2FF0000000 :
		  { 1'd1, final_result__h88560, 5'd0 }) ;
  assign MUX_inst_spfpu_sqrt_ff_final_out$write_1__VAL_2 =
	     { 1'd1, final_result__h12887, 5'd0 } ;
  assign MUX_inst_spfpu_sqrt_ff_final_out$write_1__VAL_3 =
	     { 1'd0, 37'h0AAAAAAAAA /* unspecified value */  } ;
  assign MUX_inst_spfpu_sqrt_rg_inter_stage$write_1__VAL_1 =
	     { mantissa__h11980,
	       result_mantissa__h11981,
	       inst_spfpu_sqrt_rg_inter_stage[67:58],
	       _theResult____h11978,
	       x__h12344,
	       inst_spfpu_sqrt_rg_inter_stage[2:0] } ;
  assign MUX_inst_spfpu_sqrt_rg_inter_stage$write_1__VAL_2 =
	     { mantissa__h88177,
	       result_mantissa__h88178,
	       result_exponent__h80514,
	       x__read__h720[31],
	       _theResult_____3__h87999,
	       IF_0_CONCAT_IF_IF_IF_wr_operand1_whas__236_THE_ETC___d1794,
	       x__read__h437 } ;
  assign MUX_inst_spfpu_sqrt_rg_state$write_1__VAL_1 =
	     inst_spfpu_sqrt_rg_state + 32'd1 ;
  assign MUX_wr_result_1$wset_1__VAL_1 =
	     { 1'd1, inst_spfm_add_sub_ff_final_out$wget } ;
  assign MUX_wr_result_1$wset_1__VAL_2 =
	     { 1'd1, inst_spfpu_sqrt_ff_final_out[36:0] } ;
  assign MUX_wr_result_1$wset_1__VAL_3 =
	     { 1'd1, inst_spfpu_divider_wr_final_out$wget } ;
  assign MUX_wr_result_1$wset_1__VAL_4 = { 1'd1, x__read__h720, 5'd0 } ;
  assign MUX_wr_result_1$wset_1__VAL_5 =
	     { 1'd1, inst_spfpu_fclass_ff_final_out$wget } ;
  assign MUX_wr_result_1$wset_1__VAL_6 =
	     { 1'd1, inst_spfp_to_int_wr_final_out$wget } ;
  assign MUX_wr_result_1$wset_1__VAL_7 =
	     { 1'd1, inst_spfpu_sign_injection_ff_final_out$wget } ;
  assign MUX_wr_result_1$wset_1__VAL_8 =
	     { 1'd1, inst_fpu_compare_min_max_ff_result$wget } ;
  assign MUX_wr_result_1$wset_1__VAL_9 =
	     { 1'd1, inst_fpu_int_to_fp_wr_final_out$wget } ;

  // inlined wires
  always@(inst_spfm_add_sub_ff_stage4 or
	  MUX_wr_result_1$wset_1__VAL_1 or
	  WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt or
	  MUX_wr_result_1$wset_1__VAL_2 or
	  WILL_FIRE_RL_rl_get_output_from_spfpu_divider or
	  MUX_wr_result_1$wset_1__VAL_3 or
	  WILL_FIRE_RL_rl_give_inputs_get_outputs_fmv or
	  MUX_wr_result_1$wset_1__VAL_4 or
	  WILL_FIRE_RL_rl_get_output_from_spfclass or
	  MUX_wr_result_1$wset_1__VAL_5 or
	  WILL_FIRE_RL_rl_get_output_from_spfp_to_int or
	  MUX_wr_result_1$wset_1__VAL_6 or
	  WILL_FIRE_RL_rl_get_output_from_spfpu_sign_injection or
	  MUX_wr_result_1$wset_1__VAL_7 or
	  WILL_FIRE_RL_rl_get_output_from_fpu_compare_min_max or
	  MUX_wr_result_1$wset_1__VAL_8 or
	  WILL_FIRE_RL_rl_get_output_from_fpu_int_to_fp or
	  MUX_wr_result_1$wset_1__VAL_9 or MUX_wr_result_1$wset_1__SEL_10)
  case (1'b1)
    inst_spfm_add_sub_ff_stage4[98]:
	wr_result_1$wget = MUX_wr_result_1$wset_1__VAL_1;
    WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt:
	wr_result_1$wget = MUX_wr_result_1$wset_1__VAL_2;
    WILL_FIRE_RL_rl_get_output_from_spfpu_divider:
	wr_result_1$wget = MUX_wr_result_1$wset_1__VAL_3;
    WILL_FIRE_RL_rl_give_inputs_get_outputs_fmv:
	wr_result_1$wget = MUX_wr_result_1$wset_1__VAL_4;
    WILL_FIRE_RL_rl_get_output_from_spfclass:
	wr_result_1$wget = MUX_wr_result_1$wset_1__VAL_5;
    WILL_FIRE_RL_rl_get_output_from_spfp_to_int:
	wr_result_1$wget = MUX_wr_result_1$wset_1__VAL_6;
    WILL_FIRE_RL_rl_get_output_from_spfpu_sign_injection:
	wr_result_1$wget = MUX_wr_result_1$wset_1__VAL_7;
    WILL_FIRE_RL_rl_get_output_from_fpu_compare_min_max:
	wr_result_1$wget = MUX_wr_result_1$wset_1__VAL_8;
    WILL_FIRE_RL_rl_get_output_from_fpu_int_to_fp:
	wr_result_1$wget = MUX_wr_result_1$wset_1__VAL_9;
    MUX_wr_result_1$wset_1__SEL_10: wr_result_1$wget = 38'h2000000000;
    default: wr_result_1$wget = 38'h2AAAAAAAAA /* unspecified value */ ;
  endcase
  assign wr_result_1$whas =
	     EN__start && _start_funct3 == 3'b111 &&
	     !start_fsr_BITS_7_TO_5_096_ULE_4___d2097 ||
	     WILL_FIRE_RL_rl_get_output_from_fpu_int_to_fp ||
	     WILL_FIRE_RL_rl_get_output_from_fpu_compare_min_max ||
	     WILL_FIRE_RL_rl_get_output_from_spfpu_sign_injection ||
	     WILL_FIRE_RL_rl_get_output_from_spfpu_divider ||
	     WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt ||
	     WILL_FIRE_RL_rl_get_output_from_spfp_to_int ||
	     inst_spfm_add_sub_ff_stage4[98] ||
	     WILL_FIRE_RL_rl_get_output_from_spfclass ||
	     WILL_FIRE_RL_rl_give_inputs_get_outputs_fmv ;
  assign inst_fpu_compare_min_max_ff_result$wget =
	     x__h65651[2] ?
	       { IF_NOT_IF_wr_funct3_whas__346_THEN_wr_funct3_w_ETC___d1464,
		 5'd0 } :
	       IF_IF_wr_operand2_whas__241_THEN_wr_operand2_w_ETC___d1498 ;
  assign inst_fpu_int_to_fp_wr_final_out$wget =
	     { new_value_final_result__h65729, 5'd0 } ;
  assign inst_spfpu_sign_injection_ff_final_out$wget =
	     { new_value_final_result__h72698, 5'd0 } ;
  assign inst_spfpu_divider_int_div_wr_final_out$wget =
	     { inst_spfpu_divider_int_div_rg_inter_stage[82:56],
	       IF_IF_inst_spfpu_divider_int_div_rg_inter_stag_ETC___d55 } ;
  assign inst_spfpu_divider_wr_final_out$wget =
	     inst_spfpu_divider_rg_stage2[6] ?
	       { lv_final_output__h11017, 5'd0 } :
	       (inst_spfpu_divider_rg_stage2[5] ?
		  37'h0FF8000010 :
		  { _theResult_____1_snd__h11040,
		    _theResult_____1_fst__h11039 }) ;
  assign inst_spfpu_divider_rg_stage1_1$wget =
	     { 1'd1,
	       lv_exponent__h73283,
	       x__h80136,
	       x__h80164,
	       IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1551,
	       x__h80193,
	       x__h80260,
	       x__h80284,
	       x__h80289,
	       x__read__h437 } ;
  assign inst_spfp_to_int_wr_final_out$wget =
	     { new_value_final_result__h90492, fflags__h90476 } ;
  assign inst_spfm_add_sub_ff_final_out$wget =
	     { _theResult_____1__h65186, fflags__h65187 } ;
  assign inst_spfpu_fclass_ff_final_out$wget =
	     { new_value_final_result__h92796, new_value_fflags__h92797 } ;

  // register inst_spfm_add_sub_ff_input_register
  always@(WILL_FIRE_RL_rl_give_inputs_to_fm_add_sub or
	  MUX_inst_spfm_add_sub_ff_input_register$write_1__VAL_1 or
	  WILL_FIRE_RL_rl_give_inputs_to_spfloating_multiplier or
	  MUX_inst_spfm_add_sub_ff_input_register$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_give_inputs_to_fpu_add_sub or
	  MUX_inst_spfm_add_sub_ff_input_register$write_1__VAL_3 or
	  MUX_inst_spfm_add_sub_ff_input_register$write_1__SEL_4 or
	  MUX_inst_spfm_add_sub_ff_input_register$write_1__VAL_4)
  case (1'b1)
    WILL_FIRE_RL_rl_give_inputs_to_fm_add_sub:
	inst_spfm_add_sub_ff_input_register$D_IN =
	    MUX_inst_spfm_add_sub_ff_input_register$write_1__VAL_1;
    WILL_FIRE_RL_rl_give_inputs_to_spfloating_multiplier:
	inst_spfm_add_sub_ff_input_register$D_IN =
	    MUX_inst_spfm_add_sub_ff_input_register$write_1__VAL_2;
    WILL_FIRE_RL_rl_give_inputs_to_fpu_add_sub:
	inst_spfm_add_sub_ff_input_register$D_IN =
	    MUX_inst_spfm_add_sub_ff_input_register$write_1__VAL_3;
    MUX_inst_spfm_add_sub_ff_input_register$write_1__SEL_4:
	inst_spfm_add_sub_ff_input_register$D_IN =
	    MUX_inst_spfm_add_sub_ff_input_register$write_1__VAL_4;
    default: inst_spfm_add_sub_ff_input_register$D_IN =
		 101'h0AAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
  endcase
  assign inst_spfm_add_sub_ff_input_register$EN =
	     inst_spfm_add_sub_ff_input_register[100] &&
	     inst_spfm_add_sub_mult_rg_state_counter == 7'd1 ||
	     WILL_FIRE_RL_rl_give_inputs_to_fpu_add_sub ||
	     WILL_FIRE_RL_rl_give_inputs_to_spfloating_multiplier ||
	     WILL_FIRE_RL_rl_give_inputs_to_fm_add_sub ;

  // register inst_spfm_add_sub_ff_stage2
  assign inst_spfm_add_sub_ff_stage2$D_IN =
	     MUX_inst_spfm_add_sub_ff_input_register$write_1__SEL_4 ?
	       MUX_inst_spfm_add_sub_ff_stage2$write_1__VAL_1 :
	       MUX_inst_spfm_add_sub_ff_stage2$write_1__VAL_2 ;
  assign inst_spfm_add_sub_ff_stage2$EN =
	     inst_spfm_add_sub_ff_input_register[100] &&
	     inst_spfm_add_sub_mult_rg_state_counter == 7'd1 ||
	     inst_spfm_add_sub_ff_stage2[180] ;

  // register inst_spfm_add_sub_ff_stage3
  assign inst_spfm_add_sub_ff_stage3$D_IN =
	     inst_spfm_add_sub_ff_stage2[180] ?
	       MUX_inst_spfm_add_sub_ff_stage3$write_1__VAL_1 :
	       MUX_inst_spfm_add_sub_ff_stage3$write_1__VAL_2 ;
  assign inst_spfm_add_sub_ff_stage3$EN =
	     inst_spfm_add_sub_ff_stage3[181] ||
	     inst_spfm_add_sub_ff_stage2[180] ;

  // register inst_spfm_add_sub_ff_stage4
  assign inst_spfm_add_sub_ff_stage4$D_IN =
	     inst_spfm_add_sub_ff_stage3[181] ?
	       MUX_inst_spfm_add_sub_ff_stage4$write_1__VAL_1 :
	       MUX_inst_spfm_add_sub_ff_stage4$write_1__VAL_2 ;
  assign inst_spfm_add_sub_ff_stage4$EN =
	     inst_spfm_add_sub_ff_stage4[98] ||
	     inst_spfm_add_sub_ff_stage3[181] ;

  // register inst_spfm_add_sub_mult_partial_prod
  assign inst_spfm_add_sub_mult_partial_prod$D_IN =
	     (inst_spfm_add_sub_mult_rg_state_counter == 7'd0) ?
	       x__h13784 :
	       temp1__h13771 ;
  assign inst_spfm_add_sub_mult_partial_prod$EN =
	     inst_spfm_add_sub_ff_input_register[100] &&
	     inst_spfm_add_sub_mult_rg_state_counter != 7'd1 ;

  // register inst_spfm_add_sub_mult_rg_state_counter
  assign inst_spfm_add_sub_mult_rg_state_counter$D_IN =
	     inst_spfm_add_sub_ff_input_register[100] ? x__h13547 : 7'd0 ;
  assign inst_spfm_add_sub_mult_rg_state_counter$EN = 1'd1 ;

  // register inst_spfpu_divider_int_div_rg_inter_stage
  assign inst_spfpu_divider_int_div_rg_inter_stage$D_IN =
	     MUX_inst_spfpu_divider_int_div_rg_inter_stage$write_1__SEL_1 ?
	       MUX_inst_spfpu_divider_int_div_rg_inter_stage$write_1__VAL_1 :
	       MUX_inst_spfpu_divider_int_div_rg_inter_stage$write_1__VAL_2 ;
  assign inst_spfpu_divider_int_div_rg_inter_stage$EN =
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 ||
	     WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 ;

  // register inst_spfpu_divider_int_div_rg_state
  assign inst_spfpu_divider_int_div_rg_state$D_IN =
	     MUX_inst_spfpu_divider_int_div_rg_state$write_1__SEL_1 ?
	       MUX_inst_spfpu_divider_int_div_rg_state$write_1__VAL_1 :
	       6'd0 ;
  assign inst_spfpu_divider_int_div_rg_state$EN =
	     WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage ;

  // register inst_spfpu_divider_rg_stage1
  assign inst_spfpu_divider_rg_stage1$D_IN =
	     { CAN_FIRE_RL_rl_give_inputs_to_spfpu_divider &&
	       inst_spfpu_divider_rg_stage1_1$wget[66],
	       inst_spfpu_divider_rg_stage1_1$wget[65:0] } ;
  assign inst_spfpu_divider_rg_stage1$EN = 1'd1 ;

  // register inst_spfpu_divider_rg_stage2
  assign inst_spfpu_divider_rg_stage2$D_IN =
	     WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 ?
	       MUX_inst_spfpu_divider_rg_stage2$write_1__VAL_1 :
	       MUX_inst_spfpu_divider_rg_stage2$write_1__VAL_2 ;
  assign inst_spfpu_divider_rg_stage2$EN =
	     WILL_FIRE_RL_inst_spfpu_divider_rl_stage3 ||
	     WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 ;

  // register inst_spfpu_sqrt_ff_final_out
  always@(MUX_inst_spfpu_sqrt_ff_final_out$write_1__SEL_1 or
	  MUX_inst_spfpu_sqrt_ff_final_out$write_1__VAL_1 or
	  WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage or
	  MUX_inst_spfpu_sqrt_ff_final_out$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt or
	  MUX_inst_spfpu_sqrt_ff_final_out$write_1__VAL_3)
  case (1'b1)
    MUX_inst_spfpu_sqrt_ff_final_out$write_1__SEL_1:
	inst_spfpu_sqrt_ff_final_out$D_IN =
	    MUX_inst_spfpu_sqrt_ff_final_out$write_1__VAL_1;
    WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage:
	inst_spfpu_sqrt_ff_final_out$D_IN =
	    MUX_inst_spfpu_sqrt_ff_final_out$write_1__VAL_2;
    WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt:
	inst_spfpu_sqrt_ff_final_out$D_IN =
	    MUX_inst_spfpu_sqrt_ff_final_out$write_1__VAL_3;
    default: inst_spfpu_sqrt_ff_final_out$D_IN =
		 38'h2AAAAAAAAA /* unspecified value */ ;
  endcase
  assign inst_spfpu_sqrt_ff_final_out$EN =
	     WILL_FIRE_RL_rl_give_inputs_to_spfpu_sqrt &&
	     IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1777 ||
	     WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage ;

  // register inst_spfpu_sqrt_rg_inter_stage
  assign inst_spfpu_sqrt_rg_inter_stage$D_IN =
	     MUX_inst_spfpu_sqrt_rg_inter_stage$write_1__SEL_1 ?
	       MUX_inst_spfpu_sqrt_rg_inter_stage$write_1__VAL_1 :
	       MUX_inst_spfpu_sqrt_rg_inter_stage$write_1__VAL_2 ;
  assign inst_spfpu_sqrt_rg_inter_stage$EN =
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 ||
	     WILL_FIRE_RL_rl_give_inputs_to_spfpu_sqrt ;

  // register inst_spfpu_sqrt_rg_state
  always@(MUX_inst_spfpu_sqrt_rg_state$write_1__SEL_1 or
	  MUX_inst_spfpu_sqrt_rg_state$write_1__VAL_1 or
	  WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt or
	  WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage or
	  WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2)
  case (1'b1)
    MUX_inst_spfpu_sqrt_rg_state$write_1__SEL_1:
	inst_spfpu_sqrt_rg_state$D_IN =
	    MUX_inst_spfpu_sqrt_rg_state$write_1__VAL_1;
    WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt:
	inst_spfpu_sqrt_rg_state$D_IN = 32'd0;
    WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage:
	inst_spfpu_sqrt_rg_state$D_IN =
	    MUX_inst_spfpu_sqrt_rg_state$write_1__VAL_1;
    WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2:
	inst_spfpu_sqrt_rg_state$D_IN =
	    MUX_inst_spfpu_sqrt_rg_state$write_1__VAL_1;
    default: inst_spfpu_sqrt_rg_state$D_IN =
		 32'hAAAAAAAA /* unspecified value */ ;
  endcase
  assign inst_spfpu_sqrt_rg_state$EN =
	     WILL_FIRE_RL_rl_give_inputs_to_spfpu_sqrt &&
	     NOT_IF_wr_operand1_whas__236_THEN_wr_operand1__ETC___d1792 ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 ||
	     WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt ;

  // register take_new_inputs
  assign take_new_inputs$D_IN =
	     inst_spfm_add_sub_ff_stage4[98] ||
	     WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt ||
	     WILL_FIRE_RL_rl_get_output_from_spfpu_divider ||
	     WILL_FIRE_RL_rl_give_inputs_get_outputs_fmv ||
	     WILL_FIRE_RL_rl_get_output_from_spfclass ||
	     WILL_FIRE_RL_rl_get_output_from_spfp_to_int ||
	     WILL_FIRE_RL_rl_get_output_from_spfpu_sign_injection ||
	     WILL_FIRE_RL_rl_get_output_from_fpu_compare_min_max ||
	     WILL_FIRE_RL_rl_get_output_from_fpu_int_to_fp ;
  assign take_new_inputs$EN =
	     MUX_take_new_inputs$write_1__SEL_10 ||
	     WILL_FIRE_RL_rl_give_inputs_get_outputs_fmv ||
	     WILL_FIRE_RL_rl_get_output_from_spfclass ||
	     inst_spfm_add_sub_ff_stage4[98] ||
	     WILL_FIRE_RL_rl_get_output_from_spfp_to_int ||
	     WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt ||
	     WILL_FIRE_RL_rl_get_output_from_spfpu_divider ||
	     WILL_FIRE_RL_rl_get_output_from_spfpu_sign_injection ||
	     WILL_FIRE_RL_rl_get_output_from_fpu_compare_min_max ||
	     WILL_FIRE_RL_rl_get_output_from_fpu_int_to_fp ;

  // register wr_exception
  assign wr_exception$D_IN = { MUX_wr_result_1$wset_1__SEL_10, 4'b0010 } ;
  assign wr_exception$EN = 1'd1 ;

  // register wr_result
  assign wr_result$D_IN =
	     { wr_result_1$whas && wr_result_1$wget[37],
	       wr_result_1$wget[36:0] } ;
  assign wr_result$EN = 1'd1 ;

  // remaining internal signals
  assign IF_0_CONCAT_IF_IF_IF_wr_operand1_whas__236_THE_ETC___d1794 =
	     _theResult_____3__h87999[28] ? 26'd0 : 26'd1 ;
  assign IF_0b0_CONCAT_IF_wr_operand1_whas__236_THEN_wr_ETC___d1450 =
	     (_theResult____h70827 < _theResult_____5__h70832) ?
	       2'b01 :
	       ((x__read__h720[22:0] ==
		 IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[22:0]) ?
		  2'b11 :
		  2'b10) ;
  assign IF_IF_0_CONCAT_IF_IF_IF_wr_operand1_whas__236__ETC__q11 =
	     IF_0_CONCAT_IF_IF_IF_wr_operand1_whas__236_THE_ETC___d1794[0] ?
	       26'd1 :
	       26'd0 ;
  assign IF_IF_IF_inst_spfm_add_sub_ff_stage4_146_BITS__ETC___d1195 =
	     (_theResult_____4__h65149[24] ||
	      inst_spfm_add_sub_ff_stage4[86:85] == 2'b0 &&
	      _theResult_____4__h65149[23]) ?
	       lv_resultant_exponent___1__h65402 :
	       inst_spfm_add_sub_ff_stage4[96:87] ;
  assign IF_IF_IF_inst_spfpu_divider_rg_stage2_7_BITS_2_ETC___d276 =
	     _theResult_____4__h10613[24] ?
	       y_avValue_snd__h10879 :
	       _theResult_____4__h10613 ;
  assign IF_IF_IF_wr_operand1_whas__236_THEN_wr_operand_ETC___d1490 =
	     (lv_compare_result__h70848 == 2'b01 &&
	      (x__read__h720[30:23] != 8'd0 || x__read__h720[22:0] != 23'd0 ||
	       IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[30:23] !=
	       8'd0 ||
	       IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[22:0] !=
	       23'd0)) ?
	       32'd1 :
	       32'd0 ;
  assign IF_IF_IF_wr_operand1_whas__236_THEN_wr_operand_ETC___d1493 =
	     (lv_compare_result__h70848[0] ||
	      x__read__h720[30:23] == 8'd0 && x__read__h720[22:0] == 23'd0 &&
	      IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[30:23] ==
	      8'd0 &&
	      IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[22:0] ==
	      23'd0) ?
	       32'd1 :
	       32'd0 ;
  assign IF_IF_IF_wr_operand1_whas__236_THEN_wr_operand_ETC___d1766 =
	     IF_IF_wr_operand1_whas__236_THEN_wr_operand1_w_ETC___d1754[0] ?
	       mantissa__h80503 :
	       mantissa___1__h88101 ;
  assign IF_IF_inst_spfpu_divider_int_div_rg_inter_stag_ETC___d55 =
	     IF_inst_spfpu_divider_int_div_rg_inter_stage_3_ETC___d24[54] ?
	       { _remainder___1__h2962, _dividend___1__h2963 } :
	       { IF_inst_spfpu_divider_int_div_rg_inter_stage_3_ETC___d24[54:26],
		 _dividend__h2715 } ;
  assign IF_IF_inst_spfpu_sqrt_rg_inter_stage_20_BITS_2_ETC__q4 =
	     IF_inst_spfpu_sqrt_rg_inter_stage_20_BITS_2_TO_ETC___d375 ?
	       _theResult_____1_fst__h12880 :
	       inst_spfpu_sqrt_rg_inter_stage[67:59] ;
  assign IF_IF_wr_imm_whas__821_THEN_wr_imm_wget__822_E_ETC___d1905 =
	     (IF_wr_imm_whas__821_THEN_wr_imm_wget__822_ELSE_0___d1823[0] &&
	      x__read__h720[31] ||
	      lv_zero__h89142) ?
	       32'd0 :
	       _theResult_____2__h90320 ;
  assign IF_IF_wr_operand1_whas__236_THEN_wr_operand1_w_ETC___d1724 =
	     (x__read__h720[30:23] == 8'd0 && x__read__h720[22:0] != 23'd0) ?
	       2'd0 :
	       2'd1 ;
  assign IF_IF_wr_operand1_whas__236_THEN_wr_operand1_w_ETC___d1754 =
	     x__h80569 - y__h80570 ;
  assign IF_IF_wr_operand2_whas__241_THEN_wr_operand2_w_ETC___d1498 =
	     (IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[30:23] ==
	      8'd255 &&
	      IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[22:0] !=
	      23'd0 ||
	      x__read__h720[30:23] == 8'd255 &&
	      x__read__h720[22:0] != 23'd0) ?
	       37'd16 :
	       { IF_IF_wr_funct3_whas__346_THEN_wr_funct3_wget__ETC___d1496,
		 5'd0 } ;
  assign IF_NOT_IF_NOT_IF_wr_operand2_whas__241_THEN_wr_ETC___d1420 =
	     (!_theResult____h65711[31] && !_theResult____h65711[30] &&
	      !_theResult____h65711[29] &&
	      !_theResult____h65711[28] &&
	      !_theResult____h65711[27] &&
	      !_theResult____h65711[26] &&
	      !_theResult____h65711[25] &&
	      !_theResult____h65711[24] &&
	      !_theResult____h65711[23] &&
	      !_theResult____h65711[22] &&
	      !_theResult____h65711[21] &&
	      !_theResult____h65711[20] &&
	      !_theResult____h65711[19] &&
	      !_theResult____h65711[18] &&
	      !_theResult____h65711[17] &&
	      !_theResult____h65711[16] &&
	      !_theResult____h65711[15] &&
	      !_theResult____h65711[14] &&
	      !_theResult____h65711[13] &&
	      !_theResult____h65711[12] &&
	      !_theResult____h65711[11] &&
	      !_theResult____h65711[10] &&
	      !_theResult____h65711[9] &&
	      !_theResult____h65711[8] &&
	      !_theResult____h65711[7] &&
	      !_theResult____h65711[6] &&
	      !_theResult____h65711[5] &&
	      !_theResult____h65711[4] &&
	      !_theResult____h65711[3] &&
	      !_theResult____h65711[2] &&
	      !_theResult____h65711[1] &&
	      !_theResult____h65711[0]) ?
	       31'd0 :
	       { lv_exponent__h70334, x__h70602[22:0] } ;
  assign IF_NOT_IF_inst_spfpu_divider_rg_stage2_7_BITS__ETC___d290 =
	     (!lv_quotient__h10359[26] &&
	      IF_IF_IF_inst_spfpu_divider_rg_stage2_7_BITS_2_ETC___d276[23]) ?
	       v__h10956 :
	       lv_exponent__h10887 ;
  assign IF_NOT_IF_wr_funct3_whas__346_THEN_wr_funct3_w_ETC___d1464 =
	     (!x__read__h437[0] && lv_compare_result__h70848 == 2'b01 ||
	      x__read__h437[0] && lv_compare_result__h70848 == 2'b10) ?
	       x__read__h720 :
	       IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243 ;
  assign IF_NOT_IF_wr_operand2_whas__241_THEN_wr_operan_ETC___d1382 =
	     _theResult____h65711 << lv_zeros__h65712 ;
  assign IF_NOT_inst_spfm_add_sub_ff_stage2_34_BITS_45__ETC___d725 =
	     (!inst_spfm_add_sub_ff_stage2_34_BITS_45_TO_36_4_ETC___d442 ||
	      inst_spfm_add_sub_ff_stage2[99] &&
	      inst_spfm_add_sub_ff_stage2[45:36] == 10'd254) ?
	       lv_product_mantissa__h14220 :
	       y_avValue_snd_snd_snd_fst__h25422 ;
  assign IF_NOT_inst_spfpu_divider_rg_stage2_7_BITS_17__ETC___d246 =
	     (!inst_spfpu_divider_rg_stage2_7_BITS_17_TO_8_56_ETC___d158 ||
	      _0_CONCAT_inst_spfpu_divider_rg_stage2_7_BITS_1_ETC___d160 ||
	      _898_MINUS_inst_spfpu_divider_rg_stage2_7_BITS__ETC___d167) ?
	       inst_spfpu_divider_int_div_wr_final_out$wget[0] :
	       lv_sticky___1__h8302 ;
  assign IF_NOT_inst_spfpu_divider_rg_stage2_7_BITS_17__ETC___d302 =
	     (!inst_spfpu_divider_rg_stage2_7_BITS_17_TO_8_56_ETC___d158 ||
	      IF_NOT_IF_inst_spfpu_divider_rg_stage2_7_BITS__ETC___d290[7:0] ==
	      8'd255) ?
	       ((inst_spfpu_divider_rg_stage2[2:0] == 3'b001 ||
		 inst_spfpu_divider_rg_stage2[2:0] == 3'b010 &&
		 !inst_spfpu_divider_rg_stage2[7] ||
		 inst_spfpu_divider_rg_stage2[2:0] == 3'b011 &&
		 inst_spfpu_divider_rg_stage2[7]) ?
		  31'h7F7FFFFF :
		  31'h7F800000) :
	       { IF_NOT_IF_inst_spfpu_divider_rg_stage2_7_BITS__ETC___d290[7:0],
		 IF_IF_IF_inst_spfpu_divider_rg_stage2_7_BITS_2_ETC___d276[22:0] } ;
  assign IF_inst_spfm_add_sub_ff_stage2_34_BIT_99_44_TH_ETC___d465 =
	     lv_product_mantissa__h21404 >>
	     _898_MINUS_IF_inst_spfm_add_sub_ff_stage2_34_BI_ETC___d458 ;
  assign IF_inst_spfm_add_sub_ff_stage3_81_BITS_178_TO__ETC___d1117 =
	     lv_minuend__h48890 - 10'd1 ;
  assign IF_inst_spfm_add_sub_ff_stage3_81_BITS_178_TO__ETC___d794 =
	     mantissa_to_shift__h48893 >> exponent_difference__h48894 ;
  assign IF_inst_spfm_add_sub_ff_stage3_81_BITS_178_TO__ETC___d953 =
	     lv_mantissa2__h48900 <= lv_mantissa3__h48901 ;
  assign IF_inst_spfm_add_sub_ff_stage4_146_BIT_2_186_O_ETC___d1211 =
	     (inst_spfm_add_sub_ff_stage4[2] ||
	      IF_IF_IF_inst_spfm_add_sub_ff_stage4_146_BITS__ETC___d1195[7:0] ==
	      8'd255) ?
	       ((inst_spfm_add_sub_ff_stage4[13:11] == 3'b001 ||
		 inst_spfm_add_sub_ff_stage4[13:11] == 3'b010 &&
		 !inst_spfm_add_sub_ff_stage4[97] ||
		 inst_spfm_add_sub_ff_stage4[13:11] == 3'b011 &&
		 inst_spfm_add_sub_ff_stage4[97]) ?
		  31'h7F7FFFFF :
		  31'h7F800000) :
	       { IF_IF_IF_inst_spfm_add_sub_ff_stage4_146_BITS__ETC___d1195[7:0],
		 IF_theResult_____45149_BIT_24_THEN_lv_rounded__ETC__q5[22:0] } ;
  assign IF_inst_spfm_add_sub_ff_stage4_146_BIT_7_177_T_ETC___d1215 =
	     inst_spfm_add_sub_ff_stage4[7] ?
	       lv_final_output__h65243 :
	       (inst_spfm_add_sub_ff_stage4[5] ?
		  lv_final_output__h65287 :
		  (inst_spfm_add_sub_ff_stage4[3] ?
		     lv_final_output__h65331 :
		     { inst_spfm_add_sub_ff_stage4[97],
		       IF_inst_spfm_add_sub_ff_stage4_146_BIT_2_186_O_ETC___d1211 })) ;
  assign IF_inst_spfpu_divider_int_div_rg_inter_stage_3_ETC___d24 =
	     inst_spfpu_divider_int_div_rg_inter_stage[55] ?
	       inst_spfpu_divider_int_div_rg_inter_stage_BITS_ETC__q2[55:1] :
	       inst_spfpu_divider_int_div_rg_inter_stage_BITS_ETC__q3[55:1] ;
  assign IF_inst_spfpu_divider_int_div_rg_inter_stage_3_ETC__q6 =
	     { IF_inst_spfpu_divider_int_div_rg_inter_stage_3_ETC___d24[53:0],
	       !inst_spfpu_divider_int_div_rg_inter_stage[55],
	       1'd0 } +
	     { 1'b0,
	       inst_spfpu_divider_int_div_rg_inter_stage[82:56],
	       28'd0 } ;
  assign IF_inst_spfpu_divider_int_div_rg_inter_stage_3_ETC__q7 =
	     { IF_inst_spfpu_divider_int_div_rg_inter_stage_3_ETC___d24[53:0],
	       !inst_spfpu_divider_int_div_rg_inter_stage[55],
	       1'd0 } -
	     { 1'b0,
	       inst_spfpu_divider_int_div_rg_inter_stage[82:56],
	       28'd0 } ;
  assign IF_inst_spfpu_divider_rg_stage2_7_BITS_17_TO_8_ETC___d303 =
	     (inst_spfpu_divider_rg_stage2_7_BITS_17_TO_8_56_ETC___d158 &&
	      _0_CONCAT_inst_spfpu_divider_rg_stage2_7_BITS_1_ETC___d160) ?
	       { 8'd0,
		 IF_IF_IF_inst_spfpu_divider_rg_stage2_7_BITS_2_ETC___d276[22:0] } :
	       IF_NOT_inst_spfpu_divider_rg_stage2_7_BITS_17__ETC___d302 ;
  assign IF_theResult_____45149_BIT_24_THEN_lv_rounded__ETC__q5 =
	     _theResult_____4__h65149[24] ?
	       lv_rounded_mantissa__h65403 :
	       _theResult_____4__h65149 ;
  assign IF_wr_imm_whas__821_THEN_wr_imm_wget__822_ELSE_0___d1823 =
	     MUX_take_new_inputs$write_1__SEL_10 ?
	       _start_immediate_value :
	       2'd0 ;
  assign IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1514 =
	     x__read__h720[30:23] - 8'd127 ;
  assign IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1520 =
	     x__read__h720[30:23] == 8'd255 & x__read__h720[22:0] == 23'd0 ;
  assign IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1521 =
	     x__read__h720[22:0] == 23'd0 & x__read__h720[30:23] == 8'd0 ;
  assign IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1551 =
	     x__read__h720[31] ^
	     IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[31] ;
  assign IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1777 =
	     x__read__h720[30:23] == 8'd255 && x__read__h720[22:0] != 23'd0 ||
	     x__read__h720[31] ||
	     x__read__h720[30:23] == 8'd255 && x__read__h720[22:0] == 23'd0 ||
	     (x__read__h720[30:23] != 8'd255 ||
	      x__read__h720[22:0] != 23'd0) &&
	     IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1521 ;
  assign IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1828 =
	     IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1514 <
	     8'd64 ;
  assign IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1833 =
	     IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1514 <
	     8'd63 ;
  assign IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1845 =
	     IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1514 <
	     8'd32 ;
  assign IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1849 =
	     IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1514 <
	     8'd31 ;
  assign IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243 =
	     MUX_take_new_inputs$write_1__SEL_10 ? _start_operand2 : 32'd0 ;
  assign IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1682 =
	     IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[30:23] ==
	     8'd255 &
	     IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[22:0] ==
	     23'd0 ;
  assign IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1685 =
	     IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[22:0] ==
	     23'd0 &
	     IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[30:23] ==
	     8'd0 ;
  assign INV_898_MINUS_IF_inst_spfm_add_sub_ff_stage2_3_ETC___d704 =
	     ~_898_MINUS_IF_inst_spfm_add_sub_ff_stage2_34_BI_ETC___d458 +
	     10'd1 ;
  assign INV_898_MINUS_IF_inst_spfm_add_sub_ff_stage2_3_ETC___d707 =
	     INV_898_MINUS_IF_inst_spfm_add_sub_ff_stage2_3_ETC___d704 <
	     { 4'd0, x__h25484 } ;
  assign INV_898_MINUS_inst_spfpu_divider_rg_stage2_7_B_ETC___d211 =
	     ~_898_MINUS_inst_spfpu_divider_rg_stage2_7_BITS__ETC___d165 +
	     10'd1 ;
  assign INV_898_MINUS_inst_spfpu_divider_rg_stage2_7_B_ETC___d213 =
	     INV_898_MINUS_inst_spfpu_divider_rg_stage2_7_B_ETC___d211 <
	     { 5'd0, msb_zeros__h4233 } ;
  assign NOT_0_CONCAT_inst_spfpu_divider_rg_stage2_7_BI_ETC___d225 =
	     !_0_CONCAT_inst_spfpu_divider_rg_stage2_7_BITS_1_ETC___d160 &&
	     (!_898_MINUS_inst_spfpu_divider_rg_stage2_7_BITS__ETC___d167 ||
	      !inst_spfpu_divider_int_div_wr_final_out$wget[26] &&
	      INV_898_MINUS_inst_spfpu_divider_rg_stage2_7_B_ETC___d213) ;
  assign NOT_IF_wr_operand1_whas__236_THEN_wr_operand1__ETC___d1792 =
	     (x__read__h720[30:23] != 8'd255 ||
	      x__read__h720[22:0] == 23'd0) &&
	     !x__read__h720[31] &&
	     (x__read__h720[30:23] != 8'd255 ||
	      x__read__h720[22:0] != 23'd0) &&
	     (x__read__h720[30:23] == 8'd255 &&
	      x__read__h720[22:0] == 23'd0 ||
	      !IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1521) ;
  assign NOT_inst_spfm_add_sub_ff_stage2_34_BIT_50_72_7_ETC___d602 =
	     !inst_spfm_add_sub_ff_stage2[50] &&
	     inst_spfm_add_sub_ff_stage2[34:27] == 8'd0 &&
	     inst_spfm_add_sub_ff_stage2[26:4] == 23'd0 &&
	     inst_spfm_add_sub_ff_stage2[51] &&
	     !inst_spfm_add_sub_ff_stage2[0] &&
	     (inst_spfm_add_sub_ff_stage2[3:1] != 3'b010 ||
	      !inst_spfm_add_sub_ff_stage2_34_BIT_46_86_XOR_i_ETC___d593) &&
	     (inst_spfm_add_sub_ff_stage2[3:1] == 3'b010 ||
	      !inst_spfm_add_sub_ff_stage2_34_BIT_46_86_XOR_i_ETC___d596) ;
  assign _0_CONCAT_IF_IF_inst_spfm_add_sub_ff_stage3_81__ETC___d1116 =
	     x__h54231 - 10'd1 ;
  assign _0_CONCAT_IF_IF_inst_spfm_add_sub_ff_stage3_81__ETC___d1118 =
	     _0_CONCAT_IF_IF_inst_spfm_add_sub_ff_stage3_81__ETC___d1116 <=
	     IF_inst_spfm_add_sub_ff_stage3_81_BITS_178_TO__ETC___d1117 ;
  assign _0_CONCAT_IF_IF_inst_spfm_add_sub_ff_stage3_81__ETC___d948 =
	     ({ 3'd0, x__h49034 } < exponent_difference__h48894 ||
	      IF_inst_spfm_add_sub_ff_stage3_81_BITS_178_TO__ETC___d794[0]) &&
	     mantissa_to_shift__h48893 != 73'd0 ;
  assign _0_CONCAT_inst_spfm_add_sub_ff_stage2_34_BITS_4_ETC___d453 =
	     ({ 13'd0,
		inst_spfm_add_sub_ff_stage2_34_BITS_45_TO_36_4_ETC___d441 } ^
	      23'h400000) <
	     23'd4194153 ;
  assign _0_CONCAT_inst_spfpu_divider_rg_stage1_7_BITS_5_ETC___d77 =
	     { 1'd0, _numerator__h3507, 28'd0 } -
	     { 1'b0, _denominator__h3506, 28'd0 } ;
  assign _0_CONCAT_inst_spfpu_divider_rg_stage1_7_BITS_5_ETC__q8 =
	     { _0_CONCAT_inst_spfpu_divider_rg_stage1_7_BITS_5_ETC___d77[54:1],
	       2'd2 } +
	     { 1'b0, _denominator__h3506, 28'd0 } ;
  assign _0_CONCAT_inst_spfpu_divider_rg_stage1_7_BITS_5_ETC__q9 =
	     { _0_CONCAT_inst_spfpu_divider_rg_stage1_7_BITS_5_ETC___d77[54:1],
	       2'd2 } -
	     { 1'b0, _denominator__h3506, 28'd0 } ;
  assign _0_CONCAT_inst_spfpu_divider_rg_stage2_7_BITS_1_ETC___d160 =
	     ({ 13'd0,
		inst_spfpu_divider_rg_stage2_7_BITS_17_TO_8_56_ETC___d157 } ^
	      23'h400000) <
	     23'd4194153 ;
  assign _1_CONCAT_IF_wr_operand1_whas__236_THEN_wr_oper_ETC___d1862 =
	     x__h89330 <<
	     IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1514 ;
  assign _898_MINUS_IF_inst_spfm_add_sub_ff_stage2_34_BI_ETC___d458 =
	     10'd898 -
	     (inst_spfm_add_sub_ff_stage2[99] ?
		inst_spfm_add_sub_ff_stage2_34_BITS_45_TO_36_4_ETC___d441 +
		10'd1 :
		inst_spfm_add_sub_ff_stage2_34_BITS_45_TO_36_4_ETC___d441) ;
  assign _898_MINUS_IF_inst_spfm_add_sub_ff_stage2_34_BI_ETC___d459 =
	     (_898_MINUS_IF_inst_spfm_add_sub_ff_stage2_34_BI_ETC___d458 ^
	      10'h200) <=
	     10'd512 ;
  assign _898_MINUS_inst_spfpu_divider_rg_stage2_7_BITS__ETC___d165 =
	     10'd898 -
	     inst_spfpu_divider_rg_stage2_7_BITS_17_TO_8_56_ETC___d157 ;
  assign _898_MINUS_inst_spfpu_divider_rg_stage2_7_BITS__ETC___d167 =
	     (_898_MINUS_inst_spfpu_divider_rg_stage2_7_BITS__ETC___d165 ^
	      10'h200) <=
	     10'd512 ;
  assign _denominator__h3506 = { inst_spfpu_divider_rg_stage1[31:8], 3'd0 } ;
  assign _dividend___1__h2963 = _dividend__h2715 - 27'd1 ;
  assign _dividend__h2714 =
	     { IF_inst_spfpu_divider_int_div_rg_inter_stage_3_ETC___d24[25:0],
	       !inst_spfpu_divider_int_div_rg_inter_stage[55] } ;
  assign _dividend__h2715 =
	     _dividend__h2714 -
	     { ~IF_inst_spfpu_divider_int_div_rg_inter_stage_3_ETC___d24[25:0],
	       ~(!inst_spfpu_divider_int_div_rg_inter_stage[55]) } ;
  assign _numerator__h3507 = { inst_spfpu_divider_rg_stage1[55:32], 3'd0 } ;
  assign _operand3__h91734 =
	     MUX_take_new_inputs$write_1__SEL_10 ? _start_operand3 : 32'd0 ;
  assign _remainder___1__h2962 =
	     IF_inst_spfpu_divider_int_div_rg_inter_stage_3_ETC___d24[54:26] +
	     { 1'b0,
	       inst_spfpu_divider_int_div_rg_inter_stage[82:56],
	       1'b0 } ;
  assign _theResult_____1__h65186 =
	     inst_spfm_add_sub_ff_stage4[9] ?
	       32'h7FC00000 :
	       IF_inst_spfm_add_sub_ff_stage4_146_BIT_7_177_T_ETC___d1215 ;
  assign _theResult_____1_fst__h11039 =
	     inst_spfpu_divider_rg_stage2[4] ?
	       5'd8 :
	       _theResult_____1_fst__h11048 ;
  assign _theResult_____1_fst__h11048 =
	     inst_spfpu_divider_rg_stage2[3] ?
	       5'd0 :
	       _theResult_____1_fst__h11057 ;
  assign _theResult_____1_fst__h11057 =
	     (inst_spfpu_divider_rg_stage2_7_BITS_17_TO_8_56_ETC___d158 &&
	      _0_CONCAT_inst_spfpu_divider_rg_stage2_7_BITS_1_ETC___d160) ?
	       5'd2 :
	       _theResult_____1_fst__h11111 ;
  assign _theResult_____1_fst__h11111 =
	     (!inst_spfpu_divider_rg_stage2_7_BITS_17_TO_8_56_ETC___d158 ||
	      IF_NOT_IF_inst_spfpu_divider_rg_stage2_7_BITS__ETC___d290[7:0] ==
	      8'd255) ?
	       5'd4 :
	       _theResult_____1_fst__h11130 ;
  assign _theResult_____1_fst__h11130 =
	     (x__h11296 | lv_quotient__h10359[1]) ? 5'd1 : 5'd0 ;
  assign _theResult_____1_fst__h12880 =
	     lv_extended_mantissa___1__h12879[26] ?
	       result_exponent___1__h12945 :
	       inst_spfpu_sqrt_rg_inter_stage[67:59] ;
  assign _theResult_____1_fst__h25477 =
	     (msb_zeros__h21402 == 6'd1) ?
	       lv_product_mantissa__h21404 :
	       _theResult_____1_fst__h25480 ;
  assign _theResult_____1_fst__h25480 =
	     INV_898_MINUS_IF_inst_spfm_add_sub_ff_stage2_3_ETC___d707 ?
	       lv_product_mantissa___1__h25493 :
	       lv_product_mantissa___2__h25514 ;
  assign _theResult_____1_fst__h70593 =
	     _theResult_____2__h70331[24] ? 8'd159 : 8'd158 ;
  assign _theResult_____1_snd__h11040 =
	     { inst_spfpu_divider_rg_stage2[7],
	       inst_spfpu_divider_rg_stage2[4] ?
		 31'h7F800000 :
		 (inst_spfpu_divider_rg_stage2[3] ?
		    31'd0 :
		    IF_inst_spfpu_divider_rg_stage2_7_BITS_17_TO_8_ETC___d303) } ;
  assign _theResult_____1_snd__h25478 =
	     (msb_zeros__h21402 == 6'd1) ?
	       lv_product_exponent__h21406 :
	       _theResult_____1_snd__h25481 ;
  assign _theResult_____1_snd__h25481 =
	     INV_898_MINUS_IF_inst_spfm_add_sub_ff_stage2_3_ETC___d707 ?
	       lv_product_exponent___1__h25494 :
	       lv_product_exponent___2__h25515 ;
  assign _theResult_____2__h70331 =
	     IF_IF_wr_funct3_whas__346_THEN_wr_funct3_wget__ETC___d1406 ?
	       lv_rounded_mantissa__h70541 :
	       { 1'b0,
		 IF_NOT_IF_wr_operand2_whas__241_THEN_wr_operan_ETC___d1382[31:8] } ;
  assign _theResult_____2__h90320 =
	     _theResult_____3__h90319 ?
	       final_result___1__h90511 :
	       final_result__h89925 ;
  assign _theResult_____2_snd__h48641 =
	     (inst_spfm_add_sub_ff_stage2[49] && lv_op3_is_infinity__h25046) ?
	       lv_result_is_infinity___1__h48642 :
	       ((inst_spfm_add_sub_ff_stage2[49] ||
		 lv_op3_is_infinity__h25046) ?
		  lv_result_is_infinity___1__h48673 :
		  2'd0) ;
  assign _theResult_____3__h12371 =
	     _theResult____h11978[28] ?
	       lv_remainder__h12577 :
	       _theResult____h11978 ;
  assign _theResult_____3__h54043 =
	     (inst_spfm_add_sub_ff_stage3[180] ^ y__h54080) ?
	       (IF_inst_spfm_add_sub_ff_stage3_81_BITS_178_TO__ETC___d953 ?
		  resultant_mantissa__h54101 :
		  resultant_mantissa__h54100) :
	       resultant_mantissa__h54098 ;
  assign _theResult_____3__h87999 =
	     { 27'd0,
	       IF_IF_IF_wr_operand1_whas__236_THEN_wr_operand_ETC___d1766[51:50] } -
	     29'd1 ;
  assign _theResult_____3_fst__h25157 =
	     (inst_spfm_add_sub_ff_stage2[26:4] == 23'd0) ?
	       73'd0 :
	       mantissa3__h25162 ;
  assign _theResult_____4__h10613 =
	     IF_inst_spfpu_divider_rg_stage2_7_BITS_2_TO_0__ETC___d266 ?
	       lv_rounded_quotient___1__h10808 :
	       lv_rounded_quotient__h10612 ;
  assign _theResult_____4__h54039 =
	     !IF_inst_spfm_add_sub_ff_stage3_81_BITS_178_TO__ETC___d953 ;
  assign _theResult_____4__h65149 =
	     _theResult____h64899 ?
	       lv_rounded_mantissa___1__h65169 :
	       inst_spfm_add_sub_ff_stage4[86:62] ;
  assign _theResult_____5__h70832 =
	     { 1'b0,
	       IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[22:0] } ;
  assign _theResult_____7__h10611 =
	     inst_spfpu_divider_int_div_wr_final_out$wget[55:28] != 28'd0 ||
	     lv_quotient__h10359[0] ||
	     IF_NOT_inst_spfpu_divider_rg_stage2_7_BITS_17__ETC___d246 ;
  assign _theResult_____8__h10363 =
	     (inst_spfpu_divider_rg_stage2_7_BITS_17_TO_8_56_ETC___d158 &&
	      NOT_0_CONCAT_inst_spfpu_divider_rg_stage2_7_BI_ETC___d225) ?
	       10'd0 :
	       x1_avValue_fst__h10352 ;
  assign _theResult____h11978 =
	     inst_spfpu_sqrt_rg_inter_stage[57] ?
	       lv_remainder__h12067 :
	       lv_remainder__h12157 ;
  assign _theResult____h65711 =
	     (!IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[0] &&
	      x__read__h720[31]) ?
	       lv_integer_num___1__h66184 :
	       x__read__h720 ;
  assign _theResult____h70327 =
	     IF_NOT_IF_wr_operand2_whas__241_THEN_wr_operan_ETC___d1382[5:0] !=
	     6'd0 ;
  assign _theResult____h70827 = { 1'b0, x__read__h720[22:0] } ;
  assign _theResult____h71207 =
	     (x__read__h720[30:23] <
	      IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[30:23]) ?
	       2'b01 :
	       ((x__read__h720[30:23] ==
		 IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[30:23]) ?
		  IF_0b0_CONCAT_IF_wr_operand1_whas__236_THEN_wr_ETC___d1450 :
		  2'b10) ;
  assign _theResult___fst__h10429 =
	     inst_spfpu_divider_int_div_wr_final_out$wget[26] ?
	       inst_spfpu_divider_rg_stage2[17:8] :
	       _theResult___fst__h10435 ;
  assign _theResult___fst__h10435 =
	     INV_898_MINUS_inst_spfpu_divider_rg_stage2_7_B_ETC___d213 ?
	       lv_exponent___1__h10454 :
	       lv_exponent___2__h10481 ;
  assign _theResult___fst__h93378 =
	     (x__read__h720[30:23] == 8'd255 &&
	      x__read__h720[22:0] != 23'd0) ?
	       5'd16 :
	       5'd0 ;
  assign _theResult___snd__h70322 =
	     { x__read__h720[31],
	       IF_NOT_IF_NOT_IF_wr_operand2_whas__241_THEN_wr_ETC___d1420 } ;
  assign _theResult___snd__h92956 =
	     (x__read__h720[31] && x__read__h720[30:23] != 8'd0 &&
	      x__read__h720[30:23] != 8'd255) ?
	       10'd2 :
	       _theResult___snd__h93012 ;
  assign _theResult___snd__h93012 =
	     (x__read__h720[31] && x__read__h720[30:23] == 8'd0 &&
	      x__read__h720[22:0] != 23'd0) ?
	       10'd4 :
	       _theResult___snd__h93075 ;
  assign _theResult___snd__h93075 =
	     (x__read__h720[31] && x__read__h720[30:23] != 8'd255 &&
	      x__read__h720[22:0] != 23'd8388607) ?
	       10'd8 :
	       _theResult___snd__h93131 ;
  assign _theResult___snd__h93131 =
	     (!x__read__h720[31] && x__read__h720[30:23] == 8'd0 &&
	      x__read__h720[22:0] == 23'd0) ?
	       10'd16 :
	       _theResult___snd__h93188 ;
  assign _theResult___snd__h93188 =
	     (!x__read__h720[31] && x__read__h720[30:23] == 8'd0 &&
	      x__read__h720[22:0] != 23'd0) ?
	       10'd32 :
	       _theResult___snd__h93241 ;
  assign _theResult___snd__h93241 =
	     (!x__read__h720[31] && x__read__h720[30:23] != 8'd0) ?
	       10'd64 :
	       _theResult___snd__h93298 ;
  assign _theResult___snd__h93298 =
	     (!x__read__h720[31] && x__read__h720[30:23] == 8'd255 &&
	      x__read__h720[22:0] == 23'd0) ?
	       10'd128 :
	       _theResult___snd__h93379 ;
  assign _theResult___snd__h93379 =
	     (x__read__h720[30:23] == 8'd255 && !x__read__h720[22] &&
	      x__read__h720[22:0] != 23'd0) ?
	       10'd256 :
	       _theResult___snd__h93455 ;
  assign _theResult___snd__h93455 =
	     (x__read__h720[30:23] == 8'd255 && x__read__h720[22]) ?
	       10'd512 :
	       10'd0 ;
  assign _theResult___snd_fst__h10431 =
	     inst_spfpu_divider_int_div_wr_final_out$wget[26] ?
	       inst_spfpu_divider_int_div_wr_final_out$wget[26:0] :
	       _theResult___snd_fst__h10437 ;
  assign _theResult___snd_fst__h10437 =
	     INV_898_MINUS_inst_spfpu_divider_rg_stage2_7_B_ETC___d213 ?
	       lv_quotient___1__h10453 :
	       lv_quotient___2__h10480 ;
  assign _theResult___snd_fst__h48974 =
	     inst_spfm_add_sub_ff_stage3_81_BITS_178_TO_169_ETC___d787 ?
	       inst_spfm_add_sub_ff_stage3[178:169] :
	       inst_spfm_add_sub_ff_stage3[168:159] ;
  assign accum__h13769 =
	     inst_spfm_add_sub_mult_partial_prod[128:64] +
	     { 1'd0,
	       inst_spfm_add_sub_mult_partial_prod_01_BITS_63_ETC___d408[63:0] } ;
  assign exp1__h73281 = exp2_temp__h72334 - { 5'd0, x__h73372 } ;
  assign exp2__h73282 = exp2_temp__h91424 - { 5'd0, x__h76742 } ;
  assign exp2_temp__h72334 = { 2'b0, x__read__h720[30:23] } ;
  assign exp2_temp__h91424 =
	     { 2'b0,
	       IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[30:23] } ;
  assign exp3_is_zero__h25040 =
	     ~(inst_spfm_add_sub_ff_stage2[34:27] != 8'd0) ;
  assign exponent2__h25029 =
	     (!inst_spfm_add_sub_ff_stage2_34_BITS_45_TO_36_4_ETC___d442 ||
	      inst_spfm_add_sub_ff_stage2[99] &&
	      inst_spfm_add_sub_ff_stage2[45:36] == 10'd254) ?
	       inst_spfm_add_sub_ff_stage2[45:36] :
	       y_avValue_snd_snd_snd_snd_fst__h25427 ;
  assign exponent2__h25382 =
	     inst_spfm_add_sub_ff_stage2[51] ? 10'd0 : exponent2__h25029 ;
  assign exponent3__h25032 = { 2'b0, inst_spfm_add_sub_ff_stage2[34:27] } ;
  assign exponent3__h25047 =
	     exponent3__h25032 + { 9'd0, op3_is_subnormal__h25041 } ;
  assign exponent___1__h80623 = exponent__h80496 + 9'd1 ;
  assign exponent__h80496 = { 1'b0, x__read__h720[30:23] } ;
  assign exponent_difference__h48894 =
	     lv_minuend__h48890 - _theResult___snd_fst__h48974 ;
  assign fflags__h65187 =
	     { inst_spfm_add_sub_ff_stage4[9],
	       1'd0,
	       inst_spfm_add_sub_ff_stage4[2:1],
	       lv_inexact__h64898 } ;
  assign fflags__h90476 =
	     { lv_invalid__h89140,
	       1'b0,
	       x1_avValue_snd_snd_fst__h90148,
	       1'b0,
	       lv_inexact__h90318 } ;
  assign final_result___1__h90511 = final_result__h89925 + 32'd1 ;
  assign final_result__h12887 =
	     { inst_spfpu_sqrt_rg_inter_stage[58],
	       IF_IF_inst_spfpu_sqrt_rg_inter_stage_20_BITS_2_ETC__q4[7:0],
	       lv_extended_mantissa__h12380[24:2] } ;
  assign final_result__h14094 = { 63'd0, accum__h13769 } ;
  assign final_result__h88560 = { x__read__h720[31], 31'd0 } ;
  assign final_result__h89925 =
	     IF_wr_imm_whas__821_THEN_wr_imm_wget__822_ELSE_0___d1823[1] ?
	       y_avValue_fst__h89917 :
	       y_avValue_fst__h89910 ;
  assign final_result__h90509 = ~_theResult_____2__h90320 + 32'd1 ;
  assign inp1__h13644 =
	     { 40'd0, inst_spfm_add_sub_ff_input_register[99:76] } ;
  assign inp2__h13645 =
	     { 40'd0, inst_spfm_add_sub_ff_input_register[75:52] } ;
  assign inst_spfm_add_sub_ff_stage2_34_BITS_45_TO_36_4_ETC___d441 =
	     inst_spfm_add_sub_ff_stage2[45:36] - 10'd127 ;
  assign inst_spfm_add_sub_ff_stage2_34_BITS_45_TO_36_4_ETC___d442 =
	     (inst_spfm_add_sub_ff_stage2_34_BITS_45_TO_36_4_ETC___d441 ^
	      10'h200) <=
	     10'd639 ;
  assign inst_spfm_add_sub_ff_stage2_34_BITS_45_TO_36_4_ETC___d462 =
	     inst_spfm_add_sub_ff_stage2_34_BITS_45_TO_36_4_ETC___d442 &&
	     (!inst_spfm_add_sub_ff_stage2[99] ||
	      inst_spfm_add_sub_ff_stage2[45:36] != 10'd254) &&
	     !_0_CONCAT_inst_spfm_add_sub_ff_stage2_34_BITS_4_ETC___d453 &&
	     !_898_MINUS_IF_inst_spfm_add_sub_ff_stage2_34_BI_ETC___d459 ;
  assign inst_spfm_add_sub_ff_stage2_34_BIT_46_86_XOR_i_ETC___d593 =
	     sign2__h25028 | y__h25234 ;
  assign inst_spfm_add_sub_ff_stage2_34_BIT_46_86_XOR_i_ETC___d596 =
	     sign2__h25028 & y__h25234 ;
  assign inst_spfm_add_sub_ff_stage3_81_BITS_178_TO_169_ETC___d787 =
	     inst_spfm_add_sub_ff_stage3[178:169] <=
	     inst_spfm_add_sub_ff_stage3[168:159] ;
  assign inst_spfm_add_sub_mult_partial_prod_01_BITS_63_ETC___d408 =
	     inst_spfm_add_sub_mult_partial_prod[63:0] * inp1__h13644 ;
  assign inst_spfpu_divider_int_div_rg_inter_stage_BITS_ETC__q2 =
	     { inst_spfpu_divider_int_div_rg_inter_stage[54:0], 1'd0 } +
	     { 1'b0,
	       inst_spfpu_divider_int_div_rg_inter_stage[82:56],
	       28'd0 } ;
  assign inst_spfpu_divider_int_div_rg_inter_stage_BITS_ETC__q3 =
	     { inst_spfpu_divider_int_div_rg_inter_stage[54:0], 1'd0 } -
	     { 1'b0,
	       inst_spfpu_divider_int_div_rg_inter_stage[82:56],
	       28'd0 } ;
  assign inst_spfpu_divider_int_div_wr_final_out_wget___ETC___d172 =
	     inst_spfpu_divider_int_div_wr_final_out$wget[26:0] >>
	     _898_MINUS_inst_spfpu_divider_rg_stage2_7_BITS__ETC___d165 ;
  assign inst_spfpu_divider_rg_stage2_7_BITS_17_TO_8_56_ETC___d157 =
	     inst_spfpu_divider_rg_stage2[17:8] - 10'd127 ;
  assign inst_spfpu_divider_rg_stage2_7_BITS_17_TO_8_56_ETC___d158 =
	     (inst_spfpu_divider_rg_stage2_7_BITS_17_TO_8_56_ETC___d157 ^
	      10'h200) <=
	     10'd640 ;
  assign lsb_zeros___1__h21486 =
	     lv_product_mantissa__h21404[0] ?
	       6'd0 :
	       (lv_product_mantissa__h21404[1] ?
		  6'd1 :
		  (lv_product_mantissa__h21404[2] ?
		     6'd2 :
		     (lv_product_mantissa__h21404[3] ?
			6'd3 :
			(lv_product_mantissa__h21404[4] ?
			   6'd4 :
			   (lv_product_mantissa__h21404[5] ?
			      6'd5 :
			      (lv_product_mantissa__h21404[6] ?
				 6'd6 :
				 (lv_product_mantissa__h21404[7] ?
				    6'd7 :
				    (lv_product_mantissa__h21404[8] ?
				       6'd8 :
				       (lv_product_mantissa__h21404[9] ?
					  6'd9 :
					  (lv_product_mantissa__h21404[10] ?
					     6'd10 :
					     (lv_product_mantissa__h21404[11] ?
						6'd11 :
						(lv_product_mantissa__h21404[12] ?
						   6'd12 :
						   (lv_product_mantissa__h21404[13] ?
						      6'd13 :
						      (lv_product_mantissa__h21404[14] ?
							 6'd14 :
							 (lv_product_mantissa__h21404[15] ?
							    6'd15 :
							    (lv_product_mantissa__h21404[16] ?
							       6'd16 :
							       (lv_product_mantissa__h21404[17] ?
								  6'd17 :
								  (lv_product_mantissa__h21404[18] ?
								     6'd18 :
								     (lv_product_mantissa__h21404[19] ?
									6'd19 :
									(lv_product_mantissa__h21404[20] ?
									   6'd20 :
									   (lv_product_mantissa__h21404[21] ?
									      6'd21 :
									      (lv_product_mantissa__h21404[22] ?
										 6'd22 :
										 (lv_product_mantissa__h21404[23] ?
										    6'd23 :
										    (lv_product_mantissa__h21404[24] ?
										       6'd24 :
										       (lv_product_mantissa__h21404[25] ?
											  6'd25 :
											  (lv_product_mantissa__h21404[26] ?
											     6'd26 :
											     (lv_product_mantissa__h21404[27] ?
												6'd27 :
												(lv_product_mantissa__h21404[28] ?
												   6'd28 :
												   (lv_product_mantissa__h21404[29] ?
												      6'd29 :
												      (lv_product_mantissa__h21404[30] ?
													 6'd30 :
													 (lv_product_mantissa__h21404[31] ?
													    6'd31 :
													    (lv_product_mantissa__h21404[32] ?
													       6'd32 :
													       (lv_product_mantissa__h21404[33] ?
														  6'd33 :
														  (lv_product_mantissa__h21404[34] ?
														     6'd34 :
														     (lv_product_mantissa__h21404[35] ?
															6'd35 :
															(lv_product_mantissa__h21404[36] ?
															   6'd36 :
															   (lv_product_mantissa__h21404[37] ?
															      6'd37 :
															      (lv_product_mantissa__h21404[38] ?
																 6'd38 :
																 (lv_product_mantissa__h21404[39] ?
																    6'd39 :
																    (lv_product_mantissa__h21404[40] ?
																       6'd40 :
																       (lv_product_mantissa__h21404[41] ?
																	  6'd41 :
																	  (lv_product_mantissa__h21404[42] ?
																	     6'd42 :
																	     (lv_product_mantissa__h21404[43] ?
																		6'd43 :
																		(lv_product_mantissa__h21404[44] ?
																		   6'd44 :
																		   (lv_product_mantissa__h21404[45] ?
																		      6'd45 :
																		      (lv_product_mantissa__h21404[46] ?
																			 6'd46 :
																			 (lv_product_mantissa__h21404[47] ?
																			    6'd47 :
																			    (lv_product_mantissa__h21404[48] ?
																			       6'd48 :
																			       6'd49)))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign lsb_zeros___1__h8299 =
	     inst_spfpu_divider_int_div_wr_final_out$wget[0] ?
	       5'd0 :
	       (inst_spfpu_divider_int_div_wr_final_out$wget[1] ?
		  5'd1 :
		  (inst_spfpu_divider_int_div_wr_final_out$wget[2] ?
		     5'd2 :
		     (inst_spfpu_divider_int_div_wr_final_out$wget[3] ?
			5'd3 :
			(inst_spfpu_divider_int_div_wr_final_out$wget[4] ?
			   5'd4 :
			   (inst_spfpu_divider_int_div_wr_final_out$wget[5] ?
			      5'd5 :
			      (inst_spfpu_divider_int_div_wr_final_out$wget[6] ?
				 5'd6 :
				 (inst_spfpu_divider_int_div_wr_final_out$wget[7] ?
				    5'd7 :
				    (inst_spfpu_divider_int_div_wr_final_out$wget[8] ?
				       5'd8 :
				       (inst_spfpu_divider_int_div_wr_final_out$wget[9] ?
					  5'd9 :
					  (inst_spfpu_divider_int_div_wr_final_out$wget[10] ?
					     5'd10 :
					     (inst_spfpu_divider_int_div_wr_final_out$wget[11] ?
						5'd11 :
						(inst_spfpu_divider_int_div_wr_final_out$wget[12] ?
						   5'd12 :
						   (inst_spfpu_divider_int_div_wr_final_out$wget[13] ?
						      5'd13 :
						      (inst_spfpu_divider_int_div_wr_final_out$wget[14] ?
							 5'd14 :
							 (inst_spfpu_divider_int_div_wr_final_out$wget[15] ?
							    5'd15 :
							    (inst_spfpu_divider_int_div_wr_final_out$wget[16] ?
							       5'd16 :
							       (inst_spfpu_divider_int_div_wr_final_out$wget[17] ?
								  5'd17 :
								  (inst_spfpu_divider_int_div_wr_final_out$wget[18] ?
								     5'd18 :
								     (inst_spfpu_divider_int_div_wr_final_out$wget[19] ?
									5'd19 :
									(inst_spfpu_divider_int_div_wr_final_out$wget[20] ?
									   5'd20 :
									   (inst_spfpu_divider_int_div_wr_final_out$wget[21] ?
									      5'd21 :
									      (inst_spfpu_divider_int_div_wr_final_out$wget[22] ?
										 5'd22 :
										 (inst_spfpu_divider_int_div_wr_final_out$wget[23] ?
										    5'd23 :
										    (inst_spfpu_divider_int_div_wr_final_out$wget[24] ?
										       5'd24 :
										       (inst_spfpu_divider_int_div_wr_final_out$wget[25] ?
											  5'd25 :
											  (inst_spfpu_divider_int_div_wr_final_out$wget[26] ?
											     5'd26 :
											     5'd27)))))))))))))))))))))))))) ;
  assign lv_compare_result__h70848 =
	     x__read__h720[31] ?
	       (IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[31] ?
		  { _theResult____h71207[0], _theResult____h71207[1] } :
		  2'b01) :
	       (IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[31] ?
		  2'b10 :
		  _theResult____h71207) ;
  assign lv_exponent___1__h10454 =
	     inst_spfpu_divider_rg_stage2[17:8] -
	     INV_898_MINUS_inst_spfpu_divider_rg_stage2_7_B_ETC___d211 ;
  assign lv_exponent___2__h10481 =
	     inst_spfpu_divider_rg_stage2[17:8] - { 5'd0, msb_zeros__h4233 } ;
  assign lv_exponent__h10887 =
	     _theResult_____4__h10613[24] ?
	       y_avValue_fst__h10878 :
	       _theResult_____8__h10363 ;
  assign lv_exponent__h70334 =
	     _theResult_____1_fst__h70593 - { 2'd0, lv_zeros__h65712 } ;
  assign lv_exponent__h73283 = 10'd127 + y__h73364 ;
  assign lv_extended_mantissa___1__h12879 =
	     lv_extended_mantissa__h12378 + 27'd4 ;
  assign lv_extended_mantissa__h12378 = { 1'b0, result_mantissa__h12369 } ;
  assign lv_extended_mantissa__h12380 =
	     IF_inst_spfpu_sqrt_rg_inter_stage_20_BITS_2_TO_ETC___d375 ?
	       lv_extended_mantissa___1__h12879 :
	       lv_extended_mantissa__h12378 ;
  assign lv_final_output__h11017 =
	     { inst_spfpu_divider_rg_stage2[7], 31'h7F800000 } ;
  assign lv_final_output__h65243 =
	     { inst_spfm_add_sub_ff_stage4[8], 31'h7F800000 } ;
  assign lv_final_output__h65287 = { inst_spfm_add_sub_ff_stage4[6], 31'd0 } ;
  assign lv_final_output__h65331 = { inst_spfm_add_sub_ff_stage4[4], 31'd0 } ;
  assign lv_inexact__h64898 = x__h65085 | lv_sticky__h64896 ;
  assign lv_inexact__h90318 = x__h90454 | lv_sticky__h90316 ;
  assign lv_inf__h72206 =
	     (x__read__h720[30:23] != 8'd255 ||
	      x__read__h720[22:0] == 23'd0) &&
	     IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1520 &&
	     !IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1521 ;
  assign lv_inf__h91276 =
	     (x__read__h720[30:23] != 8'd255 ||
	      x__read__h720[22:0] == 23'd0) &&
	     (IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[30:23] !=
	      8'd255 ||
	      IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[22:0] ==
	      23'd0) &&
	     (IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1520 ||
	      IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1682) &&
	     !IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1521 &&
	     !IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1685 ;
  assign lv_integer_num___1__h66184 =
	     (MUX_take_new_inputs$write_1__SEL_10 ?
		~_start_operand1 :
		32'hFFFFFFFF) +
	     32'd1 ;
  assign lv_inv__h72207 =
	     x__read__h720[30:23] == 8'd255 && x__read__h720[22:0] != 23'd0 ||
	     IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1520 &&
	     IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1521 ;
  assign lv_inv__h91277 =
	     x__read__h720[30:23] == 8'd255 && x__read__h720[22:0] != 23'd0 ||
	     IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[30:23] ==
	     8'd255 &&
	     IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[22:0] !=
	     23'd0 ||
	     (IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1520 ||
	      IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1682) &&
	     (IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1521 ||
	      IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1685) ;
  assign lv_invalid__h89140 = x__read__h720[30:23] == 8'd255 ;
  assign lv_leading_zeros__h80502 =
	     IF_IF_wr_operand1_whas__236_THEN_wr_operand1_w_ETC___d1724[1] ?
	       6'd0 :
	       (IF_IF_wr_operand1_whas__236_THEN_wr_operand1_w_ETC___d1724[0] ?
		  6'd1 :
		  (x__read__h720[22] ?
		     6'd2 :
		     (x__read__h720[21] ?
			6'd3 :
			(x__read__h720[20] ?
			   6'd4 :
			   (x__read__h720[19] ?
			      6'd5 :
			      (x__read__h720[18] ?
				 6'd6 :
				 (x__read__h720[17] ?
				    6'd7 :
				    (x__read__h720[16] ?
				       6'd8 :
				       (x__read__h720[15] ?
					  6'd9 :
					  (x__read__h720[14] ?
					     6'd10 :
					     (x__read__h720[13] ?
						6'd11 :
						(x__read__h720[12] ?
						   6'd12 :
						   (x__read__h720[11] ?
						      6'd13 :
						      (x__read__h720[10] ?
							 6'd14 :
							 (x__read__h720[9] ?
							    6'd15 :
							    (x__read__h720[8] ?
							       6'd16 :
							       (x__read__h720[7] ?
								  6'd17 :
								  (x__read__h720[6] ?
								     6'd18 :
								     (x__read__h720[5] ?
									6'd19 :
									(x__read__h720[4] ?
									   6'd20 :
									   (x__read__h720[3] ?
									      6'd21 :
									      (x__read__h720[2] ?
										 6'd22 :
										 (x__read__h720[1] ?
										    6'd23 :
										    (x__read__h720[0] ?
										       6'd24 :
										       6'd52)))))))))))))))))))))))) ;
  assign lv_mantissa2__h48900 =
	     inst_spfm_add_sub_ff_stage3_81_BITS_178_TO_169_ETC___d787 ?
	       mantissa_to_shift___1__h48898 :
	       inst_spfm_add_sub_ff_stage3[158:86] ;
  assign lv_mantissa3__h48901 =
	     inst_spfm_add_sub_ff_stage3_81_BITS_178_TO_169_ETC___d787 ?
	       inst_spfm_add_sub_ff_stage3[85:13] :
	       mantissa_to_shift___1__h48898 ;
  assign lv_mantissa__h89927 =
	     IF_wr_imm_whas__821_THEN_wr_imm_wget__822_ELSE_0___d1823[1] ?
	       y_avValue_snd_snd_snd__h90147 :
	       y_avValue_snd_snd_snd__h90145 ;
  assign lv_minuend__h48890 =
	     inst_spfm_add_sub_ff_stage3_81_BITS_178_TO_169_ETC___d787 ?
	       inst_spfm_add_sub_ff_stage3[168:159] :
	       inst_spfm_add_sub_ff_stage3[178:169] ;
  assign lv_op1_subnormal__h73203 = x__read__h720[30:23] == 8'd0 & y__h73236 ;
  assign lv_op2_subnormal__h73204 =
	     IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[30:23] ==
	     8'd0 &
	     y__h73256 ;
  assign lv_op3_is_infinity__h25046 =
	     inst_spfm_add_sub_ff_stage2[34:27] == 8'd255 &&
	     inst_spfm_add_sub_ff_stage2[26:4] == 23'd0 ;
  assign lv_product_exponent___1__h21425 =
	     inst_spfm_add_sub_ff_stage2[45:36] + 10'd1 ;
  assign lv_product_exponent___1__h25494 =
	     lv_product_exponent__h21406 -
	     INV_898_MINUS_IF_inst_spfm_add_sub_ff_stage2_3_ETC___d704 ;
  assign lv_product_exponent___2__h25515 =
	     lv_product_exponent__h21406 - y__h25532 ;
  assign lv_product_exponent__h21406 =
	     inst_spfm_add_sub_ff_stage2[99] ?
	       lv_product_exponent___1__h21425 :
	       inst_spfm_add_sub_ff_stage2[45:36] ;
  assign lv_product_mantissa___1__h21424 =
	     { 1'd0, inst_spfm_add_sub_ff_stage2[99:52] } ;
  assign lv_product_mantissa___1__h21488 =
	     { IF_inst_spfm_add_sub_ff_stage2_34_BIT_99_44_TH_ETC___d465[48:1],
	       lv_sticky___1__h21489 } ;
  assign lv_product_mantissa___1__h25493 =
	     lv_product_mantissa__h21404 <<
	     INV_898_MINUS_IF_inst_spfm_add_sub_ff_stage2_3_ETC___d704 ;
  assign lv_product_mantissa___2__h25514 =
	     lv_product_mantissa__h21404 << x__h25484 ;
  assign lv_product_mantissa__h14220 =
	     { inst_spfm_add_sub_ff_stage2[99:52], 1'b0 } ;
  assign lv_product_mantissa__h21404 =
	     inst_spfm_add_sub_ff_stage2[99] ?
	       lv_product_mantissa___1__h21424 :
	       lv_product_mantissa__h14220 ;
  assign lv_quotient___1__h10453 =
	     inst_spfpu_divider_int_div_wr_final_out$wget[26:0] <<
	     INV_898_MINUS_inst_spfpu_divider_rg_stage2_7_B_ETC___d211 ;
  assign lv_quotient___1__h8301 =
	     { inst_spfpu_divider_int_div_wr_final_out_wget___ETC___d172[26:1],
	       lv_sticky___1__h8302 } ;
  assign lv_quotient___2__h10480 =
	     inst_spfpu_divider_int_div_wr_final_out$wget[26:0] <<
	     msb_zeros__h4233 ;
  assign lv_quotient__h10359 =
	     inst_spfpu_divider_rg_stage2_7_BITS_17_TO_8_56_ETC___d158 ?
	       y_avValue_snd_fst__h10405 :
	       inst_spfpu_divider_int_div_wr_final_out$wget[26:0] ;
  assign lv_remainder__h12067 =
	     lv_remainder_temp__h11975 + lv_root_temp_1__h11976 ;
  assign lv_remainder__h12157 =
	     lv_remainder_temp__h11975 - lv_root_temp_2__h11977 ;
  assign lv_remainder__h12577 = _theResult____h11978 + lv_root_rem__h12370 ;
  assign lv_remainder_temp__h11975 =
	     { inst_spfpu_sqrt_rg_inter_stage[55:29],
	       inst_spfpu_sqrt_rg_inter_stage[145:144] } ;
  assign lv_result_is_infinity___1__h48642 = { sign2__h25028, ~x__h48655 } ;
  assign lv_result_is_infinity___1__h48673 = { x__h48685 | y__h48686, 1'd1 } ;
  assign lv_result_is_infinity__h25379 =
	     (inst_spfm_add_sub_ff_stage2[34:27] == 8'd255 &&
	      inst_spfm_add_sub_ff_stage2[26:4] != 23'd0 ||
	      inst_spfm_add_sub_ff_stage2[50] ||
	      inst_spfm_add_sub_ff_stage2[34:27] == 8'd0 &&
	      inst_spfm_add_sub_ff_stage2[26:4] == 23'd0 &&
	      inst_spfm_add_sub_ff_stage2[51]) ?
	       2'd0 :
	       _theResult_____2_snd__h48641 ;
  assign lv_result_is_invalid__h25377 =
	     inst_spfm_add_sub_ff_stage2[34:27] == 8'd255 &&
	     inst_spfm_add_sub_ff_stage2[26:4] != 23'd0 ||
	     inst_spfm_add_sub_ff_stage2[50] ||
	     inst_spfm_add_sub_ff_stage2[49] && lv_op3_is_infinity__h25046 &&
	     x__h48655 ;
  assign lv_result_is_zero___1__h25200 = { sign2__h25028, 1'd1 } ;
  assign lv_result_is_zero___1__h25315 = { y__h25234, 1'b1 } ;
  assign lv_result_is_zero__h25380 =
	     (inst_spfm_add_sub_ff_stage2[34:27] == 8'd255 &&
	      inst_spfm_add_sub_ff_stage2[26:4] != 23'd0 ||
	      inst_spfm_add_sub_ff_stage2[50]) ?
	       2'd0 :
	       y_avValue_snd_snd__h48615 ;
  assign lv_resultant_exponent___1__h65402 =
	     inst_spfm_add_sub_ff_stage4[96:87] + 10'd1 ;
  assign lv_root_rem__h12370 = { 2'b0, x__h12344, 1'b1 } ;
  assign lv_root_temp_1__h11976 =
	     { 1'b0, inst_spfpu_sqrt_rg_inter_stage[28:3], 2'd3 } ;
  assign lv_root_temp_2__h11977 =
	     { 1'b0, inst_spfpu_sqrt_rg_inter_stage[28:3], 2'd1 } ;
  assign lv_round_up___1__h10656 = lv_quotient__h10359[2] & y__h10668 ;
  assign lv_round_up___1__h10758 = lv_quotient__h10359[2] & y__h10770 ;
  assign lv_round_up___1__h10773 = x__h10785 & y__h10786 ;
  assign lv_round_up___1__h65037 =
	     inst_spfm_add_sub_ff_stage4[61] & y__h65049 ;
  assign lv_round_up___1__h65073 =
	     lv_inexact__h64898 & inst_spfm_add_sub_ff_stage4[97] ;
  assign lv_round_up___1__h90340 = lv_mantissa__h89927[22] & y__h90352 ;
  assign lv_round_up___1__h90426 = lv_mantissa__h89927[22] & y__h90438 ;
  assign lv_round_up___1__h90442 = lv_inexact__h90318 & x__read__h720[31] ;
  assign lv_rounded_mantissa___1__h65169 =
	     inst_spfm_add_sub_ff_stage4[86:62] + 25'd1 ;
  assign lv_rounded_mantissa__h65403 =
	     { 1'd0, _theResult_____4__h65149[24:1] } ;
  assign lv_rounded_mantissa__h70541 =
	     { 1'b0,
	       IF_NOT_IF_wr_operand2_whas__241_THEN_wr_operan_ETC___d1382[31:8] } +
	     25'd1 ;
  assign lv_rounded_mantissa__h70596 =
	     { 1'd0, _theResult_____2__h70331[24:1] } ;
  assign lv_rounded_quotient___1__h10808 =
	     lv_rounded_quotient__h10612 + 25'd1 ;
  assign lv_rounded_quotient__h10612 = { 1'b0, lv_quotient__h10359[26:3] } ;
  assign lv_roundup___1__h12690 =
	     inst_spfpu_sqrt_rg_inter_stage[69] & y__h12702 ;
  assign lv_roundup___1__h12823 =
	     inst_spfpu_sqrt_rg_inter_stage[69] & y__h12835 ;
  assign lv_roundup___1__h12839 = x__h12851 & y__h12837 ;
  assign lv_roundup___1__h70366 =
	     IF_NOT_IF_wr_operand2_whas__241_THEN_wr_operan_ETC___d1382[7] &
	     y__h70378 ;
  assign lv_roundup___1__h70490 =
	     IF_NOT_IF_wr_operand2_whas__241_THEN_wr_operan_ETC___d1382[7] &
	     y__h70502 ;
  assign lv_roundup___1__h70506 = x__h70518 & y__h70504 ;
  assign lv_sticky___1__h21489 =
	     IF_inst_spfm_add_sub_ff_stage2_34_BIT_99_44_TH_ETC___d465[0] |
	     ((_898_MINUS_IF_inst_spfm_add_sub_ff_stage2_34_BI_ETC___d458 ^
	       10'h200) >
	      ({ 4'd0, lsb_zeros___1__h21486 } ^ 10'h200) ||
	      lv_product_mantissa__h21404[0]) ;
  assign lv_sticky___1__h8302 =
	     inst_spfpu_divider_int_div_wr_final_out_wget___ETC___d172[0] |
	     ((_898_MINUS_inst_spfpu_divider_rg_stage2_7_BITS__ETC___d165 ^
	       10'h200) >
	      ({ 5'd0, lsb_zeros___1__h8299 } ^ 10'h200) ||
	      inst_spfpu_divider_int_div_wr_final_out$wget[0]) ;
  assign lv_sticky__h12376 = _theResult_____3__h12371 != 29'd0 ;
  assign lv_sticky__h64896 = inst_spfm_add_sub_ff_stage4[59:14] != 46'd0 ;
  assign lv_sticky__h90316 = lv_mantissa__h89927[20:0] != 21'd0 ;
  assign lv_summed_exponent__h72335 = x__h72372 + y__h72373 ;
  assign lv_summed_exponent__h91425 = x__h91462 + y__h91463 ;
  assign lv_zero__h72204 =
	     (x__read__h720[30:23] != 8'd255 ||
	      x__read__h720[22:0] == 23'd0) &&
	     !IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1520 &&
	     IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1521 ;
  assign lv_zero__h89142 =
	     ~(x__read__h720[30:23] != 8'd0) &&
	     ~(x__read__h720[22:0] != 23'd0) ;
  assign lv_zero__h91274 =
	     (x__read__h720[30:23] != 8'd255 ||
	      x__read__h720[22:0] == 23'd0) &&
	     (IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[30:23] !=
	      8'd255 ||
	      IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[22:0] ==
	      23'd0) &&
	     !IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1520 &&
	     !IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1682 &&
	     (IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1521 ||
	      IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1685) ;
  assign lv_zeros__h65712 =
	     _theResult____h65711[31] ?
	       6'd0 :
	       (_theResult____h65711[30] ?
		  6'd1 :
		  (_theResult____h65711[29] ?
		     6'd2 :
		     (_theResult____h65711[28] ?
			6'd3 :
			(_theResult____h65711[27] ?
			   6'd4 :
			   (_theResult____h65711[26] ?
			      6'd5 :
			      (_theResult____h65711[25] ?
				 6'd6 :
				 (_theResult____h65711[24] ?
				    6'd7 :
				    (_theResult____h65711[23] ?
				       6'd8 :
				       (_theResult____h65711[22] ?
					  6'd9 :
					  (_theResult____h65711[21] ?
					     6'd10 :
					     (_theResult____h65711[20] ?
						6'd11 :
						(_theResult____h65711[19] ?
						   6'd12 :
						   (_theResult____h65711[18] ?
						      6'd13 :
						      (_theResult____h65711[17] ?
							 6'd14 :
							 (_theResult____h65711[16] ?
							    6'd15 :
							    (_theResult____h65711[15] ?
							       6'd16 :
							       (_theResult____h65711[14] ?
								  6'd17 :
								  (_theResult____h65711[13] ?
								     6'd18 :
								     (_theResult____h65711[12] ?
									6'd19 :
									(_theResult____h65711[11] ?
									   6'd20 :
									   (_theResult____h65711[10] ?
									      6'd21 :
									      (_theResult____h65711[9] ?
										 6'd22 :
										 (_theResult____h65711[8] ?
										    6'd23 :
										    (_theResult____h65711[7] ?
										       6'd24 :
										       (_theResult____h65711[6] ?
											  6'd25 :
											  (_theResult____h65711[5] ?
											     6'd26 :
											     (_theResult____h65711[4] ?
												6'd27 :
												(_theResult____h65711[3] ?
												   6'd28 :
												   (_theResult____h65711[2] ?
												      6'd29 :
												      (_theResult____h65711[1] ?
													 6'd30 :
													 (_theResult____h65711[0] ?
													    6'd31 :
													    6'd32))))))))))))))))))))))))))))))) ;
  assign lv_zeros_on_left__h54130 =
	     _theResult_____3__h54043[72] ?
	       7'd0 :
	       (_theResult_____3__h54043[71] ?
		  7'd1 :
		  (_theResult_____3__h54043[70] ?
		     7'd2 :
		     (_theResult_____3__h54043[69] ?
			7'd3 :
			(_theResult_____3__h54043[68] ?
			   7'd4 :
			   (_theResult_____3__h54043[67] ?
			      7'd5 :
			      (_theResult_____3__h54043[66] ?
				 7'd6 :
				 (_theResult_____3__h54043[65] ?
				    7'd7 :
				    (_theResult_____3__h54043[64] ?
				       7'd8 :
				       (_theResult_____3__h54043[63] ?
					  7'd9 :
					  (_theResult_____3__h54043[62] ?
					     7'd10 :
					     (_theResult_____3__h54043[61] ?
						7'd11 :
						(_theResult_____3__h54043[60] ?
						   7'd12 :
						   (_theResult_____3__h54043[59] ?
						      7'd13 :
						      (_theResult_____3__h54043[58] ?
							 7'd14 :
							 (_theResult_____3__h54043[57] ?
							    7'd15 :
							    (_theResult_____3__h54043[56] ?
							       7'd16 :
							       (_theResult_____3__h54043[55] ?
								  7'd17 :
								  (_theResult_____3__h54043[54] ?
								     7'd18 :
								     (_theResult_____3__h54043[53] ?
									7'd19 :
									(_theResult_____3__h54043[52] ?
									   7'd20 :
									   (_theResult_____3__h54043[51] ?
									      7'd21 :
									      (_theResult_____3__h54043[50] ?
										 7'd22 :
										 (_theResult_____3__h54043[49] ?
										    7'd23 :
										    (_theResult_____3__h54043[48] ?
										       7'd24 :
										       (_theResult_____3__h54043[47] ?
											  7'd25 :
											  (_theResult_____3__h54043[46] ?
											     7'd26 :
											     (_theResult_____3__h54043[45] ?
												7'd27 :
												(_theResult_____3__h54043[44] ?
												   7'd28 :
												   (_theResult_____3__h54043[43] ?
												      7'd29 :
												      (_theResult_____3__h54043[42] ?
													 7'd30 :
													 (_theResult_____3__h54043[41] ?
													    7'd31 :
													    (_theResult_____3__h54043[40] ?
													       7'd32 :
													       (_theResult_____3__h54043[39] ?
														  7'd33 :
														  (_theResult_____3__h54043[38] ?
														     7'd34 :
														     (_theResult_____3__h54043[37] ?
															7'd35 :
															(_theResult_____3__h54043[36] ?
															   7'd36 :
															   (_theResult_____3__h54043[35] ?
															      7'd37 :
															      (_theResult_____3__h54043[34] ?
																 7'd38 :
																 (_theResult_____3__h54043[33] ?
																    7'd39 :
																    (_theResult_____3__h54043[32] ?
																       7'd40 :
																       (_theResult_____3__h54043[31] ?
																	  7'd41 :
																	  (_theResult_____3__h54043[30] ?
																	     7'd42 :
																	     (_theResult_____3__h54043[29] ?
																		7'd43 :
																		(_theResult_____3__h54043[28] ?
																		   7'd44 :
																		   (_theResult_____3__h54043[27] ?
																		      7'd45 :
																		      (_theResult_____3__h54043[26] ?
																			 7'd46 :
																			 (_theResult_____3__h54043[25] ?
																			    7'd47 :
																			    (_theResult_____3__h54043[24] ?
																			       7'd48 :
																			       (_theResult_____3__h54043[23] ?
																				  7'd49 :
																				  (_theResult_____3__h54043[22] ?
																				     7'd50 :
																				     (_theResult_____3__h54043[21] ?
																					7'd51 :
																					(_theResult_____3__h54043[20] ?
																					   7'd52 :
																					   (_theResult_____3__h54043[19] ?
																					      7'd53 :
																					      (_theResult_____3__h54043[18] ?
																						 7'd54 :
																						 (_theResult_____3__h54043[17] ?
																						    7'd55 :
																						    (_theResult_____3__h54043[16] ?
																						       7'd56 :
																						       (_theResult_____3__h54043[15] ?
																							  7'd57 :
																							  (_theResult_____3__h54043[14] ?
																							     7'd58 :
																							     (_theResult_____3__h54043[13] ?
																								7'd59 :
																								(_theResult_____3__h54043[12] ?
																								   7'd60 :
																								   (_theResult_____3__h54043[11] ?
																								      7'd61 :
																								      (_theResult_____3__h54043[10] ?
																									 7'd62 :
																									 (_theResult_____3__h54043[9] ?
																									    7'd63 :
																									    (_theResult_____3__h54043[8] ?
																									       7'd64 :
																									       (_theResult_____3__h54043[7] ?
																										  7'd65 :
																										  (_theResult_____3__h54043[6] ?
																										     7'd66 :
																										     (_theResult_____3__h54043[5] ?
																											7'd67 :
																											(_theResult_____3__h54043[4] ?
																											   7'd68 :
																											   (_theResult_____3__h54043[3] ?
																											      7'd69 :
																											      (_theResult_____3__h54043[2] ?
																												 7'd70 :
																												 (_theResult_____3__h54043[1] ?
																												    7'd71 :
																												    (_theResult_____3__h54043[0] ?
																												       7'd72 :
																												       7'd73)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign man1__h73273 = { ~lv_op1_subnormal__h73203, x__read__h720[22:0] } ;
  assign man2__h73274 =
	     { ~lv_op2_subnormal__h73204,
	       IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[22:0] } ;
  assign mantissa2__h25030 =
	     { IF_NOT_inst_spfm_add_sub_ff_stage2_34_BITS_45__ETC___d725,
	       24'd0 } ;
  assign mantissa2__h25383 =
	     inst_spfm_add_sub_ff_stage2[51] ? 73'd0 : mantissa2__h25030 ;
  assign mantissa3__h25152 =
	     { 2'd1, inst_spfm_add_sub_ff_stage2[26:4], 48'd0 } ;
  assign mantissa3__h25162 =
	     { 2'd0, inst_spfm_add_sub_ff_stage2[26:4], 48'd0 } ;
  assign mantissa___1__h88101 = { mantissa__h80503[50:0], 1'd0 } ;
  assign mantissa__h11980 = { inst_spfpu_sqrt_rg_inter_stage[143:94], 2'd0 } ;
  assign mantissa__h80501 =
	     { IF_IF_wr_operand1_whas__236_THEN_wr_operand1_w_ETC___d1724,
	       x__read__h720[22:0],
	       27'd0 } ;
  assign mantissa__h80503 = mantissa__h80501 << x__h88104 ;
  assign mantissa__h88177 =
	     { IF_IF_IF_wr_operand1_whas__236_THEN_wr_operand_ETC___d1766[49:0],
	       2'd0 } ;
  assign mantissa_to_shift___1__h48898 =
	     { IF_inst_spfm_add_sub_ff_stage3_81_BITS_178_TO__ETC___d794[72:1],
	       _0_CONCAT_IF_IF_inst_spfm_add_sub_ff_stage3_81__ETC___d948 } ;
  assign mantissa_to_shift__h48893 =
	     inst_spfm_add_sub_ff_stage3_81_BITS_178_TO_169_ETC___d787 ?
	       inst_spfm_add_sub_ff_stage3[158:86] :
	       inst_spfm_add_sub_ff_stage3[85:13] ;
  assign msb_zeros___1__h21427 = msb_zeros__h14358 + 6'd1 ;
  assign msb_zeros__h14358 =
	     inst_spfm_add_sub_ff_stage2[99] ?
	       6'd0 :
	       (inst_spfm_add_sub_ff_stage2[98] ?
		  6'd1 :
		  (inst_spfm_add_sub_ff_stage2[97] ?
		     6'd2 :
		     (inst_spfm_add_sub_ff_stage2[96] ?
			6'd3 :
			(inst_spfm_add_sub_ff_stage2[95] ?
			   6'd4 :
			   (inst_spfm_add_sub_ff_stage2[94] ?
			      6'd5 :
			      (inst_spfm_add_sub_ff_stage2[93] ?
				 6'd6 :
				 (inst_spfm_add_sub_ff_stage2[92] ?
				    6'd7 :
				    (inst_spfm_add_sub_ff_stage2[91] ?
				       6'd8 :
				       (inst_spfm_add_sub_ff_stage2[90] ?
					  6'd9 :
					  (inst_spfm_add_sub_ff_stage2[89] ?
					     6'd10 :
					     (inst_spfm_add_sub_ff_stage2[88] ?
						6'd11 :
						(inst_spfm_add_sub_ff_stage2[87] ?
						   6'd12 :
						   (inst_spfm_add_sub_ff_stage2[86] ?
						      6'd13 :
						      (inst_spfm_add_sub_ff_stage2[85] ?
							 6'd14 :
							 (inst_spfm_add_sub_ff_stage2[84] ?
							    6'd15 :
							    (inst_spfm_add_sub_ff_stage2[83] ?
							       6'd16 :
							       (inst_spfm_add_sub_ff_stage2[82] ?
								  6'd17 :
								  (inst_spfm_add_sub_ff_stage2[81] ?
								     6'd18 :
								     (inst_spfm_add_sub_ff_stage2[80] ?
									6'd19 :
									(inst_spfm_add_sub_ff_stage2[79] ?
									   6'd20 :
									   (inst_spfm_add_sub_ff_stage2[78] ?
									      6'd21 :
									      (inst_spfm_add_sub_ff_stage2[77] ?
										 6'd22 :
										 (inst_spfm_add_sub_ff_stage2[76] ?
										    6'd23 :
										    (inst_spfm_add_sub_ff_stage2[75] ?
										       6'd24 :
										       (inst_spfm_add_sub_ff_stage2[74] ?
											  6'd25 :
											  (inst_spfm_add_sub_ff_stage2[73] ?
											     6'd26 :
											     (inst_spfm_add_sub_ff_stage2[72] ?
												6'd27 :
												(inst_spfm_add_sub_ff_stage2[71] ?
												   6'd28 :
												   (inst_spfm_add_sub_ff_stage2[70] ?
												      6'd29 :
												      (inst_spfm_add_sub_ff_stage2[69] ?
													 6'd30 :
													 (inst_spfm_add_sub_ff_stage2[68] ?
													    6'd31 :
													    (inst_spfm_add_sub_ff_stage2[67] ?
													       6'd32 :
													       (inst_spfm_add_sub_ff_stage2[66] ?
														  6'd33 :
														  (inst_spfm_add_sub_ff_stage2[65] ?
														     6'd34 :
														     (inst_spfm_add_sub_ff_stage2[64] ?
															6'd35 :
															(inst_spfm_add_sub_ff_stage2[63] ?
															   6'd36 :
															   (inst_spfm_add_sub_ff_stage2[62] ?
															      6'd37 :
															      (inst_spfm_add_sub_ff_stage2[61] ?
																 6'd38 :
																 (inst_spfm_add_sub_ff_stage2[60] ?
																    6'd39 :
																    (inst_spfm_add_sub_ff_stage2[59] ?
																       6'd40 :
																       (inst_spfm_add_sub_ff_stage2[58] ?
																	  6'd41 :
																	  (inst_spfm_add_sub_ff_stage2[57] ?
																	     6'd42 :
																	     (inst_spfm_add_sub_ff_stage2[56] ?
																		6'd43 :
																		(inst_spfm_add_sub_ff_stage2[55] ?
																		   6'd44 :
																		   (inst_spfm_add_sub_ff_stage2[54] ?
																		      6'd45 :
																		      (inst_spfm_add_sub_ff_stage2[53] ?
																			 6'd46 :
																			 (inst_spfm_add_sub_ff_stage2[52] ?
																			    6'd47 :
																			    6'd49))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign msb_zeros__h21402 =
	     inst_spfm_add_sub_ff_stage2[99] ?
	       msb_zeros___1__h21427 :
	       msb_zeros__h14358 ;
  assign msb_zeros__h4233 =
	     inst_spfpu_divider_int_div_wr_final_out$wget[26] ?
	       5'd0 :
	       (inst_spfpu_divider_int_div_wr_final_out$wget[25] ?
		  5'd1 :
		  (inst_spfpu_divider_int_div_wr_final_out$wget[24] ?
		     5'd2 :
		     (inst_spfpu_divider_int_div_wr_final_out$wget[23] ?
			5'd3 :
			(inst_spfpu_divider_int_div_wr_final_out$wget[22] ?
			   5'd4 :
			   (inst_spfpu_divider_int_div_wr_final_out$wget[21] ?
			      5'd5 :
			      (inst_spfpu_divider_int_div_wr_final_out$wget[20] ?
				 5'd6 :
				 (inst_spfpu_divider_int_div_wr_final_out$wget[19] ?
				    5'd7 :
				    (inst_spfpu_divider_int_div_wr_final_out$wget[18] ?
				       5'd8 :
				       (inst_spfpu_divider_int_div_wr_final_out$wget[17] ?
					  5'd9 :
					  (inst_spfpu_divider_int_div_wr_final_out$wget[16] ?
					     5'd10 :
					     (inst_spfpu_divider_int_div_wr_final_out$wget[15] ?
						5'd11 :
						(inst_spfpu_divider_int_div_wr_final_out$wget[14] ?
						   5'd12 :
						   (inst_spfpu_divider_int_div_wr_final_out$wget[13] ?
						      5'd13 :
						      (inst_spfpu_divider_int_div_wr_final_out$wget[12] ?
							 5'd14 :
							 (inst_spfpu_divider_int_div_wr_final_out$wget[11] ?
							    5'd15 :
							    (inst_spfpu_divider_int_div_wr_final_out$wget[10] ?
							       5'd16 :
							       (inst_spfpu_divider_int_div_wr_final_out$wget[9] ?
								  5'd17 :
								  (inst_spfpu_divider_int_div_wr_final_out$wget[8] ?
								     5'd18 :
								     (inst_spfpu_divider_int_div_wr_final_out$wget[7] ?
									5'd19 :
									(inst_spfpu_divider_int_div_wr_final_out$wget[6] ?
									   5'd20 :
									   (inst_spfpu_divider_int_div_wr_final_out$wget[5] ?
									      5'd21 :
									      (inst_spfpu_divider_int_div_wr_final_out$wget[4] ?
										 5'd22 :
										 (inst_spfpu_divider_int_div_wr_final_out$wget[3] ?
										    5'd23 :
										    (inst_spfpu_divider_int_div_wr_final_out$wget[2] ?
										       5'd24 :
										       (inst_spfpu_divider_int_div_wr_final_out$wget[1] ?
											  5'd25 :
											  (inst_spfpu_divider_int_div_wr_final_out$wget[0] ?
											     5'd26 :
											     5'd27)))))))))))))))))))))))))) ;
  assign new_value_fflags__h92797 =
	     (x__read__h720[30:23] == 8'd255 &&
	      x__read__h720[22:0] == 23'd0 ||
	      x__read__h720[30:23] != 8'd0 &&
	      x__read__h720[30:23] != 8'd255 ||
	      x__read__h720[30:23] == 8'd0 && x__read__h720[22:0] != 23'd0 ||
	      x__read__h720[30:23] != 8'd255 &&
	      x__read__h720[22:0] != 23'd8388607 ||
	      !x__read__h720[31]) ?
	       5'd0 :
	       _theResult___fst__h93378 ;
  assign new_value_final_result__h65729 =
	     (x__read__h720 == 32'd0) ?
	       x__read__h720 :
	       _theResult___snd__h70322 ;
  assign new_value_final_result__h72698 =
	     { CASE_x__read37_0b0_IF_wr_operand2_whas__241_TH_ETC__q10,
	       x__read__h720[30:0] } ;
  assign new_value_final_result__h90492 =
	     (!IF_wr_imm_whas__821_THEN_wr_imm_wget__822_ELSE_0___d1823[0] &&
	      x__read__h720[31]) ?
	       final_result__h90509 :
	       IF_IF_wr_imm_whas__821_THEN_wr_imm_wget__822_E_ETC___d1905 ;
  assign new_value_final_result__h92796 = { 22'd0, x__h92799 } ;
  assign op3_is_subnormal__h25041 =
	     inst_spfm_add_sub_ff_stage2[26:4] != 23'd0 &
	     exp3_is_zero__h25040 ;
  assign result_exponent___1__h12945 =
	     inst_spfpu_sqrt_rg_inter_stage[67:59] + 9'd1 ;
  assign result_exponent__h80514 = x__h80549 + y__h80550 ;
  assign result_mantissa__h11981 =
	     { inst_spfpu_sqrt_rg_inter_stage[92:69],
	       !_theResult____h11978[28],
	       1'd0 } ;
  assign result_mantissa__h12369 =
	     { inst_spfpu_sqrt_rg_inter_stage[93:69],
	       !_theResult____h11978[28] } ;
  assign result_mantissa__h88178 =
	     { IF_IF_0_CONCAT_IF_IF_IF_wr_operand1_whas__236__ETC__q11[24:0],
	       1'd0 } ;
  assign resultant_exponent___1__h64597 = lv_minuend__h48890 + 10'd1 ;
  assign resultant_exponent___2__h64599 =
	     lv_minuend__h48890 -
	     _0_CONCAT_IF_IF_inst_spfm_add_sub_ff_stage3_81__ETC___d1116 ;
  assign resultant_exponent__h64575 =
	     _theResult_____3__h54043[72] ?
	       resultant_exponent___1__h64597 :
	       y_avValue_fst__h64567 ;
  assign resultant_mantissa__h54098 =
	     lv_mantissa2__h48900 + lv_mantissa3__h48901 ;
  assign resultant_mantissa__h54100 =
	     lv_mantissa2__h48900 - lv_mantissa3__h48901 ;
  assign resultant_mantissa__h54101 =
	     lv_mantissa3__h48901 - lv_mantissa2__h48900 ;
  assign resultant_mantissa__h64576 =
	     _theResult_____3__h54043[72] ?
	       resultant_mantissa__h64596 :
	       y_avValue_snd__h64568 ;
  assign resultant_mantissa__h64596 =
	     { 1'd0,
	       _theResult_____3__h54043[72:2],
	       _theResult_____3__h54043[0] | _theResult_____3__h54043[1] } ;
  assign resultant_mantissa__h64598 = _theResult_____3__h54043 << x__h64708 ;
  assign resultant_sign__h54041 = x__h54074 | y__h54075 ;
  assign sign2__h25028 =
	     inst_spfm_add_sub_ff_stage2[46] ^
	     inst_spfm_add_sub_ff_stage2[48] ;
  assign sign3__h25031 =
	     inst_spfm_add_sub_ff_stage2[35] ^
	     inst_spfm_add_sub_ff_stage2[48] ;
  assign start_fsr_BITS_7_TO_5_096_ULE_4___d2097 = _start_fsr[7:5] <= 3'd4 ;
  assign temp1__h13771 = { 64'd0, accum__h13769 } ;
  assign v__h10956 = lv_exponent__h10887 + 10'd1 ;
  assign v__h25183 =
	     inst_spfm_add_sub_ff_stage2[0] ?
	       lv_result_is_zero___1__h25200 :
	       v__h25205 ;
  assign v__h25205 =
	     (inst_spfm_add_sub_ff_stage2[3:1] == 3'b010 &&
	      inst_spfm_add_sub_ff_stage2_34_BIT_46_86_XOR_i_ETC___d593 ||
	      inst_spfm_add_sub_ff_stage2[3:1] != 3'b010 &&
	      inst_spfm_add_sub_ff_stage2_34_BIT_46_86_XOR_i_ETC___d596) ?
	       2'b11 :
	       v__h25287 ;
  assign v__h25287 = sign2__h25028 ? lv_result_is_zero___1__h25315 : 2'b01 ;
  assign x1_avValue_fst__h10352 =
	     inst_spfpu_divider_rg_stage2_7_BITS_17_TO_8_56_ETC___d158 ?
	       y_avValue_fst__h10350 :
	       inst_spfpu_divider_rg_stage2[17:8] ;
  assign x1_avValue_snd_snd_fst__h90148 =
	     IF_wr_imm_whas__821_THEN_wr_imm_wget__822_ELSE_0___d1823[1] ?
	       y_avValue_snd_snd_fst__h90146 :
	       y_avValue_snd_snd_fst__h90144 ;
  assign x__h10689 = lv_quotient__h10359[1] | _theResult_____7__h10611 ;
  assign x__h10785 = x__h10787 | _theResult_____7__h10611 ;
  assign x__h10787 = lv_quotient__h10359[2] | lv_quotient__h10359[1] ;
  assign x__h11296 = _theResult_____7__h10611 | lv_quotient__h10359[2] ;
  assign x__h12344 =
	     { inst_spfpu_sqrt_rg_inter_stage[27:3],
	       !_theResult____h11978[28] } ;
  assign x__h12778 =
	     inst_spfpu_sqrt_rg_inter_stage[70] | !_theResult____h11978[28] ;
  assign x__h12836 = !_theResult____h11978[28] | lv_sticky__h12376 ;
  assign x__h12851 = x__h12853 | lv_sticky__h12376 ;
  assign x__h12853 =
	     inst_spfpu_sqrt_rg_inter_stage[69] | !_theResult____h11978[28] ;
  assign x__h13784 = { 105'd0, inst_spfm_add_sub_ff_input_register[75:52] } ;
  assign x__h14025 = inst_spfm_add_sub_mult_rg_state_counter + 7'd1 ;
  assign x__h25484 = msb_zeros__h21402 - 6'd1 ;
  assign x__h25533 = { 4'd0, msb_zeros__h21402 } ;
  assign x__h48655 = sign2__h25028 ^ y__h25234 ;
  assign x__h48685 = x__h48687 & sign2__h25028 ;
  assign x__h48687 = inst_spfm_add_sub_ff_stage2[49] & y__h48688 ;
  assign x__h48689 = x__h48691 & lv_op3_is_infinity__h25046 ;
  assign x__h48691 = ~inst_spfm_add_sub_ff_stage2[49] ;
  assign x__h48775 =
	     inst_spfm_add_sub_ff_stage2_34_BITS_45_TO_36_4_ETC___d442 &&
	     (!inst_spfm_add_sub_ff_stage2[99] ||
	      inst_spfm_add_sub_ff_stage2[45:36] != 10'd254) &&
	     _0_CONCAT_inst_spfm_add_sub_ff_stage2_34_BITS_4_ETC___d453 ;
  assign x__h49034 =
	     mantissa_to_shift__h48893[0] ?
	       7'd0 :
	       (mantissa_to_shift__h48893[1] ?
		  7'd1 :
		  (mantissa_to_shift__h48893[2] ?
		     7'd2 :
		     (mantissa_to_shift__h48893[3] ?
			7'd3 :
			(mantissa_to_shift__h48893[4] ?
			   7'd4 :
			   (mantissa_to_shift__h48893[5] ?
			      7'd5 :
			      (mantissa_to_shift__h48893[6] ?
				 7'd6 :
				 (mantissa_to_shift__h48893[7] ?
				    7'd7 :
				    (mantissa_to_shift__h48893[8] ?
				       7'd8 :
				       (mantissa_to_shift__h48893[9] ?
					  7'd9 :
					  (mantissa_to_shift__h48893[10] ?
					     7'd10 :
					     (mantissa_to_shift__h48893[11] ?
						7'd11 :
						(mantissa_to_shift__h48893[12] ?
						   7'd12 :
						   (mantissa_to_shift__h48893[13] ?
						      7'd13 :
						      (mantissa_to_shift__h48893[14] ?
							 7'd14 :
							 (mantissa_to_shift__h48893[15] ?
							    7'd15 :
							    (mantissa_to_shift__h48893[16] ?
							       7'd16 :
							       (mantissa_to_shift__h48893[17] ?
								  7'd17 :
								  (mantissa_to_shift__h48893[18] ?
								     7'd18 :
								     (mantissa_to_shift__h48893[19] ?
									7'd19 :
									(mantissa_to_shift__h48893[20] ?
									   7'd20 :
									   (mantissa_to_shift__h48893[21] ?
									      7'd21 :
									      (mantissa_to_shift__h48893[22] ?
										 7'd22 :
										 (mantissa_to_shift__h48893[23] ?
										    7'd23 :
										    (mantissa_to_shift__h48893[24] ?
										       7'd24 :
										       (mantissa_to_shift__h48893[25] ?
											  7'd25 :
											  (mantissa_to_shift__h48893[26] ?
											     7'd26 :
											     (mantissa_to_shift__h48893[27] ?
												7'd27 :
												(mantissa_to_shift__h48893[28] ?
												   7'd28 :
												   (mantissa_to_shift__h48893[29] ?
												      7'd29 :
												      (mantissa_to_shift__h48893[30] ?
													 7'd30 :
													 (mantissa_to_shift__h48893[31] ?
													    7'd31 :
													    (mantissa_to_shift__h48893[32] ?
													       7'd32 :
													       (mantissa_to_shift__h48893[33] ?
														  7'd33 :
														  (mantissa_to_shift__h48893[34] ?
														     7'd34 :
														     (mantissa_to_shift__h48893[35] ?
															7'd35 :
															(mantissa_to_shift__h48893[36] ?
															   7'd36 :
															   (mantissa_to_shift__h48893[37] ?
															      7'd37 :
															      (mantissa_to_shift__h48893[38] ?
																 7'd38 :
																 (mantissa_to_shift__h48893[39] ?
																    7'd39 :
																    (mantissa_to_shift__h48893[40] ?
																       7'd40 :
																       (mantissa_to_shift__h48893[41] ?
																	  7'd41 :
																	  (mantissa_to_shift__h48893[42] ?
																	     7'd42 :
																	     (mantissa_to_shift__h48893[43] ?
																		7'd43 :
																		(mantissa_to_shift__h48893[44] ?
																		   7'd44 :
																		   (mantissa_to_shift__h48893[45] ?
																		      7'd45 :
																		      (mantissa_to_shift__h48893[46] ?
																			 7'd46 :
																			 (mantissa_to_shift__h48893[47] ?
																			    7'd47 :
																			    (mantissa_to_shift__h48893[48] ?
																			       7'd48 :
																			       (mantissa_to_shift__h48893[49] ?
																				  7'd49 :
																				  (mantissa_to_shift__h48893[50] ?
																				     7'd50 :
																				     (mantissa_to_shift__h48893[51] ?
																					7'd51 :
																					(mantissa_to_shift__h48893[52] ?
																					   7'd52 :
																					   (mantissa_to_shift__h48893[53] ?
																					      7'd53 :
																					      (mantissa_to_shift__h48893[54] ?
																						 7'd54 :
																						 (mantissa_to_shift__h48893[55] ?
																						    7'd55 :
																						    (mantissa_to_shift__h48893[56] ?
																						       7'd56 :
																						       (mantissa_to_shift__h48893[57] ?
																							  7'd57 :
																							  (mantissa_to_shift__h48893[58] ?
																							     7'd58 :
																							     (mantissa_to_shift__h48893[59] ?
																								7'd59 :
																								(mantissa_to_shift__h48893[60] ?
																								   7'd60 :
																								   (mantissa_to_shift__h48893[61] ?
																								      7'd61 :
																								      (mantissa_to_shift__h48893[62] ?
																									 7'd62 :
																									 (mantissa_to_shift__h48893[63] ?
																									    7'd63 :
																									    (mantissa_to_shift__h48893[64] ?
																									       7'd64 :
																									       (mantissa_to_shift__h48893[65] ?
																										  7'd65 :
																										  (mantissa_to_shift__h48893[66] ?
																										     7'd66 :
																										     (mantissa_to_shift__h48893[67] ?
																											7'd67 :
																											(mantissa_to_shift__h48893[68] ?
																											   7'd68 :
																											   (mantissa_to_shift__h48893[69] ?
																											      7'd69 :
																											      (mantissa_to_shift__h48893[70] ?
																												 7'd70 :
																												 (mantissa_to_shift__h48893[71] ?
																												    7'd71 :
																												    (mantissa_to_shift__h48893[72] ?
																												       7'd72 :
																												       7'd73)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign x__h54074 =
	     _theResult_____4__h54039 & inst_spfm_add_sub_ff_stage3[180] ;
  assign x__h54079 = ~_theResult_____4__h54039 ;
  assign x__h54231 = { 3'd0, lv_zeros_on_left__h54130 } ;
  assign x__h64708 = lv_zeros_on_left__h54130 - 7'd1 ;
  assign x__h64790 =
	     (_theResult_____3__h54043 == 73'd0) ?
	       ((inst_spfm_add_sub_ff_stage3[12:10] == 3'b010) ?
		  2'b11 :
		  2'b01) :
	       2'd0 ;
  assign x__h65050 =
	     inst_spfm_add_sub_ff_stage4[62] |
	     inst_spfm_add_sub_ff_stage4[60] ;
  assign x__h65085 =
	     inst_spfm_add_sub_ff_stage4[61] |
	     inst_spfm_add_sub_ff_stage4[60] ;
  assign x__h65651 =
	     MUX_take_new_inputs$write_1__SEL_10 ? _start_funct7 : 7'd0 ;
  assign x__h65673 =
	     MUX_take_new_inputs$write_1__SEL_10 ? _start_opcode : 5'd0 ;
  assign x__h70421 =
	     IF_NOT_IF_wr_operand2_whas__241_THEN_wr_operan_ETC___d1382[8] |
	     IF_NOT_IF_wr_operand2_whas__241_THEN_wr_operan_ETC___d1382[6] ;
  assign x__h70503 =
	     IF_NOT_IF_wr_operand2_whas__241_THEN_wr_operan_ETC___d1382[6] |
	     _theResult____h70327 ;
  assign x__h70518 = x__h70520 | _theResult____h70327 ;
  assign x__h70520 =
	     IF_NOT_IF_wr_operand2_whas__241_THEN_wr_operan_ETC___d1382[7] |
	     IF_NOT_IF_wr_operand2_whas__241_THEN_wr_operan_ETC___d1382[6] ;
  assign x__h70602 =
	     _theResult_____2__h70331[24] ?
	       lv_rounded_mantissa__h70596 :
	       _theResult_____2__h70331 ;
  assign x__h72372 = x__h72376 - 10'd127 ;
  assign x__h72376 = 10'd127 + exp2_temp__h72334 ;
  assign x__h72493 =
	     { ~(x__read__h720[30:23] == 8'd0), x__read__h720[22:0] } ;
  assign x__h73365 = exp1__h73281 + y__h73367 ;
  assign x__h73372 =
	     (~lv_op1_subnormal__h73203) ?
	       5'd0 :
	       (x__read__h720[22] ?
		  5'd1 :
		  (x__read__h720[21] ?
		     5'd2 :
		     (x__read__h720[20] ?
			5'd3 :
			(x__read__h720[19] ?
			   5'd4 :
			   (x__read__h720[18] ?
			      5'd5 :
			      (x__read__h720[17] ?
				 5'd6 :
				 (x__read__h720[16] ?
				    5'd7 :
				    (x__read__h720[15] ?
				       5'd8 :
				       (x__read__h720[14] ?
					  5'd9 :
					  (x__read__h720[13] ?
					     5'd10 :
					     (x__read__h720[12] ?
						5'd11 :
						(x__read__h720[11] ?
						   5'd12 :
						   (x__read__h720[10] ?
						      5'd13 :
						      (x__read__h720[9] ?
							 5'd14 :
							 (x__read__h720[8] ?
							    5'd15 :
							    (x__read__h720[7] ?
							       5'd16 :
							       (x__read__h720[6] ?
								  5'd17 :
								  (x__read__h720[5] ?
								     5'd18 :
								     (x__read__h720[4] ?
									5'd19 :
									(x__read__h720[3] ?
									   5'd20 :
									   (x__read__h720[2] ?
									      5'd21 :
									      (x__read__h720[1] ?
										 5'd22 :
										 (x__read__h720[0] ?
										    5'd23 :
										    5'd24))))))))))))))))))))))) ;
  assign x__h76742 =
	     (~lv_op2_subnormal__h73204) ?
	       5'd0 :
	       (IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[22] ?
		  5'd1 :
		  (IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[21] ?
		     5'd2 :
		     (IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[20] ?
			5'd3 :
			(IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[19] ?
			   5'd4 :
			   (IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[18] ?
			      5'd5 :
			      (IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[17] ?
				 5'd6 :
				 (IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[16] ?
				    5'd7 :
				    (IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[15] ?
				       5'd8 :
				       (IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[14] ?
					  5'd9 :
					  (IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[13] ?
					     5'd10 :
					     (IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[12] ?
						5'd11 :
						(IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[11] ?
						   5'd12 :
						   (IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[10] ?
						      5'd13 :
						      (IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[9] ?
							 5'd14 :
							 (IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[8] ?
							    5'd15 :
							    (IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[7] ?
							       5'd16 :
							       (IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[6] ?
								  5'd17 :
								  (IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[5] ?
								     5'd18 :
								     (IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[4] ?
									5'd19 :
									(IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[3] ?
									   5'd20 :
									   (IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[2] ?
									      5'd21 :
									      (IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[1] ?
										 5'd22 :
										 (IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[0] ?
										    5'd23 :
										    5'd24))))))))))))))))))))))) ;
  assign x__h80136 = man1__h73273 << x__h73372 ;
  assign x__h80164 = man2__h73274 << x__h76742 ;
  assign x__h80193 =
	     x__read__h720[30:23] == 8'd255 && x__read__h720[22:0] != 23'd0 ||
	     IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[30:23] ==
	     8'd255 &&
	     IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[22:0] !=
	     23'd0 ||
	     IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1520 &&
	     IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1682 ||
	     IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1521 &&
	     IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1685 ;
  assign x__h80260 =
	     (x__read__h720[30:23] != 8'd255 ||
	      x__read__h720[22:0] == 23'd0) &&
	     (IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[30:23] !=
	      8'd255 ||
	      IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[22:0] ==
	      23'd0) &&
	     (!IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1520 ||
	      !IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1682) &&
	     (!IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1521 ||
	      !IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1685) &&
	     (IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1520 ||
	      IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1685) ;
  assign x__h80284 =
	     (x__read__h720[30:23] != 8'd255 ||
	      x__read__h720[22:0] == 23'd0) &&
	     (IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[30:23] !=
	      8'd255 ||
	      IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[22:0] ==
	      23'd0) &&
	     !IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1521 &&
	     !IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1520 &&
	     IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1685 ;
  assign x__h80289 =
	     (x__read__h720[30:23] != 8'd255 ||
	      x__read__h720[22:0] == 23'd0) &&
	     (IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[30:23] !=
	      8'd255 ||
	      IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[22:0] ==
	      23'd0) &&
	     !IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1520 &&
	     !IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1685 &&
	     (IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1682 ||
	      IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1521) ;
  assign x__h80549 = x__h80551 + 9'd63 ;
  assign x__h80551 =
	     { 1'd0,
	       IF_IF_wr_operand1_whas__236_THEN_wr_operand1_w_ETC___d1754[8:1] } ;
  assign x__h80569 =
	     (x__read__h720[30:23] == 8'd0 && x__read__h720[22:0] != 23'd0) ?
	       exponent___1__h80623 :
	       exponent__h80496 ;
  assign x__h80625 = { 3'd0, lv_leading_zeros__h80502 } ;
  assign x__h88104 = lv_leading_zeros__h80502 - 6'd1 ;
  assign x__h89330 = { 32'd1, x__read__h720[22:0] } ;
  assign x__h90374 = final_result__h89925[0] | lv_mantissa__h89927[21] ;
  assign x__h90439 = lv_mantissa__h89927[21] | lv_sticky__h90316 ;
  assign x__h90454 = lv_mantissa__h89927[22] | lv_mantissa__h89927[21] ;
  assign x__h91462 = x__h91464 + y__h72373 ;
  assign x__h91464 = x__h91466 - 10'd127 ;
  assign x__h91466 = exp2_temp__h72334 + exp2_temp__h91424 ;
  assign x__h91582 =
	     { ~(IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[30:23] ==
		 8'd0),
	       IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[22:0] } ;
  assign x__h92521 = x__h65673[0] ^ x__h65673[1] ;
  assign x__h92799 =
	     (x__read__h720[31] && x__read__h720[30:23] == 8'd255 &&
	      x__read__h720[22:0] == 23'd0) ?
	       10'd1 :
	       _theResult___snd__h92956 ;
  assign x__read__h437 =
	     MUX_take_new_inputs$write_1__SEL_10 ? x_wget__h426 : 3'd0 ;
  assign x__read__h720 =
	     MUX_take_new_inputs$write_1__SEL_10 ? _start_operand1 : 32'd0 ;
  assign x_wget__h426 =
	     (_start_funct3 == 3'b111) ? _start_fsr[7:5] : _start_funct3 ;
  assign y__h10668 = x__h10689 | lv_quotient__h10359[3] ;
  assign y__h10770 = x__h10689 | inst_spfpu_divider_rg_stage2[7] ;
  assign y__h10786 = ~inst_spfpu_divider_rg_stage2[7] ;
  assign y__h12702 = x__h12778 | lv_sticky__h12376 ;
  assign y__h12835 = x__h12836 | y__h12837 ;
  assign y__h12837 = ~inst_spfpu_sqrt_rg_inter_stage[58] ;
  assign y__h25234 = inst_spfm_add_sub_ff_stage2[47] ^ sign3__h25031 ;
  assign y__h25532 = x__h25533 - 10'd1 ;
  assign y__h48686 = x__h48689 & y__h25234 ;
  assign y__h48688 = ~lv_op3_is_infinity__h25046 ;
  assign y__h54075 = x__h54079 & y__h54080 ;
  assign y__h54080 =
	     inst_spfm_add_sub_ff_stage3[9] ^
	     inst_spfm_add_sub_ff_stage3[179] ;
  assign y__h65049 = x__h65050 | lv_sticky__h64896 ;
  assign y__h65099 = ~inst_spfm_add_sub_ff_stage4[97] ;
  assign y__h70378 = x__h70421 | _theResult____h70327 ;
  assign y__h70502 = x__h70503 | y__h70504 ;
  assign y__h70504 = ~x__read__h720[31] ;
  assign y__h72373 = { 9'd0, x__read__h720[30:23] == 8'd0 } ;
  assign y__h73236 = ~(x__read__h720[22:0] == 23'd0) ;
  assign y__h73256 =
	     ~(IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[22:0] ==
	       23'd0) ;
  assign y__h73364 = x__h73365 - y__h73366 ;
  assign y__h73366 = exp2__h73282 + y__h76741 ;
  assign y__h73367 = { 9'd0, lv_op1_subnormal__h73203 } ;
  assign y__h76741 = { 9'd0, lv_op2_subnormal__h73204 } ;
  assign y__h80550 =
	     { 8'd0,
	       IF_IF_wr_operand1_whas__236_THEN_wr_operand1_w_ETC___d1754[0] } ;
  assign y__h80570 = x__h80625 - 9'd1 ;
  assign y__h90352 = x__h90374 | lv_sticky__h90316 ;
  assign y__h90438 = x__h90439 | y__h70504 ;
  assign y__h91463 =
	     { 9'd0,
	       IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[30:23] ==
	       8'd0 } ;
  assign y_avValue_fst__h10299 =
	     inst_spfpu_divider_rg_stage2[17:8] +
	     _898_MINUS_inst_spfpu_divider_rg_stage2_7_BITS__ETC___d165 ;
  assign y_avValue_fst__h10331 =
	     _898_MINUS_inst_spfpu_divider_rg_stage2_7_BITS__ETC___d167 ?
	       _theResult___fst__h10429 :
	       y_avValue_fst__h10299 ;
  assign y_avValue_fst__h10350 =
	     _0_CONCAT_inst_spfpu_divider_rg_stage2_7_BITS_1_ETC___d160 ?
	       10'd0 :
	       y_avValue_fst__h10331 ;
  assign y_avValue_fst__h10878 = _theResult_____8__h10363 + 10'd1 ;
  assign y_avValue_fst__h64554 =
	     _0_CONCAT_IF_IF_inst_spfm_add_sub_ff_stage3_81__ETC___d1118 ?
	       resultant_exponent___2__h64599 :
	       10'd0 ;
  assign y_avValue_fst__h64567 =
	     _theResult_____3__h54043[71] ?
	       lv_minuend__h48890 :
	       y_avValue_fst__h64554 ;
  assign y_avValue_fst__h89627 =
	     (IF_wr_imm_whas__821_THEN_wr_imm_wget__822_ELSE_0___d1823[0] &&
	      IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1845 ||
	      !IF_wr_imm_whas__821_THEN_wr_imm_wget__822_ELSE_0___d1823[0] &&
	      IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1849) ?
	       _1_CONCAT_IF_wr_operand1_whas__236_THEN_wr_oper_ETC___d1862[54:23] :
	       32'd1 ;
  assign y_avValue_fst__h89872 =
	     (IF_wr_imm_whas__821_THEN_wr_imm_wget__822_ELSE_0___d1823[0] &&
	      IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1828 ||
	      !IF_wr_imm_whas__821_THEN_wr_imm_wget__822_ELSE_0___d1823[0] &&
	      IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1833) ?
	       _1_CONCAT_IF_wr_operand1_whas__236_THEN_wr_oper_ETC___d1862[54:23] :
	       32'd1 ;
  assign y_avValue_fst__h89896 =
	     IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1514[7] ?
	       32'd0 :
	       y_avValue_fst__h89872 ;
  assign y_avValue_fst__h89910 =
	     IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1514[7] ?
	       32'd0 :
	       y_avValue_fst__h89627 ;
  assign y_avValue_fst__h89917 =
	     IF_wr_imm_whas__821_THEN_wr_imm_wget__822_ELSE_0___d1823[1] ?
	       y_avValue_fst__h89896 :
	       32'd1 ;
  assign y_avValue_snd__h10879 = { 1'd0, _theResult_____4__h10613[24:1] } ;
  assign y_avValue_snd__h64534 =
	     _theResult_____3__h54043 <<
	     IF_inst_spfm_add_sub_ff_stage3_81_BITS_178_TO__ETC___d1117 ;
  assign y_avValue_snd__h64555 =
	     _0_CONCAT_IF_IF_inst_spfm_add_sub_ff_stage3_81__ETC___d1118 ?
	       resultant_mantissa__h64598 :
	       y_avValue_snd__h64534 ;
  assign y_avValue_snd__h64568 =
	     _theResult_____3__h54043[71] ?
	       _theResult_____3__h54043 :
	       y_avValue_snd__h64555 ;
  assign y_avValue_snd_fst__h10405 =
	     _0_CONCAT_inst_spfpu_divider_rg_stage2_7_BITS_1_ETC___d160 ?
	       27'd1 :
	       y_avValue_snd_fst__h10411 ;
  assign y_avValue_snd_fst__h10411 =
	     _898_MINUS_inst_spfpu_divider_rg_stage2_7_BITS__ETC___d167 ?
	       _theResult___snd_fst__h10431 :
	       lv_quotient___1__h8301 ;
  assign y_avValue_snd_snd__h48615 =
	     (inst_spfm_add_sub_ff_stage2[34:27] == 8'd0 &&
	      inst_spfm_add_sub_ff_stage2[26:4] == 23'd0 &&
	      inst_spfm_add_sub_ff_stage2[51]) ?
	       v__h25183 :
	       2'd0 ;
  assign y_avValue_snd_snd_fst__h90144 =
	     !IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1514[7] &&
	     (!IF_wr_imm_whas__821_THEN_wr_imm_wget__822_ELSE_0___d1823[0] ||
	      !IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1845) &&
	     (IF_wr_imm_whas__821_THEN_wr_imm_wget__822_ELSE_0___d1823[0] ||
	      !IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1849) ;
  assign y_avValue_snd_snd_fst__h90146 =
	     IF_wr_imm_whas__821_THEN_wr_imm_wget__822_ELSE_0___d1823[1] &&
	     !IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1514[7] &&
	     (!IF_wr_imm_whas__821_THEN_wr_imm_wget__822_ELSE_0___d1823[0] ||
	      !IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1828) &&
	     (IF_wr_imm_whas__821_THEN_wr_imm_wget__822_ELSE_0___d1823[0] ||
	      !IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1833) ;
  assign y_avValue_snd_snd_snd__h25467 =
	     lv_product_exponent__h21406 +
	     _898_MINUS_IF_inst_spfm_add_sub_ff_stage2_34_BI_ETC___d458 ;
  assign y_avValue_snd_snd_snd__h90145 =
	     IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1514[7] ?
	       x__read__h720[22:0] :
	       y_avValue_snd_snd_snd__h90161 ;
  assign y_avValue_snd_snd_snd__h90147 =
	     IF_wr_imm_whas__821_THEN_wr_imm_wget__822_ELSE_0___d1823[1] ?
	       y_avValue_snd_snd_snd__h90231 :
	       x__read__h720[22:0] ;
  assign y_avValue_snd_snd_snd__h90161 =
	     (IF_wr_imm_whas__821_THEN_wr_imm_wget__822_ELSE_0___d1823[0] &&
	      IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1845 ||
	      !IF_wr_imm_whas__821_THEN_wr_imm_wget__822_ELSE_0___d1823[0] &&
	      IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1849) ?
	       _1_CONCAT_IF_wr_operand1_whas__236_THEN_wr_oper_ETC___d1862[22:0] :
	       x__read__h720[22:0] ;
  assign y_avValue_snd_snd_snd__h90231 =
	     IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1514[7] ?
	       x__read__h720[22:0] :
	       y_avValue_snd_snd_snd__h90246 ;
  assign y_avValue_snd_snd_snd__h90246 =
	     (IF_wr_imm_whas__821_THEN_wr_imm_wget__822_ELSE_0___d1823[0] &&
	      IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1828 ||
	      !IF_wr_imm_whas__821_THEN_wr_imm_wget__822_ELSE_0___d1823[0] &&
	      IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1833) ?
	       _1_CONCAT_IF_wr_operand1_whas__236_THEN_wr_oper_ETC___d1862[22:0] :
	       x__read__h720[22:0] ;
  assign y_avValue_snd_snd_snd_fst__h25422 =
	     _0_CONCAT_inst_spfm_add_sub_ff_stage2_34_BITS_4_ETC___d453 ?
	       49'd1 :
	       y_avValue_snd_snd_snd_fst__h25444 ;
  assign y_avValue_snd_snd_snd_fst__h25444 =
	     _898_MINUS_IF_inst_spfm_add_sub_ff_stage2_34_BI_ETC___d459 ?
	       _theResult_____1_fst__h25477 :
	       lv_product_mantissa___1__h21488 ;
  assign y_avValue_snd_snd_snd_snd_fst__h25427 =
	     _0_CONCAT_inst_spfm_add_sub_ff_stage2_34_BITS_4_ETC___d453 ?
	       10'd0 :
	       y_avValue_snd_snd_snd_snd_fst__h25450 ;
  assign y_avValue_snd_snd_snd_snd_fst__h25450 =
	     _898_MINUS_IF_inst_spfm_add_sub_ff_stage2_34_BI_ETC___d459 ?
	       _theResult_____1_snd__h25478 :
	       y_avValue_snd_snd_snd__h25467 ;
  always@(wr_exception)
  begin
    case (wr_exception[3:0])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd4, 4'd5, 4'd6, 4'd7, 4'd8:
	  CASE_wr_exception_BITS_3_TO_0_0_wr_exception_B_ETC__q1 =
	      wr_exception[3:0];
      default: CASE_wr_exception_BITS_3_TO_0_0_wr_exception_B_ETC__q1 = 4'd11;
    endcase
  end
  always@(inst_spfm_add_sub_ff_stage2 or
	  mantissa3__h25152 or _theResult_____3_fst__h25157)
  begin
    case (inst_spfm_add_sub_ff_stage2[34:27])
      8'd0: mantissa3__h25043 = _theResult_____3_fst__h25157;
      8'd255: mantissa3__h25043 = 73'd0;
      default: mantissa3__h25043 = mantissa3__h25152;
    endcase
  end
  always@(inst_spfm_add_sub_mult_rg_state_counter or x__h14025)
  begin
    case (inst_spfm_add_sub_mult_rg_state_counter)
      7'd0: x__h13547 = x__h14025;
      7'd1: x__h13547 = 7'd0;
      default: x__h13547 = x__h14025;
    endcase
  end
  always@(inst_spfm_add_sub_ff_stage4 or
	  lv_inexact__h64898 or
	  y__h65099 or lv_round_up___1__h65037 or lv_round_up___1__h65073)
  begin
    case (inst_spfm_add_sub_ff_stage4[13:11])
      3'b0: _theResult____h64899 = lv_round_up___1__h65037;
      3'b010: _theResult____h64899 = lv_round_up___1__h65073;
      3'b100: _theResult____h64899 = inst_spfm_add_sub_ff_stage4[61];
      default: _theResult____h64899 =
		   inst_spfm_add_sub_ff_stage4[13:11] == 3'b011 &&
		   lv_inexact__h64898 & y__h65099;
    endcase
  end
  always@(inst_spfpu_sqrt_rg_inter_stage or
	  x__h12851 or
	  lv_roundup___1__h12690 or
	  lv_roundup___1__h12839 or lv_roundup___1__h12823)
  begin
    case (inst_spfpu_sqrt_rg_inter_stage[2:0])
      3'b0:
	  IF_inst_spfpu_sqrt_rg_inter_stage_20_BITS_2_TO_ETC___d375 =
	      lv_roundup___1__h12690;
      3'b011:
	  IF_inst_spfpu_sqrt_rg_inter_stage_20_BITS_2_TO_ETC___d375 =
	      lv_roundup___1__h12839;
      3'b100:
	  IF_inst_spfpu_sqrt_rg_inter_stage_20_BITS_2_TO_ETC___d375 =
	      lv_roundup___1__h12823;
      default: IF_inst_spfpu_sqrt_rg_inter_stage_20_BITS_2_TO_ETC___d375 =
		   inst_spfpu_sqrt_rg_inter_stage[2:0] == 3'b010 &&
		   x__h12851 & inst_spfpu_sqrt_rg_inter_stage[58];
    endcase
  end
  always@(x__read__h437 or
	  x__h70518 or
	  x__read__h720 or
	  lv_roundup___1__h70366 or
	  lv_roundup___1__h70506 or lv_roundup___1__h70490)
  begin
    case (x__read__h437)
      3'b0:
	  IF_IF_wr_funct3_whas__346_THEN_wr_funct3_wget__ETC___d1406 =
	      lv_roundup___1__h70366;
      3'b011:
	  IF_IF_wr_funct3_whas__346_THEN_wr_funct3_wget__ETC___d1406 =
	      lv_roundup___1__h70506;
      3'b100:
	  IF_IF_wr_funct3_whas__346_THEN_wr_funct3_wget__ETC___d1406 =
	      lv_roundup___1__h70490;
      default: IF_IF_wr_funct3_whas__346_THEN_wr_funct3_wget__ETC___d1406 =
		   x__read__h437 == 3'b010 && x__h70518 & x__read__h720[31];
    endcase
  end
  always@(x__read__h437 or
	  IF_IF_IF_wr_operand1_whas__236_THEN_wr_operand_ETC___d1493 or
	  IF_IF_IF_wr_operand1_whas__236_THEN_wr_operand_ETC___d1490 or
	  lv_compare_result__h70848 or
	  x__read__h720 or
	  IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243)
  begin
    case (x__read__h437)
      3'b0:
	  IF_IF_wr_funct3_whas__346_THEN_wr_funct3_wget__ETC___d1496 =
	      IF_IF_IF_wr_operand1_whas__236_THEN_wr_operand_ETC___d1493;
      3'b001:
	  IF_IF_wr_funct3_whas__346_THEN_wr_funct3_wget__ETC___d1496 =
	      IF_IF_IF_wr_operand1_whas__236_THEN_wr_operand_ETC___d1490;
      3'b010:
	  IF_IF_wr_funct3_whas__346_THEN_wr_funct3_wget__ETC___d1496 =
	      (lv_compare_result__h70848 == 2'b11 ||
	       x__read__h720[30:23] == 8'd0 && x__read__h720[22:0] == 23'd0 &&
	       IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[30:23] ==
	       8'd0 &&
	       IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[22:0] ==
	       23'd0) ?
		32'd1 :
		32'd0;
      default: IF_IF_wr_funct3_whas__346_THEN_wr_funct3_wget__ETC___d1496 =
		   32'd0;
    endcase
  end
  always@(x__read__h437 or
	  IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1551 or
	  IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243)
  begin
    case (x__read__h437)
      3'b0:
	  CASE_x__read37_0b0_IF_wr_operand2_whas__241_TH_ETC__q10 =
	      IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[31];
      3'b001:
	  CASE_x__read37_0b0_IF_wr_operand2_whas__241_TH_ETC__q10 =
	      ~IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[31];
      default: CASE_x__read37_0b0_IF_wr_operand2_whas__241_TH_ETC__q10 =
		   IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1551;
    endcase
  end
  always@(x__read__h437 or
	  lv_inexact__h90318 or
	  y__h70504 or
	  lv_round_up___1__h90340 or
	  lv_round_up___1__h90442 or lv_round_up___1__h90426)
  begin
    case (x__read__h437)
      3'b0: _theResult_____3__h90319 = lv_round_up___1__h90340;
      3'b010: _theResult_____3__h90319 = lv_round_up___1__h90442;
      3'b100: _theResult_____3__h90319 = lv_round_up___1__h90426;
      default: _theResult_____3__h90319 =
		   x__read__h437 == 3'b011 && lv_inexact__h90318 & y__h70504;
    endcase
  end
  always@(inst_spfpu_divider_rg_stage2 or
	  x__h10785 or
	  lv_round_up___1__h10656 or
	  lv_round_up___1__h10773 or lv_round_up___1__h10758)
  begin
    case (inst_spfpu_divider_rg_stage2[2:0])
      3'b0:
	  IF_inst_spfpu_divider_rg_stage2_7_BITS_2_TO_0__ETC___d266 =
	      lv_round_up___1__h10656;
      3'b011:
	  IF_inst_spfpu_divider_rg_stage2_7_BITS_2_TO_0__ETC___d266 =
	      lv_round_up___1__h10773;
      3'b100:
	  IF_inst_spfpu_divider_rg_stage2_7_BITS_2_TO_0__ETC___d266 =
	      lv_round_up___1__h10758;
      default: IF_inst_spfpu_divider_rg_stage2_7_BITS_2_TO_0__ETC___d266 =
		   inst_spfpu_divider_rg_stage2[2:0] == 3'b010 &&
		   x__h10785 & inst_spfpu_divider_rg_stage2[7];
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        inst_spfm_add_sub_ff_input_register <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 100'hAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  };
	inst_spfm_add_sub_ff_stage2 <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      180'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  };
	inst_spfm_add_sub_ff_stage3 <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      181'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  };
	inst_spfm_add_sub_ff_stage4 <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 98'h2AAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  };
	inst_spfm_add_sub_mult_partial_prod <= `BSV_ASSIGNMENT_DELAY 129'd0;
	inst_spfm_add_sub_mult_rg_state_counter <= `BSV_ASSIGNMENT_DELAY 7'd0;
	inst_spfpu_divider_int_div_rg_state <= `BSV_ASSIGNMENT_DELAY 6'd0;
	inst_spfpu_divider_rg_stage1 <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 66'h2AAAAAAAAAAAAAAAA /* unspecified value */  };
	inst_spfpu_divider_rg_stage2 <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 18'b101010101010101010 /* unspecified value */  };
	inst_spfpu_sqrt_ff_final_out <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 37'h0AAAAAAAAA /* unspecified value */  };
	inst_spfpu_sqrt_rg_state <= `BSV_ASSIGNMENT_DELAY 32'd0;
	take_new_inputs <= `BSV_ASSIGNMENT_DELAY 1'd1;
	wr_exception <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 4'b1010 /* unspecified value */  };
	wr_result <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 37'h0AAAAAAAAA /* unspecified value */  };
      end
    else
      begin
        if (inst_spfm_add_sub_ff_input_register$EN)
	  inst_spfm_add_sub_ff_input_register <= `BSV_ASSIGNMENT_DELAY
	      inst_spfm_add_sub_ff_input_register$D_IN;
	if (inst_spfm_add_sub_ff_stage2$EN)
	  inst_spfm_add_sub_ff_stage2 <= `BSV_ASSIGNMENT_DELAY
	      inst_spfm_add_sub_ff_stage2$D_IN;
	if (inst_spfm_add_sub_ff_stage3$EN)
	  inst_spfm_add_sub_ff_stage3 <= `BSV_ASSIGNMENT_DELAY
	      inst_spfm_add_sub_ff_stage3$D_IN;
	if (inst_spfm_add_sub_ff_stage4$EN)
	  inst_spfm_add_sub_ff_stage4 <= `BSV_ASSIGNMENT_DELAY
	      inst_spfm_add_sub_ff_stage4$D_IN;
	if (inst_spfm_add_sub_mult_partial_prod$EN)
	  inst_spfm_add_sub_mult_partial_prod <= `BSV_ASSIGNMENT_DELAY
	      inst_spfm_add_sub_mult_partial_prod$D_IN;
	if (inst_spfm_add_sub_mult_rg_state_counter$EN)
	  inst_spfm_add_sub_mult_rg_state_counter <= `BSV_ASSIGNMENT_DELAY
	      inst_spfm_add_sub_mult_rg_state_counter$D_IN;
	if (inst_spfpu_divider_int_div_rg_state$EN)
	  inst_spfpu_divider_int_div_rg_state <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_divider_int_div_rg_state$D_IN;
	if (inst_spfpu_divider_rg_stage1$EN)
	  inst_spfpu_divider_rg_stage1 <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_divider_rg_stage1$D_IN;
	if (inst_spfpu_divider_rg_stage2$EN)
	  inst_spfpu_divider_rg_stage2 <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_divider_rg_stage2$D_IN;
	if (inst_spfpu_sqrt_ff_final_out$EN)
	  inst_spfpu_sqrt_ff_final_out <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_sqrt_ff_final_out$D_IN;
	if (inst_spfpu_sqrt_rg_state$EN)
	  inst_spfpu_sqrt_rg_state <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_sqrt_rg_state$D_IN;
	if (take_new_inputs$EN)
	  take_new_inputs <= `BSV_ASSIGNMENT_DELAY take_new_inputs$D_IN;
	if (wr_exception$EN)
	  wr_exception <= `BSV_ASSIGNMENT_DELAY wr_exception$D_IN;
	if (wr_result$EN) wr_result <= `BSV_ASSIGNMENT_DELAY wr_result$D_IN;
      end
    if (inst_spfpu_divider_int_div_rg_inter_stage$EN)
      inst_spfpu_divider_int_div_rg_inter_stage <= `BSV_ASSIGNMENT_DELAY
	  inst_spfpu_divider_int_div_rg_inter_stage$D_IN;
    if (inst_spfpu_sqrt_rg_inter_stage$EN)
      inst_spfpu_sqrt_rg_inter_stage <= `BSV_ASSIGNMENT_DELAY
	  inst_spfpu_sqrt_rg_inter_stage$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    inst_spfm_add_sub_ff_input_register = 101'h0AAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_spfm_add_sub_ff_stage2 =
	181'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_spfm_add_sub_ff_stage3 =
	182'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_spfm_add_sub_ff_stage4 = 99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    inst_spfm_add_sub_mult_partial_prod =
	129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_spfm_add_sub_mult_rg_state_counter = 7'h2A;
    inst_spfpu_divider_int_div_rg_inter_stage = 83'h2AAAAAAAAAAAAAAAAAAAA;
    inst_spfpu_divider_int_div_rg_state = 6'h2A;
    inst_spfpu_divider_rg_stage1 = 67'h2AAAAAAAAAAAAAAAA;
    inst_spfpu_divider_rg_stage2 = 19'h2AAAA;
    inst_spfpu_sqrt_ff_final_out = 38'h2AAAAAAAAA;
    inst_spfpu_sqrt_rg_inter_stage =
	146'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_spfpu_sqrt_rg_state = 32'hAAAAAAAA;
    take_new_inputs = 1'h0;
    wr_exception = 5'h0A;
    wr_result = 38'h2AAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fpu_int_to_fp)
	begin
	  v__h70615 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fpu_int_to_fp)
	$display(v__h70615,
		 "\tGiving inputs to fpu_int_to_fp %h",
		 x__read__h720);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_fpu_int_to_fp)
	begin
	  v__h70652 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_fpu_int_to_fp)
	$display(v__h70652, "\tGot output from fpu_int_to_fp");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fpu_compare_min_max)
	begin
	  v__h71598 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fpu_compare_min_max)
	$display(v__h71598, "\tGiving inputs to fpu_compare_min_max");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_fpu_compare_min_max)
	begin
	  v__h71635 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_fpu_compare_min_max)
	$display(v__h71635, "\tGot output from fpu_compare_min_max");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fpu_sign_injection)
	begin
	  v__h72912 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fpu_sign_injection)
	$display(v__h72912, "\tGiving inputs to the fpu sign injection");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_sign_injection)
	begin
	  v__h72949 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_sign_injection)
	$display(v__h72949, "\tGot output from spfpu sign injection unit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_spfpu_divider)
	$display("Exp1: %h, Man1: %h, Exp2: %h Man2: %h",
		 x__read__h720[30:23],
		 x__read__h720[22:0],
		 IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[30:23],
		 IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[22:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_spfpu_divider)
	$display("op1 is subnormal = %b , op2 is subnormal = %b",
		 lv_op1_subnormal__h73203,
		 lv_op2_subnormal__h73204);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_spfpu_divider)
	$display("lv_sign: %h lv_exponent = %h, lv_actual_exponent = %h",
		 IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1551,
		 lv_exponent__h73283,
		 $signed(lv_exponent__h73283 - 10'd127));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_spfpu_divider)
	begin
	  v__h80328 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_spfpu_divider)
	$display(v__h80328, "\tGiving inputs to the spfpu divider");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fp_to_int)
	$display("input is %b", x__read__h720);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fp_to_int)
	$display("sign = %b exponent = %b mantissa = %b zero_flag = %b invalid_flag = %b",
		 x__read__h720[31],
		 x__read__h720[30:23],
		 x__read__h720[22:0],
		 lv_zero__h89142,
		 lv_invalid__h89140);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fp_to_int)
	$display("original_exponent = %b",
		 IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1514);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fp_to_int &&
	  IF_wr_imm_whas__821_THEN_wr_imm_wget__822_ELSE_0___d1823[1] &&
	  !IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1514[7] &&
	  IF_wr_imm_whas__821_THEN_wr_imm_wget__822_ELSE_0___d1823[0] &&
	  IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1828)
	$display("unsigned");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fp_to_int &&
	  IF_wr_imm_whas__821_THEN_wr_imm_wget__822_ELSE_0___d1823[1] &&
	  !IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1514[7] &&
	  !IF_wr_imm_whas__821_THEN_wr_imm_wget__822_ELSE_0___d1823[0] &&
	  IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1833)
	$display("signed");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fp_to_int &&
	  y_avValue_snd_snd_fst__h90146)
	$display("overflow");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fp_to_int &&
	  !IF_wr_imm_whas__821_THEN_wr_imm_wget__822_ELSE_0___d1823[1] &&
	  !IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1514[7] &&
	  IF_wr_imm_whas__821_THEN_wr_imm_wget__822_ELSE_0___d1823[0] &&
	  IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1845)
	$display("unsigned");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fp_to_int &&
	  !IF_wr_imm_whas__821_THEN_wr_imm_wget__822_ELSE_0___d1823[1] &&
	  !IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1514[7] &&
	  !IF_wr_imm_whas__821_THEN_wr_imm_wget__822_ELSE_0___d1823[0] &&
	  IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1849)
	$display("signed");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fp_to_int &&
	  !IF_wr_imm_whas__821_THEN_wr_imm_wget__822_ELSE_0___d1823[1] &&
	  y_avValue_snd_snd_fst__h90144)
	$display("overflow");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fp_to_int)
	$display("final_result = %b", final_result__h89925);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fp_to_int)
	$display("mantissa = %b", lv_mantissa__h89927);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fp_to_int)
	$display("round_up = %b", _theResult_____3__h90319);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fp_to_int)
	begin
	  v__h90554 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fp_to_int)
	$display(v__h90554,
		 "\tGiving Inputs to fpu to int Conversion Module");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfp_to_int)
	begin
	  v__h90591 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfp_to_int)
	$display(v__h90591, "\tGot output from fpu to int conversion Module");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_spfloating_classify)
	begin
	  v__h93569 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_spfloating_classify)
	$display(v__h93569, "\tGiving inputs to floating classify module");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfclass)
	begin
	  v__h93606 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfclass)
	$display(v__h93606, "\tGot output from spclassify module");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_get_outputs_fmv)
	begin
	  v__h93723 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_get_outputs_fmv)
	$display(v__h93723, "\tGiving inputs to FMV");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1)
	$display("Int Data %h rg_state %d",
		 inst_spfpu_divider_int_div_rg_inter_stage[55:0],
		 inst_spfpu_divider_int_div_rg_state);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage)
	begin
	  v__h1989 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage)
	$display(v__h1989,
		 "\t Int Data %h rg_state %d",
		 inst_spfpu_divider_int_div_rg_inter_stage[55:0],
		 inst_spfpu_divider_int_div_rg_state);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage)
	begin
	  v__h2551 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage)
	$display(v__h2551,
		 "\t End stage Int Data %h rg_state %d fpman4[0] %d",
		 inst_spfpu_divider_int_div_rg_inter_stage[55:0],
		 inst_spfpu_divider_int_div_rg_state,
		 1'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_rl_stage3)
	$display("Int Data %h", inst_spfpu_divider_int_div_wr_final_out$wget);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_rl_stage3)
	$display("MSB Zeros: %d", msb_zeros__h4233);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_rl_stage3 &&
	  inst_spfpu_divider_rg_stage2_7_BITS_17_TO_8_56_ETC___d158 &&
	  _0_CONCAT_inst_spfpu_divider_rg_stage2_7_BITS_1_ETC___d160)
	$display("lv_actual_exponent : %d bias-fpman-1 :  %d",
		 $signed(inst_spfpu_divider_rg_stage2_7_BITS_17_TO_8_56_ETC___d157),
		 23'd8388459);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_rl_stage3 &&
	  inst_spfpu_divider_rg_stage2_7_BITS_17_TO_8_56_ETC___d158 &&
	  _0_CONCAT_inst_spfpu_divider_rg_stage2_7_BITS_1_ETC___d160)
	$display("lv_underflow!!!");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_rl_stage3 &&
	  inst_spfpu_divider_rg_stage2_7_BITS_17_TO_8_56_ETC___d158 &&
	  !_0_CONCAT_inst_spfpu_divider_rg_stage2_7_BITS_1_ETC___d160)
	$display("possible_shift = %0d",
		 $signed(_898_MINUS_inst_spfpu_divider_rg_stage2_7_BITS__ETC___d165));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_rl_stage3 &&
	  inst_spfpu_divider_rg_stage2_7_BITS_17_TO_8_56_ETC___d158 &&
	  !_0_CONCAT_inst_spfpu_divider_rg_stage2_7_BITS_1_ETC___d160 &&
	  !_898_MINUS_inst_spfpu_divider_rg_stage2_7_BITS__ETC___d167)
	$display("lv_quotient = %h since exp < -126", lv_quotient___1__h8301);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_rl_stage3 &&
	  inst_spfpu_divider_rg_stage2_7_BITS_17_TO_8_56_ETC___d158 &&
	  !_0_CONCAT_inst_spfpu_divider_rg_stage2_7_BITS_1_ETC___d160 &&
	  !_898_MINUS_inst_spfpu_divider_rg_stage2_7_BITS__ETC___d167)
	$display("and thus the sticky bit = %b", lv_sticky___1__h8302);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_rl_stage3 &&
	  !inst_spfpu_divider_rg_stage2_7_BITS_17_TO_8_56_ETC___d158)
	$display("lv_overflow!!!");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_rl_stage3) $display;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_rl_stage3)
	$display("lv_quotient = %h, lv_remainder = %h, lv_exponent = %h",
		 lv_quotient__h10359,
		 inst_spfpu_divider_int_div_wr_final_out$wget[55:28],
		 _theResult_____8__h10363);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_rl_stage3 &&
	  _theResult_____4__h10613[24])
	$display("Exponent Incremented 1");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_rl_stage3 &&
	  !lv_quotient__h10359[26] &&
	  IF_IF_IF_inst_spfpu_divider_rg_stage2_7_BITS_2_ETC___d276[23])
	$display("Exponent Incremented 2");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_divider)
	begin
	  v__h80365 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_divider)
	$display(v__h80365, "\tGot output from spfpu divider");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_rl_stage2)
	$display("Numerator: %h Denominator: %h",
		 _numerator__h3507,
		 _denominator__h3506);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_rl_stage2)
	$display("Dividing Op1: %h (%d) Op2: %h (%d)",
		 _numerator__h3507,
		 _numerator__h3507,
		 _denominator__h3506,
		 _denominator__h3506);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2)
	$display("****************************************State = %d",
		 inst_spfpu_sqrt_rg_state);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2)
	$display("Remainder =%h", _theResult____h11978);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2)
	$display("Mantissa = %h", result_mantissa__h11981);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage)
	$display("****************************************State = %d",
		 inst_spfpu_sqrt_rg_state);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage)
	$display("Remainder =%h", _theResult____h11978);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage)
	$display("Mantissa = %h", result_mantissa__h11981);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt)
	begin
	  v__h88960 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt)
	$display(v__h88960, "\tGot output from spfpu sqrt");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage)
	$display("****************************************State = %d",
		 inst_spfpu_sqrt_rg_state);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage)
	$display("Remainder =%h", _theResult_____3__h12371);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage)
	$display("Mantissa = %h", lv_extended_mantissa__h12380);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_spfpu_sqrt)
	$display("Result_exponent %h bias %d exponent >> 1 %h exponent[0] %h",
		 result_exponent__h80514,
		 8'd63,
		 x__h80551,
		 IF_IF_wr_operand1_whas__236_THEN_wr_operand1_w_ETC___d1754[0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_spfpu_sqrt)
	$display("lv_remainder: %h", _theResult_____3__h87999);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_spfpu_sqrt)
	$display("****************************************State = %0d",
		 inst_spfpu_sqrt_rg_state);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_spfpu_sqrt)
	$display("Remainder = %b", _theResult_____3__h87999);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_spfpu_sqrt)
	$display("Mantissa = %b", result_mantissa__h88178);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_spfpu_sqrt)
	begin
	  v__h88896 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_spfpu_sqrt)
	$display(v__h88896, "\tGiving inputs to the spfpu sqrt");
    if (RST_N != `BSV_RESET_VALUE)
      if (inst_spfm_add_sub_ff_stage4[98])
	$display("lv_guard = %b lv_round = %b lv_sticky = %b",
		 inst_spfm_add_sub_ff_stage4[61],
		 inst_spfm_add_sub_ff_stage4[60],
		 lv_sticky__h64896);
    if (RST_N != `BSV_RESET_VALUE)
      if (inst_spfm_add_sub_ff_stage4[98])
	$display("lv_round_up = %b", _theResult____h64899);
    if (RST_N != `BSV_RESET_VALUE)
      if (inst_spfm_add_sub_ff_stage4[98])
	$display("lv_rounded_mantissa = %b",
		 inst_spfm_add_sub_ff_stage4[86:62]);
    if (RST_N != `BSV_RESET_VALUE)
      if (inst_spfm_add_sub_ff_stage4[98])
	$display("lv_rounded_mantissa = %b after roundup",
		 _theResult_____4__h65149);
    if (RST_N != `BSV_RESET_VALUE)
      if (inst_spfm_add_sub_ff_stage4[98])
	$display("FMA: Result: %h", _theResult_____1__h65186);
    if (RST_N != `BSV_RESET_VALUE)
      if (inst_spfm_add_sub_ff_stage4[98])
	begin
	  v__h90688 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (inst_spfm_add_sub_ff_stage4[98])
	$display(v__h90688,
		 "\tGot output from sp fused multiple add conversion Module");
    if (RST_N != `BSV_RESET_VALUE)
      if (inst_spfm_add_sub_ff_stage4[98])
	begin
	  v__h90774 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (inst_spfm_add_sub_ff_stage4[98])
	$display(v__h90774,
		 "\tFMA Result : %h",
		 inst_spfm_add_sub_ff_final_out$wget[36:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (inst_spfm_add_sub_ff_stage3[181])
	$display("lv_sign2 = %b lv_exponent2 = %b lv_mantissa2 = %b",
		 inst_spfm_add_sub_ff_stage3[180],
		 lv_minuend__h48890,
		 lv_mantissa2__h48900);
    if (RST_N != `BSV_RESET_VALUE)
      if (inst_spfm_add_sub_ff_stage3[181])
	$display("lv_sign3 = %b lv_exponent3 = %b lv_mantissa3 = %b",
		 inst_spfm_add_sub_ff_stage3[179],
		 lv_minuend__h48890,
		 lv_mantissa3__h48901);
    if (RST_N != `BSV_RESET_VALUE)
      if (inst_spfm_add_sub_ff_stage3[181]) $display;
    if (RST_N != `BSV_RESET_VALUE)
      if (inst_spfm_add_sub_ff_stage3[181])
	$display("resultant_sign = %b resultant_exponent = %b resultant_mantissa = %b",
		 resultant_sign__h54041,
		 lv_minuend__h48890,
		 _theResult_____3__h54043);
    if (RST_N != `BSV_RESET_VALUE)
      if (inst_spfm_add_sub_ff_stage3[181]) $display;
    if (RST_N != `BSV_RESET_VALUE)
      if (inst_spfm_add_sub_ff_stage3[181] && !_theResult_____3__h54043[72] &&
	  !_theResult_____3__h54043[71] &&
	  !_0_CONCAT_IF_IF_inst_spfm_add_sub_ff_stage3_81__ETC___d1118)
	$display("add_sub subnormal!!!");
    if (RST_N != `BSV_RESET_VALUE)
      if (inst_spfm_add_sub_ff_stage3[181])
	$display("resultant_sign = %b resultant_exponent = %b resultant_mantissa = %b",
		 resultant_sign__h54041,
		 resultant_exponent__h64575,
		 resultant_mantissa__h64576);
    if (RST_N != `BSV_RESET_VALUE)
      if (inst_spfm_add_sub_ff_stage3[181]) $display;
    if (RST_N != `BSV_RESET_VALUE)
      if (inst_spfm_add_sub_ff_stage2[180])
	$display("lv_complete_mantissa = %h",
		 inst_spfm_add_sub_ff_stage2[179:52]);
    if (RST_N != `BSV_RESET_VALUE)
      if (inst_spfm_add_sub_ff_stage2[180])
	$display("lv_product_mantissa = %b", lv_product_mantissa__h14220);
    if (RST_N != `BSV_RESET_VALUE)
      if (inst_spfm_add_sub_ff_stage2[180])
	$display("and thus the sticky bit = %b", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (inst_spfm_add_sub_ff_stage2[180] &&
	  (!inst_spfm_add_sub_ff_stage2_34_BITS_45_TO_36_4_ETC___d442 ||
	   inst_spfm_add_sub_ff_stage2[99] &&
	   inst_spfm_add_sub_ff_stage2[45:36] == 10'd254))
	$display("lv_product_overflow!!!");
    if (RST_N != `BSV_RESET_VALUE)
      if (inst_spfm_add_sub_ff_stage2[180] && x__h48775)
	$display("lv_product_underflow!!!");
    if (RST_N != `BSV_RESET_VALUE)
      if (inst_spfm_add_sub_ff_stage2[180] &&
	  inst_spfm_add_sub_ff_stage2_34_BITS_45_TO_36_4_ETC___d462)
	$display("lv_product_mantissa = %b since exp < -126",
		 lv_product_mantissa___1__h21488);
    if (RST_N != `BSV_RESET_VALUE)
      if (inst_spfm_add_sub_ff_stage2[180] &&
	  inst_spfm_add_sub_ff_stage2_34_BITS_45_TO_36_4_ETC___d462)
	$display("and thus the sticky bit = %b", lv_sticky___1__h21489);
    if (RST_N != `BSV_RESET_VALUE)
      if (inst_spfm_add_sub_ff_stage2[180] &&
	  NOT_inst_spfm_add_sub_ff_stage2_34_BIT_50_72_7_ETC___d602)
	$display("Oops");
    if (RST_N != `BSV_RESET_VALUE)
      if (inst_spfm_add_sub_ff_stage2[180])
	$display("sign2 = %b exponent2 = %b mantissa2 = %b",
		 sign2__h25028,
		 exponent2__h25382,
		 mantissa2__h25383);
    if (RST_N != `BSV_RESET_VALUE)
      if (inst_spfm_add_sub_ff_stage2[180])
	$display("sign3 = %b exponent3 = %b mantissa3 = %b",
		 sign3__h25031,
		 exponent3__h25047,
		 mantissa3__h25043);
    if (RST_N != `BSV_RESET_VALUE)
      if (inst_spfm_add_sub_ff_stage2[180])
	$display("lv_result_is_zero = %b lv_result_is_infinity = %b lv_result_is_invalid = %b",
		 lv_result_is_zero__h25380,
		 lv_result_is_infinity__h25379,
		 lv_result_is_invalid__h25377);
    if (RST_N != `BSV_RESET_VALUE)
      if (inst_spfm_add_sub_ff_input_register[100])
	$display("Taken inputs in multiplier. rs1: %h rs2: %h",
		 inp1__h13644,
		 inp2__h13645);
    if (RST_N != `BSV_RESET_VALUE)
      if (inst_spfm_add_sub_ff_input_register[100])
	$display("Register State Counter %h",
		 inst_spfm_add_sub_mult_rg_state_counter);
    if (RST_N != `BSV_RESET_VALUE)
      if (inst_spfm_add_sub_ff_input_register[100])
	$display("partial_prod %h", inst_spfm_add_sub_mult_partial_prod);
    if (RST_N != `BSV_RESET_VALUE)
      if (inst_spfm_add_sub_ff_input_register[100] &&
	  inst_spfm_add_sub_mult_rg_state_counter != 7'd0)
	$display("multiplication. Partial :%h Counter: %d",
		 temp1__h13771,
		 inst_spfm_add_sub_mult_rg_state_counter);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fpu_add_sub)
	begin
	  v__h71833 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fpu_add_sub)
	$display(v__h71833,
		 "\top1 is subnormal = %b , op2 is subnormal = %b",
		 1'd0,
		 x__read__h720[30:23] == 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fpu_add_sub)
	begin
	  v__h71921 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fpu_add_sub)
	$display(v__h71921,
		 "\tsign1 = %b exponent1 = %b actual_exponent1 = %0d mantissa1 = %b.%b",
		 1'd0,
		 8'd127,
		 $signed(8'd0),
		 1'd1,
		 23'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fpu_add_sub)
	begin
	  v__h72018 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fpu_add_sub)
	$display(v__h72018,
		 "\tsign2 = %b exponent2 = %b actual_exponent2 = %0d mantissa2 = %b.%b",
		 x__read__h720[31],
		 x__read__h720[30:23],
		 $signed(IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1514),
		 ~(x__read__h720[30:23] == 8'd0),
		 x__read__h720[22:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fpu_add_sub)
	begin
	  v__h72105 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fpu_add_sub)
	$display(v__h72105,
		 "\tsign3 = %b exponent3 = %b actual_exponent3 = %0d mantissa3 = %0b.%b",
		 IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[31],
		 IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[30:23],
		 $signed(IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[30:23] -
			 8'd127),
		 IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[30:23] !=
		 8'd0,
		 IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[22:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fpu_add_sub)
	$display("lv_inv : %h lv_inf : %h lv_zero : %h",
		 lv_inv__h72207,
		 lv_inf__h72206,
		 lv_zero__h72204);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fpu_add_sub)
	$display("lv_summed_exponent = %b, lv_actual_exponent = %0d",
		 lv_summed_exponent__h72335,
		 $signed(lv_summed_exponent__h72335[8:0] - 9'd127));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fpu_add_sub)
	begin
	  v__h72608 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fpu_add_sub)
	$display(v__h72608, "\tGiving inputs to the fpu add_sub");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_spfloating_multiplier)
	$display("wr_funct3 : %h", x__read__h437);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_spfloating_multiplier)
	begin
	  v__h90917 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_spfloating_multiplier)
	$display(v__h90917,
		 "\top1 is subnormal = %b , op2 is subnormal = %b",
		 x__read__h720[30:23] == 8'd0,
		 IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[30:23] ==
		 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_spfloating_multiplier)
	begin
	  v__h91007 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_spfloating_multiplier)
	$display(v__h91007,
		 "\tsign1 = %b exponent1 = %b actual_exponent1 = %0d mantissa1 = %b.%b",
		 x__read__h720[31],
		 x__read__h720[30:23],
		 $signed(IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1514),
		 ~(x__read__h720[30:23] == 8'd0),
		 x__read__h720[22:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_spfloating_multiplier)
	begin
	  v__h91094 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_spfloating_multiplier)
	$display(v__h91094,
		 "\tsign2 = %b exponent2 = %b actual_exponent2 = %0d mantissa2 = %b.%b",
		 IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[31],
		 IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[30:23],
		 $signed(IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[30:23] -
			 8'd127),
		 ~(IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[30:23] ==
		   8'd0),
		 IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[22:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_spfloating_multiplier)
	begin
	  v__h91181 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_spfloating_multiplier)
	$display(v__h91181,
		 "\tsign3 = %b exponent3 = %b actual_exponent3 = %0d mantissa3 = %0b.%b",
		 1'd0,
		 8'd0,
		 $signed(8'd129),
		 1'b0,
		 23'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_spfloating_multiplier)
	$display("lv_inv : %h lv_inf : %h lv_zero : %h",
		 lv_inv__h91277,
		 lv_inf__h91276,
		 lv_zero__h91274);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_spfloating_multiplier)
	$display("lv_summed_exponent = %b, lv_actual_exponent = %0d",
		 lv_summed_exponent__h91425,
		 $signed(lv_summed_exponent__h91425[8:0] - 9'd127));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_spfloating_multiplier)
	begin
	  v__h91676 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_spfloating_multiplier)
	$display(v__h91676,
		 "\tGiving inputs to the spfloating multiplier module");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fm_add_sub)
	begin
	  v__h91775 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fm_add_sub)
	$display(v__h91775,
		 "\top1 is subnormal = %b , op2 is subnormal = %b",
		 x__read__h720[30:23] == 8'd0,
		 IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[30:23] ==
		 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fm_add_sub)
	begin
	  v__h91865 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fm_add_sub)
	$display(v__h91865,
		 "\tsign1 = %b exponent1 = %b actual_exponent1 = %0d mantissa1 = %b.%b",
		 x__read__h720[31],
		 x__read__h720[30:23],
		 $signed(IF_wr_operand1_whas__236_THEN_wr_operand1_wget_ETC___d1514),
		 ~(x__read__h720[30:23] == 8'd0),
		 x__read__h720[22:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fm_add_sub)
	begin
	  v__h91952 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fm_add_sub)
	$display(v__h91952,
		 "\tsign2 = %b exponent2 = %b actual_exponent2 = %0d mantissa2 = %b.%b",
		 IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[31],
		 IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[30:23],
		 $signed(IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[30:23] -
			 8'd127),
		 ~(IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[30:23] ==
		   8'd0),
		 IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243[22:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fm_add_sub)
	begin
	  v__h92039 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fm_add_sub)
	$display(v__h92039,
		 "\tsign3 = %b exponent3 = %b actual_exponent3 = %0d mantissa3 = %0b.%b",
		 _operand3__h91734[31],
		 _operand3__h91734[30:23],
		 $signed(_operand3__h91734[30:23] - 8'd127),
		 _operand3__h91734[30:23] != 8'd0,
		 _operand3__h91734[22:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fm_add_sub)
	$display("lv_inv : %h lv_inf : %h lv_zero : %h",
		 lv_inv__h91277,
		 lv_inf__h91276,
		 lv_zero__h91274);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fm_add_sub)
	$display("lv_summed_exponent = %b, lv_actual_exponent = %0d",
		 lv_summed_exponent__h91425,
		 $signed(lv_summed_exponent__h91425[8:0] - 9'd127));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fm_add_sub)
	begin
	  v__h92615 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fm_add_sub)
	$display(v__h92615,
		 "\tGiving Inputs to sp fused multiply add Conversion Module");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fm_add_sub)
	begin
	  v__h92646 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_give_inputs_to_fm_add_sub)
	$display(v__h92646,
		 "\tOperand 1: %h Operand 2: %h Operand 3: %h",
		 x__read__h720,
		 IF_wr_operand2_whas__241_THEN_wr_operand2_wget_ETC___d1243,
		 _operand3__h91734);
  end
  // synopsys translate_on
endmodule  // mkfpu

