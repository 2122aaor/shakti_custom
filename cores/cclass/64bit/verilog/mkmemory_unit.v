//
// Generated by Bluespec Compiler, version 2015.09.beta2 (build 34689, 2015-09-07)
//
// On Mon Dec 19 16:36:46 IST 2016
//
//
// Ports:
// Name                         I/O  size props
// RDY_input_from_memory          O     1 const
// data_to_memory                 O   137
// RDY_data_to_memory             O     1 const
// communicate_with_core          O    74
// RDY_communicate_with_core      O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// input_from_memory_mem_data     I   130
// communicate_with_core_execdata  I   332
// EN_input_from_memory           I     1
// EN_communicate_with_core       I     1
//
// Combinational paths from inputs to outputs:
//   (communicate_with_core_execdata, EN_communicate_with_core) -> data_to_memory
//   communicate_with_core_execdata -> communicate_with_core
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkmemory_unit(CLK,
		     RST_N,

		     input_from_memory_mem_data,
		     EN_input_from_memory,
		     RDY_input_from_memory,

		     data_to_memory,
		     RDY_data_to_memory,

		     communicate_with_core_execdata,
		     EN_communicate_with_core,
		     communicate_with_core,
		     RDY_communicate_with_core);
  input  CLK;
  input  RST_N;

  // action method input_from_memory
  input  [129 : 0] input_from_memory_mem_data;
  input  EN_input_from_memory;
  output RDY_input_from_memory;

  // value method data_to_memory
  output [136 : 0] data_to_memory;
  output RDY_data_to_memory;

  // actionvalue method communicate_with_core
  input  [331 : 0] communicate_with_core_execdata;
  input  EN_communicate_with_core;
  output [73 : 0] communicate_with_core;
  output RDY_communicate_with_core;

  // signals for module outputs
  wire [136 : 0] data_to_memory;
  wire [73 : 0] communicate_with_core;
  wire RDY_communicate_with_core, RDY_data_to_memory, RDY_input_from_memory;

  // inlined wires
  wire [136 : 0] wr_data_to_mem$wget;
  wire [130 : 0] wr_data_from_mem_1$wget;
  wire wr_data_to_mem$whas;

  // register wr_data_from_mem
  reg [130 : 0] wr_data_from_mem;
  wire [130 : 0] wr_data_from_mem$D_IN;
  wire wr_data_from_mem$EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_wr_data_from_mem__dreg_update,
       CAN_FIRE_communicate_with_core,
       CAN_FIRE_input_from_memory,
       WILL_FIRE_RL_wr_data_from_mem__dreg_update,
       WILL_FIRE_communicate_with_core,
       WILL_FIRE_input_from_memory;

  // remaining internal signals
  reg [63 : 0] v__h588, v__h621, v__h693, v__h736, v__h849;
  wire [63 : 0] destination_value__h965;
  wire [31 : 0] wr_data_from_mem_BITS_97_TO_66__q3;
  wire [15 : 0] wr_data_from_mem_BITS_81_TO_66__q2;
  wire [7 : 0] wr_data_from_mem_BITS_73_TO_66__q1;
  wire [3 : 0] IF_wr_data_from_mem_0_BIT_64_0_THEN_1_ELSE_IF__ETC___d43;

  // action method input_from_memory
  assign RDY_input_from_memory = 1'd1 ;
  assign CAN_FIRE_input_from_memory = 1'd1 ;
  assign WILL_FIRE_input_from_memory = EN_input_from_memory ;

  // value method data_to_memory
  assign data_to_memory =
	     { wr_data_to_mem$whas && wr_data_to_mem$wget[136],
	       wr_data_to_mem$wget[135:0] } ;
  assign RDY_data_to_memory = 1'd1 ;

  // actionvalue method communicate_with_core
  assign communicate_with_core =
	     { wr_data_from_mem[130],
	       communicate_with_core_execdata[199] ?
		 { 69'd0,
		   IF_wr_data_from_mem_0_BIT_64_0_THEN_1_ELSE_IF__ETC___d43 } :
		 { destination_value__h965,
		   communicate_with_core_execdata[198:194],
		   IF_wr_data_from_mem_0_BIT_64_0_THEN_1_ELSE_IF__ETC___d43 } } ;
  assign RDY_communicate_with_core = 1'd1 ;
  assign CAN_FIRE_communicate_with_core = 1'd1 ;
  assign WILL_FIRE_communicate_with_core = EN_communicate_with_core ;

  // rule RL_wr_data_from_mem__dreg_update
  assign CAN_FIRE_RL_wr_data_from_mem__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wr_data_from_mem__dreg_update = 1'd1 ;

  // inlined wires
  assign wr_data_to_mem$wget =
	     { 1'd1,
	       communicate_with_core_execdata[331:268],
	       communicate_with_core_execdata[266:203],
	       communicate_with_core_execdata[199],
	       communicate_with_core_execdata[202:196] } ;
  assign wr_data_to_mem$whas =
	     EN_communicate_with_core && !wr_data_from_mem[130] ;
  assign wr_data_from_mem_1$wget = { 1'd1, input_from_memory_mem_data } ;

  // register wr_data_from_mem
  assign wr_data_from_mem$D_IN =
	     { EN_input_from_memory && wr_data_from_mem_1$wget[130],
	       wr_data_from_mem_1$wget[129:0] } ;
  assign wr_data_from_mem$EN = 1'd1 ;

  // remaining internal signals
  assign IF_wr_data_from_mem_0_BIT_64_0_THEN_1_ELSE_IF__ETC___d43 =
	     wr_data_from_mem[64] ?
	       4'd1 :
	       (wr_data_from_mem[65] ? 4'd4 : 4'd0) ;
  assign destination_value__h965 =
	     (communicate_with_core_execdata[200] &&
	      communicate_with_core_execdata[202:201] == 2'b0) ?
	       { 56'd0, wr_data_from_mem[73:66] } :
	       ((communicate_with_core_execdata[200] &&
		 communicate_with_core_execdata[202:201] == 2'b01) ?
		  { 48'd0, wr_data_from_mem[81:66] } :
		  ((!communicate_with_core_execdata[200] &&
		    communicate_with_core_execdata[202:201] == 2'b0) ?
		     { {56{wr_data_from_mem_BITS_73_TO_66__q1[7]}},
		       wr_data_from_mem_BITS_73_TO_66__q1 } :
		     ((!communicate_with_core_execdata[200] &&
		       communicate_with_core_execdata[202:201] == 2'b01) ?
			{ {48{wr_data_from_mem_BITS_81_TO_66__q2[15]}},
			  wr_data_from_mem_BITS_81_TO_66__q2 } :
			((!communicate_with_core_execdata[200] &&
			  communicate_with_core_execdata[202:201] == 2'b10) ?
			   { {32{wr_data_from_mem_BITS_97_TO_66__q3[31]}},
			     wr_data_from_mem_BITS_97_TO_66__q3 } :
			   ((communicate_with_core_execdata[200] &&
			     communicate_with_core_execdata[202:201] ==
			     2'b10) ?
			      { 32'd0, wr_data_from_mem[97:66] } :
			      wr_data_from_mem[129:66]))))) ;
  assign wr_data_from_mem_BITS_73_TO_66__q1 = wr_data_from_mem[73:66] ;
  assign wr_data_from_mem_BITS_81_TO_66__q2 = wr_data_from_mem[81:66] ;
  assign wr_data_from_mem_BITS_97_TO_66__q3 = wr_data_from_mem[97:66] ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        wr_data_from_mem <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  };
      end
    else
      begin
        if (wr_data_from_mem$EN)
	  wr_data_from_mem <= `BSV_ASSIGNMENT_DELAY wr_data_from_mem$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    wr_data_from_mem = 131'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_communicate_with_core && communicate_with_core_execdata[199])
	begin
	  v__h621 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_communicate_with_core && communicate_with_core_execdata[199])
	$display(v__h621,
		 "\tMEM_STAGE: STORE Operation selected. Address: %h Data: %h",
		 communicate_with_core_execdata[331:268],
		 communicate_with_core_execdata[266:203]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_communicate_with_core && communicate_with_core_execdata[199] &&
	  !wr_data_from_mem[130])
	begin
	  v__h849 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_communicate_with_core && communicate_with_core_execdata[199] &&
	  !wr_data_from_mem[130])
	$display(v__h849, "\tMEM_STAGE: Waiting for Memory to respond");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_communicate_with_core && !communicate_with_core_execdata[199])
	begin
	  v__h588 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_communicate_with_core && !communicate_with_core_execdata[199])
	$display(v__h588,
		 "\tMEM_STAGE: LOAD Operation selected. Address: %h",
		 communicate_with_core_execdata[331:268]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_communicate_with_core && !communicate_with_core_execdata[199] &&
	  wr_data_from_mem[130])
	begin
	  v__h693 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_communicate_with_core && !communicate_with_core_execdata[199] &&
	  wr_data_from_mem[130])
	$display(v__h693,
		 "\tMEM_STAGE: Memory responded with data: %h",
		 wr_data_from_mem[129:66]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_communicate_with_core && !communicate_with_core_execdata[199] &&
	  !wr_data_from_mem[130])
	begin
	  v__h736 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_communicate_with_core && !communicate_with_core_execdata[199] &&
	  !wr_data_from_mem[130])
	$display(v__h736, "\tMEM_STAGE: Waiting for Memory to respond");
  end
  // synopsys translate_on
endmodule  // mkmemory_unit

