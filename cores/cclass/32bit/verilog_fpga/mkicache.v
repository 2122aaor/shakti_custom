//
// Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
//
// On Tue Mar 28 10:39:11 IST 2017
//
//
// Ports:
// Name                         I/O  size props
// RDY_request_from_cpu           O     1
// response_to_cpu                O    66
// RDY_response_to_cpu            O     1
// request_to_memory              O    39
// RDY_request_to_memory          O     1
// response_from_memory           O     1
// RDY_response_from_memory       O     1
// RDY_cache_enable               O     1 const
// RDY_flush                      O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// request_from_cpu_req           I    32
// response_from_memory_resp      I    65 reg
// cache_enable_enable_           I     1 reg
// EN_request_from_cpu            I     1
// EN_cache_enable                I     1
// EN_flush                       I     1
// EN_response_to_cpu             I     1
// EN_request_to_memory           I     1
// EN_response_from_memory        I     1
//
// Combinational paths from inputs to outputs:
//   EN_flush -> RDY_request_from_cpu
//   EN_flush -> RDY_response_to_cpu
//   EN_flush -> response_to_cpu
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkicache(CLK,
		RST_N,

		request_from_cpu_req,
		EN_request_from_cpu,
		RDY_request_from_cpu,

		EN_response_to_cpu,
		response_to_cpu,
		RDY_response_to_cpu,

		EN_request_to_memory,
		request_to_memory,
		RDY_request_to_memory,

		response_from_memory_resp,
		EN_response_from_memory,
		response_from_memory,
		RDY_response_from_memory,

		cache_enable_enable_,
		EN_cache_enable,
		RDY_cache_enable,

		EN_flush,
		RDY_flush);
  input  CLK;
  input  RST_N;

  // action method request_from_cpu
  input  [31 : 0] request_from_cpu_req;
  input  EN_request_from_cpu;
  output RDY_request_from_cpu;

  // actionvalue method response_to_cpu
  input  EN_response_to_cpu;
  output [65 : 0] response_to_cpu;
  output RDY_response_to_cpu;

  // actionvalue method request_to_memory
  input  EN_request_to_memory;
  output [38 : 0] request_to_memory;
  output RDY_request_to_memory;

  // actionvalue method response_from_memory
  input  [64 : 0] response_from_memory_resp;
  input  EN_response_from_memory;
  output response_from_memory;
  output RDY_response_from_memory;

  // action method cache_enable
  input  cache_enable_enable_;
  input  EN_cache_enable;
  output RDY_cache_enable;

  // action method flush
  input  EN_flush;
  output RDY_flush;

  // signals for module outputs
  wire [65 : 0] response_to_cpu;
  wire [38 : 0] request_to_memory;
  wire RDY_cache_enable,
       RDY_flush,
       RDY_request_from_cpu,
       RDY_request_to_memory,
       RDY_response_from_memory,
       RDY_response_to_cpu,
       response_from_memory;

  // inlined wires
  wire [65 : 0] cache_ff_response_to_cpu_enqw$wget;
  wire [38 : 0] cache_ff_request_to_memory_enqw$wget;
  wire [1 : 0] cache_rg_state$port0__write_1,
	       cache_rg_state$port1__read,
	       cache_rg_state$port1__write_1,
	       cache_rg_state$port2__read,
	       cache_rg_state$port3__read;
  wire cache_ff_request_to_memory_enqw$whas,
       cache_ff_response_to_cpu_enqw$whas,
       cache_rg_state$EN_port1__write,
       cache_wr_line_done$whas;

  // register cache_pseudo_lru_0
  reg [2 : 0] cache_pseudo_lru_0;
  wire [2 : 0] cache_pseudo_lru_0$D_IN;
  wire cache_pseudo_lru_0$EN;

  // register cache_pseudo_lru_1
  reg [2 : 0] cache_pseudo_lru_1;
  wire [2 : 0] cache_pseudo_lru_1$D_IN;
  wire cache_pseudo_lru_1$EN;

  // register cache_pseudo_lru_10
  reg [2 : 0] cache_pseudo_lru_10;
  wire [2 : 0] cache_pseudo_lru_10$D_IN;
  wire cache_pseudo_lru_10$EN;

  // register cache_pseudo_lru_100
  reg [2 : 0] cache_pseudo_lru_100;
  wire [2 : 0] cache_pseudo_lru_100$D_IN;
  wire cache_pseudo_lru_100$EN;

  // register cache_pseudo_lru_101
  reg [2 : 0] cache_pseudo_lru_101;
  wire [2 : 0] cache_pseudo_lru_101$D_IN;
  wire cache_pseudo_lru_101$EN;

  // register cache_pseudo_lru_102
  reg [2 : 0] cache_pseudo_lru_102;
  wire [2 : 0] cache_pseudo_lru_102$D_IN;
  wire cache_pseudo_lru_102$EN;

  // register cache_pseudo_lru_103
  reg [2 : 0] cache_pseudo_lru_103;
  wire [2 : 0] cache_pseudo_lru_103$D_IN;
  wire cache_pseudo_lru_103$EN;

  // register cache_pseudo_lru_104
  reg [2 : 0] cache_pseudo_lru_104;
  wire [2 : 0] cache_pseudo_lru_104$D_IN;
  wire cache_pseudo_lru_104$EN;

  // register cache_pseudo_lru_105
  reg [2 : 0] cache_pseudo_lru_105;
  wire [2 : 0] cache_pseudo_lru_105$D_IN;
  wire cache_pseudo_lru_105$EN;

  // register cache_pseudo_lru_106
  reg [2 : 0] cache_pseudo_lru_106;
  wire [2 : 0] cache_pseudo_lru_106$D_IN;
  wire cache_pseudo_lru_106$EN;

  // register cache_pseudo_lru_107
  reg [2 : 0] cache_pseudo_lru_107;
  wire [2 : 0] cache_pseudo_lru_107$D_IN;
  wire cache_pseudo_lru_107$EN;

  // register cache_pseudo_lru_108
  reg [2 : 0] cache_pseudo_lru_108;
  wire [2 : 0] cache_pseudo_lru_108$D_IN;
  wire cache_pseudo_lru_108$EN;

  // register cache_pseudo_lru_109
  reg [2 : 0] cache_pseudo_lru_109;
  wire [2 : 0] cache_pseudo_lru_109$D_IN;
  wire cache_pseudo_lru_109$EN;

  // register cache_pseudo_lru_11
  reg [2 : 0] cache_pseudo_lru_11;
  wire [2 : 0] cache_pseudo_lru_11$D_IN;
  wire cache_pseudo_lru_11$EN;

  // register cache_pseudo_lru_110
  reg [2 : 0] cache_pseudo_lru_110;
  wire [2 : 0] cache_pseudo_lru_110$D_IN;
  wire cache_pseudo_lru_110$EN;

  // register cache_pseudo_lru_111
  reg [2 : 0] cache_pseudo_lru_111;
  wire [2 : 0] cache_pseudo_lru_111$D_IN;
  wire cache_pseudo_lru_111$EN;

  // register cache_pseudo_lru_112
  reg [2 : 0] cache_pseudo_lru_112;
  wire [2 : 0] cache_pseudo_lru_112$D_IN;
  wire cache_pseudo_lru_112$EN;

  // register cache_pseudo_lru_113
  reg [2 : 0] cache_pseudo_lru_113;
  wire [2 : 0] cache_pseudo_lru_113$D_IN;
  wire cache_pseudo_lru_113$EN;

  // register cache_pseudo_lru_114
  reg [2 : 0] cache_pseudo_lru_114;
  wire [2 : 0] cache_pseudo_lru_114$D_IN;
  wire cache_pseudo_lru_114$EN;

  // register cache_pseudo_lru_115
  reg [2 : 0] cache_pseudo_lru_115;
  wire [2 : 0] cache_pseudo_lru_115$D_IN;
  wire cache_pseudo_lru_115$EN;

  // register cache_pseudo_lru_116
  reg [2 : 0] cache_pseudo_lru_116;
  wire [2 : 0] cache_pseudo_lru_116$D_IN;
  wire cache_pseudo_lru_116$EN;

  // register cache_pseudo_lru_117
  reg [2 : 0] cache_pseudo_lru_117;
  wire [2 : 0] cache_pseudo_lru_117$D_IN;
  wire cache_pseudo_lru_117$EN;

  // register cache_pseudo_lru_118
  reg [2 : 0] cache_pseudo_lru_118;
  wire [2 : 0] cache_pseudo_lru_118$D_IN;
  wire cache_pseudo_lru_118$EN;

  // register cache_pseudo_lru_119
  reg [2 : 0] cache_pseudo_lru_119;
  wire [2 : 0] cache_pseudo_lru_119$D_IN;
  wire cache_pseudo_lru_119$EN;

  // register cache_pseudo_lru_12
  reg [2 : 0] cache_pseudo_lru_12;
  wire [2 : 0] cache_pseudo_lru_12$D_IN;
  wire cache_pseudo_lru_12$EN;

  // register cache_pseudo_lru_120
  reg [2 : 0] cache_pseudo_lru_120;
  wire [2 : 0] cache_pseudo_lru_120$D_IN;
  wire cache_pseudo_lru_120$EN;

  // register cache_pseudo_lru_121
  reg [2 : 0] cache_pseudo_lru_121;
  wire [2 : 0] cache_pseudo_lru_121$D_IN;
  wire cache_pseudo_lru_121$EN;

  // register cache_pseudo_lru_122
  reg [2 : 0] cache_pseudo_lru_122;
  wire [2 : 0] cache_pseudo_lru_122$D_IN;
  wire cache_pseudo_lru_122$EN;

  // register cache_pseudo_lru_123
  reg [2 : 0] cache_pseudo_lru_123;
  wire [2 : 0] cache_pseudo_lru_123$D_IN;
  wire cache_pseudo_lru_123$EN;

  // register cache_pseudo_lru_124
  reg [2 : 0] cache_pseudo_lru_124;
  wire [2 : 0] cache_pseudo_lru_124$D_IN;
  wire cache_pseudo_lru_124$EN;

  // register cache_pseudo_lru_125
  reg [2 : 0] cache_pseudo_lru_125;
  wire [2 : 0] cache_pseudo_lru_125$D_IN;
  wire cache_pseudo_lru_125$EN;

  // register cache_pseudo_lru_126
  reg [2 : 0] cache_pseudo_lru_126;
  wire [2 : 0] cache_pseudo_lru_126$D_IN;
  wire cache_pseudo_lru_126$EN;

  // register cache_pseudo_lru_127
  reg [2 : 0] cache_pseudo_lru_127;
  wire [2 : 0] cache_pseudo_lru_127$D_IN;
  wire cache_pseudo_lru_127$EN;

  // register cache_pseudo_lru_13
  reg [2 : 0] cache_pseudo_lru_13;
  wire [2 : 0] cache_pseudo_lru_13$D_IN;
  wire cache_pseudo_lru_13$EN;

  // register cache_pseudo_lru_14
  reg [2 : 0] cache_pseudo_lru_14;
  wire [2 : 0] cache_pseudo_lru_14$D_IN;
  wire cache_pseudo_lru_14$EN;

  // register cache_pseudo_lru_15
  reg [2 : 0] cache_pseudo_lru_15;
  wire [2 : 0] cache_pseudo_lru_15$D_IN;
  wire cache_pseudo_lru_15$EN;

  // register cache_pseudo_lru_16
  reg [2 : 0] cache_pseudo_lru_16;
  wire [2 : 0] cache_pseudo_lru_16$D_IN;
  wire cache_pseudo_lru_16$EN;

  // register cache_pseudo_lru_17
  reg [2 : 0] cache_pseudo_lru_17;
  wire [2 : 0] cache_pseudo_lru_17$D_IN;
  wire cache_pseudo_lru_17$EN;

  // register cache_pseudo_lru_18
  reg [2 : 0] cache_pseudo_lru_18;
  wire [2 : 0] cache_pseudo_lru_18$D_IN;
  wire cache_pseudo_lru_18$EN;

  // register cache_pseudo_lru_19
  reg [2 : 0] cache_pseudo_lru_19;
  wire [2 : 0] cache_pseudo_lru_19$D_IN;
  wire cache_pseudo_lru_19$EN;

  // register cache_pseudo_lru_2
  reg [2 : 0] cache_pseudo_lru_2;
  wire [2 : 0] cache_pseudo_lru_2$D_IN;
  wire cache_pseudo_lru_2$EN;

  // register cache_pseudo_lru_20
  reg [2 : 0] cache_pseudo_lru_20;
  wire [2 : 0] cache_pseudo_lru_20$D_IN;
  wire cache_pseudo_lru_20$EN;

  // register cache_pseudo_lru_21
  reg [2 : 0] cache_pseudo_lru_21;
  wire [2 : 0] cache_pseudo_lru_21$D_IN;
  wire cache_pseudo_lru_21$EN;

  // register cache_pseudo_lru_22
  reg [2 : 0] cache_pseudo_lru_22;
  wire [2 : 0] cache_pseudo_lru_22$D_IN;
  wire cache_pseudo_lru_22$EN;

  // register cache_pseudo_lru_23
  reg [2 : 0] cache_pseudo_lru_23;
  wire [2 : 0] cache_pseudo_lru_23$D_IN;
  wire cache_pseudo_lru_23$EN;

  // register cache_pseudo_lru_24
  reg [2 : 0] cache_pseudo_lru_24;
  wire [2 : 0] cache_pseudo_lru_24$D_IN;
  wire cache_pseudo_lru_24$EN;

  // register cache_pseudo_lru_25
  reg [2 : 0] cache_pseudo_lru_25;
  wire [2 : 0] cache_pseudo_lru_25$D_IN;
  wire cache_pseudo_lru_25$EN;

  // register cache_pseudo_lru_26
  reg [2 : 0] cache_pseudo_lru_26;
  wire [2 : 0] cache_pseudo_lru_26$D_IN;
  wire cache_pseudo_lru_26$EN;

  // register cache_pseudo_lru_27
  reg [2 : 0] cache_pseudo_lru_27;
  wire [2 : 0] cache_pseudo_lru_27$D_IN;
  wire cache_pseudo_lru_27$EN;

  // register cache_pseudo_lru_28
  reg [2 : 0] cache_pseudo_lru_28;
  wire [2 : 0] cache_pseudo_lru_28$D_IN;
  wire cache_pseudo_lru_28$EN;

  // register cache_pseudo_lru_29
  reg [2 : 0] cache_pseudo_lru_29;
  wire [2 : 0] cache_pseudo_lru_29$D_IN;
  wire cache_pseudo_lru_29$EN;

  // register cache_pseudo_lru_3
  reg [2 : 0] cache_pseudo_lru_3;
  wire [2 : 0] cache_pseudo_lru_3$D_IN;
  wire cache_pseudo_lru_3$EN;

  // register cache_pseudo_lru_30
  reg [2 : 0] cache_pseudo_lru_30;
  wire [2 : 0] cache_pseudo_lru_30$D_IN;
  wire cache_pseudo_lru_30$EN;

  // register cache_pseudo_lru_31
  reg [2 : 0] cache_pseudo_lru_31;
  wire [2 : 0] cache_pseudo_lru_31$D_IN;
  wire cache_pseudo_lru_31$EN;

  // register cache_pseudo_lru_32
  reg [2 : 0] cache_pseudo_lru_32;
  wire [2 : 0] cache_pseudo_lru_32$D_IN;
  wire cache_pseudo_lru_32$EN;

  // register cache_pseudo_lru_33
  reg [2 : 0] cache_pseudo_lru_33;
  wire [2 : 0] cache_pseudo_lru_33$D_IN;
  wire cache_pseudo_lru_33$EN;

  // register cache_pseudo_lru_34
  reg [2 : 0] cache_pseudo_lru_34;
  wire [2 : 0] cache_pseudo_lru_34$D_IN;
  wire cache_pseudo_lru_34$EN;

  // register cache_pseudo_lru_35
  reg [2 : 0] cache_pseudo_lru_35;
  wire [2 : 0] cache_pseudo_lru_35$D_IN;
  wire cache_pseudo_lru_35$EN;

  // register cache_pseudo_lru_36
  reg [2 : 0] cache_pseudo_lru_36;
  wire [2 : 0] cache_pseudo_lru_36$D_IN;
  wire cache_pseudo_lru_36$EN;

  // register cache_pseudo_lru_37
  reg [2 : 0] cache_pseudo_lru_37;
  wire [2 : 0] cache_pseudo_lru_37$D_IN;
  wire cache_pseudo_lru_37$EN;

  // register cache_pseudo_lru_38
  reg [2 : 0] cache_pseudo_lru_38;
  wire [2 : 0] cache_pseudo_lru_38$D_IN;
  wire cache_pseudo_lru_38$EN;

  // register cache_pseudo_lru_39
  reg [2 : 0] cache_pseudo_lru_39;
  wire [2 : 0] cache_pseudo_lru_39$D_IN;
  wire cache_pseudo_lru_39$EN;

  // register cache_pseudo_lru_4
  reg [2 : 0] cache_pseudo_lru_4;
  wire [2 : 0] cache_pseudo_lru_4$D_IN;
  wire cache_pseudo_lru_4$EN;

  // register cache_pseudo_lru_40
  reg [2 : 0] cache_pseudo_lru_40;
  wire [2 : 0] cache_pseudo_lru_40$D_IN;
  wire cache_pseudo_lru_40$EN;

  // register cache_pseudo_lru_41
  reg [2 : 0] cache_pseudo_lru_41;
  wire [2 : 0] cache_pseudo_lru_41$D_IN;
  wire cache_pseudo_lru_41$EN;

  // register cache_pseudo_lru_42
  reg [2 : 0] cache_pseudo_lru_42;
  wire [2 : 0] cache_pseudo_lru_42$D_IN;
  wire cache_pseudo_lru_42$EN;

  // register cache_pseudo_lru_43
  reg [2 : 0] cache_pseudo_lru_43;
  wire [2 : 0] cache_pseudo_lru_43$D_IN;
  wire cache_pseudo_lru_43$EN;

  // register cache_pseudo_lru_44
  reg [2 : 0] cache_pseudo_lru_44;
  wire [2 : 0] cache_pseudo_lru_44$D_IN;
  wire cache_pseudo_lru_44$EN;

  // register cache_pseudo_lru_45
  reg [2 : 0] cache_pseudo_lru_45;
  wire [2 : 0] cache_pseudo_lru_45$D_IN;
  wire cache_pseudo_lru_45$EN;

  // register cache_pseudo_lru_46
  reg [2 : 0] cache_pseudo_lru_46;
  wire [2 : 0] cache_pseudo_lru_46$D_IN;
  wire cache_pseudo_lru_46$EN;

  // register cache_pseudo_lru_47
  reg [2 : 0] cache_pseudo_lru_47;
  wire [2 : 0] cache_pseudo_lru_47$D_IN;
  wire cache_pseudo_lru_47$EN;

  // register cache_pseudo_lru_48
  reg [2 : 0] cache_pseudo_lru_48;
  wire [2 : 0] cache_pseudo_lru_48$D_IN;
  wire cache_pseudo_lru_48$EN;

  // register cache_pseudo_lru_49
  reg [2 : 0] cache_pseudo_lru_49;
  wire [2 : 0] cache_pseudo_lru_49$D_IN;
  wire cache_pseudo_lru_49$EN;

  // register cache_pseudo_lru_5
  reg [2 : 0] cache_pseudo_lru_5;
  wire [2 : 0] cache_pseudo_lru_5$D_IN;
  wire cache_pseudo_lru_5$EN;

  // register cache_pseudo_lru_50
  reg [2 : 0] cache_pseudo_lru_50;
  wire [2 : 0] cache_pseudo_lru_50$D_IN;
  wire cache_pseudo_lru_50$EN;

  // register cache_pseudo_lru_51
  reg [2 : 0] cache_pseudo_lru_51;
  wire [2 : 0] cache_pseudo_lru_51$D_IN;
  wire cache_pseudo_lru_51$EN;

  // register cache_pseudo_lru_52
  reg [2 : 0] cache_pseudo_lru_52;
  wire [2 : 0] cache_pseudo_lru_52$D_IN;
  wire cache_pseudo_lru_52$EN;

  // register cache_pseudo_lru_53
  reg [2 : 0] cache_pseudo_lru_53;
  wire [2 : 0] cache_pseudo_lru_53$D_IN;
  wire cache_pseudo_lru_53$EN;

  // register cache_pseudo_lru_54
  reg [2 : 0] cache_pseudo_lru_54;
  wire [2 : 0] cache_pseudo_lru_54$D_IN;
  wire cache_pseudo_lru_54$EN;

  // register cache_pseudo_lru_55
  reg [2 : 0] cache_pseudo_lru_55;
  wire [2 : 0] cache_pseudo_lru_55$D_IN;
  wire cache_pseudo_lru_55$EN;

  // register cache_pseudo_lru_56
  reg [2 : 0] cache_pseudo_lru_56;
  wire [2 : 0] cache_pseudo_lru_56$D_IN;
  wire cache_pseudo_lru_56$EN;

  // register cache_pseudo_lru_57
  reg [2 : 0] cache_pseudo_lru_57;
  wire [2 : 0] cache_pseudo_lru_57$D_IN;
  wire cache_pseudo_lru_57$EN;

  // register cache_pseudo_lru_58
  reg [2 : 0] cache_pseudo_lru_58;
  wire [2 : 0] cache_pseudo_lru_58$D_IN;
  wire cache_pseudo_lru_58$EN;

  // register cache_pseudo_lru_59
  reg [2 : 0] cache_pseudo_lru_59;
  wire [2 : 0] cache_pseudo_lru_59$D_IN;
  wire cache_pseudo_lru_59$EN;

  // register cache_pseudo_lru_6
  reg [2 : 0] cache_pseudo_lru_6;
  wire [2 : 0] cache_pseudo_lru_6$D_IN;
  wire cache_pseudo_lru_6$EN;

  // register cache_pseudo_lru_60
  reg [2 : 0] cache_pseudo_lru_60;
  wire [2 : 0] cache_pseudo_lru_60$D_IN;
  wire cache_pseudo_lru_60$EN;

  // register cache_pseudo_lru_61
  reg [2 : 0] cache_pseudo_lru_61;
  wire [2 : 0] cache_pseudo_lru_61$D_IN;
  wire cache_pseudo_lru_61$EN;

  // register cache_pseudo_lru_62
  reg [2 : 0] cache_pseudo_lru_62;
  wire [2 : 0] cache_pseudo_lru_62$D_IN;
  wire cache_pseudo_lru_62$EN;

  // register cache_pseudo_lru_63
  reg [2 : 0] cache_pseudo_lru_63;
  wire [2 : 0] cache_pseudo_lru_63$D_IN;
  wire cache_pseudo_lru_63$EN;

  // register cache_pseudo_lru_64
  reg [2 : 0] cache_pseudo_lru_64;
  wire [2 : 0] cache_pseudo_lru_64$D_IN;
  wire cache_pseudo_lru_64$EN;

  // register cache_pseudo_lru_65
  reg [2 : 0] cache_pseudo_lru_65;
  wire [2 : 0] cache_pseudo_lru_65$D_IN;
  wire cache_pseudo_lru_65$EN;

  // register cache_pseudo_lru_66
  reg [2 : 0] cache_pseudo_lru_66;
  wire [2 : 0] cache_pseudo_lru_66$D_IN;
  wire cache_pseudo_lru_66$EN;

  // register cache_pseudo_lru_67
  reg [2 : 0] cache_pseudo_lru_67;
  wire [2 : 0] cache_pseudo_lru_67$D_IN;
  wire cache_pseudo_lru_67$EN;

  // register cache_pseudo_lru_68
  reg [2 : 0] cache_pseudo_lru_68;
  wire [2 : 0] cache_pseudo_lru_68$D_IN;
  wire cache_pseudo_lru_68$EN;

  // register cache_pseudo_lru_69
  reg [2 : 0] cache_pseudo_lru_69;
  wire [2 : 0] cache_pseudo_lru_69$D_IN;
  wire cache_pseudo_lru_69$EN;

  // register cache_pseudo_lru_7
  reg [2 : 0] cache_pseudo_lru_7;
  wire [2 : 0] cache_pseudo_lru_7$D_IN;
  wire cache_pseudo_lru_7$EN;

  // register cache_pseudo_lru_70
  reg [2 : 0] cache_pseudo_lru_70;
  wire [2 : 0] cache_pseudo_lru_70$D_IN;
  wire cache_pseudo_lru_70$EN;

  // register cache_pseudo_lru_71
  reg [2 : 0] cache_pseudo_lru_71;
  wire [2 : 0] cache_pseudo_lru_71$D_IN;
  wire cache_pseudo_lru_71$EN;

  // register cache_pseudo_lru_72
  reg [2 : 0] cache_pseudo_lru_72;
  wire [2 : 0] cache_pseudo_lru_72$D_IN;
  wire cache_pseudo_lru_72$EN;

  // register cache_pseudo_lru_73
  reg [2 : 0] cache_pseudo_lru_73;
  wire [2 : 0] cache_pseudo_lru_73$D_IN;
  wire cache_pseudo_lru_73$EN;

  // register cache_pseudo_lru_74
  reg [2 : 0] cache_pseudo_lru_74;
  wire [2 : 0] cache_pseudo_lru_74$D_IN;
  wire cache_pseudo_lru_74$EN;

  // register cache_pseudo_lru_75
  reg [2 : 0] cache_pseudo_lru_75;
  wire [2 : 0] cache_pseudo_lru_75$D_IN;
  wire cache_pseudo_lru_75$EN;

  // register cache_pseudo_lru_76
  reg [2 : 0] cache_pseudo_lru_76;
  wire [2 : 0] cache_pseudo_lru_76$D_IN;
  wire cache_pseudo_lru_76$EN;

  // register cache_pseudo_lru_77
  reg [2 : 0] cache_pseudo_lru_77;
  wire [2 : 0] cache_pseudo_lru_77$D_IN;
  wire cache_pseudo_lru_77$EN;

  // register cache_pseudo_lru_78
  reg [2 : 0] cache_pseudo_lru_78;
  wire [2 : 0] cache_pseudo_lru_78$D_IN;
  wire cache_pseudo_lru_78$EN;

  // register cache_pseudo_lru_79
  reg [2 : 0] cache_pseudo_lru_79;
  wire [2 : 0] cache_pseudo_lru_79$D_IN;
  wire cache_pseudo_lru_79$EN;

  // register cache_pseudo_lru_8
  reg [2 : 0] cache_pseudo_lru_8;
  wire [2 : 0] cache_pseudo_lru_8$D_IN;
  wire cache_pseudo_lru_8$EN;

  // register cache_pseudo_lru_80
  reg [2 : 0] cache_pseudo_lru_80;
  wire [2 : 0] cache_pseudo_lru_80$D_IN;
  wire cache_pseudo_lru_80$EN;

  // register cache_pseudo_lru_81
  reg [2 : 0] cache_pseudo_lru_81;
  wire [2 : 0] cache_pseudo_lru_81$D_IN;
  wire cache_pseudo_lru_81$EN;

  // register cache_pseudo_lru_82
  reg [2 : 0] cache_pseudo_lru_82;
  wire [2 : 0] cache_pseudo_lru_82$D_IN;
  wire cache_pseudo_lru_82$EN;

  // register cache_pseudo_lru_83
  reg [2 : 0] cache_pseudo_lru_83;
  wire [2 : 0] cache_pseudo_lru_83$D_IN;
  wire cache_pseudo_lru_83$EN;

  // register cache_pseudo_lru_84
  reg [2 : 0] cache_pseudo_lru_84;
  wire [2 : 0] cache_pseudo_lru_84$D_IN;
  wire cache_pseudo_lru_84$EN;

  // register cache_pseudo_lru_85
  reg [2 : 0] cache_pseudo_lru_85;
  wire [2 : 0] cache_pseudo_lru_85$D_IN;
  wire cache_pseudo_lru_85$EN;

  // register cache_pseudo_lru_86
  reg [2 : 0] cache_pseudo_lru_86;
  wire [2 : 0] cache_pseudo_lru_86$D_IN;
  wire cache_pseudo_lru_86$EN;

  // register cache_pseudo_lru_87
  reg [2 : 0] cache_pseudo_lru_87;
  wire [2 : 0] cache_pseudo_lru_87$D_IN;
  wire cache_pseudo_lru_87$EN;

  // register cache_pseudo_lru_88
  reg [2 : 0] cache_pseudo_lru_88;
  wire [2 : 0] cache_pseudo_lru_88$D_IN;
  wire cache_pseudo_lru_88$EN;

  // register cache_pseudo_lru_89
  reg [2 : 0] cache_pseudo_lru_89;
  wire [2 : 0] cache_pseudo_lru_89$D_IN;
  wire cache_pseudo_lru_89$EN;

  // register cache_pseudo_lru_9
  reg [2 : 0] cache_pseudo_lru_9;
  wire [2 : 0] cache_pseudo_lru_9$D_IN;
  wire cache_pseudo_lru_9$EN;

  // register cache_pseudo_lru_90
  reg [2 : 0] cache_pseudo_lru_90;
  wire [2 : 0] cache_pseudo_lru_90$D_IN;
  wire cache_pseudo_lru_90$EN;

  // register cache_pseudo_lru_91
  reg [2 : 0] cache_pseudo_lru_91;
  wire [2 : 0] cache_pseudo_lru_91$D_IN;
  wire cache_pseudo_lru_91$EN;

  // register cache_pseudo_lru_92
  reg [2 : 0] cache_pseudo_lru_92;
  wire [2 : 0] cache_pseudo_lru_92$D_IN;
  wire cache_pseudo_lru_92$EN;

  // register cache_pseudo_lru_93
  reg [2 : 0] cache_pseudo_lru_93;
  wire [2 : 0] cache_pseudo_lru_93$D_IN;
  wire cache_pseudo_lru_93$EN;

  // register cache_pseudo_lru_94
  reg [2 : 0] cache_pseudo_lru_94;
  wire [2 : 0] cache_pseudo_lru_94$D_IN;
  wire cache_pseudo_lru_94$EN;

  // register cache_pseudo_lru_95
  reg [2 : 0] cache_pseudo_lru_95;
  wire [2 : 0] cache_pseudo_lru_95$D_IN;
  wire cache_pseudo_lru_95$EN;

  // register cache_pseudo_lru_96
  reg [2 : 0] cache_pseudo_lru_96;
  wire [2 : 0] cache_pseudo_lru_96$D_IN;
  wire cache_pseudo_lru_96$EN;

  // register cache_pseudo_lru_97
  reg [2 : 0] cache_pseudo_lru_97;
  wire [2 : 0] cache_pseudo_lru_97$D_IN;
  wire cache_pseudo_lru_97$EN;

  // register cache_pseudo_lru_98
  reg [2 : 0] cache_pseudo_lru_98;
  wire [2 : 0] cache_pseudo_lru_98$D_IN;
  wire cache_pseudo_lru_98$EN;

  // register cache_pseudo_lru_99
  reg [2 : 0] cache_pseudo_lru_99;
  wire [2 : 0] cache_pseudo_lru_99$D_IN;
  wire cache_pseudo_lru_99$EN;

  // register cache_rg_enable
  reg cache_rg_enable;
  wire cache_rg_enable$D_IN, cache_rg_enable$EN;

  // register cache_rg_flush
  reg cache_rg_flush;
  wire cache_rg_flush$D_IN, cache_rg_flush$EN;

  // register cache_rg_index
  reg [7 : 0] cache_rg_index;
  wire [7 : 0] cache_rg_index$D_IN;
  wire cache_rg_index$EN;

  // register cache_rg_initialize
  reg cache_rg_initialize;
  wire cache_rg_initialize$D_IN, cache_rg_initialize$EN;

  // register cache_rg_offset
  reg [2 : 0] cache_rg_offset;
  wire [2 : 0] cache_rg_offset$D_IN;
  wire cache_rg_offset$EN;

  // register cache_rg_replace_block
  reg [1 : 0] cache_rg_replace_block;
  wire [1 : 0] cache_rg_replace_block$D_IN;
  wire cache_rg_replace_block$EN;

  // register cache_rg_state
  reg [1 : 0] cache_rg_state;
  wire [1 : 0] cache_rg_state$D_IN;
  wire cache_rg_state$EN;

  // register cache_rg_word_count
  reg [2 : 0] cache_rg_word_count;
  wire [2 : 0] cache_rg_word_count$D_IN;
  wire cache_rg_word_count$EN;

  // ports of submodule cache_data_0_0
  wire [31 : 0] cache_data_0_0$DIA, cache_data_0_0$DIB, cache_data_0_0$DOA;
  wire [6 : 0] cache_data_0_0$ADDRA, cache_data_0_0$ADDRB;
  wire cache_data_0_0$ENA,
       cache_data_0_0$ENB,
       cache_data_0_0$WEA,
       cache_data_0_0$WEB;

  // ports of submodule cache_data_0_1
  wire [31 : 0] cache_data_0_1$DIA, cache_data_0_1$DIB, cache_data_0_1$DOA;
  wire [6 : 0] cache_data_0_1$ADDRA, cache_data_0_1$ADDRB;
  wire cache_data_0_1$ENA,
       cache_data_0_1$ENB,
       cache_data_0_1$WEA,
       cache_data_0_1$WEB;

  // ports of submodule cache_data_0_2
  wire [31 : 0] cache_data_0_2$DIA, cache_data_0_2$DIB, cache_data_0_2$DOA;
  wire [6 : 0] cache_data_0_2$ADDRA, cache_data_0_2$ADDRB;
  wire cache_data_0_2$ENA,
       cache_data_0_2$ENB,
       cache_data_0_2$WEA,
       cache_data_0_2$WEB;

  // ports of submodule cache_data_0_3
  wire [31 : 0] cache_data_0_3$DIA, cache_data_0_3$DIB, cache_data_0_3$DOA;
  wire [6 : 0] cache_data_0_3$ADDRA, cache_data_0_3$ADDRB;
  wire cache_data_0_3$ENA,
       cache_data_0_3$ENB,
       cache_data_0_3$WEA,
       cache_data_0_3$WEB;

  // ports of submodule cache_data_0_4
  wire [31 : 0] cache_data_0_4$DIA, cache_data_0_4$DIB, cache_data_0_4$DOA;
  wire [6 : 0] cache_data_0_4$ADDRA, cache_data_0_4$ADDRB;
  wire cache_data_0_4$ENA,
       cache_data_0_4$ENB,
       cache_data_0_4$WEA,
       cache_data_0_4$WEB;

  // ports of submodule cache_data_0_5
  wire [31 : 0] cache_data_0_5$DIA, cache_data_0_5$DIB, cache_data_0_5$DOA;
  wire [6 : 0] cache_data_0_5$ADDRA, cache_data_0_5$ADDRB;
  wire cache_data_0_5$ENA,
       cache_data_0_5$ENB,
       cache_data_0_5$WEA,
       cache_data_0_5$WEB;

  // ports of submodule cache_data_0_6
  wire [31 : 0] cache_data_0_6$DIA, cache_data_0_6$DIB, cache_data_0_6$DOA;
  wire [6 : 0] cache_data_0_6$ADDRA, cache_data_0_6$ADDRB;
  wire cache_data_0_6$ENA,
       cache_data_0_6$ENB,
       cache_data_0_6$WEA,
       cache_data_0_6$WEB;

  // ports of submodule cache_data_0_7
  wire [31 : 0] cache_data_0_7$DIA, cache_data_0_7$DIB, cache_data_0_7$DOA;
  wire [6 : 0] cache_data_0_7$ADDRA, cache_data_0_7$ADDRB;
  wire cache_data_0_7$ENA,
       cache_data_0_7$ENB,
       cache_data_0_7$WEA,
       cache_data_0_7$WEB;

  // ports of submodule cache_data_1_0
  wire [31 : 0] cache_data_1_0$DIA, cache_data_1_0$DIB, cache_data_1_0$DOA;
  wire [6 : 0] cache_data_1_0$ADDRA, cache_data_1_0$ADDRB;
  wire cache_data_1_0$ENA,
       cache_data_1_0$ENB,
       cache_data_1_0$WEA,
       cache_data_1_0$WEB;

  // ports of submodule cache_data_1_1
  wire [31 : 0] cache_data_1_1$DIA, cache_data_1_1$DIB, cache_data_1_1$DOA;
  wire [6 : 0] cache_data_1_1$ADDRA, cache_data_1_1$ADDRB;
  wire cache_data_1_1$ENA,
       cache_data_1_1$ENB,
       cache_data_1_1$WEA,
       cache_data_1_1$WEB;

  // ports of submodule cache_data_1_2
  wire [31 : 0] cache_data_1_2$DIA, cache_data_1_2$DIB, cache_data_1_2$DOA;
  wire [6 : 0] cache_data_1_2$ADDRA, cache_data_1_2$ADDRB;
  wire cache_data_1_2$ENA,
       cache_data_1_2$ENB,
       cache_data_1_2$WEA,
       cache_data_1_2$WEB;

  // ports of submodule cache_data_1_3
  wire [31 : 0] cache_data_1_3$DIA, cache_data_1_3$DIB, cache_data_1_3$DOA;
  wire [6 : 0] cache_data_1_3$ADDRA, cache_data_1_3$ADDRB;
  wire cache_data_1_3$ENA,
       cache_data_1_3$ENB,
       cache_data_1_3$WEA,
       cache_data_1_3$WEB;

  // ports of submodule cache_data_1_4
  wire [31 : 0] cache_data_1_4$DIA, cache_data_1_4$DIB, cache_data_1_4$DOA;
  wire [6 : 0] cache_data_1_4$ADDRA, cache_data_1_4$ADDRB;
  wire cache_data_1_4$ENA,
       cache_data_1_4$ENB,
       cache_data_1_4$WEA,
       cache_data_1_4$WEB;

  // ports of submodule cache_data_1_5
  wire [31 : 0] cache_data_1_5$DIA, cache_data_1_5$DIB, cache_data_1_5$DOA;
  wire [6 : 0] cache_data_1_5$ADDRA, cache_data_1_5$ADDRB;
  wire cache_data_1_5$ENA,
       cache_data_1_5$ENB,
       cache_data_1_5$WEA,
       cache_data_1_5$WEB;

  // ports of submodule cache_data_1_6
  wire [31 : 0] cache_data_1_6$DIA, cache_data_1_6$DIB, cache_data_1_6$DOA;
  wire [6 : 0] cache_data_1_6$ADDRA, cache_data_1_6$ADDRB;
  wire cache_data_1_6$ENA,
       cache_data_1_6$ENB,
       cache_data_1_6$WEA,
       cache_data_1_6$WEB;

  // ports of submodule cache_data_1_7
  wire [31 : 0] cache_data_1_7$DIA, cache_data_1_7$DIB, cache_data_1_7$DOA;
  wire [6 : 0] cache_data_1_7$ADDRA, cache_data_1_7$ADDRB;
  wire cache_data_1_7$ENA,
       cache_data_1_7$ENB,
       cache_data_1_7$WEA,
       cache_data_1_7$WEB;

  // ports of submodule cache_data_2_0
  wire [31 : 0] cache_data_2_0$DIA, cache_data_2_0$DIB, cache_data_2_0$DOA;
  wire [6 : 0] cache_data_2_0$ADDRA, cache_data_2_0$ADDRB;
  wire cache_data_2_0$ENA,
       cache_data_2_0$ENB,
       cache_data_2_0$WEA,
       cache_data_2_0$WEB;

  // ports of submodule cache_data_2_1
  wire [31 : 0] cache_data_2_1$DIA, cache_data_2_1$DIB, cache_data_2_1$DOA;
  wire [6 : 0] cache_data_2_1$ADDRA, cache_data_2_1$ADDRB;
  wire cache_data_2_1$ENA,
       cache_data_2_1$ENB,
       cache_data_2_1$WEA,
       cache_data_2_1$WEB;

  // ports of submodule cache_data_2_2
  wire [31 : 0] cache_data_2_2$DIA, cache_data_2_2$DIB, cache_data_2_2$DOA;
  wire [6 : 0] cache_data_2_2$ADDRA, cache_data_2_2$ADDRB;
  wire cache_data_2_2$ENA,
       cache_data_2_2$ENB,
       cache_data_2_2$WEA,
       cache_data_2_2$WEB;

  // ports of submodule cache_data_2_3
  wire [31 : 0] cache_data_2_3$DIA, cache_data_2_3$DIB, cache_data_2_3$DOA;
  wire [6 : 0] cache_data_2_3$ADDRA, cache_data_2_3$ADDRB;
  wire cache_data_2_3$ENA,
       cache_data_2_3$ENB,
       cache_data_2_3$WEA,
       cache_data_2_3$WEB;

  // ports of submodule cache_data_2_4
  wire [31 : 0] cache_data_2_4$DIA, cache_data_2_4$DIB, cache_data_2_4$DOA;
  wire [6 : 0] cache_data_2_4$ADDRA, cache_data_2_4$ADDRB;
  wire cache_data_2_4$ENA,
       cache_data_2_4$ENB,
       cache_data_2_4$WEA,
       cache_data_2_4$WEB;

  // ports of submodule cache_data_2_5
  wire [31 : 0] cache_data_2_5$DIA, cache_data_2_5$DIB, cache_data_2_5$DOA;
  wire [6 : 0] cache_data_2_5$ADDRA, cache_data_2_5$ADDRB;
  wire cache_data_2_5$ENA,
       cache_data_2_5$ENB,
       cache_data_2_5$WEA,
       cache_data_2_5$WEB;

  // ports of submodule cache_data_2_6
  wire [31 : 0] cache_data_2_6$DIA, cache_data_2_6$DIB, cache_data_2_6$DOA;
  wire [6 : 0] cache_data_2_6$ADDRA, cache_data_2_6$ADDRB;
  wire cache_data_2_6$ENA,
       cache_data_2_6$ENB,
       cache_data_2_6$WEA,
       cache_data_2_6$WEB;

  // ports of submodule cache_data_2_7
  wire [31 : 0] cache_data_2_7$DIA, cache_data_2_7$DIB, cache_data_2_7$DOA;
  wire [6 : 0] cache_data_2_7$ADDRA, cache_data_2_7$ADDRB;
  wire cache_data_2_7$ENA,
       cache_data_2_7$ENB,
       cache_data_2_7$WEA,
       cache_data_2_7$WEB;

  // ports of submodule cache_data_3_0
  wire [31 : 0] cache_data_3_0$DIA, cache_data_3_0$DIB, cache_data_3_0$DOA;
  wire [6 : 0] cache_data_3_0$ADDRA, cache_data_3_0$ADDRB;
  wire cache_data_3_0$ENA,
       cache_data_3_0$ENB,
       cache_data_3_0$WEA,
       cache_data_3_0$WEB;

  // ports of submodule cache_data_3_1
  wire [31 : 0] cache_data_3_1$DIA, cache_data_3_1$DIB, cache_data_3_1$DOA;
  wire [6 : 0] cache_data_3_1$ADDRA, cache_data_3_1$ADDRB;
  wire cache_data_3_1$ENA,
       cache_data_3_1$ENB,
       cache_data_3_1$WEA,
       cache_data_3_1$WEB;

  // ports of submodule cache_data_3_2
  wire [31 : 0] cache_data_3_2$DIA, cache_data_3_2$DIB, cache_data_3_2$DOA;
  wire [6 : 0] cache_data_3_2$ADDRA, cache_data_3_2$ADDRB;
  wire cache_data_3_2$ENA,
       cache_data_3_2$ENB,
       cache_data_3_2$WEA,
       cache_data_3_2$WEB;

  // ports of submodule cache_data_3_3
  wire [31 : 0] cache_data_3_3$DIA, cache_data_3_3$DIB, cache_data_3_3$DOA;
  wire [6 : 0] cache_data_3_3$ADDRA, cache_data_3_3$ADDRB;
  wire cache_data_3_3$ENA,
       cache_data_3_3$ENB,
       cache_data_3_3$WEA,
       cache_data_3_3$WEB;

  // ports of submodule cache_data_3_4
  wire [31 : 0] cache_data_3_4$DIA, cache_data_3_4$DIB, cache_data_3_4$DOA;
  wire [6 : 0] cache_data_3_4$ADDRA, cache_data_3_4$ADDRB;
  wire cache_data_3_4$ENA,
       cache_data_3_4$ENB,
       cache_data_3_4$WEA,
       cache_data_3_4$WEB;

  // ports of submodule cache_data_3_5
  wire [31 : 0] cache_data_3_5$DIA, cache_data_3_5$DIB, cache_data_3_5$DOA;
  wire [6 : 0] cache_data_3_5$ADDRA, cache_data_3_5$ADDRB;
  wire cache_data_3_5$ENA,
       cache_data_3_5$ENB,
       cache_data_3_5$WEA,
       cache_data_3_5$WEB;

  // ports of submodule cache_data_3_6
  wire [31 : 0] cache_data_3_6$DIA, cache_data_3_6$DIB, cache_data_3_6$DOA;
  wire [6 : 0] cache_data_3_6$ADDRA, cache_data_3_6$ADDRB;
  wire cache_data_3_6$ENA,
       cache_data_3_6$ENB,
       cache_data_3_6$WEA,
       cache_data_3_6$WEB;

  // ports of submodule cache_data_3_7
  wire [31 : 0] cache_data_3_7$DIA, cache_data_3_7$DIB, cache_data_3_7$DOA;
  wire [6 : 0] cache_data_3_7$ADDRA, cache_data_3_7$ADDRB;
  wire cache_data_3_7$ENA,
       cache_data_3_7$ENB,
       cache_data_3_7$WEA,
       cache_data_3_7$WEB;

  // ports of submodule cache_ff_request_from_cpu
  wire [31 : 0] cache_ff_request_from_cpu$D_IN,
		cache_ff_request_from_cpu$D_OUT;
  wire cache_ff_request_from_cpu$CLR,
       cache_ff_request_from_cpu$DEQ,
       cache_ff_request_from_cpu$EMPTY_N,
       cache_ff_request_from_cpu$ENQ,
       cache_ff_request_from_cpu$FULL_N;

  // ports of submodule cache_ff_request_to_memory_ff
  wire [38 : 0] cache_ff_request_to_memory_ff$D_IN,
		cache_ff_request_to_memory_ff$D_OUT;
  wire cache_ff_request_to_memory_ff$CLR,
       cache_ff_request_to_memory_ff$DEQ,
       cache_ff_request_to_memory_ff$EMPTY_N,
       cache_ff_request_to_memory_ff$ENQ,
       cache_ff_request_to_memory_ff$FULL_N;

  // ports of submodule cache_ff_request_to_memory_firstValid
  wire cache_ff_request_to_memory_firstValid$D_IN,
       cache_ff_request_to_memory_firstValid$EN,
       cache_ff_request_to_memory_firstValid$Q_OUT;

  // ports of submodule cache_ff_response_from_memory
  wire [64 : 0] cache_ff_response_from_memory$D_IN,
		cache_ff_response_from_memory$D_OUT;
  wire cache_ff_response_from_memory$CLR,
       cache_ff_response_from_memory$DEQ,
       cache_ff_response_from_memory$EMPTY_N,
       cache_ff_response_from_memory$ENQ,
       cache_ff_response_from_memory$FULL_N;

  // ports of submodule cache_ff_response_to_cpu_ff
  wire [65 : 0] cache_ff_response_to_cpu_ff$D_IN,
		cache_ff_response_to_cpu_ff$D_OUT;
  wire cache_ff_response_to_cpu_ff$CLR,
       cache_ff_response_to_cpu_ff$DEQ,
       cache_ff_response_to_cpu_ff$EMPTY_N,
       cache_ff_response_to_cpu_ff$ENQ,
       cache_ff_response_to_cpu_ff$FULL_N;

  // ports of submodule cache_ff_response_to_cpu_firstValid
  wire cache_ff_response_to_cpu_firstValid$D_IN,
       cache_ff_response_to_cpu_firstValid$EN,
       cache_ff_response_to_cpu_firstValid$Q_OUT;

  // ports of submodule cache_tag_0
  wire [19 : 0] cache_tag_0$DIA, cache_tag_0$DIB, cache_tag_0$DOA;
  wire [6 : 0] cache_tag_0$ADDRA, cache_tag_0$ADDRB;
  wire cache_tag_0$ENA, cache_tag_0$ENB, cache_tag_0$WEA, cache_tag_0$WEB;

  // ports of submodule cache_tag_1
  wire [19 : 0] cache_tag_1$DIA, cache_tag_1$DIB, cache_tag_1$DOA;
  wire [6 : 0] cache_tag_1$ADDRA, cache_tag_1$ADDRB;
  wire cache_tag_1$ENA, cache_tag_1$ENB, cache_tag_1$WEA, cache_tag_1$WEB;

  // ports of submodule cache_tag_2
  wire [19 : 0] cache_tag_2$DIA, cache_tag_2$DIB, cache_tag_2$DOA;
  wire [6 : 0] cache_tag_2$ADDRA, cache_tag_2$ADDRB;
  wire cache_tag_2$ENA, cache_tag_2$ENB, cache_tag_2$WEA, cache_tag_2$WEB;

  // ports of submodule cache_tag_3
  wire [19 : 0] cache_tag_3$DIA, cache_tag_3$DIB, cache_tag_3$DOA;
  wire [6 : 0] cache_tag_3$ADDRA, cache_tag_3$ADDRB;
  wire cache_tag_3$ENA, cache_tag_3$ENB, cache_tag_3$WEA, cache_tag_3$WEB;

  // ports of submodule cache_valid_0
  wire [6 : 0] cache_valid_0$ADDRA, cache_valid_0$ADDRB;
  wire cache_valid_0$DIA,
       cache_valid_0$DIB,
       cache_valid_0$DOA,
       cache_valid_0$ENA,
       cache_valid_0$ENB,
       cache_valid_0$WEA,
       cache_valid_0$WEB;

  // ports of submodule cache_valid_1
  wire [6 : 0] cache_valid_1$ADDRA, cache_valid_1$ADDRB;
  wire cache_valid_1$DIA,
       cache_valid_1$DIB,
       cache_valid_1$DOA,
       cache_valid_1$ENA,
       cache_valid_1$ENB,
       cache_valid_1$WEA,
       cache_valid_1$WEB;

  // ports of submodule cache_valid_2
  wire [6 : 0] cache_valid_2$ADDRA, cache_valid_2$ADDRB;
  wire cache_valid_2$DIA,
       cache_valid_2$DIB,
       cache_valid_2$DOA,
       cache_valid_2$ENA,
       cache_valid_2$ENB,
       cache_valid_2$WEA,
       cache_valid_2$WEB;

  // ports of submodule cache_valid_3
  wire [6 : 0] cache_valid_3$ADDRA, cache_valid_3$ADDRB;
  wire cache_valid_3$DIA,
       cache_valid_3$DIB,
       cache_valid_3$DOA,
       cache_valid_3$ENA,
       cache_valid_3$ENB,
       cache_valid_3$WEA,
       cache_valid_3$WEB;

  // rule scheduling signals
  wire CAN_FIRE_RL_cache_cache_is_disabled,
       CAN_FIRE_RL_cache_ff_request_to_memory_dequeue,
       CAN_FIRE_RL_cache_ff_request_to_memory_enqueue,
       CAN_FIRE_RL_cache_ff_response_to_cpu_dequeue,
       CAN_FIRE_RL_cache_ff_response_to_cpu_enqueue,
       CAN_FIRE_RL_cache_flush_response_cache,
       CAN_FIRE_RL_cache_forward_from_memory_to_cpu,
       CAN_FIRE_RL_cache_got_response_from_memory,
       CAN_FIRE_RL_cache_initialize_cache,
       CAN_FIRE_RL_cache_read_from_bram,
       CAN_FIRE_RL_cache_stall_for_write_to_take_effect,
       CAN_FIRE_cache_enable,
       CAN_FIRE_flush,
       CAN_FIRE_request_from_cpu,
       CAN_FIRE_request_to_memory,
       CAN_FIRE_response_from_memory,
       CAN_FIRE_response_to_cpu,
       WILL_FIRE_RL_cache_cache_is_disabled,
       WILL_FIRE_RL_cache_ff_request_to_memory_dequeue,
       WILL_FIRE_RL_cache_ff_request_to_memory_enqueue,
       WILL_FIRE_RL_cache_ff_response_to_cpu_dequeue,
       WILL_FIRE_RL_cache_ff_response_to_cpu_enqueue,
       WILL_FIRE_RL_cache_flush_response_cache,
       WILL_FIRE_RL_cache_forward_from_memory_to_cpu,
       WILL_FIRE_RL_cache_got_response_from_memory,
       WILL_FIRE_RL_cache_initialize_cache,
       WILL_FIRE_RL_cache_read_from_bram,
       WILL_FIRE_RL_cache_stall_for_write_to_take_effect,
       WILL_FIRE_cache_enable,
       WILL_FIRE_flush,
       WILL_FIRE_request_from_cpu,
       WILL_FIRE_request_to_memory,
       WILL_FIRE_response_from_memory,
       WILL_FIRE_response_to_cpu;

  // inputs to muxes for submodule ports
  wire [65 : 0] MUX_cache_ff_response_to_cpu_enqw$wset_1__VAL_1,
		MUX_cache_ff_response_to_cpu_enqw$wset_1__VAL_2;
  wire [38 : 0] MUX_cache_ff_request_to_memory_enqw$wset_1__VAL_1,
		MUX_cache_ff_request_to_memory_enqw$wset_1__VAL_2;
  wire MUX_cache_ff_request_to_memory_enqw$wset_1__SEL_1,
       MUX_cache_ff_response_to_cpu_enqw$wset_1__SEL_1,
       MUX_cache_rg_state$port1__write_1__SEL_1,
       MUX_cache_valid_0$a_put_1__SEL_1;

  // remaining internal signals
  reg [63 : 0] v__h100849, v__h103775, v__h104090, v__h104225, v__h109503;
  reg [31 : 0] SEL_ARR_cache_data_0_0_a_read__15_cache_data_0_ETC___d424,
	       SEL_ARR_cache_data_1_0_a_read__25_cache_data_1_ETC___d434,
	       SEL_ARR_cache_data_2_0_a_read__35_cache_data_2_ETC___d444,
	       SEL_ARR_cache_data_3_0_a_read__45_cache_data_3_ETC___d454,
	       x_data_word__h103841;
  reg [2 : 0] lru_bits__h15217;
  wire [31 : 0] IF_NOT_cache_valid_0_a_read__5_09_OR_NOT_cache_ETC___d247,
		IF_NOT_cache_valid_1_a_read__1_5_OR_NOT_cache__ETC___d257,
		IF_SEL_ARR_cache_pseudo_lru_0_4_cache_pseudo_l_ETC___d205,
		IF_SEL_ARR_cache_pseudo_lru_0_4_cache_pseudo_l_ETC___d255,
		IF_cache_valid_0_a_read__5_AND_cache_valid_1_a_ETC___d259,
		IF_cache_valid_0_a_read__5_AND_cache_valid_1_a_ETC___d274,
		IF_cache_valid_1_a_read__1_AND_cache_tag_1_a_r_ETC___d243,
		IF_cache_valid_1_a_read__1_AND_cache_tag_1_a_r_ETC___d457,
		IF_cache_valid_2_a_read__7_AND_cache_tag_2_a_r_ETC___d252,
		IF_cache_valid_3_a_read__2_AND_cache_tag_3_a_r_ETC___d244,
		IF_cache_valid_3_a_read__2_AND_cache_tag_3_a_r_ETC___d269,
		IF_cache_valid_3_a_read__2_AND_cache_tag_3_a_r_ETC___d275,
		IF_cache_valid_3_a_read__2_AND_cache_tag_3_a_r_ETC___d459,
		x__h18127,
		x__h18203,
		x__h18305;
  wire [19 : 0] tag1__h109497;
  wire [2 : 0] IF_IF_IF_cache_valid_3_a_read__2_AND_cache_tag_ETC___d280,
	       IF_IF_cache_valid_3_a_read__2_AND_cache_tag_3__ETC___d264,
	       _theResult_____1___1_snd__h17758,
	       _theResult_____1___1_snd__h17793,
	       _theResult_____1___1_snd__h17959,
	       _theResult_____1___1_snd__h18006,
	       x__h105747,
	       x__h18097,
	       x__h18172,
	       x__h18274,
	       y__h18200,
	       y__h18302;
  wire [1 : 0] IF_cache_valid_0_a_read__5_AND_cache_valid_1_a_ETC___d485,
	       IF_cache_valid_1_a_read__1_AND_cache_tag_1_a_r_ETC___d475,
	       IF_cache_valid_1_a_read__1_THEN_IF_cache_valid_ETC___d483,
	       IF_cache_valid_3_a_read__2_AND_cache_tag_3_a_r_ETC___d411,
	       IF_cache_valid_3_a_read__2_AND_cache_tag_3_a_r_ETC___d477;
  wire IF_cache_valid_0_a_read__5_AND_cache_valid_1_a_ETC___d222,
       IF_cache_valid_0_a_read__5_AND_cache_valid_1_a_ETC___d234,
       IF_cache_valid_0_a_read__5_AND_cache_valid_1_a_ETC___d239,
       IF_cache_valid_3_a_read__2_AND_cache_tag_3_a_r_ETC___d215,
       IF_cache_valid_3_a_read__2_AND_cache_tag_3_a_r_ETC___d223,
       IF_cache_valid_3_a_read__2_AND_cache_tag_3_a_r_ETC___d235,
       IF_cache_valid_3_a_read__2_AND_cache_tag_3_a_r_ETC___d240,
       NOT_cache_valid_0_a_read__5_09_OR_cache_valid__ETC___d213,
       NOT_cache_valid_2_a_read__7_10_OR_NOT_cache_ta_ETC___d469,
       NOT_cache_valid_3_a_read__2_2_OR_NOT_cache_tag_ETC___d228,
       NOT_cache_valid_3_a_read__2_2_OR_NOT_cache_tag_ETC___d236,
       SEL_ARR_cache_pseudo_lru_0_4_cache_pseudo_lru__ETC___d207,
       cache_ff_request_from_cpu_first__8_BITS_1_TO_0_ETC___d464,
       cache_ff_request_from_cpu_first__8_BITS_1_TO_0_ETC___d471,
       cache_tag_0_a_read__6_EQ_cache_ff_request_from_ETC___d57,
       cache_tag_1_a_read__2_EQ_cache_ff_request_from_ETC___d53,
       cache_tag_2_a_read__8_EQ_cache_ff_request_from_ETC___d49,
       cache_tag_3_a_read__3_EQ_cache_ff_request_from_ETC___d45,
       cache_valid_0_a_read__5_AND_cache_valid_1_a_re_ETC___d73,
       cache_valid_2_a_read__7_AND_cache_tag_2_a_read_ETC___d60,
       cache_valid_2_a_read__7_AND_cache_tag_2_a_read_ETC___d69,
       cache_valid_3_a_read__2_AND_cache_tag_3_a_read_ETC___d217,
       cache_valid_3_a_read__2_AND_cache_tag_3_a_read_ETC___d267,
       cache_valid_3_a_read__2_AND_cache_tag_3_a_read_ETC___d414;

  // action method request_from_cpu
  assign RDY_request_from_cpu =
	     !cache_rg_initialize && cache_rg_state$port2__read == 2'd0 &&
	     !cache_ff_response_to_cpu_ff$EMPTY_N &&
	     !EN_flush &&
	     cache_ff_request_from_cpu$FULL_N ;
  assign CAN_FIRE_request_from_cpu = RDY_request_from_cpu ;
  assign WILL_FIRE_request_from_cpu = EN_request_from_cpu ;

  // actionvalue method response_to_cpu
  assign response_to_cpu =
	     cache_ff_response_to_cpu_ff$EMPTY_N ?
	       cache_ff_response_to_cpu_ff$D_OUT :
	       cache_ff_response_to_cpu_enqw$wget ;
  assign RDY_response_to_cpu =
	     !cache_rg_initialize && !EN_flush &&
	     cache_ff_response_to_cpu_firstValid$Q_OUT &&
	     (cache_ff_response_to_cpu_ff$EMPTY_N ||
	      cache_ff_response_to_cpu_enqw$whas) ;
  assign CAN_FIRE_response_to_cpu = RDY_response_to_cpu ;
  assign WILL_FIRE_response_to_cpu = EN_response_to_cpu ;

  // actionvalue method request_to_memory
  assign request_to_memory =
	     cache_ff_request_to_memory_ff$EMPTY_N ?
	       cache_ff_request_to_memory_ff$D_OUT :
	       cache_ff_request_to_memory_enqw$wget ;
  assign RDY_request_to_memory =
	     !cache_rg_initialize &&
	     cache_ff_request_to_memory_firstValid$Q_OUT &&
	     (cache_ff_request_to_memory_ff$EMPTY_N ||
	      cache_ff_request_to_memory_enqw$whas) ;
  assign CAN_FIRE_request_to_memory =
	     !cache_rg_initialize &&
	     cache_ff_request_to_memory_firstValid$Q_OUT &&
	     (cache_ff_request_to_memory_ff$EMPTY_N ||
	      cache_ff_request_to_memory_enqw$whas) ;
  assign WILL_FIRE_request_to_memory = EN_request_to_memory ;

  // actionvalue method response_from_memory
  assign response_from_memory = cache_wr_line_done$whas ;
  assign RDY_response_from_memory = cache_ff_response_from_memory$FULL_N ;
  assign CAN_FIRE_response_from_memory =
	     cache_ff_response_from_memory$FULL_N ;
  assign WILL_FIRE_response_from_memory = EN_response_from_memory ;

  // action method cache_enable
  assign RDY_cache_enable = 1'd1 ;
  assign CAN_FIRE_cache_enable = 1'd1 ;
  assign WILL_FIRE_cache_enable = EN_cache_enable ;

  // action method flush
  assign RDY_flush = 1'd1 ;
  assign CAN_FIRE_flush = 1'd1 ;
  assign WILL_FIRE_flush = EN_flush ;

  // submodule cache_data_0_0
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(8'd128)) cache_data_0_0(.CLKA(CLK),
					   .CLKB(CLK),
					   .ADDRA(cache_data_0_0$ADDRA),
					   .ADDRB(cache_data_0_0$ADDRB),
					   .DIA(cache_data_0_0$DIA),
					   .DIB(cache_data_0_0$DIB),
					   .WEA(cache_data_0_0$WEA),
					   .WEB(cache_data_0_0$WEB),
					   .ENA(cache_data_0_0$ENA),
					   .ENB(cache_data_0_0$ENB),
					   .DOA(cache_data_0_0$DOA),
					   .DOB());

  // submodule cache_data_0_1
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(8'd128)) cache_data_0_1(.CLKA(CLK),
					   .CLKB(CLK),
					   .ADDRA(cache_data_0_1$ADDRA),
					   .ADDRB(cache_data_0_1$ADDRB),
					   .DIA(cache_data_0_1$DIA),
					   .DIB(cache_data_0_1$DIB),
					   .WEA(cache_data_0_1$WEA),
					   .WEB(cache_data_0_1$WEB),
					   .ENA(cache_data_0_1$ENA),
					   .ENB(cache_data_0_1$ENB),
					   .DOA(cache_data_0_1$DOA),
					   .DOB());

  // submodule cache_data_0_2
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(8'd128)) cache_data_0_2(.CLKA(CLK),
					   .CLKB(CLK),
					   .ADDRA(cache_data_0_2$ADDRA),
					   .ADDRB(cache_data_0_2$ADDRB),
					   .DIA(cache_data_0_2$DIA),
					   .DIB(cache_data_0_2$DIB),
					   .WEA(cache_data_0_2$WEA),
					   .WEB(cache_data_0_2$WEB),
					   .ENA(cache_data_0_2$ENA),
					   .ENB(cache_data_0_2$ENB),
					   .DOA(cache_data_0_2$DOA),
					   .DOB());

  // submodule cache_data_0_3
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(8'd128)) cache_data_0_3(.CLKA(CLK),
					   .CLKB(CLK),
					   .ADDRA(cache_data_0_3$ADDRA),
					   .ADDRB(cache_data_0_3$ADDRB),
					   .DIA(cache_data_0_3$DIA),
					   .DIB(cache_data_0_3$DIB),
					   .WEA(cache_data_0_3$WEA),
					   .WEB(cache_data_0_3$WEB),
					   .ENA(cache_data_0_3$ENA),
					   .ENB(cache_data_0_3$ENB),
					   .DOA(cache_data_0_3$DOA),
					   .DOB());

  // submodule cache_data_0_4
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(8'd128)) cache_data_0_4(.CLKA(CLK),
					   .CLKB(CLK),
					   .ADDRA(cache_data_0_4$ADDRA),
					   .ADDRB(cache_data_0_4$ADDRB),
					   .DIA(cache_data_0_4$DIA),
					   .DIB(cache_data_0_4$DIB),
					   .WEA(cache_data_0_4$WEA),
					   .WEB(cache_data_0_4$WEB),
					   .ENA(cache_data_0_4$ENA),
					   .ENB(cache_data_0_4$ENB),
					   .DOA(cache_data_0_4$DOA),
					   .DOB());

  // submodule cache_data_0_5
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(8'd128)) cache_data_0_5(.CLKA(CLK),
					   .CLKB(CLK),
					   .ADDRA(cache_data_0_5$ADDRA),
					   .ADDRB(cache_data_0_5$ADDRB),
					   .DIA(cache_data_0_5$DIA),
					   .DIB(cache_data_0_5$DIB),
					   .WEA(cache_data_0_5$WEA),
					   .WEB(cache_data_0_5$WEB),
					   .ENA(cache_data_0_5$ENA),
					   .ENB(cache_data_0_5$ENB),
					   .DOA(cache_data_0_5$DOA),
					   .DOB());

  // submodule cache_data_0_6
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(8'd128)) cache_data_0_6(.CLKA(CLK),
					   .CLKB(CLK),
					   .ADDRA(cache_data_0_6$ADDRA),
					   .ADDRB(cache_data_0_6$ADDRB),
					   .DIA(cache_data_0_6$DIA),
					   .DIB(cache_data_0_6$DIB),
					   .WEA(cache_data_0_6$WEA),
					   .WEB(cache_data_0_6$WEB),
					   .ENA(cache_data_0_6$ENA),
					   .ENB(cache_data_0_6$ENB),
					   .DOA(cache_data_0_6$DOA),
					   .DOB());

  // submodule cache_data_0_7
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(8'd128)) cache_data_0_7(.CLKA(CLK),
					   .CLKB(CLK),
					   .ADDRA(cache_data_0_7$ADDRA),
					   .ADDRB(cache_data_0_7$ADDRB),
					   .DIA(cache_data_0_7$DIA),
					   .DIB(cache_data_0_7$DIB),
					   .WEA(cache_data_0_7$WEA),
					   .WEB(cache_data_0_7$WEB),
					   .ENA(cache_data_0_7$ENA),
					   .ENB(cache_data_0_7$ENB),
					   .DOA(cache_data_0_7$DOA),
					   .DOB());

  // submodule cache_data_1_0
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(8'd128)) cache_data_1_0(.CLKA(CLK),
					   .CLKB(CLK),
					   .ADDRA(cache_data_1_0$ADDRA),
					   .ADDRB(cache_data_1_0$ADDRB),
					   .DIA(cache_data_1_0$DIA),
					   .DIB(cache_data_1_0$DIB),
					   .WEA(cache_data_1_0$WEA),
					   .WEB(cache_data_1_0$WEB),
					   .ENA(cache_data_1_0$ENA),
					   .ENB(cache_data_1_0$ENB),
					   .DOA(cache_data_1_0$DOA),
					   .DOB());

  // submodule cache_data_1_1
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(8'd128)) cache_data_1_1(.CLKA(CLK),
					   .CLKB(CLK),
					   .ADDRA(cache_data_1_1$ADDRA),
					   .ADDRB(cache_data_1_1$ADDRB),
					   .DIA(cache_data_1_1$DIA),
					   .DIB(cache_data_1_1$DIB),
					   .WEA(cache_data_1_1$WEA),
					   .WEB(cache_data_1_1$WEB),
					   .ENA(cache_data_1_1$ENA),
					   .ENB(cache_data_1_1$ENB),
					   .DOA(cache_data_1_1$DOA),
					   .DOB());

  // submodule cache_data_1_2
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(8'd128)) cache_data_1_2(.CLKA(CLK),
					   .CLKB(CLK),
					   .ADDRA(cache_data_1_2$ADDRA),
					   .ADDRB(cache_data_1_2$ADDRB),
					   .DIA(cache_data_1_2$DIA),
					   .DIB(cache_data_1_2$DIB),
					   .WEA(cache_data_1_2$WEA),
					   .WEB(cache_data_1_2$WEB),
					   .ENA(cache_data_1_2$ENA),
					   .ENB(cache_data_1_2$ENB),
					   .DOA(cache_data_1_2$DOA),
					   .DOB());

  // submodule cache_data_1_3
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(8'd128)) cache_data_1_3(.CLKA(CLK),
					   .CLKB(CLK),
					   .ADDRA(cache_data_1_3$ADDRA),
					   .ADDRB(cache_data_1_3$ADDRB),
					   .DIA(cache_data_1_3$DIA),
					   .DIB(cache_data_1_3$DIB),
					   .WEA(cache_data_1_3$WEA),
					   .WEB(cache_data_1_3$WEB),
					   .ENA(cache_data_1_3$ENA),
					   .ENB(cache_data_1_3$ENB),
					   .DOA(cache_data_1_3$DOA),
					   .DOB());

  // submodule cache_data_1_4
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(8'd128)) cache_data_1_4(.CLKA(CLK),
					   .CLKB(CLK),
					   .ADDRA(cache_data_1_4$ADDRA),
					   .ADDRB(cache_data_1_4$ADDRB),
					   .DIA(cache_data_1_4$DIA),
					   .DIB(cache_data_1_4$DIB),
					   .WEA(cache_data_1_4$WEA),
					   .WEB(cache_data_1_4$WEB),
					   .ENA(cache_data_1_4$ENA),
					   .ENB(cache_data_1_4$ENB),
					   .DOA(cache_data_1_4$DOA),
					   .DOB());

  // submodule cache_data_1_5
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(8'd128)) cache_data_1_5(.CLKA(CLK),
					   .CLKB(CLK),
					   .ADDRA(cache_data_1_5$ADDRA),
					   .ADDRB(cache_data_1_5$ADDRB),
					   .DIA(cache_data_1_5$DIA),
					   .DIB(cache_data_1_5$DIB),
					   .WEA(cache_data_1_5$WEA),
					   .WEB(cache_data_1_5$WEB),
					   .ENA(cache_data_1_5$ENA),
					   .ENB(cache_data_1_5$ENB),
					   .DOA(cache_data_1_5$DOA),
					   .DOB());

  // submodule cache_data_1_6
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(8'd128)) cache_data_1_6(.CLKA(CLK),
					   .CLKB(CLK),
					   .ADDRA(cache_data_1_6$ADDRA),
					   .ADDRB(cache_data_1_6$ADDRB),
					   .DIA(cache_data_1_6$DIA),
					   .DIB(cache_data_1_6$DIB),
					   .WEA(cache_data_1_6$WEA),
					   .WEB(cache_data_1_6$WEB),
					   .ENA(cache_data_1_6$ENA),
					   .ENB(cache_data_1_6$ENB),
					   .DOA(cache_data_1_6$DOA),
					   .DOB());

  // submodule cache_data_1_7
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(8'd128)) cache_data_1_7(.CLKA(CLK),
					   .CLKB(CLK),
					   .ADDRA(cache_data_1_7$ADDRA),
					   .ADDRB(cache_data_1_7$ADDRB),
					   .DIA(cache_data_1_7$DIA),
					   .DIB(cache_data_1_7$DIB),
					   .WEA(cache_data_1_7$WEA),
					   .WEB(cache_data_1_7$WEB),
					   .ENA(cache_data_1_7$ENA),
					   .ENB(cache_data_1_7$ENB),
					   .DOA(cache_data_1_7$DOA),
					   .DOB());

  // submodule cache_data_2_0
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(8'd128)) cache_data_2_0(.CLKA(CLK),
					   .CLKB(CLK),
					   .ADDRA(cache_data_2_0$ADDRA),
					   .ADDRB(cache_data_2_0$ADDRB),
					   .DIA(cache_data_2_0$DIA),
					   .DIB(cache_data_2_0$DIB),
					   .WEA(cache_data_2_0$WEA),
					   .WEB(cache_data_2_0$WEB),
					   .ENA(cache_data_2_0$ENA),
					   .ENB(cache_data_2_0$ENB),
					   .DOA(cache_data_2_0$DOA),
					   .DOB());

  // submodule cache_data_2_1
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(8'd128)) cache_data_2_1(.CLKA(CLK),
					   .CLKB(CLK),
					   .ADDRA(cache_data_2_1$ADDRA),
					   .ADDRB(cache_data_2_1$ADDRB),
					   .DIA(cache_data_2_1$DIA),
					   .DIB(cache_data_2_1$DIB),
					   .WEA(cache_data_2_1$WEA),
					   .WEB(cache_data_2_1$WEB),
					   .ENA(cache_data_2_1$ENA),
					   .ENB(cache_data_2_1$ENB),
					   .DOA(cache_data_2_1$DOA),
					   .DOB());

  // submodule cache_data_2_2
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(8'd128)) cache_data_2_2(.CLKA(CLK),
					   .CLKB(CLK),
					   .ADDRA(cache_data_2_2$ADDRA),
					   .ADDRB(cache_data_2_2$ADDRB),
					   .DIA(cache_data_2_2$DIA),
					   .DIB(cache_data_2_2$DIB),
					   .WEA(cache_data_2_2$WEA),
					   .WEB(cache_data_2_2$WEB),
					   .ENA(cache_data_2_2$ENA),
					   .ENB(cache_data_2_2$ENB),
					   .DOA(cache_data_2_2$DOA),
					   .DOB());

  // submodule cache_data_2_3
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(8'd128)) cache_data_2_3(.CLKA(CLK),
					   .CLKB(CLK),
					   .ADDRA(cache_data_2_3$ADDRA),
					   .ADDRB(cache_data_2_3$ADDRB),
					   .DIA(cache_data_2_3$DIA),
					   .DIB(cache_data_2_3$DIB),
					   .WEA(cache_data_2_3$WEA),
					   .WEB(cache_data_2_3$WEB),
					   .ENA(cache_data_2_3$ENA),
					   .ENB(cache_data_2_3$ENB),
					   .DOA(cache_data_2_3$DOA),
					   .DOB());

  // submodule cache_data_2_4
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(8'd128)) cache_data_2_4(.CLKA(CLK),
					   .CLKB(CLK),
					   .ADDRA(cache_data_2_4$ADDRA),
					   .ADDRB(cache_data_2_4$ADDRB),
					   .DIA(cache_data_2_4$DIA),
					   .DIB(cache_data_2_4$DIB),
					   .WEA(cache_data_2_4$WEA),
					   .WEB(cache_data_2_4$WEB),
					   .ENA(cache_data_2_4$ENA),
					   .ENB(cache_data_2_4$ENB),
					   .DOA(cache_data_2_4$DOA),
					   .DOB());

  // submodule cache_data_2_5
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(8'd128)) cache_data_2_5(.CLKA(CLK),
					   .CLKB(CLK),
					   .ADDRA(cache_data_2_5$ADDRA),
					   .ADDRB(cache_data_2_5$ADDRB),
					   .DIA(cache_data_2_5$DIA),
					   .DIB(cache_data_2_5$DIB),
					   .WEA(cache_data_2_5$WEA),
					   .WEB(cache_data_2_5$WEB),
					   .ENA(cache_data_2_5$ENA),
					   .ENB(cache_data_2_5$ENB),
					   .DOA(cache_data_2_5$DOA),
					   .DOB());

  // submodule cache_data_2_6
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(8'd128)) cache_data_2_6(.CLKA(CLK),
					   .CLKB(CLK),
					   .ADDRA(cache_data_2_6$ADDRA),
					   .ADDRB(cache_data_2_6$ADDRB),
					   .DIA(cache_data_2_6$DIA),
					   .DIB(cache_data_2_6$DIB),
					   .WEA(cache_data_2_6$WEA),
					   .WEB(cache_data_2_6$WEB),
					   .ENA(cache_data_2_6$ENA),
					   .ENB(cache_data_2_6$ENB),
					   .DOA(cache_data_2_6$DOA),
					   .DOB());

  // submodule cache_data_2_7
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(8'd128)) cache_data_2_7(.CLKA(CLK),
					   .CLKB(CLK),
					   .ADDRA(cache_data_2_7$ADDRA),
					   .ADDRB(cache_data_2_7$ADDRB),
					   .DIA(cache_data_2_7$DIA),
					   .DIB(cache_data_2_7$DIB),
					   .WEA(cache_data_2_7$WEA),
					   .WEB(cache_data_2_7$WEB),
					   .ENA(cache_data_2_7$ENA),
					   .ENB(cache_data_2_7$ENB),
					   .DOA(cache_data_2_7$DOA),
					   .DOB());

  // submodule cache_data_3_0
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(8'd128)) cache_data_3_0(.CLKA(CLK),
					   .CLKB(CLK),
					   .ADDRA(cache_data_3_0$ADDRA),
					   .ADDRB(cache_data_3_0$ADDRB),
					   .DIA(cache_data_3_0$DIA),
					   .DIB(cache_data_3_0$DIB),
					   .WEA(cache_data_3_0$WEA),
					   .WEB(cache_data_3_0$WEB),
					   .ENA(cache_data_3_0$ENA),
					   .ENB(cache_data_3_0$ENB),
					   .DOA(cache_data_3_0$DOA),
					   .DOB());

  // submodule cache_data_3_1
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(8'd128)) cache_data_3_1(.CLKA(CLK),
					   .CLKB(CLK),
					   .ADDRA(cache_data_3_1$ADDRA),
					   .ADDRB(cache_data_3_1$ADDRB),
					   .DIA(cache_data_3_1$DIA),
					   .DIB(cache_data_3_1$DIB),
					   .WEA(cache_data_3_1$WEA),
					   .WEB(cache_data_3_1$WEB),
					   .ENA(cache_data_3_1$ENA),
					   .ENB(cache_data_3_1$ENB),
					   .DOA(cache_data_3_1$DOA),
					   .DOB());

  // submodule cache_data_3_2
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(8'd128)) cache_data_3_2(.CLKA(CLK),
					   .CLKB(CLK),
					   .ADDRA(cache_data_3_2$ADDRA),
					   .ADDRB(cache_data_3_2$ADDRB),
					   .DIA(cache_data_3_2$DIA),
					   .DIB(cache_data_3_2$DIB),
					   .WEA(cache_data_3_2$WEA),
					   .WEB(cache_data_3_2$WEB),
					   .ENA(cache_data_3_2$ENA),
					   .ENB(cache_data_3_2$ENB),
					   .DOA(cache_data_3_2$DOA),
					   .DOB());

  // submodule cache_data_3_3
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(8'd128)) cache_data_3_3(.CLKA(CLK),
					   .CLKB(CLK),
					   .ADDRA(cache_data_3_3$ADDRA),
					   .ADDRB(cache_data_3_3$ADDRB),
					   .DIA(cache_data_3_3$DIA),
					   .DIB(cache_data_3_3$DIB),
					   .WEA(cache_data_3_3$WEA),
					   .WEB(cache_data_3_3$WEB),
					   .ENA(cache_data_3_3$ENA),
					   .ENB(cache_data_3_3$ENB),
					   .DOA(cache_data_3_3$DOA),
					   .DOB());

  // submodule cache_data_3_4
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(8'd128)) cache_data_3_4(.CLKA(CLK),
					   .CLKB(CLK),
					   .ADDRA(cache_data_3_4$ADDRA),
					   .ADDRB(cache_data_3_4$ADDRB),
					   .DIA(cache_data_3_4$DIA),
					   .DIB(cache_data_3_4$DIB),
					   .WEA(cache_data_3_4$WEA),
					   .WEB(cache_data_3_4$WEB),
					   .ENA(cache_data_3_4$ENA),
					   .ENB(cache_data_3_4$ENB),
					   .DOA(cache_data_3_4$DOA),
					   .DOB());

  // submodule cache_data_3_5
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(8'd128)) cache_data_3_5(.CLKA(CLK),
					   .CLKB(CLK),
					   .ADDRA(cache_data_3_5$ADDRA),
					   .ADDRB(cache_data_3_5$ADDRB),
					   .DIA(cache_data_3_5$DIA),
					   .DIB(cache_data_3_5$DIB),
					   .WEA(cache_data_3_5$WEA),
					   .WEB(cache_data_3_5$WEB),
					   .ENA(cache_data_3_5$ENA),
					   .ENB(cache_data_3_5$ENB),
					   .DOA(cache_data_3_5$DOA),
					   .DOB());

  // submodule cache_data_3_6
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(8'd128)) cache_data_3_6(.CLKA(CLK),
					   .CLKB(CLK),
					   .ADDRA(cache_data_3_6$ADDRA),
					   .ADDRB(cache_data_3_6$ADDRB),
					   .DIA(cache_data_3_6$DIA),
					   .DIB(cache_data_3_6$DIB),
					   .WEA(cache_data_3_6$WEA),
					   .WEB(cache_data_3_6$WEB),
					   .ENA(cache_data_3_6$ENA),
					   .ENB(cache_data_3_6$ENB),
					   .DOA(cache_data_3_6$DOA),
					   .DOB());

  // submodule cache_data_3_7
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(8'd128)) cache_data_3_7(.CLKA(CLK),
					   .CLKB(CLK),
					   .ADDRA(cache_data_3_7$ADDRA),
					   .ADDRB(cache_data_3_7$ADDRB),
					   .DIA(cache_data_3_7$DIA),
					   .DIB(cache_data_3_7$DIB),
					   .WEA(cache_data_3_7$WEA),
					   .WEB(cache_data_3_7$WEB),
					   .ENA(cache_data_3_7$ENA),
					   .ENB(cache_data_3_7$ENB),
					   .DOA(cache_data_3_7$DOA),
					   .DOB());

  // submodule cache_ff_request_from_cpu
  FIFOL1 #(.width(32'd32)) cache_ff_request_from_cpu(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(cache_ff_request_from_cpu$D_IN),
						     .ENQ(cache_ff_request_from_cpu$ENQ),
						     .DEQ(cache_ff_request_from_cpu$DEQ),
						     .CLR(cache_ff_request_from_cpu$CLR),
						     .D_OUT(cache_ff_request_from_cpu$D_OUT),
						     .FULL_N(cache_ff_request_from_cpu$FULL_N),
						     .EMPTY_N(cache_ff_request_from_cpu$EMPTY_N));

  // submodule cache_ff_request_to_memory_ff
  FIFO1 #(.width(32'd39),
	  .guarded(32'd0)) cache_ff_request_to_memory_ff(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(cache_ff_request_to_memory_ff$D_IN),
							 .ENQ(cache_ff_request_to_memory_ff$ENQ),
							 .DEQ(cache_ff_request_to_memory_ff$DEQ),
							 .CLR(cache_ff_request_to_memory_ff$CLR),
							 .D_OUT(cache_ff_request_to_memory_ff$D_OUT),
							 .FULL_N(cache_ff_request_to_memory_ff$FULL_N),
							 .EMPTY_N(cache_ff_request_to_memory_ff$EMPTY_N));

  // submodule cache_ff_request_to_memory_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) cache_ff_request_to_memory_firstValid(.CLK(CLK),
								 .D_IN(cache_ff_request_to_memory_firstValid$D_IN),
								 .EN(cache_ff_request_to_memory_firstValid$EN),
								 .Q_OUT(cache_ff_request_to_memory_firstValid$Q_OUT));

  // submodule cache_ff_response_from_memory
  FIFOL1 #(.width(32'd65)) cache_ff_response_from_memory(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(cache_ff_response_from_memory$D_IN),
							 .ENQ(cache_ff_response_from_memory$ENQ),
							 .DEQ(cache_ff_response_from_memory$DEQ),
							 .CLR(cache_ff_response_from_memory$CLR),
							 .D_OUT(cache_ff_response_from_memory$D_OUT),
							 .FULL_N(cache_ff_response_from_memory$FULL_N),
							 .EMPTY_N(cache_ff_response_from_memory$EMPTY_N));

  // submodule cache_ff_response_to_cpu_ff
  SizedFIFO #(.p1width(32'd66),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(32'd0)) cache_ff_response_to_cpu_ff(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(cache_ff_response_to_cpu_ff$D_IN),
							   .ENQ(cache_ff_response_to_cpu_ff$ENQ),
							   .DEQ(cache_ff_response_to_cpu_ff$DEQ),
							   .CLR(cache_ff_response_to_cpu_ff$CLR),
							   .D_OUT(cache_ff_response_to_cpu_ff$D_OUT),
							   .FULL_N(cache_ff_response_to_cpu_ff$FULL_N),
							   .EMPTY_N(cache_ff_response_to_cpu_ff$EMPTY_N));

  // submodule cache_ff_response_to_cpu_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) cache_ff_response_to_cpu_firstValid(.CLK(CLK),
							       .D_IN(cache_ff_response_to_cpu_firstValid$D_IN),
							       .EN(cache_ff_response_to_cpu_firstValid$EN),
							       .Q_OUT(cache_ff_response_to_cpu_firstValid$Q_OUT));

  // submodule cache_tag_0
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd20),
	  .MEMSIZE(8'd128)) cache_tag_0(.CLKA(CLK),
					.CLKB(CLK),
					.ADDRA(cache_tag_0$ADDRA),
					.ADDRB(cache_tag_0$ADDRB),
					.DIA(cache_tag_0$DIA),
					.DIB(cache_tag_0$DIB),
					.WEA(cache_tag_0$WEA),
					.WEB(cache_tag_0$WEB),
					.ENA(cache_tag_0$ENA),
					.ENB(cache_tag_0$ENB),
					.DOA(cache_tag_0$DOA),
					.DOB());

  // submodule cache_tag_1
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd20),
	  .MEMSIZE(8'd128)) cache_tag_1(.CLKA(CLK),
					.CLKB(CLK),
					.ADDRA(cache_tag_1$ADDRA),
					.ADDRB(cache_tag_1$ADDRB),
					.DIA(cache_tag_1$DIA),
					.DIB(cache_tag_1$DIB),
					.WEA(cache_tag_1$WEA),
					.WEB(cache_tag_1$WEB),
					.ENA(cache_tag_1$ENA),
					.ENB(cache_tag_1$ENB),
					.DOA(cache_tag_1$DOA),
					.DOB());

  // submodule cache_tag_2
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd20),
	  .MEMSIZE(8'd128)) cache_tag_2(.CLKA(CLK),
					.CLKB(CLK),
					.ADDRA(cache_tag_2$ADDRA),
					.ADDRB(cache_tag_2$ADDRB),
					.DIA(cache_tag_2$DIA),
					.DIB(cache_tag_2$DIB),
					.WEA(cache_tag_2$WEA),
					.WEB(cache_tag_2$WEB),
					.ENA(cache_tag_2$ENA),
					.ENB(cache_tag_2$ENB),
					.DOA(cache_tag_2$DOA),
					.DOB());

  // submodule cache_tag_3
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd20),
	  .MEMSIZE(8'd128)) cache_tag_3(.CLKA(CLK),
					.CLKB(CLK),
					.ADDRA(cache_tag_3$ADDRA),
					.ADDRB(cache_tag_3$ADDRB),
					.DIA(cache_tag_3$DIA),
					.DIB(cache_tag_3$DIB),
					.WEA(cache_tag_3$WEA),
					.WEB(cache_tag_3$WEB),
					.ENA(cache_tag_3$ENA),
					.ENB(cache_tag_3$ENB),
					.DOA(cache_tag_3$DOA),
					.DOB());

  // submodule cache_valid_0
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd1),
	  .MEMSIZE(8'd128)) cache_valid_0(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(cache_valid_0$ADDRA),
					  .ADDRB(cache_valid_0$ADDRB),
					  .DIA(cache_valid_0$DIA),
					  .DIB(cache_valid_0$DIB),
					  .WEA(cache_valid_0$WEA),
					  .WEB(cache_valid_0$WEB),
					  .ENA(cache_valid_0$ENA),
					  .ENB(cache_valid_0$ENB),
					  .DOA(cache_valid_0$DOA),
					  .DOB());

  // submodule cache_valid_1
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd1),
	  .MEMSIZE(8'd128)) cache_valid_1(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(cache_valid_1$ADDRA),
					  .ADDRB(cache_valid_1$ADDRB),
					  .DIA(cache_valid_1$DIA),
					  .DIB(cache_valid_1$DIB),
					  .WEA(cache_valid_1$WEA),
					  .WEB(cache_valid_1$WEB),
					  .ENA(cache_valid_1$ENA),
					  .ENB(cache_valid_1$ENB),
					  .DOA(cache_valid_1$DOA),
					  .DOB());

  // submodule cache_valid_2
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd1),
	  .MEMSIZE(8'd128)) cache_valid_2(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(cache_valid_2$ADDRA),
					  .ADDRB(cache_valid_2$ADDRB),
					  .DIA(cache_valid_2$DIA),
					  .DIB(cache_valid_2$DIB),
					  .WEA(cache_valid_2$WEA),
					  .WEB(cache_valid_2$WEB),
					  .ENA(cache_valid_2$ENA),
					  .ENB(cache_valid_2$ENB),
					  .DOA(cache_valid_2$DOA),
					  .DOB());

  // submodule cache_valid_3
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd1),
	  .MEMSIZE(8'd128)) cache_valid_3(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(cache_valid_3$ADDRA),
					  .ADDRB(cache_valid_3$ADDRB),
					  .DIA(cache_valid_3$DIA),
					  .DIB(cache_valid_3$DIB),
					  .WEA(cache_valid_3$WEA),
					  .WEB(cache_valid_3$WEB),
					  .ENA(cache_valid_3$ENA),
					  .ENB(cache_valid_3$ENB),
					  .DOA(cache_valid_3$DOA),
					  .DOB());

  // rule RL_cache_initialize_cache
  assign CAN_FIRE_RL_cache_initialize_cache = cache_rg_initialize ;
  assign WILL_FIRE_RL_cache_initialize_cache = cache_rg_initialize ;

  // rule RL_cache_cache_is_disabled
  assign CAN_FIRE_RL_cache_cache_is_disabled =
	     cache_ff_request_to_memory_ff$FULL_N &&
	     cache_ff_request_from_cpu$EMPTY_N &&
	     !cache_rg_enable ;
  assign WILL_FIRE_RL_cache_cache_is_disabled =
	     CAN_FIRE_RL_cache_cache_is_disabled ;

  // rule RL_cache_read_from_bram
  assign CAN_FIRE_RL_cache_read_from_bram =
	     cache_ff_request_from_cpu$EMPTY_N &&
	     cache_ff_request_to_memory_ff$FULL_N &&
	     cache_ff_response_to_cpu_ff$FULL_N &&
	     !cache_rg_initialize &&
	     cache_rg_enable &&
	     cache_rg_state == 2'd2 ;
  assign WILL_FIRE_RL_cache_read_from_bram =
	     CAN_FIRE_RL_cache_read_from_bram ;

  // rule RL_cache_forward_from_memory_to_cpu
  assign CAN_FIRE_RL_cache_forward_from_memory_to_cpu =
	     cache_ff_response_from_memory$EMPTY_N &&
	     cache_ff_response_to_cpu_ff$FULL_N &&
	     !EN_flush &&
	     cache_rg_state$port1__read == 2'd3 ;
  assign WILL_FIRE_RL_cache_forward_from_memory_to_cpu =
	     CAN_FIRE_RL_cache_forward_from_memory_to_cpu &&
	     !WILL_FIRE_RL_cache_read_from_bram ;

  // rule RL_cache_got_response_from_memory
  assign CAN_FIRE_RL_cache_got_response_from_memory =
	     cache_ff_response_from_memory$EMPTY_N && !cache_rg_initialize &&
	     cache_rg_state$port1__read == 2'd3 ;
  assign WILL_FIRE_RL_cache_got_response_from_memory =
	     CAN_FIRE_RL_cache_got_response_from_memory &&
	     !WILL_FIRE_RL_cache_read_from_bram ;

  // rule RL_cache_stall_for_write_to_take_effect
  assign CAN_FIRE_RL_cache_stall_for_write_to_take_effect =
	     cache_rg_state$port1__read == 2'd1 ;
  assign WILL_FIRE_RL_cache_stall_for_write_to_take_effect =
	     CAN_FIRE_RL_cache_stall_for_write_to_take_effect ;

  // rule RL_cache_ff_response_to_cpu_enqueue
  assign CAN_FIRE_RL_cache_ff_response_to_cpu_enqueue =
	     cache_ff_response_to_cpu_enqw$whas &&
	     (!EN_response_to_cpu || cache_ff_response_to_cpu_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_cache_ff_response_to_cpu_enqueue =
	     CAN_FIRE_RL_cache_ff_response_to_cpu_enqueue ;

  // rule RL_cache_ff_response_to_cpu_dequeue
  assign CAN_FIRE_RL_cache_ff_response_to_cpu_dequeue =
	     EN_response_to_cpu && cache_ff_response_to_cpu_ff$EMPTY_N ;
  assign WILL_FIRE_RL_cache_ff_response_to_cpu_dequeue =
	     CAN_FIRE_RL_cache_ff_response_to_cpu_dequeue ;

  // rule RL_cache_flush_response_cache
  assign CAN_FIRE_RL_cache_flush_response_cache = EN_flush ;
  assign WILL_FIRE_RL_cache_flush_response_cache = EN_flush ;

  // rule RL_cache_ff_request_to_memory_enqueue
  assign CAN_FIRE_RL_cache_ff_request_to_memory_enqueue =
	     cache_ff_request_to_memory_enqw$whas &&
	     (!EN_request_to_memory ||
	      cache_ff_request_to_memory_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_cache_ff_request_to_memory_enqueue =
	     CAN_FIRE_RL_cache_ff_request_to_memory_enqueue ;

  // rule RL_cache_ff_request_to_memory_dequeue
  assign CAN_FIRE_RL_cache_ff_request_to_memory_dequeue =
	     EN_request_to_memory && cache_ff_request_to_memory_ff$EMPTY_N ;
  assign WILL_FIRE_RL_cache_ff_request_to_memory_dequeue =
	     CAN_FIRE_RL_cache_ff_request_to_memory_dequeue ;

  // inputs to muxes for submodule ports
  assign MUX_cache_ff_request_to_memory_enqw$wset_1__SEL_1 =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu_first__8_BITS_1_TO_0_ETC___d471 ;
  assign MUX_cache_ff_response_to_cpu_enqw$wset_1__SEL_1 =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_valid_3_a_read__2_AND_cache_tag_3_a_read_ETC___d414 ;
  assign MUX_cache_rg_state$port1__write_1__SEL_1 =
	     WILL_FIRE_RL_cache_got_response_from_memory && cache_rg_enable &&
	     cache_rg_word_count == 3'd7 ;
  assign MUX_cache_valid_0$a_put_1__SEL_1 =
	     EN_request_from_cpu && cache_rg_enable ;
  assign MUX_cache_ff_request_to_memory_enqw$wset_1__VAL_1 =
	     { cache_ff_request_from_cpu$D_OUT, 7'd32 } ;
  assign MUX_cache_ff_request_to_memory_enqw$wset_1__VAL_2 =
	     { cache_ff_request_from_cpu$D_OUT, 7'd4 } ;
  assign MUX_cache_ff_response_to_cpu_enqw$wset_1__VAL_1 =
	     (cache_ff_request_from_cpu$D_OUT[1:0] == 2'd0) ?
	       { x_data_word__h103841,
		 2'd0,
		 cache_ff_request_from_cpu$D_OUT } :
	       { 34'd1, cache_ff_request_from_cpu$D_OUT } ;
  assign MUX_cache_ff_response_to_cpu_enqw$wset_1__VAL_2 =
	     { cache_ff_response_from_memory$D_OUT[64:32],
	       1'd0,
	       cache_ff_response_from_memory$D_OUT[31:0] } ;

  // inlined wires
  assign cache_ff_response_to_cpu_enqw$wget =
	     MUX_cache_ff_response_to_cpu_enqw$wset_1__SEL_1 ?
	       MUX_cache_ff_response_to_cpu_enqw$wset_1__VAL_1 :
	       MUX_cache_ff_response_to_cpu_enqw$wset_1__VAL_2 ;
  assign cache_ff_response_to_cpu_enqw$whas =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_valid_3_a_read__2_AND_cache_tag_3_a_read_ETC___d414 ||
	     WILL_FIRE_RL_cache_forward_from_memory_to_cpu &&
	     cache_ff_response_from_memory$D_OUT[4:2] >= cache_rg_offset &&
	     !cache_rg_flush ;
  assign cache_ff_request_to_memory_enqw$wget =
	     MUX_cache_ff_request_to_memory_enqw$wset_1__SEL_1 ?
	       MUX_cache_ff_request_to_memory_enqw$wset_1__VAL_1 :
	       MUX_cache_ff_request_to_memory_enqw$wset_1__VAL_2 ;
  assign cache_ff_request_to_memory_enqw$whas =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu_first__8_BITS_1_TO_0_ETC___d471 ||
	     WILL_FIRE_RL_cache_cache_is_disabled ;
  assign cache_wr_line_done$whas =
	     WILL_FIRE_RL_cache_got_response_from_memory && cache_rg_enable &&
	     cache_rg_word_count == 3'd6 ;
  assign cache_rg_state$port0__write_1 =
	     (cache_ff_request_from_cpu$D_OUT[1:0] == 2'd0) ?
	       IF_cache_valid_3_a_read__2_AND_cache_tag_3_a_r_ETC___d411 :
	       2'd0 ;
  assign cache_rg_state$port1__read =
	     CAN_FIRE_RL_cache_read_from_bram ?
	       cache_rg_state$port0__write_1 :
	       cache_rg_state ;
  assign cache_rg_state$EN_port1__write =
	     WILL_FIRE_RL_cache_got_response_from_memory && cache_rg_enable &&
	     cache_rg_word_count == 3'd7 ||
	     WILL_FIRE_RL_cache_stall_for_write_to_take_effect ;
  assign cache_rg_state$port1__write_1 =
	     MUX_cache_rg_state$port1__write_1__SEL_1 ? 2'd1 : 2'd0 ;
  assign cache_rg_state$port2__read =
	     cache_rg_state$EN_port1__write ?
	       cache_rg_state$port1__write_1 :
	       cache_rg_state$port1__read ;
  assign cache_rg_state$port3__read =
	     EN_request_from_cpu ? 2'd2 : cache_rg_state$port2__read ;

  // register cache_pseudo_lru_0
  assign cache_pseudo_lru_0$D_IN =
	     (IF_cache_valid_3_a_read__2_AND_cache_tag_3_a_r_ETC___d215 ||
	      IF_cache_valid_3_a_read__2_AND_cache_tag_3_a_r_ETC___d223) ?
	       IF_IF_IF_cache_valid_3_a_read__2_AND_cache_tag_ETC___d280 :
	       IF_IF_cache_valid_3_a_read__2_AND_cache_tag_3__ETC___d264 ;
  assign cache_pseudo_lru_0$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd0 ;

  // register cache_pseudo_lru_1
  assign cache_pseudo_lru_1$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_1$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd1 ;

  // register cache_pseudo_lru_10
  assign cache_pseudo_lru_10$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_10$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd10 ;

  // register cache_pseudo_lru_100
  assign cache_pseudo_lru_100$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_100$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd100 ;

  // register cache_pseudo_lru_101
  assign cache_pseudo_lru_101$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_101$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd101 ;

  // register cache_pseudo_lru_102
  assign cache_pseudo_lru_102$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_102$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd102 ;

  // register cache_pseudo_lru_103
  assign cache_pseudo_lru_103$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_103$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd103 ;

  // register cache_pseudo_lru_104
  assign cache_pseudo_lru_104$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_104$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd104 ;

  // register cache_pseudo_lru_105
  assign cache_pseudo_lru_105$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_105$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd105 ;

  // register cache_pseudo_lru_106
  assign cache_pseudo_lru_106$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_106$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd106 ;

  // register cache_pseudo_lru_107
  assign cache_pseudo_lru_107$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_107$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd107 ;

  // register cache_pseudo_lru_108
  assign cache_pseudo_lru_108$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_108$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd108 ;

  // register cache_pseudo_lru_109
  assign cache_pseudo_lru_109$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_109$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd109 ;

  // register cache_pseudo_lru_11
  assign cache_pseudo_lru_11$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_11$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd11 ;

  // register cache_pseudo_lru_110
  assign cache_pseudo_lru_110$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_110$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd110 ;

  // register cache_pseudo_lru_111
  assign cache_pseudo_lru_111$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_111$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd111 ;

  // register cache_pseudo_lru_112
  assign cache_pseudo_lru_112$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_112$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd112 ;

  // register cache_pseudo_lru_113
  assign cache_pseudo_lru_113$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_113$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd113 ;

  // register cache_pseudo_lru_114
  assign cache_pseudo_lru_114$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_114$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd114 ;

  // register cache_pseudo_lru_115
  assign cache_pseudo_lru_115$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_115$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd115 ;

  // register cache_pseudo_lru_116
  assign cache_pseudo_lru_116$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_116$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd116 ;

  // register cache_pseudo_lru_117
  assign cache_pseudo_lru_117$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_117$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd117 ;

  // register cache_pseudo_lru_118
  assign cache_pseudo_lru_118$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_118$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd118 ;

  // register cache_pseudo_lru_119
  assign cache_pseudo_lru_119$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_119$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd119 ;

  // register cache_pseudo_lru_12
  assign cache_pseudo_lru_12$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_12$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd12 ;

  // register cache_pseudo_lru_120
  assign cache_pseudo_lru_120$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_120$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd120 ;

  // register cache_pseudo_lru_121
  assign cache_pseudo_lru_121$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_121$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd121 ;

  // register cache_pseudo_lru_122
  assign cache_pseudo_lru_122$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_122$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd122 ;

  // register cache_pseudo_lru_123
  assign cache_pseudo_lru_123$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_123$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd123 ;

  // register cache_pseudo_lru_124
  assign cache_pseudo_lru_124$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_124$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd124 ;

  // register cache_pseudo_lru_125
  assign cache_pseudo_lru_125$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_125$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd125 ;

  // register cache_pseudo_lru_126
  assign cache_pseudo_lru_126$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_126$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd126 ;

  // register cache_pseudo_lru_127
  assign cache_pseudo_lru_127$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_127$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd127 ;

  // register cache_pseudo_lru_13
  assign cache_pseudo_lru_13$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_13$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd13 ;

  // register cache_pseudo_lru_14
  assign cache_pseudo_lru_14$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_14$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd14 ;

  // register cache_pseudo_lru_15
  assign cache_pseudo_lru_15$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_15$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd15 ;

  // register cache_pseudo_lru_16
  assign cache_pseudo_lru_16$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_16$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd16 ;

  // register cache_pseudo_lru_17
  assign cache_pseudo_lru_17$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_17$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd17 ;

  // register cache_pseudo_lru_18
  assign cache_pseudo_lru_18$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_18$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd18 ;

  // register cache_pseudo_lru_19
  assign cache_pseudo_lru_19$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_19$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd19 ;

  // register cache_pseudo_lru_2
  assign cache_pseudo_lru_2$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_2$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd2 ;

  // register cache_pseudo_lru_20
  assign cache_pseudo_lru_20$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_20$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd20 ;

  // register cache_pseudo_lru_21
  assign cache_pseudo_lru_21$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_21$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd21 ;

  // register cache_pseudo_lru_22
  assign cache_pseudo_lru_22$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_22$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd22 ;

  // register cache_pseudo_lru_23
  assign cache_pseudo_lru_23$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_23$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd23 ;

  // register cache_pseudo_lru_24
  assign cache_pseudo_lru_24$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_24$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd24 ;

  // register cache_pseudo_lru_25
  assign cache_pseudo_lru_25$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_25$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd25 ;

  // register cache_pseudo_lru_26
  assign cache_pseudo_lru_26$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_26$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd26 ;

  // register cache_pseudo_lru_27
  assign cache_pseudo_lru_27$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_27$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd27 ;

  // register cache_pseudo_lru_28
  assign cache_pseudo_lru_28$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_28$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd28 ;

  // register cache_pseudo_lru_29
  assign cache_pseudo_lru_29$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_29$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd29 ;

  // register cache_pseudo_lru_3
  assign cache_pseudo_lru_3$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_3$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd3 ;

  // register cache_pseudo_lru_30
  assign cache_pseudo_lru_30$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_30$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd30 ;

  // register cache_pseudo_lru_31
  assign cache_pseudo_lru_31$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_31$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd31 ;

  // register cache_pseudo_lru_32
  assign cache_pseudo_lru_32$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_32$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd32 ;

  // register cache_pseudo_lru_33
  assign cache_pseudo_lru_33$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_33$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd33 ;

  // register cache_pseudo_lru_34
  assign cache_pseudo_lru_34$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_34$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd34 ;

  // register cache_pseudo_lru_35
  assign cache_pseudo_lru_35$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_35$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd35 ;

  // register cache_pseudo_lru_36
  assign cache_pseudo_lru_36$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_36$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd36 ;

  // register cache_pseudo_lru_37
  assign cache_pseudo_lru_37$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_37$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd37 ;

  // register cache_pseudo_lru_38
  assign cache_pseudo_lru_38$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_38$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd38 ;

  // register cache_pseudo_lru_39
  assign cache_pseudo_lru_39$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_39$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd39 ;

  // register cache_pseudo_lru_4
  assign cache_pseudo_lru_4$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_4$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd4 ;

  // register cache_pseudo_lru_40
  assign cache_pseudo_lru_40$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_40$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd40 ;

  // register cache_pseudo_lru_41
  assign cache_pseudo_lru_41$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_41$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd41 ;

  // register cache_pseudo_lru_42
  assign cache_pseudo_lru_42$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_42$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd42 ;

  // register cache_pseudo_lru_43
  assign cache_pseudo_lru_43$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_43$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd43 ;

  // register cache_pseudo_lru_44
  assign cache_pseudo_lru_44$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_44$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd44 ;

  // register cache_pseudo_lru_45
  assign cache_pseudo_lru_45$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_45$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd45 ;

  // register cache_pseudo_lru_46
  assign cache_pseudo_lru_46$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_46$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd46 ;

  // register cache_pseudo_lru_47
  assign cache_pseudo_lru_47$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_47$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd47 ;

  // register cache_pseudo_lru_48
  assign cache_pseudo_lru_48$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_48$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd48 ;

  // register cache_pseudo_lru_49
  assign cache_pseudo_lru_49$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_49$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd49 ;

  // register cache_pseudo_lru_5
  assign cache_pseudo_lru_5$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_5$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd5 ;

  // register cache_pseudo_lru_50
  assign cache_pseudo_lru_50$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_50$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd50 ;

  // register cache_pseudo_lru_51
  assign cache_pseudo_lru_51$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_51$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd51 ;

  // register cache_pseudo_lru_52
  assign cache_pseudo_lru_52$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_52$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd52 ;

  // register cache_pseudo_lru_53
  assign cache_pseudo_lru_53$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_53$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd53 ;

  // register cache_pseudo_lru_54
  assign cache_pseudo_lru_54$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_54$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd54 ;

  // register cache_pseudo_lru_55
  assign cache_pseudo_lru_55$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_55$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd55 ;

  // register cache_pseudo_lru_56
  assign cache_pseudo_lru_56$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_56$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd56 ;

  // register cache_pseudo_lru_57
  assign cache_pseudo_lru_57$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_57$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd57 ;

  // register cache_pseudo_lru_58
  assign cache_pseudo_lru_58$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_58$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd58 ;

  // register cache_pseudo_lru_59
  assign cache_pseudo_lru_59$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_59$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd59 ;

  // register cache_pseudo_lru_6
  assign cache_pseudo_lru_6$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_6$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd6 ;

  // register cache_pseudo_lru_60
  assign cache_pseudo_lru_60$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_60$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd60 ;

  // register cache_pseudo_lru_61
  assign cache_pseudo_lru_61$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_61$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd61 ;

  // register cache_pseudo_lru_62
  assign cache_pseudo_lru_62$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_62$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd62 ;

  // register cache_pseudo_lru_63
  assign cache_pseudo_lru_63$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_63$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd63 ;

  // register cache_pseudo_lru_64
  assign cache_pseudo_lru_64$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_64$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd64 ;

  // register cache_pseudo_lru_65
  assign cache_pseudo_lru_65$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_65$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd65 ;

  // register cache_pseudo_lru_66
  assign cache_pseudo_lru_66$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_66$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd66 ;

  // register cache_pseudo_lru_67
  assign cache_pseudo_lru_67$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_67$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd67 ;

  // register cache_pseudo_lru_68
  assign cache_pseudo_lru_68$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_68$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd68 ;

  // register cache_pseudo_lru_69
  assign cache_pseudo_lru_69$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_69$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd69 ;

  // register cache_pseudo_lru_7
  assign cache_pseudo_lru_7$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_7$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd7 ;

  // register cache_pseudo_lru_70
  assign cache_pseudo_lru_70$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_70$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd70 ;

  // register cache_pseudo_lru_71
  assign cache_pseudo_lru_71$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_71$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd71 ;

  // register cache_pseudo_lru_72
  assign cache_pseudo_lru_72$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_72$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd72 ;

  // register cache_pseudo_lru_73
  assign cache_pseudo_lru_73$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_73$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd73 ;

  // register cache_pseudo_lru_74
  assign cache_pseudo_lru_74$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_74$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd74 ;

  // register cache_pseudo_lru_75
  assign cache_pseudo_lru_75$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_75$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd75 ;

  // register cache_pseudo_lru_76
  assign cache_pseudo_lru_76$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_76$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd76 ;

  // register cache_pseudo_lru_77
  assign cache_pseudo_lru_77$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_77$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd77 ;

  // register cache_pseudo_lru_78
  assign cache_pseudo_lru_78$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_78$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd78 ;

  // register cache_pseudo_lru_79
  assign cache_pseudo_lru_79$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_79$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd79 ;

  // register cache_pseudo_lru_8
  assign cache_pseudo_lru_8$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_8$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd8 ;

  // register cache_pseudo_lru_80
  assign cache_pseudo_lru_80$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_80$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd80 ;

  // register cache_pseudo_lru_81
  assign cache_pseudo_lru_81$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_81$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd81 ;

  // register cache_pseudo_lru_82
  assign cache_pseudo_lru_82$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_82$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd82 ;

  // register cache_pseudo_lru_83
  assign cache_pseudo_lru_83$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_83$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd83 ;

  // register cache_pseudo_lru_84
  assign cache_pseudo_lru_84$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_84$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd84 ;

  // register cache_pseudo_lru_85
  assign cache_pseudo_lru_85$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_85$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd85 ;

  // register cache_pseudo_lru_86
  assign cache_pseudo_lru_86$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_86$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd86 ;

  // register cache_pseudo_lru_87
  assign cache_pseudo_lru_87$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_87$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd87 ;

  // register cache_pseudo_lru_88
  assign cache_pseudo_lru_88$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_88$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd88 ;

  // register cache_pseudo_lru_89
  assign cache_pseudo_lru_89$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_89$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd89 ;

  // register cache_pseudo_lru_9
  assign cache_pseudo_lru_9$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_9$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd9 ;

  // register cache_pseudo_lru_90
  assign cache_pseudo_lru_90$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_90$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd90 ;

  // register cache_pseudo_lru_91
  assign cache_pseudo_lru_91$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_91$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd91 ;

  // register cache_pseudo_lru_92
  assign cache_pseudo_lru_92$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_92$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd92 ;

  // register cache_pseudo_lru_93
  assign cache_pseudo_lru_93$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_93$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd93 ;

  // register cache_pseudo_lru_94
  assign cache_pseudo_lru_94$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_94$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd94 ;

  // register cache_pseudo_lru_95
  assign cache_pseudo_lru_95$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_95$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd95 ;

  // register cache_pseudo_lru_96
  assign cache_pseudo_lru_96$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_96$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd96 ;

  // register cache_pseudo_lru_97
  assign cache_pseudo_lru_97$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_97$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd97 ;

  // register cache_pseudo_lru_98
  assign cache_pseudo_lru_98$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_98$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd98 ;

  // register cache_pseudo_lru_99
  assign cache_pseudo_lru_99$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_99$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[11:5] == 7'd99 ;

  // register cache_rg_enable
  assign cache_rg_enable$D_IN = cache_enable_enable_ ;
  assign cache_rg_enable$EN = EN_cache_enable ;

  // register cache_rg_flush
  assign cache_rg_flush$D_IN = !EN_request_from_cpu ;
  assign cache_rg_flush$EN = EN_request_from_cpu || EN_flush ;

  // register cache_rg_index
  assign cache_rg_index$D_IN = cache_rg_index + 8'd1 ;
  assign cache_rg_index$EN = cache_rg_initialize ;

  // register cache_rg_initialize
  assign cache_rg_initialize$D_IN = 1'd0 ;
  assign cache_rg_initialize$EN =
	     cache_rg_initialize && cache_rg_index == 8'd127 ;

  // register cache_rg_offset
  assign cache_rg_offset$D_IN = cache_ff_request_from_cpu$D_OUT[4:2] ;
  assign cache_rg_offset$EN = CAN_FIRE_RL_cache_read_from_bram ;

  // register cache_rg_replace_block
  assign cache_rg_replace_block$D_IN =
	     (cache_valid_3$DOA &&
	      cache_tag_3_a_read__3_EQ_cache_ff_request_from_ETC___d45 ||
	      cache_valid_2_a_read__7_AND_cache_tag_2_a_read_ETC___d60) ?
	       IF_cache_valid_3_a_read__2_AND_cache_tag_3_a_r_ETC___d477 :
	       IF_cache_valid_0_a_read__5_AND_cache_valid_1_a_ETC___d485 ;
  assign cache_rg_replace_block$EN =
	     MUX_cache_ff_request_to_memory_enqw$wset_1__SEL_1 ;

  // register cache_rg_state
  assign cache_rg_state$D_IN = cache_rg_state$port3__read ;
  assign cache_rg_state$EN = 1'b1 ;

  // register cache_rg_word_count
  assign cache_rg_word_count$D_IN =
	     (cache_rg_word_count == 3'd7) ? 3'd0 : x__h105747 ;
  assign cache_rg_word_count$EN =
	     WILL_FIRE_RL_cache_got_response_from_memory && cache_rg_enable ;

  // submodule cache_data_0_0
  assign cache_data_0_0$ADDRA = request_from_cpu_req[11:5] ;
  assign cache_data_0_0$ADDRB = cache_ff_response_from_memory$D_OUT[11:5] ;
  assign cache_data_0_0$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_0_0$DIB = cache_ff_response_from_memory$D_OUT[64:33] ;
  assign cache_data_0_0$WEA = 1'd0 ;
  assign cache_data_0_0$WEB = 1'd1 ;
  assign cache_data_0_0$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_0_0$ENB =
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd0 &&
	     cache_rg_replace_block == 2'd0 &&
	     cache_rg_enable ;

  // submodule cache_data_0_1
  assign cache_data_0_1$ADDRA = request_from_cpu_req[11:5] ;
  assign cache_data_0_1$ADDRB = cache_ff_response_from_memory$D_OUT[11:5] ;
  assign cache_data_0_1$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_0_1$DIB = cache_ff_response_from_memory$D_OUT[64:33] ;
  assign cache_data_0_1$WEA = 1'd0 ;
  assign cache_data_0_1$WEB = 1'd1 ;
  assign cache_data_0_1$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_0_1$ENB =
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd1 &&
	     cache_rg_replace_block == 2'd0 &&
	     cache_rg_enable ;

  // submodule cache_data_0_2
  assign cache_data_0_2$ADDRA = request_from_cpu_req[11:5] ;
  assign cache_data_0_2$ADDRB = cache_ff_response_from_memory$D_OUT[11:5] ;
  assign cache_data_0_2$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_0_2$DIB = cache_ff_response_from_memory$D_OUT[64:33] ;
  assign cache_data_0_2$WEA = 1'd0 ;
  assign cache_data_0_2$WEB = 1'd1 ;
  assign cache_data_0_2$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_0_2$ENB =
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd2 &&
	     cache_rg_replace_block == 2'd0 &&
	     cache_rg_enable ;

  // submodule cache_data_0_3
  assign cache_data_0_3$ADDRA = request_from_cpu_req[11:5] ;
  assign cache_data_0_3$ADDRB = cache_ff_response_from_memory$D_OUT[11:5] ;
  assign cache_data_0_3$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_0_3$DIB = cache_ff_response_from_memory$D_OUT[64:33] ;
  assign cache_data_0_3$WEA = 1'd0 ;
  assign cache_data_0_3$WEB = 1'd1 ;
  assign cache_data_0_3$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_0_3$ENB =
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd3 &&
	     cache_rg_replace_block == 2'd0 &&
	     cache_rg_enable ;

  // submodule cache_data_0_4
  assign cache_data_0_4$ADDRA = request_from_cpu_req[11:5] ;
  assign cache_data_0_4$ADDRB = cache_ff_response_from_memory$D_OUT[11:5] ;
  assign cache_data_0_4$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_0_4$DIB = cache_ff_response_from_memory$D_OUT[64:33] ;
  assign cache_data_0_4$WEA = 1'd0 ;
  assign cache_data_0_4$WEB = 1'd1 ;
  assign cache_data_0_4$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_0_4$ENB =
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd4 &&
	     cache_rg_replace_block == 2'd0 &&
	     cache_rg_enable ;

  // submodule cache_data_0_5
  assign cache_data_0_5$ADDRA = request_from_cpu_req[11:5] ;
  assign cache_data_0_5$ADDRB = cache_ff_response_from_memory$D_OUT[11:5] ;
  assign cache_data_0_5$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_0_5$DIB = cache_ff_response_from_memory$D_OUT[64:33] ;
  assign cache_data_0_5$WEA = 1'd0 ;
  assign cache_data_0_5$WEB = 1'd1 ;
  assign cache_data_0_5$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_0_5$ENB =
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd5 &&
	     cache_rg_replace_block == 2'd0 &&
	     cache_rg_enable ;

  // submodule cache_data_0_6
  assign cache_data_0_6$ADDRA = request_from_cpu_req[11:5] ;
  assign cache_data_0_6$ADDRB = cache_ff_response_from_memory$D_OUT[11:5] ;
  assign cache_data_0_6$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_0_6$DIB = cache_ff_response_from_memory$D_OUT[64:33] ;
  assign cache_data_0_6$WEA = 1'd0 ;
  assign cache_data_0_6$WEB = 1'd1 ;
  assign cache_data_0_6$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_0_6$ENB =
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd6 &&
	     cache_rg_replace_block == 2'd0 &&
	     cache_rg_enable ;

  // submodule cache_data_0_7
  assign cache_data_0_7$ADDRA = request_from_cpu_req[11:5] ;
  assign cache_data_0_7$ADDRB = cache_ff_response_from_memory$D_OUT[11:5] ;
  assign cache_data_0_7$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_0_7$DIB = cache_ff_response_from_memory$D_OUT[64:33] ;
  assign cache_data_0_7$WEA = 1'd0 ;
  assign cache_data_0_7$WEB = 1'd1 ;
  assign cache_data_0_7$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_0_7$ENB =
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd7 &&
	     cache_rg_replace_block == 2'd0 &&
	     cache_rg_enable ;

  // submodule cache_data_1_0
  assign cache_data_1_0$ADDRA = request_from_cpu_req[11:5] ;
  assign cache_data_1_0$ADDRB = cache_ff_response_from_memory$D_OUT[11:5] ;
  assign cache_data_1_0$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_1_0$DIB = cache_ff_response_from_memory$D_OUT[64:33] ;
  assign cache_data_1_0$WEA = 1'd0 ;
  assign cache_data_1_0$WEB = 1'd1 ;
  assign cache_data_1_0$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_1_0$ENB =
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd0 &&
	     cache_rg_replace_block == 2'd1 &&
	     cache_rg_enable ;

  // submodule cache_data_1_1
  assign cache_data_1_1$ADDRA = request_from_cpu_req[11:5] ;
  assign cache_data_1_1$ADDRB = cache_ff_response_from_memory$D_OUT[11:5] ;
  assign cache_data_1_1$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_1_1$DIB = cache_ff_response_from_memory$D_OUT[64:33] ;
  assign cache_data_1_1$WEA = 1'd0 ;
  assign cache_data_1_1$WEB = 1'd1 ;
  assign cache_data_1_1$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_1_1$ENB =
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd1 &&
	     cache_rg_replace_block == 2'd1 &&
	     cache_rg_enable ;

  // submodule cache_data_1_2
  assign cache_data_1_2$ADDRA = request_from_cpu_req[11:5] ;
  assign cache_data_1_2$ADDRB = cache_ff_response_from_memory$D_OUT[11:5] ;
  assign cache_data_1_2$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_1_2$DIB = cache_ff_response_from_memory$D_OUT[64:33] ;
  assign cache_data_1_2$WEA = 1'd0 ;
  assign cache_data_1_2$WEB = 1'd1 ;
  assign cache_data_1_2$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_1_2$ENB =
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd2 &&
	     cache_rg_replace_block == 2'd1 &&
	     cache_rg_enable ;

  // submodule cache_data_1_3
  assign cache_data_1_3$ADDRA = request_from_cpu_req[11:5] ;
  assign cache_data_1_3$ADDRB = cache_ff_response_from_memory$D_OUT[11:5] ;
  assign cache_data_1_3$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_1_3$DIB = cache_ff_response_from_memory$D_OUT[64:33] ;
  assign cache_data_1_3$WEA = 1'd0 ;
  assign cache_data_1_3$WEB = 1'd1 ;
  assign cache_data_1_3$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_1_3$ENB =
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd3 &&
	     cache_rg_replace_block == 2'd1 &&
	     cache_rg_enable ;

  // submodule cache_data_1_4
  assign cache_data_1_4$ADDRA = request_from_cpu_req[11:5] ;
  assign cache_data_1_4$ADDRB = cache_ff_response_from_memory$D_OUT[11:5] ;
  assign cache_data_1_4$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_1_4$DIB = cache_ff_response_from_memory$D_OUT[64:33] ;
  assign cache_data_1_4$WEA = 1'd0 ;
  assign cache_data_1_4$WEB = 1'd1 ;
  assign cache_data_1_4$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_1_4$ENB =
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd4 &&
	     cache_rg_replace_block == 2'd1 &&
	     cache_rg_enable ;

  // submodule cache_data_1_5
  assign cache_data_1_5$ADDRA = request_from_cpu_req[11:5] ;
  assign cache_data_1_5$ADDRB = cache_ff_response_from_memory$D_OUT[11:5] ;
  assign cache_data_1_5$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_1_5$DIB = cache_ff_response_from_memory$D_OUT[64:33] ;
  assign cache_data_1_5$WEA = 1'd0 ;
  assign cache_data_1_5$WEB = 1'd1 ;
  assign cache_data_1_5$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_1_5$ENB =
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd5 &&
	     cache_rg_replace_block == 2'd1 &&
	     cache_rg_enable ;

  // submodule cache_data_1_6
  assign cache_data_1_6$ADDRA = request_from_cpu_req[11:5] ;
  assign cache_data_1_6$ADDRB = cache_ff_response_from_memory$D_OUT[11:5] ;
  assign cache_data_1_6$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_1_6$DIB = cache_ff_response_from_memory$D_OUT[64:33] ;
  assign cache_data_1_6$WEA = 1'd0 ;
  assign cache_data_1_6$WEB = 1'd1 ;
  assign cache_data_1_6$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_1_6$ENB =
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd6 &&
	     cache_rg_replace_block == 2'd1 &&
	     cache_rg_enable ;

  // submodule cache_data_1_7
  assign cache_data_1_7$ADDRA = request_from_cpu_req[11:5] ;
  assign cache_data_1_7$ADDRB = cache_ff_response_from_memory$D_OUT[11:5] ;
  assign cache_data_1_7$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_1_7$DIB = cache_ff_response_from_memory$D_OUT[64:33] ;
  assign cache_data_1_7$WEA = 1'd0 ;
  assign cache_data_1_7$WEB = 1'd1 ;
  assign cache_data_1_7$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_1_7$ENB =
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd7 &&
	     cache_rg_replace_block == 2'd1 &&
	     cache_rg_enable ;

  // submodule cache_data_2_0
  assign cache_data_2_0$ADDRA = request_from_cpu_req[11:5] ;
  assign cache_data_2_0$ADDRB = cache_ff_response_from_memory$D_OUT[11:5] ;
  assign cache_data_2_0$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_2_0$DIB = cache_ff_response_from_memory$D_OUT[64:33] ;
  assign cache_data_2_0$WEA = 1'd0 ;
  assign cache_data_2_0$WEB = 1'd1 ;
  assign cache_data_2_0$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_2_0$ENB =
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd0 &&
	     cache_rg_replace_block == 2'd2 &&
	     cache_rg_enable ;

  // submodule cache_data_2_1
  assign cache_data_2_1$ADDRA = request_from_cpu_req[11:5] ;
  assign cache_data_2_1$ADDRB = cache_ff_response_from_memory$D_OUT[11:5] ;
  assign cache_data_2_1$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_2_1$DIB = cache_ff_response_from_memory$D_OUT[64:33] ;
  assign cache_data_2_1$WEA = 1'd0 ;
  assign cache_data_2_1$WEB = 1'd1 ;
  assign cache_data_2_1$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_2_1$ENB =
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd1 &&
	     cache_rg_replace_block == 2'd2 &&
	     cache_rg_enable ;

  // submodule cache_data_2_2
  assign cache_data_2_2$ADDRA = request_from_cpu_req[11:5] ;
  assign cache_data_2_2$ADDRB = cache_ff_response_from_memory$D_OUT[11:5] ;
  assign cache_data_2_2$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_2_2$DIB = cache_ff_response_from_memory$D_OUT[64:33] ;
  assign cache_data_2_2$WEA = 1'd0 ;
  assign cache_data_2_2$WEB = 1'd1 ;
  assign cache_data_2_2$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_2_2$ENB =
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd2 &&
	     cache_rg_replace_block == 2'd2 &&
	     cache_rg_enable ;

  // submodule cache_data_2_3
  assign cache_data_2_3$ADDRA = request_from_cpu_req[11:5] ;
  assign cache_data_2_3$ADDRB = cache_ff_response_from_memory$D_OUT[11:5] ;
  assign cache_data_2_3$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_2_3$DIB = cache_ff_response_from_memory$D_OUT[64:33] ;
  assign cache_data_2_3$WEA = 1'd0 ;
  assign cache_data_2_3$WEB = 1'd1 ;
  assign cache_data_2_3$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_2_3$ENB =
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd3 &&
	     cache_rg_replace_block == 2'd2 &&
	     cache_rg_enable ;

  // submodule cache_data_2_4
  assign cache_data_2_4$ADDRA = request_from_cpu_req[11:5] ;
  assign cache_data_2_4$ADDRB = cache_ff_response_from_memory$D_OUT[11:5] ;
  assign cache_data_2_4$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_2_4$DIB = cache_ff_response_from_memory$D_OUT[64:33] ;
  assign cache_data_2_4$WEA = 1'd0 ;
  assign cache_data_2_4$WEB = 1'd1 ;
  assign cache_data_2_4$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_2_4$ENB =
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd4 &&
	     cache_rg_replace_block == 2'd2 &&
	     cache_rg_enable ;

  // submodule cache_data_2_5
  assign cache_data_2_5$ADDRA = request_from_cpu_req[11:5] ;
  assign cache_data_2_5$ADDRB = cache_ff_response_from_memory$D_OUT[11:5] ;
  assign cache_data_2_5$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_2_5$DIB = cache_ff_response_from_memory$D_OUT[64:33] ;
  assign cache_data_2_5$WEA = 1'd0 ;
  assign cache_data_2_5$WEB = 1'd1 ;
  assign cache_data_2_5$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_2_5$ENB =
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd5 &&
	     cache_rg_replace_block == 2'd2 &&
	     cache_rg_enable ;

  // submodule cache_data_2_6
  assign cache_data_2_6$ADDRA = request_from_cpu_req[11:5] ;
  assign cache_data_2_6$ADDRB = cache_ff_response_from_memory$D_OUT[11:5] ;
  assign cache_data_2_6$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_2_6$DIB = cache_ff_response_from_memory$D_OUT[64:33] ;
  assign cache_data_2_6$WEA = 1'd0 ;
  assign cache_data_2_6$WEB = 1'd1 ;
  assign cache_data_2_6$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_2_6$ENB =
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd6 &&
	     cache_rg_replace_block == 2'd2 &&
	     cache_rg_enable ;

  // submodule cache_data_2_7
  assign cache_data_2_7$ADDRA = request_from_cpu_req[11:5] ;
  assign cache_data_2_7$ADDRB = cache_ff_response_from_memory$D_OUT[11:5] ;
  assign cache_data_2_7$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_2_7$DIB = cache_ff_response_from_memory$D_OUT[64:33] ;
  assign cache_data_2_7$WEA = 1'd0 ;
  assign cache_data_2_7$WEB = 1'd1 ;
  assign cache_data_2_7$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_2_7$ENB =
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd7 &&
	     cache_rg_replace_block == 2'd2 &&
	     cache_rg_enable ;

  // submodule cache_data_3_0
  assign cache_data_3_0$ADDRA = request_from_cpu_req[11:5] ;
  assign cache_data_3_0$ADDRB = cache_ff_response_from_memory$D_OUT[11:5] ;
  assign cache_data_3_0$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_3_0$DIB = cache_ff_response_from_memory$D_OUT[64:33] ;
  assign cache_data_3_0$WEA = 1'd0 ;
  assign cache_data_3_0$WEB = 1'd1 ;
  assign cache_data_3_0$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_3_0$ENB =
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd0 &&
	     cache_rg_replace_block == 2'd3 &&
	     cache_rg_enable ;

  // submodule cache_data_3_1
  assign cache_data_3_1$ADDRA = request_from_cpu_req[11:5] ;
  assign cache_data_3_1$ADDRB = cache_ff_response_from_memory$D_OUT[11:5] ;
  assign cache_data_3_1$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_3_1$DIB = cache_ff_response_from_memory$D_OUT[64:33] ;
  assign cache_data_3_1$WEA = 1'd0 ;
  assign cache_data_3_1$WEB = 1'd1 ;
  assign cache_data_3_1$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_3_1$ENB =
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd1 &&
	     cache_rg_replace_block == 2'd3 &&
	     cache_rg_enable ;

  // submodule cache_data_3_2
  assign cache_data_3_2$ADDRA = request_from_cpu_req[11:5] ;
  assign cache_data_3_2$ADDRB = cache_ff_response_from_memory$D_OUT[11:5] ;
  assign cache_data_3_2$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_3_2$DIB = cache_ff_response_from_memory$D_OUT[64:33] ;
  assign cache_data_3_2$WEA = 1'd0 ;
  assign cache_data_3_2$WEB = 1'd1 ;
  assign cache_data_3_2$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_3_2$ENB =
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd2 &&
	     cache_rg_replace_block == 2'd3 &&
	     cache_rg_enable ;

  // submodule cache_data_3_3
  assign cache_data_3_3$ADDRA = request_from_cpu_req[11:5] ;
  assign cache_data_3_3$ADDRB = cache_ff_response_from_memory$D_OUT[11:5] ;
  assign cache_data_3_3$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_3_3$DIB = cache_ff_response_from_memory$D_OUT[64:33] ;
  assign cache_data_3_3$WEA = 1'd0 ;
  assign cache_data_3_3$WEB = 1'd1 ;
  assign cache_data_3_3$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_3_3$ENB =
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd3 &&
	     cache_rg_replace_block == 2'd3 &&
	     cache_rg_enable ;

  // submodule cache_data_3_4
  assign cache_data_3_4$ADDRA = request_from_cpu_req[11:5] ;
  assign cache_data_3_4$ADDRB = cache_ff_response_from_memory$D_OUT[11:5] ;
  assign cache_data_3_4$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_3_4$DIB = cache_ff_response_from_memory$D_OUT[64:33] ;
  assign cache_data_3_4$WEA = 1'd0 ;
  assign cache_data_3_4$WEB = 1'd1 ;
  assign cache_data_3_4$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_3_4$ENB =
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd4 &&
	     cache_rg_replace_block == 2'd3 &&
	     cache_rg_enable ;

  // submodule cache_data_3_5
  assign cache_data_3_5$ADDRA = request_from_cpu_req[11:5] ;
  assign cache_data_3_5$ADDRB = cache_ff_response_from_memory$D_OUT[11:5] ;
  assign cache_data_3_5$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_3_5$DIB = cache_ff_response_from_memory$D_OUT[64:33] ;
  assign cache_data_3_5$WEA = 1'd0 ;
  assign cache_data_3_5$WEB = 1'd1 ;
  assign cache_data_3_5$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_3_5$ENB =
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd5 &&
	     cache_rg_replace_block == 2'd3 &&
	     cache_rg_enable ;

  // submodule cache_data_3_6
  assign cache_data_3_6$ADDRA = request_from_cpu_req[11:5] ;
  assign cache_data_3_6$ADDRB = cache_ff_response_from_memory$D_OUT[11:5] ;
  assign cache_data_3_6$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_3_6$DIB = cache_ff_response_from_memory$D_OUT[64:33] ;
  assign cache_data_3_6$WEA = 1'd0 ;
  assign cache_data_3_6$WEB = 1'd1 ;
  assign cache_data_3_6$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_3_6$ENB =
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd6 &&
	     cache_rg_replace_block == 2'd3 &&
	     cache_rg_enable ;

  // submodule cache_data_3_7
  assign cache_data_3_7$ADDRA = request_from_cpu_req[11:5] ;
  assign cache_data_3_7$ADDRB = cache_ff_response_from_memory$D_OUT[11:5] ;
  assign cache_data_3_7$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_3_7$DIB = cache_ff_response_from_memory$D_OUT[64:33] ;
  assign cache_data_3_7$WEA = 1'd0 ;
  assign cache_data_3_7$WEB = 1'd1 ;
  assign cache_data_3_7$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_3_7$ENB =
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd7 &&
	     cache_rg_replace_block == 2'd3 &&
	     cache_rg_enable ;

  // submodule cache_ff_request_from_cpu
  assign cache_ff_request_from_cpu$D_IN = request_from_cpu_req ;
  assign cache_ff_request_from_cpu$ENQ = EN_request_from_cpu ;
  assign cache_ff_request_from_cpu$DEQ = CAN_FIRE_RL_cache_read_from_bram ;
  assign cache_ff_request_from_cpu$CLR = 1'b0 ;

  // submodule cache_ff_request_to_memory_ff
  assign cache_ff_request_to_memory_ff$D_IN =
	     cache_ff_request_to_memory_enqw$wget ;
  assign cache_ff_request_to_memory_ff$ENQ =
	     CAN_FIRE_RL_cache_ff_request_to_memory_enqueue ;
  assign cache_ff_request_to_memory_ff$DEQ =
	     CAN_FIRE_RL_cache_ff_request_to_memory_dequeue ;
  assign cache_ff_request_to_memory_ff$CLR = 1'b0 ;

  // submodule cache_ff_request_to_memory_firstValid
  assign cache_ff_request_to_memory_firstValid$D_IN = 1'd1 ;
  assign cache_ff_request_to_memory_firstValid$EN = EN_request_to_memory ;

  // submodule cache_ff_response_from_memory
  assign cache_ff_response_from_memory$D_IN = response_from_memory_resp ;
  assign cache_ff_response_from_memory$ENQ = EN_response_from_memory ;
  assign cache_ff_response_from_memory$DEQ =
	     WILL_FIRE_RL_cache_got_response_from_memory ;
  assign cache_ff_response_from_memory$CLR = 1'b0 ;

  // submodule cache_ff_response_to_cpu_ff
  assign cache_ff_response_to_cpu_ff$D_IN =
	     cache_ff_response_to_cpu_enqw$wget ;
  assign cache_ff_response_to_cpu_ff$ENQ =
	     CAN_FIRE_RL_cache_ff_response_to_cpu_enqueue ;
  assign cache_ff_response_to_cpu_ff$DEQ =
	     CAN_FIRE_RL_cache_ff_response_to_cpu_dequeue ;
  assign cache_ff_response_to_cpu_ff$CLR = EN_flush ;

  // submodule cache_ff_response_to_cpu_firstValid
  assign cache_ff_response_to_cpu_firstValid$D_IN = 1'd1 ;
  assign cache_ff_response_to_cpu_firstValid$EN = EN_response_to_cpu ;

  // submodule cache_tag_0
  assign cache_tag_0$ADDRA = request_from_cpu_req[11:5] ;
  assign cache_tag_0$ADDRB = cache_ff_response_from_memory$D_OUT[11:5] ;
  assign cache_tag_0$DIA = 20'b10101010101010101010 /* unspecified value */  ;
  assign cache_tag_0$DIB = cache_ff_response_from_memory$D_OUT[31:12] ;
  assign cache_tag_0$WEA = 1'd0 ;
  assign cache_tag_0$WEB = 1'd1 ;
  assign cache_tag_0$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_tag_0$ENB =
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_rg_replace_block == 2'd0 &&
	     cache_rg_enable &&
	     cache_rg_word_count == 3'd7 ;

  // submodule cache_tag_1
  assign cache_tag_1$ADDRA = request_from_cpu_req[11:5] ;
  assign cache_tag_1$ADDRB = cache_ff_response_from_memory$D_OUT[11:5] ;
  assign cache_tag_1$DIA = 20'b10101010101010101010 /* unspecified value */  ;
  assign cache_tag_1$DIB = cache_ff_response_from_memory$D_OUT[31:12] ;
  assign cache_tag_1$WEA = 1'd0 ;
  assign cache_tag_1$WEB = 1'd1 ;
  assign cache_tag_1$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_tag_1$ENB =
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_rg_replace_block == 2'd1 &&
	     cache_rg_enable &&
	     cache_rg_word_count == 3'd7 ;

  // submodule cache_tag_2
  assign cache_tag_2$ADDRA = request_from_cpu_req[11:5] ;
  assign cache_tag_2$ADDRB = cache_ff_response_from_memory$D_OUT[11:5] ;
  assign cache_tag_2$DIA = 20'b10101010101010101010 /* unspecified value */  ;
  assign cache_tag_2$DIB = cache_ff_response_from_memory$D_OUT[31:12] ;
  assign cache_tag_2$WEA = 1'd0 ;
  assign cache_tag_2$WEB = 1'd1 ;
  assign cache_tag_2$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_tag_2$ENB =
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_rg_replace_block == 2'd2 &&
	     cache_rg_enable &&
	     cache_rg_word_count == 3'd7 ;

  // submodule cache_tag_3
  assign cache_tag_3$ADDRA = request_from_cpu_req[11:5] ;
  assign cache_tag_3$ADDRB = cache_ff_response_from_memory$D_OUT[11:5] ;
  assign cache_tag_3$DIA = 20'b10101010101010101010 /* unspecified value */  ;
  assign cache_tag_3$DIB = cache_ff_response_from_memory$D_OUT[31:12] ;
  assign cache_tag_3$WEA = 1'd0 ;
  assign cache_tag_3$WEB = 1'd1 ;
  assign cache_tag_3$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_tag_3$ENB =
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_rg_replace_block == 2'd3 &&
	     cache_rg_enable &&
	     cache_rg_word_count == 3'd7 ;

  // submodule cache_valid_0
  assign cache_valid_0$ADDRA =
	     MUX_cache_valid_0$a_put_1__SEL_1 ?
	       request_from_cpu_req[11:5] :
	       cache_rg_index[6:0] ;
  assign cache_valid_0$ADDRB = cache_ff_response_from_memory$D_OUT[11:5] ;
  assign cache_valid_0$DIA =
	     MUX_cache_valid_0$a_put_1__SEL_1 &&
	     1'b0 /* unspecified value */  ;
  assign cache_valid_0$DIB = 1'd1 ;
  assign cache_valid_0$WEA = !MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_valid_0$WEB = 1'd1 ;
  assign cache_valid_0$ENA =
	     EN_request_from_cpu && cache_rg_enable || cache_rg_initialize ;
  assign cache_valid_0$ENB =
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_rg_replace_block == 2'd0 &&
	     cache_rg_enable &&
	     cache_rg_word_count == 3'd7 ;

  // submodule cache_valid_1
  assign cache_valid_1$ADDRA =
	     MUX_cache_valid_0$a_put_1__SEL_1 ?
	       request_from_cpu_req[11:5] :
	       cache_rg_index[6:0] ;
  assign cache_valid_1$ADDRB = cache_ff_response_from_memory$D_OUT[11:5] ;
  assign cache_valid_1$DIA =
	     MUX_cache_valid_0$a_put_1__SEL_1 &&
	     1'b0 /* unspecified value */  ;
  assign cache_valid_1$DIB = 1'd1 ;
  assign cache_valid_1$WEA = !MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_valid_1$WEB = 1'd1 ;
  assign cache_valid_1$ENA =
	     EN_request_from_cpu && cache_rg_enable || cache_rg_initialize ;
  assign cache_valid_1$ENB =
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_rg_replace_block == 2'd1 &&
	     cache_rg_enable &&
	     cache_rg_word_count == 3'd7 ;

  // submodule cache_valid_2
  assign cache_valid_2$ADDRA =
	     MUX_cache_valid_0$a_put_1__SEL_1 ?
	       request_from_cpu_req[11:5] :
	       cache_rg_index[6:0] ;
  assign cache_valid_2$ADDRB = cache_ff_response_from_memory$D_OUT[11:5] ;
  assign cache_valid_2$DIA =
	     MUX_cache_valid_0$a_put_1__SEL_1 &&
	     1'b0 /* unspecified value */  ;
  assign cache_valid_2$DIB = 1'd1 ;
  assign cache_valid_2$WEA = !MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_valid_2$WEB = 1'd1 ;
  assign cache_valid_2$ENA =
	     EN_request_from_cpu && cache_rg_enable || cache_rg_initialize ;
  assign cache_valid_2$ENB =
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_rg_replace_block == 2'd2 &&
	     cache_rg_enable &&
	     cache_rg_word_count == 3'd7 ;

  // submodule cache_valid_3
  assign cache_valid_3$ADDRA =
	     MUX_cache_valid_0$a_put_1__SEL_1 ?
	       request_from_cpu_req[11:5] :
	       cache_rg_index[6:0] ;
  assign cache_valid_3$ADDRB = cache_ff_response_from_memory$D_OUT[11:5] ;
  assign cache_valid_3$DIA =
	     MUX_cache_valid_0$a_put_1__SEL_1 &&
	     1'b0 /* unspecified value */  ;
  assign cache_valid_3$DIB = 1'd1 ;
  assign cache_valid_3$WEA = !MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_valid_3$WEB = 1'd1 ;
  assign cache_valid_3$ENA =
	     EN_request_from_cpu && cache_rg_enable || cache_rg_initialize ;
  assign cache_valid_3$ENB =
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_rg_replace_block == 2'd3 &&
	     cache_rg_enable &&
	     cache_rg_word_count == 3'd7 ;

  // remaining internal signals
  assign IF_IF_IF_cache_valid_3_a_read__2_AND_cache_tag_ETC___d280 =
	     (IF_cache_valid_3_a_read__2_AND_cache_tag_3_a_r_ETC___d215 ?
		IF_cache_valid_3_a_read__2_AND_cache_tag_3_a_r_ETC___d235 :
		IF_cache_valid_3_a_read__2_AND_cache_tag_3_a_r_ETC___d240) ?
	       _theResult_____1___1_snd__h17959 :
	       _theResult_____1___1_snd__h18006 ;
  assign IF_IF_cache_valid_3_a_read__2_AND_cache_tag_3__ETC___d264 =
	     IF_cache_valid_3_a_read__2_AND_cache_tag_3_a_r_ETC___d215 ?
	       _theResult_____1___1_snd__h17758 :
	       _theResult_____1___1_snd__h17793 ;
  assign IF_NOT_cache_valid_0_a_read__5_09_OR_NOT_cache_ETC___d247 =
	     (!cache_valid_0$DOA || !cache_valid_1$DOA) ?
	       32'd1 :
	       ((!cache_valid_2$DOA || !cache_valid_3$DOA) ? 32'd0 : 32'd1) ;
  assign IF_NOT_cache_valid_1_a_read__1_5_OR_NOT_cache__ETC___d257 =
	     (!cache_valid_1$DOA || !cache_valid_2$DOA) ?
	       32'd1 :
	       (cache_valid_3$DOA ? 32'd2 : 32'd0) ;
  assign IF_SEL_ARR_cache_pseudo_lru_0_4_cache_pseudo_l_ETC___d205 =
	     lru_bits__h15217[2] ? 32'd0 : 32'd1 ;
  assign IF_SEL_ARR_cache_pseudo_lru_0_4_cache_pseudo_l_ETC___d255 =
	     SEL_ARR_cache_pseudo_lru_0_4_cache_pseudo_lru__ETC___d207 ?
	       IF_SEL_ARR_cache_pseudo_lru_0_4_cache_pseudo_l_ETC___d205 :
	       (lru_bits__h15217[2] ? 32'd1 : 32'd2) ;
  assign IF_cache_valid_0_a_read__5_AND_cache_valid_1_a_ETC___d222 =
	     cache_valid_0_a_read__5_AND_cache_valid_1_a_re_ETC___d73 ?
	       SEL_ARR_cache_pseudo_lru_0_4_cache_pseudo_lru__ETC___d207 ||
	       lru_bits__h15217[2] :
	       cache_valid_0$DOA &&
	       (!cache_valid_1$DOA || !cache_valid_2$DOA ||
		!cache_valid_3$DOA) ;
  assign IF_cache_valid_0_a_read__5_AND_cache_valid_1_a_ETC___d234 =
	     cache_valid_0_a_read__5_AND_cache_valid_1_a_re_ETC___d73 ?
	       !lru_bits__h15217[2] :
	       !cache_valid_0$DOA || !cache_valid_1$DOA ||
	       cache_valid_2$DOA && cache_valid_3$DOA ;
  assign IF_cache_valid_0_a_read__5_AND_cache_valid_1_a_ETC___d239 =
	     cache_valid_0_a_read__5_AND_cache_valid_1_a_re_ETC___d73 ?
	       SEL_ARR_cache_pseudo_lru_0_4_cache_pseudo_lru__ETC___d207 ^
	       lru_bits__h15217[2] :
	       cache_valid_0$DOA &&
	       (!cache_valid_1$DOA || !cache_valid_2$DOA) ;
  assign IF_cache_valid_0_a_read__5_AND_cache_valid_1_a_ETC___d259 =
	     cache_valid_0_a_read__5_AND_cache_valid_1_a_re_ETC___d73 ?
	       IF_SEL_ARR_cache_pseudo_lru_0_4_cache_pseudo_l_ETC___d255 :
	       (cache_valid_0$DOA ?
		  IF_NOT_cache_valid_1_a_read__1_5_OR_NOT_cache__ETC___d257 :
		  32'd2) ;
  assign IF_cache_valid_0_a_read__5_AND_cache_valid_1_a_ETC___d274 =
	     cache_valid_0_a_read__5_AND_cache_valid_1_a_re_ETC___d73 ?
	       ((SEL_ARR_cache_pseudo_lru_0_4_cache_pseudo_lru__ETC___d207 ||
		 lru_bits__h15217[2]) ?
		  32'd2 :
		  32'd3) :
	       (cache_valid_0$DOA ?
		  ((!cache_valid_1$DOA || !cache_valid_2$DOA ||
		    !cache_valid_3$DOA) ?
		     32'd2 :
		     32'd3) :
		  32'd3) ;
  assign IF_cache_valid_0_a_read__5_AND_cache_valid_1_a_ETC___d485 =
	     cache_valid_0_a_read__5_AND_cache_valid_1_a_re_ETC___d73 ?
	       (SEL_ARR_cache_pseudo_lru_0_4_cache_pseudo_lru__ETC___d207 ?
		  (lru_bits__h15217[2] ? 2'd3 : 2'd1) :
		  (lru_bits__h15217[2] ? 2'd2 : 2'd0)) :
	       (cache_valid_0$DOA ?
		  IF_cache_valid_1_a_read__1_THEN_IF_cache_valid_ETC___d483 :
		  2'd0) ;
  assign IF_cache_valid_1_a_read__1_AND_cache_tag_1_a_r_ETC___d243 =
	     (cache_valid_1$DOA &&
	      cache_tag_1_a_read__2_EQ_cache_ff_request_from_ETC___d53 ||
	      cache_valid_0$DOA &&
	      cache_tag_0_a_read__6_EQ_cache_ff_request_from_ETC___d57) ?
	       32'd1 :
	       32'd2 ;
  assign IF_cache_valid_1_a_read__1_AND_cache_tag_1_a_r_ETC___d457 =
	     (cache_valid_1$DOA &&
	      cache_tag_1_a_read__2_EQ_cache_ff_request_from_ETC___d53) ?
	       32'd1 :
	       ((cache_valid_0$DOA &&
		 cache_tag_0_a_read__6_EQ_cache_ff_request_from_ETC___d57) ?
		  32'd0 :
		  32'hFFFFFFFF) ;
  assign IF_cache_valid_1_a_read__1_AND_cache_tag_1_a_r_ETC___d475 =
	     (cache_valid_1$DOA &&
	      cache_tag_1_a_read__2_EQ_cache_ff_request_from_ETC___d53) ?
	       2'd1 :
	       ((cache_valid_0$DOA &&
		 cache_tag_0_a_read__6_EQ_cache_ff_request_from_ETC___d57) ?
		  2'd0 :
		  2'd3) ;
  assign IF_cache_valid_1_a_read__1_THEN_IF_cache_valid_ETC___d483 =
	     cache_valid_1$DOA ?
	       (cache_valid_2$DOA ?
		  (cache_valid_3$DOA ? 2'd0 : 2'd3) :
		  2'd2) :
	       2'd1 ;
  assign IF_cache_valid_2_a_read__7_AND_cache_tag_2_a_r_ETC___d252 =
	     (cache_valid_2$DOA &&
	      cache_tag_2_a_read__8_EQ_cache_ff_request_from_ETC___d49 ||
	      cache_valid_1$DOA &&
	      cache_tag_1_a_read__2_EQ_cache_ff_request_from_ETC___d53) ?
	       32'd1 :
	       32'd2 ;
  assign IF_cache_valid_3_a_read__2_AND_cache_tag_3_a_r_ETC___d215 =
	     (cache_valid_3$DOA &&
	      cache_tag_3_a_read__3_EQ_cache_ff_request_from_ETC___d45 ||
	      cache_valid_2_a_read__7_AND_cache_tag_2_a_read_ETC___d60) ?
	       (!cache_valid_3$DOA ||
		!cache_tag_3_a_read__3_EQ_cache_ff_request_from_ETC___d45) &&
	       cache_valid_2_a_read__7_AND_cache_tag_2_a_read_ETC___d69 :
	       (cache_valid_0_a_read__5_AND_cache_valid_1_a_re_ETC___d73 ?
		  !SEL_ARR_cache_pseudo_lru_0_4_cache_pseudo_lru__ETC___d207 :
		  NOT_cache_valid_0_a_read__5_09_OR_cache_valid__ETC___d213) ;
  assign IF_cache_valid_3_a_read__2_AND_cache_tag_3_a_r_ETC___d223 =
	     (cache_valid_3$DOA &&
	      cache_tag_3_a_read__3_EQ_cache_ff_request_from_ETC___d45 ||
	      cache_valid_2_a_read__7_AND_cache_tag_2_a_read_ETC___d60) ?
	       cache_valid_3_a_read__2_AND_cache_tag_3_a_read_ETC___d217 :
	       IF_cache_valid_0_a_read__5_AND_cache_valid_1_a_ETC___d222 ;
  assign IF_cache_valid_3_a_read__2_AND_cache_tag_3_a_r_ETC___d235 =
	     (cache_valid_3$DOA &&
	      cache_tag_3_a_read__3_EQ_cache_ff_request_from_ETC___d45 ||
	      cache_valid_2_a_read__7_AND_cache_tag_2_a_read_ETC___d60) ?
	       NOT_cache_valid_3_a_read__2_2_OR_NOT_cache_tag_ETC___d228 :
	       IF_cache_valid_0_a_read__5_AND_cache_valid_1_a_ETC___d234 ;
  assign IF_cache_valid_3_a_read__2_AND_cache_tag_3_a_r_ETC___d240 =
	     (cache_valid_3$DOA &&
	      cache_tag_3_a_read__3_EQ_cache_ff_request_from_ETC___d45 ||
	      cache_valid_2_a_read__7_AND_cache_tag_2_a_read_ETC___d60) ?
	       NOT_cache_valid_3_a_read__2_2_OR_NOT_cache_tag_ETC___d236 :
	       IF_cache_valid_0_a_read__5_AND_cache_valid_1_a_ETC___d239 ;
  assign IF_cache_valid_3_a_read__2_AND_cache_tag_3_a_r_ETC___d244 =
	     (cache_valid_3$DOA &&
	      cache_tag_3_a_read__3_EQ_cache_ff_request_from_ETC___d45 ||
	      cache_valid_2$DOA &&
	      cache_tag_2_a_read__8_EQ_cache_ff_request_from_ETC___d49) ?
	       32'd0 :
	       IF_cache_valid_1_a_read__1_AND_cache_tag_1_a_r_ETC___d243 ;
  assign IF_cache_valid_3_a_read__2_AND_cache_tag_3_a_r_ETC___d269 =
	     (cache_valid_3$DOA &&
	      cache_tag_3_a_read__3_EQ_cache_ff_request_from_ETC___d45 ||
	      cache_valid_2_a_read__7_AND_cache_tag_2_a_read_ETC___d60) ?
	       (cache_valid_3_a_read__2_AND_cache_tag_3_a_read_ETC___d267 ?
		  32'd2 :
		  32'd3) :
	       32'd2 ;
  assign IF_cache_valid_3_a_read__2_AND_cache_tag_3_a_r_ETC___d275 =
	     (cache_valid_3$DOA &&
	      cache_tag_3_a_read__3_EQ_cache_ff_request_from_ETC___d45 ||
	      cache_valid_2_a_read__7_AND_cache_tag_2_a_read_ETC___d60) ?
	       (cache_valid_3_a_read__2_AND_cache_tag_3_a_read_ETC___d217 ?
		  32'd2 :
		  32'd3) :
	       IF_cache_valid_0_a_read__5_AND_cache_valid_1_a_ETC___d274 ;
  assign IF_cache_valid_3_a_read__2_AND_cache_tag_3_a_r_ETC___d411 =
	     (cache_valid_3$DOA &&
	      cache_tag_3_a_read__3_EQ_cache_ff_request_from_ETC___d45 ||
	      cache_valid_2_a_read__7_AND_cache_tag_2_a_read_ETC___d60) ?
	       2'd0 :
	       2'd3 ;
  assign IF_cache_valid_3_a_read__2_AND_cache_tag_3_a_r_ETC___d459 =
	     (cache_valid_3$DOA &&
	      cache_tag_3_a_read__3_EQ_cache_ff_request_from_ETC___d45) ?
	       32'd3 :
	       ((cache_valid_2$DOA &&
		 cache_tag_2_a_read__8_EQ_cache_ff_request_from_ETC___d49) ?
		  32'd2 :
		  IF_cache_valid_1_a_read__1_AND_cache_tag_1_a_r_ETC___d457) ;
  assign IF_cache_valid_3_a_read__2_AND_cache_tag_3_a_r_ETC___d477 =
	     (cache_valid_3$DOA &&
	      cache_tag_3_a_read__3_EQ_cache_ff_request_from_ETC___d45) ?
	       2'd3 :
	       ((cache_valid_2$DOA &&
		 cache_tag_2_a_read__8_EQ_cache_ff_request_from_ETC___d49) ?
		  2'd2 :
		  IF_cache_valid_1_a_read__1_AND_cache_tag_1_a_r_ETC___d475) ;
  assign NOT_cache_valid_0_a_read__5_09_OR_cache_valid__ETC___d213 =
	     !cache_valid_0$DOA ||
	     cache_valid_1$DOA && (!cache_valid_2$DOA || cache_valid_3$DOA) ;
  assign NOT_cache_valid_2_a_read__7_10_OR_NOT_cache_ta_ETC___d469 =
	     (!cache_valid_2$DOA ||
	      !cache_tag_2_a_read__8_EQ_cache_ff_request_from_ETC___d49) &&
	     (!cache_valid_1$DOA ||
	      !cache_tag_1_a_read__2_EQ_cache_ff_request_from_ETC___d53) &&
	     (!cache_valid_0$DOA ||
	      !cache_tag_0_a_read__6_EQ_cache_ff_request_from_ETC___d57) ;
  assign NOT_cache_valid_3_a_read__2_2_OR_NOT_cache_tag_ETC___d228 =
	     (!cache_valid_3$DOA ||
	      !cache_tag_3_a_read__3_EQ_cache_ff_request_from_ETC___d45) &&
	     (!cache_valid_2$DOA ||
	      !cache_tag_2_a_read__8_EQ_cache_ff_request_from_ETC___d49) &&
	     (cache_valid_1$DOA &&
	      cache_tag_1_a_read__2_EQ_cache_ff_request_from_ETC___d53 ||
	      cache_valid_0$DOA &&
	      cache_tag_0_a_read__6_EQ_cache_ff_request_from_ETC___d57) ;
  assign NOT_cache_valid_3_a_read__2_2_OR_NOT_cache_tag_ETC___d236 =
	     (!cache_valid_3$DOA ||
	      !cache_tag_3_a_read__3_EQ_cache_ff_request_from_ETC___d45) &&
	     (cache_valid_2$DOA &&
	      cache_tag_2_a_read__8_EQ_cache_ff_request_from_ETC___d49 ||
	      cache_valid_1$DOA &&
	      cache_tag_1_a_read__2_EQ_cache_ff_request_from_ETC___d53) ;
  assign SEL_ARR_cache_pseudo_lru_0_4_cache_pseudo_lru__ETC___d207 =
	     lru_bits__h15217[IF_SEL_ARR_cache_pseudo_lru_0_4_cache_pseudo_l_ETC___d205[1:0]] ;
  assign _theResult_____1___1_snd__h17758 = lru_bits__h15217 | x__h18097 ;
  assign _theResult_____1___1_snd__h17793 = lru_bits__h15217 & y__h18200 ;
  assign _theResult_____1___1_snd__h17959 =
	     { 1'd1,
	       IF_IF_cache_valid_3_a_read__2_AND_cache_tag_3__ETC___d264[1:0] } ;
  assign _theResult_____1___1_snd__h18006 =
	     IF_IF_cache_valid_3_a_read__2_AND_cache_tag_3__ETC___d264 &
	     y__h18302 ;
  assign cache_ff_request_from_cpu_first__8_BITS_1_TO_0_ETC___d464 =
	     cache_ff_request_from_cpu$D_OUT[1:0] == 2'd0 &&
	     (cache_valid_3$DOA &&
	      cache_tag_3_a_read__3_EQ_cache_ff_request_from_ETC___d45 ||
	      cache_valid_2_a_read__7_AND_cache_tag_2_a_read_ETC___d60) ;
  assign cache_ff_request_from_cpu_first__8_BITS_1_TO_0_ETC___d471 =
	     cache_ff_request_from_cpu$D_OUT[1:0] == 2'd0 &&
	     (!cache_valid_3$DOA ||
	      !cache_tag_3_a_read__3_EQ_cache_ff_request_from_ETC___d45) &&
	     NOT_cache_valid_2_a_read__7_10_OR_NOT_cache_ta_ETC___d469 ;
  assign cache_tag_0_a_read__6_EQ_cache_ff_request_from_ETC___d57 =
	     cache_tag_0$DOA == cache_ff_request_from_cpu$D_OUT[31:12] ;
  assign cache_tag_1_a_read__2_EQ_cache_ff_request_from_ETC___d53 =
	     cache_tag_1$DOA == cache_ff_request_from_cpu$D_OUT[31:12] ;
  assign cache_tag_2_a_read__8_EQ_cache_ff_request_from_ETC___d49 =
	     cache_tag_2$DOA == cache_ff_request_from_cpu$D_OUT[31:12] ;
  assign cache_tag_3_a_read__3_EQ_cache_ff_request_from_ETC___d45 =
	     cache_tag_3$DOA == cache_ff_request_from_cpu$D_OUT[31:12] ;
  assign cache_valid_0_a_read__5_AND_cache_valid_1_a_re_ETC___d73 =
	     cache_valid_0$DOA && cache_valid_1$DOA && cache_valid_2$DOA &&
	     cache_valid_3$DOA ;
  assign cache_valid_2_a_read__7_AND_cache_tag_2_a_read_ETC___d60 =
	     cache_valid_2$DOA &&
	     cache_tag_2_a_read__8_EQ_cache_ff_request_from_ETC___d49 ||
	     cache_valid_1$DOA &&
	     cache_tag_1_a_read__2_EQ_cache_ff_request_from_ETC___d53 ||
	     cache_valid_0$DOA &&
	     cache_tag_0_a_read__6_EQ_cache_ff_request_from_ETC___d57 ;
  assign cache_valid_2_a_read__7_AND_cache_tag_2_a_read_ETC___d69 =
	     cache_valid_2$DOA &&
	     cache_tag_2_a_read__8_EQ_cache_ff_request_from_ETC___d49 ||
	     (!cache_valid_1$DOA ||
	      !cache_tag_1_a_read__2_EQ_cache_ff_request_from_ETC___d53) &&
	     cache_valid_0$DOA &&
	     cache_tag_0_a_read__6_EQ_cache_ff_request_from_ETC___d57 ;
  assign cache_valid_3_a_read__2_AND_cache_tag_3_a_read_ETC___d217 =
	     cache_valid_3$DOA &&
	     cache_tag_3_a_read__3_EQ_cache_ff_request_from_ETC___d45 ||
	     cache_valid_2$DOA &&
	     cache_tag_2_a_read__8_EQ_cache_ff_request_from_ETC___d49 ||
	     cache_valid_1$DOA &&
	     cache_tag_1_a_read__2_EQ_cache_ff_request_from_ETC___d53 ;
  assign cache_valid_3_a_read__2_AND_cache_tag_3_a_read_ETC___d267 =
	     cache_valid_3$DOA &&
	     cache_tag_3_a_read__3_EQ_cache_ff_request_from_ETC___d45 ||
	     cache_valid_2$DOA &&
	     cache_tag_2_a_read__8_EQ_cache_ff_request_from_ETC___d49 ||
	     cache_valid_1$DOA &&
	     cache_tag_1_a_read__2_EQ_cache_ff_request_from_ETC___d53 ||
	     cache_valid_0$DOA &&
	     cache_tag_0_a_read__6_EQ_cache_ff_request_from_ETC___d57 ;
  assign cache_valid_3_a_read__2_AND_cache_tag_3_a_read_ETC___d414 =
	     cache_valid_3$DOA &&
	     cache_tag_3_a_read__3_EQ_cache_ff_request_from_ETC___d45 ||
	     cache_valid_2_a_read__7_AND_cache_tag_2_a_read_ETC___d60 ||
	     cache_ff_request_from_cpu$D_OUT[1:0] != 2'd0 ;
  assign tag1__h109497 = { 8'd0, request_from_cpu_req[31:20] } ;
  assign x__h105747 = cache_rg_word_count + 3'd1 ;
  assign x__h18097 = 3'd1 << x__h18127 ;
  assign x__h18127 =
	     (cache_valid_3$DOA &&
	      cache_tag_3_a_read__3_EQ_cache_ff_request_from_ETC___d45 ||
	      cache_valid_2_a_read__7_AND_cache_tag_2_a_read_ETC___d60) ?
	       IF_cache_valid_3_a_read__2_AND_cache_tag_3_a_r_ETC___d244 :
	       (cache_valid_0_a_read__5_AND_cache_valid_1_a_re_ETC___d73 ?
		  IF_SEL_ARR_cache_pseudo_lru_0_4_cache_pseudo_l_ETC___d205 :
		  IF_NOT_cache_valid_0_a_read__5_09_OR_NOT_cache_ETC___d247) ;
  assign x__h18172 = 3'd1 << x__h18203 ;
  assign x__h18203 =
	     (cache_valid_3$DOA &&
	      cache_tag_3_a_read__3_EQ_cache_ff_request_from_ETC___d45 ||
	      cache_valid_2_a_read__7_AND_cache_tag_2_a_read_ETC___d60) ?
	       ((cache_valid_3$DOA &&
		 cache_tag_3_a_read__3_EQ_cache_ff_request_from_ETC___d45) ?
		  32'd0 :
		  IF_cache_valid_2_a_read__7_AND_cache_tag_2_a_r_ETC___d252) :
	       IF_cache_valid_0_a_read__5_AND_cache_valid_1_a_ETC___d259 ;
  assign x__h18274 = 3'd1 << x__h18305 ;
  assign x__h18305 =
	     IF_cache_valid_3_a_read__2_AND_cache_tag_3_a_r_ETC___d215 ?
	       IF_cache_valid_3_a_read__2_AND_cache_tag_3_a_r_ETC___d269 :
	       IF_cache_valid_3_a_read__2_AND_cache_tag_3_a_r_ETC___d275 ;
  assign y__h18200 = ~x__h18172 ;
  assign y__h18302 = ~x__h18274 ;
  always@(cache_ff_request_from_cpu$D_OUT or
	  cache_pseudo_lru_0 or
	  cache_pseudo_lru_1 or
	  cache_pseudo_lru_2 or
	  cache_pseudo_lru_3 or
	  cache_pseudo_lru_4 or
	  cache_pseudo_lru_5 or
	  cache_pseudo_lru_6 or
	  cache_pseudo_lru_7 or
	  cache_pseudo_lru_8 or
	  cache_pseudo_lru_9 or
	  cache_pseudo_lru_10 or
	  cache_pseudo_lru_11 or
	  cache_pseudo_lru_12 or
	  cache_pseudo_lru_13 or
	  cache_pseudo_lru_14 or
	  cache_pseudo_lru_15 or
	  cache_pseudo_lru_16 or
	  cache_pseudo_lru_17 or
	  cache_pseudo_lru_18 or
	  cache_pseudo_lru_19 or
	  cache_pseudo_lru_20 or
	  cache_pseudo_lru_21 or
	  cache_pseudo_lru_22 or
	  cache_pseudo_lru_23 or
	  cache_pseudo_lru_24 or
	  cache_pseudo_lru_25 or
	  cache_pseudo_lru_26 or
	  cache_pseudo_lru_27 or
	  cache_pseudo_lru_28 or
	  cache_pseudo_lru_29 or
	  cache_pseudo_lru_30 or
	  cache_pseudo_lru_31 or
	  cache_pseudo_lru_32 or
	  cache_pseudo_lru_33 or
	  cache_pseudo_lru_34 or
	  cache_pseudo_lru_35 or
	  cache_pseudo_lru_36 or
	  cache_pseudo_lru_37 or
	  cache_pseudo_lru_38 or
	  cache_pseudo_lru_39 or
	  cache_pseudo_lru_40 or
	  cache_pseudo_lru_41 or
	  cache_pseudo_lru_42 or
	  cache_pseudo_lru_43 or
	  cache_pseudo_lru_44 or
	  cache_pseudo_lru_45 or
	  cache_pseudo_lru_46 or
	  cache_pseudo_lru_47 or
	  cache_pseudo_lru_48 or
	  cache_pseudo_lru_49 or
	  cache_pseudo_lru_50 or
	  cache_pseudo_lru_51 or
	  cache_pseudo_lru_52 or
	  cache_pseudo_lru_53 or
	  cache_pseudo_lru_54 or
	  cache_pseudo_lru_55 or
	  cache_pseudo_lru_56 or
	  cache_pseudo_lru_57 or
	  cache_pseudo_lru_58 or
	  cache_pseudo_lru_59 or
	  cache_pseudo_lru_60 or
	  cache_pseudo_lru_61 or
	  cache_pseudo_lru_62 or
	  cache_pseudo_lru_63 or
	  cache_pseudo_lru_64 or
	  cache_pseudo_lru_65 or
	  cache_pseudo_lru_66 or
	  cache_pseudo_lru_67 or
	  cache_pseudo_lru_68 or
	  cache_pseudo_lru_69 or
	  cache_pseudo_lru_70 or
	  cache_pseudo_lru_71 or
	  cache_pseudo_lru_72 or
	  cache_pseudo_lru_73 or
	  cache_pseudo_lru_74 or
	  cache_pseudo_lru_75 or
	  cache_pseudo_lru_76 or
	  cache_pseudo_lru_77 or
	  cache_pseudo_lru_78 or
	  cache_pseudo_lru_79 or
	  cache_pseudo_lru_80 or
	  cache_pseudo_lru_81 or
	  cache_pseudo_lru_82 or
	  cache_pseudo_lru_83 or
	  cache_pseudo_lru_84 or
	  cache_pseudo_lru_85 or
	  cache_pseudo_lru_86 or
	  cache_pseudo_lru_87 or
	  cache_pseudo_lru_88 or
	  cache_pseudo_lru_89 or
	  cache_pseudo_lru_90 or
	  cache_pseudo_lru_91 or
	  cache_pseudo_lru_92 or
	  cache_pseudo_lru_93 or
	  cache_pseudo_lru_94 or
	  cache_pseudo_lru_95 or
	  cache_pseudo_lru_96 or
	  cache_pseudo_lru_97 or
	  cache_pseudo_lru_98 or
	  cache_pseudo_lru_99 or
	  cache_pseudo_lru_100 or
	  cache_pseudo_lru_101 or
	  cache_pseudo_lru_102 or
	  cache_pseudo_lru_103 or
	  cache_pseudo_lru_104 or
	  cache_pseudo_lru_105 or
	  cache_pseudo_lru_106 or
	  cache_pseudo_lru_107 or
	  cache_pseudo_lru_108 or
	  cache_pseudo_lru_109 or
	  cache_pseudo_lru_110 or
	  cache_pseudo_lru_111 or
	  cache_pseudo_lru_112 or
	  cache_pseudo_lru_113 or
	  cache_pseudo_lru_114 or
	  cache_pseudo_lru_115 or
	  cache_pseudo_lru_116 or
	  cache_pseudo_lru_117 or
	  cache_pseudo_lru_118 or
	  cache_pseudo_lru_119 or
	  cache_pseudo_lru_120 or
	  cache_pseudo_lru_121 or
	  cache_pseudo_lru_122 or
	  cache_pseudo_lru_123 or
	  cache_pseudo_lru_124 or
	  cache_pseudo_lru_125 or
	  cache_pseudo_lru_126 or cache_pseudo_lru_127)
  begin
    case (cache_ff_request_from_cpu$D_OUT[11:5])
      7'd0: lru_bits__h15217 = cache_pseudo_lru_0;
      7'd1: lru_bits__h15217 = cache_pseudo_lru_1;
      7'd2: lru_bits__h15217 = cache_pseudo_lru_2;
      7'd3: lru_bits__h15217 = cache_pseudo_lru_3;
      7'd4: lru_bits__h15217 = cache_pseudo_lru_4;
      7'd5: lru_bits__h15217 = cache_pseudo_lru_5;
      7'd6: lru_bits__h15217 = cache_pseudo_lru_6;
      7'd7: lru_bits__h15217 = cache_pseudo_lru_7;
      7'd8: lru_bits__h15217 = cache_pseudo_lru_8;
      7'd9: lru_bits__h15217 = cache_pseudo_lru_9;
      7'd10: lru_bits__h15217 = cache_pseudo_lru_10;
      7'd11: lru_bits__h15217 = cache_pseudo_lru_11;
      7'd12: lru_bits__h15217 = cache_pseudo_lru_12;
      7'd13: lru_bits__h15217 = cache_pseudo_lru_13;
      7'd14: lru_bits__h15217 = cache_pseudo_lru_14;
      7'd15: lru_bits__h15217 = cache_pseudo_lru_15;
      7'd16: lru_bits__h15217 = cache_pseudo_lru_16;
      7'd17: lru_bits__h15217 = cache_pseudo_lru_17;
      7'd18: lru_bits__h15217 = cache_pseudo_lru_18;
      7'd19: lru_bits__h15217 = cache_pseudo_lru_19;
      7'd20: lru_bits__h15217 = cache_pseudo_lru_20;
      7'd21: lru_bits__h15217 = cache_pseudo_lru_21;
      7'd22: lru_bits__h15217 = cache_pseudo_lru_22;
      7'd23: lru_bits__h15217 = cache_pseudo_lru_23;
      7'd24: lru_bits__h15217 = cache_pseudo_lru_24;
      7'd25: lru_bits__h15217 = cache_pseudo_lru_25;
      7'd26: lru_bits__h15217 = cache_pseudo_lru_26;
      7'd27: lru_bits__h15217 = cache_pseudo_lru_27;
      7'd28: lru_bits__h15217 = cache_pseudo_lru_28;
      7'd29: lru_bits__h15217 = cache_pseudo_lru_29;
      7'd30: lru_bits__h15217 = cache_pseudo_lru_30;
      7'd31: lru_bits__h15217 = cache_pseudo_lru_31;
      7'd32: lru_bits__h15217 = cache_pseudo_lru_32;
      7'd33: lru_bits__h15217 = cache_pseudo_lru_33;
      7'd34: lru_bits__h15217 = cache_pseudo_lru_34;
      7'd35: lru_bits__h15217 = cache_pseudo_lru_35;
      7'd36: lru_bits__h15217 = cache_pseudo_lru_36;
      7'd37: lru_bits__h15217 = cache_pseudo_lru_37;
      7'd38: lru_bits__h15217 = cache_pseudo_lru_38;
      7'd39: lru_bits__h15217 = cache_pseudo_lru_39;
      7'd40: lru_bits__h15217 = cache_pseudo_lru_40;
      7'd41: lru_bits__h15217 = cache_pseudo_lru_41;
      7'd42: lru_bits__h15217 = cache_pseudo_lru_42;
      7'd43: lru_bits__h15217 = cache_pseudo_lru_43;
      7'd44: lru_bits__h15217 = cache_pseudo_lru_44;
      7'd45: lru_bits__h15217 = cache_pseudo_lru_45;
      7'd46: lru_bits__h15217 = cache_pseudo_lru_46;
      7'd47: lru_bits__h15217 = cache_pseudo_lru_47;
      7'd48: lru_bits__h15217 = cache_pseudo_lru_48;
      7'd49: lru_bits__h15217 = cache_pseudo_lru_49;
      7'd50: lru_bits__h15217 = cache_pseudo_lru_50;
      7'd51: lru_bits__h15217 = cache_pseudo_lru_51;
      7'd52: lru_bits__h15217 = cache_pseudo_lru_52;
      7'd53: lru_bits__h15217 = cache_pseudo_lru_53;
      7'd54: lru_bits__h15217 = cache_pseudo_lru_54;
      7'd55: lru_bits__h15217 = cache_pseudo_lru_55;
      7'd56: lru_bits__h15217 = cache_pseudo_lru_56;
      7'd57: lru_bits__h15217 = cache_pseudo_lru_57;
      7'd58: lru_bits__h15217 = cache_pseudo_lru_58;
      7'd59: lru_bits__h15217 = cache_pseudo_lru_59;
      7'd60: lru_bits__h15217 = cache_pseudo_lru_60;
      7'd61: lru_bits__h15217 = cache_pseudo_lru_61;
      7'd62: lru_bits__h15217 = cache_pseudo_lru_62;
      7'd63: lru_bits__h15217 = cache_pseudo_lru_63;
      7'd64: lru_bits__h15217 = cache_pseudo_lru_64;
      7'd65: lru_bits__h15217 = cache_pseudo_lru_65;
      7'd66: lru_bits__h15217 = cache_pseudo_lru_66;
      7'd67: lru_bits__h15217 = cache_pseudo_lru_67;
      7'd68: lru_bits__h15217 = cache_pseudo_lru_68;
      7'd69: lru_bits__h15217 = cache_pseudo_lru_69;
      7'd70: lru_bits__h15217 = cache_pseudo_lru_70;
      7'd71: lru_bits__h15217 = cache_pseudo_lru_71;
      7'd72: lru_bits__h15217 = cache_pseudo_lru_72;
      7'd73: lru_bits__h15217 = cache_pseudo_lru_73;
      7'd74: lru_bits__h15217 = cache_pseudo_lru_74;
      7'd75: lru_bits__h15217 = cache_pseudo_lru_75;
      7'd76: lru_bits__h15217 = cache_pseudo_lru_76;
      7'd77: lru_bits__h15217 = cache_pseudo_lru_77;
      7'd78: lru_bits__h15217 = cache_pseudo_lru_78;
      7'd79: lru_bits__h15217 = cache_pseudo_lru_79;
      7'd80: lru_bits__h15217 = cache_pseudo_lru_80;
      7'd81: lru_bits__h15217 = cache_pseudo_lru_81;
      7'd82: lru_bits__h15217 = cache_pseudo_lru_82;
      7'd83: lru_bits__h15217 = cache_pseudo_lru_83;
      7'd84: lru_bits__h15217 = cache_pseudo_lru_84;
      7'd85: lru_bits__h15217 = cache_pseudo_lru_85;
      7'd86: lru_bits__h15217 = cache_pseudo_lru_86;
      7'd87: lru_bits__h15217 = cache_pseudo_lru_87;
      7'd88: lru_bits__h15217 = cache_pseudo_lru_88;
      7'd89: lru_bits__h15217 = cache_pseudo_lru_89;
      7'd90: lru_bits__h15217 = cache_pseudo_lru_90;
      7'd91: lru_bits__h15217 = cache_pseudo_lru_91;
      7'd92: lru_bits__h15217 = cache_pseudo_lru_92;
      7'd93: lru_bits__h15217 = cache_pseudo_lru_93;
      7'd94: lru_bits__h15217 = cache_pseudo_lru_94;
      7'd95: lru_bits__h15217 = cache_pseudo_lru_95;
      7'd96: lru_bits__h15217 = cache_pseudo_lru_96;
      7'd97: lru_bits__h15217 = cache_pseudo_lru_97;
      7'd98: lru_bits__h15217 = cache_pseudo_lru_98;
      7'd99: lru_bits__h15217 = cache_pseudo_lru_99;
      7'd100: lru_bits__h15217 = cache_pseudo_lru_100;
      7'd101: lru_bits__h15217 = cache_pseudo_lru_101;
      7'd102: lru_bits__h15217 = cache_pseudo_lru_102;
      7'd103: lru_bits__h15217 = cache_pseudo_lru_103;
      7'd104: lru_bits__h15217 = cache_pseudo_lru_104;
      7'd105: lru_bits__h15217 = cache_pseudo_lru_105;
      7'd106: lru_bits__h15217 = cache_pseudo_lru_106;
      7'd107: lru_bits__h15217 = cache_pseudo_lru_107;
      7'd108: lru_bits__h15217 = cache_pseudo_lru_108;
      7'd109: lru_bits__h15217 = cache_pseudo_lru_109;
      7'd110: lru_bits__h15217 = cache_pseudo_lru_110;
      7'd111: lru_bits__h15217 = cache_pseudo_lru_111;
      7'd112: lru_bits__h15217 = cache_pseudo_lru_112;
      7'd113: lru_bits__h15217 = cache_pseudo_lru_113;
      7'd114: lru_bits__h15217 = cache_pseudo_lru_114;
      7'd115: lru_bits__h15217 = cache_pseudo_lru_115;
      7'd116: lru_bits__h15217 = cache_pseudo_lru_116;
      7'd117: lru_bits__h15217 = cache_pseudo_lru_117;
      7'd118: lru_bits__h15217 = cache_pseudo_lru_118;
      7'd119: lru_bits__h15217 = cache_pseudo_lru_119;
      7'd120: lru_bits__h15217 = cache_pseudo_lru_120;
      7'd121: lru_bits__h15217 = cache_pseudo_lru_121;
      7'd122: lru_bits__h15217 = cache_pseudo_lru_122;
      7'd123: lru_bits__h15217 = cache_pseudo_lru_123;
      7'd124: lru_bits__h15217 = cache_pseudo_lru_124;
      7'd125: lru_bits__h15217 = cache_pseudo_lru_125;
      7'd126: lru_bits__h15217 = cache_pseudo_lru_126;
      7'd127: lru_bits__h15217 = cache_pseudo_lru_127;
    endcase
  end
  always@(cache_ff_request_from_cpu$D_OUT or
	  cache_data_0_0$DOA or
	  cache_data_0_1$DOA or
	  cache_data_0_2$DOA or
	  cache_data_0_3$DOA or
	  cache_data_0_4$DOA or
	  cache_data_0_5$DOA or cache_data_0_6$DOA or cache_data_0_7$DOA)
  begin
    case (cache_ff_request_from_cpu$D_OUT[4:2])
      3'd0:
	  SEL_ARR_cache_data_0_0_a_read__15_cache_data_0_ETC___d424 =
	      cache_data_0_0$DOA;
      3'd1:
	  SEL_ARR_cache_data_0_0_a_read__15_cache_data_0_ETC___d424 =
	      cache_data_0_1$DOA;
      3'd2:
	  SEL_ARR_cache_data_0_0_a_read__15_cache_data_0_ETC___d424 =
	      cache_data_0_2$DOA;
      3'd3:
	  SEL_ARR_cache_data_0_0_a_read__15_cache_data_0_ETC___d424 =
	      cache_data_0_3$DOA;
      3'd4:
	  SEL_ARR_cache_data_0_0_a_read__15_cache_data_0_ETC___d424 =
	      cache_data_0_4$DOA;
      3'd5:
	  SEL_ARR_cache_data_0_0_a_read__15_cache_data_0_ETC___d424 =
	      cache_data_0_5$DOA;
      3'd6:
	  SEL_ARR_cache_data_0_0_a_read__15_cache_data_0_ETC___d424 =
	      cache_data_0_6$DOA;
      3'd7:
	  SEL_ARR_cache_data_0_0_a_read__15_cache_data_0_ETC___d424 =
	      cache_data_0_7$DOA;
    endcase
  end
  always@(cache_ff_request_from_cpu$D_OUT or
	  cache_data_2_0$DOA or
	  cache_data_2_1$DOA or
	  cache_data_2_2$DOA or
	  cache_data_2_3$DOA or
	  cache_data_2_4$DOA or
	  cache_data_2_5$DOA or cache_data_2_6$DOA or cache_data_2_7$DOA)
  begin
    case (cache_ff_request_from_cpu$D_OUT[4:2])
      3'd0:
	  SEL_ARR_cache_data_2_0_a_read__35_cache_data_2_ETC___d444 =
	      cache_data_2_0$DOA;
      3'd1:
	  SEL_ARR_cache_data_2_0_a_read__35_cache_data_2_ETC___d444 =
	      cache_data_2_1$DOA;
      3'd2:
	  SEL_ARR_cache_data_2_0_a_read__35_cache_data_2_ETC___d444 =
	      cache_data_2_2$DOA;
      3'd3:
	  SEL_ARR_cache_data_2_0_a_read__35_cache_data_2_ETC___d444 =
	      cache_data_2_3$DOA;
      3'd4:
	  SEL_ARR_cache_data_2_0_a_read__35_cache_data_2_ETC___d444 =
	      cache_data_2_4$DOA;
      3'd5:
	  SEL_ARR_cache_data_2_0_a_read__35_cache_data_2_ETC___d444 =
	      cache_data_2_5$DOA;
      3'd6:
	  SEL_ARR_cache_data_2_0_a_read__35_cache_data_2_ETC___d444 =
	      cache_data_2_6$DOA;
      3'd7:
	  SEL_ARR_cache_data_2_0_a_read__35_cache_data_2_ETC___d444 =
	      cache_data_2_7$DOA;
    endcase
  end
  always@(cache_ff_request_from_cpu$D_OUT or
	  cache_data_1_0$DOA or
	  cache_data_1_1$DOA or
	  cache_data_1_2$DOA or
	  cache_data_1_3$DOA or
	  cache_data_1_4$DOA or
	  cache_data_1_5$DOA or cache_data_1_6$DOA or cache_data_1_7$DOA)
  begin
    case (cache_ff_request_from_cpu$D_OUT[4:2])
      3'd0:
	  SEL_ARR_cache_data_1_0_a_read__25_cache_data_1_ETC___d434 =
	      cache_data_1_0$DOA;
      3'd1:
	  SEL_ARR_cache_data_1_0_a_read__25_cache_data_1_ETC___d434 =
	      cache_data_1_1$DOA;
      3'd2:
	  SEL_ARR_cache_data_1_0_a_read__25_cache_data_1_ETC___d434 =
	      cache_data_1_2$DOA;
      3'd3:
	  SEL_ARR_cache_data_1_0_a_read__25_cache_data_1_ETC___d434 =
	      cache_data_1_3$DOA;
      3'd4:
	  SEL_ARR_cache_data_1_0_a_read__25_cache_data_1_ETC___d434 =
	      cache_data_1_4$DOA;
      3'd5:
	  SEL_ARR_cache_data_1_0_a_read__25_cache_data_1_ETC___d434 =
	      cache_data_1_5$DOA;
      3'd6:
	  SEL_ARR_cache_data_1_0_a_read__25_cache_data_1_ETC___d434 =
	      cache_data_1_6$DOA;
      3'd7:
	  SEL_ARR_cache_data_1_0_a_read__25_cache_data_1_ETC___d434 =
	      cache_data_1_7$DOA;
    endcase
  end
  always@(cache_ff_request_from_cpu$D_OUT or
	  cache_data_3_0$DOA or
	  cache_data_3_1$DOA or
	  cache_data_3_2$DOA or
	  cache_data_3_3$DOA or
	  cache_data_3_4$DOA or
	  cache_data_3_5$DOA or cache_data_3_6$DOA or cache_data_3_7$DOA)
  begin
    case (cache_ff_request_from_cpu$D_OUT[4:2])
      3'd0:
	  SEL_ARR_cache_data_3_0_a_read__45_cache_data_3_ETC___d454 =
	      cache_data_3_0$DOA;
      3'd1:
	  SEL_ARR_cache_data_3_0_a_read__45_cache_data_3_ETC___d454 =
	      cache_data_3_1$DOA;
      3'd2:
	  SEL_ARR_cache_data_3_0_a_read__45_cache_data_3_ETC___d454 =
	      cache_data_3_2$DOA;
      3'd3:
	  SEL_ARR_cache_data_3_0_a_read__45_cache_data_3_ETC___d454 =
	      cache_data_3_3$DOA;
      3'd4:
	  SEL_ARR_cache_data_3_0_a_read__45_cache_data_3_ETC___d454 =
	      cache_data_3_4$DOA;
      3'd5:
	  SEL_ARR_cache_data_3_0_a_read__45_cache_data_3_ETC___d454 =
	      cache_data_3_5$DOA;
      3'd6:
	  SEL_ARR_cache_data_3_0_a_read__45_cache_data_3_ETC___d454 =
	      cache_data_3_6$DOA;
      3'd7:
	  SEL_ARR_cache_data_3_0_a_read__45_cache_data_3_ETC___d454 =
	      cache_data_3_7$DOA;
    endcase
  end
  always@(IF_cache_valid_3_a_read__2_AND_cache_tag_3_a_r_ETC___d459 or
	  SEL_ARR_cache_data_0_0_a_read__15_cache_data_0_ETC___d424 or
	  SEL_ARR_cache_data_1_0_a_read__25_cache_data_1_ETC___d434 or
	  SEL_ARR_cache_data_2_0_a_read__35_cache_data_2_ETC___d444 or
	  SEL_ARR_cache_data_3_0_a_read__45_cache_data_3_ETC___d454)
  begin
    case (IF_cache_valid_3_a_read__2_AND_cache_tag_3_a_r_ETC___d459)
      32'd0:
	  x_data_word__h103841 =
	      SEL_ARR_cache_data_0_0_a_read__15_cache_data_0_ETC___d424;
      32'd1:
	  x_data_word__h103841 =
	      SEL_ARR_cache_data_1_0_a_read__25_cache_data_1_ETC___d434;
      32'd2:
	  x_data_word__h103841 =
	      SEL_ARR_cache_data_2_0_a_read__35_cache_data_2_ETC___d444;
      32'd3:
	  x_data_word__h103841 =
	      SEL_ARR_cache_data_3_0_a_read__45_cache_data_3_ETC___d454;
      default: x_data_word__h103841 = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cache_pseudo_lru_0 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_1 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_10 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_100 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_101 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_102 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_103 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_104 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_105 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_106 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_107 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_108 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_109 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_11 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_110 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_111 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_112 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_113 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_114 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_115 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_116 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_117 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_118 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_119 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_12 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_120 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_121 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_122 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_123 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_124 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_125 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_126 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_127 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_13 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_14 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_15 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_16 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_17 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_18 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_19 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_2 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_20 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_21 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_22 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_23 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_24 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_25 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_26 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_27 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_28 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_29 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_3 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_30 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_31 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_32 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_33 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_34 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_35 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_36 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_37 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_38 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_39 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_4 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_40 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_41 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_42 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_43 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_44 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_45 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_46 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_47 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_48 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_49 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_5 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_50 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_51 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_52 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_53 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_54 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_55 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_56 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_57 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_58 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_59 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_6 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_60 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_61 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_62 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_63 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_64 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_65 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_66 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_67 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_68 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_69 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_7 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_70 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_71 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_72 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_73 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_74 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_75 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_76 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_77 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_78 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_79 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_8 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_80 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_81 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_82 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_83 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_84 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_85 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_86 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_87 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_88 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_89 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_9 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_90 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_91 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_92 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_93 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_94 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_95 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_96 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_97 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_98 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_99 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_rg_enable <= `BSV_ASSIGNMENT_DELAY 1'd1;
	cache_rg_flush <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_index <= `BSV_ASSIGNMENT_DELAY 8'd0;
	cache_rg_initialize <= `BSV_ASSIGNMENT_DELAY 1'd1;
	cache_rg_offset <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_rg_replace_block <= `BSV_ASSIGNMENT_DELAY 2'd0;
	cache_rg_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	cache_rg_word_count <= `BSV_ASSIGNMENT_DELAY 3'd0;
      end
    else
      begin
        if (cache_pseudo_lru_0$EN)
	  cache_pseudo_lru_0 <= `BSV_ASSIGNMENT_DELAY cache_pseudo_lru_0$D_IN;
	if (cache_pseudo_lru_1$EN)
	  cache_pseudo_lru_1 <= `BSV_ASSIGNMENT_DELAY cache_pseudo_lru_1$D_IN;
	if (cache_pseudo_lru_10$EN)
	  cache_pseudo_lru_10 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_10$D_IN;
	if (cache_pseudo_lru_100$EN)
	  cache_pseudo_lru_100 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_100$D_IN;
	if (cache_pseudo_lru_101$EN)
	  cache_pseudo_lru_101 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_101$D_IN;
	if (cache_pseudo_lru_102$EN)
	  cache_pseudo_lru_102 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_102$D_IN;
	if (cache_pseudo_lru_103$EN)
	  cache_pseudo_lru_103 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_103$D_IN;
	if (cache_pseudo_lru_104$EN)
	  cache_pseudo_lru_104 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_104$D_IN;
	if (cache_pseudo_lru_105$EN)
	  cache_pseudo_lru_105 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_105$D_IN;
	if (cache_pseudo_lru_106$EN)
	  cache_pseudo_lru_106 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_106$D_IN;
	if (cache_pseudo_lru_107$EN)
	  cache_pseudo_lru_107 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_107$D_IN;
	if (cache_pseudo_lru_108$EN)
	  cache_pseudo_lru_108 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_108$D_IN;
	if (cache_pseudo_lru_109$EN)
	  cache_pseudo_lru_109 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_109$D_IN;
	if (cache_pseudo_lru_11$EN)
	  cache_pseudo_lru_11 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_11$D_IN;
	if (cache_pseudo_lru_110$EN)
	  cache_pseudo_lru_110 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_110$D_IN;
	if (cache_pseudo_lru_111$EN)
	  cache_pseudo_lru_111 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_111$D_IN;
	if (cache_pseudo_lru_112$EN)
	  cache_pseudo_lru_112 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_112$D_IN;
	if (cache_pseudo_lru_113$EN)
	  cache_pseudo_lru_113 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_113$D_IN;
	if (cache_pseudo_lru_114$EN)
	  cache_pseudo_lru_114 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_114$D_IN;
	if (cache_pseudo_lru_115$EN)
	  cache_pseudo_lru_115 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_115$D_IN;
	if (cache_pseudo_lru_116$EN)
	  cache_pseudo_lru_116 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_116$D_IN;
	if (cache_pseudo_lru_117$EN)
	  cache_pseudo_lru_117 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_117$D_IN;
	if (cache_pseudo_lru_118$EN)
	  cache_pseudo_lru_118 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_118$D_IN;
	if (cache_pseudo_lru_119$EN)
	  cache_pseudo_lru_119 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_119$D_IN;
	if (cache_pseudo_lru_12$EN)
	  cache_pseudo_lru_12 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_12$D_IN;
	if (cache_pseudo_lru_120$EN)
	  cache_pseudo_lru_120 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_120$D_IN;
	if (cache_pseudo_lru_121$EN)
	  cache_pseudo_lru_121 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_121$D_IN;
	if (cache_pseudo_lru_122$EN)
	  cache_pseudo_lru_122 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_122$D_IN;
	if (cache_pseudo_lru_123$EN)
	  cache_pseudo_lru_123 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_123$D_IN;
	if (cache_pseudo_lru_124$EN)
	  cache_pseudo_lru_124 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_124$D_IN;
	if (cache_pseudo_lru_125$EN)
	  cache_pseudo_lru_125 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_125$D_IN;
	if (cache_pseudo_lru_126$EN)
	  cache_pseudo_lru_126 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_126$D_IN;
	if (cache_pseudo_lru_127$EN)
	  cache_pseudo_lru_127 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_127$D_IN;
	if (cache_pseudo_lru_13$EN)
	  cache_pseudo_lru_13 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_13$D_IN;
	if (cache_pseudo_lru_14$EN)
	  cache_pseudo_lru_14 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_14$D_IN;
	if (cache_pseudo_lru_15$EN)
	  cache_pseudo_lru_15 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_15$D_IN;
	if (cache_pseudo_lru_16$EN)
	  cache_pseudo_lru_16 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_16$D_IN;
	if (cache_pseudo_lru_17$EN)
	  cache_pseudo_lru_17 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_17$D_IN;
	if (cache_pseudo_lru_18$EN)
	  cache_pseudo_lru_18 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_18$D_IN;
	if (cache_pseudo_lru_19$EN)
	  cache_pseudo_lru_19 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_19$D_IN;
	if (cache_pseudo_lru_2$EN)
	  cache_pseudo_lru_2 <= `BSV_ASSIGNMENT_DELAY cache_pseudo_lru_2$D_IN;
	if (cache_pseudo_lru_20$EN)
	  cache_pseudo_lru_20 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_20$D_IN;
	if (cache_pseudo_lru_21$EN)
	  cache_pseudo_lru_21 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_21$D_IN;
	if (cache_pseudo_lru_22$EN)
	  cache_pseudo_lru_22 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_22$D_IN;
	if (cache_pseudo_lru_23$EN)
	  cache_pseudo_lru_23 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_23$D_IN;
	if (cache_pseudo_lru_24$EN)
	  cache_pseudo_lru_24 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_24$D_IN;
	if (cache_pseudo_lru_25$EN)
	  cache_pseudo_lru_25 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_25$D_IN;
	if (cache_pseudo_lru_26$EN)
	  cache_pseudo_lru_26 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_26$D_IN;
	if (cache_pseudo_lru_27$EN)
	  cache_pseudo_lru_27 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_27$D_IN;
	if (cache_pseudo_lru_28$EN)
	  cache_pseudo_lru_28 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_28$D_IN;
	if (cache_pseudo_lru_29$EN)
	  cache_pseudo_lru_29 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_29$D_IN;
	if (cache_pseudo_lru_3$EN)
	  cache_pseudo_lru_3 <= `BSV_ASSIGNMENT_DELAY cache_pseudo_lru_3$D_IN;
	if (cache_pseudo_lru_30$EN)
	  cache_pseudo_lru_30 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_30$D_IN;
	if (cache_pseudo_lru_31$EN)
	  cache_pseudo_lru_31 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_31$D_IN;
	if (cache_pseudo_lru_32$EN)
	  cache_pseudo_lru_32 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_32$D_IN;
	if (cache_pseudo_lru_33$EN)
	  cache_pseudo_lru_33 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_33$D_IN;
	if (cache_pseudo_lru_34$EN)
	  cache_pseudo_lru_34 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_34$D_IN;
	if (cache_pseudo_lru_35$EN)
	  cache_pseudo_lru_35 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_35$D_IN;
	if (cache_pseudo_lru_36$EN)
	  cache_pseudo_lru_36 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_36$D_IN;
	if (cache_pseudo_lru_37$EN)
	  cache_pseudo_lru_37 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_37$D_IN;
	if (cache_pseudo_lru_38$EN)
	  cache_pseudo_lru_38 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_38$D_IN;
	if (cache_pseudo_lru_39$EN)
	  cache_pseudo_lru_39 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_39$D_IN;
	if (cache_pseudo_lru_4$EN)
	  cache_pseudo_lru_4 <= `BSV_ASSIGNMENT_DELAY cache_pseudo_lru_4$D_IN;
	if (cache_pseudo_lru_40$EN)
	  cache_pseudo_lru_40 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_40$D_IN;
	if (cache_pseudo_lru_41$EN)
	  cache_pseudo_lru_41 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_41$D_IN;
	if (cache_pseudo_lru_42$EN)
	  cache_pseudo_lru_42 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_42$D_IN;
	if (cache_pseudo_lru_43$EN)
	  cache_pseudo_lru_43 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_43$D_IN;
	if (cache_pseudo_lru_44$EN)
	  cache_pseudo_lru_44 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_44$D_IN;
	if (cache_pseudo_lru_45$EN)
	  cache_pseudo_lru_45 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_45$D_IN;
	if (cache_pseudo_lru_46$EN)
	  cache_pseudo_lru_46 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_46$D_IN;
	if (cache_pseudo_lru_47$EN)
	  cache_pseudo_lru_47 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_47$D_IN;
	if (cache_pseudo_lru_48$EN)
	  cache_pseudo_lru_48 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_48$D_IN;
	if (cache_pseudo_lru_49$EN)
	  cache_pseudo_lru_49 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_49$D_IN;
	if (cache_pseudo_lru_5$EN)
	  cache_pseudo_lru_5 <= `BSV_ASSIGNMENT_DELAY cache_pseudo_lru_5$D_IN;
	if (cache_pseudo_lru_50$EN)
	  cache_pseudo_lru_50 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_50$D_IN;
	if (cache_pseudo_lru_51$EN)
	  cache_pseudo_lru_51 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_51$D_IN;
	if (cache_pseudo_lru_52$EN)
	  cache_pseudo_lru_52 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_52$D_IN;
	if (cache_pseudo_lru_53$EN)
	  cache_pseudo_lru_53 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_53$D_IN;
	if (cache_pseudo_lru_54$EN)
	  cache_pseudo_lru_54 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_54$D_IN;
	if (cache_pseudo_lru_55$EN)
	  cache_pseudo_lru_55 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_55$D_IN;
	if (cache_pseudo_lru_56$EN)
	  cache_pseudo_lru_56 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_56$D_IN;
	if (cache_pseudo_lru_57$EN)
	  cache_pseudo_lru_57 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_57$D_IN;
	if (cache_pseudo_lru_58$EN)
	  cache_pseudo_lru_58 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_58$D_IN;
	if (cache_pseudo_lru_59$EN)
	  cache_pseudo_lru_59 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_59$D_IN;
	if (cache_pseudo_lru_6$EN)
	  cache_pseudo_lru_6 <= `BSV_ASSIGNMENT_DELAY cache_pseudo_lru_6$D_IN;
	if (cache_pseudo_lru_60$EN)
	  cache_pseudo_lru_60 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_60$D_IN;
	if (cache_pseudo_lru_61$EN)
	  cache_pseudo_lru_61 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_61$D_IN;
	if (cache_pseudo_lru_62$EN)
	  cache_pseudo_lru_62 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_62$D_IN;
	if (cache_pseudo_lru_63$EN)
	  cache_pseudo_lru_63 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_63$D_IN;
	if (cache_pseudo_lru_64$EN)
	  cache_pseudo_lru_64 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_64$D_IN;
	if (cache_pseudo_lru_65$EN)
	  cache_pseudo_lru_65 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_65$D_IN;
	if (cache_pseudo_lru_66$EN)
	  cache_pseudo_lru_66 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_66$D_IN;
	if (cache_pseudo_lru_67$EN)
	  cache_pseudo_lru_67 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_67$D_IN;
	if (cache_pseudo_lru_68$EN)
	  cache_pseudo_lru_68 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_68$D_IN;
	if (cache_pseudo_lru_69$EN)
	  cache_pseudo_lru_69 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_69$D_IN;
	if (cache_pseudo_lru_7$EN)
	  cache_pseudo_lru_7 <= `BSV_ASSIGNMENT_DELAY cache_pseudo_lru_7$D_IN;
	if (cache_pseudo_lru_70$EN)
	  cache_pseudo_lru_70 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_70$D_IN;
	if (cache_pseudo_lru_71$EN)
	  cache_pseudo_lru_71 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_71$D_IN;
	if (cache_pseudo_lru_72$EN)
	  cache_pseudo_lru_72 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_72$D_IN;
	if (cache_pseudo_lru_73$EN)
	  cache_pseudo_lru_73 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_73$D_IN;
	if (cache_pseudo_lru_74$EN)
	  cache_pseudo_lru_74 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_74$D_IN;
	if (cache_pseudo_lru_75$EN)
	  cache_pseudo_lru_75 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_75$D_IN;
	if (cache_pseudo_lru_76$EN)
	  cache_pseudo_lru_76 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_76$D_IN;
	if (cache_pseudo_lru_77$EN)
	  cache_pseudo_lru_77 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_77$D_IN;
	if (cache_pseudo_lru_78$EN)
	  cache_pseudo_lru_78 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_78$D_IN;
	if (cache_pseudo_lru_79$EN)
	  cache_pseudo_lru_79 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_79$D_IN;
	if (cache_pseudo_lru_8$EN)
	  cache_pseudo_lru_8 <= `BSV_ASSIGNMENT_DELAY cache_pseudo_lru_8$D_IN;
	if (cache_pseudo_lru_80$EN)
	  cache_pseudo_lru_80 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_80$D_IN;
	if (cache_pseudo_lru_81$EN)
	  cache_pseudo_lru_81 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_81$D_IN;
	if (cache_pseudo_lru_82$EN)
	  cache_pseudo_lru_82 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_82$D_IN;
	if (cache_pseudo_lru_83$EN)
	  cache_pseudo_lru_83 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_83$D_IN;
	if (cache_pseudo_lru_84$EN)
	  cache_pseudo_lru_84 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_84$D_IN;
	if (cache_pseudo_lru_85$EN)
	  cache_pseudo_lru_85 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_85$D_IN;
	if (cache_pseudo_lru_86$EN)
	  cache_pseudo_lru_86 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_86$D_IN;
	if (cache_pseudo_lru_87$EN)
	  cache_pseudo_lru_87 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_87$D_IN;
	if (cache_pseudo_lru_88$EN)
	  cache_pseudo_lru_88 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_88$D_IN;
	if (cache_pseudo_lru_89$EN)
	  cache_pseudo_lru_89 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_89$D_IN;
	if (cache_pseudo_lru_9$EN)
	  cache_pseudo_lru_9 <= `BSV_ASSIGNMENT_DELAY cache_pseudo_lru_9$D_IN;
	if (cache_pseudo_lru_90$EN)
	  cache_pseudo_lru_90 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_90$D_IN;
	if (cache_pseudo_lru_91$EN)
	  cache_pseudo_lru_91 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_91$D_IN;
	if (cache_pseudo_lru_92$EN)
	  cache_pseudo_lru_92 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_92$D_IN;
	if (cache_pseudo_lru_93$EN)
	  cache_pseudo_lru_93 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_93$D_IN;
	if (cache_pseudo_lru_94$EN)
	  cache_pseudo_lru_94 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_94$D_IN;
	if (cache_pseudo_lru_95$EN)
	  cache_pseudo_lru_95 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_95$D_IN;
	if (cache_pseudo_lru_96$EN)
	  cache_pseudo_lru_96 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_96$D_IN;
	if (cache_pseudo_lru_97$EN)
	  cache_pseudo_lru_97 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_97$D_IN;
	if (cache_pseudo_lru_98$EN)
	  cache_pseudo_lru_98 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_98$D_IN;
	if (cache_pseudo_lru_99$EN)
	  cache_pseudo_lru_99 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_99$D_IN;
	if (cache_rg_enable$EN)
	  cache_rg_enable <= `BSV_ASSIGNMENT_DELAY cache_rg_enable$D_IN;
	if (cache_rg_flush$EN)
	  cache_rg_flush <= `BSV_ASSIGNMENT_DELAY cache_rg_flush$D_IN;
	if (cache_rg_index$EN)
	  cache_rg_index <= `BSV_ASSIGNMENT_DELAY cache_rg_index$D_IN;
	if (cache_rg_initialize$EN)
	  cache_rg_initialize <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_initialize$D_IN;
	if (cache_rg_offset$EN)
	  cache_rg_offset <= `BSV_ASSIGNMENT_DELAY cache_rg_offset$D_IN;
	if (cache_rg_replace_block$EN)
	  cache_rg_replace_block <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_replace_block$D_IN;
	if (cache_rg_state$EN)
	  cache_rg_state <= `BSV_ASSIGNMENT_DELAY cache_rg_state$D_IN;
	if (cache_rg_word_count$EN)
	  cache_rg_word_count <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_word_count$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cache_pseudo_lru_0 = 3'h2;
    cache_pseudo_lru_1 = 3'h2;
    cache_pseudo_lru_10 = 3'h2;
    cache_pseudo_lru_100 = 3'h2;
    cache_pseudo_lru_101 = 3'h2;
    cache_pseudo_lru_102 = 3'h2;
    cache_pseudo_lru_103 = 3'h2;
    cache_pseudo_lru_104 = 3'h2;
    cache_pseudo_lru_105 = 3'h2;
    cache_pseudo_lru_106 = 3'h2;
    cache_pseudo_lru_107 = 3'h2;
    cache_pseudo_lru_108 = 3'h2;
    cache_pseudo_lru_109 = 3'h2;
    cache_pseudo_lru_11 = 3'h2;
    cache_pseudo_lru_110 = 3'h2;
    cache_pseudo_lru_111 = 3'h2;
    cache_pseudo_lru_112 = 3'h2;
    cache_pseudo_lru_113 = 3'h2;
    cache_pseudo_lru_114 = 3'h2;
    cache_pseudo_lru_115 = 3'h2;
    cache_pseudo_lru_116 = 3'h2;
    cache_pseudo_lru_117 = 3'h2;
    cache_pseudo_lru_118 = 3'h2;
    cache_pseudo_lru_119 = 3'h2;
    cache_pseudo_lru_12 = 3'h2;
    cache_pseudo_lru_120 = 3'h2;
    cache_pseudo_lru_121 = 3'h2;
    cache_pseudo_lru_122 = 3'h2;
    cache_pseudo_lru_123 = 3'h2;
    cache_pseudo_lru_124 = 3'h2;
    cache_pseudo_lru_125 = 3'h2;
    cache_pseudo_lru_126 = 3'h2;
    cache_pseudo_lru_127 = 3'h2;
    cache_pseudo_lru_13 = 3'h2;
    cache_pseudo_lru_14 = 3'h2;
    cache_pseudo_lru_15 = 3'h2;
    cache_pseudo_lru_16 = 3'h2;
    cache_pseudo_lru_17 = 3'h2;
    cache_pseudo_lru_18 = 3'h2;
    cache_pseudo_lru_19 = 3'h2;
    cache_pseudo_lru_2 = 3'h2;
    cache_pseudo_lru_20 = 3'h2;
    cache_pseudo_lru_21 = 3'h2;
    cache_pseudo_lru_22 = 3'h2;
    cache_pseudo_lru_23 = 3'h2;
    cache_pseudo_lru_24 = 3'h2;
    cache_pseudo_lru_25 = 3'h2;
    cache_pseudo_lru_26 = 3'h2;
    cache_pseudo_lru_27 = 3'h2;
    cache_pseudo_lru_28 = 3'h2;
    cache_pseudo_lru_29 = 3'h2;
    cache_pseudo_lru_3 = 3'h2;
    cache_pseudo_lru_30 = 3'h2;
    cache_pseudo_lru_31 = 3'h2;
    cache_pseudo_lru_32 = 3'h2;
    cache_pseudo_lru_33 = 3'h2;
    cache_pseudo_lru_34 = 3'h2;
    cache_pseudo_lru_35 = 3'h2;
    cache_pseudo_lru_36 = 3'h2;
    cache_pseudo_lru_37 = 3'h2;
    cache_pseudo_lru_38 = 3'h2;
    cache_pseudo_lru_39 = 3'h2;
    cache_pseudo_lru_4 = 3'h2;
    cache_pseudo_lru_40 = 3'h2;
    cache_pseudo_lru_41 = 3'h2;
    cache_pseudo_lru_42 = 3'h2;
    cache_pseudo_lru_43 = 3'h2;
    cache_pseudo_lru_44 = 3'h2;
    cache_pseudo_lru_45 = 3'h2;
    cache_pseudo_lru_46 = 3'h2;
    cache_pseudo_lru_47 = 3'h2;
    cache_pseudo_lru_48 = 3'h2;
    cache_pseudo_lru_49 = 3'h2;
    cache_pseudo_lru_5 = 3'h2;
    cache_pseudo_lru_50 = 3'h2;
    cache_pseudo_lru_51 = 3'h2;
    cache_pseudo_lru_52 = 3'h2;
    cache_pseudo_lru_53 = 3'h2;
    cache_pseudo_lru_54 = 3'h2;
    cache_pseudo_lru_55 = 3'h2;
    cache_pseudo_lru_56 = 3'h2;
    cache_pseudo_lru_57 = 3'h2;
    cache_pseudo_lru_58 = 3'h2;
    cache_pseudo_lru_59 = 3'h2;
    cache_pseudo_lru_6 = 3'h2;
    cache_pseudo_lru_60 = 3'h2;
    cache_pseudo_lru_61 = 3'h2;
    cache_pseudo_lru_62 = 3'h2;
    cache_pseudo_lru_63 = 3'h2;
    cache_pseudo_lru_64 = 3'h2;
    cache_pseudo_lru_65 = 3'h2;
    cache_pseudo_lru_66 = 3'h2;
    cache_pseudo_lru_67 = 3'h2;
    cache_pseudo_lru_68 = 3'h2;
    cache_pseudo_lru_69 = 3'h2;
    cache_pseudo_lru_7 = 3'h2;
    cache_pseudo_lru_70 = 3'h2;
    cache_pseudo_lru_71 = 3'h2;
    cache_pseudo_lru_72 = 3'h2;
    cache_pseudo_lru_73 = 3'h2;
    cache_pseudo_lru_74 = 3'h2;
    cache_pseudo_lru_75 = 3'h2;
    cache_pseudo_lru_76 = 3'h2;
    cache_pseudo_lru_77 = 3'h2;
    cache_pseudo_lru_78 = 3'h2;
    cache_pseudo_lru_79 = 3'h2;
    cache_pseudo_lru_8 = 3'h2;
    cache_pseudo_lru_80 = 3'h2;
    cache_pseudo_lru_81 = 3'h2;
    cache_pseudo_lru_82 = 3'h2;
    cache_pseudo_lru_83 = 3'h2;
    cache_pseudo_lru_84 = 3'h2;
    cache_pseudo_lru_85 = 3'h2;
    cache_pseudo_lru_86 = 3'h2;
    cache_pseudo_lru_87 = 3'h2;
    cache_pseudo_lru_88 = 3'h2;
    cache_pseudo_lru_89 = 3'h2;
    cache_pseudo_lru_9 = 3'h2;
    cache_pseudo_lru_90 = 3'h2;
    cache_pseudo_lru_91 = 3'h2;
    cache_pseudo_lru_92 = 3'h2;
    cache_pseudo_lru_93 = 3'h2;
    cache_pseudo_lru_94 = 3'h2;
    cache_pseudo_lru_95 = 3'h2;
    cache_pseudo_lru_96 = 3'h2;
    cache_pseudo_lru_97 = 3'h2;
    cache_pseudo_lru_98 = 3'h2;
    cache_pseudo_lru_99 = 3'h2;
    cache_rg_enable = 1'h0;
    cache_rg_flush = 1'h0;
    cache_rg_index = 8'hAA;
    cache_rg_initialize = 1'h0;
    cache_rg_offset = 3'h2;
    cache_rg_replace_block = 2'h2;
    cache_rg_state = 2'h2;
    cache_rg_word_count = 3'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_read_from_bram &&
	  cache_ff_request_from_cpu_first__8_BITS_1_TO_0_ETC___d464)
	begin
	  v__h100849 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_read_from_bram &&
	  cache_ff_request_from_cpu_first__8_BITS_1_TO_0_ETC___d464)
	$display(v__h100849,
		 "\t",
		 "ICACHE",
		 "\tHit for address : %h Line: %h",
		 cache_ff_request_from_cpu$D_OUT,
		 x_data_word__h103841);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_read_from_bram &&
	  cache_ff_request_from_cpu_first__8_BITS_1_TO_0_ETC___d471)
	begin
	  v__h103775 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_read_from_bram &&
	  cache_ff_request_from_cpu_first__8_BITS_1_TO_0_ETC___d471)
	$display(v__h103775,
		 "\t",
		 "ICACHE",
		 "\tMiss for address : %h",
		 cache_ff_request_from_cpu$D_OUT);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_forward_from_memory_to_cpu &&
	  cache_ff_response_from_memory$D_OUT[4:2] >= cache_rg_offset &&
	  !cache_rg_flush)
	begin
	  v__h104090 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_forward_from_memory_to_cpu &&
	  cache_ff_response_from_memory$D_OUT[4:2] >= cache_rg_offset &&
	  !cache_rg_flush)
	$display(v__h104090,
		 "\t",
		 "ICACHE",
		 "\tEnquing in output FIFO with address: %h data: %h",
		 cache_ff_response_from_memory$D_OUT[31:0],
		 cache_ff_response_from_memory$D_OUT[64:33]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_got_response_from_memory)
	begin
	  v__h104225 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_got_response_from_memory)
	$display(v__h104225,
		 "\t",
		 "ICACHE",
		 "\tRecieved response from the memory. Address: :%h Tag : %h Data: %h Count: %d",
		 cache_ff_response_from_memory$D_OUT[31:0],
		 cache_ff_response_from_memory$D_OUT[31:5],
		 cache_ff_response_from_memory$D_OUT[64:33],
		 cache_rg_word_count);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_request_from_cpu)
	begin
	  v__h109503 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_request_from_cpu)
	$display("\n",
		 v__h109503,
		 "\t",
		 "ICACHE",
		 "\tBRAM: recieved request for Address :%h tag %d: Set : %d Offset :%d",
		 request_from_cpu_req,
		 tag1__h109497,
		 request_from_cpu_req[11:5],
		 request_from_cpu_req[4:0]);
  end
  // synopsys translate_on
endmodule  // mkicache

