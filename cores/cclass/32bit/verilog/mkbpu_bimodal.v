//
// Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
//
// On Tue Mar 28 10:02:35 IST 2017
//
//
// Ports:
// Name                         I/O  size props
// RDY__training                  O     1 const
// send_output_                   O    33 reg
// RDY_send_output_               O     1
// RDY_deq_fifo                   O     1 const
// RDY__flush                     O     1 const
// pred_type                      O     1 reg
// RDY_pred_type                  O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// _training_pc                   I    32
// _training_addr                 I    32
// _training_branch_taken_or_not  I     1
// _flush_new_pc_                 I    32
// EN__training                   I     1
// EN_deq_fifo                    I     1
// EN__flush                      I     1
// EN_send_output_                I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkbpu_bimodal(CLK,
		     RST_N,

		     _training_pc,
		     _training_addr,
		     _training_branch_taken_or_not,
		     EN__training,
		     RDY__training,

		     EN_send_output_,
		     send_output_,
		     RDY_send_output_,

		     EN_deq_fifo,
		     RDY_deq_fifo,

		     _flush_new_pc_,
		     EN__flush,
		     RDY__flush,

		     pred_type,
		     RDY_pred_type);
  input  CLK;
  input  RST_N;

  // action method _training
  input  [31 : 0] _training_pc;
  input  [31 : 0] _training_addr;
  input  _training_branch_taken_or_not;
  input  EN__training;
  output RDY__training;

  // actionvalue method send_output_
  input  EN_send_output_;
  output [32 : 0] send_output_;
  output RDY_send_output_;

  // action method deq_fifo
  input  EN_deq_fifo;
  output RDY_deq_fifo;

  // action method _flush
  input  [31 : 0] _flush_new_pc_;
  input  EN__flush;
  output RDY__flush;

  // value method pred_type
  output pred_type;
  output RDY_pred_type;

  // signals for module outputs
  wire [32 : 0] send_output_;
  wire RDY__flush,
       RDY__training,
       RDY_deq_fifo,
       RDY_pred_type,
       RDY_send_output_,
       pred_type;

  // inlined wires
  wire [1 : 0] rg_state_of_branch_instrn_serverAdapterA_outData_outData$wget,
	       rg_state_of_branch_instrn_serverAdapterA_s1_1$wget,
	       rg_state_of_branch_instrn_serverAdapterB_s1_1$wget,
	       rg_tag_serverAdapterA_s1_1$wget,
	       rg_tag_serverAdapterB_s1_1$wget,
	       rg_target_addr_serverAdapterA_s1_1$wget,
	       rg_target_addr_serverAdapterB_s1_1$wget,
	       rg_valid_or_not_serverAdapterB_s1_1$wget;
  wire rg_fire_once_1$whas,
       rg_state_of_branch_instrn_serverAdapterA_cnt_1$whas,
       rg_state_of_branch_instrn_serverAdapterA_outData_enqData$whas,
       rg_state_of_branch_instrn_serverAdapterA_outData_outData$whas,
       rg_state_of_branch_instrn_serverAdapterB_outData_enqData$whas,
       rg_state_of_branch_instrn_serverAdapterB_outData_outData$whas,
       rg_state_of_branch_instrn_serverAdapterB_s1_1$whas,
       rg_tag_serverAdapterA_cnt_1$whas,
       rg_tag_serverAdapterA_outData_enqData$whas,
       rg_tag_serverAdapterA_outData_outData$whas,
       rg_tag_serverAdapterB_outData_enqData$whas,
       rg_tag_serverAdapterB_outData_outData$whas,
       rg_tag_serverAdapterB_s1_1$whas,
       rg_target_addr_serverAdapterA_cnt_1$whas,
       rg_target_addr_serverAdapterA_outData_enqData$whas,
       rg_target_addr_serverAdapterB_outData_enqData$whas,
       rg_target_addr_serverAdapterB_outData_outData$whas,
       rg_target_addr_serverAdapterB_s1_1$whas,
       rg_valid_or_not_serverAdapterA_outData_enqData$whas,
       rg_valid_or_not_serverAdapterB_outData_enqData$whas,
       rg_valid_or_not_serverAdapterB_outData_outData$wget,
       rg_valid_or_not_serverAdapterB_outData_outData$whas,
       rg_valid_or_not_serverAdapterB_s1_1$whas,
       wr_fire_me$EN_port0__write,
       wr_fire_me$port1__read,
       wr_fire_me$port2__read,
       wr_fire_me$port3__read;

  // register rg_counter
  reg [7 : 0] rg_counter;
  wire [7 : 0] rg_counter$D_IN;
  wire rg_counter$EN;

  // register rg_current_prediction
  reg rg_current_prediction;
  wire rg_current_prediction$D_IN, rg_current_prediction$EN;

  // register rg_currentpc_
  reg [31 : 0] rg_currentpc_;
  wire [31 : 0] rg_currentpc_$D_IN;
  wire rg_currentpc_$EN;

  // register rg_fire_once
  reg rg_fire_once;
  wire rg_fire_once$D_IN, rg_fire_once$EN;

  // register rg_initialize
  reg rg_initialize;
  wire rg_initialize$D_IN, rg_initialize$EN;

  // register rg_state_of_branch_instrn_serverAdapterA_cnt
  reg [2 : 0] rg_state_of_branch_instrn_serverAdapterA_cnt;
  wire [2 : 0] rg_state_of_branch_instrn_serverAdapterA_cnt$D_IN;
  wire rg_state_of_branch_instrn_serverAdapterA_cnt$EN;

  // register rg_state_of_branch_instrn_serverAdapterA_s1
  reg [1 : 0] rg_state_of_branch_instrn_serverAdapterA_s1;
  wire [1 : 0] rg_state_of_branch_instrn_serverAdapterA_s1$D_IN;
  wire rg_state_of_branch_instrn_serverAdapterA_s1$EN;

  // register rg_state_of_branch_instrn_serverAdapterB_cnt
  reg [2 : 0] rg_state_of_branch_instrn_serverAdapterB_cnt;
  wire [2 : 0] rg_state_of_branch_instrn_serverAdapterB_cnt$D_IN;
  wire rg_state_of_branch_instrn_serverAdapterB_cnt$EN;

  // register rg_state_of_branch_instrn_serverAdapterB_s1
  reg [1 : 0] rg_state_of_branch_instrn_serverAdapterB_s1;
  wire [1 : 0] rg_state_of_branch_instrn_serverAdapterB_s1$D_IN;
  wire rg_state_of_branch_instrn_serverAdapterB_s1$EN;

  // register rg_tag_serverAdapterA_cnt
  reg [2 : 0] rg_tag_serverAdapterA_cnt;
  wire [2 : 0] rg_tag_serverAdapterA_cnt$D_IN;
  wire rg_tag_serverAdapterA_cnt$EN;

  // register rg_tag_serverAdapterA_s1
  reg [1 : 0] rg_tag_serverAdapterA_s1;
  wire [1 : 0] rg_tag_serverAdapterA_s1$D_IN;
  wire rg_tag_serverAdapterA_s1$EN;

  // register rg_tag_serverAdapterB_cnt
  reg [2 : 0] rg_tag_serverAdapterB_cnt;
  wire [2 : 0] rg_tag_serverAdapterB_cnt$D_IN;
  wire rg_tag_serverAdapterB_cnt$EN;

  // register rg_tag_serverAdapterB_s1
  reg [1 : 0] rg_tag_serverAdapterB_s1;
  wire [1 : 0] rg_tag_serverAdapterB_s1$D_IN;
  wire rg_tag_serverAdapterB_s1$EN;

  // register rg_target_addr_serverAdapterA_cnt
  reg [2 : 0] rg_target_addr_serverAdapterA_cnt;
  wire [2 : 0] rg_target_addr_serverAdapterA_cnt$D_IN;
  wire rg_target_addr_serverAdapterA_cnt$EN;

  // register rg_target_addr_serverAdapterA_s1
  reg [1 : 0] rg_target_addr_serverAdapterA_s1;
  wire [1 : 0] rg_target_addr_serverAdapterA_s1$D_IN;
  wire rg_target_addr_serverAdapterA_s1$EN;

  // register rg_target_addr_serverAdapterB_cnt
  reg [2 : 0] rg_target_addr_serverAdapterB_cnt;
  wire [2 : 0] rg_target_addr_serverAdapterB_cnt$D_IN;
  wire rg_target_addr_serverAdapterB_cnt$EN;

  // register rg_target_addr_serverAdapterB_s1
  reg [1 : 0] rg_target_addr_serverAdapterB_s1;
  wire [1 : 0] rg_target_addr_serverAdapterB_s1$D_IN;
  wire rg_target_addr_serverAdapterB_s1$EN;

  // register rg_training_addr
  reg [31 : 0] rg_training_addr;
  wire [31 : 0] rg_training_addr$D_IN;
  wire rg_training_addr$EN;

  // register rg_training_fire
  reg rg_training_fire;
  wire rg_training_fire$D_IN, rg_training_fire$EN;

  // register rg_training_index
  reg [7 : 0] rg_training_index;
  wire [7 : 0] rg_training_index$D_IN;
  wire rg_training_index$EN;

  // register rg_training_pred
  reg rg_training_pred;
  wire rg_training_pred$D_IN, rg_training_pred$EN;

  // register rg_training_tag
  reg [23 : 0] rg_training_tag;
  wire [23 : 0] rg_training_tag$D_IN;
  wire rg_training_tag$EN;

  // register rg_valid_or_not_serverAdapterA_cnt
  reg [2 : 0] rg_valid_or_not_serverAdapterA_cnt;
  wire [2 : 0] rg_valid_or_not_serverAdapterA_cnt$D_IN;
  wire rg_valid_or_not_serverAdapterA_cnt$EN;

  // register rg_valid_or_not_serverAdapterA_s1
  reg [1 : 0] rg_valid_or_not_serverAdapterA_s1;
  wire [1 : 0] rg_valid_or_not_serverAdapterA_s1$D_IN;
  wire rg_valid_or_not_serverAdapterA_s1$EN;

  // register rg_valid_or_not_serverAdapterB_cnt
  reg [2 : 0] rg_valid_or_not_serverAdapterB_cnt;
  wire [2 : 0] rg_valid_or_not_serverAdapterB_cnt$D_IN;
  wire rg_valid_or_not_serverAdapterB_cnt$EN;

  // register rg_valid_or_not_serverAdapterB_s1
  reg [1 : 0] rg_valid_or_not_serverAdapterB_s1;
  wire [1 : 0] rg_valid_or_not_serverAdapterB_s1$D_IN;
  wire rg_valid_or_not_serverAdapterB_s1$EN;

  // register wr_fire_me
  reg wr_fire_me;
  wire wr_fire_me$D_IN, wr_fire_me$EN;

  // ports of submodule rg_state_of_branch_instrn_memory
  reg [7 : 0] rg_state_of_branch_instrn_memory$ADDRA;
  reg [1 : 0] rg_state_of_branch_instrn_memory$DIA;
  wire [7 : 0] rg_state_of_branch_instrn_memory$ADDRB;
  wire [1 : 0] rg_state_of_branch_instrn_memory$DIB,
	       rg_state_of_branch_instrn_memory$DOA,
	       rg_state_of_branch_instrn_memory$DOB;
  wire rg_state_of_branch_instrn_memory$ENA,
       rg_state_of_branch_instrn_memory$ENB,
       rg_state_of_branch_instrn_memory$WEA,
       rg_state_of_branch_instrn_memory$WEB;

  // ports of submodule rg_state_of_branch_instrn_serverAdapterA_outDataCore
  wire [1 : 0] rg_state_of_branch_instrn_serverAdapterA_outDataCore$D_IN,
	       rg_state_of_branch_instrn_serverAdapterA_outDataCore$D_OUT;
  wire rg_state_of_branch_instrn_serverAdapterA_outDataCore$CLR,
       rg_state_of_branch_instrn_serverAdapterA_outDataCore$DEQ,
       rg_state_of_branch_instrn_serverAdapterA_outDataCore$EMPTY_N,
       rg_state_of_branch_instrn_serverAdapterA_outDataCore$ENQ,
       rg_state_of_branch_instrn_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule rg_state_of_branch_instrn_serverAdapterB_outDataCore
  wire [1 : 0] rg_state_of_branch_instrn_serverAdapterB_outDataCore$D_IN,
	       rg_state_of_branch_instrn_serverAdapterB_outDataCore$D_OUT;
  wire rg_state_of_branch_instrn_serverAdapterB_outDataCore$CLR,
       rg_state_of_branch_instrn_serverAdapterB_outDataCore$DEQ,
       rg_state_of_branch_instrn_serverAdapterB_outDataCore$EMPTY_N,
       rg_state_of_branch_instrn_serverAdapterB_outDataCore$ENQ,
       rg_state_of_branch_instrn_serverAdapterB_outDataCore$FULL_N;

  // ports of submodule rg_tag_memory
  reg [7 : 0] rg_tag_memory$ADDRA;
  wire [23 : 0] rg_tag_memory$DIA,
		rg_tag_memory$DIB,
		rg_tag_memory$DOA,
		rg_tag_memory$DOB;
  wire [7 : 0] rg_tag_memory$ADDRB;
  wire rg_tag_memory$ENA,
       rg_tag_memory$ENB,
       rg_tag_memory$WEA,
       rg_tag_memory$WEB;

  // ports of submodule rg_tag_serverAdapterA_outDataCore
  wire [23 : 0] rg_tag_serverAdapterA_outDataCore$D_IN,
		rg_tag_serverAdapterA_outDataCore$D_OUT;
  wire rg_tag_serverAdapterA_outDataCore$CLR,
       rg_tag_serverAdapterA_outDataCore$DEQ,
       rg_tag_serverAdapterA_outDataCore$EMPTY_N,
       rg_tag_serverAdapterA_outDataCore$ENQ,
       rg_tag_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule rg_tag_serverAdapterB_outDataCore
  wire [23 : 0] rg_tag_serverAdapterB_outDataCore$D_IN,
		rg_tag_serverAdapterB_outDataCore$D_OUT;
  wire rg_tag_serverAdapterB_outDataCore$CLR,
       rg_tag_serverAdapterB_outDataCore$DEQ,
       rg_tag_serverAdapterB_outDataCore$EMPTY_N,
       rg_tag_serverAdapterB_outDataCore$ENQ,
       rg_tag_serverAdapterB_outDataCore$FULL_N;

  // ports of submodule rg_target_addr_memory
  wire [31 : 0] rg_target_addr_memory$DIA,
		rg_target_addr_memory$DIB,
		rg_target_addr_memory$DOA,
		rg_target_addr_memory$DOB;
  wire [7 : 0] rg_target_addr_memory$ADDRA, rg_target_addr_memory$ADDRB;
  wire rg_target_addr_memory$ENA,
       rg_target_addr_memory$ENB,
       rg_target_addr_memory$WEA,
       rg_target_addr_memory$WEB;

  // ports of submodule rg_target_addr_serverAdapterA_outDataCore
  wire [31 : 0] rg_target_addr_serverAdapterA_outDataCore$D_IN;
  wire rg_target_addr_serverAdapterA_outDataCore$CLR,
       rg_target_addr_serverAdapterA_outDataCore$DEQ,
       rg_target_addr_serverAdapterA_outDataCore$EMPTY_N,
       rg_target_addr_serverAdapterA_outDataCore$ENQ,
       rg_target_addr_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule rg_target_addr_serverAdapterB_outDataCore
  wire [31 : 0] rg_target_addr_serverAdapterB_outDataCore$D_IN,
		rg_target_addr_serverAdapterB_outDataCore$D_OUT;
  wire rg_target_addr_serverAdapterB_outDataCore$CLR,
       rg_target_addr_serverAdapterB_outDataCore$DEQ,
       rg_target_addr_serverAdapterB_outDataCore$EMPTY_N,
       rg_target_addr_serverAdapterB_outDataCore$ENQ,
       rg_target_addr_serverAdapterB_outDataCore$FULL_N;

  // ports of submodule rg_valid_or_not_memory
  wire [7 : 0] rg_valid_or_not_memory$ADDRA, rg_valid_or_not_memory$ADDRB;
  wire rg_valid_or_not_memory$DIA,
       rg_valid_or_not_memory$DIB,
       rg_valid_or_not_memory$DOA,
       rg_valid_or_not_memory$DOB,
       rg_valid_or_not_memory$ENA,
       rg_valid_or_not_memory$ENB,
       rg_valid_or_not_memory$WEA,
       rg_valid_or_not_memory$WEB;

  // ports of submodule rg_valid_or_not_serverAdapterA_outDataCore
  wire rg_valid_or_not_serverAdapterA_outDataCore$CLR,
       rg_valid_or_not_serverAdapterA_outDataCore$DEQ,
       rg_valid_or_not_serverAdapterA_outDataCore$D_IN,
       rg_valid_or_not_serverAdapterA_outDataCore$EMPTY_N,
       rg_valid_or_not_serverAdapterA_outDataCore$ENQ,
       rg_valid_or_not_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule rg_valid_or_not_serverAdapterB_outDataCore
  wire rg_valid_or_not_serverAdapterB_outDataCore$CLR,
       rg_valid_or_not_serverAdapterB_outDataCore$DEQ,
       rg_valid_or_not_serverAdapterB_outDataCore$D_IN,
       rg_valid_or_not_serverAdapterB_outDataCore$D_OUT,
       rg_valid_or_not_serverAdapterB_outDataCore$EMPTY_N,
       rg_valid_or_not_serverAdapterB_outDataCore$ENQ,
       rg_valid_or_not_serverAdapterB_outDataCore$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_flush_entire_pipe,
       CAN_FIRE_RL_initialize_bp,
       CAN_FIRE_RL_rg_fire_once__dreg_update,
       CAN_FIRE_RL_rg_prediction_request,
       CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_cnt_finalAdd,
       CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_moveToOutFIFO,
       CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_outData_deqOnly,
       CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_outData_enqAndDeq,
       CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_outData_enqOnly,
       CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_outData_setFirstCore,
       CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_outData_setFirstEnq,
       CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_overRun,
       CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_s1__dreg_update,
       CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_stageReadResponseAlways,
       CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_cnt_finalAdd,
       CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_moveToOutFIFO,
       CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_outData_deqOnly,
       CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_outData_enqAndDeq,
       CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_outData_enqOnly,
       CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_outData_setFirstCore,
       CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_outData_setFirstEnq,
       CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_overRun,
       CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_s1__dreg_update,
       CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_stageReadResponseAlways,
       CAN_FIRE_RL_rg_tag_serverAdapterA_cnt_finalAdd,
       CAN_FIRE_RL_rg_tag_serverAdapterA_moveToOutFIFO,
       CAN_FIRE_RL_rg_tag_serverAdapterA_outData_deqOnly,
       CAN_FIRE_RL_rg_tag_serverAdapterA_outData_enqAndDeq,
       CAN_FIRE_RL_rg_tag_serverAdapterA_outData_enqOnly,
       CAN_FIRE_RL_rg_tag_serverAdapterA_outData_setFirstCore,
       CAN_FIRE_RL_rg_tag_serverAdapterA_outData_setFirstEnq,
       CAN_FIRE_RL_rg_tag_serverAdapterA_overRun,
       CAN_FIRE_RL_rg_tag_serverAdapterA_s1__dreg_update,
       CAN_FIRE_RL_rg_tag_serverAdapterA_stageReadResponseAlways,
       CAN_FIRE_RL_rg_tag_serverAdapterB_cnt_finalAdd,
       CAN_FIRE_RL_rg_tag_serverAdapterB_moveToOutFIFO,
       CAN_FIRE_RL_rg_tag_serverAdapterB_outData_deqOnly,
       CAN_FIRE_RL_rg_tag_serverAdapterB_outData_enqAndDeq,
       CAN_FIRE_RL_rg_tag_serverAdapterB_outData_enqOnly,
       CAN_FIRE_RL_rg_tag_serverAdapterB_outData_setFirstCore,
       CAN_FIRE_RL_rg_tag_serverAdapterB_outData_setFirstEnq,
       CAN_FIRE_RL_rg_tag_serverAdapterB_overRun,
       CAN_FIRE_RL_rg_tag_serverAdapterB_s1__dreg_update,
       CAN_FIRE_RL_rg_tag_serverAdapterB_stageReadResponseAlways,
       CAN_FIRE_RL_rg_target_addr_serverAdapterA_cnt_finalAdd,
       CAN_FIRE_RL_rg_target_addr_serverAdapterA_moveToOutFIFO,
       CAN_FIRE_RL_rg_target_addr_serverAdapterA_outData_deqOnly,
       CAN_FIRE_RL_rg_target_addr_serverAdapterA_outData_enqAndDeq,
       CAN_FIRE_RL_rg_target_addr_serverAdapterA_outData_enqOnly,
       CAN_FIRE_RL_rg_target_addr_serverAdapterA_outData_setFirstCore,
       CAN_FIRE_RL_rg_target_addr_serverAdapterA_outData_setFirstEnq,
       CAN_FIRE_RL_rg_target_addr_serverAdapterA_overRun,
       CAN_FIRE_RL_rg_target_addr_serverAdapterA_s1__dreg_update,
       CAN_FIRE_RL_rg_target_addr_serverAdapterA_stageReadResponseAlways,
       CAN_FIRE_RL_rg_target_addr_serverAdapterB_cnt_finalAdd,
       CAN_FIRE_RL_rg_target_addr_serverAdapterB_moveToOutFIFO,
       CAN_FIRE_RL_rg_target_addr_serverAdapterB_outData_deqOnly,
       CAN_FIRE_RL_rg_target_addr_serverAdapterB_outData_enqAndDeq,
       CAN_FIRE_RL_rg_target_addr_serverAdapterB_outData_enqOnly,
       CAN_FIRE_RL_rg_target_addr_serverAdapterB_outData_setFirstCore,
       CAN_FIRE_RL_rg_target_addr_serverAdapterB_outData_setFirstEnq,
       CAN_FIRE_RL_rg_target_addr_serverAdapterB_overRun,
       CAN_FIRE_RL_rg_target_addr_serverAdapterB_s1__dreg_update,
       CAN_FIRE_RL_rg_target_addr_serverAdapterB_stageReadResponseAlways,
       CAN_FIRE_RL_rg_training_fire__dreg_update,
       CAN_FIRE_RL_rg_valid_or_not_serverAdapterA_cnt_finalAdd,
       CAN_FIRE_RL_rg_valid_or_not_serverAdapterA_moveToOutFIFO,
       CAN_FIRE_RL_rg_valid_or_not_serverAdapterA_outData_deqOnly,
       CAN_FIRE_RL_rg_valid_or_not_serverAdapterA_outData_enqAndDeq,
       CAN_FIRE_RL_rg_valid_or_not_serverAdapterA_outData_enqOnly,
       CAN_FIRE_RL_rg_valid_or_not_serverAdapterA_outData_setFirstCore,
       CAN_FIRE_RL_rg_valid_or_not_serverAdapterA_outData_setFirstEnq,
       CAN_FIRE_RL_rg_valid_or_not_serverAdapterA_overRun,
       CAN_FIRE_RL_rg_valid_or_not_serverAdapterA_s1__dreg_update,
       CAN_FIRE_RL_rg_valid_or_not_serverAdapterA_stageReadResponseAlways,
       CAN_FIRE_RL_rg_valid_or_not_serverAdapterB_cnt_finalAdd,
       CAN_FIRE_RL_rg_valid_or_not_serverAdapterB_moveToOutFIFO,
       CAN_FIRE_RL_rg_valid_or_not_serverAdapterB_outData_deqOnly,
       CAN_FIRE_RL_rg_valid_or_not_serverAdapterB_outData_enqAndDeq,
       CAN_FIRE_RL_rg_valid_or_not_serverAdapterB_outData_enqOnly,
       CAN_FIRE_RL_rg_valid_or_not_serverAdapterB_outData_setFirstCore,
       CAN_FIRE_RL_rg_valid_or_not_serverAdapterB_outData_setFirstEnq,
       CAN_FIRE_RL_rg_valid_or_not_serverAdapterB_overRun,
       CAN_FIRE_RL_rg_valid_or_not_serverAdapterB_s1__dreg_update,
       CAN_FIRE_RL_rg_valid_or_not_serverAdapterB_stageReadResponseAlways,
       CAN_FIRE_RL_rl_prediction_output,
       CAN_FIRE_RL_rl_training_request,
       CAN_FIRE_RL_rl_training_response,
       CAN_FIRE__flush,
       CAN_FIRE__training,
       CAN_FIRE_deq_fifo,
       CAN_FIRE_send_output_,
       WILL_FIRE_RL_flush_entire_pipe,
       WILL_FIRE_RL_initialize_bp,
       WILL_FIRE_RL_rg_fire_once__dreg_update,
       WILL_FIRE_RL_rg_prediction_request,
       WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_cnt_finalAdd,
       WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_moveToOutFIFO,
       WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_outData_deqOnly,
       WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_outData_enqAndDeq,
       WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_outData_enqOnly,
       WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_outData_setFirstCore,
       WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_outData_setFirstEnq,
       WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_overRun,
       WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_s1__dreg_update,
       WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_stageReadResponseAlways,
       WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_cnt_finalAdd,
       WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_moveToOutFIFO,
       WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_outData_deqOnly,
       WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_outData_enqOnly,
       WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_outData_setFirstCore,
       WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_outData_setFirstEnq,
       WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_overRun,
       WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_s1__dreg_update,
       WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_stageReadResponseAlways,
       WILL_FIRE_RL_rg_tag_serverAdapterA_cnt_finalAdd,
       WILL_FIRE_RL_rg_tag_serverAdapterA_moveToOutFIFO,
       WILL_FIRE_RL_rg_tag_serverAdapterA_outData_deqOnly,
       WILL_FIRE_RL_rg_tag_serverAdapterA_outData_enqAndDeq,
       WILL_FIRE_RL_rg_tag_serverAdapterA_outData_enqOnly,
       WILL_FIRE_RL_rg_tag_serverAdapterA_outData_setFirstCore,
       WILL_FIRE_RL_rg_tag_serverAdapterA_outData_setFirstEnq,
       WILL_FIRE_RL_rg_tag_serverAdapterA_overRun,
       WILL_FIRE_RL_rg_tag_serverAdapterA_s1__dreg_update,
       WILL_FIRE_RL_rg_tag_serverAdapterA_stageReadResponseAlways,
       WILL_FIRE_RL_rg_tag_serverAdapterB_cnt_finalAdd,
       WILL_FIRE_RL_rg_tag_serverAdapterB_moveToOutFIFO,
       WILL_FIRE_RL_rg_tag_serverAdapterB_outData_deqOnly,
       WILL_FIRE_RL_rg_tag_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_rg_tag_serverAdapterB_outData_enqOnly,
       WILL_FIRE_RL_rg_tag_serverAdapterB_outData_setFirstCore,
       WILL_FIRE_RL_rg_tag_serverAdapterB_outData_setFirstEnq,
       WILL_FIRE_RL_rg_tag_serverAdapterB_overRun,
       WILL_FIRE_RL_rg_tag_serverAdapterB_s1__dreg_update,
       WILL_FIRE_RL_rg_tag_serverAdapterB_stageReadResponseAlways,
       WILL_FIRE_RL_rg_target_addr_serverAdapterA_cnt_finalAdd,
       WILL_FIRE_RL_rg_target_addr_serverAdapterA_moveToOutFIFO,
       WILL_FIRE_RL_rg_target_addr_serverAdapterA_outData_deqOnly,
       WILL_FIRE_RL_rg_target_addr_serverAdapterA_outData_enqAndDeq,
       WILL_FIRE_RL_rg_target_addr_serverAdapterA_outData_enqOnly,
       WILL_FIRE_RL_rg_target_addr_serverAdapterA_outData_setFirstCore,
       WILL_FIRE_RL_rg_target_addr_serverAdapterA_outData_setFirstEnq,
       WILL_FIRE_RL_rg_target_addr_serverAdapterA_overRun,
       WILL_FIRE_RL_rg_target_addr_serverAdapterA_s1__dreg_update,
       WILL_FIRE_RL_rg_target_addr_serverAdapterA_stageReadResponseAlways,
       WILL_FIRE_RL_rg_target_addr_serverAdapterB_cnt_finalAdd,
       WILL_FIRE_RL_rg_target_addr_serverAdapterB_moveToOutFIFO,
       WILL_FIRE_RL_rg_target_addr_serverAdapterB_outData_deqOnly,
       WILL_FIRE_RL_rg_target_addr_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_rg_target_addr_serverAdapterB_outData_enqOnly,
       WILL_FIRE_RL_rg_target_addr_serverAdapterB_outData_setFirstCore,
       WILL_FIRE_RL_rg_target_addr_serverAdapterB_outData_setFirstEnq,
       WILL_FIRE_RL_rg_target_addr_serverAdapterB_overRun,
       WILL_FIRE_RL_rg_target_addr_serverAdapterB_s1__dreg_update,
       WILL_FIRE_RL_rg_target_addr_serverAdapterB_stageReadResponseAlways,
       WILL_FIRE_RL_rg_training_fire__dreg_update,
       WILL_FIRE_RL_rg_valid_or_not_serverAdapterA_cnt_finalAdd,
       WILL_FIRE_RL_rg_valid_or_not_serverAdapterA_moveToOutFIFO,
       WILL_FIRE_RL_rg_valid_or_not_serverAdapterA_outData_deqOnly,
       WILL_FIRE_RL_rg_valid_or_not_serverAdapterA_outData_enqAndDeq,
       WILL_FIRE_RL_rg_valid_or_not_serverAdapterA_outData_enqOnly,
       WILL_FIRE_RL_rg_valid_or_not_serverAdapterA_outData_setFirstCore,
       WILL_FIRE_RL_rg_valid_or_not_serverAdapterA_outData_setFirstEnq,
       WILL_FIRE_RL_rg_valid_or_not_serverAdapterA_overRun,
       WILL_FIRE_RL_rg_valid_or_not_serverAdapterA_s1__dreg_update,
       WILL_FIRE_RL_rg_valid_or_not_serverAdapterA_stageReadResponseAlways,
       WILL_FIRE_RL_rg_valid_or_not_serverAdapterB_cnt_finalAdd,
       WILL_FIRE_RL_rg_valid_or_not_serverAdapterB_moveToOutFIFO,
       WILL_FIRE_RL_rg_valid_or_not_serverAdapterB_outData_deqOnly,
       WILL_FIRE_RL_rg_valid_or_not_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_rg_valid_or_not_serverAdapterB_outData_enqOnly,
       WILL_FIRE_RL_rg_valid_or_not_serverAdapterB_outData_setFirstCore,
       WILL_FIRE_RL_rg_valid_or_not_serverAdapterB_outData_setFirstEnq,
       WILL_FIRE_RL_rg_valid_or_not_serverAdapterB_overRun,
       WILL_FIRE_RL_rg_valid_or_not_serverAdapterB_s1__dreg_update,
       WILL_FIRE_RL_rg_valid_or_not_serverAdapterB_stageReadResponseAlways,
       WILL_FIRE_RL_rl_prediction_output,
       WILL_FIRE_RL_rl_training_request,
       WILL_FIRE_RL_rl_training_response,
       WILL_FIRE__flush,
       WILL_FIRE__training,
       WILL_FIRE_deq_fifo,
       WILL_FIRE_send_output_;

  // inputs to muxes for submodule ports
  wire [31 : 0] MUX_rg_currentpc_$write_1__VAL_1;
  wire [1 : 0] MUX_rg_state_of_branch_instrn_memory$a_put_3__VAL_1,
	       MUX_rg_state_of_branch_instrn_serverAdapterB_s1_1$wset_1__VAL_1;
  wire MUX_rg_current_prediction$write_1__VAL_1,
       MUX_rg_fire_once_1$wset_1__SEL_2,
       MUX_rg_state_of_branch_instrn_memory$a_put_1__SEL_1,
       MUX_rg_tag_memory$a_put_1__SEL_1,
       MUX_rg_target_addr_memory$a_put_1__SEL_1;

  // remaining internal signals
  reg [63 : 0] v__h14170,
	       v__h14300,
	       v__h14386,
	       v__h14410,
	       v__h14467,
	       v__h15383,
	       v__h15518,
	       v__h16390;
  wire [31 : 0] IF_rg_valid_or_not_serverAdapterB_outData_outD_ETC___d598,
		IF_wr_currentpc__whas__86_THEN_wr_currentpc__w_ETC___d488,
		actual_increment_addr__h15318,
		v__h15368;
  wire [23 : 0] v__h13673, v__h15233;
  wire [2 : 0] rg_state_of_branch_instrn_serverAdapterA_cnt_6_ETC___d32,
	       rg_state_of_branch_instrn_serverAdapterB_cnt_3_ETC___d89,
	       rg_tag_serverAdapterA_cnt_68_PLUS_IF_rg_tag_se_ETC___d374,
	       rg_tag_serverAdapterB_cnt_25_PLUS_IF_rg_tag_se_ETC___d431,
	       rg_target_addr_serverAdapterB_cnt_97_PLUS_IF_r_ETC___d203,
	       rg_valid_or_not_serverAdapterB_cnt_11_PLUS_IF__ETC___d317;
  wire [1 : 0] IF_NOT_rg_training_pred_12_13_AND_NOT_rg_state_ETC___d529,
	       ab__h10433,
	       ab__h1827,
	       ab__h4694,
	       v__h15145,
	       x3__h14040,
	       x3__h14343;
  wire rg_state_of_branch_instrn_serverAdapterA_cnt_6_ETC___d463,
       rg_state_of_branch_instrn_serverAdapterB_cnt_3_ETC___d546,
       rg_state_of_branch_instrn_serverAdapterB_outDa_ETC___d590,
       rg_tag_serverAdapterA_cnt_68_SLT_2___d466,
       rg_tag_serverAdapterA_outData_outData_wget__22_ETC___d524,
       rg_tag_serverAdapterA_outData_outData_whas__99_ETC___d506,
       rg_tag_serverAdapterB_cnt_25_SLT_2___d545,
       rg_tag_serverAdapterB_outDataCore_notEmpty__01_ETC___d573,
       rg_tag_serverAdapterB_outData_outData_wget__93_ETC___d594,
       rg_target_addr_serverAdapterA_cnt_40_SLT_2___d464,
       rg_target_addr_serverAdapterB_cnt_97_SLT_2___d543,
       rg_target_addr_serverAdapterB_outDataCore_notE_ETC___d577,
       rg_valid_or_not_serverAdapterA_cnt_54_SLT_2___d465,
       rg_valid_or_not_serverAdapterB_cnt_11_SLT_2___d544;

  // action method _training
  assign RDY__training = 1'd1 ;
  assign CAN_FIRE__training = 1'd1 ;
  assign WILL_FIRE__training = EN__training ;

  // actionvalue method send_output_
  assign send_output_ = { rg_currentpc_, rg_current_prediction } ;
  assign RDY_send_output_ = !rg_initialize && !rg_fire_once ;
  assign CAN_FIRE_send_output_ = !rg_initialize && !rg_fire_once ;
  assign WILL_FIRE_send_output_ = EN_send_output_ ;

  // action method deq_fifo
  assign RDY_deq_fifo = 1'd1 ;
  assign CAN_FIRE_deq_fifo = 1'd1 ;
  assign WILL_FIRE_deq_fifo = EN_deq_fifo ;

  // action method _flush
  assign RDY__flush = 1'd1 ;
  assign CAN_FIRE__flush = 1'd1 ;
  assign WILL_FIRE__flush = EN__flush ;

  // value method pred_type
  assign pred_type = rg_current_prediction ;
  assign RDY_pred_type = 1'd1 ;

  // submodule rg_state_of_branch_instrn_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd8),
	  .DATA_WIDTH(32'd2),
	  .MEMSIZE(9'd256)) rg_state_of_branch_instrn_memory(.CLKA(CLK),
							     .CLKB(CLK),
							     .ADDRA(rg_state_of_branch_instrn_memory$ADDRA),
							     .ADDRB(rg_state_of_branch_instrn_memory$ADDRB),
							     .DIA(rg_state_of_branch_instrn_memory$DIA),
							     .DIB(rg_state_of_branch_instrn_memory$DIB),
							     .WEA(rg_state_of_branch_instrn_memory$WEA),
							     .WEB(rg_state_of_branch_instrn_memory$WEB),
							     .ENA(rg_state_of_branch_instrn_memory$ENA),
							     .ENB(rg_state_of_branch_instrn_memory$ENB),
							     .DOA(rg_state_of_branch_instrn_memory$DOA),
							     .DOB(rg_state_of_branch_instrn_memory$DOB));

  // submodule rg_state_of_branch_instrn_serverAdapterA_outDataCore
  FIFO2 #(.width(32'd2),
	  .guarded(32'd1)) rg_state_of_branch_instrn_serverAdapterA_outDataCore(.RST(RST_N),
										.CLK(CLK),
										.D_IN(rg_state_of_branch_instrn_serverAdapterA_outDataCore$D_IN),
										.ENQ(rg_state_of_branch_instrn_serverAdapterA_outDataCore$ENQ),
										.DEQ(rg_state_of_branch_instrn_serverAdapterA_outDataCore$DEQ),
										.CLR(rg_state_of_branch_instrn_serverAdapterA_outDataCore$CLR),
										.D_OUT(rg_state_of_branch_instrn_serverAdapterA_outDataCore$D_OUT),
										.FULL_N(rg_state_of_branch_instrn_serverAdapterA_outDataCore$FULL_N),
										.EMPTY_N(rg_state_of_branch_instrn_serverAdapterA_outDataCore$EMPTY_N));

  // submodule rg_state_of_branch_instrn_serverAdapterB_outDataCore
  FIFO2 #(.width(32'd2),
	  .guarded(32'd1)) rg_state_of_branch_instrn_serverAdapterB_outDataCore(.RST(RST_N),
										.CLK(CLK),
										.D_IN(rg_state_of_branch_instrn_serverAdapterB_outDataCore$D_IN),
										.ENQ(rg_state_of_branch_instrn_serverAdapterB_outDataCore$ENQ),
										.DEQ(rg_state_of_branch_instrn_serverAdapterB_outDataCore$DEQ),
										.CLR(rg_state_of_branch_instrn_serverAdapterB_outDataCore$CLR),
										.D_OUT(rg_state_of_branch_instrn_serverAdapterB_outDataCore$D_OUT),
										.FULL_N(rg_state_of_branch_instrn_serverAdapterB_outDataCore$FULL_N),
										.EMPTY_N(rg_state_of_branch_instrn_serverAdapterB_outDataCore$EMPTY_N));

  // submodule rg_tag_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd8),
	  .DATA_WIDTH(32'd24),
	  .MEMSIZE(9'd256)) rg_tag_memory(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(rg_tag_memory$ADDRA),
					  .ADDRB(rg_tag_memory$ADDRB),
					  .DIA(rg_tag_memory$DIA),
					  .DIB(rg_tag_memory$DIB),
					  .WEA(rg_tag_memory$WEA),
					  .WEB(rg_tag_memory$WEB),
					  .ENA(rg_tag_memory$ENA),
					  .ENB(rg_tag_memory$ENB),
					  .DOA(rg_tag_memory$DOA),
					  .DOB(rg_tag_memory$DOB));

  // submodule rg_tag_serverAdapterA_outDataCore
  FIFO2 #(.width(32'd24),
	  .guarded(32'd1)) rg_tag_serverAdapterA_outDataCore(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(rg_tag_serverAdapterA_outDataCore$D_IN),
							     .ENQ(rg_tag_serverAdapterA_outDataCore$ENQ),
							     .DEQ(rg_tag_serverAdapterA_outDataCore$DEQ),
							     .CLR(rg_tag_serverAdapterA_outDataCore$CLR),
							     .D_OUT(rg_tag_serverAdapterA_outDataCore$D_OUT),
							     .FULL_N(rg_tag_serverAdapterA_outDataCore$FULL_N),
							     .EMPTY_N(rg_tag_serverAdapterA_outDataCore$EMPTY_N));

  // submodule rg_tag_serverAdapterB_outDataCore
  FIFO2 #(.width(32'd24),
	  .guarded(32'd1)) rg_tag_serverAdapterB_outDataCore(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(rg_tag_serverAdapterB_outDataCore$D_IN),
							     .ENQ(rg_tag_serverAdapterB_outDataCore$ENQ),
							     .DEQ(rg_tag_serverAdapterB_outDataCore$DEQ),
							     .CLR(rg_tag_serverAdapterB_outDataCore$CLR),
							     .D_OUT(rg_tag_serverAdapterB_outDataCore$D_OUT),
							     .FULL_N(rg_tag_serverAdapterB_outDataCore$FULL_N),
							     .EMPTY_N(rg_tag_serverAdapterB_outDataCore$EMPTY_N));

  // submodule rg_target_addr_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd8),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(9'd256)) rg_target_addr_memory(.CLKA(CLK),
						  .CLKB(CLK),
						  .ADDRA(rg_target_addr_memory$ADDRA),
						  .ADDRB(rg_target_addr_memory$ADDRB),
						  .DIA(rg_target_addr_memory$DIA),
						  .DIB(rg_target_addr_memory$DIB),
						  .WEA(rg_target_addr_memory$WEA),
						  .WEB(rg_target_addr_memory$WEB),
						  .ENA(rg_target_addr_memory$ENA),
						  .ENB(rg_target_addr_memory$ENB),
						  .DOA(rg_target_addr_memory$DOA),
						  .DOB(rg_target_addr_memory$DOB));

  // submodule rg_target_addr_serverAdapterA_outDataCore
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) rg_target_addr_serverAdapterA_outDataCore(.RST(RST_N),
								     .CLK(CLK),
								     .D_IN(rg_target_addr_serverAdapterA_outDataCore$D_IN),
								     .ENQ(rg_target_addr_serverAdapterA_outDataCore$ENQ),
								     .DEQ(rg_target_addr_serverAdapterA_outDataCore$DEQ),
								     .CLR(rg_target_addr_serverAdapterA_outDataCore$CLR),
								     .D_OUT(),
								     .FULL_N(rg_target_addr_serverAdapterA_outDataCore$FULL_N),
								     .EMPTY_N(rg_target_addr_serverAdapterA_outDataCore$EMPTY_N));

  // submodule rg_target_addr_serverAdapterB_outDataCore
  FIFO2 #(.width(32'd32),
	  .guarded(32'd1)) rg_target_addr_serverAdapterB_outDataCore(.RST(RST_N),
								     .CLK(CLK),
								     .D_IN(rg_target_addr_serverAdapterB_outDataCore$D_IN),
								     .ENQ(rg_target_addr_serverAdapterB_outDataCore$ENQ),
								     .DEQ(rg_target_addr_serverAdapterB_outDataCore$DEQ),
								     .CLR(rg_target_addr_serverAdapterB_outDataCore$CLR),
								     .D_OUT(rg_target_addr_serverAdapterB_outDataCore$D_OUT),
								     .FULL_N(rg_target_addr_serverAdapterB_outDataCore$FULL_N),
								     .EMPTY_N(rg_target_addr_serverAdapterB_outDataCore$EMPTY_N));

  // submodule rg_valid_or_not_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd8),
	  .DATA_WIDTH(32'd1),
	  .MEMSIZE(9'd256)) rg_valid_or_not_memory(.CLKA(CLK),
						   .CLKB(CLK),
						   .ADDRA(rg_valid_or_not_memory$ADDRA),
						   .ADDRB(rg_valid_or_not_memory$ADDRB),
						   .DIA(rg_valid_or_not_memory$DIA),
						   .DIB(rg_valid_or_not_memory$DIB),
						   .WEA(rg_valid_or_not_memory$WEA),
						   .WEB(rg_valid_or_not_memory$WEB),
						   .ENA(rg_valid_or_not_memory$ENA),
						   .ENB(rg_valid_or_not_memory$ENB),
						   .DOA(rg_valid_or_not_memory$DOA),
						   .DOB(rg_valid_or_not_memory$DOB));

  // submodule rg_valid_or_not_serverAdapterA_outDataCore
  FIFO2 #(.width(32'd1),
	  .guarded(32'd1)) rg_valid_or_not_serverAdapterA_outDataCore(.RST(RST_N),
								      .CLK(CLK),
								      .D_IN(rg_valid_or_not_serverAdapterA_outDataCore$D_IN),
								      .ENQ(rg_valid_or_not_serverAdapterA_outDataCore$ENQ),
								      .DEQ(rg_valid_or_not_serverAdapterA_outDataCore$DEQ),
								      .CLR(rg_valid_or_not_serverAdapterA_outDataCore$CLR),
								      .D_OUT(),
								      .FULL_N(rg_valid_or_not_serverAdapterA_outDataCore$FULL_N),
								      .EMPTY_N(rg_valid_or_not_serverAdapterA_outDataCore$EMPTY_N));

  // submodule rg_valid_or_not_serverAdapterB_outDataCore
  FIFO2 #(.width(32'd1),
	  .guarded(32'd1)) rg_valid_or_not_serverAdapterB_outDataCore(.RST(RST_N),
								      .CLK(CLK),
								      .D_IN(rg_valid_or_not_serverAdapterB_outDataCore$D_IN),
								      .ENQ(rg_valid_or_not_serverAdapterB_outDataCore$ENQ),
								      .DEQ(rg_valid_or_not_serverAdapterB_outDataCore$DEQ),
								      .CLR(rg_valid_or_not_serverAdapterB_outDataCore$CLR),
								      .D_OUT(rg_valid_or_not_serverAdapterB_outDataCore$D_OUT),
								      .FULL_N(rg_valid_or_not_serverAdapterB_outDataCore$FULL_N),
								      .EMPTY_N(rg_valid_or_not_serverAdapterB_outDataCore$EMPTY_N));

  // rule RL_initialize_bp
  assign CAN_FIRE_RL_initialize_bp =
	     rg_state_of_branch_instrn_serverAdapterA_cnt_6_ETC___d463 &&
	     rg_target_addr_serverAdapterA_cnt_40_SLT_2___d464 &&
	     rg_valid_or_not_serverAdapterA_cnt_54_SLT_2___d465 &&
	     rg_tag_serverAdapterA_cnt_68_SLT_2___d466 &&
	     rg_initialize ;
  assign WILL_FIRE_RL_initialize_bp = CAN_FIRE_RL_initialize_bp ;

  // rule RL_rl_training_request
  assign CAN_FIRE_RL_rl_training_request =
	     rg_state_of_branch_instrn_serverAdapterA_cnt_6_ETC___d463 &&
	     rg_tag_serverAdapterA_cnt_68_SLT_2___d466 &&
	     EN__training &&
	     !rg_initialize &&
	     !rg_training_fire ;
  assign WILL_FIRE_RL_rl_training_request = CAN_FIRE_RL_rl_training_request ;

  // rule RL_rg_prediction_request
  assign CAN_FIRE_RL_rg_prediction_request =
	     rg_target_addr_serverAdapterB_cnt_97_SLT_2___d543 &&
	     rg_valid_or_not_serverAdapterB_cnt_11_SLT_2___d544 &&
	     rg_tag_serverAdapterB_cnt_25_SLT_2___d545 &&
	     rg_state_of_branch_instrn_serverAdapterB_cnt_3_ETC___d546 &&
	     !EN__flush &&
	     !rg_initialize &&
	     rg_fire_once ;
  assign WILL_FIRE_RL_rg_prediction_request =
	     CAN_FIRE_RL_rg_prediction_request ;

  // rule RL_rg_state_of_branch_instrn_serverAdapterA_moveToOutFIFO
  assign CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_moveToOutFIFO =
	     rg_state_of_branch_instrn_serverAdapterA_outDataCore$FULL_N &&
	     rg_state_of_branch_instrn_serverAdapterA_s1[1] ;
  assign WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_moveToOutFIFO =
	     CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_moveToOutFIFO ;

  // rule RL_rg_state_of_branch_instrn_serverAdapterA_overRun
  assign CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_overRun =
	     rg_state_of_branch_instrn_serverAdapterA_s1[1] &&
	     !rg_state_of_branch_instrn_serverAdapterA_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_overRun =
	     CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_overRun ;

  // rule RL_rg_state_of_branch_instrn_serverAdapterA_outData_setFirstCore
  assign CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_outData_setFirstCore =
	     rg_state_of_branch_instrn_serverAdapterA_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_outData_setFirstCore =
	     rg_state_of_branch_instrn_serverAdapterA_outDataCore$EMPTY_N ;

  // rule RL_rg_state_of_branch_instrn_serverAdapterA_outData_setFirstEnq
  assign CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_outData_setFirstEnq =
	     !rg_state_of_branch_instrn_serverAdapterA_outDataCore$EMPTY_N &&
	     rg_state_of_branch_instrn_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_outData_setFirstEnq =
	     CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_outData_setFirstEnq ;

  // rule RL_rg_state_of_branch_instrn_serverAdapterB_moveToOutFIFO
  assign CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_moveToOutFIFO =
	     rg_state_of_branch_instrn_serverAdapterB_outDataCore$FULL_N &&
	     rg_state_of_branch_instrn_serverAdapterB_s1[1] ;
  assign WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_moveToOutFIFO =
	     CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_moveToOutFIFO ;

  // rule RL_rg_state_of_branch_instrn_serverAdapterB_overRun
  assign CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_overRun =
	     rg_state_of_branch_instrn_serverAdapterB_s1[1] &&
	     !rg_state_of_branch_instrn_serverAdapterB_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_overRun =
	     CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_overRun ;

  // rule RL_rg_state_of_branch_instrn_serverAdapterB_outData_setFirstCore
  assign CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_outData_setFirstCore =
	     rg_state_of_branch_instrn_serverAdapterB_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_outData_setFirstCore =
	     rg_state_of_branch_instrn_serverAdapterB_outDataCore$EMPTY_N ;

  // rule RL_rg_state_of_branch_instrn_serverAdapterB_outData_setFirstEnq
  assign CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_outData_setFirstEnq =
	     !rg_state_of_branch_instrn_serverAdapterB_outDataCore$EMPTY_N &&
	     rg_state_of_branch_instrn_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_outData_setFirstEnq =
	     CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_outData_setFirstEnq ;

  // rule RL_rg_target_addr_serverAdapterA_moveToOutFIFO
  assign CAN_FIRE_RL_rg_target_addr_serverAdapterA_moveToOutFIFO =
	     rg_target_addr_serverAdapterA_outDataCore$FULL_N &&
	     rg_target_addr_serverAdapterA_s1[1] ;
  assign WILL_FIRE_RL_rg_target_addr_serverAdapterA_moveToOutFIFO =
	     CAN_FIRE_RL_rg_target_addr_serverAdapterA_moveToOutFIFO ;

  // rule RL_rg_target_addr_serverAdapterA_overRun
  assign CAN_FIRE_RL_rg_target_addr_serverAdapterA_overRun =
	     rg_target_addr_serverAdapterA_s1[1] &&
	     !rg_target_addr_serverAdapterA_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_rg_target_addr_serverAdapterA_overRun =
	     CAN_FIRE_RL_rg_target_addr_serverAdapterA_overRun ;

  // rule RL_rg_target_addr_serverAdapterA_outData_setFirstCore
  assign CAN_FIRE_RL_rg_target_addr_serverAdapterA_outData_setFirstCore =
	     rg_target_addr_serverAdapterA_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_rg_target_addr_serverAdapterA_outData_setFirstCore =
	     rg_target_addr_serverAdapterA_outDataCore$EMPTY_N ;

  // rule RL_rg_target_addr_serverAdapterA_outData_setFirstEnq
  assign CAN_FIRE_RL_rg_target_addr_serverAdapterA_outData_setFirstEnq =
	     !rg_target_addr_serverAdapterA_outDataCore$EMPTY_N &&
	     rg_target_addr_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_rg_target_addr_serverAdapterA_outData_setFirstEnq =
	     CAN_FIRE_RL_rg_target_addr_serverAdapterA_outData_setFirstEnq ;

  // rule RL_rg_target_addr_serverAdapterA_outData_enqOnly
  assign CAN_FIRE_RL_rg_target_addr_serverAdapterA_outData_enqOnly =
	     rg_target_addr_serverAdapterA_outDataCore$FULL_N &&
	     rg_target_addr_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_rg_target_addr_serverAdapterA_outData_enqOnly =
	     CAN_FIRE_RL_rg_target_addr_serverAdapterA_outData_enqOnly ;

  // rule RL_rg_target_addr_serverAdapterA_outData_deqOnly
  assign CAN_FIRE_RL_rg_target_addr_serverAdapterA_outData_deqOnly = 1'b0 ;
  assign WILL_FIRE_RL_rg_target_addr_serverAdapterA_outData_deqOnly = 1'b0 ;

  // rule RL_rg_target_addr_serverAdapterA_outData_enqAndDeq
  assign CAN_FIRE_RL_rg_target_addr_serverAdapterA_outData_enqAndDeq = 1'b0 ;
  assign WILL_FIRE_RL_rg_target_addr_serverAdapterA_outData_enqAndDeq = 1'b0 ;

  // rule RL_rg_target_addr_serverAdapterB_moveToOutFIFO
  assign CAN_FIRE_RL_rg_target_addr_serverAdapterB_moveToOutFIFO =
	     rg_target_addr_serverAdapterB_outDataCore$FULL_N &&
	     rg_target_addr_serverAdapterB_s1[1] ;
  assign WILL_FIRE_RL_rg_target_addr_serverAdapterB_moveToOutFIFO =
	     CAN_FIRE_RL_rg_target_addr_serverAdapterB_moveToOutFIFO ;

  // rule RL_rg_target_addr_serverAdapterB_overRun
  assign CAN_FIRE_RL_rg_target_addr_serverAdapterB_overRun =
	     rg_target_addr_serverAdapterB_s1[1] &&
	     !rg_target_addr_serverAdapterB_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_rg_target_addr_serverAdapterB_overRun =
	     CAN_FIRE_RL_rg_target_addr_serverAdapterB_overRun ;

  // rule RL_rg_target_addr_serverAdapterB_outData_setFirstCore
  assign CAN_FIRE_RL_rg_target_addr_serverAdapterB_outData_setFirstCore =
	     rg_target_addr_serverAdapterB_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_rg_target_addr_serverAdapterB_outData_setFirstCore =
	     rg_target_addr_serverAdapterB_outDataCore$EMPTY_N ;

  // rule RL_rg_target_addr_serverAdapterB_outData_setFirstEnq
  assign CAN_FIRE_RL_rg_target_addr_serverAdapterB_outData_setFirstEnq =
	     !rg_target_addr_serverAdapterB_outDataCore$EMPTY_N &&
	     rg_target_addr_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_rg_target_addr_serverAdapterB_outData_setFirstEnq =
	     CAN_FIRE_RL_rg_target_addr_serverAdapterB_outData_setFirstEnq ;

  // rule RL_rg_valid_or_not_serverAdapterA_moveToOutFIFO
  assign CAN_FIRE_RL_rg_valid_or_not_serverAdapterA_moveToOutFIFO =
	     rg_valid_or_not_serverAdapterA_outDataCore$FULL_N &&
	     rg_valid_or_not_serverAdapterA_s1[1] ;
  assign WILL_FIRE_RL_rg_valid_or_not_serverAdapterA_moveToOutFIFO =
	     CAN_FIRE_RL_rg_valid_or_not_serverAdapterA_moveToOutFIFO ;

  // rule RL_rg_valid_or_not_serverAdapterA_overRun
  assign CAN_FIRE_RL_rg_valid_or_not_serverAdapterA_overRun =
	     rg_valid_or_not_serverAdapterA_s1[1] &&
	     !rg_valid_or_not_serverAdapterA_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_rg_valid_or_not_serverAdapterA_overRun =
	     CAN_FIRE_RL_rg_valid_or_not_serverAdapterA_overRun ;

  // rule RL_rg_valid_or_not_serverAdapterA_outData_setFirstCore
  assign CAN_FIRE_RL_rg_valid_or_not_serverAdapterA_outData_setFirstCore =
	     rg_valid_or_not_serverAdapterA_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_rg_valid_or_not_serverAdapterA_outData_setFirstCore =
	     rg_valid_or_not_serverAdapterA_outDataCore$EMPTY_N ;

  // rule RL_rg_valid_or_not_serverAdapterA_outData_setFirstEnq
  assign CAN_FIRE_RL_rg_valid_or_not_serverAdapterA_outData_setFirstEnq =
	     !rg_valid_or_not_serverAdapterA_outDataCore$EMPTY_N &&
	     rg_valid_or_not_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_rg_valid_or_not_serverAdapterA_outData_setFirstEnq =
	     CAN_FIRE_RL_rg_valid_or_not_serverAdapterA_outData_setFirstEnq ;

  // rule RL_rg_valid_or_not_serverAdapterA_outData_enqOnly
  assign CAN_FIRE_RL_rg_valid_or_not_serverAdapterA_outData_enqOnly =
	     rg_valid_or_not_serverAdapterA_outDataCore$FULL_N &&
	     rg_valid_or_not_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_rg_valid_or_not_serverAdapterA_outData_enqOnly =
	     CAN_FIRE_RL_rg_valid_or_not_serverAdapterA_outData_enqOnly ;

  // rule RL_rg_valid_or_not_serverAdapterA_outData_deqOnly
  assign CAN_FIRE_RL_rg_valid_or_not_serverAdapterA_outData_deqOnly = 1'b0 ;
  assign WILL_FIRE_RL_rg_valid_or_not_serverAdapterA_outData_deqOnly = 1'b0 ;

  // rule RL_rg_valid_or_not_serverAdapterA_outData_enqAndDeq
  assign CAN_FIRE_RL_rg_valid_or_not_serverAdapterA_outData_enqAndDeq = 1'b0 ;
  assign WILL_FIRE_RL_rg_valid_or_not_serverAdapterA_outData_enqAndDeq =
	     1'b0 ;

  // rule RL_rg_valid_or_not_serverAdapterB_moveToOutFIFO
  assign CAN_FIRE_RL_rg_valid_or_not_serverAdapterB_moveToOutFIFO =
	     rg_valid_or_not_serverAdapterB_outDataCore$FULL_N &&
	     rg_valid_or_not_serverAdapterB_s1[1] ;
  assign WILL_FIRE_RL_rg_valid_or_not_serverAdapterB_moveToOutFIFO =
	     CAN_FIRE_RL_rg_valid_or_not_serverAdapterB_moveToOutFIFO ;

  // rule RL_rg_valid_or_not_serverAdapterB_overRun
  assign CAN_FIRE_RL_rg_valid_or_not_serverAdapterB_overRun =
	     rg_valid_or_not_serverAdapterB_s1[1] &&
	     !rg_valid_or_not_serverAdapterB_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_rg_valid_or_not_serverAdapterB_overRun =
	     CAN_FIRE_RL_rg_valid_or_not_serverAdapterB_overRun ;

  // rule RL_rg_valid_or_not_serverAdapterB_outData_setFirstCore
  assign CAN_FIRE_RL_rg_valid_or_not_serverAdapterB_outData_setFirstCore =
	     rg_valid_or_not_serverAdapterB_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_rg_valid_or_not_serverAdapterB_outData_setFirstCore =
	     rg_valid_or_not_serverAdapterB_outDataCore$EMPTY_N ;

  // rule RL_rg_valid_or_not_serverAdapterB_outData_setFirstEnq
  assign CAN_FIRE_RL_rg_valid_or_not_serverAdapterB_outData_setFirstEnq =
	     !rg_valid_or_not_serverAdapterB_outDataCore$EMPTY_N &&
	     rg_valid_or_not_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_rg_valid_or_not_serverAdapterB_outData_setFirstEnq =
	     CAN_FIRE_RL_rg_valid_or_not_serverAdapterB_outData_setFirstEnq ;

  // rule RL_rg_tag_serverAdapterA_moveToOutFIFO
  assign CAN_FIRE_RL_rg_tag_serverAdapterA_moveToOutFIFO =
	     rg_tag_serverAdapterA_outDataCore$FULL_N &&
	     rg_tag_serverAdapterA_s1[1] ;
  assign WILL_FIRE_RL_rg_tag_serverAdapterA_moveToOutFIFO =
	     CAN_FIRE_RL_rg_tag_serverAdapterA_moveToOutFIFO ;

  // rule RL_rg_tag_serverAdapterA_overRun
  assign CAN_FIRE_RL_rg_tag_serverAdapterA_overRun =
	     rg_tag_serverAdapterA_s1[1] &&
	     !rg_tag_serverAdapterA_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_rg_tag_serverAdapterA_overRun =
	     CAN_FIRE_RL_rg_tag_serverAdapterA_overRun ;

  // rule RL_rg_tag_serverAdapterA_outData_setFirstCore
  assign CAN_FIRE_RL_rg_tag_serverAdapterA_outData_setFirstCore =
	     rg_tag_serverAdapterA_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_rg_tag_serverAdapterA_outData_setFirstCore =
	     rg_tag_serverAdapterA_outDataCore$EMPTY_N ;

  // rule RL_rg_tag_serverAdapterA_outData_setFirstEnq
  assign CAN_FIRE_RL_rg_tag_serverAdapterA_outData_setFirstEnq =
	     !rg_tag_serverAdapterA_outDataCore$EMPTY_N &&
	     rg_tag_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_rg_tag_serverAdapterA_outData_setFirstEnq =
	     CAN_FIRE_RL_rg_tag_serverAdapterA_outData_setFirstEnq ;

  // rule RL_rl_training_response
  assign CAN_FIRE_RL_rl_training_response =
	     rg_valid_or_not_serverAdapterA_cnt_54_SLT_2___d465 &&
	     (rg_tag_serverAdapterA_outDataCore$EMPTY_N ||
	      rg_tag_serverAdapterA_outData_enqData$whas) &&
	     rg_tag_serverAdapterA_outData_outData_whas__99_ETC___d506 &&
	     rg_training_fire &&
	     !rg_initialize ;
  assign WILL_FIRE_RL_rl_training_response =
	     CAN_FIRE_RL_rl_training_response ;

  // rule RL_rg_state_of_branch_instrn_serverAdapterA_stageReadResponseAlways
  assign CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_stageReadResponseAlways =
	     MUX_rg_state_of_branch_instrn_memory$a_put_1__SEL_1 ||
	     WILL_FIRE_RL_rl_training_request ||
	     WILL_FIRE_RL_initialize_bp ;
  assign WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_stageReadResponseAlways =
	     CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_stageReadResponseAlways ;

  // rule RL_rg_state_of_branch_instrn_serverAdapterA_outData_enqOnly
  assign CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_outData_enqOnly =
	     rg_state_of_branch_instrn_serverAdapterA_outDataCore$FULL_N &&
	     !CAN_FIRE_RL_rl_training_response &&
	     rg_state_of_branch_instrn_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_outData_enqOnly =
	     CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_outData_enqOnly ;

  // rule RL_rg_state_of_branch_instrn_serverAdapterA_outData_deqOnly
  assign CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_outData_deqOnly =
	     rg_state_of_branch_instrn_serverAdapterA_outDataCore$EMPTY_N &&
	     CAN_FIRE_RL_rl_training_response &&
	     !rg_state_of_branch_instrn_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_outData_deqOnly =
	     CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_outData_deqOnly ;

  // rule RL_rg_state_of_branch_instrn_serverAdapterA_outData_enqAndDeq
  assign CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_outData_enqAndDeq =
	     rg_state_of_branch_instrn_serverAdapterA_outDataCore$EMPTY_N &&
	     rg_state_of_branch_instrn_serverAdapterA_outDataCore$FULL_N &&
	     CAN_FIRE_RL_rl_training_response &&
	     rg_state_of_branch_instrn_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_outData_enqAndDeq =
	     CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_outData_enqAndDeq ;

  // rule RL_rg_state_of_branch_instrn_serverAdapterA_cnt_finalAdd
  assign CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_cnt_finalAdd =
	     rg_state_of_branch_instrn_serverAdapterA_cnt_1$whas ||
	     CAN_FIRE_RL_rl_training_response ;
  assign WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_cnt_finalAdd =
	     CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_cnt_finalAdd ;

  // rule RL_rg_state_of_branch_instrn_serverAdapterA_s1__dreg_update
  assign CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_s1__dreg_update =
	     1'd1 ;
  assign WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_s1__dreg_update =
	     1'd1 ;

  // rule RL_rg_target_addr_serverAdapterA_stageReadResponseAlways
  assign CAN_FIRE_RL_rg_target_addr_serverAdapterA_stageReadResponseAlways =
	     MUX_rg_target_addr_memory$a_put_1__SEL_1 ||
	     WILL_FIRE_RL_initialize_bp ;
  assign WILL_FIRE_RL_rg_target_addr_serverAdapterA_stageReadResponseAlways =
	     CAN_FIRE_RL_rg_target_addr_serverAdapterA_stageReadResponseAlways ;

  // rule RL_rg_target_addr_serverAdapterA_cnt_finalAdd
  assign CAN_FIRE_RL_rg_target_addr_serverAdapterA_cnt_finalAdd =
	     rg_target_addr_serverAdapterA_cnt_1$whas ;
  assign WILL_FIRE_RL_rg_target_addr_serverAdapterA_cnt_finalAdd =
	     rg_target_addr_serverAdapterA_cnt_1$whas ;

  // rule RL_rg_target_addr_serverAdapterA_s1__dreg_update
  assign CAN_FIRE_RL_rg_target_addr_serverAdapterA_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_rg_target_addr_serverAdapterA_s1__dreg_update = 1'd1 ;

  // rule RL_rg_valid_or_not_serverAdapterA_stageReadResponseAlways
  assign CAN_FIRE_RL_rg_valid_or_not_serverAdapterA_stageReadResponseAlways =
	     WILL_FIRE_RL_rl_training_response || WILL_FIRE_RL_initialize_bp ;
  assign WILL_FIRE_RL_rg_valid_or_not_serverAdapterA_stageReadResponseAlways =
	     CAN_FIRE_RL_rg_valid_or_not_serverAdapterA_stageReadResponseAlways ;

  // rule RL_rg_valid_or_not_serverAdapterA_cnt_finalAdd
  assign CAN_FIRE_RL_rg_valid_or_not_serverAdapterA_cnt_finalAdd = 1'b0 ;
  assign WILL_FIRE_RL_rg_valid_or_not_serverAdapterA_cnt_finalAdd = 1'b0 ;

  // rule RL_rg_valid_or_not_serverAdapterA_s1__dreg_update
  assign CAN_FIRE_RL_rg_valid_or_not_serverAdapterA_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_rg_valid_or_not_serverAdapterA_s1__dreg_update = 1'd1 ;

  // rule RL_rg_tag_serverAdapterA_stageReadResponseAlways
  assign CAN_FIRE_RL_rg_tag_serverAdapterA_stageReadResponseAlways =
	     MUX_rg_tag_memory$a_put_1__SEL_1 ||
	     WILL_FIRE_RL_rl_training_request ||
	     WILL_FIRE_RL_initialize_bp ;
  assign WILL_FIRE_RL_rg_tag_serverAdapterA_stageReadResponseAlways =
	     CAN_FIRE_RL_rg_tag_serverAdapterA_stageReadResponseAlways ;

  // rule RL_rg_tag_serverAdapterA_outData_enqOnly
  assign CAN_FIRE_RL_rg_tag_serverAdapterA_outData_enqOnly =
	     rg_tag_serverAdapterA_outDataCore$FULL_N &&
	     !CAN_FIRE_RL_rl_training_response &&
	     rg_tag_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_rg_tag_serverAdapterA_outData_enqOnly =
	     CAN_FIRE_RL_rg_tag_serverAdapterA_outData_enqOnly ;

  // rule RL_rg_tag_serverAdapterA_outData_deqOnly
  assign CAN_FIRE_RL_rg_tag_serverAdapterA_outData_deqOnly =
	     rg_tag_serverAdapterA_outDataCore$EMPTY_N &&
	     CAN_FIRE_RL_rl_training_response &&
	     !rg_tag_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_rg_tag_serverAdapterA_outData_deqOnly =
	     CAN_FIRE_RL_rg_tag_serverAdapterA_outData_deqOnly ;

  // rule RL_rg_tag_serverAdapterA_outData_enqAndDeq
  assign CAN_FIRE_RL_rg_tag_serverAdapterA_outData_enqAndDeq =
	     rg_tag_serverAdapterA_outDataCore$EMPTY_N &&
	     rg_tag_serverAdapterA_outDataCore$FULL_N &&
	     CAN_FIRE_RL_rl_training_response &&
	     rg_tag_serverAdapterA_outData_enqData$whas ;
  assign WILL_FIRE_RL_rg_tag_serverAdapterA_outData_enqAndDeq =
	     CAN_FIRE_RL_rg_tag_serverAdapterA_outData_enqAndDeq ;

  // rule RL_rg_tag_serverAdapterA_cnt_finalAdd
  assign CAN_FIRE_RL_rg_tag_serverAdapterA_cnt_finalAdd =
	     rg_tag_serverAdapterA_cnt_1$whas ||
	     CAN_FIRE_RL_rl_training_response ;
  assign WILL_FIRE_RL_rg_tag_serverAdapterA_cnt_finalAdd =
	     CAN_FIRE_RL_rg_tag_serverAdapterA_cnt_finalAdd ;

  // rule RL_rg_tag_serverAdapterA_s1__dreg_update
  assign CAN_FIRE_RL_rg_tag_serverAdapterA_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_rg_tag_serverAdapterA_s1__dreg_update = 1'd1 ;

  // rule RL_rg_tag_serverAdapterB_moveToOutFIFO
  assign CAN_FIRE_RL_rg_tag_serverAdapterB_moveToOutFIFO =
	     rg_tag_serverAdapterB_outDataCore$FULL_N &&
	     rg_tag_serverAdapterB_s1[1] ;
  assign WILL_FIRE_RL_rg_tag_serverAdapterB_moveToOutFIFO =
	     CAN_FIRE_RL_rg_tag_serverAdapterB_moveToOutFIFO ;

  // rule RL_rg_tag_serverAdapterB_overRun
  assign CAN_FIRE_RL_rg_tag_serverAdapterB_overRun =
	     rg_tag_serverAdapterB_s1[1] &&
	     !rg_tag_serverAdapterB_outDataCore$FULL_N ;
  assign WILL_FIRE_RL_rg_tag_serverAdapterB_overRun =
	     CAN_FIRE_RL_rg_tag_serverAdapterB_overRun ;

  // rule RL_rg_tag_serverAdapterB_outData_setFirstCore
  assign CAN_FIRE_RL_rg_tag_serverAdapterB_outData_setFirstCore =
	     rg_tag_serverAdapterB_outDataCore$EMPTY_N ;
  assign WILL_FIRE_RL_rg_tag_serverAdapterB_outData_setFirstCore =
	     rg_tag_serverAdapterB_outDataCore$EMPTY_N ;

  // rule RL_rg_tag_serverAdapterB_outData_setFirstEnq
  assign CAN_FIRE_RL_rg_tag_serverAdapterB_outData_setFirstEnq =
	     !rg_tag_serverAdapterB_outDataCore$EMPTY_N &&
	     rg_tag_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_rg_tag_serverAdapterB_outData_setFirstEnq =
	     CAN_FIRE_RL_rg_tag_serverAdapterB_outData_setFirstEnq ;

  // rule RL_rl_prediction_output
  assign CAN_FIRE_RL_rl_prediction_output =
	     rg_target_addr_serverAdapterB_cnt_97_SLT_2___d543 &&
	     rg_valid_or_not_serverAdapterB_cnt_11_SLT_2___d544 &&
	     rg_tag_serverAdapterB_cnt_25_SLT_2___d545 &&
	     rg_state_of_branch_instrn_serverAdapterB_cnt_3_ETC___d546 &&
	     rg_target_addr_serverAdapterB_outDataCore_notE_ETC___d577 &&
	     !EN__flush &&
	     !rg_fire_once &&
	     !rg_initialize &&
	     wr_fire_me$port2__read ;
  assign WILL_FIRE_RL_rl_prediction_output =
	     CAN_FIRE_RL_rl_prediction_output ;

  // rule RL_rg_state_of_branch_instrn_serverAdapterB_stageReadResponseAlways
  assign CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_stageReadResponseAlways =
	     WILL_FIRE_RL_rl_prediction_output ||
	     WILL_FIRE_RL_rg_prediction_request ;
  assign WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_stageReadResponseAlways =
	     CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_stageReadResponseAlways ;

  // rule RL_rg_state_of_branch_instrn_serverAdapterB_outData_enqOnly
  assign CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_outData_enqOnly =
	     rg_state_of_branch_instrn_serverAdapterB_outDataCore$FULL_N &&
	     !CAN_FIRE_RL_rl_prediction_output &&
	     rg_state_of_branch_instrn_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_outData_enqOnly =
	     CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_outData_enqOnly ;

  // rule RL_rg_state_of_branch_instrn_serverAdapterB_outData_deqOnly
  assign CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_outData_deqOnly =
	     rg_state_of_branch_instrn_serverAdapterB_outDataCore$EMPTY_N &&
	     CAN_FIRE_RL_rl_prediction_output &&
	     !rg_state_of_branch_instrn_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_outData_deqOnly =
	     CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_outData_deqOnly ;

  // rule RL_rg_state_of_branch_instrn_serverAdapterB_outData_enqAndDeq
  assign CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_outData_enqAndDeq =
	     rg_state_of_branch_instrn_serverAdapterB_outDataCore$EMPTY_N &&
	     rg_state_of_branch_instrn_serverAdapterB_outDataCore$FULL_N &&
	     CAN_FIRE_RL_rl_prediction_output &&
	     rg_state_of_branch_instrn_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_outData_enqAndDeq =
	     CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_outData_enqAndDeq ;

  // rule RL_rg_target_addr_serverAdapterB_stageReadResponseAlways
  assign CAN_FIRE_RL_rg_target_addr_serverAdapterB_stageReadResponseAlways =
	     CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_stageReadResponseAlways ;
  assign WILL_FIRE_RL_rg_target_addr_serverAdapterB_stageReadResponseAlways =
	     CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_stageReadResponseAlways ;

  // rule RL_rg_target_addr_serverAdapterB_outData_enqOnly
  assign CAN_FIRE_RL_rg_target_addr_serverAdapterB_outData_enqOnly =
	     rg_target_addr_serverAdapterB_outDataCore$FULL_N &&
	     !CAN_FIRE_RL_rl_prediction_output &&
	     rg_target_addr_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_rg_target_addr_serverAdapterB_outData_enqOnly =
	     CAN_FIRE_RL_rg_target_addr_serverAdapterB_outData_enqOnly ;

  // rule RL_rg_target_addr_serverAdapterB_outData_deqOnly
  assign CAN_FIRE_RL_rg_target_addr_serverAdapterB_outData_deqOnly =
	     rg_target_addr_serverAdapterB_outDataCore$EMPTY_N &&
	     CAN_FIRE_RL_rl_prediction_output &&
	     !rg_target_addr_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_rg_target_addr_serverAdapterB_outData_deqOnly =
	     CAN_FIRE_RL_rg_target_addr_serverAdapterB_outData_deqOnly ;

  // rule RL_rg_target_addr_serverAdapterB_outData_enqAndDeq
  assign CAN_FIRE_RL_rg_target_addr_serverAdapterB_outData_enqAndDeq =
	     rg_target_addr_serverAdapterB_outDataCore$EMPTY_N &&
	     rg_target_addr_serverAdapterB_outDataCore$FULL_N &&
	     CAN_FIRE_RL_rl_prediction_output &&
	     rg_target_addr_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_rg_target_addr_serverAdapterB_outData_enqAndDeq =
	     CAN_FIRE_RL_rg_target_addr_serverAdapterB_outData_enqAndDeq ;

  // rule RL_rg_valid_or_not_serverAdapterB_stageReadResponseAlways
  assign CAN_FIRE_RL_rg_valid_or_not_serverAdapterB_stageReadResponseAlways =
	     CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_stageReadResponseAlways ;
  assign WILL_FIRE_RL_rg_valid_or_not_serverAdapterB_stageReadResponseAlways =
	     CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_stageReadResponseAlways ;

  // rule RL_rg_valid_or_not_serverAdapterB_outData_enqOnly
  assign CAN_FIRE_RL_rg_valid_or_not_serverAdapterB_outData_enqOnly =
	     rg_valid_or_not_serverAdapterB_outDataCore$FULL_N &&
	     !CAN_FIRE_RL_rl_prediction_output &&
	     rg_valid_or_not_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_rg_valid_or_not_serverAdapterB_outData_enqOnly =
	     CAN_FIRE_RL_rg_valid_or_not_serverAdapterB_outData_enqOnly ;

  // rule RL_rg_valid_or_not_serverAdapterB_outData_deqOnly
  assign CAN_FIRE_RL_rg_valid_or_not_serverAdapterB_outData_deqOnly =
	     rg_valid_or_not_serverAdapterB_outDataCore$EMPTY_N &&
	     CAN_FIRE_RL_rl_prediction_output &&
	     !rg_valid_or_not_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_rg_valid_or_not_serverAdapterB_outData_deqOnly =
	     CAN_FIRE_RL_rg_valid_or_not_serverAdapterB_outData_deqOnly ;

  // rule RL_rg_valid_or_not_serverAdapterB_outData_enqAndDeq
  assign CAN_FIRE_RL_rg_valid_or_not_serverAdapterB_outData_enqAndDeq =
	     rg_valid_or_not_serverAdapterB_outDataCore$EMPTY_N &&
	     rg_valid_or_not_serverAdapterB_outDataCore$FULL_N &&
	     CAN_FIRE_RL_rl_prediction_output &&
	     rg_valid_or_not_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_rg_valid_or_not_serverAdapterB_outData_enqAndDeq =
	     CAN_FIRE_RL_rg_valid_or_not_serverAdapterB_outData_enqAndDeq ;

  // rule RL_rg_tag_serverAdapterB_stageReadResponseAlways
  assign CAN_FIRE_RL_rg_tag_serverAdapterB_stageReadResponseAlways =
	     CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_stageReadResponseAlways ;
  assign WILL_FIRE_RL_rg_tag_serverAdapterB_stageReadResponseAlways =
	     CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_stageReadResponseAlways ;

  // rule RL_rg_tag_serverAdapterB_outData_enqOnly
  assign CAN_FIRE_RL_rg_tag_serverAdapterB_outData_enqOnly =
	     rg_tag_serverAdapterB_outDataCore$FULL_N &&
	     !CAN_FIRE_RL_rl_prediction_output &&
	     rg_tag_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_rg_tag_serverAdapterB_outData_enqOnly =
	     CAN_FIRE_RL_rg_tag_serverAdapterB_outData_enqOnly ;

  // rule RL_rg_tag_serverAdapterB_outData_deqOnly
  assign CAN_FIRE_RL_rg_tag_serverAdapterB_outData_deqOnly =
	     rg_tag_serverAdapterB_outDataCore$EMPTY_N &&
	     CAN_FIRE_RL_rl_prediction_output &&
	     !rg_tag_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_rg_tag_serverAdapterB_outData_deqOnly =
	     CAN_FIRE_RL_rg_tag_serverAdapterB_outData_deqOnly ;

  // rule RL_rg_tag_serverAdapterB_outData_enqAndDeq
  assign CAN_FIRE_RL_rg_tag_serverAdapterB_outData_enqAndDeq =
	     rg_tag_serverAdapterB_outDataCore$EMPTY_N &&
	     rg_tag_serverAdapterB_outDataCore$FULL_N &&
	     CAN_FIRE_RL_rl_prediction_output &&
	     rg_tag_serverAdapterB_outData_enqData$whas ;
  assign WILL_FIRE_RL_rg_tag_serverAdapterB_outData_enqAndDeq =
	     CAN_FIRE_RL_rg_tag_serverAdapterB_outData_enqAndDeq ;

  // rule RL_flush_entire_pipe
  assign CAN_FIRE_RL_flush_entire_pipe = EN__flush ;
  assign WILL_FIRE_RL_flush_entire_pipe = EN__flush ;

  // rule RL_rg_state_of_branch_instrn_serverAdapterB_cnt_finalAdd
  assign CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_cnt_finalAdd =
	     WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_stageReadResponseAlways ||
	     CAN_FIRE_RL_rl_prediction_output ||
	     EN__flush ;
  assign WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_cnt_finalAdd =
	     CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_cnt_finalAdd ;

  // rule RL_rg_state_of_branch_instrn_serverAdapterB_s1__dreg_update
  assign CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_s1__dreg_update =
	     1'd1 ;
  assign WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_s1__dreg_update =
	     1'd1 ;

  // rule RL_rg_target_addr_serverAdapterB_cnt_finalAdd
  assign CAN_FIRE_RL_rg_target_addr_serverAdapterB_cnt_finalAdd =
	     WILL_FIRE_RL_rg_target_addr_serverAdapterB_stageReadResponseAlways ||
	     CAN_FIRE_RL_rl_prediction_output ||
	     EN__flush ;
  assign WILL_FIRE_RL_rg_target_addr_serverAdapterB_cnt_finalAdd =
	     CAN_FIRE_RL_rg_target_addr_serverAdapterB_cnt_finalAdd ;

  // rule RL_rg_target_addr_serverAdapterB_s1__dreg_update
  assign CAN_FIRE_RL_rg_target_addr_serverAdapterB_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_rg_target_addr_serverAdapterB_s1__dreg_update = 1'd1 ;

  // rule RL_rg_valid_or_not_serverAdapterB_cnt_finalAdd
  assign CAN_FIRE_RL_rg_valid_or_not_serverAdapterB_cnt_finalAdd =
	     WILL_FIRE_RL_rg_valid_or_not_serverAdapterB_stageReadResponseAlways ||
	     CAN_FIRE_RL_rl_prediction_output ||
	     EN__flush ;
  assign WILL_FIRE_RL_rg_valid_or_not_serverAdapterB_cnt_finalAdd =
	     CAN_FIRE_RL_rg_valid_or_not_serverAdapterB_cnt_finalAdd ;

  // rule RL_rg_valid_or_not_serverAdapterB_s1__dreg_update
  assign CAN_FIRE_RL_rg_valid_or_not_serverAdapterB_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_rg_valid_or_not_serverAdapterB_s1__dreg_update = 1'd1 ;

  // rule RL_rg_tag_serverAdapterB_cnt_finalAdd
  assign CAN_FIRE_RL_rg_tag_serverAdapterB_cnt_finalAdd =
	     WILL_FIRE_RL_rg_tag_serverAdapterB_stageReadResponseAlways ||
	     CAN_FIRE_RL_rl_prediction_output ||
	     EN__flush ;
  assign WILL_FIRE_RL_rg_tag_serverAdapterB_cnt_finalAdd =
	     CAN_FIRE_RL_rg_tag_serverAdapterB_cnt_finalAdd ;

  // rule RL_rg_tag_serverAdapterB_s1__dreg_update
  assign CAN_FIRE_RL_rg_tag_serverAdapterB_s1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_rg_tag_serverAdapterB_s1__dreg_update = 1'd1 ;

  // rule RL_rg_training_fire__dreg_update
  assign CAN_FIRE_RL_rg_training_fire__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_rg_training_fire__dreg_update = 1'd1 ;

  // rule RL_rg_fire_once__dreg_update
  assign CAN_FIRE_RL_rg_fire_once__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_rg_fire_once__dreg_update = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_rg_fire_once_1$wset_1__SEL_2 =
	     WILL_FIRE_RL_initialize_bp && rg_counter == 8'd128 ;
  assign MUX_rg_state_of_branch_instrn_memory$a_put_1__SEL_1 =
	     WILL_FIRE_RL_rl_training_response &&
	     (!rg_training_pred &&
	      rg_state_of_branch_instrn_serverAdapterA_outData_outData$wget !=
	      2'd3 ||
	      rg_training_pred &&
	      rg_state_of_branch_instrn_serverAdapterA_outData_outData$wget !=
	      2'd0 ||
	      !rg_tag_serverAdapterA_outData_outData_wget__22_ETC___d524) ;
  assign MUX_rg_tag_memory$a_put_1__SEL_1 =
	     WILL_FIRE_RL_rl_training_response &&
	     !rg_tag_serverAdapterA_outData_outData_wget__22_ETC___d524 ;
  assign MUX_rg_target_addr_memory$a_put_1__SEL_1 =
	     WILL_FIRE_RL_rl_training_response &&
	     (!rg_training_pred &&
	      rg_state_of_branch_instrn_serverAdapterA_outData_outData$wget !=
	      2'd3 ||
	      !rg_tag_serverAdapterA_outData_outData_wget__22_ETC___d524) ;
  assign MUX_rg_current_prediction$write_1__VAL_1 =
	     !rg_valid_or_not_serverAdapterB_outData_outData$wget ||
	     rg_state_of_branch_instrn_serverAdapterB_outDa_ETC___d590 ||
	     !rg_tag_serverAdapterB_outData_outData_wget__93_ETC___d594 ;
  assign MUX_rg_currentpc_$write_1__VAL_1 =
	     EN__flush ? _flush_new_pc_ : 32'd0 ;
  assign MUX_rg_state_of_branch_instrn_memory$a_put_3__VAL_1 =
	     rg_tag_serverAdapterA_outData_outData_wget__22_ETC___d524 ?
	       IF_NOT_rg_training_pred_12_13_AND_NOT_rg_state_ETC___d529 :
	       (rg_training_pred ? 2'd0 : 2'd1) ;
  assign MUX_rg_state_of_branch_instrn_serverAdapterB_s1_1$wset_1__VAL_1 =
	     { 1'd0, 1'b0 /* unspecified value */  } ;

  // inlined wires
  assign rg_state_of_branch_instrn_serverAdapterA_outData_enqData$whas =
	     WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_moveToOutFIFO &&
	     rg_state_of_branch_instrn_serverAdapterA_s1[0] ;
  assign rg_state_of_branch_instrn_serverAdapterA_outData_outData$wget =
	     rg_state_of_branch_instrn_serverAdapterA_outDataCore$EMPTY_N ?
	       rg_state_of_branch_instrn_serverAdapterA_outDataCore$D_OUT :
	       rg_state_of_branch_instrn_memory$DOA ;
  assign rg_state_of_branch_instrn_serverAdapterA_outData_outData$whas =
	     rg_state_of_branch_instrn_serverAdapterA_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_outData_setFirstEnq ;
  assign rg_state_of_branch_instrn_serverAdapterA_cnt_1$whas =
	     WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_stageReadResponseAlways &&
	     (!ab__h1827[1] || ab__h1827[0]) ;
  assign rg_state_of_branch_instrn_serverAdapterA_s1_1$wget =
	     { 1'd1, !ab__h1827[1] || ab__h1827[0] } ;
  assign rg_state_of_branch_instrn_serverAdapterB_outData_enqData$whas =
	     WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_moveToOutFIFO &&
	     rg_state_of_branch_instrn_serverAdapterB_s1[0] ;
  assign rg_state_of_branch_instrn_serverAdapterB_outData_outData$whas =
	     rg_state_of_branch_instrn_serverAdapterB_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_outData_setFirstEnq ;
  assign rg_state_of_branch_instrn_serverAdapterB_s1_1$wget =
	     EN__flush ?
	       MUX_rg_state_of_branch_instrn_serverAdapterB_s1_1$wset_1__VAL_1 :
	       2'd3 ;
  assign rg_state_of_branch_instrn_serverAdapterB_s1_1$whas =
	     EN__flush ||
	     WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_stageReadResponseAlways ;
  assign rg_target_addr_serverAdapterA_outData_enqData$whas =
	     WILL_FIRE_RL_rg_target_addr_serverAdapterA_moveToOutFIFO &&
	     rg_target_addr_serverAdapterA_s1[0] ;
  assign rg_target_addr_serverAdapterA_cnt_1$whas =
	     WILL_FIRE_RL_rg_target_addr_serverAdapterA_stageReadResponseAlways &&
	     (!ab__h4694[1] || ab__h4694[0]) ;
  assign rg_target_addr_serverAdapterA_s1_1$wget =
	     { 1'd1, !ab__h4694[1] || ab__h4694[0] } ;
  assign rg_target_addr_serverAdapterB_outData_enqData$whas =
	     WILL_FIRE_RL_rg_target_addr_serverAdapterB_moveToOutFIFO &&
	     rg_target_addr_serverAdapterB_s1[0] ;
  assign rg_target_addr_serverAdapterB_outData_outData$whas =
	     rg_target_addr_serverAdapterB_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_rg_target_addr_serverAdapterB_outData_setFirstEnq ;
  assign rg_target_addr_serverAdapterB_s1_1$wget =
	     EN__flush ?
	       MUX_rg_state_of_branch_instrn_serverAdapterB_s1_1$wset_1__VAL_1 :
	       2'd3 ;
  assign rg_target_addr_serverAdapterB_s1_1$whas =
	     EN__flush ||
	     WILL_FIRE_RL_rg_target_addr_serverAdapterB_stageReadResponseAlways ;
  assign rg_valid_or_not_serverAdapterA_outData_enqData$whas =
	     WILL_FIRE_RL_rg_valid_or_not_serverAdapterA_moveToOutFIFO &&
	     rg_valid_or_not_serverAdapterA_s1[0] ;
  assign rg_valid_or_not_serverAdapterB_outData_enqData$whas =
	     WILL_FIRE_RL_rg_valid_or_not_serverAdapterB_moveToOutFIFO &&
	     rg_valid_or_not_serverAdapterB_s1[0] ;
  assign rg_valid_or_not_serverAdapterB_outData_outData$wget =
	     rg_valid_or_not_serverAdapterB_outDataCore$EMPTY_N ?
	       rg_valid_or_not_serverAdapterB_outDataCore$D_OUT :
	       rg_valid_or_not_memory$DOB ;
  assign rg_valid_or_not_serverAdapterB_outData_outData$whas =
	     rg_valid_or_not_serverAdapterB_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_rg_valid_or_not_serverAdapterB_outData_setFirstEnq ;
  assign rg_valid_or_not_serverAdapterB_s1_1$wget =
	     EN__flush ?
	       MUX_rg_state_of_branch_instrn_serverAdapterB_s1_1$wset_1__VAL_1 :
	       2'd3 ;
  assign rg_valid_or_not_serverAdapterB_s1_1$whas =
	     EN__flush ||
	     WILL_FIRE_RL_rg_valid_or_not_serverAdapterB_stageReadResponseAlways ;
  assign rg_tag_serverAdapterA_outData_enqData$whas =
	     WILL_FIRE_RL_rg_tag_serverAdapterA_moveToOutFIFO &&
	     rg_tag_serverAdapterA_s1[0] ;
  assign rg_tag_serverAdapterA_outData_outData$whas =
	     rg_tag_serverAdapterA_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_rg_tag_serverAdapterA_outData_setFirstEnq ;
  assign rg_tag_serverAdapterA_cnt_1$whas =
	     WILL_FIRE_RL_rg_tag_serverAdapterA_stageReadResponseAlways &&
	     (!ab__h10433[1] || ab__h10433[0]) ;
  assign rg_tag_serverAdapterA_s1_1$wget =
	     { 1'd1, !ab__h10433[1] || ab__h10433[0] } ;
  assign rg_tag_serverAdapterB_outData_enqData$whas =
	     WILL_FIRE_RL_rg_tag_serverAdapterB_moveToOutFIFO &&
	     rg_tag_serverAdapterB_s1[0] ;
  assign rg_tag_serverAdapterB_outData_outData$whas =
	     rg_tag_serverAdapterB_outDataCore$EMPTY_N ||
	     WILL_FIRE_RL_rg_tag_serverAdapterB_outData_setFirstEnq ;
  assign rg_tag_serverAdapterB_s1_1$wget =
	     EN__flush ?
	       MUX_rg_state_of_branch_instrn_serverAdapterB_s1_1$wset_1__VAL_1 :
	       2'd3 ;
  assign rg_tag_serverAdapterB_s1_1$whas =
	     EN__flush ||
	     WILL_FIRE_RL_rg_tag_serverAdapterB_stageReadResponseAlways ;
  assign rg_fire_once_1$whas =
	     WILL_FIRE_RL_initialize_bp && rg_counter == 8'd128 || EN__flush ;
  assign wr_fire_me$EN_port0__write =
	     WILL_FIRE_RL_initialize_bp && rg_counter == 8'd128 ||
	     EN_deq_fifo ;
  assign wr_fire_me$port1__read =
	     wr_fire_me$EN_port0__write ? 1'd1 : wr_fire_me ;
  assign wr_fire_me$port2__read = EN_send_output_ || wr_fire_me$port1__read ;
  assign wr_fire_me$port3__read =
	     !CAN_FIRE_RL_rl_prediction_output && wr_fire_me$port2__read ;

  // register rg_counter
  assign rg_counter$D_IN = rg_counter + 8'd1 ;
  assign rg_counter$EN = WILL_FIRE_RL_initialize_bp && rg_counter != 8'd128 ;

  // register rg_current_prediction
  assign rg_current_prediction$D_IN =
	     !WILL_FIRE_RL_rl_prediction_output ||
	     MUX_rg_current_prediction$write_1__VAL_1 ;
  assign rg_current_prediction$EN =
	     WILL_FIRE_RL_rl_prediction_output || EN__flush ;

  // register rg_currentpc_
  assign rg_currentpc_$D_IN =
	     EN__flush ?
	       MUX_rg_currentpc_$write_1__VAL_1 :
	       IF_rg_valid_or_not_serverAdapterB_outData_outD_ETC___d598 ;
  assign rg_currentpc_$EN = EN__flush || WILL_FIRE_RL_rl_prediction_output ;

  // register rg_fire_once
  assign rg_fire_once$D_IN = rg_fire_once_1$whas ;
  assign rg_fire_once$EN = 1'd1 ;

  // register rg_initialize
  assign rg_initialize$D_IN = 1'd0 ;
  assign rg_initialize$EN = MUX_rg_fire_once_1$wset_1__SEL_2 ;

  // register rg_state_of_branch_instrn_serverAdapterA_cnt
  assign rg_state_of_branch_instrn_serverAdapterA_cnt$D_IN =
	     rg_state_of_branch_instrn_serverAdapterA_cnt_6_ETC___d32 ;
  assign rg_state_of_branch_instrn_serverAdapterA_cnt$EN =
	     CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_cnt_finalAdd ;

  // register rg_state_of_branch_instrn_serverAdapterA_s1
  assign rg_state_of_branch_instrn_serverAdapterA_s1$D_IN =
	     { CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_stageReadResponseAlways &&
	       rg_state_of_branch_instrn_serverAdapterA_s1_1$wget[1],
	       rg_state_of_branch_instrn_serverAdapterA_s1_1$wget[0] } ;
  assign rg_state_of_branch_instrn_serverAdapterA_s1$EN = 1'd1 ;

  // register rg_state_of_branch_instrn_serverAdapterB_cnt
  assign rg_state_of_branch_instrn_serverAdapterB_cnt$D_IN =
	     EN__flush ?
	       3'd0 :
	       rg_state_of_branch_instrn_serverAdapterB_cnt_3_ETC___d89 ;
  assign rg_state_of_branch_instrn_serverAdapterB_cnt$EN =
	     CAN_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_cnt_finalAdd ;

  // register rg_state_of_branch_instrn_serverAdapterB_s1
  assign rg_state_of_branch_instrn_serverAdapterB_s1$D_IN =
	     { rg_state_of_branch_instrn_serverAdapterB_s1_1$whas &&
	       rg_state_of_branch_instrn_serverAdapterB_s1_1$wget[1],
	       rg_state_of_branch_instrn_serverAdapterB_s1_1$wget[0] } ;
  assign rg_state_of_branch_instrn_serverAdapterB_s1$EN = 1'd1 ;

  // register rg_tag_serverAdapterA_cnt
  assign rg_tag_serverAdapterA_cnt$D_IN =
	     rg_tag_serverAdapterA_cnt_68_PLUS_IF_rg_tag_se_ETC___d374 ;
  assign rg_tag_serverAdapterA_cnt$EN =
	     CAN_FIRE_RL_rg_tag_serverAdapterA_cnt_finalAdd ;

  // register rg_tag_serverAdapterA_s1
  assign rg_tag_serverAdapterA_s1$D_IN =
	     { CAN_FIRE_RL_rg_tag_serverAdapterA_stageReadResponseAlways &&
	       rg_tag_serverAdapterA_s1_1$wget[1],
	       rg_tag_serverAdapterA_s1_1$wget[0] } ;
  assign rg_tag_serverAdapterA_s1$EN = 1'd1 ;

  // register rg_tag_serverAdapterB_cnt
  assign rg_tag_serverAdapterB_cnt$D_IN =
	     EN__flush ?
	       3'd0 :
	       rg_tag_serverAdapterB_cnt_25_PLUS_IF_rg_tag_se_ETC___d431 ;
  assign rg_tag_serverAdapterB_cnt$EN =
	     CAN_FIRE_RL_rg_tag_serverAdapterB_cnt_finalAdd ;

  // register rg_tag_serverAdapterB_s1
  assign rg_tag_serverAdapterB_s1$D_IN =
	     { rg_tag_serverAdapterB_s1_1$whas &&
	       rg_tag_serverAdapterB_s1_1$wget[1],
	       rg_tag_serverAdapterB_s1_1$wget[0] } ;
  assign rg_tag_serverAdapterB_s1$EN = 1'd1 ;

  // register rg_target_addr_serverAdapterA_cnt
  assign rg_target_addr_serverAdapterA_cnt$D_IN =
	     rg_target_addr_serverAdapterA_cnt +
	     (rg_target_addr_serverAdapterA_cnt_1$whas ? 3'd1 : 3'd0) +
	     3'd0 ;
  assign rg_target_addr_serverAdapterA_cnt$EN =
	     rg_target_addr_serverAdapterA_cnt_1$whas ;

  // register rg_target_addr_serverAdapterA_s1
  assign rg_target_addr_serverAdapterA_s1$D_IN =
	     { CAN_FIRE_RL_rg_target_addr_serverAdapterA_stageReadResponseAlways &&
	       rg_target_addr_serverAdapterA_s1_1$wget[1],
	       rg_target_addr_serverAdapterA_s1_1$wget[0] } ;
  assign rg_target_addr_serverAdapterA_s1$EN = 1'd1 ;

  // register rg_target_addr_serverAdapterB_cnt
  assign rg_target_addr_serverAdapterB_cnt$D_IN =
	     EN__flush ?
	       3'd0 :
	       rg_target_addr_serverAdapterB_cnt_97_PLUS_IF_r_ETC___d203 ;
  assign rg_target_addr_serverAdapterB_cnt$EN =
	     CAN_FIRE_RL_rg_target_addr_serverAdapterB_cnt_finalAdd ;

  // register rg_target_addr_serverAdapterB_s1
  assign rg_target_addr_serverAdapterB_s1$D_IN =
	     { rg_target_addr_serverAdapterB_s1_1$whas &&
	       rg_target_addr_serverAdapterB_s1_1$wget[1],
	       rg_target_addr_serverAdapterB_s1_1$wget[0] } ;
  assign rg_target_addr_serverAdapterB_s1$EN = 1'd1 ;

  // register rg_training_addr
  assign rg_training_addr$D_IN = EN__training ? _training_addr : 32'd0 ;
  assign rg_training_addr$EN = CAN_FIRE_RL_rl_training_request ;

  // register rg_training_fire
  assign rg_training_fire$D_IN = CAN_FIRE_RL_rl_training_request ;
  assign rg_training_fire$EN = 1'd1 ;

  // register rg_training_index
  assign rg_training_index$D_IN =
	     IF_wr_currentpc__whas__86_THEN_wr_currentpc__w_ETC___d488[7:0] ;
  assign rg_training_index$EN = CAN_FIRE_RL_rl_training_request ;

  // register rg_training_pred
  assign rg_training_pred$D_IN =
	     !EN__training || _training_branch_taken_or_not ;
  assign rg_training_pred$EN = CAN_FIRE_RL_rl_training_request ;

  // register rg_training_tag
  assign rg_training_tag$D_IN =
	     IF_wr_currentpc__whas__86_THEN_wr_currentpc__w_ETC___d488[31:8] ;
  assign rg_training_tag$EN = CAN_FIRE_RL_rl_training_request ;

  // register rg_valid_or_not_serverAdapterA_cnt
  assign rg_valid_or_not_serverAdapterA_cnt$D_IN =
	     rg_valid_or_not_serverAdapterA_cnt + 3'd0 + 3'd0 ;
  assign rg_valid_or_not_serverAdapterA_cnt$EN = 1'b0 ;

  // register rg_valid_or_not_serverAdapterA_s1
  assign rg_valid_or_not_serverAdapterA_s1$D_IN =
	     { CAN_FIRE_RL_rg_valid_or_not_serverAdapterA_stageReadResponseAlways,
	       1'b0 } ;
  assign rg_valid_or_not_serverAdapterA_s1$EN = 1'd1 ;

  // register rg_valid_or_not_serverAdapterB_cnt
  assign rg_valid_or_not_serverAdapterB_cnt$D_IN =
	     EN__flush ?
	       3'd0 :
	       rg_valid_or_not_serverAdapterB_cnt_11_PLUS_IF__ETC___d317 ;
  assign rg_valid_or_not_serverAdapterB_cnt$EN =
	     CAN_FIRE_RL_rg_valid_or_not_serverAdapterB_cnt_finalAdd ;

  // register rg_valid_or_not_serverAdapterB_s1
  assign rg_valid_or_not_serverAdapterB_s1$D_IN =
	     { rg_valid_or_not_serverAdapterB_s1_1$whas &&
	       rg_valid_or_not_serverAdapterB_s1_1$wget[1],
	       rg_valid_or_not_serverAdapterB_s1_1$wget[0] } ;
  assign rg_valid_or_not_serverAdapterB_s1$EN = 1'd1 ;

  // register wr_fire_me
  assign wr_fire_me$D_IN = wr_fire_me$port3__read ;
  assign wr_fire_me$EN = 1'b1 ;

  // submodule rg_state_of_branch_instrn_memory
  always@(MUX_rg_state_of_branch_instrn_memory$a_put_1__SEL_1 or
	  rg_training_index or
	  WILL_FIRE_RL_rl_training_request or
	  IF_wr_currentpc__whas__86_THEN_wr_currentpc__w_ETC___d488 or
	  WILL_FIRE_RL_initialize_bp or rg_counter)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_state_of_branch_instrn_memory$a_put_1__SEL_1:
	  rg_state_of_branch_instrn_memory$ADDRA = rg_training_index;
      WILL_FIRE_RL_rl_training_request:
	  rg_state_of_branch_instrn_memory$ADDRA =
	      IF_wr_currentpc__whas__86_THEN_wr_currentpc__w_ETC___d488[7:0];
      WILL_FIRE_RL_initialize_bp:
	  rg_state_of_branch_instrn_memory$ADDRA = rg_counter;
      default: rg_state_of_branch_instrn_memory$ADDRA =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  assign rg_state_of_branch_instrn_memory$ADDRB =
	     WILL_FIRE_RL_rg_prediction_request ?
	       rg_currentpc_[7:0] :
	       IF_rg_valid_or_not_serverAdapterB_outData_outD_ETC___d598[7:0] ;
  always@(MUX_rg_state_of_branch_instrn_memory$a_put_1__SEL_1 or
	  MUX_rg_state_of_branch_instrn_memory$a_put_3__VAL_1 or
	  WILL_FIRE_RL_rl_training_request or WILL_FIRE_RL_initialize_bp)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_state_of_branch_instrn_memory$a_put_1__SEL_1:
	  rg_state_of_branch_instrn_memory$DIA =
	      MUX_rg_state_of_branch_instrn_memory$a_put_3__VAL_1;
      WILL_FIRE_RL_rl_training_request:
	  rg_state_of_branch_instrn_memory$DIA = 2'd0;
      WILL_FIRE_RL_initialize_bp: rg_state_of_branch_instrn_memory$DIA = 2'd1;
      default: rg_state_of_branch_instrn_memory$DIA =
		   2'b10 /* unspecified value */ ;
    endcase
  end
  assign rg_state_of_branch_instrn_memory$DIB = 2'd0 ;
  assign rg_state_of_branch_instrn_memory$WEA =
	     !WILL_FIRE_RL_rl_training_request ;
  assign rg_state_of_branch_instrn_memory$WEB = 1'd0 ;
  assign rg_state_of_branch_instrn_memory$ENA =
	     MUX_rg_state_of_branch_instrn_memory$a_put_1__SEL_1 ||
	     WILL_FIRE_RL_rl_training_request ||
	     WILL_FIRE_RL_initialize_bp ;
  assign rg_state_of_branch_instrn_memory$ENB =
	     WILL_FIRE_RL_rg_prediction_request ||
	     WILL_FIRE_RL_rl_prediction_output ;

  // submodule rg_state_of_branch_instrn_serverAdapterA_outDataCore
  assign rg_state_of_branch_instrn_serverAdapterA_outDataCore$D_IN =
	     rg_state_of_branch_instrn_memory$DOA ;
  assign rg_state_of_branch_instrn_serverAdapterA_outDataCore$ENQ =
	     WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_outData_enqAndDeq ||
	     WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_outData_enqOnly ;
  assign rg_state_of_branch_instrn_serverAdapterA_outDataCore$DEQ =
	     WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_outData_enqAndDeq ||
	     WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_outData_deqOnly ;
  assign rg_state_of_branch_instrn_serverAdapterA_outDataCore$CLR = 1'b0 ;

  // submodule rg_state_of_branch_instrn_serverAdapterB_outDataCore
  assign rg_state_of_branch_instrn_serverAdapterB_outDataCore$D_IN =
	     rg_state_of_branch_instrn_memory$DOB ;
  assign rg_state_of_branch_instrn_serverAdapterB_outDataCore$ENQ =
	     WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_outData_enqAndDeq ||
	     WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_outData_enqOnly ;
  assign rg_state_of_branch_instrn_serverAdapterB_outDataCore$DEQ =
	     WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_outData_enqAndDeq ||
	     WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_outData_deqOnly ;
  assign rg_state_of_branch_instrn_serverAdapterB_outDataCore$CLR =
	     EN__flush ;

  // submodule rg_tag_memory
  always@(MUX_rg_tag_memory$a_put_1__SEL_1 or
	  rg_training_index or
	  WILL_FIRE_RL_rl_training_request or
	  IF_wr_currentpc__whas__86_THEN_wr_currentpc__w_ETC___d488 or
	  WILL_FIRE_RL_initialize_bp or rg_counter)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_tag_memory$a_put_1__SEL_1:
	  rg_tag_memory$ADDRA = rg_training_index;
      WILL_FIRE_RL_rl_training_request:
	  rg_tag_memory$ADDRA =
	      IF_wr_currentpc__whas__86_THEN_wr_currentpc__w_ETC___d488[7:0];
      WILL_FIRE_RL_initialize_bp: rg_tag_memory$ADDRA = rg_counter;
      default: rg_tag_memory$ADDRA = 8'b10101010 /* unspecified value */ ;
    endcase
  end
  assign rg_tag_memory$ADDRB =
	     WILL_FIRE_RL_rg_prediction_request ?
	       rg_currentpc_[7:0] :
	       IF_rg_valid_or_not_serverAdapterB_outData_outD_ETC___d598[7:0] ;
  assign rg_tag_memory$DIA =
	     MUX_rg_tag_memory$a_put_1__SEL_1 ? rg_training_tag : 24'd0 ;
  assign rg_tag_memory$DIB = 24'd0 ;
  assign rg_tag_memory$WEA = !WILL_FIRE_RL_rl_training_request ;
  assign rg_tag_memory$WEB = 1'd0 ;
  assign rg_tag_memory$ENA =
	     WILL_FIRE_RL_rl_training_response &&
	     !rg_tag_serverAdapterA_outData_outData_wget__22_ETC___d524 ||
	     WILL_FIRE_RL_rl_training_request ||
	     WILL_FIRE_RL_initialize_bp ;
  assign rg_tag_memory$ENB =
	     WILL_FIRE_RL_rg_prediction_request ||
	     WILL_FIRE_RL_rl_prediction_output ;

  // submodule rg_tag_serverAdapterA_outDataCore
  assign rg_tag_serverAdapterA_outDataCore$D_IN = rg_tag_memory$DOA ;
  assign rg_tag_serverAdapterA_outDataCore$ENQ =
	     WILL_FIRE_RL_rg_tag_serverAdapterA_outData_enqAndDeq ||
	     WILL_FIRE_RL_rg_tag_serverAdapterA_outData_enqOnly ;
  assign rg_tag_serverAdapterA_outDataCore$DEQ =
	     WILL_FIRE_RL_rg_tag_serverAdapterA_outData_enqAndDeq ||
	     WILL_FIRE_RL_rg_tag_serverAdapterA_outData_deqOnly ;
  assign rg_tag_serverAdapterA_outDataCore$CLR = 1'b0 ;

  // submodule rg_tag_serverAdapterB_outDataCore
  assign rg_tag_serverAdapterB_outDataCore$D_IN = rg_tag_memory$DOB ;
  assign rg_tag_serverAdapterB_outDataCore$ENQ =
	     WILL_FIRE_RL_rg_tag_serverAdapterB_outData_enqAndDeq ||
	     WILL_FIRE_RL_rg_tag_serverAdapterB_outData_enqOnly ;
  assign rg_tag_serverAdapterB_outDataCore$DEQ =
	     WILL_FIRE_RL_rg_tag_serverAdapterB_outData_enqAndDeq ||
	     WILL_FIRE_RL_rg_tag_serverAdapterB_outData_deqOnly ;
  assign rg_tag_serverAdapterB_outDataCore$CLR = EN__flush ;

  // submodule rg_target_addr_memory
  assign rg_target_addr_memory$ADDRA =
	     MUX_rg_target_addr_memory$a_put_1__SEL_1 ?
	       rg_training_index :
	       rg_counter ;
  assign rg_target_addr_memory$ADDRB =
	     WILL_FIRE_RL_rg_prediction_request ?
	       rg_currentpc_[7:0] :
	       IF_rg_valid_or_not_serverAdapterB_outData_outD_ETC___d598[7:0] ;
  assign rg_target_addr_memory$DIA =
	     MUX_rg_target_addr_memory$a_put_1__SEL_1 ?
	       rg_training_addr :
	       32'd0 ;
  assign rg_target_addr_memory$DIB = 32'd0 ;
  assign rg_target_addr_memory$WEA = 1'd1 ;
  assign rg_target_addr_memory$WEB = 1'd0 ;
  assign rg_target_addr_memory$ENA =
	     MUX_rg_target_addr_memory$a_put_1__SEL_1 ||
	     WILL_FIRE_RL_initialize_bp ;
  assign rg_target_addr_memory$ENB =
	     WILL_FIRE_RL_rg_prediction_request ||
	     WILL_FIRE_RL_rl_prediction_output ;

  // submodule rg_target_addr_serverAdapterA_outDataCore
  assign rg_target_addr_serverAdapterA_outDataCore$D_IN =
	     rg_target_addr_memory$DOA ;
  assign rg_target_addr_serverAdapterA_outDataCore$ENQ =
	     WILL_FIRE_RL_rg_target_addr_serverAdapterA_outData_enqOnly ;
  assign rg_target_addr_serverAdapterA_outDataCore$DEQ = 1'b0 ;
  assign rg_target_addr_serverAdapterA_outDataCore$CLR = 1'b0 ;

  // submodule rg_target_addr_serverAdapterB_outDataCore
  assign rg_target_addr_serverAdapterB_outDataCore$D_IN =
	     rg_target_addr_memory$DOB ;
  assign rg_target_addr_serverAdapterB_outDataCore$ENQ =
	     WILL_FIRE_RL_rg_target_addr_serverAdapterB_outData_enqAndDeq ||
	     WILL_FIRE_RL_rg_target_addr_serverAdapterB_outData_enqOnly ;
  assign rg_target_addr_serverAdapterB_outDataCore$DEQ =
	     WILL_FIRE_RL_rg_target_addr_serverAdapterB_outData_enqAndDeq ||
	     WILL_FIRE_RL_rg_target_addr_serverAdapterB_outData_deqOnly ;
  assign rg_target_addr_serverAdapterB_outDataCore$CLR = EN__flush ;

  // submodule rg_valid_or_not_memory
  assign rg_valid_or_not_memory$ADDRA =
	     WILL_FIRE_RL_rl_training_response ?
	       rg_training_index :
	       rg_counter ;
  assign rg_valid_or_not_memory$ADDRB =
	     WILL_FIRE_RL_rg_prediction_request ?
	       rg_currentpc_[7:0] :
	       IF_rg_valid_or_not_serverAdapterB_outData_outD_ETC___d598[7:0] ;
  assign rg_valid_or_not_memory$DIA = WILL_FIRE_RL_rl_training_response ;
  assign rg_valid_or_not_memory$DIB = 1'd0 ;
  assign rg_valid_or_not_memory$WEA = 1'd1 ;
  assign rg_valid_or_not_memory$WEB = 1'd0 ;
  assign rg_valid_or_not_memory$ENA =
	     CAN_FIRE_RL_rg_valid_or_not_serverAdapterA_stageReadResponseAlways ;
  assign rg_valid_or_not_memory$ENB =
	     WILL_FIRE_RL_rg_prediction_request ||
	     WILL_FIRE_RL_rl_prediction_output ;

  // submodule rg_valid_or_not_serverAdapterA_outDataCore
  assign rg_valid_or_not_serverAdapterA_outDataCore$D_IN =
	     rg_valid_or_not_memory$DOA ;
  assign rg_valid_or_not_serverAdapterA_outDataCore$ENQ =
	     WILL_FIRE_RL_rg_valid_or_not_serverAdapterA_outData_enqOnly ;
  assign rg_valid_or_not_serverAdapterA_outDataCore$DEQ = 1'b0 ;
  assign rg_valid_or_not_serverAdapterA_outDataCore$CLR = 1'b0 ;

  // submodule rg_valid_or_not_serverAdapterB_outDataCore
  assign rg_valid_or_not_serverAdapterB_outDataCore$D_IN =
	     rg_valid_or_not_memory$DOB ;
  assign rg_valid_or_not_serverAdapterB_outDataCore$ENQ =
	     WILL_FIRE_RL_rg_valid_or_not_serverAdapterB_outData_enqAndDeq ||
	     WILL_FIRE_RL_rg_valid_or_not_serverAdapterB_outData_enqOnly ;
  assign rg_valid_or_not_serverAdapterB_outDataCore$DEQ =
	     WILL_FIRE_RL_rg_valid_or_not_serverAdapterB_outData_enqAndDeq ||
	     WILL_FIRE_RL_rg_valid_or_not_serverAdapterB_outData_deqOnly ;
  assign rg_valid_or_not_serverAdapterB_outDataCore$CLR = EN__flush ;

  // remaining internal signals
  assign IF_NOT_rg_training_pred_12_13_AND_NOT_rg_state_ETC___d529 =
	     (!rg_training_pred &&
	      rg_state_of_branch_instrn_serverAdapterA_outData_outData$wget !=
	      2'd3) ?
	       x3__h14343 :
	       x3__h14040 ;
  assign IF_rg_valid_or_not_serverAdapterB_outData_outD_ETC___d598 =
	     (rg_valid_or_not_serverAdapterB_outData_outData$wget &&
	      !rg_state_of_branch_instrn_serverAdapterB_outDa_ETC___d590 &&
	      rg_tag_serverAdapterB_outData_outData_wget__93_ETC___d594) ?
	       v__h15368 :
	       actual_increment_addr__h15318 ;
  assign IF_wr_currentpc__whas__86_THEN_wr_currentpc__w_ETC___d488 =
	     EN__training ? _training_pc : 32'd0 ;
  assign ab__h10433 = WILL_FIRE_RL_rl_training_request ? 2'd0 : 2'd2 ;
  assign ab__h1827 = WILL_FIRE_RL_rl_training_request ? 2'd0 : 2'd2 ;
  assign ab__h4694 = 2'd2 ;
  assign actual_increment_addr__h15318 = rg_currentpc_ + 32'd4 ;
  assign rg_state_of_branch_instrn_serverAdapterA_cnt_6_ETC___d32 =
	     rg_state_of_branch_instrn_serverAdapterA_cnt +
	     (rg_state_of_branch_instrn_serverAdapterA_cnt_1$whas ?
		3'd1 :
		3'd0) +
	     (CAN_FIRE_RL_rl_training_response ? 3'd7 : 3'd0) ;
  assign rg_state_of_branch_instrn_serverAdapterA_cnt_6_ETC___d463 =
	     (rg_state_of_branch_instrn_serverAdapterA_cnt ^ 3'h4) < 3'd6 ;
  assign rg_state_of_branch_instrn_serverAdapterB_cnt_3_ETC___d546 =
	     (rg_state_of_branch_instrn_serverAdapterB_cnt ^ 3'h4) < 3'd6 ;
  assign rg_state_of_branch_instrn_serverAdapterB_cnt_3_ETC___d89 =
	     rg_state_of_branch_instrn_serverAdapterB_cnt +
	     (WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (CAN_FIRE_RL_rl_prediction_output ? 3'd7 : 3'd0) ;
  assign rg_state_of_branch_instrn_serverAdapterB_outDa_ETC___d590 =
	     v__h15145 < 2'd2 ;
  assign rg_tag_serverAdapterA_cnt_68_PLUS_IF_rg_tag_se_ETC___d374 =
	     rg_tag_serverAdapterA_cnt +
	     (rg_tag_serverAdapterA_cnt_1$whas ? 3'd1 : 3'd0) +
	     (CAN_FIRE_RL_rl_training_response ? 3'd7 : 3'd0) ;
  assign rg_tag_serverAdapterA_cnt_68_SLT_2___d466 =
	     (rg_tag_serverAdapterA_cnt ^ 3'h4) < 3'd6 ;
  assign rg_tag_serverAdapterA_outData_outData_wget__22_ETC___d524 =
	     v__h13673 == rg_training_tag ;
  assign rg_tag_serverAdapterA_outData_outData_whas__99_ETC___d506 =
	     rg_tag_serverAdapterA_outData_outData$whas &&
	     (rg_state_of_branch_instrn_serverAdapterA_outDataCore$EMPTY_N ||
	      rg_state_of_branch_instrn_serverAdapterA_outData_enqData$whas) &&
	     rg_state_of_branch_instrn_serverAdapterA_outData_outData$whas &&
	     rg_state_of_branch_instrn_serverAdapterA_cnt_6_ETC___d463 &&
	     rg_target_addr_serverAdapterA_cnt_40_SLT_2___d464 &&
	     rg_tag_serverAdapterA_cnt_68_SLT_2___d466 ;
  assign rg_tag_serverAdapterB_cnt_25_PLUS_IF_rg_tag_se_ETC___d431 =
	     rg_tag_serverAdapterB_cnt +
	     (WILL_FIRE_RL_rg_tag_serverAdapterB_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (CAN_FIRE_RL_rl_prediction_output ? 3'd7 : 3'd0) ;
  assign rg_tag_serverAdapterB_cnt_25_SLT_2___d545 =
	     (rg_tag_serverAdapterB_cnt ^ 3'h4) < 3'd6 ;
  assign rg_tag_serverAdapterB_outDataCore_notEmpty__01_ETC___d573 =
	     (rg_tag_serverAdapterB_outDataCore$EMPTY_N ||
	      rg_tag_serverAdapterB_outData_enqData$whas) &&
	     rg_state_of_branch_instrn_serverAdapterB_outData_outData$whas &&
	     rg_tag_serverAdapterB_outData_outData$whas &&
	     rg_target_addr_serverAdapterB_outData_outData$whas ;
  assign rg_tag_serverAdapterB_outData_outData_wget__93_ETC___d594 =
	     v__h15233 == rg_currentpc_[31:8] ;
  assign rg_target_addr_serverAdapterA_cnt_40_SLT_2___d464 =
	     (rg_target_addr_serverAdapterA_cnt ^ 3'h4) < 3'd6 ;
  assign rg_target_addr_serverAdapterB_cnt_97_PLUS_IF_r_ETC___d203 =
	     rg_target_addr_serverAdapterB_cnt +
	     (WILL_FIRE_RL_rg_target_addr_serverAdapterB_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (CAN_FIRE_RL_rl_prediction_output ? 3'd7 : 3'd0) ;
  assign rg_target_addr_serverAdapterB_cnt_97_SLT_2___d543 =
	     (rg_target_addr_serverAdapterB_cnt ^ 3'h4) < 3'd6 ;
  assign rg_target_addr_serverAdapterB_outDataCore_notE_ETC___d577 =
	     (rg_target_addr_serverAdapterB_outDataCore$EMPTY_N ||
	      rg_target_addr_serverAdapterB_outData_enqData$whas) &&
	     (rg_valid_or_not_serverAdapterB_outDataCore$EMPTY_N ||
	      rg_valid_or_not_serverAdapterB_outData_enqData$whas) &&
	     rg_valid_or_not_serverAdapterB_outData_outData$whas &&
	     (rg_state_of_branch_instrn_serverAdapterB_outDataCore$EMPTY_N ||
	      rg_state_of_branch_instrn_serverAdapterB_outData_enqData$whas) &&
	     rg_tag_serverAdapterB_outDataCore_notEmpty__01_ETC___d573 ;
  assign rg_valid_or_not_serverAdapterA_cnt_54_SLT_2___d465 =
	     (rg_valid_or_not_serverAdapterA_cnt ^ 3'h4) < 3'd6 ;
  assign rg_valid_or_not_serverAdapterB_cnt_11_PLUS_IF__ETC___d317 =
	     rg_valid_or_not_serverAdapterB_cnt +
	     (WILL_FIRE_RL_rg_valid_or_not_serverAdapterB_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (CAN_FIRE_RL_rl_prediction_output ? 3'd7 : 3'd0) ;
  assign rg_valid_or_not_serverAdapterB_cnt_11_SLT_2___d544 =
	     (rg_valid_or_not_serverAdapterB_cnt ^ 3'h4) < 3'd6 ;
  assign v__h13673 =
	     rg_tag_serverAdapterA_outDataCore$EMPTY_N ?
	       rg_tag_serverAdapterA_outDataCore$D_OUT :
	       rg_tag_memory$DOA ;
  assign v__h15145 =
	     rg_state_of_branch_instrn_serverAdapterB_outDataCore$EMPTY_N ?
	       rg_state_of_branch_instrn_serverAdapterB_outDataCore$D_OUT :
	       rg_state_of_branch_instrn_memory$DOB ;
  assign v__h15233 =
	     rg_tag_serverAdapterB_outDataCore$EMPTY_N ?
	       rg_tag_serverAdapterB_outDataCore$D_OUT :
	       rg_tag_memory$DOB ;
  assign v__h15368 =
	     rg_target_addr_serverAdapterB_outDataCore$EMPTY_N ?
	       rg_target_addr_serverAdapterB_outDataCore$D_OUT :
	       rg_target_addr_memory$DOB ;
  assign x3__h14040 =
	     rg_state_of_branch_instrn_serverAdapterA_outData_outData$wget -
	     2'd1 ;
  assign x3__h14343 =
	     rg_state_of_branch_instrn_serverAdapterA_outData_outData$wget +
	     2'd1 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_counter <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_current_prediction <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_currentpc_ <= `BSV_ASSIGNMENT_DELAY 32'h00001000;
	rg_fire_once <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_initialize <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_state_of_branch_instrn_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	rg_state_of_branch_instrn_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 1'b0 /* unspecified value */  };
	rg_state_of_branch_instrn_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	rg_state_of_branch_instrn_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 1'b0 /* unspecified value */  };
	rg_tag_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	rg_tag_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 1'b0 /* unspecified value */  };
	rg_tag_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	rg_tag_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 1'b0 /* unspecified value */  };
	rg_target_addr_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	rg_target_addr_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 1'b0 /* unspecified value */  };
	rg_target_addr_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	rg_target_addr_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 1'b0 /* unspecified value */  };
	rg_training_addr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_training_fire <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_training_index <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_training_pred <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_training_tag <= `BSV_ASSIGNMENT_DELAY 24'd0;
	rg_valid_or_not_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	rg_valid_or_not_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 1'b0 /* unspecified value */  };
	rg_valid_or_not_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	rg_valid_or_not_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 1'b0 /* unspecified value */  };
	wr_fire_me <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (rg_counter$EN)
	  rg_counter <= `BSV_ASSIGNMENT_DELAY rg_counter$D_IN;
	if (rg_current_prediction$EN)
	  rg_current_prediction <= `BSV_ASSIGNMENT_DELAY
	      rg_current_prediction$D_IN;
	if (rg_currentpc_$EN)
	  rg_currentpc_ <= `BSV_ASSIGNMENT_DELAY rg_currentpc_$D_IN;
	if (rg_fire_once$EN)
	  rg_fire_once <= `BSV_ASSIGNMENT_DELAY rg_fire_once$D_IN;
	if (rg_initialize$EN)
	  rg_initialize <= `BSV_ASSIGNMENT_DELAY rg_initialize$D_IN;
	if (rg_state_of_branch_instrn_serverAdapterA_cnt$EN)
	  rg_state_of_branch_instrn_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      rg_state_of_branch_instrn_serverAdapterA_cnt$D_IN;
	if (rg_state_of_branch_instrn_serverAdapterA_s1$EN)
	  rg_state_of_branch_instrn_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      rg_state_of_branch_instrn_serverAdapterA_s1$D_IN;
	if (rg_state_of_branch_instrn_serverAdapterB_cnt$EN)
	  rg_state_of_branch_instrn_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      rg_state_of_branch_instrn_serverAdapterB_cnt$D_IN;
	if (rg_state_of_branch_instrn_serverAdapterB_s1$EN)
	  rg_state_of_branch_instrn_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      rg_state_of_branch_instrn_serverAdapterB_s1$D_IN;
	if (rg_tag_serverAdapterA_cnt$EN)
	  rg_tag_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      rg_tag_serverAdapterA_cnt$D_IN;
	if (rg_tag_serverAdapterA_s1$EN)
	  rg_tag_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      rg_tag_serverAdapterA_s1$D_IN;
	if (rg_tag_serverAdapterB_cnt$EN)
	  rg_tag_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      rg_tag_serverAdapterB_cnt$D_IN;
	if (rg_tag_serverAdapterB_s1$EN)
	  rg_tag_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      rg_tag_serverAdapterB_s1$D_IN;
	if (rg_target_addr_serverAdapterA_cnt$EN)
	  rg_target_addr_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      rg_target_addr_serverAdapterA_cnt$D_IN;
	if (rg_target_addr_serverAdapterA_s1$EN)
	  rg_target_addr_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      rg_target_addr_serverAdapterA_s1$D_IN;
	if (rg_target_addr_serverAdapterB_cnt$EN)
	  rg_target_addr_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      rg_target_addr_serverAdapterB_cnt$D_IN;
	if (rg_target_addr_serverAdapterB_s1$EN)
	  rg_target_addr_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      rg_target_addr_serverAdapterB_s1$D_IN;
	if (rg_training_addr$EN)
	  rg_training_addr <= `BSV_ASSIGNMENT_DELAY rg_training_addr$D_IN;
	if (rg_training_fire$EN)
	  rg_training_fire <= `BSV_ASSIGNMENT_DELAY rg_training_fire$D_IN;
	if (rg_training_index$EN)
	  rg_training_index <= `BSV_ASSIGNMENT_DELAY rg_training_index$D_IN;
	if (rg_training_pred$EN)
	  rg_training_pred <= `BSV_ASSIGNMENT_DELAY rg_training_pred$D_IN;
	if (rg_training_tag$EN)
	  rg_training_tag <= `BSV_ASSIGNMENT_DELAY rg_training_tag$D_IN;
	if (rg_valid_or_not_serverAdapterA_cnt$EN)
	  rg_valid_or_not_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      rg_valid_or_not_serverAdapterA_cnt$D_IN;
	if (rg_valid_or_not_serverAdapterA_s1$EN)
	  rg_valid_or_not_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      rg_valid_or_not_serverAdapterA_s1$D_IN;
	if (rg_valid_or_not_serverAdapterB_cnt$EN)
	  rg_valid_or_not_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      rg_valid_or_not_serverAdapterB_cnt$D_IN;
	if (rg_valid_or_not_serverAdapterB_s1$EN)
	  rg_valid_or_not_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      rg_valid_or_not_serverAdapterB_s1$D_IN;
	if (wr_fire_me$EN)
	  wr_fire_me <= `BSV_ASSIGNMENT_DELAY wr_fire_me$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_counter = 8'hAA;
    rg_current_prediction = 1'h0;
    rg_currentpc_ = 32'hAAAAAAAA;
    rg_fire_once = 1'h0;
    rg_initialize = 1'h0;
    rg_state_of_branch_instrn_serverAdapterA_cnt = 3'h2;
    rg_state_of_branch_instrn_serverAdapterA_s1 = 2'h2;
    rg_state_of_branch_instrn_serverAdapterB_cnt = 3'h2;
    rg_state_of_branch_instrn_serverAdapterB_s1 = 2'h2;
    rg_tag_serverAdapterA_cnt = 3'h2;
    rg_tag_serverAdapterA_s1 = 2'h2;
    rg_tag_serverAdapterB_cnt = 3'h2;
    rg_tag_serverAdapterB_s1 = 2'h2;
    rg_target_addr_serverAdapterA_cnt = 3'h2;
    rg_target_addr_serverAdapterA_s1 = 2'h2;
    rg_target_addr_serverAdapterB_cnt = 3'h2;
    rg_target_addr_serverAdapterB_s1 = 2'h2;
    rg_training_addr = 32'hAAAAAAAA;
    rg_training_fire = 1'h0;
    rg_training_index = 8'hAA;
    rg_training_pred = 1'h0;
    rg_training_tag = 24'hAAAAAA;
    rg_valid_or_not_serverAdapterA_cnt = 3'h2;
    rg_valid_or_not_serverAdapterA_s1 = 2'h2;
    rg_valid_or_not_serverAdapterB_cnt = 3'h2;
    rg_valid_or_not_serverAdapterB_s1 = 2'h2;
    wr_fire_me = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__training)
	begin
	  v__h16390 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__training) $display(v__h16390, "\tBPU: Training method called");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rg_prediction_request)
	begin
	  v__h14467 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rg_prediction_request)
	$display(v__h14467,
		 "\tBPU: Sending request after flush Index: %h Tag: %h",
		 rg_currentpc_[7:0],
		 rg_currentpc_[31:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterA_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rg_state_of_branch_instrn_serverAdapterB_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rg_target_addr_serverAdapterA_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rg_target_addr_serverAdapterB_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rg_valid_or_not_serverAdapterA_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rg_valid_or_not_serverAdapterB_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rg_tag_serverAdapterA_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_training_response &&
	  rg_tag_serverAdapterA_outData_outData_wget__22_ETC___d524 &&
	  !rg_training_pred &&
	  rg_state_of_branch_instrn_serverAdapterA_outData_outData$wget !=
	  2'd3)
	begin
	  v__h14386 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_training_response &&
	  rg_tag_serverAdapterA_outData_outData_wget__22_ETC___d524 &&
	  !rg_training_pred &&
	  rg_state_of_branch_instrn_serverAdapterA_outData_outData$wget !=
	  2'd3)
	$display(v__h14386,
		 "\tBPU: Training PC:%h as old Taken in index: %h tag: %h",
		 { rg_training_tag, rg_training_index },
		 rg_training_index,
		 rg_training_tag);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_training_response &&
	  rg_tag_serverAdapterA_outData_outData_wget__22_ETC___d524 &&
	  rg_training_pred &&
	  rg_state_of_branch_instrn_serverAdapterA_outData_outData$wget !=
	  2'd0)
	begin
	  v__h14410 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_training_response &&
	  rg_tag_serverAdapterA_outData_outData_wget__22_ETC___d524 &&
	  rg_training_pred &&
	  rg_state_of_branch_instrn_serverAdapterA_outData_outData$wget !=
	  2'd0)
	$display(v__h14410,
		 "\tBPU: Training PC:%h as old NotTaken in index: %h tag: %h",
		 { rg_training_tag, rg_training_index },
		 rg_training_index,
		 rg_training_tag);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_training_response &&
	  !rg_tag_serverAdapterA_outData_outData_wget__22_ETC___d524 &&
	  rg_training_pred)
	begin
	  v__h14300 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_training_response &&
	  !rg_tag_serverAdapterA_outData_outData_wget__22_ETC___d524 &&
	  rg_training_pred)
	$display(v__h14300,
		 "\tBPU: Training PC:%h as New NotTaken in index: %h with tag: %h",
		 { rg_training_tag, rg_training_index },
		 rg_training_index,
		 rg_training_tag);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_training_response &&
	  !rg_tag_serverAdapterA_outData_outData_wget__22_ETC___d524 &&
	  !rg_training_pred)
	begin
	  v__h14170 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_training_response &&
	  !rg_tag_serverAdapterA_outData_outData_wget__22_ETC___d524 &&
	  !rg_training_pred)
	$display(v__h14170,
		 "\tBPU: Training PC:%h as New Taken in index: %h with tag: %h",
		 { rg_training_tag, rg_training_index },
		 rg_training_index,
		 rg_training_tag);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rg_tag_serverAdapterB_overRun)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_prediction_output &&
	  rg_valid_or_not_serverAdapterB_outData_outData$wget &&
	  !rg_state_of_branch_instrn_serverAdapterB_outDa_ETC___d590 &&
	  rg_tag_serverAdapterB_outData_outData_wget__93_ETC___d594)
	begin
	  v__h15383 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_prediction_output &&
	  rg_valid_or_not_serverAdapterB_outData_outData$wget &&
	  !rg_state_of_branch_instrn_serverAdapterB_outDa_ETC___d590 &&
	  rg_tag_serverAdapterB_outData_outData_wget__93_ETC___d594)
	$display(v__h15383,
		 "\tBPU: Enquing PC Taken : %h Index: %h Tag: %h",
		 rg_currentpc_,
		 rg_currentpc_[7:0],
		 rg_currentpc_[31:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_prediction_output &&
	  (!rg_valid_or_not_serverAdapterB_outData_outData$wget ||
	   rg_state_of_branch_instrn_serverAdapterB_outDa_ETC___d590 ||
	   !rg_tag_serverAdapterB_outData_outData_wget__93_ETC___d594))
	begin
	  v__h15518 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_prediction_output &&
	  (!rg_valid_or_not_serverAdapterB_outData_outData$wget ||
	   rg_state_of_branch_instrn_serverAdapterB_outDa_ETC___d590 ||
	   !rg_tag_serverAdapterB_outData_outData_wget__93_ETC___d594))
	$display(v__h15518,
		 "\tBPU: Enquing PC Not Taken : %h Index: %h Tag: %h",
		 rg_currentpc_,
		 rg_currentpc_[7:0],
		 rg_currentpc_[31:8]);
  end
  // synopsys translate_on
endmodule  // mkbpu_bimodal

