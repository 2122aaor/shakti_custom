//
// Generated by Bluespec Compiler, version 2015.09.beta2 (build 34689, 2015-09-07)
//
// On Mon Dec 19 16:37:05 IST 2016
//
//
// Ports:
// Name                         I/O  size props
// fn_branch                      O   263
// fn_branch__dest_addr           I     5
// fn_branch__opcode              I     5
// fn_branch__funct3              I     3
// fn_branch__current_pc          I    64
// fn_branch__immediate_value     I    20
// fn_branch__operand1            I    64
// fn_branch__operand2            I    64
// fn_branch__prediction          I     1
//
// Combinational paths from inputs to outputs:
//   (fn_branch__dest_addr,
//    fn_branch__opcode,
//    fn_branch__funct3,
//    fn_branch__current_pc,
//    fn_branch__immediate_value,
//    fn_branch__operand1,
//    fn_branch__operand2,
//    fn_branch__prediction) -> fn_branch
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module module_fn_branch(fn_branch__dest_addr,
			fn_branch__opcode,
			fn_branch__funct3,
			fn_branch__current_pc,
			fn_branch__immediate_value,
			fn_branch__operand1,
			fn_branch__operand2,
			fn_branch__prediction,
			fn_branch);
  // value method fn_branch
  input  [4 : 0] fn_branch__dest_addr;
  input  [4 : 0] fn_branch__opcode;
  input  [2 : 0] fn_branch__funct3;
  input  [63 : 0] fn_branch__current_pc;
  input  [19 : 0] fn_branch__immediate_value;
  input  [63 : 0] fn_branch__operand1;
  input  [63 : 0] fn_branch__operand2;
  input  fn_branch__prediction;
  output [262 : 0] fn_branch;

  // signals for module outputs
  wire [262 : 0] fn_branch;

  // remaining internal signals
  reg [63 : 0] CASE_fn_branch__opcode_0b11001_fn_branch__curr_ETC__q2,
	       x__h112;
  reg [4 : 0] CASE_fn_branch__opcode_0b11001_fn_branch__dest_ETC__q3;
  reg IF_fn_branch__funct3_EQ_0b0_1_THEN_NOT_fn_bran_ETC___d48,
      IF_fn_branch__funct3_EQ_0b0_1_THEN_fn_branch___ETC___d65;
  wire [63 : 0] IF_fn_branch__opcode_EQ_0b11001_OR_fn_branch___ETC___d80,
		fn_branch__current_pc_PLUS_4___d4,
		lv_effective__h158,
		lv_effective__h96,
		lv_target_offset5_PLUS_fn_branch__operand1__q1,
		lv_target_offset__h95;
  wire NOT_fn_branch__prediction_3_AND_fn_branch__opc_ETC___d71,
       fn_branch__opcode_EQ_0b11001_OR_fn_branch__pre_ETC___d78,
       fn_branch__operand1_BIT_63_6_EQ_fn_branch__ope_ETC___d28,
       fn_branch__operand1_EQ_fn_branch__operand2___d22,
       fn_branch__operand1_ULT_fn_branch__operand2___d30,
       fn_branch__prediction_OR_NOT_fn_branch__opcode_ETC___d75;

  // value method fn_branch
  assign fn_branch =
	     { CASE_fn_branch__opcode_0b11001_fn_branch__curr_ETC__q2,
	       CASE_fn_branch__opcode_0b11001_fn_branch__dest_ETC__q3,
	       fn_branch__current_pc,
	       x__h112,
	       fn_branch__opcode != 5'b11011 &&
	       fn_branch__opcode != 5'b11001 &&
	       (fn_branch__opcode != 5'b11000 ||
		IF_fn_branch__funct3_EQ_0b0_1_THEN_NOT_fn_bran_ETC___d48),
	       fn_branch__opcode != 5'b11001 &&
	       NOT_fn_branch__prediction_3_AND_fn_branch__opc_ETC___d71,
	       IF_fn_branch__opcode_EQ_0b11001_OR_fn_branch___ETC___d80 } ;

  // remaining internal signals
  assign IF_fn_branch__opcode_EQ_0b11001_OR_fn_branch___ETC___d80 =
	     (fn_branch__opcode == 5'b11001 ||
	      fn_branch__prediction_OR_NOT_fn_branch__opcode_ETC___d75) ?
	       (fn_branch__opcode_EQ_0b11001_OR_fn_branch__pre_ETC___d78 ?
		  x__h112 :
		  fn_branch__current_pc_PLUS_4___d4) :
	       x__h112 ;
  assign NOT_fn_branch__prediction_3_AND_fn_branch__opc_ETC___d71 =
	     !fn_branch__prediction &&
	     (fn_branch__opcode == 5'b11011 ||
	      fn_branch__opcode == 5'b11000 &&
	      IF_fn_branch__funct3_EQ_0b0_1_THEN_fn_branch___ETC___d65) ||
	     fn_branch__prediction && fn_branch__opcode != 5'b11011 &&
	     (fn_branch__opcode != 5'b11000 ||
	      IF_fn_branch__funct3_EQ_0b0_1_THEN_NOT_fn_bran_ETC___d48) ;
  assign fn_branch__current_pc_PLUS_4___d4 = fn_branch__current_pc + 64'd4 ;
  assign fn_branch__opcode_EQ_0b11001_OR_fn_branch__pre_ETC___d78 =
	     fn_branch__opcode == 5'b11001 ||
	     fn_branch__prediction &&
	     (fn_branch__opcode == 5'b11011 ||
	      fn_branch__opcode == 5'b11000 &&
	      IF_fn_branch__funct3_EQ_0b0_1_THEN_fn_branch___ETC___d65) ;
  assign fn_branch__operand1_BIT_63_6_EQ_fn_branch__ope_ETC___d28 =
	     fn_branch__operand1[63] == fn_branch__operand2[63] ;
  assign fn_branch__operand1_EQ_fn_branch__operand2___d22 =
	     fn_branch__operand1 == fn_branch__operand2 ;
  assign fn_branch__operand1_ULT_fn_branch__operand2___d30 =
	     fn_branch__operand1 < fn_branch__operand2 ;
  assign fn_branch__prediction_OR_NOT_fn_branch__opcode_ETC___d75 =
	     (fn_branch__prediction ||
	      fn_branch__opcode != 5'b11011 &&
	      (fn_branch__opcode != 5'b11000 ||
	       IF_fn_branch__funct3_EQ_0b0_1_THEN_NOT_fn_bran_ETC___d48)) &&
	     (!fn_branch__prediction || fn_branch__opcode == 5'b11011 ||
	      fn_branch__opcode == 5'b11000 &&
	      IF_fn_branch__funct3_EQ_0b0_1_THEN_fn_branch___ETC___d65) ;
  assign lv_effective__h158 =
	     { lv_target_offset__h95[62:0], 1'd0 } + fn_branch__current_pc ;
  assign lv_effective__h96 =
	     { lv_target_offset5_PLUS_fn_branch__operand1__q1[63:1], 1'b0 } ;
  assign lv_target_offset5_PLUS_fn_branch__operand1__q1 =
	     lv_target_offset__h95 + fn_branch__operand1 ;
  assign lv_target_offset__h95 =
	     { {44{fn_branch__immediate_value[19]}},
	       fn_branch__immediate_value } ;
  always@(fn_branch__opcode or lv_effective__h158 or lv_effective__h96)
  begin
    case (fn_branch__opcode)
      5'b11000, 5'b11011: x__h112 = lv_effective__h158;
      5'b11001: x__h112 = lv_effective__h96;
      default: x__h112 = 64'd0;
    endcase
  end
  always@(fn_branch__funct3 or
	  fn_branch__operand1_ULT_fn_branch__operand2___d30 or
	  fn_branch__operand1_EQ_fn_branch__operand2___d22 or
	  fn_branch__operand1_BIT_63_6_EQ_fn_branch__ope_ETC___d28 or
	  fn_branch__operand1)
  begin
    case (fn_branch__funct3)
      3'b0:
	  IF_fn_branch__funct3_EQ_0b0_1_THEN_fn_branch___ETC___d65 =
	      fn_branch__operand1_EQ_fn_branch__operand2___d22;
      3'b001:
	  IF_fn_branch__funct3_EQ_0b0_1_THEN_fn_branch___ETC___d65 =
	      !fn_branch__operand1_EQ_fn_branch__operand2___d22;
      3'b100:
	  IF_fn_branch__funct3_EQ_0b0_1_THEN_fn_branch___ETC___d65 =
	      fn_branch__operand1_BIT_63_6_EQ_fn_branch__ope_ETC___d28 &&
	      fn_branch__operand1_ULT_fn_branch__operand2___d30 ||
	      !fn_branch__operand1_BIT_63_6_EQ_fn_branch__ope_ETC___d28 &&
	      fn_branch__operand1[63];
      3'b101:
	  IF_fn_branch__funct3_EQ_0b0_1_THEN_fn_branch___ETC___d65 =
	      fn_branch__operand1_BIT_63_6_EQ_fn_branch__ope_ETC___d28 &&
	      !fn_branch__operand1_ULT_fn_branch__operand2___d30 ||
	      !fn_branch__operand1_BIT_63_6_EQ_fn_branch__ope_ETC___d28 &&
	      !fn_branch__operand1[63];
      3'b110:
	  IF_fn_branch__funct3_EQ_0b0_1_THEN_fn_branch___ETC___d65 =
	      fn_branch__operand1_ULT_fn_branch__operand2___d30;
      default: IF_fn_branch__funct3_EQ_0b0_1_THEN_fn_branch___ETC___d65 =
		   fn_branch__funct3 == 3'b111 &&
		   !fn_branch__operand1_ULT_fn_branch__operand2___d30;
    endcase
  end
  always@(fn_branch__funct3 or
	  fn_branch__operand1_ULT_fn_branch__operand2___d30 or
	  fn_branch__operand1_EQ_fn_branch__operand2___d22 or
	  fn_branch__operand1_BIT_63_6_EQ_fn_branch__ope_ETC___d28 or
	  fn_branch__operand1)
  begin
    case (fn_branch__funct3)
      3'b0:
	  IF_fn_branch__funct3_EQ_0b0_1_THEN_NOT_fn_bran_ETC___d48 =
	      !fn_branch__operand1_EQ_fn_branch__operand2___d22;
      3'b001:
	  IF_fn_branch__funct3_EQ_0b0_1_THEN_NOT_fn_bran_ETC___d48 =
	      fn_branch__operand1_EQ_fn_branch__operand2___d22;
      3'b100:
	  IF_fn_branch__funct3_EQ_0b0_1_THEN_NOT_fn_bran_ETC___d48 =
	      (!fn_branch__operand1_BIT_63_6_EQ_fn_branch__ope_ETC___d28 ||
	       !fn_branch__operand1_ULT_fn_branch__operand2___d30) &&
	      (fn_branch__operand1_BIT_63_6_EQ_fn_branch__ope_ETC___d28 ||
	       !fn_branch__operand1[63]);
      3'b101:
	  IF_fn_branch__funct3_EQ_0b0_1_THEN_NOT_fn_bran_ETC___d48 =
	      (!fn_branch__operand1_BIT_63_6_EQ_fn_branch__ope_ETC___d28 ||
	       fn_branch__operand1_ULT_fn_branch__operand2___d30) &&
	      (fn_branch__operand1_BIT_63_6_EQ_fn_branch__ope_ETC___d28 ||
	       fn_branch__operand1[63]);
      3'b110:
	  IF_fn_branch__funct3_EQ_0b0_1_THEN_NOT_fn_bran_ETC___d48 =
	      !fn_branch__operand1_ULT_fn_branch__operand2___d30;
      default: IF_fn_branch__funct3_EQ_0b0_1_THEN_NOT_fn_bran_ETC___d48 =
		   fn_branch__funct3 != 3'b111 ||
		   fn_branch__operand1_ULT_fn_branch__operand2___d30;
    endcase
  end
  always@(fn_branch__opcode or fn_branch__current_pc_PLUS_4___d4)
  begin
    case (fn_branch__opcode)
      5'b11001, 5'b11011:
	  CASE_fn_branch__opcode_0b11001_fn_branch__curr_ETC__q2 =
	      fn_branch__current_pc_PLUS_4___d4;
      default: CASE_fn_branch__opcode_0b11001_fn_branch__curr_ETC__q2 = 64'd0;
    endcase
  end
  always@(fn_branch__opcode or fn_branch__dest_addr)
  begin
    case (fn_branch__opcode)
      5'b11001, 5'b11011:
	  CASE_fn_branch__opcode_0b11001_fn_branch__dest_ETC__q3 =
	      fn_branch__dest_addr;
      default: CASE_fn_branch__opcode_0b11001_fn_branch__dest_ETC__q3 = 5'd0;
    endcase
  end
endmodule  // module_fn_branch

