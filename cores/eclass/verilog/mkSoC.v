//
// Generated by Bluespec Compiler, version 2017.03.beta1 (build 35049, 2017-03-16)
//
// On Thu Apr  6 04:41:57 IST 2017
//
//
// Ports:
// Name                         I/O  size props
// RDY_uart_ifc_sin               O     1 const
// uart_ifc_sout                  O     1 reg
// RDY_uart_ifc_sout              O     1 const
// uart_ifc_busy                  O     1
// RDY_uart_ifc_busy              O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// uart_ifc_sin_in                I     1 reg
// EN_uart_ifc_sin                I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkSoC(CLK,
	     RST_N,

	     uart_ifc_sin_in,
	     EN_uart_ifc_sin,
	     RDY_uart_ifc_sin,

	     uart_ifc_sout,
	     RDY_uart_ifc_sout,

	     uart_ifc_busy,
	     RDY_uart_ifc_busy);
  input  CLK;
  input  RST_N;

  // action method uart_ifc_sin
  input  uart_ifc_sin_in;
  input  EN_uart_ifc_sin;
  output RDY_uart_ifc_sin;

  // value method uart_ifc_sout
  output uart_ifc_sout;
  output RDY_uart_ifc_sout;

  // value method uart_ifc_busy
  output uart_ifc_busy;
  output RDY_uart_ifc_busy;

  // signals for module outputs
  wire RDY_uart_ifc_busy,
       RDY_uart_ifc_sin,
       RDY_uart_ifc_sout,
       uart_ifc_busy,
       uart_ifc_sout;

  // inlined wires
  reg [2 : 0] slave_mem_data_ifc_size_wire$wget;
  reg slave_mem_data_ifc_write_wire$wget;
  wire [110 : 0] config_memory_ff_reqs_rv$port0__write_1,
		 config_memory_ff_reqs_rv$port1__read,
		 config_memory_ff_reqs_rv$port1__write_1,
		 config_memory_ff_reqs_rv$port2__read,
		 masterX_0_fifo_rx_rv$port0__write_1,
		 masterX_0_fifo_rx_rv$port1__read,
		 masterX_0_fifo_rx_rv$port2__read,
		 masterX_1_fifo_rx_rv$port2__read,
		 mem_ff_reqs_rv$port0__write_1,
		 mem_ff_reqs_rv$port1__read,
		 mem_ff_reqs_rv$port2__read,
		 proc_f_bus_reqs_rv$port0__write_1,
		 proc_f_bus_reqs_rv$port1__read,
		 proc_f_bus_reqs_rv$port2__read,
		 slave_mem_config_fifo_tx_rv$port0__write_1,
		 slave_mem_config_fifo_tx_rv$port1__read,
		 slave_mem_config_fifo_tx_rv$port2__read,
		 slave_mem_data_fifo_tx_rv$port0__write_1,
		 slave_mem_data_fifo_tx_rv$port1__read,
		 slave_mem_data_fifo_tx_rv$port2__read,
		 slave_rtc_fifo_tx_rv$port0__write_1,
		 slave_rtc_fifo_tx_rv$port1__read,
		 slave_rtc_fifo_tx_rv$port2__read;
  wire [58 : 0] config_memory_ff_rsps_rv$port0__write_1,
		config_memory_ff_rsps_rv$port1__read,
		config_memory_ff_rsps_rv$port1__write_1,
		config_memory_ff_rsps_rv$port2__read,
		mem_ff_rsps_rv$port0__write_1,
		mem_ff_rsps_rv$port1__read,
		mem_ff_rsps_rv$port2__read,
		proc_f_bus_rsps_rv$port0__write_1,
		proc_f_bus_rsps_rv$port1__read,
		proc_f_bus_rsps_rv$port2__read,
		slave_mem_config_fifo_rx_rv$port0__write_1,
		slave_mem_config_fifo_rx_rv$port1__read,
		slave_mem_config_fifo_rx_rv$port2__read,
		slave_mem_data_fifo_rx_rv$port0__write_1,
		slave_mem_data_fifo_rx_rv$port1__read,
		slave_mem_data_fifo_rx_rv$port2__read,
		slave_rtc_fifo_rx_rv$port0__write_1,
		slave_rtc_fifo_rx_rv$port1__read,
		slave_rtc_fifo_rx_rv$port2__read;
  wire [57 : 0] masterX_0_fifo_tx_fifof_enqw$wget,
		masterX_1_fifo_tx_fifof_enqw$wget;
  wire [35 : 0] masterX_0_ifc_response$wget,
		masterX_1_ifc_response$wget,
		slave_mem_config_ifc_response_wire$wget,
		slave_mem_data_ifc_response_wire$wget,
		slave_rtc_ifc_response_wire$wget;
  wire [5 : 0] rtc_pendingReq$port0__write_1,
	       rtc_pendingReq$port1__read,
	       rtc_pendingReq$port1__write_1,
	       rtc_pendingReq$port2__read;
  wire [2 : 0] ahb_bus_s_map_addr_0$wget, ahb_bus_s_map_addr_1$wget;
  wire [1 : 0] ahb_bus_arbiter_dgrant_vector_wire$wget,
	       ahb_bus_arbiter_grant_vector_wire$wget,
	       ahb_bus_arbiter_hmaster_wire$wget,
	       ahb_bus_dummys_1_transfer_wire$wget,
	       masterX_0_ifc_fifo_op_x_wire$wget,
	       masterX_0_ifc_response_wire$wget,
	       masterX_1_ifc_fifo_op_x_wire$wget;
  wire ahb_bus_dummys_0_select_wire$wget,
       ahb_bus_dummys_1_select_wire$wget,
       ahb_bus_monitor_hready$wget,
       config_memory_rg_mem_state$port1__read,
       config_memory_rg_mem_state$port2__read,
       masterX_0_fifo_rx_rv$EN_port1__write,
       masterX_0_ifc_fifo_op_dequeueing$whas,
       masterX_0_lock_wire$whas,
       masterX_0_response_wire$whas,
       masterX_1_fifo_rx_rv$EN_port1__write,
       masterX_1_ifc_fifo_op_dequeueing$whas,
       masterX_1_lock_wire$whas,
       masterX_1_response_wire$whas,
       mem_rg_mem_state$port1__read,
       mem_rg_mem_state$port2__read,
       proc_f_bus_reqs_rv$EN_port0__write,
       rtc_pendingReq$EN_port1__write,
       slave_mem_config_fifo_op_rv$port1__read,
       slave_mem_config_fifo_op_rv$port2__read,
       slave_mem_data_fifo_op_rv$port1__read,
       slave_mem_data_fifo_op_rv$port2__read,
       slave_rtc_fifo_op_rv$port1__read,
       slave_rtc_fifo_op_rv$port2__read,
       start_reg_2$whas,
       state_set_pw$whas;

  // register ahb_bus_arbiter_dgrant_vector_reg
  reg [1 : 0] ahb_bus_arbiter_dgrant_vector_reg;
  wire [1 : 0] ahb_bus_arbiter_dgrant_vector_reg$D_IN;
  wire ahb_bus_arbiter_dgrant_vector_reg$EN;

  // register ahb_bus_arbiter_grant_vector_reg
  reg [1 : 0] ahb_bus_arbiter_grant_vector_reg;
  wire [1 : 0] ahb_bus_arbiter_grant_vector_reg$D_IN;
  wire ahb_bus_arbiter_grant_vector_reg$EN;

  // register ahb_bus_arbiter_hmaster_reg
  reg [1 : 0] ahb_bus_arbiter_hmaster_reg;
  wire [1 : 0] ahb_bus_arbiter_hmaster_reg$D_IN;
  wire ahb_bus_arbiter_hmaster_reg$EN;

  // register ahb_bus_arbiter_priority_vector
  reg [1 : 0] ahb_bus_arbiter_priority_vector;
  wire [1 : 0] ahb_bus_arbiter_priority_vector$D_IN;
  wire ahb_bus_arbiter_priority_vector$EN;

  // register ahb_bus_dummy_select_reg
  reg ahb_bus_dummy_select_reg;
  wire ahb_bus_dummy_select_reg$D_IN, ahb_bus_dummy_select_reg$EN;

  // register ahb_bus_dummy_transfer_reg
  reg [1 : 0] ahb_bus_dummy_transfer_reg;
  wire [1 : 0] ahb_bus_dummy_transfer_reg$D_IN;
  wire ahb_bus_dummy_transfer_reg$EN;

  // register ahb_bus_dummys_0_select_reg
  reg ahb_bus_dummys_0_select_reg;
  wire ahb_bus_dummys_0_select_reg$D_IN, ahb_bus_dummys_0_select_reg$EN;

  // register ahb_bus_dummys_0_transfer_reg
  reg [1 : 0] ahb_bus_dummys_0_transfer_reg;
  wire [1 : 0] ahb_bus_dummys_0_transfer_reg$D_IN;
  wire ahb_bus_dummys_0_transfer_reg$EN;

  // register ahb_bus_dummys_1_select_reg
  reg ahb_bus_dummys_1_select_reg;
  wire ahb_bus_dummys_1_select_reg$D_IN, ahb_bus_dummys_1_select_reg$EN;

  // register ahb_bus_dummys_1_transfer_reg
  reg [1 : 0] ahb_bus_dummys_1_transfer_reg;
  wire [1 : 0] ahb_bus_dummys_1_transfer_reg$D_IN;
  wire ahb_bus_dummys_1_transfer_reg$EN;

  // register ahb_bus_hmaster_addr
  reg [1 : 0] ahb_bus_hmaster_addr;
  wire [1 : 0] ahb_bus_hmaster_addr$D_IN;
  wire ahb_bus_hmaster_addr$EN;

  // register ahb_bus_hmaster_data
  reg [1 : 0] ahb_bus_hmaster_data;
  wire [1 : 0] ahb_bus_hmaster_data$D_IN;
  wire ahb_bus_hmaster_data$EN;

  // register ahb_bus_monitor_hready_prev
  reg ahb_bus_monitor_hready_prev;
  wire ahb_bus_monitor_hready_prev$D_IN, ahb_bus_monitor_hready_prev$EN;

  // register ahb_bus_monitor_remaining_reg
  reg [4 : 0] ahb_bus_monitor_remaining_reg;
  wire [4 : 0] ahb_bus_monitor_remaining_reg$D_IN;
  wire ahb_bus_monitor_remaining_reg$EN;

  // register ahb_bus_monitor_request_prev
  reg ahb_bus_monitor_request_prev;
  wire ahb_bus_monitor_request_prev$D_IN, ahb_bus_monitor_request_prev$EN;

  // register ahb_bus_monitor_started
  reg ahb_bus_monitor_started;
  wire ahb_bus_monitor_started$D_IN, ahb_bus_monitor_started$EN;

  // register ahb_bus_monitor_transfer_prev
  reg [1 : 0] ahb_bus_monitor_transfer_prev;
  wire [1 : 0] ahb_bus_monitor_transfer_prev$D_IN;
  wire ahb_bus_monitor_transfer_prev$EN;

  // register ahb_bus_s_map_data_0
  reg [2 : 0] ahb_bus_s_map_data_0;
  wire [2 : 0] ahb_bus_s_map_data_0$D_IN;
  wire ahb_bus_s_map_data_0$EN;

  // register ahb_bus_s_map_data_1
  reg [2 : 0] ahb_bus_s_map_data_1;
  wire [2 : 0] ahb_bus_s_map_data_1$D_IN;
  wire ahb_bus_s_map_data_1$EN;

  // register ahb_bus_s_num_addr_current
  reg [1 : 0] ahb_bus_s_num_addr_current;
  wire [1 : 0] ahb_bus_s_num_addr_current$D_IN;
  wire ahb_bus_s_num_addr_current$EN;

  // register ahb_bus_s_num_data
  reg [1 : 0] ahb_bus_s_num_data;
  wire [1 : 0] ahb_bus_s_num_data$D_IN;
  wire ahb_bus_s_num_data$EN;

  // register config_memory_ff_reqs_rv
  reg [110 : 0] config_memory_ff_reqs_rv;
  wire [110 : 0] config_memory_ff_reqs_rv$D_IN;
  wire config_memory_ff_reqs_rv$EN;

  // register config_memory_ff_rsps_rv
  reg [58 : 0] config_memory_ff_rsps_rv;
  wire [58 : 0] config_memory_ff_rsps_rv$D_IN;
  wire config_memory_ff_rsps_rv$EN;

  // register config_memory_rg_mem_state
  reg config_memory_rg_mem_state;
  wire config_memory_rg_mem_state$D_IN, config_memory_rg_mem_state$EN;

  // register file_arf_dump
  reg [31 : 0] file_arf_dump;
  wire [31 : 0] file_arf_dump$D_IN;
  wire file_arf_dump$EN;

  // register masterX_0_count
  reg [9 : 0] masterX_0_count;
  wire [9 : 0] masterX_0_count$D_IN;
  wire masterX_0_count$EN;

  // register masterX_0_data_reg
  reg [32 : 0] masterX_0_data_reg;
  reg [32 : 0] masterX_0_data_reg$D_IN;
  wire masterX_0_data_reg$EN;

  // register masterX_0_descriptor
  reg [109 : 0] masterX_0_descriptor;
  wire [109 : 0] masterX_0_descriptor$D_IN;
  wire masterX_0_descriptor$EN;

  // register masterX_0_fifo_rx_rv
  reg [110 : 0] masterX_0_fifo_rx_rv;
  wire [110 : 0] masterX_0_fifo_rx_rv$D_IN;
  wire masterX_0_fifo_rx_rv$EN;

  // register masterX_0_fifo_tx_count
  reg [2 : 0] masterX_0_fifo_tx_count;
  wire [2 : 0] masterX_0_fifo_tx_count$D_IN;
  wire masterX_0_fifo_tx_count$EN;

  // register masterX_0_grant_reg
  reg masterX_0_grant_reg;
  wire masterX_0_grant_reg$D_IN, masterX_0_grant_reg$EN;

  // register masterX_0_ifc_fifo_op_cntr_r
  reg [1 : 0] masterX_0_ifc_fifo_op_cntr_r;
  wire [1 : 0] masterX_0_ifc_fifo_op_cntr_r$D_IN;
  wire masterX_0_ifc_fifo_op_cntr_r$EN;

  // register masterX_0_ifc_fifo_op_q_0
  reg [1 : 0] masterX_0_ifc_fifo_op_q_0;
  reg [1 : 0] masterX_0_ifc_fifo_op_q_0$D_IN;
  wire masterX_0_ifc_fifo_op_q_0$EN;

  // register masterX_0_ifc_fifo_op_q_1
  reg [1 : 0] masterX_0_ifc_fifo_op_q_1;
  reg [1 : 0] masterX_0_ifc_fifo_op_q_1$D_IN;
  wire masterX_0_ifc_fifo_op_q_1$EN;

  // register masterX_0_ifc_request_reg
  reg [76 : 0] masterX_0_ifc_request_reg;
  reg [76 : 0] masterX_0_ifc_request_reg$D_IN;
  wire masterX_0_ifc_request_reg$EN;

  // register masterX_0_req_reg
  reg masterX_0_req_reg;
  reg masterX_0_req_reg$D_IN;
  wire masterX_0_req_reg$EN;

  // register masterX_1_count
  reg [9 : 0] masterX_1_count;
  wire [9 : 0] masterX_1_count$D_IN;
  wire masterX_1_count$EN;

  // register masterX_1_data_reg
  reg [32 : 0] masterX_1_data_reg;
  reg [32 : 0] masterX_1_data_reg$D_IN;
  wire masterX_1_data_reg$EN;

  // register masterX_1_descriptor
  reg [109 : 0] masterX_1_descriptor;
  wire [109 : 0] masterX_1_descriptor$D_IN;
  wire masterX_1_descriptor$EN;

  // register masterX_1_fifo_rx_rv
  reg [110 : 0] masterX_1_fifo_rx_rv;
  wire [110 : 0] masterX_1_fifo_rx_rv$D_IN;
  wire masterX_1_fifo_rx_rv$EN;

  // register masterX_1_fifo_tx_count
  reg [2 : 0] masterX_1_fifo_tx_count;
  wire [2 : 0] masterX_1_fifo_tx_count$D_IN;
  wire masterX_1_fifo_tx_count$EN;

  // register masterX_1_grant_reg
  reg masterX_1_grant_reg;
  wire masterX_1_grant_reg$D_IN, masterX_1_grant_reg$EN;

  // register masterX_1_ifc_fifo_op_cntr_r
  reg [1 : 0] masterX_1_ifc_fifo_op_cntr_r;
  wire [1 : 0] masterX_1_ifc_fifo_op_cntr_r$D_IN;
  wire masterX_1_ifc_fifo_op_cntr_r$EN;

  // register masterX_1_ifc_fifo_op_q_0
  reg [1 : 0] masterX_1_ifc_fifo_op_q_0;
  reg [1 : 0] masterX_1_ifc_fifo_op_q_0$D_IN;
  wire masterX_1_ifc_fifo_op_q_0$EN;

  // register masterX_1_ifc_fifo_op_q_1
  reg [1 : 0] masterX_1_ifc_fifo_op_q_1;
  reg [1 : 0] masterX_1_ifc_fifo_op_q_1$D_IN;
  wire masterX_1_ifc_fifo_op_q_1$EN;

  // register masterX_1_ifc_request_reg
  reg [76 : 0] masterX_1_ifc_request_reg;
  reg [76 : 0] masterX_1_ifc_request_reg$D_IN;
  wire masterX_1_ifc_request_reg$EN;

  // register masterX_1_req_reg
  reg masterX_1_req_reg;
  reg masterX_1_req_reg$D_IN;
  wire masterX_1_req_reg$EN;

  // register mem_ff_reqs_rv
  reg [110 : 0] mem_ff_reqs_rv;
  wire [110 : 0] mem_ff_reqs_rv$D_IN;
  wire mem_ff_reqs_rv$EN;

  // register mem_ff_rsps_rv
  reg [58 : 0] mem_ff_rsps_rv;
  wire [58 : 0] mem_ff_rsps_rv$D_IN;
  wire mem_ff_rsps_rv$EN;

  // register mem_rg_mem_state
  reg mem_rg_mem_state;
  wire mem_rg_mem_state$D_IN, mem_rg_mem_state$EN;

  // register proc_burst_length
  reg [9 : 0] proc_burst_length;
  reg [9 : 0] proc_burst_length$D_IN;
  wire proc_burst_length$EN;

  // register proc_f_bus_reqs_rv
  reg [110 : 0] proc_f_bus_reqs_rv;
  wire [110 : 0] proc_f_bus_reqs_rv$D_IN;
  wire proc_f_bus_reqs_rv$EN;

  // register proc_f_bus_rsps_rv
  reg [58 : 0] proc_f_bus_rsps_rv;
  wire [58 : 0] proc_f_bus_rsps_rv$D_IN;
  wire proc_f_bus_rsps_rv$EN;

  // register proc_who
  reg [1 : 0] proc_who;
  reg [1 : 0] proc_who$D_IN;
  wire proc_who$EN;

  // register rg_dump_gpr
  reg [63 : 0] rg_dump_gpr;
  wire [63 : 0] rg_dump_gpr$D_IN;
  wire rg_dump_gpr$EN;

  // register rg_instret
  reg [63 : 0] rg_instret;
  wire [63 : 0] rg_instret$D_IN;
  wire rg_instret$EN;

  // register rg_prev_instret
  reg [63 : 0] rg_prev_instret;
  wire [63 : 0] rg_prev_instret$D_IN;
  wire rg_prev_instret$EN;

  // register rg_xi
  reg [5 : 0] rg_xi;
  wire [5 : 0] rg_xi$D_IN;
  wire rg_xi$EN;

  // register rg_xj
  reg [5 : 0] rg_xj;
  wire [5 : 0] rg_xj$D_IN;
  wire rg_xj$EN;

  // register rtc_counter_cycle
  reg [5 : 0] rtc_counter_cycle;
  wire [5 : 0] rtc_counter_cycle$D_IN;
  wire rtc_counter_cycle$EN;

  // register rtc_pendingReq
  reg [5 : 0] rtc_pendingReq;
  wire [5 : 0] rtc_pendingReq$D_IN;
  wire rtc_pendingReq$EN;

  // register rtc_timeCmpHi
  reg [31 : 0] rtc_timeCmpHi;
  wire [31 : 0] rtc_timeCmpHi$D_IN;
  wire rtc_timeCmpHi$EN;

  // register rtc_timeCmpLo
  reg [31 : 0] rtc_timeCmpLo;
  wire [31 : 0] rtc_timeCmpLo$D_IN;
  wire rtc_timeCmpLo$EN;

  // register rtc_timeRegHi
  reg [31 : 0] rtc_timeRegHi;
  wire [31 : 0] rtc_timeRegHi$D_IN;
  wire rtc_timeRegHi$EN;

  // register rtc_timeRegLo
  reg [31 : 0] rtc_timeRegLo;
  wire [31 : 0] rtc_timeRegLo$D_IN;
  wire rtc_timeRegLo$EN;

  // register running
  reg running;
  wire running$D_IN, running$EN;

  // register slave_mem_config_ctrl_reg
  reg [45 : 0] slave_mem_config_ctrl_reg;
  wire [45 : 0] slave_mem_config_ctrl_reg$D_IN;
  wire slave_mem_config_ctrl_reg$EN;

  // register slave_mem_config_fifo_op_rv
  reg slave_mem_config_fifo_op_rv;
  wire slave_mem_config_fifo_op_rv$D_IN, slave_mem_config_fifo_op_rv$EN;

  // register slave_mem_config_fifo_rx_rv
  reg [58 : 0] slave_mem_config_fifo_rx_rv;
  wire [58 : 0] slave_mem_config_fifo_rx_rv$D_IN;
  wire slave_mem_config_fifo_rx_rv$EN;

  // register slave_mem_config_fifo_tx_rv
  reg [110 : 0] slave_mem_config_fifo_tx_rv;
  wire [110 : 0] slave_mem_config_fifo_tx_rv$D_IN;
  wire slave_mem_config_fifo_tx_rv$EN;

  // register slave_mem_config_first
  reg slave_mem_config_first;
  wire slave_mem_config_first$D_IN, slave_mem_config_first$EN;

  // register slave_mem_config_start
  reg slave_mem_config_start;
  wire slave_mem_config_start$D_IN, slave_mem_config_start$EN;

  // register slave_mem_data_ctrl_reg
  reg [45 : 0] slave_mem_data_ctrl_reg;
  wire [45 : 0] slave_mem_data_ctrl_reg$D_IN;
  wire slave_mem_data_ctrl_reg$EN;

  // register slave_mem_data_fifo_op_rv
  reg slave_mem_data_fifo_op_rv;
  wire slave_mem_data_fifo_op_rv$D_IN, slave_mem_data_fifo_op_rv$EN;

  // register slave_mem_data_fifo_rx_rv
  reg [58 : 0] slave_mem_data_fifo_rx_rv;
  wire [58 : 0] slave_mem_data_fifo_rx_rv$D_IN;
  wire slave_mem_data_fifo_rx_rv$EN;

  // register slave_mem_data_fifo_tx_rv
  reg [110 : 0] slave_mem_data_fifo_tx_rv;
  wire [110 : 0] slave_mem_data_fifo_tx_rv$D_IN;
  wire slave_mem_data_fifo_tx_rv$EN;

  // register slave_mem_data_first
  reg slave_mem_data_first;
  wire slave_mem_data_first$D_IN, slave_mem_data_first$EN;

  // register slave_mem_data_start
  reg slave_mem_data_start;
  wire slave_mem_data_start$D_IN, slave_mem_data_start$EN;

  // register slave_rtc_ctrl_reg
  reg [45 : 0] slave_rtc_ctrl_reg;
  wire [45 : 0] slave_rtc_ctrl_reg$D_IN;
  wire slave_rtc_ctrl_reg$EN;

  // register slave_rtc_fifo_op_rv
  reg slave_rtc_fifo_op_rv;
  wire slave_rtc_fifo_op_rv$D_IN, slave_rtc_fifo_op_rv$EN;

  // register slave_rtc_fifo_rx_rv
  reg [58 : 0] slave_rtc_fifo_rx_rv;
  wire [58 : 0] slave_rtc_fifo_rx_rv$D_IN;
  wire slave_rtc_fifo_rx_rv$EN;

  // register slave_rtc_fifo_tx_rv
  reg [110 : 0] slave_rtc_fifo_tx_rv;
  wire [110 : 0] slave_rtc_fifo_tx_rv$D_IN;
  wire slave_rtc_fifo_tx_rv$EN;

  // register slave_rtc_first
  reg slave_rtc_first;
  wire slave_rtc_first$D_IN, slave_rtc_first$EN;

  // register slave_rtc_start
  reg slave_rtc_start;
  wire slave_rtc_start$D_IN, slave_rtc_start$EN;

  // register start_reg
  reg start_reg;
  wire start_reg$D_IN, start_reg$EN;

  // register start_reg_1
  reg start_reg_1;
  wire start_reg_1$D_IN, start_reg_1$EN;

  // register state_can_overlap
  reg state_can_overlap;
  wire state_can_overlap$D_IN, state_can_overlap$EN;

  // register state_fired
  reg state_fired;
  wire state_fired$D_IN, state_fired$EN;

  // register state_mkFSMstate
  reg [4 : 0] state_mkFSMstate;
  reg [4 : 0] state_mkFSMstate$D_IN;
  wire state_mkFSMstate$EN;

  // ports of submodule config_memory_memory
  wire [31 : 0] config_memory_memory$DI, config_memory_memory$DO;
  wire [9 : 0] config_memory_memory$ADDR;
  wire [3 : 0] config_memory_memory$WE;
  wire config_memory_memory$EN;

  // ports of submodule masterX_0_fifo_tx_fifof_ff
  wire [57 : 0] masterX_0_fifo_tx_fifof_ff$D_IN,
		masterX_0_fifo_tx_fifof_ff$D_OUT;
  wire masterX_0_fifo_tx_fifof_ff$CLR,
       masterX_0_fifo_tx_fifof_ff$DEQ,
       masterX_0_fifo_tx_fifof_ff$EMPTY_N,
       masterX_0_fifo_tx_fifof_ff$ENQ,
       masterX_0_fifo_tx_fifof_ff$FULL_N;

  // ports of submodule masterX_0_fifo_tx_fifof_firstValid
  wire masterX_0_fifo_tx_fifof_firstValid$D_IN,
       masterX_0_fifo_tx_fifof_firstValid$EN,
       masterX_0_fifo_tx_fifof_firstValid$Q_OUT;

  // ports of submodule masterX_0_fifo_tx_levelsValidClr
  wire masterX_0_fifo_tx_levelsValidClr$D_IN,
       masterX_0_fifo_tx_levelsValidClr$EN,
       masterX_0_fifo_tx_levelsValidClr$Q_OUT;

  // ports of submodule masterX_0_fifo_tx_levelsValidDeq
  wire masterX_0_fifo_tx_levelsValidDeq$D_IN,
       masterX_0_fifo_tx_levelsValidDeq$EN,
       masterX_0_fifo_tx_levelsValidDeq$Q_OUT;

  // ports of submodule masterX_0_fifo_tx_levelsValidEnq
  wire masterX_0_fifo_tx_levelsValidEnq$D_IN,
       masterX_0_fifo_tx_levelsValidEnq$EN,
       masterX_0_fifo_tx_levelsValidEnq$Q_OUT;

  // ports of submodule masterX_1_fifo_tx_fifof_ff
  wire [57 : 0] masterX_1_fifo_tx_fifof_ff$D_IN;
  wire masterX_1_fifo_tx_fifof_ff$CLR,
       masterX_1_fifo_tx_fifof_ff$DEQ,
       masterX_1_fifo_tx_fifof_ff$ENQ,
       masterX_1_fifo_tx_fifof_ff$FULL_N;

  // ports of submodule masterX_1_fifo_tx_fifof_firstValid
  wire masterX_1_fifo_tx_fifof_firstValid$D_IN,
       masterX_1_fifo_tx_fifof_firstValid$EN;

  // ports of submodule masterX_1_fifo_tx_levelsValidClr
  wire masterX_1_fifo_tx_levelsValidClr$D_IN,
       masterX_1_fifo_tx_levelsValidClr$EN,
       masterX_1_fifo_tx_levelsValidClr$Q_OUT;

  // ports of submodule masterX_1_fifo_tx_levelsValidDeq
  wire masterX_1_fifo_tx_levelsValidDeq$D_IN,
       masterX_1_fifo_tx_levelsValidDeq$EN,
       masterX_1_fifo_tx_levelsValidDeq$Q_OUT;

  // ports of submodule masterX_1_fifo_tx_levelsValidEnq
  wire masterX_1_fifo_tx_levelsValidEnq$D_IN,
       masterX_1_fifo_tx_levelsValidEnq$EN,
       masterX_1_fifo_tx_levelsValidEnq$Q_OUT;

  // ports of submodule mem_memory
  wire [31 : 0] mem_memory$DI, mem_memory$DO;
  wire [17 : 0] mem_memory$ADDR;
  wire [3 : 0] mem_memory$WE;
  wire mem_memory$EN;

  // ports of submodule proc_core
  wire [109 : 0] proc_core$dmem_ifc_tx_get, proc_core$imem_ifc_tx_get;
  wire [63 : 0] proc_core$debug_ifc_read_instret,
		proc_core$write_counter_time_data;
  wire [57 : 0] proc_core$dmem_ifc_rx_put, proc_core$imem_ifc_rx_put;
  wire [32 : 0] proc_core$debug_ifc_run_continue_mpc,
		proc_core$debug_ifc_run_step_mpc;
  wire [31 : 0] proc_core$debug_ifc_read_exec_pc,
		proc_core$debug_ifc_read_gpr,
		proc_core$debug_ifc_req_read_memW_addr,
		proc_core$debug_ifc_set_verbosity_verbosity,
		proc_core$debug_ifc_write_gpr_d,
		proc_core$debug_ifc_write_memW_addr,
		proc_core$debug_ifc_write_memW_d,
		proc_core$debug_ifc_write_pc_d;
  wire [4 : 0] proc_core$debug_ifc_read_gpr_r,
	       proc_core$debug_ifc_write_gpr_r;
  wire proc_core$EN_debug_ifc_req_read_memW,
       proc_core$EN_debug_ifc_reset,
       proc_core$EN_debug_ifc_reset_complete,
       proc_core$EN_debug_ifc_rsp_read_memW,
       proc_core$EN_debug_ifc_run_continue,
       proc_core$EN_debug_ifc_run_step,
       proc_core$EN_debug_ifc_set_verbosity,
       proc_core$EN_debug_ifc_stop,
       proc_core$EN_debug_ifc_write_gpr,
       proc_core$EN_debug_ifc_write_memW,
       proc_core$EN_debug_ifc_write_pc,
       proc_core$EN_dmem_ifc_rx_put,
       proc_core$EN_dmem_ifc_tx_get,
       proc_core$EN_imem_ifc_rx_put,
       proc_core$EN_imem_ifc_tx_get,
       proc_core$EN_interrupt_ifc_external,
       proc_core$EN_interrupt_ifc_software,
       proc_core$EN_interrupt_ifc_timer,
       proc_core$EN_uart_ifc_sin,
       proc_core$EN_write_counter_time,
       proc_core$RDY_debug_ifc_read_exec_pc,
       proc_core$RDY_debug_ifc_read_gpr,
       proc_core$RDY_debug_ifc_read_instret,
       proc_core$RDY_debug_ifc_reset,
       proc_core$RDY_debug_ifc_reset_complete,
       proc_core$RDY_debug_ifc_run_step,
       proc_core$RDY_debug_ifc_write_pc,
       proc_core$RDY_dmem_ifc_rx_put,
       proc_core$RDY_dmem_ifc_tx_get,
       proc_core$RDY_imem_ifc_rx_put,
       proc_core$RDY_imem_ifc_tx_get,
       proc_core$debug_ifc_reset_complete,
       proc_core$halt,
       proc_core$interrupt_ifc_external_meip,
       proc_core$interrupt_ifc_software_msip,
       proc_core$interrupt_ifc_timer_mtip,
       proc_core$uart_ifc_busy,
       proc_core$uart_ifc_sin_in,
       proc_core$uart_ifc_sout;

  // rule scheduling signals
  wire CAN_FIRE_RL_action_f_init_l263c25,
       CAN_FIRE_RL_action_f_update_l263c25,
       CAN_FIRE_RL_action_l259c18,
       CAN_FIRE_RL_action_l264c37,
       CAN_FIRE_RL_action_l265c33,
       CAN_FIRE_RL_action_l268c18,
       CAN_FIRE_RL_action_l276c17,
       CAN_FIRE_RL_action_l281c17,
       CAN_FIRE_RL_action_l290c17,
       CAN_FIRE_RL_action_l442c25,
       CAN_FIRE_RL_action_l460c49,
       CAN_FIRE_RL_action_l461c37,
       CAN_FIRE_RL_action_l464c52,
       CAN_FIRE_RL_ahb_bus_0_send_grant,
       CAN_FIRE_RL_ahb_bus_0_send_lock,
       CAN_FIRE_RL_ahb_bus_0_send_request,
       CAN_FIRE_RL_ahb_bus_1_send_grant,
       CAN_FIRE_RL_ahb_bus_1_send_lock,
       CAN_FIRE_RL_ahb_bus_1_send_request,
       CAN_FIRE_RL_ahb_bus_arbiter_delay_grant,
       CAN_FIRE_RL_ahb_bus_arbiter_every,
       CAN_FIRE_RL_ahb_bus_broadcast_to_dummys,
       CAN_FIRE_RL_ahb_bus_broadcast_to_masters,
       CAN_FIRE_RL_ahb_bus_broadcast_to_slaves,
       CAN_FIRE_RL_ahb_bus_dummy_every,
       CAN_FIRE_RL_ahb_bus_dummy_update,
       CAN_FIRE_RL_ahb_bus_dummy_updatex,
       CAN_FIRE_RL_ahb_bus_dummys_0_every,
       CAN_FIRE_RL_ahb_bus_dummys_0_update,
       CAN_FIRE_RL_ahb_bus_dummys_0_updatex,
       CAN_FIRE_RL_ahb_bus_dummys_1_every,
       CAN_FIRE_RL_ahb_bus_dummys_1_update,
       CAN_FIRE_RL_ahb_bus_dummys_1_updatex,
       CAN_FIRE_RL_ahb_bus_hready_update,
       CAN_FIRE_RL_ahb_bus_monitor_every,
       CAN_FIRE_RL_ahb_bus_monitor_sample,
       CAN_FIRE_RL_ahb_bus_monitor_send_update,
       CAN_FIRE_RL_ahb_bus_monitor_update_started,
       CAN_FIRE_RL_ahb_bus_requests_0_every,
       CAN_FIRE_RL_ahb_bus_requests_1_every,
       CAN_FIRE_RL_ahb_bus_s_map_addr_update,
       CAN_FIRE_RL_ahb_bus_s_map_addr_update_1,
       CAN_FIRE_RL_ahb_bus_update_grant,
       CAN_FIRE_RL_auto_finish,
       CAN_FIRE_RL_auto_start,
       CAN_FIRE_RL_config_memory_rl_process_requests,
       CAN_FIRE_RL_config_memory_rl_receive_bram_response,
       CAN_FIRE_RL_fsm_start,
       CAN_FIRE_RL_idle_l438c17,
       CAN_FIRE_RL_masterX_0_fifo_tx_do_clear,
       CAN_FIRE_RL_masterX_0_fifo_tx_do_decr,
       CAN_FIRE_RL_masterX_0_fifo_tx_do_incr,
       CAN_FIRE_RL_masterX_0_fifo_tx_fifof_dequeue,
       CAN_FIRE_RL_masterX_0_fifo_tx_fifof_enqueue,
       CAN_FIRE_RL_masterX_0_grab_invalid_response,
       CAN_FIRE_RL_masterX_0_grab_valid_response,
       CAN_FIRE_RL_masterX_0_idle_op,
       CAN_FIRE_RL_masterX_0_ifc_do_enq,
       CAN_FIRE_RL_masterX_0_ifc_every,
       CAN_FIRE_RL_masterX_0_ifc_fifo_op_both,
       CAN_FIRE_RL_masterX_0_ifc_fifo_op_decCtr,
       CAN_FIRE_RL_masterX_0_ifc_fifo_op_incCtr,
       CAN_FIRE_RL_masterX_0_ifc_pre_enq,
       CAN_FIRE_RL_masterX_0_read_op,
       CAN_FIRE_RL_masterX_0_send_request,
       CAN_FIRE_RL_masterX_0_stall,
       CAN_FIRE_RL_masterX_0_stall_op,
       CAN_FIRE_RL_masterX_0_start_op,
       CAN_FIRE_RL_masterX_0_update_grant,
       CAN_FIRE_RL_masterX_0_write_op,
       CAN_FIRE_RL_masterX_1_fifo_tx_do_clear,
       CAN_FIRE_RL_masterX_1_fifo_tx_do_decr,
       CAN_FIRE_RL_masterX_1_fifo_tx_do_incr,
       CAN_FIRE_RL_masterX_1_fifo_tx_fifof_dequeue,
       CAN_FIRE_RL_masterX_1_fifo_tx_fifof_enqueue,
       CAN_FIRE_RL_masterX_1_grab_invalid_response,
       CAN_FIRE_RL_masterX_1_grab_valid_response,
       CAN_FIRE_RL_masterX_1_idle_op,
       CAN_FIRE_RL_masterX_1_ifc_do_enq,
       CAN_FIRE_RL_masterX_1_ifc_every,
       CAN_FIRE_RL_masterX_1_ifc_fifo_op_both,
       CAN_FIRE_RL_masterX_1_ifc_fifo_op_decCtr,
       CAN_FIRE_RL_masterX_1_ifc_fifo_op_incCtr,
       CAN_FIRE_RL_masterX_1_ifc_pre_enq,
       CAN_FIRE_RL_masterX_1_read_op,
       CAN_FIRE_RL_masterX_1_send_request,
       CAN_FIRE_RL_masterX_1_stall,
       CAN_FIRE_RL_masterX_1_stall_op,
       CAN_FIRE_RL_masterX_1_start_op,
       CAN_FIRE_RL_masterX_1_update_grant,
       CAN_FIRE_RL_masterX_1_write_op,
       CAN_FIRE_RL_mem_rl_process_requests,
       CAN_FIRE_RL_mem_rl_receive_bram_response,
       CAN_FIRE_RL_mkConnectionGetPut,
       CAN_FIRE_RL_mkConnectionGetPut_1,
       CAN_FIRE_RL_mkConnectionGetPut_2,
       CAN_FIRE_RL_mkConnectionGetPut_3,
       CAN_FIRE_RL_mkConnectionGetPut_4,
       CAN_FIRE_RL_mkConnectionGetPut_5,
       CAN_FIRE_RL_mkConnectionGetPut_6,
       CAN_FIRE_RL_mkConnectionGetPut_7,
       CAN_FIRE_RL_proc_rl_dmem_request,
       CAN_FIRE_RL_proc_rl_dmem_response,
       CAN_FIRE_RL_proc_rl_imem_request,
       CAN_FIRE_RL_proc_rl_imem_response,
       CAN_FIRE_RL_restart,
       CAN_FIRE_RL_rl_post_interrupt,
       CAN_FIRE_RL_rtc_incrementTimer,
       CAN_FIRE_RL_rtc_rl_count_cycle,
       CAN_FIRE_RL_slave_mem_config_default_response,
       CAN_FIRE_RL_slave_mem_config_first__dreg_update,
       CAN_FIRE_RL_slave_mem_config_grab_ctrl,
       CAN_FIRE_RL_slave_mem_config_grab_response,
       CAN_FIRE_RL_slave_mem_config_not_selected,
       CAN_FIRE_RL_slave_mem_config_send_request,
       CAN_FIRE_RL_slave_mem_data_default_response,
       CAN_FIRE_RL_slave_mem_data_first__dreg_update,
       CAN_FIRE_RL_slave_mem_data_grab_ctrl,
       CAN_FIRE_RL_slave_mem_data_grab_response,
       CAN_FIRE_RL_slave_mem_data_not_selected,
       CAN_FIRE_RL_slave_mem_data_send_request,
       CAN_FIRE_RL_slave_rtc_default_response,
       CAN_FIRE_RL_slave_rtc_first__dreg_update,
       CAN_FIRE_RL_slave_rtc_grab_ctrl,
       CAN_FIRE_RL_slave_rtc_grab_response,
       CAN_FIRE_RL_slave_rtc_not_selected,
       CAN_FIRE_RL_slave_rtc_send_request,
       CAN_FIRE_RL_start_reg__dreg_update,
       CAN_FIRE_RL_state_every,
       CAN_FIRE_RL_state_fired__dreg_update,
       CAN_FIRE_RL_state_handle_abort,
       CAN_FIRE___me_check_114,
       CAN_FIRE___me_check_115,
       CAN_FIRE___me_check_116,
       CAN_FIRE___me_check_117,
       CAN_FIRE___me_check_118,
       CAN_FIRE___me_check_119,
       CAN_FIRE___me_check_120,
       CAN_FIRE___me_check_121,
       CAN_FIRE___me_check_122,
       CAN_FIRE___me_check_123,
       CAN_FIRE___me_check_124,
       CAN_FIRE___me_check_125,
       CAN_FIRE_uart_ifc_sin,
       WILL_FIRE_RL_action_f_init_l263c25,
       WILL_FIRE_RL_action_f_update_l263c25,
       WILL_FIRE_RL_action_l259c18,
       WILL_FIRE_RL_action_l264c37,
       WILL_FIRE_RL_action_l265c33,
       WILL_FIRE_RL_action_l268c18,
       WILL_FIRE_RL_action_l276c17,
       WILL_FIRE_RL_action_l281c17,
       WILL_FIRE_RL_action_l290c17,
       WILL_FIRE_RL_action_l442c25,
       WILL_FIRE_RL_action_l460c49,
       WILL_FIRE_RL_action_l461c37,
       WILL_FIRE_RL_action_l464c52,
       WILL_FIRE_RL_ahb_bus_0_send_grant,
       WILL_FIRE_RL_ahb_bus_0_send_lock,
       WILL_FIRE_RL_ahb_bus_0_send_request,
       WILL_FIRE_RL_ahb_bus_1_send_grant,
       WILL_FIRE_RL_ahb_bus_1_send_lock,
       WILL_FIRE_RL_ahb_bus_1_send_request,
       WILL_FIRE_RL_ahb_bus_arbiter_delay_grant,
       WILL_FIRE_RL_ahb_bus_arbiter_every,
       WILL_FIRE_RL_ahb_bus_broadcast_to_dummys,
       WILL_FIRE_RL_ahb_bus_broadcast_to_masters,
       WILL_FIRE_RL_ahb_bus_broadcast_to_slaves,
       WILL_FIRE_RL_ahb_bus_dummy_every,
       WILL_FIRE_RL_ahb_bus_dummy_update,
       WILL_FIRE_RL_ahb_bus_dummy_updatex,
       WILL_FIRE_RL_ahb_bus_dummys_0_every,
       WILL_FIRE_RL_ahb_bus_dummys_0_update,
       WILL_FIRE_RL_ahb_bus_dummys_0_updatex,
       WILL_FIRE_RL_ahb_bus_dummys_1_every,
       WILL_FIRE_RL_ahb_bus_dummys_1_update,
       WILL_FIRE_RL_ahb_bus_dummys_1_updatex,
       WILL_FIRE_RL_ahb_bus_hready_update,
       WILL_FIRE_RL_ahb_bus_monitor_every,
       WILL_FIRE_RL_ahb_bus_monitor_sample,
       WILL_FIRE_RL_ahb_bus_monitor_send_update,
       WILL_FIRE_RL_ahb_bus_monitor_update_started,
       WILL_FIRE_RL_ahb_bus_requests_0_every,
       WILL_FIRE_RL_ahb_bus_requests_1_every,
       WILL_FIRE_RL_ahb_bus_s_map_addr_update,
       WILL_FIRE_RL_ahb_bus_s_map_addr_update_1,
       WILL_FIRE_RL_ahb_bus_update_grant,
       WILL_FIRE_RL_auto_finish,
       WILL_FIRE_RL_auto_start,
       WILL_FIRE_RL_config_memory_rl_process_requests,
       WILL_FIRE_RL_config_memory_rl_receive_bram_response,
       WILL_FIRE_RL_fsm_start,
       WILL_FIRE_RL_idle_l438c17,
       WILL_FIRE_RL_masterX_0_fifo_tx_do_clear,
       WILL_FIRE_RL_masterX_0_fifo_tx_do_decr,
       WILL_FIRE_RL_masterX_0_fifo_tx_do_incr,
       WILL_FIRE_RL_masterX_0_fifo_tx_fifof_dequeue,
       WILL_FIRE_RL_masterX_0_fifo_tx_fifof_enqueue,
       WILL_FIRE_RL_masterX_0_grab_invalid_response,
       WILL_FIRE_RL_masterX_0_grab_valid_response,
       WILL_FIRE_RL_masterX_0_idle_op,
       WILL_FIRE_RL_masterX_0_ifc_do_enq,
       WILL_FIRE_RL_masterX_0_ifc_every,
       WILL_FIRE_RL_masterX_0_ifc_fifo_op_both,
       WILL_FIRE_RL_masterX_0_ifc_fifo_op_decCtr,
       WILL_FIRE_RL_masterX_0_ifc_fifo_op_incCtr,
       WILL_FIRE_RL_masterX_0_ifc_pre_enq,
       WILL_FIRE_RL_masterX_0_read_op,
       WILL_FIRE_RL_masterX_0_send_request,
       WILL_FIRE_RL_masterX_0_stall,
       WILL_FIRE_RL_masterX_0_stall_op,
       WILL_FIRE_RL_masterX_0_start_op,
       WILL_FIRE_RL_masterX_0_update_grant,
       WILL_FIRE_RL_masterX_0_write_op,
       WILL_FIRE_RL_masterX_1_fifo_tx_do_clear,
       WILL_FIRE_RL_masterX_1_fifo_tx_do_decr,
       WILL_FIRE_RL_masterX_1_fifo_tx_do_incr,
       WILL_FIRE_RL_masterX_1_fifo_tx_fifof_dequeue,
       WILL_FIRE_RL_masterX_1_fifo_tx_fifof_enqueue,
       WILL_FIRE_RL_masterX_1_grab_invalid_response,
       WILL_FIRE_RL_masterX_1_grab_valid_response,
       WILL_FIRE_RL_masterX_1_idle_op,
       WILL_FIRE_RL_masterX_1_ifc_do_enq,
       WILL_FIRE_RL_masterX_1_ifc_every,
       WILL_FIRE_RL_masterX_1_ifc_fifo_op_both,
       WILL_FIRE_RL_masterX_1_ifc_fifo_op_decCtr,
       WILL_FIRE_RL_masterX_1_ifc_fifo_op_incCtr,
       WILL_FIRE_RL_masterX_1_ifc_pre_enq,
       WILL_FIRE_RL_masterX_1_read_op,
       WILL_FIRE_RL_masterX_1_send_request,
       WILL_FIRE_RL_masterX_1_stall,
       WILL_FIRE_RL_masterX_1_stall_op,
       WILL_FIRE_RL_masterX_1_start_op,
       WILL_FIRE_RL_masterX_1_update_grant,
       WILL_FIRE_RL_masterX_1_write_op,
       WILL_FIRE_RL_mem_rl_process_requests,
       WILL_FIRE_RL_mem_rl_receive_bram_response,
       WILL_FIRE_RL_mkConnectionGetPut,
       WILL_FIRE_RL_mkConnectionGetPut_1,
       WILL_FIRE_RL_mkConnectionGetPut_2,
       WILL_FIRE_RL_mkConnectionGetPut_3,
       WILL_FIRE_RL_mkConnectionGetPut_4,
       WILL_FIRE_RL_mkConnectionGetPut_5,
       WILL_FIRE_RL_mkConnectionGetPut_6,
       WILL_FIRE_RL_mkConnectionGetPut_7,
       WILL_FIRE_RL_proc_rl_dmem_request,
       WILL_FIRE_RL_proc_rl_dmem_response,
       WILL_FIRE_RL_proc_rl_imem_request,
       WILL_FIRE_RL_proc_rl_imem_response,
       WILL_FIRE_RL_restart,
       WILL_FIRE_RL_rl_post_interrupt,
       WILL_FIRE_RL_rtc_incrementTimer,
       WILL_FIRE_RL_rtc_rl_count_cycle,
       WILL_FIRE_RL_slave_mem_config_default_response,
       WILL_FIRE_RL_slave_mem_config_first__dreg_update,
       WILL_FIRE_RL_slave_mem_config_grab_ctrl,
       WILL_FIRE_RL_slave_mem_config_grab_response,
       WILL_FIRE_RL_slave_mem_config_not_selected,
       WILL_FIRE_RL_slave_mem_config_send_request,
       WILL_FIRE_RL_slave_mem_data_default_response,
       WILL_FIRE_RL_slave_mem_data_first__dreg_update,
       WILL_FIRE_RL_slave_mem_data_grab_ctrl,
       WILL_FIRE_RL_slave_mem_data_grab_response,
       WILL_FIRE_RL_slave_mem_data_not_selected,
       WILL_FIRE_RL_slave_mem_data_send_request,
       WILL_FIRE_RL_slave_rtc_default_response,
       WILL_FIRE_RL_slave_rtc_first__dreg_update,
       WILL_FIRE_RL_slave_rtc_grab_ctrl,
       WILL_FIRE_RL_slave_rtc_grab_response,
       WILL_FIRE_RL_slave_rtc_not_selected,
       WILL_FIRE_RL_slave_rtc_send_request,
       WILL_FIRE_RL_start_reg__dreg_update,
       WILL_FIRE_RL_state_every,
       WILL_FIRE_RL_state_fired__dreg_update,
       WILL_FIRE_RL_state_handle_abort,
       WILL_FIRE___me_check_114,
       WILL_FIRE___me_check_115,
       WILL_FIRE___me_check_116,
       WILL_FIRE___me_check_117,
       WILL_FIRE___me_check_118,
       WILL_FIRE___me_check_119,
       WILL_FIRE___me_check_120,
       WILL_FIRE___me_check_121,
       WILL_FIRE___me_check_122,
       WILL_FIRE___me_check_123,
       WILL_FIRE___me_check_124,
       WILL_FIRE___me_check_125,
       WILL_FIRE_uart_ifc_sin;

  // inputs to muxes for submodule ports
  wire [110 : 0] MUX_proc_f_bus_reqs_rv$port0__write_1__VAL_1,
		 MUX_proc_f_bus_reqs_rv$port0__write_1__VAL_2;
  wire [109 : 0] MUX_masterX_0_descriptor$write_1__VAL_1,
		 MUX_masterX_0_descriptor$write_1__VAL_2,
		 MUX_masterX_1_descriptor$write_1__VAL_1,
		 MUX_masterX_1_descriptor$write_1__VAL_2;
  wire [76 : 0] MUX_masterX_0_ifc_request_reg$write_1__VAL_1,
		MUX_masterX_0_ifc_request_reg$write_1__VAL_2,
		MUX_masterX_0_ifc_request_reg$write_1__VAL_3,
		MUX_masterX_0_ifc_request_reg$write_1__VAL_4,
		MUX_masterX_1_ifc_request_reg$write_1__VAL_1,
		MUX_masterX_1_ifc_request_reg$write_1__VAL_2,
		MUX_masterX_1_ifc_request_reg$write_1__VAL_3,
		MUX_masterX_1_ifc_request_reg$write_1__VAL_4;
  wire [45 : 0] MUX_slave_mem_config_ctrl_reg$write_1__VAL_1,
		MUX_slave_mem_config_ctrl_reg$write_1__VAL_2,
		MUX_slave_mem_data_ctrl_reg$write_1__VAL_1,
		MUX_slave_mem_data_ctrl_reg$write_1__VAL_2,
		MUX_slave_rtc_ctrl_reg$write_1__VAL_1,
		MUX_slave_rtc_ctrl_reg$write_1__VAL_2;
  wire [35 : 0] MUX_slave_mem_config_ifc_response_wire$wset_1__VAL_1,
		MUX_slave_mem_config_ifc_response_wire$wset_1__VAL_2,
		MUX_slave_mem_data_ifc_response_wire$wset_1__VAL_2,
		MUX_slave_rtc_ifc_response_wire$wset_1__VAL_2;
  wire [32 : 0] MUX_masterX_0_data_reg$write_1__VAL_1,
		MUX_masterX_0_data_reg$write_1__VAL_2,
		MUX_masterX_0_data_reg$write_1__VAL_3,
		MUX_masterX_1_data_reg$write_1__VAL_2,
		MUX_masterX_1_data_reg$write_1__VAL_3;
  wire [9 : 0] MUX_masterX_0_count$write_1__VAL_1,
	       MUX_masterX_0_count$write_1__VAL_2,
	       MUX_masterX_1_count$write_1__VAL_1,
	       MUX_masterX_1_count$write_1__VAL_2,
	       MUX_proc_burst_length$write_1__VAL_2;
  wire [5 : 0] MUX_rg_xi$write_1__VAL_1;
  wire [2 : 0] MUX_masterX_0_fifo_tx_count$write_1__VAL_1,
	       MUX_masterX_0_fifo_tx_count$write_1__VAL_2,
	       MUX_masterX_1_fifo_tx_count$write_1__VAL_1;
  wire [1 : 0] MUX_masterX_0_ifc_fifo_op_cntr_r$write_1__VAL_2,
	       MUX_masterX_0_ifc_fifo_op_q_0$write_1__VAL_1,
	       MUX_masterX_0_ifc_fifo_op_q_1$write_1__VAL_1,
	       MUX_masterX_1_ifc_fifo_op_cntr_r$write_1__VAL_2,
	       MUX_masterX_1_ifc_fifo_op_q_0$write_1__VAL_1,
	       MUX_masterX_1_ifc_fifo_op_q_1$write_1__VAL_1;
  wire MUX_masterX_0_ifc_fifo_op_q_0$write_1__SEL_1,
       MUX_masterX_0_ifc_fifo_op_q_0$write_1__SEL_2,
       MUX_masterX_0_ifc_fifo_op_q_1$write_1__SEL_1,
       MUX_masterX_0_ifc_fifo_op_q_1$write_1__SEL_2,
       MUX_masterX_0_lock_wire$wset_1__PSEL_1,
       MUX_masterX_0_req_reg$write_1__SEL_1,
       MUX_masterX_0_req_reg$write_1__VAL_1,
       MUX_masterX_0_req_reg$write_1__VAL_2,
       MUX_masterX_0_req_reg$write_1__VAL_3,
       MUX_masterX_1_ifc_fifo_op_q_0$write_1__SEL_1,
       MUX_masterX_1_ifc_fifo_op_q_0$write_1__SEL_2,
       MUX_masterX_1_ifc_fifo_op_q_1$write_1__SEL_1,
       MUX_masterX_1_ifc_fifo_op_q_1$write_1__SEL_2,
       MUX_masterX_1_lock_wire$wset_1__PSEL_1,
       MUX_masterX_1_req_reg$write_1__SEL_1,
       MUX_masterX_1_req_reg$write_1__VAL_1,
       MUX_masterX_1_req_reg$write_1__VAL_2,
       MUX_masterX_1_req_reg$write_1__VAL_3,
       MUX_proc_burst_length$write_1__SEL_1,
       MUX_proc_who$write_1__PSEL_1,
       MUX_proc_who$write_1__SEL_1,
       MUX_rtc_timeRegHi$write_1__SEL_1,
       MUX_rtc_timeRegLo$write_1__SEL_1,
       MUX_slave_mem_config_ctrl_reg$write_1__SEL_1,
       MUX_slave_mem_data_ctrl_reg$write_1__SEL_1,
       MUX_slave_rtc_ctrl_reg$write_1__SEL_1;

  // remaining internal signals
  reg [63 : 0] v__h151632, v__h151946, v__h152467;
  reg [31 : 0] CASE_ahb_bus_s_map_data_0_BITS_1_TO_0_0_0x567__ETC__q10,
	       CASE_ahb_bus_s_map_data_1_BITS_1_TO_0_0_0x567__ETC__q11,
	       IF_rtc_pendingReq_port0__read__879_BITS_3_TO_0_ETC___d1896,
	       SEL_ARR_masterX_0_ifc_request_reg_02_BITS_31_T_ETC___d2159,
	       TASK_fopen___d2281,
	       x_fabric_bus_hWDATA__h114104,
	       x_request__read_ctrl_addr__h96942;
  reg [7 : 0] value__h100256, value__h103074, value__h97435;
  reg [4 : 0] CASE_SEL_ARR_masterX_0_ifc_request_reg_02_BITS_ETC__q15,
	      CASE_SEL_ARR_masterX_0_ifc_request_reg_02_BITS_ETC__q3;
  reg [3 : 0] CASE_config_memory_ff_reqs_rvport1__read_BITS_ETC__q9,
	      CASE_mem_ff_reqs_rvport1__read_BITS_24_TO_23__ETC__q8,
	      x_request__read_ctrl_prot__h96941;
  reg [2 : 0] CASE_masterX_0_descriptor_BITS_26_TO_25_0_1_1__ETC__q1,
	      CASE_masterX_0_fifo_rx_rvport1__read_BITS_24__ETC__q6,
	      CASE_masterX_0_fifo_rx_rvport1__read_BITS_26__ETC__q7,
	      CASE_masterX_1_descriptor_BITS_26_TO_25_0_1_1__ETC__q2,
	      CASE_masterX_1_fifo_rx_rv_BITS_24_TO_23_0_0_1__ETC__q4,
	      CASE_masterX_1_fifo_rx_rv_BITS_26_TO_25_0_1_1__ETC__q5,
	      IF_masterX_0_descriptor_25_BITS_24_TO_23_40_EQ_ETC___d765,
	      IF_masterX_1_descriptor_262_BITS_24_TO_23_277__ETC___d1502,
	      SEL_ARR_masterX_0_ifc_request_reg_02_BITS_72_T_ETC___d1947;
  reg [1 : 0] CASE_ahb_bus_hmaster_addr_BIT_1_0_masterX_0_if_ETC__q14,
	      CASE_ahb_bus_s_map_data_0_BITS_1_TO_0_0_0_1_IF_ETC__q12,
	      CASE_ahb_bus_s_map_data_1_BITS_1_TO_0_0_0_1_IF_ETC__q13,
	      SEL_ARR_masterX_0_ifc_request_reg_02_BITS_69_T_ETC___d1943;
  reg SEL_ARR_NOT_masterX_0_req_wire_whas__928_950_O_ETC___d1961,
      SEL_ARR_ahb_bus_dummy_transfer_reg_916_EQ_0_91_ETC___d2064,
      SEL_ARR_ahb_bus_dummy_transfer_reg_916_EQ_0_91_ETC___d2108,
      SEL_ARR_ahb_bus_dummy_transfer_reg_916_EQ_0_91_ETC___d2118,
      SEL_ARR_masterX_0_req_wire_whas__928_AND_maste_ETC___d1941;
  wire [63 : 0] dump_pc__h116758,
		rtc_timeRegHi_8_CONCAT_rtc_timeRegLo_9_0_PLUS_1___d41,
		timeValue__h2537;
  wire [44 : 0] masterX_0_descriptor_25_BIT_109_26_AND_NOT_mas_ETC___d831,
		masterX_1_descriptor_262_BIT_109_263_AND_NOT_m_ETC___d1567;
  wire [40 : 0] IF_masterX_0_descriptor_25_BIT_109_26_THEN_IF__ETC___d830,
		IF_masterX_1_descriptor_262_BIT_109_263_THEN_I_ETC___d1566;
  wire [31 : 0] _0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547,
		_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248,
		_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284,
		_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985,
		_theResult_____2_addr__h48807,
		_theResult_____2_addr__h92804,
		addr___1__h22882,
		addr___1__h53766,
		addr___1__h66881,
		addr___1__h9747,
		addr__h114118,
		addr__h22811,
		addr__h53692,
		addr__h66810,
		addr__h9668,
		config_memory_ff_reqs_rvport1__read_BITS_104__ETC__q16,
		data__h100034,
		data__h102852,
		data__h97213,
		log_length__h22879,
		log_length__h53763,
		log_length__h66878,
		log_length__h9744,
		log_size__h22878,
		log_size__h53762,
		log_size__h66877,
		log_size__h9743,
		mask__h22881,
		mask__h53765,
		mask__h66880,
		mask__h9746,
		mem_ff_reqs_rvport1__read_BITS_104_TO_73_MINU_ETC__q17,
		new_value_data__h9224,
		next_addr__h22814,
		next_addr__h53695,
		next_addr__h66813,
		next_addr__h9671,
		rdata__h115929,
		rdata__h116376,
		total__h22880,
		total__h53764,
		total__h66879,
		total__h9745,
		v_data__h4099,
		v_data__h5744,
		x__h22894,
		x__h22902,
		x__h53778,
		x__h53787,
		x__h66893,
		x__h66901,
		x__h9759,
		x__h9768,
		x_bus_hRDATA__h110845,
		x_bus_hRDATA__h110857,
		x_bus_hRDATA__h110869,
		x_request__read_ctrl_addr__h102587,
		x_request__read_ctrl_addr__h99769,
		y__h21820,
		y__h22895,
		y__h34952,
		y__h53779,
		y__h65839,
		y__h66894,
		y__h78951,
		y__h9760;
  wire [4 : 0] alignment__h3632,
	       alignment__h5277,
	       remaining__h107015,
	       remaining__h107089,
	       value__h15094,
	       value__h21006,
	       value__h28227,
	       value__h34138,
	       value__h59113,
	       value__h65025,
	       value__h72226,
	       value__h78137;
  wire [3 : 0] writeen__h3631,
	       writeen__h5276,
	       x__h4224,
	       x__h5869,
	       x_request__read_ctrl_prot__h102586,
	       x_request__read_ctrl_prot__h99768;
  wire [2 : 0] IF_masterX_0_descriptor_25_BITS_26_TO_25_36_EQ_ETC___d788,
	       IF_masterX_1_descriptor_262_BITS_26_TO_25_273__ETC___d1525,
	       value__h22903,
	       value__h53788,
	       value__h66902,
	       value__h9769;
  wire [1 : 0] IF_ahb_bus_s_map_data_0_105_BIT_2_106_THEN_SEL_ETC___d2199,
	       IF_ahb_bus_s_map_data_1_115_BIT_2_116_THEN_SEL_ETC___d2216,
	       IF_slave_mem_config_ifc_response_wire_whas__19_ETC___d2196,
	       IF_slave_mem_data_ifc_response_wire_whas__185__ETC___d2188,
	       IF_slave_rtc_ifc_response_wire_whas__189_THEN__ETC___d2192,
	       masterX_0_ifc_fifo_op_cntr_r_63_MINUS_1___d180,
	       masterX_1_ifc_fifo_op_cntr_r_01_MINUS_1___d917,
	       v__h108103,
	       x__h114095;
  wire IF_SEL_ARR_masterX_0_ifc_request_reg_02_BITS_7_ETC___d1974,
       IF_ahb_bus_s_map_data_0_105_BIT_2_106_THEN_SEL_ETC___d2109,
       IF_ahb_bus_s_map_data_1_115_BIT_2_116_THEN_SEL_ETC___d2119,
       NOT_masterX_0_count_17_EQ_0_18_19_AND_NOT_mast_ETC___d529,
       NOT_masterX_1_count_54_EQ_0_55_56_AND_NOT_mast_ETC___d1266,
       _dand1masterX_0_lock_wire$EN_wset,
       _dand1masterX_1_lock_wire$EN_wset,
       _dfoo1,
       _dfoo3,
       _dfoo5,
       _dfoo7,
       abort_whas__224_AND_abort_wget__225_226_OR_sta_ETC___d2341,
       abort_whas__224_AND_abort_wget__225_226_OR_sta_ETC___d2348,
       ahb_bus_arbiter_priority_vector_010_BIT_0_014__ETC___d2022,
       ahb_bus_arbiter_priority_vector_010_BIT_1_011__ETC___d2018,
       m_num_data__h106327,
       rg_xi_319_ULT_32___d2320;

  // action method uart_ifc_sin
  assign RDY_uart_ifc_sin = 1'd1 ;
  assign CAN_FIRE_uart_ifc_sin = 1'd1 ;
  assign WILL_FIRE_uart_ifc_sin = EN_uart_ifc_sin ;

  // value method uart_ifc_sout
  assign uart_ifc_sout = proc_core$uart_ifc_sout ;
  assign RDY_uart_ifc_sout = 1'd1 ;

  // value method uart_ifc_busy
  assign uart_ifc_busy = 1'b0 /* unspecified value */  ;
  assign RDY_uart_ifc_busy = 1'd1 ;

  // submodule config_memory_memory
  BRAM1BELoad #(.FILENAME("config_string.hex"),
		.PIPELINED(1'd0),
		.ADDR_WIDTH(32'd10),
		.DATA_WIDTH(32'd32),
		.CHUNKSIZE(32'd8),
		.WE_WIDTH(32'd4),
		.MEMSIZE(11'd1024),
		.BINARY(1'd0)) config_memory_memory(.CLK(CLK),
						    .ADDR(config_memory_memory$ADDR),
						    .DI(config_memory_memory$DI),
						    .WE(config_memory_memory$WE),
						    .EN(config_memory_memory$EN),
						    .DO(config_memory_memory$DO));

  // submodule masterX_0_fifo_tx_fifof_ff
  SizedFIFO #(.p1width(32'd58),
	      .p2depth(32'd5),
	      .p3cntr_width(32'd2),
	      .guarded(32'd0)) masterX_0_fifo_tx_fifof_ff(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(masterX_0_fifo_tx_fifof_ff$D_IN),
							  .ENQ(masterX_0_fifo_tx_fifof_ff$ENQ),
							  .DEQ(masterX_0_fifo_tx_fifof_ff$DEQ),
							  .CLR(masterX_0_fifo_tx_fifof_ff$CLR),
							  .D_OUT(masterX_0_fifo_tx_fifof_ff$D_OUT),
							  .FULL_N(masterX_0_fifo_tx_fifof_ff$FULL_N),
							  .EMPTY_N(masterX_0_fifo_tx_fifof_ff$EMPTY_N));

  // submodule masterX_0_fifo_tx_fifof_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) masterX_0_fifo_tx_fifof_firstValid(.CLK(CLK),
							      .D_IN(masterX_0_fifo_tx_fifof_firstValid$D_IN),
							      .EN(masterX_0_fifo_tx_fifof_firstValid$EN),
							      .Q_OUT(masterX_0_fifo_tx_fifof_firstValid$Q_OUT));

  // submodule masterX_0_fifo_tx_levelsValidClr
  RevertReg #(.width(32'd1),
	      .init(1'd1)) masterX_0_fifo_tx_levelsValidClr(.CLK(CLK),
							    .D_IN(masterX_0_fifo_tx_levelsValidClr$D_IN),
							    .EN(masterX_0_fifo_tx_levelsValidClr$EN),
							    .Q_OUT(masterX_0_fifo_tx_levelsValidClr$Q_OUT));

  // submodule masterX_0_fifo_tx_levelsValidDeq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) masterX_0_fifo_tx_levelsValidDeq(.CLK(CLK),
							    .D_IN(masterX_0_fifo_tx_levelsValidDeq$D_IN),
							    .EN(masterX_0_fifo_tx_levelsValidDeq$EN),
							    .Q_OUT(masterX_0_fifo_tx_levelsValidDeq$Q_OUT));

  // submodule masterX_0_fifo_tx_levelsValidEnq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) masterX_0_fifo_tx_levelsValidEnq(.CLK(CLK),
							    .D_IN(masterX_0_fifo_tx_levelsValidEnq$D_IN),
							    .EN(masterX_0_fifo_tx_levelsValidEnq$EN),
							    .Q_OUT(masterX_0_fifo_tx_levelsValidEnq$Q_OUT));

  // submodule masterX_1_fifo_tx_fifof_ff
  SizedFIFO #(.p1width(32'd58),
	      .p2depth(32'd5),
	      .p3cntr_width(32'd2),
	      .guarded(32'd0)) masterX_1_fifo_tx_fifof_ff(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(masterX_1_fifo_tx_fifof_ff$D_IN),
							  .ENQ(masterX_1_fifo_tx_fifof_ff$ENQ),
							  .DEQ(masterX_1_fifo_tx_fifof_ff$DEQ),
							  .CLR(masterX_1_fifo_tx_fifof_ff$CLR),
							  .D_OUT(),
							  .FULL_N(masterX_1_fifo_tx_fifof_ff$FULL_N),
							  .EMPTY_N());

  // submodule masterX_1_fifo_tx_fifof_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) masterX_1_fifo_tx_fifof_firstValid(.CLK(CLK),
							      .D_IN(masterX_1_fifo_tx_fifof_firstValid$D_IN),
							      .EN(masterX_1_fifo_tx_fifof_firstValid$EN),
							      .Q_OUT());

  // submodule masterX_1_fifo_tx_levelsValidClr
  RevertReg #(.width(32'd1),
	      .init(1'd1)) masterX_1_fifo_tx_levelsValidClr(.CLK(CLK),
							    .D_IN(masterX_1_fifo_tx_levelsValidClr$D_IN),
							    .EN(masterX_1_fifo_tx_levelsValidClr$EN),
							    .Q_OUT(masterX_1_fifo_tx_levelsValidClr$Q_OUT));

  // submodule masterX_1_fifo_tx_levelsValidDeq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) masterX_1_fifo_tx_levelsValidDeq(.CLK(CLK),
							    .D_IN(masterX_1_fifo_tx_levelsValidDeq$D_IN),
							    .EN(masterX_1_fifo_tx_levelsValidDeq$EN),
							    .Q_OUT(masterX_1_fifo_tx_levelsValidDeq$Q_OUT));

  // submodule masterX_1_fifo_tx_levelsValidEnq
  RevertReg #(.width(32'd1),
	      .init(1'd1)) masterX_1_fifo_tx_levelsValidEnq(.CLK(CLK),
							    .D_IN(masterX_1_fifo_tx_levelsValidEnq$D_IN),
							    .EN(masterX_1_fifo_tx_levelsValidEnq$EN),
							    .Q_OUT(masterX_1_fifo_tx_levelsValidEnq$Q_OUT));

  // submodule mem_memory
  BRAM1BELoad #(.FILENAME("code.mem"),
		.PIPELINED(1'd0),
		.ADDR_WIDTH(32'd18),
		.DATA_WIDTH(32'd32),
		.CHUNKSIZE(32'd8),
		.WE_WIDTH(32'd4),
		.MEMSIZE(19'd262144),
		.BINARY(1'd0)) mem_memory(.CLK(CLK),
					  .ADDR(mem_memory$ADDR),
					  .DI(mem_memory$DI),
					  .WE(mem_memory$WE),
					  .EN(mem_memory$EN),
					  .DO(mem_memory$DO));

  // submodule proc_core
  mkCPU_Model proc_core(.hartid(32'd0),
			.CLK(CLK),
			.RST_N(RST_N),
			.debug_ifc_read_gpr_r(proc_core$debug_ifc_read_gpr_r),
			.debug_ifc_req_read_memW_addr(proc_core$debug_ifc_req_read_memW_addr),
			.debug_ifc_run_continue_mpc(proc_core$debug_ifc_run_continue_mpc),
			.debug_ifc_run_step_mpc(proc_core$debug_ifc_run_step_mpc),
			.debug_ifc_set_verbosity_verbosity(proc_core$debug_ifc_set_verbosity_verbosity),
			.debug_ifc_write_gpr_d(proc_core$debug_ifc_write_gpr_d),
			.debug_ifc_write_gpr_r(proc_core$debug_ifc_write_gpr_r),
			.debug_ifc_write_memW_addr(proc_core$debug_ifc_write_memW_addr),
			.debug_ifc_write_memW_d(proc_core$debug_ifc_write_memW_d),
			.debug_ifc_write_pc_d(proc_core$debug_ifc_write_pc_d),
			.dmem_ifc_rx_put(proc_core$dmem_ifc_rx_put),
			.imem_ifc_rx_put(proc_core$imem_ifc_rx_put),
			.interrupt_ifc_external_meip(proc_core$interrupt_ifc_external_meip),
			.interrupt_ifc_software_msip(proc_core$interrupt_ifc_software_msip),
			.interrupt_ifc_timer_mtip(proc_core$interrupt_ifc_timer_mtip),
			.uart_ifc_sin_in(proc_core$uart_ifc_sin_in),
			.write_counter_time_data(proc_core$write_counter_time_data),
			.EN_imem_ifc_tx_get(proc_core$EN_imem_ifc_tx_get),
			.EN_imem_ifc_rx_put(proc_core$EN_imem_ifc_rx_put),
			.EN_dmem_ifc_tx_get(proc_core$EN_dmem_ifc_tx_get),
			.EN_dmem_ifc_rx_put(proc_core$EN_dmem_ifc_rx_put),
			.EN_interrupt_ifc_timer(proc_core$EN_interrupt_ifc_timer),
			.EN_interrupt_ifc_software(proc_core$EN_interrupt_ifc_software),
			.EN_interrupt_ifc_external(proc_core$EN_interrupt_ifc_external),
			.EN_debug_ifc_reset(proc_core$EN_debug_ifc_reset),
			.EN_debug_ifc_reset_complete(proc_core$EN_debug_ifc_reset_complete),
			.EN_debug_ifc_run_continue(proc_core$EN_debug_ifc_run_continue),
			.EN_debug_ifc_run_step(proc_core$EN_debug_ifc_run_step),
			.EN_debug_ifc_stop(proc_core$EN_debug_ifc_stop),
			.EN_debug_ifc_write_pc(proc_core$EN_debug_ifc_write_pc),
			.EN_debug_ifc_write_gpr(proc_core$EN_debug_ifc_write_gpr),
			.EN_debug_ifc_req_read_memW(proc_core$EN_debug_ifc_req_read_memW),
			.EN_debug_ifc_rsp_read_memW(proc_core$EN_debug_ifc_rsp_read_memW),
			.EN_debug_ifc_write_memW(proc_core$EN_debug_ifc_write_memW),
			.EN_debug_ifc_set_verbosity(proc_core$EN_debug_ifc_set_verbosity),
			.EN_uart_ifc_sin(proc_core$EN_uart_ifc_sin),
			.EN_write_counter_time(proc_core$EN_write_counter_time),
			.imem_ifc_tx_get(proc_core$imem_ifc_tx_get),
			.RDY_imem_ifc_tx_get(proc_core$RDY_imem_ifc_tx_get),
			.RDY_imem_ifc_rx_put(proc_core$RDY_imem_ifc_rx_put),
			.dmem_ifc_tx_get(proc_core$dmem_ifc_tx_get),
			.RDY_dmem_ifc_tx_get(proc_core$RDY_dmem_ifc_tx_get),
			.RDY_dmem_ifc_rx_put(proc_core$RDY_dmem_ifc_rx_put),
			.RDY_interrupt_ifc_timer(),
			.RDY_interrupt_ifc_software(),
			.RDY_interrupt_ifc_external(),
			.RDY_debug_ifc_reset(proc_core$RDY_debug_ifc_reset),
			.debug_ifc_reset_complete(proc_core$debug_ifc_reset_complete),
			.RDY_debug_ifc_reset_complete(proc_core$RDY_debug_ifc_reset_complete),
			.RDY_debug_ifc_run_continue(),
			.RDY_debug_ifc_run_step(proc_core$RDY_debug_ifc_run_step),
			.RDY_debug_ifc_stop(),
			.debug_ifc_stop_reason(),
			.RDY_debug_ifc_stop_reason(),
			.debug_ifc_read_pc(),
			.RDY_debug_ifc_read_pc(),
			.debug_ifc_read_exec_pc(proc_core$debug_ifc_read_exec_pc),
			.RDY_debug_ifc_read_exec_pc(proc_core$RDY_debug_ifc_read_exec_pc),
			.RDY_debug_ifc_write_pc(proc_core$RDY_debug_ifc_write_pc),
			.debug_ifc_read_gpr(proc_core$debug_ifc_read_gpr),
			.RDY_debug_ifc_read_gpr(proc_core$RDY_debug_ifc_read_gpr),
			.RDY_debug_ifc_write_gpr(),
			.RDY_debug_ifc_req_read_memW(),
			.debug_ifc_rsp_read_memW(),
			.RDY_debug_ifc_rsp_read_memW(),
			.RDY_debug_ifc_write_memW(),
			.debug_ifc_read_instret(proc_core$debug_ifc_read_instret),
			.RDY_debug_ifc_read_instret(proc_core$RDY_debug_ifc_read_instret),
			.debug_ifc_read_cycle(),
			.RDY_debug_ifc_read_cycle(),
			.RDY_debug_ifc_set_verbosity(),
			.RDY_uart_ifc_sin(),
			.uart_ifc_sout(proc_core$uart_ifc_sout),
			.RDY_uart_ifc_sout(),
			.uart_ifc_busy(proc_core$uart_ifc_busy),
			.RDY_uart_ifc_busy(),
			.RDY_write_counter_time(),
			.halt(proc_core$halt),
			.RDY_halt());

  // rule RL_rl_post_interrupt
  assign CAN_FIRE_RL_rl_post_interrupt = 1'd1 ;
  assign WILL_FIRE_RL_rl_post_interrupt = 1'd1 ;

  // rule RL_mkConnectionGetPut_5
  assign CAN_FIRE_RL_mkConnectionGetPut_5 =
	     rtc_pendingReq[5] && !slave_rtc_fifo_rx_rv[58] ;
  assign WILL_FIRE_RL_mkConnectionGetPut_5 =
	     CAN_FIRE_RL_mkConnectionGetPut_5 ;

  // rule RL_restart
  assign CAN_FIRE_RL_restart = start_reg_1 && !state_fired ;
  assign WILL_FIRE_RL_restart = CAN_FIRE_RL_restart ;

  // rule RL_action_l281c17
  assign CAN_FIRE_RL_action_l281c17 =
	     proc_core$RDY_debug_ifc_reset_complete &&
	     proc_core$RDY_debug_ifc_write_pc &&
	     state_mkFSMstate == 5'd1 ;
  assign WILL_FIRE_RL_action_l281c17 = CAN_FIRE_RL_action_l281c17 ;

  // rule RL_action_l290c17
  assign CAN_FIRE_RL_action_l290c17 = state_mkFSMstate == 5'd2 ;
  assign WILL_FIRE_RL_action_l290c17 = CAN_FIRE_RL_action_l290c17 ;

  // rule RL_action_l442c25
  assign CAN_FIRE_RL_action_l442c25 = state_mkFSMstate == 5'd3 ;
  assign WILL_FIRE_RL_action_l442c25 = CAN_FIRE_RL_action_l442c25 ;

  // rule RL_action_l461c37
  assign CAN_FIRE_RL_action_l461c37 =
	     proc_core$RDY_debug_ifc_run_step && state_mkFSMstate == 5'd5 ;
  assign WILL_FIRE_RL_action_l461c37 = CAN_FIRE_RL_action_l461c37 ;

  // rule RL_action_l464c52
  assign CAN_FIRE_RL_action_l464c52 =
	     proc_core$RDY_debug_ifc_read_instret &&
	     proc_core$debug_ifc_read_instret - rg_prev_instret != 64'd0 &&
	     state_mkFSMstate == 5'd6 ;
  assign WILL_FIRE_RL_action_l464c52 = CAN_FIRE_RL_action_l464c52 ;

  // rule RL_action_l259c18
  assign CAN_FIRE_RL_action_l259c18 =
	     proc_core$RDY_debug_ifc_read_exec_pc &&
	     state_mkFSMstate == 5'd7 ;
  assign WILL_FIRE_RL_action_l259c18 = CAN_FIRE_RL_action_l259c18 ;

  // rule RL_action_f_init_l263c25
  assign CAN_FIRE_RL_action_f_init_l263c25 = state_mkFSMstate == 5'd8 ;
  assign WILL_FIRE_RL_action_f_init_l263c25 =
	     CAN_FIRE_RL_action_f_init_l263c25 ;

  // rule RL_action_l264c37
  assign CAN_FIRE_RL_action_l264c37 =
	     proc_core$RDY_debug_ifc_read_gpr && rg_xi_319_ULT_32___d2320 &&
	     (state_mkFSMstate == 5'd9 || state_mkFSMstate == 5'd12) ;
  assign WILL_FIRE_RL_action_l264c37 = CAN_FIRE_RL_action_l264c37 ;

  // rule RL_action_l265c33
  assign CAN_FIRE_RL_action_l265c33 = state_mkFSMstate == 5'd10 ;
  assign WILL_FIRE_RL_action_l265c33 = CAN_FIRE_RL_action_l265c33 ;

  // rule RL_action_f_update_l263c25
  assign CAN_FIRE_RL_action_f_update_l263c25 = state_mkFSMstate == 5'd11 ;
  assign WILL_FIRE_RL_action_f_update_l263c25 =
	     CAN_FIRE_RL_action_f_update_l263c25 ;

  // rule RL_action_l268c18
  assign CAN_FIRE_RL_action_l268c18 =
	     !rg_xi_319_ULT_32___d2320 &&
	     (state_mkFSMstate == 5'd9 || state_mkFSMstate == 5'd12) ;
  assign WILL_FIRE_RL_action_l268c18 = CAN_FIRE_RL_action_l268c18 ;

  // rule __me_check_119
  assign CAN_FIRE___me_check_119 = 1'b1 ;
  assign WILL_FIRE___me_check_119 = 1'b1 ;

  // rule __me_check_120
  assign CAN_FIRE___me_check_120 = 1'b1 ;
  assign WILL_FIRE___me_check_120 = 1'b1 ;

  // rule __me_check_121
  assign CAN_FIRE___me_check_121 = 1'b1 ;
  assign WILL_FIRE___me_check_121 = 1'b1 ;

  // rule __me_check_122
  assign CAN_FIRE___me_check_122 = 1'b1 ;
  assign WILL_FIRE___me_check_122 = 1'b1 ;

  // rule __me_check_123
  assign CAN_FIRE___me_check_123 = 1'b1 ;
  assign WILL_FIRE___me_check_123 = 1'b1 ;

  // rule __me_check_124
  assign CAN_FIRE___me_check_124 = 1'b1 ;
  assign WILL_FIRE___me_check_124 = 1'b1 ;

  // rule __me_check_125
  assign CAN_FIRE___me_check_125 = 1'b1 ;
  assign WILL_FIRE___me_check_125 = 1'b1 ;

  // rule RL_fsm_start
  assign CAN_FIRE_RL_fsm_start =
	     abort_whas__224_AND_abort_wget__225_226_OR_sta_ETC___d2341 &&
	     (!start_reg_1 || state_fired) &&
	     start_reg ;
  assign WILL_FIRE_RL_fsm_start = CAN_FIRE_RL_fsm_start ;

  // rule RL_action_l460c49
  assign CAN_FIRE_RL_action_l460c49 =
	     proc_core$RDY_debug_ifc_read_instret &&
	     (state_mkFSMstate == 5'd4 ||
	      proc_core$debug_ifc_read_instret - rg_prev_instret == 64'd0 &&
	      state_mkFSMstate == 5'd6 ||
	      (!proc_core$halt || proc_core$uart_ifc_busy) &&
	      state_mkFSMstate == 5'd13) ;
  assign WILL_FIRE_RL_action_l460c49 = CAN_FIRE_RL_action_l460c49 ;

  // rule __me_check_115
  assign CAN_FIRE___me_check_115 = 1'b1 ;
  assign WILL_FIRE___me_check_115 = 1'b1 ;

  // rule __me_check_116
  assign CAN_FIRE___me_check_116 = 1'b1 ;
  assign WILL_FIRE___me_check_116 = 1'b1 ;

  // rule __me_check_117
  assign CAN_FIRE___me_check_117 = 1'b1 ;
  assign WILL_FIRE___me_check_117 = 1'b1 ;

  // rule __me_check_118
  assign CAN_FIRE___me_check_118 = 1'b1 ;
  assign WILL_FIRE___me_check_118 = 1'b1 ;

  // rule RL_idle_l438c17
  assign CAN_FIRE_RL_idle_l438c17 =
	     proc_core$halt && !proc_core$uart_ifc_busy &&
	     !start_reg_2$whas &&
	     state_mkFSMstate == 5'd13 ;
  assign WILL_FIRE_RL_idle_l438c17 = CAN_FIRE_RL_idle_l438c17 ;

  // rule RL_auto_start
  assign CAN_FIRE_RL_auto_start =
	     abort_whas__224_AND_abort_wget__225_226_OR_sta_ETC___d2348 &&
	     !running ;
  assign WILL_FIRE_RL_auto_start = CAN_FIRE_RL_auto_start ;

  // rule RL_auto_finish
  assign CAN_FIRE_RL_auto_finish =
	     running &&
	     abort_whas__224_AND_abort_wget__225_226_OR_sta_ETC___d2348 ;
  assign WILL_FIRE_RL_auto_finish = CAN_FIRE_RL_auto_finish ;

  // rule RL_proc_rl_imem_request
  assign CAN_FIRE_RL_proc_rl_imem_request =
	     proc_core$RDY_imem_ifc_tx_get && !proc_f_bus_reqs_rv[110] &&
	     proc_who == 2'd2 ;
  assign WILL_FIRE_RL_proc_rl_imem_request =
	     CAN_FIRE_RL_proc_rl_imem_request &&
	     !WILL_FIRE_RL_proc_rl_dmem_request ;

  // rule RL_proc_rl_dmem_request
  assign CAN_FIRE_RL_proc_rl_dmem_request =
	     proc_core$RDY_dmem_ifc_tx_get && !proc_f_bus_reqs_rv[110] &&
	     proc_who == 2'd2 ;
  assign WILL_FIRE_RL_proc_rl_dmem_request =
	     CAN_FIRE_RL_proc_rl_dmem_request ;

  // rule RL_mkConnectionGetPut
  assign CAN_FIRE_RL_mkConnectionGetPut =
	     proc_f_bus_reqs_rv$port1__read[110] &&
	     !masterX_0_fifo_rx_rv[110] ;
  assign WILL_FIRE_RL_mkConnectionGetPut = CAN_FIRE_RL_mkConnectionGetPut ;

  // rule RL_rtc_incrementTimer
  assign CAN_FIRE_RL_rtc_incrementTimer = rtc_counter_cycle == 6'd0 ;
  assign WILL_FIRE_RL_rtc_incrementTimer = CAN_FIRE_RL_rtc_incrementTimer ;

  // rule RL_rtc_rl_count_cycle
  assign CAN_FIRE_RL_rtc_rl_count_cycle = 1'd1 ;
  assign WILL_FIRE_RL_rtc_rl_count_cycle = 1'd1 ;

  // rule RL_masterX_0_stall
  assign CAN_FIRE_RL_masterX_0_stall =
	     masterX_0_fifo_tx_levelsValidEnq$Q_OUT &&
	     masterX_0_fifo_tx_levelsValidDeq$Q_OUT &&
	     masterX_0_fifo_tx_levelsValidClr$Q_OUT &&
	     masterX_0_fifo_tx_count > 3'd1 &&
	     masterX_0_count != 10'd1 ;
  assign WILL_FIRE_RL_masterX_0_stall = CAN_FIRE_RL_masterX_0_stall ;

  // rule RL_masterX_0_send_request
  assign CAN_FIRE_RL_masterX_0_send_request =
	     masterX_0_fifo_rx_rv$port1__read[110] && !masterX_0_grant_reg &&
	     (masterX_0_count != 10'd0 || !CAN_FIRE_RL_masterX_0_stall) ;
  assign WILL_FIRE_RL_masterX_0_send_request =
	     CAN_FIRE_RL_masterX_0_send_request ;

  // rule RL_masterX_0_fifo_tx_do_clear
  assign CAN_FIRE_RL_masterX_0_fifo_tx_do_clear = 1'b0 ;
  assign WILL_FIRE_RL_masterX_0_fifo_tx_do_clear = 1'b0 ;

  // rule RL_masterX_1_stall
  assign CAN_FIRE_RL_masterX_1_stall =
	     masterX_1_fifo_tx_levelsValidEnq$Q_OUT &&
	     masterX_1_fifo_tx_levelsValidDeq$Q_OUT &&
	     masterX_1_fifo_tx_levelsValidClr$Q_OUT &&
	     masterX_1_fifo_tx_count > 3'd1 &&
	     masterX_1_count != 10'd1 ;
  assign WILL_FIRE_RL_masterX_1_stall = CAN_FIRE_RL_masterX_1_stall ;

  // rule RL_masterX_1_send_request
  assign CAN_FIRE_RL_masterX_1_send_request =
	     masterX_1_fifo_rx_rv[110] && !masterX_1_grant_reg &&
	     (masterX_1_count != 10'd0 || !CAN_FIRE_RL_masterX_1_stall) ;
  assign WILL_FIRE_RL_masterX_1_send_request =
	     CAN_FIRE_RL_masterX_1_send_request ;

  // rule RL_masterX_1_fifo_tx_do_clear
  assign CAN_FIRE_RL_masterX_1_fifo_tx_do_clear = 1'b0 ;
  assign WILL_FIRE_RL_masterX_1_fifo_tx_do_clear = 1'b0 ;

  // rule RL_masterX_1_fifo_tx_fifof_dequeue
  assign CAN_FIRE_RL_masterX_1_fifo_tx_fifof_dequeue = 1'b0 ;
  assign WILL_FIRE_RL_masterX_1_fifo_tx_fifof_dequeue = 1'b0 ;

  // rule RL_slave_mem_data_first__dreg_update
  assign CAN_FIRE_RL_slave_mem_data_first__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_slave_mem_data_first__dreg_update = 1'd1 ;

  // rule RL_slave_rtc_first__dreg_update
  assign CAN_FIRE_RL_slave_rtc_first__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_slave_rtc_first__dreg_update = 1'd1 ;

  // rule RL_slave_mem_config_first__dreg_update
  assign CAN_FIRE_RL_slave_mem_config_first__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_slave_mem_config_first__dreg_update = 1'd1 ;

  // rule RL_ahb_bus_broadcast_to_slaves
  assign CAN_FIRE_RL_ahb_bus_broadcast_to_slaves = 1'd1 ;
  assign WILL_FIRE_RL_ahb_bus_broadcast_to_slaves = 1'd1 ;

  // rule RL_slave_mem_data_not_selected
  assign CAN_FIRE_RL_slave_mem_data_not_selected = x__h114095 != 2'd1 ;
  assign WILL_FIRE_RL_slave_mem_data_not_selected =
	     CAN_FIRE_RL_slave_mem_data_not_selected ;

  // rule RL_slave_mem_data_send_request
  assign CAN_FIRE_RL_slave_mem_data_send_request =
	     !slave_mem_data_fifo_tx_rv[110] && !slave_mem_data_fifo_op_rv &&
	     slave_mem_data_ctrl_reg[45] &&
	     (slave_mem_data_ctrl_reg[37:36] == 2'd3 ||
	      slave_mem_data_ctrl_reg[37:36] == 2'd2) ;
  assign WILL_FIRE_RL_slave_mem_data_send_request =
	     CAN_FIRE_RL_slave_mem_data_send_request ;

  // rule RL_mkConnectionGetPut_2
  assign CAN_FIRE_RL_mkConnectionGetPut_2 =
	     slave_mem_data_fifo_tx_rv$port1__read[110] &&
	     !mem_ff_reqs_rv[110] ;
  assign WILL_FIRE_RL_mkConnectionGetPut_2 =
	     CAN_FIRE_RL_mkConnectionGetPut_2 ;

  // rule RL_mem_rl_receive_bram_response
  assign CAN_FIRE_RL_mem_rl_receive_bram_response =
	     mem_ff_reqs_rv$port1__read[110] && !mem_ff_rsps_rv[58] &&
	     mem_rg_mem_state ;
  assign WILL_FIRE_RL_mem_rl_receive_bram_response =
	     CAN_FIRE_RL_mem_rl_receive_bram_response ;

  // rule RL_mkConnectionGetPut_3
  assign CAN_FIRE_RL_mkConnectionGetPut_3 =
	     mem_ff_rsps_rv$port1__read[58] &&
	     !slave_mem_data_fifo_rx_rv[58] ;
  assign WILL_FIRE_RL_mkConnectionGetPut_3 =
	     CAN_FIRE_RL_mkConnectionGetPut_3 ;

  // rule RL_mem_rl_process_requests
  assign CAN_FIRE_RL_mem_rl_process_requests =
	     mem_ff_reqs_rv$port1__read[110] &&
	     !mem_rg_mem_state$port1__read ;
  assign WILL_FIRE_RL_mem_rl_process_requests =
	     CAN_FIRE_RL_mem_rl_process_requests &&
	     !WILL_FIRE_RL_mem_rl_receive_bram_response ;

  // rule RL_slave_mem_data_grab_response
  assign CAN_FIRE_RL_slave_mem_data_grab_response =
	     slave_mem_data_fifo_rx_rv$port1__read[58] &&
	     slave_mem_data_fifo_op_rv$port1__read &&
	     slave_mem_data_ctrl_reg[45] &&
	     (slave_mem_data_ctrl_reg[37:36] == 2'd3 ||
	      slave_mem_data_ctrl_reg[37:36] == 2'd2) ;
  assign WILL_FIRE_RL_slave_mem_data_grab_response =
	     CAN_FIRE_RL_slave_mem_data_grab_response ;

  // rule RL_slave_mem_data_default_response
  assign CAN_FIRE_RL_slave_mem_data_default_response =
	     slave_mem_data_ctrl_reg[45] &&
	     (slave_mem_data_ctrl_reg[37:36] == 2'd0 ||
	      slave_mem_data_ctrl_reg[37:36] == 2'd1) ;
  assign WILL_FIRE_RL_slave_mem_data_default_response =
	     CAN_FIRE_RL_slave_mem_data_default_response ;

  // rule RL_slave_mem_data_grab_ctrl
  assign CAN_FIRE_RL_slave_mem_data_grab_ctrl = !slave_mem_data_ctrl_reg[45] ;
  assign WILL_FIRE_RL_slave_mem_data_grab_ctrl =
	     CAN_FIRE_RL_slave_mem_data_grab_ctrl &&
	     !WILL_FIRE_RL_slave_mem_data_not_selected ;

  // rule RL_slave_rtc_not_selected
  assign CAN_FIRE_RL_slave_rtc_not_selected = x__h114095 != 2'd2 ;
  assign WILL_FIRE_RL_slave_rtc_not_selected =
	     CAN_FIRE_RL_slave_rtc_not_selected ;

  // rule RL_slave_rtc_send_request
  assign CAN_FIRE_RL_slave_rtc_send_request =
	     !slave_rtc_fifo_tx_rv[110] && !slave_rtc_fifo_op_rv &&
	     slave_rtc_ctrl_reg[45] &&
	     (slave_rtc_ctrl_reg[37:36] == 2'd3 ||
	      slave_rtc_ctrl_reg[37:36] == 2'd2) ;
  assign WILL_FIRE_RL_slave_rtc_send_request =
	     CAN_FIRE_RL_slave_rtc_send_request ;

  // rule RL_mkConnectionGetPut_4
  assign CAN_FIRE_RL_mkConnectionGetPut_4 =
	     slave_rtc_fifo_tx_rv$port1__read[110] &&
	     !rtc_pendingReq$port1__read[5] ;
  assign WILL_FIRE_RL_mkConnectionGetPut_4 =
	     CAN_FIRE_RL_mkConnectionGetPut_4 ;

  // rule RL_slave_rtc_grab_response
  assign CAN_FIRE_RL_slave_rtc_grab_response =
	     slave_rtc_fifo_rx_rv$port1__read[58] &&
	     slave_rtc_fifo_op_rv$port1__read &&
	     slave_rtc_ctrl_reg[45] &&
	     (slave_rtc_ctrl_reg[37:36] == 2'd3 ||
	      slave_rtc_ctrl_reg[37:36] == 2'd2) ;
  assign WILL_FIRE_RL_slave_rtc_grab_response =
	     CAN_FIRE_RL_slave_rtc_grab_response ;

  // rule RL_slave_rtc_default_response
  assign CAN_FIRE_RL_slave_rtc_default_response =
	     slave_rtc_ctrl_reg[45] &&
	     (slave_rtc_ctrl_reg[37:36] == 2'd0 ||
	      slave_rtc_ctrl_reg[37:36] == 2'd1) ;
  assign WILL_FIRE_RL_slave_rtc_default_response =
	     CAN_FIRE_RL_slave_rtc_default_response ;

  // rule RL_slave_rtc_grab_ctrl
  assign CAN_FIRE_RL_slave_rtc_grab_ctrl = !slave_rtc_ctrl_reg[45] ;
  assign WILL_FIRE_RL_slave_rtc_grab_ctrl =
	     CAN_FIRE_RL_slave_rtc_grab_ctrl &&
	     !WILL_FIRE_RL_slave_rtc_not_selected ;

  // rule RL_slave_mem_config_not_selected
  assign CAN_FIRE_RL_slave_mem_config_not_selected = x__h114095 != 2'd3 ;
  assign WILL_FIRE_RL_slave_mem_config_not_selected =
	     CAN_FIRE_RL_slave_mem_config_not_selected ;

  // rule RL_slave_mem_config_send_request
  assign CAN_FIRE_RL_slave_mem_config_send_request =
	     !slave_mem_config_fifo_tx_rv[110] &&
	     !slave_mem_config_fifo_op_rv &&
	     slave_mem_config_ctrl_reg[45] &&
	     (slave_mem_config_ctrl_reg[37:36] == 2'd3 ||
	      slave_mem_config_ctrl_reg[37:36] == 2'd2) ;
  assign WILL_FIRE_RL_slave_mem_config_send_request =
	     CAN_FIRE_RL_slave_mem_config_send_request ;

  // rule RL_mkConnectionGetPut_6
  assign CAN_FIRE_RL_mkConnectionGetPut_6 =
	     slave_mem_config_fifo_tx_rv$port1__read[110] &&
	     !config_memory_ff_reqs_rv[110] ;
  assign WILL_FIRE_RL_mkConnectionGetPut_6 =
	     CAN_FIRE_RL_mkConnectionGetPut_6 ;

  // rule RL_config_memory_rl_receive_bram_response
  assign CAN_FIRE_RL_config_memory_rl_receive_bram_response =
	     config_memory_ff_reqs_rv$port1__read[110] &&
	     !config_memory_ff_rsps_rv[58] &&
	     config_memory_rg_mem_state ;
  assign WILL_FIRE_RL_config_memory_rl_receive_bram_response =
	     CAN_FIRE_RL_config_memory_rl_receive_bram_response ;

  // rule RL_mkConnectionGetPut_7
  assign CAN_FIRE_RL_mkConnectionGetPut_7 =
	     config_memory_ff_rsps_rv$port1__read[58] &&
	     !slave_mem_config_fifo_rx_rv[58] ;
  assign WILL_FIRE_RL_mkConnectionGetPut_7 =
	     CAN_FIRE_RL_mkConnectionGetPut_7 ;

  // rule RL_config_memory_rl_process_requests
  assign CAN_FIRE_RL_config_memory_rl_process_requests =
	     config_memory_ff_reqs_rv$port1__read[110] &&
	     !config_memory_rg_mem_state$port1__read ;
  assign WILL_FIRE_RL_config_memory_rl_process_requests =
	     CAN_FIRE_RL_config_memory_rl_process_requests &&
	     !WILL_FIRE_RL_config_memory_rl_receive_bram_response ;

  // rule RL_slave_mem_config_grab_response
  assign CAN_FIRE_RL_slave_mem_config_grab_response =
	     slave_mem_config_fifo_rx_rv$port1__read[58] &&
	     slave_mem_config_fifo_op_rv$port1__read &&
	     slave_mem_config_ctrl_reg[45] &&
	     (slave_mem_config_ctrl_reg[37:36] == 2'd3 ||
	      slave_mem_config_ctrl_reg[37:36] == 2'd2) ;
  assign WILL_FIRE_RL_slave_mem_config_grab_response =
	     CAN_FIRE_RL_slave_mem_config_grab_response ;

  // rule RL_slave_mem_config_default_response
  assign CAN_FIRE_RL_slave_mem_config_default_response =
	     slave_mem_config_ctrl_reg[45] &&
	     (slave_mem_config_ctrl_reg[37:36] == 2'd0 ||
	      slave_mem_config_ctrl_reg[37:36] == 2'd1) ;
  assign WILL_FIRE_RL_slave_mem_config_default_response =
	     CAN_FIRE_RL_slave_mem_config_default_response ;

  // rule RL_slave_mem_config_grab_ctrl
  assign CAN_FIRE_RL_slave_mem_config_grab_ctrl =
	     !slave_mem_config_ctrl_reg[45] ;
  assign WILL_FIRE_RL_slave_mem_config_grab_ctrl =
	     CAN_FIRE_RL_slave_mem_config_grab_ctrl &&
	     !WILL_FIRE_RL_slave_mem_config_not_selected ;

  // rule RL_ahb_bus_broadcast_to_dummys
  assign CAN_FIRE_RL_ahb_bus_broadcast_to_dummys = 1'd1 ;
  assign WILL_FIRE_RL_ahb_bus_broadcast_to_dummys = 1'd1 ;

  // rule RL_ahb_bus_broadcast_to_masters
  assign CAN_FIRE_RL_ahb_bus_broadcast_to_masters = 1'd1 ;
  assign WILL_FIRE_RL_ahb_bus_broadcast_to_masters = 1'd1 ;

  // rule RL_masterX_0_ifc_every
  assign CAN_FIRE_RL_masterX_0_ifc_every =
	     (!ahb_bus_hmaster_addr[1] || !ahb_bus_hmaster_addr[0]) ?
	       IF_ahb_bus_s_map_data_0_105_BIT_2_106_THEN_SEL_ETC___d2109 :
	       ((ahb_bus_hmaster_addr[1] && ahb_bus_hmaster_addr[0]) ?
		  IF_ahb_bus_s_map_data_0_105_BIT_2_106_THEN_SEL_ETC___d2109 :
		  IF_ahb_bus_s_map_data_1_115_BIT_2_116_THEN_SEL_ETC___d2119) ;
  assign WILL_FIRE_RL_masterX_0_ifc_every = CAN_FIRE_RL_masterX_0_ifc_every ;

  // rule RL_masterX_0_ifc_pre_enq
  assign CAN_FIRE_RL_masterX_0_ifc_pre_enq =
	     masterX_0_ifc_request_reg[69:68] != 2'd0 &&
	     masterX_0_ifc_request_reg[69:68] != 2'd1 &&
	     CAN_FIRE_RL_masterX_0_ifc_every ;
  assign WILL_FIRE_RL_masterX_0_ifc_pre_enq =
	     CAN_FIRE_RL_masterX_0_ifc_pre_enq ;

  // rule RL_masterX_0_ifc_do_enq
  assign CAN_FIRE_RL_masterX_0_ifc_do_enq =
	     masterX_0_ifc_fifo_op_cntr_r != 2'd2 &&
	     CAN_FIRE_RL_masterX_0_ifc_pre_enq ;
  assign WILL_FIRE_RL_masterX_0_ifc_do_enq =
	     CAN_FIRE_RL_masterX_0_ifc_do_enq ;

  // rule RL_masterX_0_ifc_fifo_op_incCtr
  assign CAN_FIRE_RL_masterX_0_ifc_fifo_op_incCtr =
	     CAN_FIRE_RL_masterX_0_ifc_do_enq &&
	     CAN_FIRE_RL_masterX_0_ifc_do_enq &&
	     !masterX_0_ifc_fifo_op_dequeueing$whas ;
  assign WILL_FIRE_RL_masterX_0_ifc_fifo_op_incCtr =
	     CAN_FIRE_RL_masterX_0_ifc_fifo_op_incCtr ;

  // rule RL_masterX_0_ifc_fifo_op_decCtr
  assign CAN_FIRE_RL_masterX_0_ifc_fifo_op_decCtr =
	     masterX_0_ifc_fifo_op_dequeueing$whas &&
	     !CAN_FIRE_RL_masterX_0_ifc_do_enq ;
  assign WILL_FIRE_RL_masterX_0_ifc_fifo_op_decCtr =
	     CAN_FIRE_RL_masterX_0_ifc_fifo_op_decCtr ;

  // rule RL_masterX_0_ifc_fifo_op_both
  assign CAN_FIRE_RL_masterX_0_ifc_fifo_op_both =
	     CAN_FIRE_RL_masterX_0_ifc_do_enq &&
	     masterX_0_ifc_fifo_op_dequeueing$whas &&
	     CAN_FIRE_RL_masterX_0_ifc_do_enq ;
  assign WILL_FIRE_RL_masterX_0_ifc_fifo_op_both =
	     CAN_FIRE_RL_masterX_0_ifc_fifo_op_both ;

  // rule RL_masterX_1_ifc_every
  assign CAN_FIRE_RL_masterX_1_ifc_every =
	     IF_ahb_bus_s_map_data_1_115_BIT_2_116_THEN_SEL_ETC___d2119 ;
  assign WILL_FIRE_RL_masterX_1_ifc_every =
	     IF_ahb_bus_s_map_data_1_115_BIT_2_116_THEN_SEL_ETC___d2119 ;

  // rule RL_masterX_1_ifc_pre_enq
  assign CAN_FIRE_RL_masterX_1_ifc_pre_enq =
	     masterX_1_ifc_request_reg[69:68] != 2'd0 &&
	     masterX_1_ifc_request_reg[69:68] != 2'd1 &&
	     IF_ahb_bus_s_map_data_1_115_BIT_2_116_THEN_SEL_ETC___d2119 ;
  assign WILL_FIRE_RL_masterX_1_ifc_pre_enq =
	     CAN_FIRE_RL_masterX_1_ifc_pre_enq ;

  // rule RL_masterX_1_ifc_do_enq
  assign CAN_FIRE_RL_masterX_1_ifc_do_enq =
	     masterX_1_ifc_fifo_op_cntr_r != 2'd2 &&
	     CAN_FIRE_RL_masterX_1_ifc_pre_enq ;
  assign WILL_FIRE_RL_masterX_1_ifc_do_enq =
	     CAN_FIRE_RL_masterX_1_ifc_do_enq ;

  // rule RL_masterX_1_ifc_fifo_op_incCtr
  assign CAN_FIRE_RL_masterX_1_ifc_fifo_op_incCtr =
	     CAN_FIRE_RL_masterX_1_ifc_do_enq &&
	     CAN_FIRE_RL_masterX_1_ifc_do_enq &&
	     !masterX_1_ifc_fifo_op_dequeueing$whas ;
  assign WILL_FIRE_RL_masterX_1_ifc_fifo_op_incCtr =
	     CAN_FIRE_RL_masterX_1_ifc_fifo_op_incCtr ;

  // rule RL_masterX_1_ifc_fifo_op_decCtr
  assign CAN_FIRE_RL_masterX_1_ifc_fifo_op_decCtr =
	     masterX_1_ifc_fifo_op_dequeueing$whas &&
	     !CAN_FIRE_RL_masterX_1_ifc_do_enq ;
  assign WILL_FIRE_RL_masterX_1_ifc_fifo_op_decCtr =
	     CAN_FIRE_RL_masterX_1_ifc_fifo_op_decCtr ;

  // rule RL_masterX_1_ifc_fifo_op_both
  assign CAN_FIRE_RL_masterX_1_ifc_fifo_op_both =
	     CAN_FIRE_RL_masterX_1_ifc_do_enq &&
	     masterX_1_ifc_fifo_op_dequeueing$whas &&
	     CAN_FIRE_RL_masterX_1_ifc_do_enq ;
  assign WILL_FIRE_RL_masterX_1_ifc_fifo_op_both =
	     CAN_FIRE_RL_masterX_1_ifc_fifo_op_both ;

  // rule RL_ahb_bus_s_map_addr_update
  assign CAN_FIRE_RL_ahb_bus_s_map_addr_update =
	     IF_ahb_bus_s_map_data_0_105_BIT_2_106_THEN_SEL_ETC___d2109 ;
  assign WILL_FIRE_RL_ahb_bus_s_map_addr_update =
	     IF_ahb_bus_s_map_data_0_105_BIT_2_106_THEN_SEL_ETC___d2109 ;

  // rule RL_ahb_bus_s_map_addr_update_1
  assign CAN_FIRE_RL_ahb_bus_s_map_addr_update_1 =
	     IF_ahb_bus_s_map_data_1_115_BIT_2_116_THEN_SEL_ETC___d2119 ;
  assign WILL_FIRE_RL_ahb_bus_s_map_addr_update_1 =
	     IF_ahb_bus_s_map_data_1_115_BIT_2_116_THEN_SEL_ETC___d2119 ;

  // rule RL_ahb_bus_dummy_every
  assign CAN_FIRE_RL_ahb_bus_dummy_every = 1'd1 ;
  assign WILL_FIRE_RL_ahb_bus_dummy_every = 1'd1 ;

  // rule RL_ahb_bus_monitor_send_update
  assign CAN_FIRE_RL_ahb_bus_monitor_send_update = 1'd1 ;
  assign WILL_FIRE_RL_ahb_bus_monitor_send_update = 1'd1 ;

  // rule RL_ahb_bus_update_grant
  assign CAN_FIRE_RL_ahb_bus_update_grant =
	     !ahb_bus_hmaster_addr[1] ||
	     IF_SEL_ARR_masterX_0_ifc_request_reg_02_BITS_7_ETC___d1974 ;
  assign WILL_FIRE_RL_ahb_bus_update_grant =
	     CAN_FIRE_RL_ahb_bus_update_grant ;

  // rule RL_ahb_bus_monitor_update_started
  assign CAN_FIRE_RL_ahb_bus_monitor_update_started = 1'd1 ;
  assign WILL_FIRE_RL_ahb_bus_monitor_update_started = 1'd1 ;

  // rule RL_ahb_bus_monitor_every
  assign CAN_FIRE_RL_ahb_bus_monitor_every = 1'd1 ;
  assign WILL_FIRE_RL_ahb_bus_monitor_every = 1'd1 ;

  // rule RL_ahb_bus_monitor_sample
  assign CAN_FIRE_RL_ahb_bus_monitor_sample = ahb_bus_monitor_hready$wget ;
  assign WILL_FIRE_RL_ahb_bus_monitor_sample = ahb_bus_monitor_hready$wget ;

  // rule RL_ahb_bus_0_send_request
  assign CAN_FIRE_RL_ahb_bus_0_send_request =
	     CAN_FIRE_RL_masterX_0_send_request || masterX_0_req_reg ;
  assign WILL_FIRE_RL_ahb_bus_0_send_request =
	     CAN_FIRE_RL_ahb_bus_0_send_request ;

  // rule RL_ahb_bus_1_send_request
  assign CAN_FIRE_RL_ahb_bus_1_send_request =
	     CAN_FIRE_RL_masterX_1_send_request || masterX_1_req_reg ;
  assign WILL_FIRE_RL_ahb_bus_1_send_request =
	     CAN_FIRE_RL_ahb_bus_1_send_request ;

  // rule RL_ahb_bus_arbiter_every
  assign CAN_FIRE_RL_ahb_bus_arbiter_every = 1'd1 ;
  assign WILL_FIRE_RL_ahb_bus_arbiter_every = 1'd1 ;

  // rule RL_ahb_bus_arbiter_delay_grant
  assign CAN_FIRE_RL_ahb_bus_arbiter_delay_grant = 1'd1 ;
  assign WILL_FIRE_RL_ahb_bus_arbiter_delay_grant = 1'd1 ;

  // rule RL_ahb_bus_hready_update
  assign CAN_FIRE_RL_ahb_bus_hready_update =
	     SEL_ARR_ahb_bus_dummy_transfer_reg_916_EQ_0_91_ETC___d2064 ;
  assign WILL_FIRE_RL_ahb_bus_hready_update =
	     SEL_ARR_ahb_bus_dummy_transfer_reg_916_EQ_0_91_ETC___d2064 ;

  // rule RL_ahb_bus_dummy_updatex
  assign CAN_FIRE_RL_ahb_bus_dummy_updatex =
	     ahb_bus_dummy_transfer_reg == 2'd0 ||
	     ahb_bus_dummy_transfer_reg == 2'd1 ||
	     !ahb_bus_dummy_select_reg ;
  assign WILL_FIRE_RL_ahb_bus_dummy_updatex =
	     CAN_FIRE_RL_ahb_bus_dummy_updatex ;

  // rule RL_ahb_bus_dummy_update
  assign CAN_FIRE_RL_ahb_bus_dummy_update = 1'd1 ;
  assign WILL_FIRE_RL_ahb_bus_dummy_update = 1'd1 ;

  // rule RL_ahb_bus_0_send_grant
  assign CAN_FIRE_RL_ahb_bus_0_send_grant =
	     ahb_bus_arbiter_dgrant_vector_wire$wget[0] ;
  assign WILL_FIRE_RL_ahb_bus_0_send_grant =
	     CAN_FIRE_RL_ahb_bus_0_send_grant ;

  // rule RL_ahb_bus_requests_0_every
  assign CAN_FIRE_RL_ahb_bus_requests_0_every = 1'd1 ;
  assign WILL_FIRE_RL_ahb_bus_requests_0_every = 1'd1 ;

  // rule RL_masterX_0_update_grant
  assign CAN_FIRE_RL_masterX_0_update_grant = 1'd1 ;
  assign WILL_FIRE_RL_masterX_0_update_grant = 1'd1 ;

  // rule RL_masterX_0_start_op
  assign CAN_FIRE_RL_masterX_0_start_op =
	     masterX_0_fifo_rx_rv$port1__read[110] &&
	     CAN_FIRE_RL_masterX_0_ifc_every &&
	     CAN_FIRE_RL_masterX_0_ifc_every &&
	     !masterX_0_fifo_rx_rv$port1__read[109] &&
	     masterX_0_count == 10'd0 &&
	     !CAN_FIRE_RL_masterX_0_stall &&
	     ahb_bus_arbiter_dgrant_vector_wire$wget[0] ;
  assign WILL_FIRE_RL_masterX_0_start_op = CAN_FIRE_RL_masterX_0_start_op ;

  // rule RL_masterX_0_write_op
  assign CAN_FIRE_RL_masterX_0_write_op =
	     masterX_0_fifo_rx_rv$port1__read[110] &&
	     CAN_FIRE_RL_masterX_0_ifc_every &&
	     CAN_FIRE_RL_masterX_0_ifc_every &&
	     masterX_0_fifo_rx_rv$port1__read[109] &&
	     masterX_0_descriptor[109] &&
	     masterX_0_descriptor[108:107] == 2'd1 &&
	     NOT_masterX_0_count_17_EQ_0_18_19_AND_NOT_mast_ETC___d529 ;
  assign WILL_FIRE_RL_masterX_0_write_op = CAN_FIRE_RL_masterX_0_write_op ;

  // rule RL_masterX_0_read_op
  assign CAN_FIRE_RL_masterX_0_read_op =
	     CAN_FIRE_RL_masterX_0_ifc_every &&
	     CAN_FIRE_RL_masterX_0_ifc_every &&
	     masterX_0_descriptor[109] &&
	     masterX_0_descriptor[108:107] == 2'd0 &&
	     NOT_masterX_0_count_17_EQ_0_18_19_AND_NOT_mast_ETC___d529 ;
  assign WILL_FIRE_RL_masterX_0_read_op = CAN_FIRE_RL_masterX_0_read_op ;

  // rule RL_masterX_0_idle_op
  assign CAN_FIRE_RL_masterX_0_idle_op =
	     CAN_FIRE_RL_masterX_0_ifc_every &&
	     CAN_FIRE_RL_masterX_0_ifc_every &&
	     masterX_0_data_reg[32] ;
  assign WILL_FIRE_RL_masterX_0_idle_op =
	     CAN_FIRE_RL_masterX_0_idle_op &&
	     !WILL_FIRE_RL_masterX_0_read_op &&
	     !WILL_FIRE_RL_masterX_0_write_op &&
	     !WILL_FIRE_RL_masterX_0_start_op ;

  // rule RL_masterX_0_stall_op
  assign CAN_FIRE_RL_masterX_0_stall_op =
	     CAN_FIRE_RL_masterX_0_ifc_every &&
	     CAN_FIRE_RL_masterX_0_ifc_every &&
	     !masterX_0_data_reg[32] ;
  assign WILL_FIRE_RL_masterX_0_stall_op =
	     CAN_FIRE_RL_masterX_0_stall_op &&
	     !WILL_FIRE_RL_masterX_0_read_op &&
	     !WILL_FIRE_RL_masterX_0_write_op &&
	     !WILL_FIRE_RL_masterX_0_start_op ;

  // rule RL_masterX_0_grab_valid_response
  assign CAN_FIRE_RL_masterX_0_grab_valid_response =
	     masterX_0_response_wire$whas &&
	     masterX_0_fifo_tx_fifof_ff$FULL_N &&
	     masterX_0_ifc_response$wget[1] ;
  assign WILL_FIRE_RL_masterX_0_grab_valid_response =
	     CAN_FIRE_RL_masterX_0_grab_valid_response ;

  // rule RL_mkConnectionGetPut_1
  assign CAN_FIRE_RL_mkConnectionGetPut_1 =
	     masterX_0_fifo_tx_fifof_firstValid$Q_OUT &&
	     (masterX_0_fifo_tx_fifof_ff$EMPTY_N ||
	      CAN_FIRE_RL_masterX_0_grab_valid_response) &&
	     !proc_f_bus_rsps_rv[58] ;
  assign WILL_FIRE_RL_mkConnectionGetPut_1 =
	     CAN_FIRE_RL_mkConnectionGetPut_1 ;

  // rule RL_proc_rl_imem_response
  assign CAN_FIRE_RL_proc_rl_imem_response =
	     proc_f_bus_rsps_rv$port1__read[58] &&
	     proc_core$RDY_imem_ifc_rx_put &&
	     proc_who == 2'd0 ;
  assign WILL_FIRE_RL_proc_rl_imem_response =
	     CAN_FIRE_RL_proc_rl_imem_response ;

  // rule RL_proc_rl_dmem_response
  assign CAN_FIRE_RL_proc_rl_dmem_response =
	     proc_f_bus_rsps_rv$port1__read[58] &&
	     proc_core$RDY_dmem_ifc_rx_put &&
	     proc_who == 2'd1 ;
  assign WILL_FIRE_RL_proc_rl_dmem_response =
	     CAN_FIRE_RL_proc_rl_dmem_response ;

  // rule RL_action_l276c17
  assign CAN_FIRE_RL_action_l276c17 =
	     proc_core$RDY_debug_ifc_reset &&
	     (start_reg_2$whas && state_mkFSMstate == 5'd0 ||
	      proc_core$halt && !proc_core$uart_ifc_busy &&
	      start_reg_2$whas &&
	      state_mkFSMstate == 5'd13) ;
  assign WILL_FIRE_RL_action_l276c17 = CAN_FIRE_RL_action_l276c17 ;

  // rule __me_check_114
  assign CAN_FIRE___me_check_114 = 1'b1 ;
  assign WILL_FIRE___me_check_114 = 1'b1 ;

  // rule RL_masterX_0_grab_invalid_response
  assign CAN_FIRE_RL_masterX_0_grab_invalid_response =
	     masterX_0_response_wire$whas && !masterX_0_ifc_response$wget[1] ;
  assign WILL_FIRE_RL_masterX_0_grab_invalid_response =
	     CAN_FIRE_RL_masterX_0_grab_invalid_response ;

  // rule RL_masterX_0_fifo_tx_do_incr
  assign CAN_FIRE_RL_masterX_0_fifo_tx_do_incr =
	     CAN_FIRE_RL_masterX_0_grab_valid_response &&
	     !CAN_FIRE_RL_mkConnectionGetPut_1 ;
  assign WILL_FIRE_RL_masterX_0_fifo_tx_do_incr =
	     CAN_FIRE_RL_masterX_0_fifo_tx_do_incr ;

  // rule RL_masterX_0_fifo_tx_do_decr
  assign CAN_FIRE_RL_masterX_0_fifo_tx_do_decr =
	     !CAN_FIRE_RL_masterX_0_grab_valid_response &&
	     CAN_FIRE_RL_mkConnectionGetPut_1 ;
  assign WILL_FIRE_RL_masterX_0_fifo_tx_do_decr =
	     CAN_FIRE_RL_masterX_0_fifo_tx_do_decr ;

  // rule RL_masterX_0_fifo_tx_fifof_enqueue
  assign CAN_FIRE_RL_masterX_0_fifo_tx_fifof_enqueue =
	     CAN_FIRE_RL_masterX_0_grab_valid_response &&
	     (!CAN_FIRE_RL_mkConnectionGetPut_1 ||
	      masterX_0_fifo_tx_fifof_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_masterX_0_fifo_tx_fifof_enqueue =
	     CAN_FIRE_RL_masterX_0_fifo_tx_fifof_enqueue ;

  // rule RL_masterX_0_fifo_tx_fifof_dequeue
  assign CAN_FIRE_RL_masterX_0_fifo_tx_fifof_dequeue =
	     CAN_FIRE_RL_mkConnectionGetPut_1 &&
	     masterX_0_fifo_tx_fifof_ff$EMPTY_N ;
  assign WILL_FIRE_RL_masterX_0_fifo_tx_fifof_dequeue =
	     CAN_FIRE_RL_masterX_0_fifo_tx_fifof_dequeue ;

  // rule RL_ahb_bus_0_send_lock
  assign CAN_FIRE_RL_ahb_bus_0_send_lock = masterX_0_lock_wire$whas ;
  assign WILL_FIRE_RL_ahb_bus_0_send_lock = masterX_0_lock_wire$whas ;

  // rule RL_ahb_bus_1_send_grant
  assign CAN_FIRE_RL_ahb_bus_1_send_grant =
	     ahb_bus_arbiter_dgrant_vector_wire$wget[1] ;
  assign WILL_FIRE_RL_ahb_bus_1_send_grant =
	     CAN_FIRE_RL_ahb_bus_1_send_grant ;

  // rule RL_ahb_bus_requests_1_every
  assign CAN_FIRE_RL_ahb_bus_requests_1_every = 1'd1 ;
  assign WILL_FIRE_RL_ahb_bus_requests_1_every = 1'd1 ;

  // rule RL_masterX_1_update_grant
  assign CAN_FIRE_RL_masterX_1_update_grant = 1'd1 ;
  assign WILL_FIRE_RL_masterX_1_update_grant = 1'd1 ;

  // rule RL_masterX_1_start_op
  assign CAN_FIRE_RL_masterX_1_start_op =
	     masterX_1_fifo_rx_rv[110] &&
	     IF_ahb_bus_s_map_data_1_115_BIT_2_116_THEN_SEL_ETC___d2119 &&
	     !masterX_1_fifo_rx_rv[109] &&
	     masterX_1_count == 10'd0 &&
	     !CAN_FIRE_RL_masterX_1_stall &&
	     ahb_bus_arbiter_dgrant_vector_wire$wget[1] ;
  assign WILL_FIRE_RL_masterX_1_start_op = CAN_FIRE_RL_masterX_1_start_op ;

  // rule RL_masterX_1_write_op
  assign CAN_FIRE_RL_masterX_1_write_op =
	     masterX_1_fifo_rx_rv[110] &&
	     IF_ahb_bus_s_map_data_1_115_BIT_2_116_THEN_SEL_ETC___d2119 &&
	     masterX_1_fifo_rx_rv[109] &&
	     masterX_1_descriptor[109] &&
	     masterX_1_descriptor[108:107] == 2'd1 &&
	     NOT_masterX_1_count_54_EQ_0_55_56_AND_NOT_mast_ETC___d1266 ;
  assign WILL_FIRE_RL_masterX_1_write_op = CAN_FIRE_RL_masterX_1_write_op ;

  // rule RL_masterX_1_read_op
  assign CAN_FIRE_RL_masterX_1_read_op =
	     IF_ahb_bus_s_map_data_1_115_BIT_2_116_THEN_SEL_ETC___d2119 &&
	     masterX_1_descriptor[109] &&
	     masterX_1_descriptor[108:107] == 2'd0 &&
	     NOT_masterX_1_count_54_EQ_0_55_56_AND_NOT_mast_ETC___d1266 ;
  assign WILL_FIRE_RL_masterX_1_read_op = CAN_FIRE_RL_masterX_1_read_op ;

  // rule RL_masterX_1_idle_op
  assign CAN_FIRE_RL_masterX_1_idle_op =
	     IF_ahb_bus_s_map_data_1_115_BIT_2_116_THEN_SEL_ETC___d2119 &&
	     masterX_1_data_reg[32] ;
  assign WILL_FIRE_RL_masterX_1_idle_op =
	     CAN_FIRE_RL_masterX_1_idle_op &&
	     !WILL_FIRE_RL_masterX_1_read_op &&
	     !WILL_FIRE_RL_masterX_1_write_op &&
	     !WILL_FIRE_RL_masterX_1_start_op ;

  // rule RL_masterX_1_stall_op
  assign CAN_FIRE_RL_masterX_1_stall_op =
	     IF_ahb_bus_s_map_data_1_115_BIT_2_116_THEN_SEL_ETC___d2119 &&
	     !masterX_1_data_reg[32] ;
  assign WILL_FIRE_RL_masterX_1_stall_op =
	     CAN_FIRE_RL_masterX_1_stall_op &&
	     !WILL_FIRE_RL_masterX_1_read_op &&
	     !WILL_FIRE_RL_masterX_1_write_op &&
	     !WILL_FIRE_RL_masterX_1_start_op ;

  // rule RL_masterX_1_grab_valid_response
  assign CAN_FIRE_RL_masterX_1_grab_valid_response =
	     masterX_1_response_wire$whas &&
	     masterX_1_fifo_tx_fifof_ff$FULL_N &&
	     masterX_1_ifc_response$wget[1] ;
  assign WILL_FIRE_RL_masterX_1_grab_valid_response =
	     CAN_FIRE_RL_masterX_1_grab_valid_response ;

  // rule RL_masterX_1_grab_invalid_response
  assign CAN_FIRE_RL_masterX_1_grab_invalid_response =
	     masterX_1_response_wire$whas && !masterX_1_ifc_response$wget[1] ;
  assign WILL_FIRE_RL_masterX_1_grab_invalid_response =
	     CAN_FIRE_RL_masterX_1_grab_invalid_response ;

  // rule RL_masterX_1_fifo_tx_do_incr
  assign CAN_FIRE_RL_masterX_1_fifo_tx_do_incr =
	     CAN_FIRE_RL_masterX_1_grab_valid_response ;
  assign WILL_FIRE_RL_masterX_1_fifo_tx_do_incr =
	     CAN_FIRE_RL_masterX_1_grab_valid_response ;

  // rule RL_masterX_1_fifo_tx_do_decr
  assign CAN_FIRE_RL_masterX_1_fifo_tx_do_decr = 1'b0 ;
  assign WILL_FIRE_RL_masterX_1_fifo_tx_do_decr = 1'b0 ;

  // rule RL_masterX_1_fifo_tx_fifof_enqueue
  assign CAN_FIRE_RL_masterX_1_fifo_tx_fifof_enqueue =
	     CAN_FIRE_RL_masterX_1_grab_valid_response ;
  assign WILL_FIRE_RL_masterX_1_fifo_tx_fifof_enqueue =
	     CAN_FIRE_RL_masterX_1_grab_valid_response ;

  // rule RL_ahb_bus_1_send_lock
  assign CAN_FIRE_RL_ahb_bus_1_send_lock = masterX_1_lock_wire$whas ;
  assign WILL_FIRE_RL_ahb_bus_1_send_lock = masterX_1_lock_wire$whas ;

  // rule RL_ahb_bus_dummys_0_every
  assign CAN_FIRE_RL_ahb_bus_dummys_0_every = 1'd1 ;
  assign WILL_FIRE_RL_ahb_bus_dummys_0_every = 1'd1 ;

  // rule RL_ahb_bus_dummys_0_updatex
  assign CAN_FIRE_RL_ahb_bus_dummys_0_updatex =
	     ahb_bus_dummys_0_transfer_reg == 2'd0 ||
	     ahb_bus_dummys_0_transfer_reg == 2'd1 ||
	     !ahb_bus_dummys_0_select_reg ;
  assign WILL_FIRE_RL_ahb_bus_dummys_0_updatex =
	     CAN_FIRE_RL_ahb_bus_dummys_0_updatex ;

  // rule RL_ahb_bus_dummys_0_update
  assign CAN_FIRE_RL_ahb_bus_dummys_0_update = 1'd1 ;
  assign WILL_FIRE_RL_ahb_bus_dummys_0_update = 1'd1 ;

  // rule RL_ahb_bus_dummys_1_every
  assign CAN_FIRE_RL_ahb_bus_dummys_1_every = 1'd1 ;
  assign WILL_FIRE_RL_ahb_bus_dummys_1_every = 1'd1 ;

  // rule RL_ahb_bus_dummys_1_updatex
  assign CAN_FIRE_RL_ahb_bus_dummys_1_updatex =
	     ahb_bus_dummys_1_transfer_reg == 2'd0 ||
	     ahb_bus_dummys_1_transfer_reg == 2'd1 ||
	     !ahb_bus_dummys_1_select_reg ;
  assign WILL_FIRE_RL_ahb_bus_dummys_1_updatex =
	     CAN_FIRE_RL_ahb_bus_dummys_1_updatex ;

  // rule RL_ahb_bus_dummys_1_update
  assign CAN_FIRE_RL_ahb_bus_dummys_1_update = 1'd1 ;
  assign WILL_FIRE_RL_ahb_bus_dummys_1_update = 1'd1 ;

  // rule RL_start_reg__dreg_update
  assign CAN_FIRE_RL_start_reg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_start_reg__dreg_update = 1'd1 ;

  // rule RL_state_handle_abort
  assign CAN_FIRE_RL_state_handle_abort = 1'b0 ;
  assign WILL_FIRE_RL_state_handle_abort = 1'b0 ;

  // rule RL_state_every
  assign CAN_FIRE_RL_state_every = 1'd1 ;
  assign WILL_FIRE_RL_state_every = 1'd1 ;

  // rule RL_state_fired__dreg_update
  assign CAN_FIRE_RL_state_fired__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_state_fired__dreg_update = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_masterX_0_ifc_fifo_op_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_masterX_0_ifc_fifo_op_both && _dfoo3 ;
  assign MUX_masterX_0_ifc_fifo_op_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_masterX_0_ifc_fifo_op_incCtr &&
	     masterX_0_ifc_fifo_op_cntr_r == 2'd0 ;
  assign MUX_masterX_0_ifc_fifo_op_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_masterX_0_ifc_fifo_op_both && _dfoo1 ;
  assign MUX_masterX_0_ifc_fifo_op_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_masterX_0_ifc_fifo_op_incCtr &&
	     masterX_0_ifc_fifo_op_cntr_r == 2'd1 ;
  assign MUX_masterX_0_lock_wire$wset_1__PSEL_1 =
	     WILL_FIRE_RL_masterX_0_read_op ||
	     WILL_FIRE_RL_masterX_0_write_op ;
  assign MUX_masterX_0_req_reg$write_1__SEL_1 =
	     WILL_FIRE_RL_masterX_0_stall_op ||
	     WILL_FIRE_RL_masterX_0_idle_op ;
  assign MUX_masterX_1_ifc_fifo_op_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_masterX_1_ifc_fifo_op_both && _dfoo7 ;
  assign MUX_masterX_1_ifc_fifo_op_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_masterX_1_ifc_fifo_op_incCtr &&
	     masterX_1_ifc_fifo_op_cntr_r == 2'd0 ;
  assign MUX_masterX_1_ifc_fifo_op_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_masterX_1_ifc_fifo_op_both && _dfoo5 ;
  assign MUX_masterX_1_ifc_fifo_op_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_masterX_1_ifc_fifo_op_incCtr &&
	     masterX_1_ifc_fifo_op_cntr_r == 2'd1 ;
  assign MUX_masterX_1_lock_wire$wset_1__PSEL_1 =
	     WILL_FIRE_RL_masterX_1_read_op ||
	     WILL_FIRE_RL_masterX_1_write_op ;
  assign MUX_masterX_1_req_reg$write_1__SEL_1 =
	     WILL_FIRE_RL_masterX_1_stall_op ||
	     WILL_FIRE_RL_masterX_1_idle_op ;
  assign MUX_proc_burst_length$write_1__SEL_1 =
	     WILL_FIRE_RL_proc_rl_imem_request &&
	     !proc_core$imem_ifc_tx_get[109] ;
  assign MUX_proc_who$write_1__PSEL_1 =
	     WILL_FIRE_RL_proc_rl_dmem_response ||
	     WILL_FIRE_RL_proc_rl_imem_response ;
  assign MUX_proc_who$write_1__SEL_1 =
	     MUX_proc_who$write_1__PSEL_1 && proc_burst_length == 10'd1 ;
  assign MUX_rtc_timeRegHi$write_1__SEL_1 =
	     WILL_FIRE_RL_mkConnectionGetPut_4 &&
	     !slave_rtc_fifo_tx_rv$port1__read[109] &&
	     slave_rtc_fifo_tx_rv$port1__read[108:107] == 2'd1 &&
	     slave_rtc_fifo_tx_rv$port1__read[76:73] == 4'h4 ;
  assign MUX_rtc_timeRegLo$write_1__SEL_1 =
	     WILL_FIRE_RL_mkConnectionGetPut_4 &&
	     !slave_rtc_fifo_tx_rv$port1__read[109] &&
	     slave_rtc_fifo_tx_rv$port1__read[108:107] == 2'd1 &&
	     slave_rtc_fifo_tx_rv$port1__read[76:73] == 4'h0 ;
  assign MUX_slave_mem_config_ctrl_reg$write_1__SEL_1 =
	     WILL_FIRE_RL_slave_mem_config_default_response ||
	     WILL_FIRE_RL_slave_mem_config_grab_response ;
  assign MUX_slave_mem_data_ctrl_reg$write_1__SEL_1 =
	     WILL_FIRE_RL_slave_mem_data_default_response ||
	     WILL_FIRE_RL_slave_mem_data_grab_response ;
  assign MUX_slave_rtc_ctrl_reg$write_1__SEL_1 =
	     WILL_FIRE_RL_slave_rtc_default_response ||
	     WILL_FIRE_RL_slave_rtc_grab_response ;
  assign MUX_masterX_0_count$write_1__VAL_1 = masterX_0_count - 10'd1 ;
  assign MUX_masterX_0_count$write_1__VAL_2 =
	     masterX_0_fifo_rx_rv$port1__read[40:31] - 10'd1 ;
  assign MUX_masterX_0_data_reg$write_1__VAL_1 =
	     { 1'd0, 32'hAAAAAAAA /* unspecified value */  } ;
  assign MUX_masterX_0_data_reg$write_1__VAL_2 =
	     { 1'd1, masterX_0_fifo_rx_rv$port1__read[72:41] } ;
  assign MUX_masterX_0_data_reg$write_1__VAL_3 =
	     { 1'd1, masterX_0_fifo_rx_rv$port1__read[35:4] } ;
  assign MUX_masterX_0_descriptor$write_1__VAL_1 =
	     { 1'd1,
	       masterX_0_descriptor[108:105],
	       next_addr__h22814,
	       masterX_0_descriptor[72:0] } ;
  assign MUX_masterX_0_descriptor$write_1__VAL_2 =
	     { 1'd1,
	       masterX_0_fifo_rx_rv$port1__read[108:105],
	       next_addr__h9671,
	       masterX_0_fifo_rx_rv$port1__read[72:0] } ;
  assign MUX_masterX_0_fifo_tx_count$write_1__VAL_1 =
	     masterX_0_fifo_tx_count + 3'd1 ;
  assign MUX_masterX_0_fifo_tx_count$write_1__VAL_2 =
	     masterX_0_fifo_tx_count - 3'd1 ;
  assign MUX_masterX_0_ifc_fifo_op_cntr_r$write_1__VAL_2 =
	     masterX_0_ifc_fifo_op_cntr_r + 2'd1 ;
  assign MUX_masterX_0_ifc_fifo_op_q_0$write_1__VAL_1 =
	     (masterX_0_ifc_fifo_op_cntr_r == 2'd1) ?
	       masterX_0_ifc_fifo_op_x_wire$wget :
	       masterX_0_ifc_fifo_op_q_1 ;
  assign MUX_masterX_0_ifc_fifo_op_q_1$write_1__VAL_1 =
	     (masterX_0_ifc_fifo_op_cntr_r == 2'd2) ?
	       masterX_0_ifc_fifo_op_x_wire$wget :
	       v__h108103 ;
  assign MUX_masterX_0_ifc_request_reg$write_1__VAL_1 =
	     { masterX_0_descriptor[108:107] != 2'd0,
	       IF_masterX_0_descriptor_25_BITS_24_TO_23_40_EQ_ETC___d765,
	       IF_masterX_0_descriptor_25_BITS_26_TO_25_36_EQ_ETC___d788,
	       (masterX_0_descriptor[26:25] == 2'd0 &&
		masterX_0_descriptor[40:31] == 10'd1 ||
		(masterX_0_descriptor[26:25] != 2'd1 ||
		 masterX_0_descriptor[40:31] != 10'd4) &&
		(masterX_0_descriptor[26:25] != 2'd1 ||
		 masterX_0_descriptor[40:31] != 10'd8) &&
		(masterX_0_descriptor[26:25] != 2'd1 ||
		 masterX_0_descriptor[40:31] != 10'd16) &&
		masterX_0_descriptor[26:25] != 2'd0) ?
		 2'd2 :
		 2'd3,
	       4'd0,
	       masterX_0_descriptor[104:73],
	       masterX_0_data_reg[31:0] } ;
  assign MUX_masterX_0_ifc_request_reg$write_1__VAL_2 =
	     { masterX_0_fifo_rx_rv$port1__read[108:107] != 2'd0,
	       CASE_masterX_0_fifo_rx_rvport1__read_BITS_24__ETC__q6,
	       (masterX_0_fifo_rx_rv$port1__read[26:25] == 2'd0 &&
		masterX_0_fifo_rx_rv$port1__read[40:31] == 10'd1) ?
		 3'd0 :
		 ((masterX_0_fifo_rx_rv$port1__read[26:25] == 2'd0 &&
		   masterX_0_fifo_rx_rv$port1__read[40:31] == 10'd4) ?
		    3'd3 :
		    ((masterX_0_fifo_rx_rv$port1__read[26:25] == 2'd0 &&
		      masterX_0_fifo_rx_rv$port1__read[40:31] == 10'd8) ?
		       3'd5 :
		       ((masterX_0_fifo_rx_rv$port1__read[26:25] == 2'd0 &&
			 masterX_0_fifo_rx_rv$port1__read[40:31] == 10'd16) ?
			  3'd7 :
			  ((masterX_0_fifo_rx_rv$port1__read[26:25] == 2'd1 &&
			    masterX_0_fifo_rx_rv$port1__read[40:31] ==
			    10'd4) ?
			     3'd2 :
			     ((masterX_0_fifo_rx_rv$port1__read[26:25] ==
			       2'd1 &&
			       masterX_0_fifo_rx_rv$port1__read[40:31] ==
			       10'd8) ?
				3'd4 :
				((masterX_0_fifo_rx_rv$port1__read[26:25] ==
				  2'd1 &&
				  masterX_0_fifo_rx_rv$port1__read[40:31] ==
				  10'd16) ?
				   3'd6 :
				   CASE_masterX_0_fifo_rx_rvport1__read_BITS_26__ETC__q7)))))),
	       6'd32,
	       masterX_0_fifo_rx_rv$port1__read[104:73],
	       masterX_0_data_reg[31:0] } ;
  assign MUX_masterX_0_ifc_request_reg$write_1__VAL_3 =
	     { masterX_0_descriptor_25_BIT_109_26_AND_NOT_mas_ETC___d831,
	       masterX_0_data_reg[31:0] } ;
  assign MUX_masterX_0_ifc_request_reg$write_1__VAL_4 =
	     { masterX_0_descriptor_25_BIT_109_26_AND_NOT_mas_ETC___d831,
	       32'hAAAAAAAA /* unspecified value */  } ;
  assign MUX_masterX_0_req_reg$write_1__VAL_1 =
	     (!masterX_0_descriptor[109] ||
	      (masterX_0_descriptor[26:25] != 2'd0 ||
	       masterX_0_descriptor[40:31] != 10'd1) &&
	      (masterX_0_descriptor[26:25] == 2'd1 &&
	       masterX_0_descriptor[40:31] == 10'd4 ||
	       masterX_0_descriptor[26:25] == 2'd1 &&
	       masterX_0_descriptor[40:31] == 10'd8 ||
	       masterX_0_descriptor[26:25] == 2'd1 &&
	       masterX_0_descriptor[40:31] == 10'd16 ||
	       masterX_0_descriptor[26:25] == 2'd0)) &&
	     masterX_0_count != 10'd0 &&
	     masterX_0_req_reg ;
  assign MUX_masterX_0_req_reg$write_1__VAL_2 =
	     masterX_0_descriptor[40:31] != 10'd1 &&
	     masterX_0_descriptor[40:31] != 10'd4 &&
	     masterX_0_descriptor[40:31] != 10'd8 &&
	     masterX_0_descriptor[40:31] != 10'd16 &&
	     masterX_0_descriptor[26:25] == 2'd0 &&
	     masterX_0_count != 10'd1 ;
  assign MUX_masterX_0_req_reg$write_1__VAL_3 =
	     masterX_0_fifo_rx_rv$port1__read[40:31] != 10'd4 &&
	     masterX_0_fifo_rx_rv$port1__read[40:31] != 10'd8 &&
	     masterX_0_fifo_rx_rv$port1__read[40:31] != 10'd16 &&
	     masterX_0_fifo_rx_rv$port1__read[26:25] == 2'd0 &&
	     masterX_0_fifo_rx_rv$port1__read[40:31] != 10'd1 ;
  assign MUX_masterX_1_count$write_1__VAL_1 = masterX_1_count - 10'd1 ;
  assign MUX_masterX_1_count$write_1__VAL_2 =
	     masterX_1_fifo_rx_rv[40:31] - 10'd1 ;
  assign MUX_masterX_1_data_reg$write_1__VAL_2 =
	     { 1'd1, masterX_1_fifo_rx_rv[72:41] } ;
  assign MUX_masterX_1_data_reg$write_1__VAL_3 =
	     { 1'd1, masterX_1_fifo_rx_rv[35:4] } ;
  assign MUX_masterX_1_descriptor$write_1__VAL_1 =
	     { 1'd1,
	       masterX_1_descriptor[108:105],
	       next_addr__h66813,
	       masterX_1_descriptor[72:0] } ;
  assign MUX_masterX_1_descriptor$write_1__VAL_2 =
	     { 1'd1,
	       masterX_1_fifo_rx_rv[108:105],
	       next_addr__h53695,
	       masterX_1_fifo_rx_rv[72:0] } ;
  assign MUX_masterX_1_fifo_tx_count$write_1__VAL_1 =
	     masterX_1_fifo_tx_count + 3'd1 ;
  assign MUX_masterX_1_ifc_fifo_op_cntr_r$write_1__VAL_2 =
	     masterX_1_ifc_fifo_op_cntr_r + 2'd1 ;
  assign MUX_masterX_1_ifc_fifo_op_q_0$write_1__VAL_1 =
	     (masterX_1_ifc_fifo_op_cntr_r == 2'd1) ?
	       masterX_1_ifc_fifo_op_x_wire$wget :
	       masterX_1_ifc_fifo_op_q_1 ;
  assign MUX_masterX_1_ifc_fifo_op_q_1$write_1__VAL_1 =
	     (masterX_1_ifc_fifo_op_cntr_r == 2'd2) ?
	       masterX_1_ifc_fifo_op_x_wire$wget :
	       v__h108103 ;
  assign MUX_masterX_1_ifc_request_reg$write_1__VAL_1 =
	     { masterX_1_descriptor[108:107] != 2'd0,
	       IF_masterX_1_descriptor_262_BITS_24_TO_23_277__ETC___d1502,
	       IF_masterX_1_descriptor_262_BITS_26_TO_25_273__ETC___d1525,
	       (masterX_1_descriptor[26:25] == 2'd0 &&
		masterX_1_descriptor[40:31] == 10'd1 ||
		(masterX_1_descriptor[26:25] != 2'd1 ||
		 masterX_1_descriptor[40:31] != 10'd4) &&
		(masterX_1_descriptor[26:25] != 2'd1 ||
		 masterX_1_descriptor[40:31] != 10'd8) &&
		(masterX_1_descriptor[26:25] != 2'd1 ||
		 masterX_1_descriptor[40:31] != 10'd16) &&
		masterX_1_descriptor[26:25] != 2'd0) ?
		 2'd2 :
		 2'd3,
	       4'd0,
	       masterX_1_descriptor[104:73],
	       masterX_1_data_reg[31:0] } ;
  assign MUX_masterX_1_ifc_request_reg$write_1__VAL_2 =
	     { masterX_1_fifo_rx_rv[108:107] != 2'd0,
	       CASE_masterX_1_fifo_rx_rv_BITS_24_TO_23_0_0_1__ETC__q4,
	       (masterX_1_fifo_rx_rv[26:25] == 2'd0 &&
		masterX_1_fifo_rx_rv[40:31] == 10'd1) ?
		 3'd0 :
		 ((masterX_1_fifo_rx_rv[26:25] == 2'd0 &&
		   masterX_1_fifo_rx_rv[40:31] == 10'd4) ?
		    3'd3 :
		    ((masterX_1_fifo_rx_rv[26:25] == 2'd0 &&
		      masterX_1_fifo_rx_rv[40:31] == 10'd8) ?
		       3'd5 :
		       ((masterX_1_fifo_rx_rv[26:25] == 2'd0 &&
			 masterX_1_fifo_rx_rv[40:31] == 10'd16) ?
			  3'd7 :
			  ((masterX_1_fifo_rx_rv[26:25] == 2'd1 &&
			    masterX_1_fifo_rx_rv[40:31] == 10'd4) ?
			     3'd2 :
			     ((masterX_1_fifo_rx_rv[26:25] == 2'd1 &&
			       masterX_1_fifo_rx_rv[40:31] == 10'd8) ?
				3'd4 :
				((masterX_1_fifo_rx_rv[26:25] == 2'd1 &&
				  masterX_1_fifo_rx_rv[40:31] == 10'd16) ?
				   3'd6 :
				   CASE_masterX_1_fifo_rx_rv_BITS_26_TO_25_0_1_1__ETC__q5)))))),
	       6'd32,
	       masterX_1_fifo_rx_rv[104:73],
	       masterX_1_data_reg[31:0] } ;
  assign MUX_masterX_1_ifc_request_reg$write_1__VAL_3 =
	     { masterX_1_descriptor_262_BIT_109_263_AND_NOT_m_ETC___d1567,
	       masterX_1_data_reg[31:0] } ;
  assign MUX_masterX_1_ifc_request_reg$write_1__VAL_4 =
	     { masterX_1_descriptor_262_BIT_109_263_AND_NOT_m_ETC___d1567,
	       32'hAAAAAAAA /* unspecified value */  } ;
  assign MUX_masterX_1_req_reg$write_1__VAL_1 =
	     (!masterX_1_descriptor[109] ||
	      (masterX_1_descriptor[26:25] != 2'd0 ||
	       masterX_1_descriptor[40:31] != 10'd1) &&
	      (masterX_1_descriptor[26:25] == 2'd1 &&
	       masterX_1_descriptor[40:31] == 10'd4 ||
	       masterX_1_descriptor[26:25] == 2'd1 &&
	       masterX_1_descriptor[40:31] == 10'd8 ||
	       masterX_1_descriptor[26:25] == 2'd1 &&
	       masterX_1_descriptor[40:31] == 10'd16 ||
	       masterX_1_descriptor[26:25] == 2'd0)) &&
	     masterX_1_count != 10'd0 &&
	     masterX_1_req_reg ;
  assign MUX_masterX_1_req_reg$write_1__VAL_2 =
	     masterX_1_descriptor[40:31] != 10'd1 &&
	     masterX_1_descriptor[40:31] != 10'd4 &&
	     masterX_1_descriptor[40:31] != 10'd8 &&
	     masterX_1_descriptor[40:31] != 10'd16 &&
	     masterX_1_descriptor[26:25] == 2'd0 &&
	     masterX_1_count != 10'd1 ;
  assign MUX_masterX_1_req_reg$write_1__VAL_3 =
	     masterX_1_fifo_rx_rv[40:31] != 10'd4 &&
	     masterX_1_fifo_rx_rv[40:31] != 10'd8 &&
	     masterX_1_fifo_rx_rv[40:31] != 10'd16 &&
	     masterX_1_fifo_rx_rv[26:25] == 2'd0 &&
	     masterX_1_fifo_rx_rv[40:31] != 10'd1 ;
  assign MUX_proc_burst_length$write_1__VAL_2 = proc_burst_length - 10'd1 ;
  assign MUX_proc_f_bus_reqs_rv$port0__write_1__VAL_1 =
	     { 1'd1, proc_core$imem_ifc_tx_get } ;
  assign MUX_proc_f_bus_reqs_rv$port0__write_1__VAL_2 =
	     { 1'd1, proc_core$dmem_ifc_tx_get } ;
  assign MUX_rg_xi$write_1__VAL_1 = rg_xi + 6'd1 ;
  assign MUX_slave_mem_config_ctrl_reg$write_1__VAL_1 =
	     { x__h114095 == 2'd3,
	       slave_mem_data_ifc_write_wire$wget,
	       slave_mem_data_ifc_size_wire$wget,
	       SEL_ARR_masterX_0_ifc_request_reg_02_BITS_72_T_ETC___d1947,
	       SEL_ARR_masterX_0_ifc_request_reg_02_BITS_69_T_ETC___d1943,
	       x_request__read_ctrl_prot__h102586,
	       x_request__read_ctrl_addr__h102587 } ;
  assign MUX_slave_mem_config_ctrl_reg$write_1__VAL_2 =
	     { 1'd1,
	       slave_mem_data_ifc_write_wire$wget,
	       slave_mem_data_ifc_size_wire$wget,
	       SEL_ARR_masterX_0_ifc_request_reg_02_BITS_72_T_ETC___d1947,
	       SEL_ARR_masterX_0_ifc_request_reg_02_BITS_69_T_ETC___d1943,
	       x_request__read_ctrl_prot__h102586,
	       x_request__read_ctrl_addr__h102587 } ;
  assign MUX_slave_mem_config_ifc_response_wire$wset_1__VAL_1 =
	     { 35'd582, 1'b0 /* unspecified value */  } ;
  assign MUX_slave_mem_config_ifc_response_wire$wset_1__VAL_2 =
	     { 2'd0,
	       slave_mem_config_fifo_rx_rv$port1__read[55:24],
	       v__h108103 } ;
  assign MUX_slave_mem_data_ctrl_reg$write_1__VAL_1 =
	     { x__h114095 == 2'd1,
	       slave_mem_data_ifc_write_wire$wget,
	       slave_mem_data_ifc_size_wire$wget,
	       SEL_ARR_masterX_0_ifc_request_reg_02_BITS_72_T_ETC___d1947,
	       SEL_ARR_masterX_0_ifc_request_reg_02_BITS_69_T_ETC___d1943,
	       x_request__read_ctrl_prot__h96941,
	       x_request__read_ctrl_addr__h96942 } ;
  assign MUX_slave_mem_data_ctrl_reg$write_1__VAL_2 =
	     { 1'd1,
	       slave_mem_data_ifc_write_wire$wget,
	       slave_mem_data_ifc_size_wire$wget,
	       SEL_ARR_masterX_0_ifc_request_reg_02_BITS_72_T_ETC___d1947,
	       SEL_ARR_masterX_0_ifc_request_reg_02_BITS_69_T_ETC___d1943,
	       x_request__read_ctrl_prot__h96941,
	       x_request__read_ctrl_addr__h96942 } ;
  assign MUX_slave_mem_data_ifc_response_wire$wset_1__VAL_2 =
	     { 2'd0,
	       slave_mem_data_fifo_rx_rv$port1__read[55:24],
	       v__h108103 } ;
  assign MUX_slave_rtc_ctrl_reg$write_1__VAL_1 =
	     { x__h114095 == 2'd2,
	       slave_mem_data_ifc_write_wire$wget,
	       slave_mem_data_ifc_size_wire$wget,
	       SEL_ARR_masterX_0_ifc_request_reg_02_BITS_72_T_ETC___d1947,
	       SEL_ARR_masterX_0_ifc_request_reg_02_BITS_69_T_ETC___d1943,
	       x_request__read_ctrl_prot__h99768,
	       x_request__read_ctrl_addr__h99769 } ;
  assign MUX_slave_rtc_ctrl_reg$write_1__VAL_2 =
	     { 1'd1,
	       slave_mem_data_ifc_write_wire$wget,
	       slave_mem_data_ifc_size_wire$wget,
	       SEL_ARR_masterX_0_ifc_request_reg_02_BITS_72_T_ETC___d1947,
	       SEL_ARR_masterX_0_ifc_request_reg_02_BITS_69_T_ETC___d1943,
	       x_request__read_ctrl_prot__h99768,
	       x_request__read_ctrl_addr__h99769 } ;
  assign MUX_slave_rtc_ifc_response_wire$wset_1__VAL_2 =
	     { 2'd0, slave_rtc_fifo_rx_rv$port1__read[55:24], v__h108103 } ;

  // inlined wires
  assign masterX_0_response_wire$whas =
	     WILL_FIRE_RL_masterX_0_stall_op ||
	     WILL_FIRE_RL_masterX_0_idle_op ||
	     WILL_FIRE_RL_masterX_0_read_op ||
	     WILL_FIRE_RL_masterX_0_write_op ||
	     WILL_FIRE_RL_masterX_0_start_op ;
  assign masterX_0_fifo_tx_fifof_enqw$wget =
	     { masterX_0_ifc_response$wget[0] ? 2'd1 : 2'd0,
	       masterX_0_ifc_response$wget[33:2],
	       (masterX_0_ifc_response$wget[35:34] == 2'd0) ?
		 masterX_0_ifc_response$wget[35:34] :
		 2'd1,
	       22'd0 } ;
  assign masterX_0_lock_wire$whas =
	     _dand1masterX_0_lock_wire$EN_wset ||
	     WILL_FIRE_RL_masterX_0_start_op &&
	     (masterX_0_fifo_rx_rv$port1__read[26:25] != 2'd1 ||
	      masterX_0_fifo_rx_rv$port1__read[40:31] != 10'd4) &&
	     (masterX_0_fifo_rx_rv$port1__read[26:25] != 2'd1 ||
	      masterX_0_fifo_rx_rv$port1__read[40:31] != 10'd8) &&
	     (masterX_0_fifo_rx_rv$port1__read[26:25] != 2'd1 ||
	      masterX_0_fifo_rx_rv$port1__read[40:31] != 10'd16) &&
	     masterX_0_fifo_rx_rv$port1__read[26:25] != 2'd0 &&
	     masterX_0_fifo_rx_rv$port1__read[40:31] != 10'd1 ;
  assign masterX_0_ifc_response$wget =
	     { masterX_0_ifc_response_wire$wget,
	       new_value_data__h9224,
	       masterX_0_ifc_fifo_op_q_0 } ;
  assign masterX_0_ifc_fifo_op_x_wire$wget =
	     { 1'd1, masterX_0_ifc_request_reg[76] } ;
  assign masterX_1_response_wire$whas =
	     WILL_FIRE_RL_masterX_1_stall_op ||
	     WILL_FIRE_RL_masterX_1_idle_op ||
	     WILL_FIRE_RL_masterX_1_read_op ||
	     WILL_FIRE_RL_masterX_1_write_op ||
	     WILL_FIRE_RL_masterX_1_start_op ;
  assign masterX_1_fifo_tx_fifof_enqw$wget =
	     { masterX_1_ifc_response$wget[0] ? 2'd1 : 2'd0,
	       masterX_1_ifc_response$wget[33:2],
	       (masterX_1_ifc_response$wget[35:34] == 2'd0) ?
		 masterX_1_ifc_response$wget[35:34] :
		 2'd1,
	       22'd0 } ;
  assign masterX_1_lock_wire$whas =
	     _dand1masterX_1_lock_wire$EN_wset ||
	     WILL_FIRE_RL_masterX_1_start_op &&
	     (masterX_1_fifo_rx_rv[26:25] != 2'd1 ||
	      masterX_1_fifo_rx_rv[40:31] != 10'd4) &&
	     (masterX_1_fifo_rx_rv[26:25] != 2'd1 ||
	      masterX_1_fifo_rx_rv[40:31] != 10'd8) &&
	     (masterX_1_fifo_rx_rv[26:25] != 2'd1 ||
	      masterX_1_fifo_rx_rv[40:31] != 10'd16) &&
	     masterX_1_fifo_rx_rv[26:25] != 2'd0 &&
	     masterX_1_fifo_rx_rv[40:31] != 10'd1 ;
  assign masterX_1_ifc_response$wget =
	     { IF_ahb_bus_s_map_data_1_115_BIT_2_116_THEN_SEL_ETC___d2216,
	       rdata__h116376,
	       masterX_1_ifc_fifo_op_q_0 } ;
  assign masterX_1_ifc_fifo_op_x_wire$wget =
	     { 1'd1, masterX_1_ifc_request_reg[76] } ;
  assign slave_mem_data_ifc_response_wire$wget =
	     WILL_FIRE_RL_slave_mem_data_default_response ?
	       MUX_slave_mem_config_ifc_response_wire$wset_1__VAL_1 :
	       MUX_slave_mem_data_ifc_response_wire$wset_1__VAL_2 ;
  assign slave_rtc_ifc_response_wire$wget =
	     WILL_FIRE_RL_slave_rtc_default_response ?
	       MUX_slave_mem_config_ifc_response_wire$wset_1__VAL_1 :
	       MUX_slave_rtc_ifc_response_wire$wset_1__VAL_2 ;
  assign slave_mem_config_ifc_response_wire$wget =
	     WILL_FIRE_RL_slave_mem_config_default_response ?
	       MUX_slave_mem_config_ifc_response_wire$wset_1__VAL_1 :
	       MUX_slave_mem_config_ifc_response_wire$wset_1__VAL_2 ;
  assign ahb_bus_monitor_hready$wget =
	     (!ahb_bus_hmaster_addr[1] || !ahb_bus_hmaster_addr[0]) ?
	       IF_ahb_bus_s_map_data_0_105_BIT_2_106_THEN_SEL_ETC___d2109 :
	       IF_ahb_bus_s_map_data_1_115_BIT_2_116_THEN_SEL_ETC___d2119 ;
  assign start_reg_2$whas = WILL_FIRE_RL_fsm_start || WILL_FIRE_RL_restart ;
  assign masterX_0_ifc_fifo_op_dequeueing$whas =
	     WILL_FIRE_RL_masterX_0_ifc_every &&
	     masterX_0_ifc_fifo_op_cntr_r != 2'd0 ;
  assign masterX_1_ifc_fifo_op_dequeueing$whas =
	     IF_ahb_bus_s_map_data_1_115_BIT_2_116_THEN_SEL_ETC___d2119 &&
	     masterX_1_ifc_fifo_op_cntr_r != 2'd0 ;
  assign state_set_pw$whas =
	     WILL_FIRE_RL_idle_l438c17 || WILL_FIRE_RL_action_l268c18 ||
	     WILL_FIRE_RL_action_f_update_l263c25 ||
	     WILL_FIRE_RL_action_l265c33 ||
	     WILL_FIRE_RL_action_l264c37 ||
	     WILL_FIRE_RL_action_f_init_l263c25 ||
	     WILL_FIRE_RL_action_l259c18 ||
	     WILL_FIRE_RL_action_l464c52 ||
	     WILL_FIRE_RL_action_l461c37 ||
	     WILL_FIRE_RL_action_l460c49 ||
	     WILL_FIRE_RL_action_l442c25 ||
	     WILL_FIRE_RL_action_l290c17 ||
	     WILL_FIRE_RL_action_l281c17 ||
	     WILL_FIRE_RL_action_l276c17 ;
  assign masterX_0_ifc_response_wire$wget =
	     (!ahb_bus_hmaster_addr[1] || !ahb_bus_hmaster_addr[0]) ?
	       IF_ahb_bus_s_map_data_0_105_BIT_2_106_THEN_SEL_ETC___d2199 :
	       ((ahb_bus_hmaster_addr[1] && ahb_bus_hmaster_addr[0]) ?
		  IF_ahb_bus_s_map_data_0_105_BIT_2_106_THEN_SEL_ETC___d2199 :
		  IF_ahb_bus_s_map_data_1_115_BIT_2_116_THEN_SEL_ETC___d2216) ;
  always@(ahb_bus_hmaster_addr or
	  masterX_0_ifc_request_reg or masterX_1_ifc_request_reg)
  begin
    case (ahb_bus_hmaster_addr[1] && ahb_bus_hmaster_addr[0])
      1'd0:
	  slave_mem_data_ifc_write_wire$wget = masterX_0_ifc_request_reg[76];
      1'd1:
	  slave_mem_data_ifc_write_wire$wget = masterX_1_ifc_request_reg[76];
    endcase
  end
  always@(ahb_bus_hmaster_addr or
	  masterX_0_ifc_request_reg or masterX_1_ifc_request_reg)
  begin
    case (ahb_bus_hmaster_addr[1] && ahb_bus_hmaster_addr[0])
      1'd0:
	  slave_mem_data_ifc_size_wire$wget =
	      masterX_0_ifc_request_reg[75:73];
      1'd1:
	  slave_mem_data_ifc_size_wire$wget =
	      masterX_1_ifc_request_reg[75:73];
    endcase
  end
  assign ahb_bus_arbiter_grant_vector_wire$wget =
	     CAN_FIRE_RL_ahb_bus_update_grant ?
	       { ahb_bus_arbiter_priority_vector_010_BIT_1_011__ETC___d2018,
		 ahb_bus_arbiter_priority_vector_010_BIT_0_014__ETC___d2022 ||
		 ahb_bus_arbiter_priority_vector[0] &&
		 CAN_FIRE_RL_ahb_bus_0_send_request } :
	       ahb_bus_arbiter_grant_vector_reg ;
  assign ahb_bus_arbiter_hmaster_wire$wget =
	     { CAN_FIRE_RL_ahb_bus_update_grant ?
		 ahb_bus_arbiter_priority_vector_010_BIT_1_011__ETC___d2018 ||
		 ahb_bus_arbiter_priority_vector_010_BIT_0_014__ETC___d2022 ||
		 ahb_bus_arbiter_priority_vector[0] &&
		 CAN_FIRE_RL_ahb_bus_0_send_request :
		 ahb_bus_arbiter_hmaster_reg[1],
	       CAN_FIRE_RL_ahb_bus_update_grant ?
		 ahb_bus_arbiter_priority_vector_010_BIT_1_011__ETC___d2018 :
		 ahb_bus_arbiter_hmaster_reg[0] } ;
  assign ahb_bus_arbiter_dgrant_vector_wire$wget =
	     SEL_ARR_ahb_bus_dummy_transfer_reg_916_EQ_0_91_ETC___d2064 ?
	       ahb_bus_arbiter_grant_vector_wire$wget :
	       { ahb_bus_arbiter_grant_vector_wire$wget[1] &&
		 ahb_bus_arbiter_dgrant_vector_reg[1],
		 ahb_bus_arbiter_grant_vector_wire$wget[0] &&
		 ahb_bus_arbiter_dgrant_vector_reg[0] } ;
  assign ahb_bus_dummys_0_select_wire$wget =
	     ahb_bus_hmaster_addr[1] && ahb_bus_hmaster_addr[0] ;
  assign ahb_bus_dummys_1_transfer_wire$wget =
	     (ahb_bus_hmaster_addr[1] && ahb_bus_hmaster_addr[0]) ?
	       CASE_ahb_bus_hmaster_addr_BIT_1_0_masterX_0_if_ETC__q14 :
	       masterX_1_ifc_request_reg[69:68] ;
  assign ahb_bus_dummys_1_select_wire$wget =
	     !ahb_bus_hmaster_addr[1] || !ahb_bus_hmaster_addr[0] ;
  assign ahb_bus_s_map_addr_0$wget =
	     { !ahb_bus_hmaster_addr[1] || !ahb_bus_hmaster_addr[0],
	       x__h114095 } ;
  assign ahb_bus_s_map_addr_1$wget =
	     { ahb_bus_hmaster_addr[1] && ahb_bus_hmaster_addr[0],
	       x__h114095 } ;
  assign proc_f_bus_reqs_rv$EN_port0__write =
	     WILL_FIRE_RL_proc_rl_imem_request ||
	     WILL_FIRE_RL_proc_rl_dmem_request ;
  assign proc_f_bus_reqs_rv$port0__write_1 =
	     WILL_FIRE_RL_proc_rl_imem_request ?
	       MUX_proc_f_bus_reqs_rv$port0__write_1__VAL_1 :
	       MUX_proc_f_bus_reqs_rv$port0__write_1__VAL_2 ;
  assign proc_f_bus_reqs_rv$port1__read =
	     proc_f_bus_reqs_rv$EN_port0__write ?
	       proc_f_bus_reqs_rv$port0__write_1 :
	       proc_f_bus_reqs_rv ;
  assign proc_f_bus_reqs_rv$port2__read =
	     CAN_FIRE_RL_mkConnectionGetPut ?
	       config_memory_ff_reqs_rv$port1__write_1 :
	       proc_f_bus_reqs_rv$port1__read ;
  assign proc_f_bus_rsps_rv$port0__write_1 =
	     { 1'd1,
	       masterX_0_fifo_tx_fifof_ff$EMPTY_N ?
		 masterX_0_fifo_tx_fifof_ff$D_OUT :
		 masterX_0_fifo_tx_fifof_enqw$wget } ;
  assign proc_f_bus_rsps_rv$port1__read =
	     CAN_FIRE_RL_mkConnectionGetPut_1 ?
	       proc_f_bus_rsps_rv$port0__write_1 :
	       proc_f_bus_rsps_rv ;
  assign proc_f_bus_rsps_rv$port2__read =
	     MUX_proc_who$write_1__PSEL_1 ?
	       config_memory_ff_rsps_rv$port1__write_1 :
	       proc_f_bus_rsps_rv$port1__read ;
  assign rtc_pendingReq$port0__write_1 =
	     { 1'd0, 5'b01010 /* unspecified value */  } ;
  assign rtc_pendingReq$port1__read =
	     CAN_FIRE_RL_mkConnectionGetPut_5 ?
	       rtc_pendingReq$port0__write_1 :
	       rtc_pendingReq ;
  assign rtc_pendingReq$EN_port1__write =
	     WILL_FIRE_RL_mkConnectionGetPut_4 &&
	     !slave_rtc_fifo_tx_rv$port1__read[109] ;
  assign rtc_pendingReq$port1__write_1 =
	     { (slave_rtc_fifo_tx_rv$port1__read[108:107] == 2'd1) ?
		 2'd3 :
		 2'd2,
	       slave_rtc_fifo_tx_rv$port1__read[76:73] } ;
  assign rtc_pendingReq$port2__read =
	     rtc_pendingReq$EN_port1__write ?
	       rtc_pendingReq$port1__write_1 :
	       rtc_pendingReq$port1__read ;
  assign config_memory_ff_reqs_rv$port0__write_1 =
	     { 1'd1, slave_mem_config_fifo_tx_rv$port1__read[109:0] } ;
  assign config_memory_ff_reqs_rv$port1__read =
	     CAN_FIRE_RL_mkConnectionGetPut_6 ?
	       config_memory_ff_reqs_rv$port0__write_1 :
	       config_memory_ff_reqs_rv ;
  assign config_memory_ff_reqs_rv$port1__write_1 =
	     { 1'd0,
	       110'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  } ;
  assign config_memory_ff_reqs_rv$port2__read =
	     CAN_FIRE_RL_config_memory_rl_receive_bram_response ?
	       config_memory_ff_reqs_rv$port1__write_1 :
	       config_memory_ff_reqs_rv$port1__read ;
  assign config_memory_ff_rsps_rv$port0__write_1 =
	     { 1'd1,
	       config_memory_ff_reqs_rv$port1__read[109] ?
		 2'd0 :
		 config_memory_ff_reqs_rv$port1__read[108:107],
	       v_data__h4099,
	       16'd0,
	       x__h4224,
	       4'd0 } ;
  assign config_memory_ff_rsps_rv$port1__read =
	     CAN_FIRE_RL_config_memory_rl_receive_bram_response ?
	       config_memory_ff_rsps_rv$port0__write_1 :
	       config_memory_ff_rsps_rv ;
  assign config_memory_ff_rsps_rv$port1__write_1 =
	     { 1'd0, 58'h2AAAAAAAAAAAAAA /* unspecified value */  } ;
  assign config_memory_ff_rsps_rv$port2__read =
	     CAN_FIRE_RL_mkConnectionGetPut_7 ?
	       config_memory_ff_rsps_rv$port1__write_1 :
	       config_memory_ff_rsps_rv$port1__read ;
  assign config_memory_rg_mem_state$port1__read =
	     !CAN_FIRE_RL_config_memory_rl_receive_bram_response &&
	     config_memory_rg_mem_state ;
  assign config_memory_rg_mem_state$port2__read =
	     WILL_FIRE_RL_config_memory_rl_process_requests ||
	     config_memory_rg_mem_state$port1__read ;
  assign mem_ff_reqs_rv$port0__write_1 =
	     { 1'd1, slave_mem_data_fifo_tx_rv$port1__read[109:0] } ;
  assign mem_ff_reqs_rv$port1__read =
	     CAN_FIRE_RL_mkConnectionGetPut_2 ?
	       mem_ff_reqs_rv$port0__write_1 :
	       mem_ff_reqs_rv ;
  assign mem_ff_reqs_rv$port2__read =
	     CAN_FIRE_RL_mem_rl_receive_bram_response ?
	       config_memory_ff_reqs_rv$port1__write_1 :
	       mem_ff_reqs_rv$port1__read ;
  assign mem_ff_rsps_rv$port0__write_1 =
	     { 1'd1,
	       mem_ff_reqs_rv$port1__read[109] ?
		 2'd0 :
		 mem_ff_reqs_rv$port1__read[108:107],
	       v_data__h5744,
	       16'd0,
	       x__h5869,
	       4'd0 } ;
  assign mem_ff_rsps_rv$port1__read =
	     CAN_FIRE_RL_mem_rl_receive_bram_response ?
	       mem_ff_rsps_rv$port0__write_1 :
	       mem_ff_rsps_rv ;
  assign mem_ff_rsps_rv$port2__read =
	     CAN_FIRE_RL_mkConnectionGetPut_3 ?
	       config_memory_ff_rsps_rv$port1__write_1 :
	       mem_ff_rsps_rv$port1__read ;
  assign mem_rg_mem_state$port1__read =
	     !CAN_FIRE_RL_mem_rl_receive_bram_response && mem_rg_mem_state ;
  assign mem_rg_mem_state$port2__read =
	     WILL_FIRE_RL_mem_rl_process_requests ||
	     mem_rg_mem_state$port1__read ;
  assign masterX_0_fifo_rx_rv$port0__write_1 =
	     { 1'd1, proc_f_bus_reqs_rv$port1__read[109:0] } ;
  assign masterX_0_fifo_rx_rv$port1__read =
	     CAN_FIRE_RL_mkConnectionGetPut ?
	       masterX_0_fifo_rx_rv$port0__write_1 :
	       masterX_0_fifo_rx_rv ;
  assign masterX_0_fifo_rx_rv$EN_port1__write =
	     WILL_FIRE_RL_masterX_0_write_op ||
	     WILL_FIRE_RL_masterX_0_start_op ;
  assign masterX_0_fifo_rx_rv$port2__read =
	     masterX_0_fifo_rx_rv$EN_port1__write ?
	       config_memory_ff_reqs_rv$port1__write_1 :
	       masterX_0_fifo_rx_rv$port1__read ;
  assign masterX_1_fifo_rx_rv$EN_port1__write =
	     WILL_FIRE_RL_masterX_1_write_op ||
	     WILL_FIRE_RL_masterX_1_start_op ;
  assign masterX_1_fifo_rx_rv$port2__read =
	     masterX_1_fifo_rx_rv$EN_port1__write ?
	       config_memory_ff_reqs_rv$port1__write_1 :
	       masterX_1_fifo_rx_rv ;
  assign slave_mem_data_fifo_rx_rv$port0__write_1 =
	     { 1'd1, mem_ff_rsps_rv$port1__read[57:0] } ;
  assign slave_mem_data_fifo_rx_rv$port1__read =
	     CAN_FIRE_RL_mkConnectionGetPut_3 ?
	       slave_mem_data_fifo_rx_rv$port0__write_1 :
	       slave_mem_data_fifo_rx_rv ;
  assign slave_mem_data_fifo_rx_rv$port2__read =
	     CAN_FIRE_RL_slave_mem_data_grab_response ?
	       config_memory_ff_rsps_rv$port1__write_1 :
	       slave_mem_data_fifo_rx_rv$port1__read ;
  assign slave_mem_data_fifo_tx_rv$port0__write_1 =
	     { 2'd2,
	       slave_mem_data_ctrl_reg[44] ? 2'd1 : 2'd0,
	       2'd0,
	       slave_mem_data_ctrl_reg[31:0],
	       data__h97213,
	       16'd124,
	       value__h97435[1:0],
	       23'd0 } ;
  assign slave_mem_data_fifo_tx_rv$port1__read =
	     CAN_FIRE_RL_slave_mem_data_send_request ?
	       slave_mem_data_fifo_tx_rv$port0__write_1 :
	       slave_mem_data_fifo_tx_rv ;
  assign slave_mem_data_fifo_tx_rv$port2__read =
	     CAN_FIRE_RL_mkConnectionGetPut_2 ?
	       config_memory_ff_reqs_rv$port1__write_1 :
	       slave_mem_data_fifo_tx_rv$port1__read ;
  assign slave_mem_data_fifo_op_rv$port1__read =
	     CAN_FIRE_RL_slave_mem_data_send_request ||
	     slave_mem_data_fifo_op_rv ;
  assign slave_mem_data_fifo_op_rv$port2__read =
	     !CAN_FIRE_RL_slave_mem_data_grab_response &&
	     slave_mem_data_fifo_op_rv$port1__read ;
  assign slave_rtc_fifo_rx_rv$port0__write_1 =
	     { 1'd1,
	       rtc_pendingReq[4] ? 2'd1 : 2'd0,
	       rtc_pendingReq[4] ?
		 32'd0 :
		 IF_rtc_pendingReq_port0__read__879_BITS_3_TO_0_ETC___d1896,
	       24'b101010101010101010101010 /* unspecified value */  } ;
  assign slave_rtc_fifo_rx_rv$port1__read =
	     CAN_FIRE_RL_mkConnectionGetPut_5 ?
	       slave_rtc_fifo_rx_rv$port0__write_1 :
	       slave_rtc_fifo_rx_rv ;
  assign slave_rtc_fifo_rx_rv$port2__read =
	     CAN_FIRE_RL_slave_rtc_grab_response ?
	       config_memory_ff_rsps_rv$port1__write_1 :
	       slave_rtc_fifo_rx_rv$port1__read ;
  assign slave_rtc_fifo_tx_rv$port0__write_1 =
	     { 2'd2,
	       slave_rtc_ctrl_reg[44] ? 2'd1 : 2'd0,
	       2'd0,
	       slave_rtc_ctrl_reg[31:0],
	       data__h100034,
	       16'd124,
	       value__h100256[1:0],
	       23'd0 } ;
  assign slave_rtc_fifo_tx_rv$port1__read =
	     CAN_FIRE_RL_slave_rtc_send_request ?
	       slave_rtc_fifo_tx_rv$port0__write_1 :
	       slave_rtc_fifo_tx_rv ;
  assign slave_rtc_fifo_tx_rv$port2__read =
	     CAN_FIRE_RL_mkConnectionGetPut_4 ?
	       config_memory_ff_reqs_rv$port1__write_1 :
	       slave_rtc_fifo_tx_rv$port1__read ;
  assign slave_rtc_fifo_op_rv$port1__read =
	     CAN_FIRE_RL_slave_rtc_send_request || slave_rtc_fifo_op_rv ;
  assign slave_rtc_fifo_op_rv$port2__read =
	     !CAN_FIRE_RL_slave_rtc_grab_response &&
	     slave_rtc_fifo_op_rv$port1__read ;
  assign slave_mem_config_fifo_rx_rv$port0__write_1 =
	     { 1'd1, config_memory_ff_rsps_rv$port1__read[57:0] } ;
  assign slave_mem_config_fifo_rx_rv$port1__read =
	     CAN_FIRE_RL_mkConnectionGetPut_7 ?
	       slave_mem_config_fifo_rx_rv$port0__write_1 :
	       slave_mem_config_fifo_rx_rv ;
  assign slave_mem_config_fifo_rx_rv$port2__read =
	     CAN_FIRE_RL_slave_mem_config_grab_response ?
	       config_memory_ff_rsps_rv$port1__write_1 :
	       slave_mem_config_fifo_rx_rv$port1__read ;
  assign slave_mem_config_fifo_tx_rv$port0__write_1 =
	     { 2'd2,
	       slave_mem_config_ctrl_reg[44] ? 2'd1 : 2'd0,
	       2'd0,
	       slave_mem_config_ctrl_reg[31:0],
	       data__h102852,
	       16'd124,
	       value__h103074[1:0],
	       23'd0 } ;
  assign slave_mem_config_fifo_tx_rv$port1__read =
	     CAN_FIRE_RL_slave_mem_config_send_request ?
	       slave_mem_config_fifo_tx_rv$port0__write_1 :
	       slave_mem_config_fifo_tx_rv ;
  assign slave_mem_config_fifo_tx_rv$port2__read =
	     CAN_FIRE_RL_mkConnectionGetPut_6 ?
	       config_memory_ff_reqs_rv$port1__write_1 :
	       slave_mem_config_fifo_tx_rv$port1__read ;
  assign slave_mem_config_fifo_op_rv$port1__read =
	     CAN_FIRE_RL_slave_mem_config_send_request ||
	     slave_mem_config_fifo_op_rv ;
  assign slave_mem_config_fifo_op_rv$port2__read =
	     !CAN_FIRE_RL_slave_mem_config_grab_response &&
	     slave_mem_config_fifo_op_rv$port1__read ;

  // register ahb_bus_arbiter_dgrant_vector_reg
  assign ahb_bus_arbiter_dgrant_vector_reg$D_IN =
	     ahb_bus_arbiter_dgrant_vector_wire$wget ;
  assign ahb_bus_arbiter_dgrant_vector_reg$EN = 1'd1 ;

  // register ahb_bus_arbiter_grant_vector_reg
  assign ahb_bus_arbiter_grant_vector_reg$D_IN =
	     ahb_bus_arbiter_grant_vector_wire$wget ;
  assign ahb_bus_arbiter_grant_vector_reg$EN = 1'd1 ;

  // register ahb_bus_arbiter_hmaster_reg
  assign ahb_bus_arbiter_hmaster_reg$D_IN =
	     ahb_bus_arbiter_hmaster_wire$wget ;
  assign ahb_bus_arbiter_hmaster_reg$EN = 1'd1 ;

  // register ahb_bus_arbiter_priority_vector
  assign ahb_bus_arbiter_priority_vector$D_IN =
	     { ahb_bus_arbiter_priority_vector_010_BIT_0_014__ETC___d2022 ||
	       ahb_bus_arbiter_priority_vector[0] &&
	       CAN_FIRE_RL_ahb_bus_0_send_request,
	       ahb_bus_arbiter_priority_vector_010_BIT_1_011__ETC___d2018 } ;
  assign ahb_bus_arbiter_priority_vector$EN =
	     (ahb_bus_arbiter_priority_vector_010_BIT_0_014__ETC___d2022 ||
	      ahb_bus_arbiter_priority_vector_010_BIT_1_011__ETC___d2018) &&
	     CAN_FIRE_RL_ahb_bus_update_grant ;

  // register ahb_bus_dummy_select_reg
  assign ahb_bus_dummy_select_reg$D_IN = x__h114095 == 2'd0 ;
  assign ahb_bus_dummy_select_reg$EN = CAN_FIRE_RL_ahb_bus_dummy_updatex ;

  // register ahb_bus_dummy_transfer_reg
  assign ahb_bus_dummy_transfer_reg$D_IN =
	     SEL_ARR_masterX_0_ifc_request_reg_02_BITS_69_T_ETC___d1943 ;
  assign ahb_bus_dummy_transfer_reg$EN = 1'd1 ;

  // register ahb_bus_dummys_0_select_reg
  assign ahb_bus_dummys_0_select_reg$D_IN =
	     ahb_bus_dummys_0_select_wire$wget ;
  assign ahb_bus_dummys_0_select_reg$EN =
	     CAN_FIRE_RL_ahb_bus_dummys_0_updatex ;

  // register ahb_bus_dummys_0_transfer_reg
  assign ahb_bus_dummys_0_transfer_reg$D_IN =
	     masterX_0_ifc_request_reg[69:68] ;
  assign ahb_bus_dummys_0_transfer_reg$EN = 1'd1 ;

  // register ahb_bus_dummys_1_select_reg
  assign ahb_bus_dummys_1_select_reg$D_IN =
	     ahb_bus_dummys_1_select_wire$wget ;
  assign ahb_bus_dummys_1_select_reg$EN =
	     CAN_FIRE_RL_ahb_bus_dummys_1_updatex ;

  // register ahb_bus_dummys_1_transfer_reg
  assign ahb_bus_dummys_1_transfer_reg$D_IN =
	     ahb_bus_dummys_1_transfer_wire$wget ;
  assign ahb_bus_dummys_1_transfer_reg$EN = 1'd1 ;

  // register ahb_bus_hmaster_addr
  assign ahb_bus_hmaster_addr$D_IN = ahb_bus_arbiter_hmaster_wire$wget ;
  assign ahb_bus_hmaster_addr$EN =
	     SEL_ARR_ahb_bus_dummy_transfer_reg_916_EQ_0_91_ETC___d2064 ;

  // register ahb_bus_hmaster_data
  assign ahb_bus_hmaster_data$D_IN = ahb_bus_hmaster_addr ;
  assign ahb_bus_hmaster_data$EN =
	     SEL_ARR_ahb_bus_dummy_transfer_reg_916_EQ_0_91_ETC___d2064 ;

  // register ahb_bus_monitor_hready_prev
  assign ahb_bus_monitor_hready_prev$D_IN = ahb_bus_monitor_hready$wget ;
  assign ahb_bus_monitor_hready_prev$EN = 1'd1 ;

  // register ahb_bus_monitor_remaining_reg
  assign ahb_bus_monitor_remaining_reg$D_IN =
	     (SEL_ARR_masterX_0_ifc_request_reg_02_BITS_72_T_ETC___d1947 ==
	      3'd1 &&
	      SEL_ARR_masterX_0_req_wire_whas__928_AND_maste_ETC___d1941 ||
	      SEL_ARR_masterX_0_ifc_request_reg_02_BITS_69_T_ETC___d1943 ==
	      2'd0) ?
	       5'd1 :
	       CASE_SEL_ARR_masterX_0_ifc_request_reg_02_BITS_ETC__q15 ;
  assign ahb_bus_monitor_remaining_reg$EN = ahb_bus_monitor_hready$wget ;

  // register ahb_bus_monitor_request_prev
  assign ahb_bus_monitor_request_prev$D_IN =
	     SEL_ARR_masterX_0_req_wire_whas__928_AND_maste_ETC___d1941 ;
  assign ahb_bus_monitor_request_prev$EN = 1'd1 ;

  // register ahb_bus_monitor_started
  assign ahb_bus_monitor_started$D_IN =
	     ahb_bus_monitor_hready$wget &&
	     (SEL_ARR_masterX_0_ifc_request_reg_02_BITS_69_T_ETC___d1943 ==
	      2'd0 ||
	      SEL_ARR_masterX_0_ifc_request_reg_02_BITS_69_T_ETC___d1943 ==
	      2'd2) ;
  assign ahb_bus_monitor_started$EN =
	     ahb_bus_monitor_hready$wget &&
	     (SEL_ARR_masterX_0_ifc_request_reg_02_BITS_69_T_ETC___d1943 ==
	      2'd0 ||
	      SEL_ARR_masterX_0_ifc_request_reg_02_BITS_69_T_ETC___d1943 ==
	      2'd2) ||
	     IF_SEL_ARR_masterX_0_ifc_request_reg_02_BITS_7_ETC___d1974 ;

  // register ahb_bus_monitor_transfer_prev
  assign ahb_bus_monitor_transfer_prev$D_IN =
	     SEL_ARR_masterX_0_ifc_request_reg_02_BITS_69_T_ETC___d1943 ;
  assign ahb_bus_monitor_transfer_prev$EN = 1'd1 ;

  // register ahb_bus_s_map_data_0
  assign ahb_bus_s_map_data_0$D_IN = ahb_bus_s_map_addr_0$wget ;
  assign ahb_bus_s_map_data_0$EN =
	     IF_ahb_bus_s_map_data_0_105_BIT_2_106_THEN_SEL_ETC___d2109 ;

  // register ahb_bus_s_map_data_1
  assign ahb_bus_s_map_data_1$D_IN = ahb_bus_s_map_addr_1$wget ;
  assign ahb_bus_s_map_data_1$EN =
	     IF_ahb_bus_s_map_data_1_115_BIT_2_116_THEN_SEL_ETC___d2119 ;

  // register ahb_bus_s_num_addr_current
  assign ahb_bus_s_num_addr_current$D_IN = 2'h0 ;
  assign ahb_bus_s_num_addr_current$EN = 1'b0 ;

  // register ahb_bus_s_num_data
  assign ahb_bus_s_num_data$D_IN = x__h114095 ;
  assign ahb_bus_s_num_data$EN =
	     SEL_ARR_ahb_bus_dummy_transfer_reg_916_EQ_0_91_ETC___d2064 ;

  // register config_memory_ff_reqs_rv
  assign config_memory_ff_reqs_rv$D_IN =
	     config_memory_ff_reqs_rv$port2__read ;
  assign config_memory_ff_reqs_rv$EN = 1'b1 ;

  // register config_memory_ff_rsps_rv
  assign config_memory_ff_rsps_rv$D_IN =
	     config_memory_ff_rsps_rv$port2__read ;
  assign config_memory_ff_rsps_rv$EN = 1'b1 ;

  // register config_memory_rg_mem_state
  assign config_memory_rg_mem_state$D_IN =
	     config_memory_rg_mem_state$port2__read ;
  assign config_memory_rg_mem_state$EN = 1'b1 ;

  // register file_arf_dump
  assign file_arf_dump$D_IN = TASK_fopen___d2281 ;
  assign file_arf_dump$EN =
	     WILL_FIRE_RL_action_l442c25 && TASK_fopen___d2281 != 32'd0 ;

  // register masterX_0_count
  assign masterX_0_count$D_IN =
	     MUX_masterX_0_lock_wire$wset_1__PSEL_1 ?
	       MUX_masterX_0_count$write_1__VAL_1 :
	       MUX_masterX_0_count$write_1__VAL_2 ;
  assign masterX_0_count$EN =
	     WILL_FIRE_RL_masterX_0_read_op ||
	     WILL_FIRE_RL_masterX_0_write_op ||
	     WILL_FIRE_RL_masterX_0_start_op ;

  // register masterX_0_data_reg
  always@(WILL_FIRE_RL_masterX_0_idle_op or
	  MUX_masterX_0_data_reg$write_1__VAL_1 or
	  WILL_FIRE_RL_masterX_0_start_op or
	  MUX_masterX_0_data_reg$write_1__VAL_2 or
	  WILL_FIRE_RL_masterX_0_write_op or
	  MUX_masterX_0_data_reg$write_1__VAL_3 or
	  WILL_FIRE_RL_masterX_0_read_op)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_masterX_0_idle_op:
	  masterX_0_data_reg$D_IN = MUX_masterX_0_data_reg$write_1__VAL_1;
      WILL_FIRE_RL_masterX_0_start_op:
	  masterX_0_data_reg$D_IN = MUX_masterX_0_data_reg$write_1__VAL_2;
      WILL_FIRE_RL_masterX_0_write_op:
	  masterX_0_data_reg$D_IN = MUX_masterX_0_data_reg$write_1__VAL_3;
      WILL_FIRE_RL_masterX_0_read_op: masterX_0_data_reg$D_IN = 33'h100000000;
      default: masterX_0_data_reg$D_IN =
		   33'h0AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign masterX_0_data_reg$EN =
	     WILL_FIRE_RL_masterX_0_idle_op ||
	     WILL_FIRE_RL_masterX_0_start_op ||
	     WILL_FIRE_RL_masterX_0_write_op ||
	     WILL_FIRE_RL_masterX_0_read_op ;

  // register masterX_0_descriptor
  assign masterX_0_descriptor$D_IN =
	     MUX_masterX_0_lock_wire$wset_1__PSEL_1 ?
	       MUX_masterX_0_descriptor$write_1__VAL_1 :
	       MUX_masterX_0_descriptor$write_1__VAL_2 ;
  assign masterX_0_descriptor$EN =
	     WILL_FIRE_RL_masterX_0_read_op ||
	     WILL_FIRE_RL_masterX_0_write_op ||
	     WILL_FIRE_RL_masterX_0_start_op ;

  // register masterX_0_fifo_rx_rv
  assign masterX_0_fifo_rx_rv$D_IN = masterX_0_fifo_rx_rv$port2__read ;
  assign masterX_0_fifo_rx_rv$EN = 1'b1 ;

  // register masterX_0_fifo_tx_count
  assign masterX_0_fifo_tx_count$D_IN =
	     WILL_FIRE_RL_masterX_0_fifo_tx_do_incr ?
	       MUX_masterX_0_fifo_tx_count$write_1__VAL_1 :
	       MUX_masterX_0_fifo_tx_count$write_1__VAL_2 ;
  assign masterX_0_fifo_tx_count$EN =
	     WILL_FIRE_RL_masterX_0_fifo_tx_do_incr ||
	     WILL_FIRE_RL_masterX_0_fifo_tx_do_decr ;

  // register masterX_0_grant_reg
  assign masterX_0_grant_reg$D_IN = CAN_FIRE_RL_ahb_bus_0_send_grant ;
  assign masterX_0_grant_reg$EN = 1'd1 ;

  // register masterX_0_ifc_fifo_op_cntr_r
  assign masterX_0_ifc_fifo_op_cntr_r$D_IN =
	     WILL_FIRE_RL_masterX_0_ifc_fifo_op_decCtr ?
	       masterX_0_ifc_fifo_op_cntr_r_63_MINUS_1___d180 :
	       MUX_masterX_0_ifc_fifo_op_cntr_r$write_1__VAL_2 ;
  assign masterX_0_ifc_fifo_op_cntr_r$EN =
	     WILL_FIRE_RL_masterX_0_ifc_fifo_op_decCtr ||
	     WILL_FIRE_RL_masterX_0_ifc_fifo_op_incCtr ;

  // register masterX_0_ifc_fifo_op_q_0
  always@(MUX_masterX_0_ifc_fifo_op_q_0$write_1__SEL_1 or
	  MUX_masterX_0_ifc_fifo_op_q_0$write_1__VAL_1 or
	  MUX_masterX_0_ifc_fifo_op_q_0$write_1__SEL_2 or
	  masterX_0_ifc_fifo_op_x_wire$wget or
	  WILL_FIRE_RL_masterX_0_ifc_fifo_op_decCtr or
	  masterX_0_ifc_fifo_op_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_masterX_0_ifc_fifo_op_q_0$write_1__SEL_1:
	  masterX_0_ifc_fifo_op_q_0$D_IN =
	      MUX_masterX_0_ifc_fifo_op_q_0$write_1__VAL_1;
      MUX_masterX_0_ifc_fifo_op_q_0$write_1__SEL_2:
	  masterX_0_ifc_fifo_op_q_0$D_IN = masterX_0_ifc_fifo_op_x_wire$wget;
      WILL_FIRE_RL_masterX_0_ifc_fifo_op_decCtr:
	  masterX_0_ifc_fifo_op_q_0$D_IN = masterX_0_ifc_fifo_op_q_1;
      default: masterX_0_ifc_fifo_op_q_0$D_IN =
		   2'b10 /* unspecified value */ ;
    endcase
  end
  assign masterX_0_ifc_fifo_op_q_0$EN =
	     WILL_FIRE_RL_masterX_0_ifc_fifo_op_both && _dfoo3 ||
	     WILL_FIRE_RL_masterX_0_ifc_fifo_op_incCtr &&
	     masterX_0_ifc_fifo_op_cntr_r == 2'd0 ||
	     WILL_FIRE_RL_masterX_0_ifc_fifo_op_decCtr ;

  // register masterX_0_ifc_fifo_op_q_1
  always@(MUX_masterX_0_ifc_fifo_op_q_1$write_1__SEL_1 or
	  MUX_masterX_0_ifc_fifo_op_q_1$write_1__VAL_1 or
	  MUX_masterX_0_ifc_fifo_op_q_1$write_1__SEL_2 or
	  masterX_0_ifc_fifo_op_x_wire$wget or
	  WILL_FIRE_RL_masterX_0_ifc_fifo_op_decCtr or v__h108103)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_masterX_0_ifc_fifo_op_q_1$write_1__SEL_1:
	  masterX_0_ifc_fifo_op_q_1$D_IN =
	      MUX_masterX_0_ifc_fifo_op_q_1$write_1__VAL_1;
      MUX_masterX_0_ifc_fifo_op_q_1$write_1__SEL_2:
	  masterX_0_ifc_fifo_op_q_1$D_IN = masterX_0_ifc_fifo_op_x_wire$wget;
      WILL_FIRE_RL_masterX_0_ifc_fifo_op_decCtr:
	  masterX_0_ifc_fifo_op_q_1$D_IN = v__h108103;
      default: masterX_0_ifc_fifo_op_q_1$D_IN =
		   2'b10 /* unspecified value */ ;
    endcase
  end
  assign masterX_0_ifc_fifo_op_q_1$EN =
	     WILL_FIRE_RL_masterX_0_ifc_fifo_op_both && _dfoo1 ||
	     WILL_FIRE_RL_masterX_0_ifc_fifo_op_incCtr &&
	     masterX_0_ifc_fifo_op_cntr_r == 2'd1 ||
	     WILL_FIRE_RL_masterX_0_ifc_fifo_op_decCtr ;

  // register masterX_0_ifc_request_reg
  always@(MUX_masterX_0_lock_wire$wset_1__PSEL_1 or
	  MUX_masterX_0_ifc_request_reg$write_1__VAL_1 or
	  WILL_FIRE_RL_masterX_0_start_op or
	  MUX_masterX_0_ifc_request_reg$write_1__VAL_2 or
	  WILL_FIRE_RL_masterX_0_idle_op or
	  MUX_masterX_0_ifc_request_reg$write_1__VAL_3 or
	  WILL_FIRE_RL_masterX_0_stall_op or
	  MUX_masterX_0_ifc_request_reg$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_masterX_0_lock_wire$wset_1__PSEL_1:
	  masterX_0_ifc_request_reg$D_IN =
	      MUX_masterX_0_ifc_request_reg$write_1__VAL_1;
      WILL_FIRE_RL_masterX_0_start_op:
	  masterX_0_ifc_request_reg$D_IN =
	      MUX_masterX_0_ifc_request_reg$write_1__VAL_2;
      WILL_FIRE_RL_masterX_0_idle_op:
	  masterX_0_ifc_request_reg$D_IN =
	      MUX_masterX_0_ifc_request_reg$write_1__VAL_3;
      WILL_FIRE_RL_masterX_0_stall_op:
	  masterX_0_ifc_request_reg$D_IN =
	      MUX_masterX_0_ifc_request_reg$write_1__VAL_4;
      default: masterX_0_ifc_request_reg$D_IN =
		   77'h0AAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign masterX_0_ifc_request_reg$EN =
	     WILL_FIRE_RL_masterX_0_read_op ||
	     WILL_FIRE_RL_masterX_0_write_op ||
	     WILL_FIRE_RL_masterX_0_start_op ||
	     WILL_FIRE_RL_masterX_0_idle_op ||
	     WILL_FIRE_RL_masterX_0_stall_op ;

  // register masterX_0_req_reg
  always@(MUX_masterX_0_req_reg$write_1__SEL_1 or
	  MUX_masterX_0_req_reg$write_1__VAL_1 or
	  MUX_masterX_0_lock_wire$wset_1__PSEL_1 or
	  MUX_masterX_0_req_reg$write_1__VAL_2 or
	  WILL_FIRE_RL_masterX_0_start_op or
	  MUX_masterX_0_req_reg$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_masterX_0_req_reg$write_1__SEL_1:
	  masterX_0_req_reg$D_IN = MUX_masterX_0_req_reg$write_1__VAL_1;
      MUX_masterX_0_lock_wire$wset_1__PSEL_1:
	  masterX_0_req_reg$D_IN = MUX_masterX_0_req_reg$write_1__VAL_2;
      WILL_FIRE_RL_masterX_0_start_op:
	  masterX_0_req_reg$D_IN = MUX_masterX_0_req_reg$write_1__VAL_3;
      default: masterX_0_req_reg$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign masterX_0_req_reg$EN = masterX_0_response_wire$whas ;

  // register masterX_1_count
  assign masterX_1_count$D_IN =
	     MUX_masterX_1_lock_wire$wset_1__PSEL_1 ?
	       MUX_masterX_1_count$write_1__VAL_1 :
	       MUX_masterX_1_count$write_1__VAL_2 ;
  assign masterX_1_count$EN =
	     WILL_FIRE_RL_masterX_1_read_op ||
	     WILL_FIRE_RL_masterX_1_write_op ||
	     WILL_FIRE_RL_masterX_1_start_op ;

  // register masterX_1_data_reg
  always@(WILL_FIRE_RL_masterX_1_idle_op or
	  MUX_masterX_0_data_reg$write_1__VAL_1 or
	  WILL_FIRE_RL_masterX_1_start_op or
	  MUX_masterX_1_data_reg$write_1__VAL_2 or
	  WILL_FIRE_RL_masterX_1_write_op or
	  MUX_masterX_1_data_reg$write_1__VAL_3 or
	  WILL_FIRE_RL_masterX_1_read_op)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_masterX_1_idle_op:
	  masterX_1_data_reg$D_IN = MUX_masterX_0_data_reg$write_1__VAL_1;
      WILL_FIRE_RL_masterX_1_start_op:
	  masterX_1_data_reg$D_IN = MUX_masterX_1_data_reg$write_1__VAL_2;
      WILL_FIRE_RL_masterX_1_write_op:
	  masterX_1_data_reg$D_IN = MUX_masterX_1_data_reg$write_1__VAL_3;
      WILL_FIRE_RL_masterX_1_read_op: masterX_1_data_reg$D_IN = 33'h100000000;
      default: masterX_1_data_reg$D_IN =
		   33'h0AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign masterX_1_data_reg$EN =
	     WILL_FIRE_RL_masterX_1_idle_op ||
	     WILL_FIRE_RL_masterX_1_start_op ||
	     WILL_FIRE_RL_masterX_1_write_op ||
	     WILL_FIRE_RL_masterX_1_read_op ;

  // register masterX_1_descriptor
  assign masterX_1_descriptor$D_IN =
	     MUX_masterX_1_lock_wire$wset_1__PSEL_1 ?
	       MUX_masterX_1_descriptor$write_1__VAL_1 :
	       MUX_masterX_1_descriptor$write_1__VAL_2 ;
  assign masterX_1_descriptor$EN =
	     WILL_FIRE_RL_masterX_1_read_op ||
	     WILL_FIRE_RL_masterX_1_write_op ||
	     WILL_FIRE_RL_masterX_1_start_op ;

  // register masterX_1_fifo_rx_rv
  assign masterX_1_fifo_rx_rv$D_IN = masterX_1_fifo_rx_rv$port2__read ;
  assign masterX_1_fifo_rx_rv$EN = 1'b1 ;

  // register masterX_1_fifo_tx_count
  assign masterX_1_fifo_tx_count$D_IN =
	     MUX_masterX_1_fifo_tx_count$write_1__VAL_1 ;
  assign masterX_1_fifo_tx_count$EN =
	     CAN_FIRE_RL_masterX_1_grab_valid_response ;

  // register masterX_1_grant_reg
  assign masterX_1_grant_reg$D_IN = CAN_FIRE_RL_ahb_bus_1_send_grant ;
  assign masterX_1_grant_reg$EN = 1'd1 ;

  // register masterX_1_ifc_fifo_op_cntr_r
  assign masterX_1_ifc_fifo_op_cntr_r$D_IN =
	     WILL_FIRE_RL_masterX_1_ifc_fifo_op_decCtr ?
	       masterX_1_ifc_fifo_op_cntr_r_01_MINUS_1___d917 :
	       MUX_masterX_1_ifc_fifo_op_cntr_r$write_1__VAL_2 ;
  assign masterX_1_ifc_fifo_op_cntr_r$EN =
	     WILL_FIRE_RL_masterX_1_ifc_fifo_op_decCtr ||
	     WILL_FIRE_RL_masterX_1_ifc_fifo_op_incCtr ;

  // register masterX_1_ifc_fifo_op_q_0
  always@(MUX_masterX_1_ifc_fifo_op_q_0$write_1__SEL_1 or
	  MUX_masterX_1_ifc_fifo_op_q_0$write_1__VAL_1 or
	  MUX_masterX_1_ifc_fifo_op_q_0$write_1__SEL_2 or
	  masterX_1_ifc_fifo_op_x_wire$wget or
	  WILL_FIRE_RL_masterX_1_ifc_fifo_op_decCtr or
	  masterX_1_ifc_fifo_op_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_masterX_1_ifc_fifo_op_q_0$write_1__SEL_1:
	  masterX_1_ifc_fifo_op_q_0$D_IN =
	      MUX_masterX_1_ifc_fifo_op_q_0$write_1__VAL_1;
      MUX_masterX_1_ifc_fifo_op_q_0$write_1__SEL_2:
	  masterX_1_ifc_fifo_op_q_0$D_IN = masterX_1_ifc_fifo_op_x_wire$wget;
      WILL_FIRE_RL_masterX_1_ifc_fifo_op_decCtr:
	  masterX_1_ifc_fifo_op_q_0$D_IN = masterX_1_ifc_fifo_op_q_1;
      default: masterX_1_ifc_fifo_op_q_0$D_IN =
		   2'b10 /* unspecified value */ ;
    endcase
  end
  assign masterX_1_ifc_fifo_op_q_0$EN =
	     WILL_FIRE_RL_masterX_1_ifc_fifo_op_both && _dfoo7 ||
	     WILL_FIRE_RL_masterX_1_ifc_fifo_op_incCtr &&
	     masterX_1_ifc_fifo_op_cntr_r == 2'd0 ||
	     WILL_FIRE_RL_masterX_1_ifc_fifo_op_decCtr ;

  // register masterX_1_ifc_fifo_op_q_1
  always@(MUX_masterX_1_ifc_fifo_op_q_1$write_1__SEL_1 or
	  MUX_masterX_1_ifc_fifo_op_q_1$write_1__VAL_1 or
	  MUX_masterX_1_ifc_fifo_op_q_1$write_1__SEL_2 or
	  masterX_1_ifc_fifo_op_x_wire$wget or
	  WILL_FIRE_RL_masterX_1_ifc_fifo_op_decCtr or v__h108103)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_masterX_1_ifc_fifo_op_q_1$write_1__SEL_1:
	  masterX_1_ifc_fifo_op_q_1$D_IN =
	      MUX_masterX_1_ifc_fifo_op_q_1$write_1__VAL_1;
      MUX_masterX_1_ifc_fifo_op_q_1$write_1__SEL_2:
	  masterX_1_ifc_fifo_op_q_1$D_IN = masterX_1_ifc_fifo_op_x_wire$wget;
      WILL_FIRE_RL_masterX_1_ifc_fifo_op_decCtr:
	  masterX_1_ifc_fifo_op_q_1$D_IN = v__h108103;
      default: masterX_1_ifc_fifo_op_q_1$D_IN =
		   2'b10 /* unspecified value */ ;
    endcase
  end
  assign masterX_1_ifc_fifo_op_q_1$EN =
	     WILL_FIRE_RL_masterX_1_ifc_fifo_op_both && _dfoo5 ||
	     WILL_FIRE_RL_masterX_1_ifc_fifo_op_incCtr &&
	     masterX_1_ifc_fifo_op_cntr_r == 2'd1 ||
	     WILL_FIRE_RL_masterX_1_ifc_fifo_op_decCtr ;

  // register masterX_1_ifc_request_reg
  always@(MUX_masterX_1_lock_wire$wset_1__PSEL_1 or
	  MUX_masterX_1_ifc_request_reg$write_1__VAL_1 or
	  WILL_FIRE_RL_masterX_1_start_op or
	  MUX_masterX_1_ifc_request_reg$write_1__VAL_2 or
	  WILL_FIRE_RL_masterX_1_idle_op or
	  MUX_masterX_1_ifc_request_reg$write_1__VAL_3 or
	  WILL_FIRE_RL_masterX_1_stall_op or
	  MUX_masterX_1_ifc_request_reg$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_masterX_1_lock_wire$wset_1__PSEL_1:
	  masterX_1_ifc_request_reg$D_IN =
	      MUX_masterX_1_ifc_request_reg$write_1__VAL_1;
      WILL_FIRE_RL_masterX_1_start_op:
	  masterX_1_ifc_request_reg$D_IN =
	      MUX_masterX_1_ifc_request_reg$write_1__VAL_2;
      WILL_FIRE_RL_masterX_1_idle_op:
	  masterX_1_ifc_request_reg$D_IN =
	      MUX_masterX_1_ifc_request_reg$write_1__VAL_3;
      WILL_FIRE_RL_masterX_1_stall_op:
	  masterX_1_ifc_request_reg$D_IN =
	      MUX_masterX_1_ifc_request_reg$write_1__VAL_4;
      default: masterX_1_ifc_request_reg$D_IN =
		   77'h0AAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign masterX_1_ifc_request_reg$EN =
	     WILL_FIRE_RL_masterX_1_read_op ||
	     WILL_FIRE_RL_masterX_1_write_op ||
	     WILL_FIRE_RL_masterX_1_start_op ||
	     WILL_FIRE_RL_masterX_1_idle_op ||
	     WILL_FIRE_RL_masterX_1_stall_op ;

  // register masterX_1_req_reg
  always@(MUX_masterX_1_req_reg$write_1__SEL_1 or
	  MUX_masterX_1_req_reg$write_1__VAL_1 or
	  MUX_masterX_1_lock_wire$wset_1__PSEL_1 or
	  MUX_masterX_1_req_reg$write_1__VAL_2 or
	  WILL_FIRE_RL_masterX_1_start_op or
	  MUX_masterX_1_req_reg$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_masterX_1_req_reg$write_1__SEL_1:
	  masterX_1_req_reg$D_IN = MUX_masterX_1_req_reg$write_1__VAL_1;
      MUX_masterX_1_lock_wire$wset_1__PSEL_1:
	  masterX_1_req_reg$D_IN = MUX_masterX_1_req_reg$write_1__VAL_2;
      WILL_FIRE_RL_masterX_1_start_op:
	  masterX_1_req_reg$D_IN = MUX_masterX_1_req_reg$write_1__VAL_3;
      default: masterX_1_req_reg$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign masterX_1_req_reg$EN = masterX_1_response_wire$whas ;

  // register mem_ff_reqs_rv
  assign mem_ff_reqs_rv$D_IN = mem_ff_reqs_rv$port2__read ;
  assign mem_ff_reqs_rv$EN = 1'b1 ;

  // register mem_ff_rsps_rv
  assign mem_ff_rsps_rv$D_IN = mem_ff_rsps_rv$port2__read ;
  assign mem_ff_rsps_rv$EN = 1'b1 ;

  // register mem_rg_mem_state
  assign mem_rg_mem_state$D_IN = mem_rg_mem_state$port2__read ;
  assign mem_rg_mem_state$EN = 1'b1 ;

  // register proc_burst_length
  always@(MUX_proc_burst_length$write_1__SEL_1 or
	  proc_core$imem_ifc_tx_get or
	  MUX_proc_who$write_1__PSEL_1 or
	  MUX_proc_burst_length$write_1__VAL_2 or
	  WILL_FIRE_RL_proc_rl_dmem_request or proc_core$dmem_ifc_tx_get)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_proc_burst_length$write_1__SEL_1:
	  proc_burst_length$D_IN = proc_core$imem_ifc_tx_get[40:31];
      MUX_proc_who$write_1__PSEL_1:
	  proc_burst_length$D_IN = MUX_proc_burst_length$write_1__VAL_2;
      WILL_FIRE_RL_proc_rl_dmem_request:
	  proc_burst_length$D_IN = proc_core$dmem_ifc_tx_get[40:31];
      default: proc_burst_length$D_IN =
		   10'b1010101010 /* unspecified value */ ;
    endcase
  end
  assign proc_burst_length$EN =
	     WILL_FIRE_RL_proc_rl_imem_request &&
	     !proc_core$imem_ifc_tx_get[109] ||
	     WILL_FIRE_RL_proc_rl_dmem_response ||
	     WILL_FIRE_RL_proc_rl_imem_response ||
	     WILL_FIRE_RL_proc_rl_dmem_request ;

  // register proc_f_bus_reqs_rv
  assign proc_f_bus_reqs_rv$D_IN = proc_f_bus_reqs_rv$port2__read ;
  assign proc_f_bus_reqs_rv$EN = 1'b1 ;

  // register proc_f_bus_rsps_rv
  assign proc_f_bus_rsps_rv$D_IN = proc_f_bus_rsps_rv$port2__read ;
  assign proc_f_bus_rsps_rv$EN = 1'b1 ;

  // register proc_who
  always@(MUX_proc_who$write_1__SEL_1 or
	  WILL_FIRE_RL_proc_rl_imem_request or
	  WILL_FIRE_RL_proc_rl_dmem_request)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_proc_who$write_1__SEL_1: proc_who$D_IN = 2'd2;
      WILL_FIRE_RL_proc_rl_imem_request: proc_who$D_IN = 2'd0;
      WILL_FIRE_RL_proc_rl_dmem_request: proc_who$D_IN = 2'd1;
      default: proc_who$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign proc_who$EN =
	     (WILL_FIRE_RL_proc_rl_dmem_response ||
	      WILL_FIRE_RL_proc_rl_imem_response) &&
	     proc_burst_length == 10'd1 ||
	     WILL_FIRE_RL_proc_rl_imem_request ||
	     WILL_FIRE_RL_proc_rl_dmem_request ;

  // register rg_dump_gpr
  assign rg_dump_gpr$D_IN =
	     { {32{proc_core$debug_ifc_read_gpr[31]}},
	       proc_core$debug_ifc_read_gpr } ;
  assign rg_dump_gpr$EN = CAN_FIRE_RL_action_l264c37 ;

  // register rg_instret
  assign rg_instret$D_IN = proc_core$debug_ifc_read_instret ;
  assign rg_instret$EN = CAN_FIRE_RL_action_l464c52 ;

  // register rg_prev_instret
  assign rg_prev_instret$D_IN = proc_core$debug_ifc_read_instret ;
  assign rg_prev_instret$EN = CAN_FIRE_RL_action_l460c49 ;

  // register rg_xi
  assign rg_xi$D_IN =
	     WILL_FIRE_RL_action_f_update_l263c25 ?
	       MUX_rg_xi$write_1__VAL_1 :
	       6'd1 ;
  assign rg_xi$EN =
	     WILL_FIRE_RL_action_f_update_l263c25 ||
	     WILL_FIRE_RL_action_f_init_l263c25 ;

  // register rg_xj
  assign rg_xj$D_IN = 6'h0 ;
  assign rg_xj$EN = 1'b0 ;

  // register rtc_counter_cycle
  assign rtc_counter_cycle$D_IN = rtc_counter_cycle + 6'd1 ;
  assign rtc_counter_cycle$EN = 1'd1 ;

  // register rtc_pendingReq
  assign rtc_pendingReq$D_IN = rtc_pendingReq$port2__read ;
  assign rtc_pendingReq$EN = 1'b1 ;

  // register rtc_timeCmpHi
  assign rtc_timeCmpHi$D_IN = slave_rtc_fifo_tx_rv$port1__read[72:41] ;
  assign rtc_timeCmpHi$EN =
	     WILL_FIRE_RL_mkConnectionGetPut_4 &&
	     !slave_rtc_fifo_tx_rv$port1__read[109] &&
	     slave_rtc_fifo_tx_rv$port1__read[108:107] == 2'd1 &&
	     slave_rtc_fifo_tx_rv$port1__read[76:73] == 4'hC ;

  // register rtc_timeCmpLo
  assign rtc_timeCmpLo$D_IN = slave_rtc_fifo_tx_rv$port1__read[72:41] ;
  assign rtc_timeCmpLo$EN =
	     WILL_FIRE_RL_mkConnectionGetPut_4 &&
	     !slave_rtc_fifo_tx_rv$port1__read[109] &&
	     slave_rtc_fifo_tx_rv$port1__read[108:107] == 2'd1 &&
	     slave_rtc_fifo_tx_rv$port1__read[76:73] == 4'h8 ;

  // register rtc_timeRegHi
  assign rtc_timeRegHi$D_IN =
	     MUX_rtc_timeRegHi$write_1__SEL_1 ?
	       slave_rtc_fifo_tx_rv$port1__read[72:41] :
	       rtc_timeRegHi_8_CONCAT_rtc_timeRegLo_9_0_PLUS_1___d41[63:32] ;
  assign rtc_timeRegHi$EN =
	     WILL_FIRE_RL_mkConnectionGetPut_4 &&
	     !slave_rtc_fifo_tx_rv$port1__read[109] &&
	     slave_rtc_fifo_tx_rv$port1__read[108:107] == 2'd1 &&
	     slave_rtc_fifo_tx_rv$port1__read[76:73] == 4'h4 ||
	     WILL_FIRE_RL_rtc_incrementTimer ;

  // register rtc_timeRegLo
  assign rtc_timeRegLo$D_IN =
	     MUX_rtc_timeRegLo$write_1__SEL_1 ?
	       slave_rtc_fifo_tx_rv$port1__read[72:41] :
	       rtc_timeRegHi_8_CONCAT_rtc_timeRegLo_9_0_PLUS_1___d41[31:0] ;
  assign rtc_timeRegLo$EN =
	     WILL_FIRE_RL_mkConnectionGetPut_4 &&
	     !slave_rtc_fifo_tx_rv$port1__read[109] &&
	     slave_rtc_fifo_tx_rv$port1__read[108:107] == 2'd1 &&
	     slave_rtc_fifo_tx_rv$port1__read[76:73] == 4'h0 ||
	     WILL_FIRE_RL_rtc_incrementTimer ;

  // register running
  assign running$D_IN = 1'd1 ;
  assign running$EN = CAN_FIRE_RL_auto_start ;

  // register slave_mem_config_ctrl_reg
  assign slave_mem_config_ctrl_reg$D_IN =
	     MUX_slave_mem_config_ctrl_reg$write_1__SEL_1 ?
	       MUX_slave_mem_config_ctrl_reg$write_1__VAL_1 :
	       MUX_slave_mem_config_ctrl_reg$write_1__VAL_2 ;
  assign slave_mem_config_ctrl_reg$EN =
	     WILL_FIRE_RL_slave_mem_config_default_response ||
	     WILL_FIRE_RL_slave_mem_config_grab_response ||
	     WILL_FIRE_RL_slave_mem_config_grab_ctrl ;

  // register slave_mem_config_fifo_op_rv
  assign slave_mem_config_fifo_op_rv$D_IN =
	     slave_mem_config_fifo_op_rv$port2__read ;
  assign slave_mem_config_fifo_op_rv$EN = 1'b1 ;

  // register slave_mem_config_fifo_rx_rv
  assign slave_mem_config_fifo_rx_rv$D_IN =
	     slave_mem_config_fifo_rx_rv$port2__read ;
  assign slave_mem_config_fifo_rx_rv$EN = 1'b1 ;

  // register slave_mem_config_fifo_tx_rv
  assign slave_mem_config_fifo_tx_rv$D_IN =
	     slave_mem_config_fifo_tx_rv$port2__read ;
  assign slave_mem_config_fifo_tx_rv$EN = 1'b1 ;

  // register slave_mem_config_first
  assign slave_mem_config_first$D_IN = 1'b0 ;
  assign slave_mem_config_first$EN = 1'd1 ;

  // register slave_mem_config_start
  assign slave_mem_config_start$D_IN = 1'b0 ;
  assign slave_mem_config_start$EN = 1'b0 ;

  // register slave_mem_data_ctrl_reg
  assign slave_mem_data_ctrl_reg$D_IN =
	     MUX_slave_mem_data_ctrl_reg$write_1__SEL_1 ?
	       MUX_slave_mem_data_ctrl_reg$write_1__VAL_1 :
	       MUX_slave_mem_data_ctrl_reg$write_1__VAL_2 ;
  assign slave_mem_data_ctrl_reg$EN =
	     WILL_FIRE_RL_slave_mem_data_default_response ||
	     WILL_FIRE_RL_slave_mem_data_grab_response ||
	     WILL_FIRE_RL_slave_mem_data_grab_ctrl ;

  // register slave_mem_data_fifo_op_rv
  assign slave_mem_data_fifo_op_rv$D_IN =
	     slave_mem_data_fifo_op_rv$port2__read ;
  assign slave_mem_data_fifo_op_rv$EN = 1'b1 ;

  // register slave_mem_data_fifo_rx_rv
  assign slave_mem_data_fifo_rx_rv$D_IN =
	     slave_mem_data_fifo_rx_rv$port2__read ;
  assign slave_mem_data_fifo_rx_rv$EN = 1'b1 ;

  // register slave_mem_data_fifo_tx_rv
  assign slave_mem_data_fifo_tx_rv$D_IN =
	     slave_mem_data_fifo_tx_rv$port2__read ;
  assign slave_mem_data_fifo_tx_rv$EN = 1'b1 ;

  // register slave_mem_data_first
  assign slave_mem_data_first$D_IN = 1'b0 ;
  assign slave_mem_data_first$EN = 1'd1 ;

  // register slave_mem_data_start
  assign slave_mem_data_start$D_IN = 1'b0 ;
  assign slave_mem_data_start$EN = 1'b0 ;

  // register slave_rtc_ctrl_reg
  assign slave_rtc_ctrl_reg$D_IN =
	     MUX_slave_rtc_ctrl_reg$write_1__SEL_1 ?
	       MUX_slave_rtc_ctrl_reg$write_1__VAL_1 :
	       MUX_slave_rtc_ctrl_reg$write_1__VAL_2 ;
  assign slave_rtc_ctrl_reg$EN =
	     WILL_FIRE_RL_slave_rtc_default_response ||
	     WILL_FIRE_RL_slave_rtc_grab_response ||
	     WILL_FIRE_RL_slave_rtc_grab_ctrl ;

  // register slave_rtc_fifo_op_rv
  assign slave_rtc_fifo_op_rv$D_IN = slave_rtc_fifo_op_rv$port2__read ;
  assign slave_rtc_fifo_op_rv$EN = 1'b1 ;

  // register slave_rtc_fifo_rx_rv
  assign slave_rtc_fifo_rx_rv$D_IN = slave_rtc_fifo_rx_rv$port2__read ;
  assign slave_rtc_fifo_rx_rv$EN = 1'b1 ;

  // register slave_rtc_fifo_tx_rv
  assign slave_rtc_fifo_tx_rv$D_IN = slave_rtc_fifo_tx_rv$port2__read ;
  assign slave_rtc_fifo_tx_rv$EN = 1'b1 ;

  // register slave_rtc_first
  assign slave_rtc_first$D_IN = 1'b0 ;
  assign slave_rtc_first$EN = 1'd1 ;

  // register slave_rtc_start
  assign slave_rtc_start$D_IN = 1'b0 ;
  assign slave_rtc_start$EN = 1'b0 ;

  // register start_reg
  assign start_reg$D_IN = !WILL_FIRE_RL_fsm_start ;
  assign start_reg$EN = WILL_FIRE_RL_fsm_start || WILL_FIRE_RL_auto_start ;

  // register start_reg_1
  assign start_reg_1$D_IN = start_reg_2$whas ;
  assign start_reg_1$EN = 1'd1 ;

  // register state_can_overlap
  assign state_can_overlap$D_IN = state_set_pw$whas || state_can_overlap ;
  assign state_can_overlap$EN = 1'd1 ;

  // register state_fired
  assign state_fired$D_IN = state_set_pw$whas ;
  assign state_fired$EN = 1'd1 ;

  // register state_mkFSMstate
  always@(WILL_FIRE_RL_idle_l438c17 or
	  WILL_FIRE_RL_action_l276c17 or
	  WILL_FIRE_RL_action_l281c17 or
	  WILL_FIRE_RL_action_l290c17 or
	  WILL_FIRE_RL_action_l442c25 or
	  WILL_FIRE_RL_action_l460c49 or
	  WILL_FIRE_RL_action_l461c37 or
	  WILL_FIRE_RL_action_l464c52 or
	  WILL_FIRE_RL_action_l259c18 or
	  WILL_FIRE_RL_action_f_init_l263c25 or
	  WILL_FIRE_RL_action_l264c37 or
	  WILL_FIRE_RL_action_l265c33 or
	  WILL_FIRE_RL_action_f_update_l263c25 or WILL_FIRE_RL_action_l268c18)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_idle_l438c17: state_mkFSMstate$D_IN = 5'd0;
      WILL_FIRE_RL_action_l276c17: state_mkFSMstate$D_IN = 5'd1;
      WILL_FIRE_RL_action_l281c17: state_mkFSMstate$D_IN = 5'd2;
      WILL_FIRE_RL_action_l290c17: state_mkFSMstate$D_IN = 5'd3;
      WILL_FIRE_RL_action_l442c25: state_mkFSMstate$D_IN = 5'd4;
      WILL_FIRE_RL_action_l460c49: state_mkFSMstate$D_IN = 5'd5;
      WILL_FIRE_RL_action_l461c37: state_mkFSMstate$D_IN = 5'd6;
      WILL_FIRE_RL_action_l464c52: state_mkFSMstate$D_IN = 5'd7;
      WILL_FIRE_RL_action_l259c18: state_mkFSMstate$D_IN = 5'd8;
      WILL_FIRE_RL_action_f_init_l263c25: state_mkFSMstate$D_IN = 5'd9;
      WILL_FIRE_RL_action_l264c37: state_mkFSMstate$D_IN = 5'd10;
      WILL_FIRE_RL_action_l265c33: state_mkFSMstate$D_IN = 5'd11;
      WILL_FIRE_RL_action_f_update_l263c25: state_mkFSMstate$D_IN = 5'd12;
      WILL_FIRE_RL_action_l268c18: state_mkFSMstate$D_IN = 5'd13;
      default: state_mkFSMstate$D_IN = 5'b01010 /* unspecified value */ ;
    endcase
  end
  assign state_mkFSMstate$EN =
	     WILL_FIRE_RL_idle_l438c17 || WILL_FIRE_RL_action_l276c17 ||
	     WILL_FIRE_RL_action_l281c17 ||
	     WILL_FIRE_RL_action_l290c17 ||
	     WILL_FIRE_RL_action_l442c25 ||
	     WILL_FIRE_RL_action_l460c49 ||
	     WILL_FIRE_RL_action_l461c37 ||
	     WILL_FIRE_RL_action_l464c52 ||
	     WILL_FIRE_RL_action_l259c18 ||
	     WILL_FIRE_RL_action_f_init_l263c25 ||
	     WILL_FIRE_RL_action_l264c37 ||
	     WILL_FIRE_RL_action_l265c33 ||
	     WILL_FIRE_RL_action_f_update_l263c25 ||
	     WILL_FIRE_RL_action_l268c18 ;

  // submodule config_memory_memory
  assign config_memory_memory$ADDR =
	     config_memory_ff_reqs_rvport1__read_BITS_104__ETC__q16[11:2] ;
  assign config_memory_memory$DI =
	     config_memory_ff_reqs_rv$port1__read[72:41] << alignment__h3632 ;
  assign config_memory_memory$WE =
	     (config_memory_ff_reqs_rv$port1__read[108:107] == 2'd0) ?
	       4'd0 :
	       writeen__h3631 ;
  assign config_memory_memory$EN =
	     WILL_FIRE_RL_config_memory_rl_process_requests &&
	     !config_memory_ff_reqs_rv$port1__read[109] &&
	     (config_memory_ff_reqs_rv$port1__read[108:107] == 2'd0 ||
	      config_memory_ff_reqs_rv$port1__read[108:107] == 2'd1) ;

  // submodule masterX_0_fifo_tx_fifof_ff
  assign masterX_0_fifo_tx_fifof_ff$D_IN = masterX_0_fifo_tx_fifof_enqw$wget ;
  assign masterX_0_fifo_tx_fifof_ff$ENQ =
	     CAN_FIRE_RL_masterX_0_fifo_tx_fifof_enqueue ;
  assign masterX_0_fifo_tx_fifof_ff$DEQ =
	     CAN_FIRE_RL_masterX_0_fifo_tx_fifof_dequeue ;
  assign masterX_0_fifo_tx_fifof_ff$CLR = 1'b0 ;

  // submodule masterX_0_fifo_tx_fifof_firstValid
  assign masterX_0_fifo_tx_fifof_firstValid$D_IN = 1'd1 ;
  assign masterX_0_fifo_tx_fifof_firstValid$EN =
	     CAN_FIRE_RL_mkConnectionGetPut_1 ;

  // submodule masterX_0_fifo_tx_levelsValidClr
  assign masterX_0_fifo_tx_levelsValidClr$D_IN = 1'b0 ;
  assign masterX_0_fifo_tx_levelsValidClr$EN = 1'b0 ;

  // submodule masterX_0_fifo_tx_levelsValidDeq
  assign masterX_0_fifo_tx_levelsValidDeq$D_IN = 1'd1 ;
  assign masterX_0_fifo_tx_levelsValidDeq$EN =
	     CAN_FIRE_RL_mkConnectionGetPut_1 ;

  // submodule masterX_0_fifo_tx_levelsValidEnq
  assign masterX_0_fifo_tx_levelsValidEnq$D_IN = 1'd1 ;
  assign masterX_0_fifo_tx_levelsValidEnq$EN =
	     CAN_FIRE_RL_masterX_0_grab_valid_response ;

  // submodule masterX_1_fifo_tx_fifof_ff
  assign masterX_1_fifo_tx_fifof_ff$D_IN = masterX_1_fifo_tx_fifof_enqw$wget ;
  assign masterX_1_fifo_tx_fifof_ff$ENQ =
	     CAN_FIRE_RL_masterX_1_grab_valid_response ;
  assign masterX_1_fifo_tx_fifof_ff$DEQ = 1'b0 ;
  assign masterX_1_fifo_tx_fifof_ff$CLR = 1'b0 ;

  // submodule masterX_1_fifo_tx_fifof_firstValid
  assign masterX_1_fifo_tx_fifof_firstValid$D_IN = 1'b0 ;
  assign masterX_1_fifo_tx_fifof_firstValid$EN = 1'b0 ;

  // submodule masterX_1_fifo_tx_levelsValidClr
  assign masterX_1_fifo_tx_levelsValidClr$D_IN = 1'b0 ;
  assign masterX_1_fifo_tx_levelsValidClr$EN = 1'b0 ;

  // submodule masterX_1_fifo_tx_levelsValidDeq
  assign masterX_1_fifo_tx_levelsValidDeq$D_IN = 1'b0 ;
  assign masterX_1_fifo_tx_levelsValidDeq$EN = 1'b0 ;

  // submodule masterX_1_fifo_tx_levelsValidEnq
  assign masterX_1_fifo_tx_levelsValidEnq$D_IN = 1'd1 ;
  assign masterX_1_fifo_tx_levelsValidEnq$EN =
	     CAN_FIRE_RL_masterX_1_grab_valid_response ;

  // submodule mem_memory
  assign mem_memory$ADDR =
	     mem_ff_reqs_rvport1__read_BITS_104_TO_73_MINU_ETC__q17[19:2] ;
  assign mem_memory$DI =
	     mem_ff_reqs_rv$port1__read[72:41] << alignment__h5277 ;
  assign mem_memory$WE =
	     (mem_ff_reqs_rv$port1__read[108:107] == 2'd0) ?
	       4'd0 :
	       writeen__h5276 ;
  assign mem_memory$EN =
	     WILL_FIRE_RL_mem_rl_process_requests &&
	     !mem_ff_reqs_rv$port1__read[109] &&
	     (mem_ff_reqs_rv$port1__read[108:107] == 2'd0 ||
	      mem_ff_reqs_rv$port1__read[108:107] == 2'd1) ;

  // submodule proc_core
  assign proc_core$debug_ifc_read_gpr_r = rg_xi[4:0] ;
  assign proc_core$debug_ifc_req_read_memW_addr = 32'h0 ;
  assign proc_core$debug_ifc_run_continue_mpc = 33'h0 ;
  assign proc_core$debug_ifc_run_step_mpc =
	     MUX_masterX_0_data_reg$write_1__VAL_1 ;
  assign proc_core$debug_ifc_set_verbosity_verbosity = 32'h0 ;
  assign proc_core$debug_ifc_write_gpr_d = 32'h0 ;
  assign proc_core$debug_ifc_write_gpr_r = 5'h0 ;
  assign proc_core$debug_ifc_write_memW_addr = 32'h0 ;
  assign proc_core$debug_ifc_write_memW_d = 32'h0 ;
  assign proc_core$debug_ifc_write_pc_d = 32'h80000000 ;
  assign proc_core$dmem_ifc_rx_put = proc_f_bus_rsps_rv$port1__read[57:0] ;
  assign proc_core$imem_ifc_rx_put = proc_f_bus_rsps_rv$port1__read[57:0] ;
  assign proc_core$interrupt_ifc_external_meip = 1'b0 ;
  assign proc_core$interrupt_ifc_software_msip = 1'b0 ;
  assign proc_core$interrupt_ifc_timer_mtip =
	     timeValue__h2537 >= { rtc_timeCmpHi, rtc_timeCmpLo } ;
  assign proc_core$uart_ifc_sin_in = uart_ifc_sin_in ;
  assign proc_core$write_counter_time_data = timeValue__h2537 ;
  assign proc_core$EN_imem_ifc_tx_get = WILL_FIRE_RL_proc_rl_imem_request ;
  assign proc_core$EN_imem_ifc_rx_put = CAN_FIRE_RL_proc_rl_imem_response ;
  assign proc_core$EN_dmem_ifc_tx_get = CAN_FIRE_RL_proc_rl_dmem_request ;
  assign proc_core$EN_dmem_ifc_rx_put = CAN_FIRE_RL_proc_rl_dmem_response ;
  assign proc_core$EN_interrupt_ifc_timer = 1'd1 ;
  assign proc_core$EN_interrupt_ifc_software = 1'b0 ;
  assign proc_core$EN_interrupt_ifc_external = 1'b0 ;
  assign proc_core$EN_debug_ifc_reset = CAN_FIRE_RL_action_l276c17 ;
  assign proc_core$EN_debug_ifc_reset_complete = CAN_FIRE_RL_action_l281c17 ;
  assign proc_core$EN_debug_ifc_run_continue = 1'b0 ;
  assign proc_core$EN_debug_ifc_run_step = CAN_FIRE_RL_action_l461c37 ;
  assign proc_core$EN_debug_ifc_stop = 1'b0 ;
  assign proc_core$EN_debug_ifc_write_pc =
	     WILL_FIRE_RL_action_l281c17 &&
	     proc_core$debug_ifc_reset_complete ;
  assign proc_core$EN_debug_ifc_write_gpr = 1'b0 ;
  assign proc_core$EN_debug_ifc_req_read_memW = 1'b0 ;
  assign proc_core$EN_debug_ifc_rsp_read_memW = 1'b0 ;
  assign proc_core$EN_debug_ifc_write_memW = 1'b0 ;
  assign proc_core$EN_debug_ifc_set_verbosity = 1'b0 ;
  assign proc_core$EN_uart_ifc_sin = EN_uart_ifc_sin ;
  assign proc_core$EN_write_counter_time = 1'd1 ;

  // remaining internal signals
  assign IF_SEL_ARR_masterX_0_ifc_request_reg_02_BITS_7_ETC___d1974 =
	     (SEL_ARR_masterX_0_ifc_request_reg_02_BITS_72_T_ETC___d1947 ==
	      3'd1) ?
	       ahb_bus_monitor_request_prev &&
	       SEL_ARR_NOT_masterX_0_req_wire_whas__928_950_O_ETC___d1961 &&
	       ahb_bus_monitor_started :
	       ahb_bus_monitor_started && ahb_bus_monitor_hready_prev &&
	       ahb_bus_monitor_remaining_reg == 5'd1 &&
	       ahb_bus_monitor_transfer_prev != 2'd0 ;
  assign IF_ahb_bus_s_map_data_0_105_BIT_2_106_THEN_SEL_ETC___d2109 =
	     ahb_bus_s_map_data_0[2] ?
	       SEL_ARR_ahb_bus_dummy_transfer_reg_916_EQ_0_91_ETC___d2108 :
	       ahb_bus_dummys_0_transfer_reg == 2'd0 ||
	       ahb_bus_dummys_0_transfer_reg == 2'd1 ||
	       !ahb_bus_dummys_0_select_reg ;
  assign IF_ahb_bus_s_map_data_0_105_BIT_2_106_THEN_SEL_ETC___d2199 =
	     ahb_bus_s_map_data_0[2] ?
	       CASE_ahb_bus_s_map_data_0_BITS_1_TO_0_0_0_1_IF_ETC__q12 :
	       2'd0 ;
  assign IF_ahb_bus_s_map_data_1_115_BIT_2_116_THEN_SEL_ETC___d2119 =
	     ahb_bus_s_map_data_1[2] ?
	       SEL_ARR_ahb_bus_dummy_transfer_reg_916_EQ_0_91_ETC___d2118 :
	       ahb_bus_dummys_1_transfer_reg == 2'd0 ||
	       ahb_bus_dummys_1_transfer_reg == 2'd1 ||
	       !ahb_bus_dummys_1_select_reg ;
  assign IF_ahb_bus_s_map_data_1_115_BIT_2_116_THEN_SEL_ETC___d2216 =
	     ahb_bus_s_map_data_1[2] ?
	       CASE_ahb_bus_s_map_data_1_BITS_1_TO_0_0_0_1_IF_ETC__q13 :
	       2'd0 ;
  assign IF_masterX_0_descriptor_25_BITS_26_TO_25_36_EQ_ETC___d788 =
	     (masterX_0_descriptor[26:25] == 2'd0 &&
	      masterX_0_descriptor[40:31] == 10'd1) ?
	       3'd0 :
	       ((masterX_0_descriptor[26:25] == 2'd0 &&
		 masterX_0_descriptor[40:31] == 10'd4) ?
		  3'd3 :
		  ((masterX_0_descriptor[26:25] == 2'd0 &&
		    masterX_0_descriptor[40:31] == 10'd8) ?
		     3'd5 :
		     ((masterX_0_descriptor[26:25] == 2'd0 &&
		       masterX_0_descriptor[40:31] == 10'd16) ?
			3'd7 :
			((masterX_0_descriptor[26:25] == 2'd1 &&
			  masterX_0_descriptor[40:31] == 10'd4) ?
			   3'd2 :
			   ((masterX_0_descriptor[26:25] == 2'd1 &&
			     masterX_0_descriptor[40:31] == 10'd8) ?
			      3'd4 :
			      ((masterX_0_descriptor[26:25] == 2'd1 &&
				masterX_0_descriptor[40:31] == 10'd16) ?
				 3'd6 :
				 CASE_masterX_0_descriptor_BITS_26_TO_25_0_1_1__ETC__q1)))))) ;
  assign IF_masterX_0_descriptor_25_BIT_109_26_THEN_IF__ETC___d830 =
	     { masterX_0_descriptor[109] ?
		 IF_masterX_0_descriptor_25_BITS_26_TO_25_36_EQ_ETC___d788 :
		 3'd0,
	       (masterX_0_descriptor[109] &&
		(masterX_0_descriptor[26:25] == 2'd0 &&
		 masterX_0_descriptor[40:31] == 10'd1 ||
		 (masterX_0_descriptor[26:25] != 2'd1 ||
		  masterX_0_descriptor[40:31] != 10'd4) &&
		 (masterX_0_descriptor[26:25] != 2'd1 ||
		  masterX_0_descriptor[40:31] != 10'd8) &&
		 (masterX_0_descriptor[26:25] != 2'd1 ||
		  masterX_0_descriptor[40:31] != 10'd16) &&
		 masterX_0_descriptor[26:25] != 2'd0) ||
		masterX_0_count == 10'd0) ?
		 2'd0 :
		 2'd1,
	       4'd0,
	       _theResult_____2_addr__h48807 } ;
  assign IF_masterX_1_descriptor_262_BITS_26_TO_25_273__ETC___d1525 =
	     (masterX_1_descriptor[26:25] == 2'd0 &&
	      masterX_1_descriptor[40:31] == 10'd1) ?
	       3'd0 :
	       ((masterX_1_descriptor[26:25] == 2'd0 &&
		 masterX_1_descriptor[40:31] == 10'd4) ?
		  3'd3 :
		  ((masterX_1_descriptor[26:25] == 2'd0 &&
		    masterX_1_descriptor[40:31] == 10'd8) ?
		     3'd5 :
		     ((masterX_1_descriptor[26:25] == 2'd0 &&
		       masterX_1_descriptor[40:31] == 10'd16) ?
			3'd7 :
			((masterX_1_descriptor[26:25] == 2'd1 &&
			  masterX_1_descriptor[40:31] == 10'd4) ?
			   3'd2 :
			   ((masterX_1_descriptor[26:25] == 2'd1 &&
			     masterX_1_descriptor[40:31] == 10'd8) ?
			      3'd4 :
			      ((masterX_1_descriptor[26:25] == 2'd1 &&
				masterX_1_descriptor[40:31] == 10'd16) ?
				 3'd6 :
				 CASE_masterX_1_descriptor_BITS_26_TO_25_0_1_1__ETC__q2)))))) ;
  assign IF_masterX_1_descriptor_262_BIT_109_263_THEN_I_ETC___d1566 =
	     { masterX_1_descriptor[109] ?
		 IF_masterX_1_descriptor_262_BITS_26_TO_25_273__ETC___d1525 :
		 3'd0,
	       (masterX_1_descriptor[109] &&
		(masterX_1_descriptor[26:25] == 2'd0 &&
		 masterX_1_descriptor[40:31] == 10'd1 ||
		 (masterX_1_descriptor[26:25] != 2'd1 ||
		  masterX_1_descriptor[40:31] != 10'd4) &&
		 (masterX_1_descriptor[26:25] != 2'd1 ||
		  masterX_1_descriptor[40:31] != 10'd8) &&
		 (masterX_1_descriptor[26:25] != 2'd1 ||
		  masterX_1_descriptor[40:31] != 10'd16) &&
		 masterX_1_descriptor[26:25] != 2'd0) ||
		masterX_1_count == 10'd0) ?
		 2'd0 :
		 2'd1,
	       4'd0,
	       _theResult_____2_addr__h92804 } ;
  assign IF_slave_mem_config_ifc_response_wire_whas__19_ETC___d2196 =
	     MUX_slave_mem_config_ctrl_reg$write_1__SEL_1 ?
	       slave_mem_config_ifc_response_wire$wget[35:34] :
	       2'd0 ;
  assign IF_slave_mem_data_ifc_response_wire_whas__185__ETC___d2188 =
	     MUX_slave_mem_data_ctrl_reg$write_1__SEL_1 ?
	       slave_mem_data_ifc_response_wire$wget[35:34] :
	       2'd0 ;
  assign IF_slave_rtc_ifc_response_wire_whas__189_THEN__ETC___d2192 =
	     MUX_slave_rtc_ctrl_reg$write_1__SEL_1 ?
	       slave_rtc_ifc_response_wire$wget[35:34] :
	       2'd0 ;
  assign NOT_masterX_0_count_17_EQ_0_18_19_AND_NOT_mast_ETC___d529 =
	     masterX_0_count != 10'd0 && !CAN_FIRE_RL_masterX_0_stall &&
	     ahb_bus_arbiter_dgrant_vector_wire$wget[0] ;
  assign NOT_masterX_1_count_54_EQ_0_55_56_AND_NOT_mast_ETC___d1266 =
	     masterX_1_count != 10'd0 && !CAN_FIRE_RL_masterX_1_stall &&
	     ahb_bus_arbiter_dgrant_vector_wire$wget[1] ;
  assign _0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547 =
	     { 30'd0, masterX_0_descriptor[24:23] } + 32'd1 ;
  assign _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248 =
	     { 30'd0, masterX_0_fifo_rx_rv$port1__read[24:23] } + 32'd1 ;
  assign _0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284 =
	     { 30'd0, masterX_1_descriptor[24:23] } + 32'd1 ;
  assign _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985 =
	     { 30'd0, masterX_1_fifo_rx_rv[24:23] } + 32'd1 ;
  assign _dand1masterX_0_lock_wire$EN_wset =
	     (WILL_FIRE_RL_masterX_0_read_op ||
	      WILL_FIRE_RL_masterX_0_write_op) &&
	     (masterX_0_descriptor[26:25] == 2'd0 &&
	      masterX_0_descriptor[40:31] == 10'd1 ||
	      (masterX_0_descriptor[26:25] != 2'd1 ||
	       masterX_0_descriptor[40:31] != 10'd4) &&
	      (masterX_0_descriptor[26:25] != 2'd1 ||
	       masterX_0_descriptor[40:31] != 10'd8) &&
	      (masterX_0_descriptor[26:25] != 2'd1 ||
	       masterX_0_descriptor[40:31] != 10'd16) &&
	      masterX_0_descriptor[26:25] != 2'd0) ;
  assign _dand1masterX_1_lock_wire$EN_wset =
	     (WILL_FIRE_RL_masterX_1_read_op ||
	      WILL_FIRE_RL_masterX_1_write_op) &&
	     (masterX_1_descriptor[26:25] == 2'd0 &&
	      masterX_1_descriptor[40:31] == 10'd1 ||
	      (masterX_1_descriptor[26:25] != 2'd1 ||
	       masterX_1_descriptor[40:31] != 10'd4) &&
	      (masterX_1_descriptor[26:25] != 2'd1 ||
	       masterX_1_descriptor[40:31] != 10'd8) &&
	      (masterX_1_descriptor[26:25] != 2'd1 ||
	       masterX_1_descriptor[40:31] != 10'd16) &&
	      masterX_1_descriptor[26:25] != 2'd0) ;
  assign _dfoo1 =
	     masterX_0_ifc_fifo_op_cntr_r != 2'd2 ||
	     masterX_0_ifc_fifo_op_cntr_r_63_MINUS_1___d180 == 2'd1 ;
  assign _dfoo3 =
	     masterX_0_ifc_fifo_op_cntr_r != 2'd1 ||
	     masterX_0_ifc_fifo_op_cntr_r_63_MINUS_1___d180 == 2'd0 ;
  assign _dfoo5 =
	     masterX_1_ifc_fifo_op_cntr_r != 2'd2 ||
	     masterX_1_ifc_fifo_op_cntr_r_01_MINUS_1___d917 == 2'd1 ;
  assign _dfoo7 =
	     masterX_1_ifc_fifo_op_cntr_r != 2'd1 ||
	     masterX_1_ifc_fifo_op_cntr_r_01_MINUS_1___d917 == 2'd0 ;
  assign _theResult_____2_addr__h48807 =
	     masterX_0_descriptor[109] ?
	       masterX_0_descriptor[104:73] :
	       32'd0 ;
  assign _theResult_____2_addr__h92804 =
	     masterX_1_descriptor[109] ?
	       masterX_1_descriptor[104:73] :
	       32'd0 ;
  assign abort_whas__224_AND_abort_wget__225_226_OR_sta_ETC___d2341 =
	     state_mkFSMstate == 5'd0 ||
	     proc_core$halt && !proc_core$uart_ifc_busy &&
	     state_mkFSMstate == 5'd13 ;
  assign abort_whas__224_AND_abort_wget__225_226_OR_sta_ETC___d2348 =
	     abort_whas__224_AND_abort_wget__225_226_OR_sta_ETC___d2341 &&
	     (!start_reg_1 || state_fired) &&
	     !start_reg ;
  assign addr___1__h22882 = x__h22894 | y__h22895 ;
  assign addr___1__h53766 = x__h53778 | y__h53779 ;
  assign addr___1__h66881 = x__h66893 | y__h66894 ;
  assign addr___1__h9747 = x__h9759 | y__h9760 ;
  assign addr__h114118 = x_request__read_ctrl_addr__h96942 ;
  assign addr__h22811 = masterX_0_descriptor[104:73] + x__h22902 ;
  assign addr__h53692 = masterX_1_fifo_rx_rv[104:73] + x__h53787 ;
  assign addr__h66810 = masterX_1_descriptor[104:73] + x__h66901 ;
  assign addr__h9668 = masterX_0_fifo_rx_rv$port1__read[104:73] + x__h9768 ;
  assign ahb_bus_arbiter_priority_vector_010_BIT_0_014__ETC___d2022 =
	     (ahb_bus_arbiter_priority_vector[0] ||
	      !CAN_FIRE_RL_ahb_bus_1_send_request &&
	      ahb_bus_arbiter_priority_vector[1]) &&
	     CAN_FIRE_RL_ahb_bus_0_send_request ;
  assign ahb_bus_arbiter_priority_vector_010_BIT_1_011__ETC___d2018 =
	     (ahb_bus_arbiter_priority_vector[1] ||
	      !CAN_FIRE_RL_ahb_bus_0_send_request &&
	      ahb_bus_arbiter_priority_vector[0]) &&
	     CAN_FIRE_RL_ahb_bus_1_send_request ;
  assign alignment__h3632 =
	     { config_memory_ff_reqs_rv$port1__read[74:73], 3'b0 } ;
  assign alignment__h5277 = { mem_ff_reqs_rv$port1__read[74:73], 3'b0 } ;
  assign config_memory_ff_reqs_rvport1__read_BITS_104__ETC__q16 =
	     config_memory_ff_reqs_rv$port1__read[104:73] - 32'h0000100C ;
  assign data__h100034 =
	     (x__h114095 == 2'd2) ?
	       x_fabric_bus_hWDATA__h114104 :
	       SEL_ARR_masterX_0_ifc_request_reg_02_BITS_31_T_ETC___d2159 ;
  assign data__h102852 =
	     (x__h114095 == 2'd3) ?
	       x_fabric_bus_hWDATA__h114104 :
	       SEL_ARR_masterX_0_ifc_request_reg_02_BITS_31_T_ETC___d2159 ;
  assign data__h97213 =
	     (x__h114095 == 2'd1) ?
	       x_fabric_bus_hWDATA__h114104 :
	       SEL_ARR_masterX_0_ifc_request_reg_02_BITS_31_T_ETC___d2159 ;
  assign dump_pc__h116758 = { 32'd0, proc_core$debug_ifc_read_exec_pc } ;
  assign log_length__h22879 =
	     (masterX_0_descriptor[31] || masterX_0_descriptor[32] ||
	      masterX_0_descriptor[33] ||
	      masterX_0_descriptor[34] ||
	      masterX_0_descriptor[35] ||
	      masterX_0_descriptor[36] ||
	      masterX_0_descriptor[37] ||
	      masterX_0_descriptor[38] ||
	      masterX_0_descriptor[39] ||
	      masterX_0_descriptor[40]) ?
	       { 27'd0, value__h34138 } :
	       32'd32 ;
  assign log_length__h53763 =
	     (masterX_1_fifo_rx_rv[31] || masterX_1_fifo_rx_rv[32] ||
	      masterX_1_fifo_rx_rv[33] ||
	      masterX_1_fifo_rx_rv[34] ||
	      masterX_1_fifo_rx_rv[35] ||
	      masterX_1_fifo_rx_rv[36] ||
	      masterX_1_fifo_rx_rv[37] ||
	      masterX_1_fifo_rx_rv[38] ||
	      masterX_1_fifo_rx_rv[39] ||
	      masterX_1_fifo_rx_rv[40]) ?
	       { 27'd0, value__h65025 } :
	       32'd32 ;
  assign log_length__h66878 =
	     (masterX_1_descriptor[31] || masterX_1_descriptor[32] ||
	      masterX_1_descriptor[33] ||
	      masterX_1_descriptor[34] ||
	      masterX_1_descriptor[35] ||
	      masterX_1_descriptor[36] ||
	      masterX_1_descriptor[37] ||
	      masterX_1_descriptor[38] ||
	      masterX_1_descriptor[39] ||
	      masterX_1_descriptor[40]) ?
	       { 27'd0, value__h78137 } :
	       32'd32 ;
  assign log_length__h9744 =
	     (masterX_0_fifo_rx_rv$port1__read[31] ||
	      masterX_0_fifo_rx_rv$port1__read[32] ||
	      masterX_0_fifo_rx_rv$port1__read[33] ||
	      masterX_0_fifo_rx_rv$port1__read[34] ||
	      masterX_0_fifo_rx_rv$port1__read[35] ||
	      masterX_0_fifo_rx_rv$port1__read[36] ||
	      masterX_0_fifo_rx_rv$port1__read[37] ||
	      masterX_0_fifo_rx_rv$port1__read[38] ||
	      masterX_0_fifo_rx_rv$port1__read[39] ||
	      masterX_0_fifo_rx_rv$port1__read[40]) ?
	       { 27'd0, value__h21006 } :
	       32'd32 ;
  assign log_size__h22878 =
	     (_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[0] ||
	      _0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[1] ||
	      _0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[2] ||
	      _0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[3] ||
	      _0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[4] ||
	      _0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[5] ||
	      _0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[6] ||
	      _0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[7] ||
	      _0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[8] ||
	      _0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[9] ||
	      _0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[10] ||
	      _0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[11] ||
	      _0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[12] ||
	      _0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[13] ||
	      _0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[14] ||
	      _0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[15] ||
	      _0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[16] ||
	      _0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[17] ||
	      _0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[18] ||
	      _0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[19] ||
	      _0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[20] ||
	      _0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[21] ||
	      _0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[22] ||
	      _0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[23] ||
	      _0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[24] ||
	      _0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[25] ||
	      _0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[26] ||
	      _0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[27] ||
	      _0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[28] ||
	      _0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[29] ||
	      _0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[30] ||
	      _0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[31]) ?
	       { 27'd0, value__h28227 } :
	       32'd32 ;
  assign log_size__h53762 =
	     (_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[0] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[1] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[2] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[3] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[4] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[5] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[6] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[7] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[8] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[9] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[10] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[11] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[12] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[13] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[14] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[15] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[16] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[17] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[18] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[19] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[20] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[21] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[22] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[23] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[24] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[25] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[26] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[27] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[28] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[29] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[30] ||
	      _0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[31]) ?
	       { 27'd0, value__h59113 } :
	       32'd32 ;
  assign log_size__h66877 =
	     (_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[0] ||
	      _0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[1] ||
	      _0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[2] ||
	      _0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[3] ||
	      _0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[4] ||
	      _0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[5] ||
	      _0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[6] ||
	      _0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[7] ||
	      _0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[8] ||
	      _0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[9] ||
	      _0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[10] ||
	      _0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[11] ||
	      _0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[12] ||
	      _0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[13] ||
	      _0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[14] ||
	      _0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[15] ||
	      _0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[16] ||
	      _0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[17] ||
	      _0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[18] ||
	      _0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[19] ||
	      _0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[20] ||
	      _0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[21] ||
	      _0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[22] ||
	      _0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[23] ||
	      _0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[24] ||
	      _0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[25] ||
	      _0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[26] ||
	      _0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[27] ||
	      _0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[28] ||
	      _0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[29] ||
	      _0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[30] ||
	      _0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[31]) ?
	       { 27'd0, value__h72226 } :
	       32'd32 ;
  assign log_size__h9743 =
	     (_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[0] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[1] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[2] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[3] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[4] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[5] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[6] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[7] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[8] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[9] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[10] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[11] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[12] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[13] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[14] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[15] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[16] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[17] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[18] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[19] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[20] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[21] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[22] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[23] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[24] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[25] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[26] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[27] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[28] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[29] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[30] ||
	      _0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[31]) ?
	       { 27'd0, value__h15094 } :
	       32'd32 ;
  assign m_num_data__h106327 =
	     ahb_bus_hmaster_data[1] && ahb_bus_hmaster_data[0] ;
  assign mask__h22881 = (32'd1 << total__h22880) - 32'd1 ;
  assign mask__h53765 = (32'd1 << total__h53764) - 32'd1 ;
  assign mask__h66880 = (32'd1 << total__h66879) - 32'd1 ;
  assign mask__h9746 = (32'd1 << total__h9745) - 32'd1 ;
  assign masterX_0_descriptor_25_BIT_109_26_AND_NOT_mas_ETC___d831 =
	     { masterX_0_descriptor[109] &&
	       masterX_0_descriptor[108:107] != 2'd0,
	       masterX_0_descriptor[109] ?
		 IF_masterX_0_descriptor_25_BITS_24_TO_23_40_EQ_ETC___d765 :
		 3'd0,
	       IF_masterX_0_descriptor_25_BIT_109_26_THEN_IF__ETC___d830 } ;
  assign masterX_0_ifc_fifo_op_cntr_r_63_MINUS_1___d180 =
	     masterX_0_ifc_fifo_op_cntr_r - 2'd1 ;
  assign masterX_1_descriptor_262_BIT_109_263_AND_NOT_m_ETC___d1567 =
	     { masterX_1_descriptor[109] &&
	       masterX_1_descriptor[108:107] != 2'd0,
	       masterX_1_descriptor[109] ?
		 IF_masterX_1_descriptor_262_BITS_24_TO_23_277__ETC___d1502 :
		 3'd0,
	       IF_masterX_1_descriptor_262_BIT_109_263_THEN_I_ETC___d1566 } ;
  assign masterX_1_ifc_fifo_op_cntr_r_01_MINUS_1___d917 =
	     masterX_1_ifc_fifo_op_cntr_r - 2'd1 ;
  assign mem_ff_reqs_rvport1__read_BITS_104_TO_73_MINU_ETC__q17 =
	     mem_ff_reqs_rv$port1__read[104:73] - 32'h80000000 ;
  assign new_value_data__h9224 =
	     (!ahb_bus_hmaster_addr[1] || !ahb_bus_hmaster_addr[0]) ?
	       rdata__h115929 :
	       ((ahb_bus_hmaster_addr[1] && ahb_bus_hmaster_addr[0]) ?
		  rdata__h115929 :
		  rdata__h116376) ;
  assign next_addr__h22814 =
	     (masterX_0_descriptor[26:25] == 2'd1) ?
	       addr___1__h22882 :
	       addr__h22811 ;
  assign next_addr__h53695 =
	     (masterX_1_fifo_rx_rv[26:25] == 2'd1) ?
	       addr___1__h53766 :
	       addr__h53692 ;
  assign next_addr__h66813 =
	     (masterX_1_descriptor[26:25] == 2'd1) ?
	       addr___1__h66881 :
	       addr__h66810 ;
  assign next_addr__h9671 =
	     (masterX_0_fifo_rx_rv$port1__read[26:25] == 2'd1) ?
	       addr___1__h9747 :
	       addr__h9668 ;
  assign rdata__h115929 =
	     ahb_bus_s_map_data_0[2] ?
	       CASE_ahb_bus_s_map_data_0_BITS_1_TO_0_0_0x567__ETC__q10 :
	       32'h00000567 ;
  assign rdata__h116376 =
	     ahb_bus_s_map_data_1[2] ?
	       CASE_ahb_bus_s_map_data_1_BITS_1_TO_0_0_0x567__ETC__q11 :
	       32'h00000567 ;
  assign remaining__h107015 =
	     (SEL_ARR_masterX_0_ifc_request_reg_02_BITS_69_T_ETC___d1943 ==
	      2'd0) ?
	       5'd0 :
	       CASE_SEL_ARR_masterX_0_ifc_request_reg_02_BITS_ETC__q3 - 5'd1 ;
  assign remaining__h107089 = ahb_bus_monitor_remaining_reg - 5'd1 ;
  assign rg_xi_319_ULT_32___d2320 = rg_xi < 6'd32 ;
  assign rtc_timeRegHi_8_CONCAT_rtc_timeRegLo_9_0_PLUS_1___d41 =
	     timeValue__h2537 + 64'd1 ;
  assign timeValue__h2537 = { rtc_timeRegHi, rtc_timeRegLo } ;
  assign total__h22880 = log_size__h22878 + log_length__h22879 ;
  assign total__h53764 = log_size__h53762 + log_length__h53763 ;
  assign total__h66879 = log_size__h66877 + log_length__h66878 ;
  assign total__h9745 = log_size__h9743 + log_length__h9744 ;
  assign v__h108103 = { 1'd0, 1'b0 /* unspecified value */  } ;
  assign v_data__h4099 =
	     config_memory_ff_reqs_rv$port1__read[109] ?
	       32'd0 :
	       config_memory_memory$DO ;
  assign v_data__h5744 =
	     mem_ff_reqs_rv$port1__read[109] ? 32'd0 : mem_memory$DO ;
  assign value__h15094 =
	     (!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[0] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[1] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[2] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[3] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[4] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[5] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[6] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[7] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[8] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[9] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[10] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[11] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[12] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[13] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[14] &&
	      !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[15]) ?
	       ((!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[16] &&
		 !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[17] &&
		 !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[18] &&
		 !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[19] &&
		 !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[20] &&
		 !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[21] &&
		 !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[22] &&
		 !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[23]) ?
		  ((!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[24] &&
		    !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[25] &&
		    !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[26] &&
		    !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[27]) ?
		     ((!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[28] &&
		       !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[29]) ?
			(_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[30] ?
			   5'd30 :
			   5'd31) :
			(_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[28] ?
			   5'd28 :
			   5'd29)) :
		     ((!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[24] &&
		       !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[25]) ?
			(_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[26] ?
			   5'd26 :
			   5'd27) :
			(_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[24] ?
			   5'd24 :
			   5'd25))) :
		  ((!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[16] &&
		    !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[17] &&
		    !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[18] &&
		    !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[19]) ?
		     ((!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[20] &&
		       !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[21]) ?
			(_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[22] ?
			   5'd22 :
			   5'd23) :
			(_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[20] ?
			   5'd20 :
			   5'd21)) :
		     ((!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[16] &&
		       !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[17]) ?
			(_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[18] ?
			   5'd18 :
			   5'd19) :
			(_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[16] ?
			   5'd16 :
			   5'd17)))) :
	       ((!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[0] &&
		 !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[1] &&
		 !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[2] &&
		 !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[3] &&
		 !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[4] &&
		 !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[5] &&
		 !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[6] &&
		 !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[7]) ?
		  ((!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[8] &&
		    !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[9] &&
		    !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[10] &&
		    !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[11]) ?
		     ((!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[12] &&
		       !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[13]) ?
			(_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[14] ?
			   5'd14 :
			   5'd15) :
			(_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[12] ?
			   5'd12 :
			   5'd13)) :
		     ((!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[8] &&
		       !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[9]) ?
			(_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[10] ?
			   5'd10 :
			   5'd11) :
			(_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[8] ?
			   5'd8 :
			   5'd9))) :
		  ((!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[0] &&
		    !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[1] &&
		    !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[2] &&
		    !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[3]) ?
		     ((!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[4] &&
		       !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[5]) ?
			(_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[6] ?
			   5'd6 :
			   5'd7) :
			(_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[4] ?
			   5'd4 :
			   5'd5)) :
		     ((!_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[0] &&
		       !_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[1]) ?
			(_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[2] ?
			   5'd2 :
			   5'd3) :
			(_0_CONCAT_masterX_0_fifo_rx_rv_port1__read__12__ETC___d248[0] ?
			   5'd0 :
			   5'd1)))) ;
  assign value__h21006 =
	     (!masterX_0_fifo_rx_rv$port1__read[31] &&
	      !masterX_0_fifo_rx_rv$port1__read[32] &&
	      !masterX_0_fifo_rx_rv$port1__read[33] &&
	      !masterX_0_fifo_rx_rv$port1__read[34] &&
	      !masterX_0_fifo_rx_rv$port1__read[35] &&
	      !masterX_0_fifo_rx_rv$port1__read[36] &&
	      !masterX_0_fifo_rx_rv$port1__read[37] &&
	      !masterX_0_fifo_rx_rv$port1__read[38]) ?
	       (masterX_0_fifo_rx_rv$port1__read[39] ? 5'd8 : 5'd9) :
	       ((!masterX_0_fifo_rx_rv$port1__read[31] &&
		 !masterX_0_fifo_rx_rv$port1__read[32] &&
		 !masterX_0_fifo_rx_rv$port1__read[33] &&
		 !masterX_0_fifo_rx_rv$port1__read[34]) ?
		  ((!masterX_0_fifo_rx_rv$port1__read[35] &&
		    !masterX_0_fifo_rx_rv$port1__read[36]) ?
		     (masterX_0_fifo_rx_rv$port1__read[37] ? 5'd6 : 5'd7) :
		     (masterX_0_fifo_rx_rv$port1__read[35] ? 5'd4 : 5'd5)) :
		  ((!masterX_0_fifo_rx_rv$port1__read[31] &&
		    !masterX_0_fifo_rx_rv$port1__read[32]) ?
		     (masterX_0_fifo_rx_rv$port1__read[33] ? 5'd2 : 5'd3) :
		     (masterX_0_fifo_rx_rv$port1__read[31] ? 5'd0 : 5'd1))) ;
  assign value__h22903 =
	     (masterX_0_descriptor[26:25] == 2'd2) ?
	       3'd0 :
	       { 1'd0, masterX_0_descriptor[24:23] } + 3'd1 ;
  assign value__h28227 =
	     (!_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[0] &&
	      !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[1] &&
	      !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[2] &&
	      !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[3] &&
	      !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[4] &&
	      !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[5] &&
	      !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[6] &&
	      !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[7] &&
	      !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[8] &&
	      !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[9] &&
	      !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[10] &&
	      !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[11] &&
	      !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[12] &&
	      !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[13] &&
	      !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[14] &&
	      !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[15]) ?
	       ((!_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[16] &&
		 !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[17] &&
		 !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[18] &&
		 !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[19] &&
		 !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[20] &&
		 !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[21] &&
		 !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[22] &&
		 !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[23]) ?
		  ((!_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[24] &&
		    !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[25] &&
		    !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[26] &&
		    !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[27]) ?
		     ((!_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[28] &&
		       !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[29]) ?
			(_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[30] ?
			   5'd30 :
			   5'd31) :
			(_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[28] ?
			   5'd28 :
			   5'd29)) :
		     ((!_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[24] &&
		       !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[25]) ?
			(_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[26] ?
			   5'd26 :
			   5'd27) :
			(_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[24] ?
			   5'd24 :
			   5'd25))) :
		  ((!_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[16] &&
		    !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[17] &&
		    !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[18] &&
		    !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[19]) ?
		     ((!_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[20] &&
		       !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[21]) ?
			(_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[22] ?
			   5'd22 :
			   5'd23) :
			(_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[20] ?
			   5'd20 :
			   5'd21)) :
		     ((!_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[16] &&
		       !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[17]) ?
			(_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[18] ?
			   5'd18 :
			   5'd19) :
			(_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[16] ?
			   5'd16 :
			   5'd17)))) :
	       ((!_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[0] &&
		 !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[1] &&
		 !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[2] &&
		 !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[3] &&
		 !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[4] &&
		 !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[5] &&
		 !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[6] &&
		 !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[7]) ?
		  ((!_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[8] &&
		    !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[9] &&
		    !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[10] &&
		    !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[11]) ?
		     ((!_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[12] &&
		       !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[13]) ?
			(_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[14] ?
			   5'd14 :
			   5'd15) :
			(_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[12] ?
			   5'd12 :
			   5'd13)) :
		     ((!_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[8] &&
		       !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[9]) ?
			(_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[10] ?
			   5'd10 :
			   5'd11) :
			(_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[8] ?
			   5'd8 :
			   5'd9))) :
		  ((!_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[0] &&
		    !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[1] &&
		    !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[2] &&
		    !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[3]) ?
		     ((!_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[4] &&
		       !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[5]) ?
			(_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[6] ?
			   5'd6 :
			   5'd7) :
			(_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[4] ?
			   5'd4 :
			   5'd5)) :
		     ((!_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[0] &&
		       !_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[1]) ?
			(_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[2] ?
			   5'd2 :
			   5'd3) :
			(_0_CONCAT_masterX_0_descriptor_25_BITS_24_TO_23_ETC___d547[0] ?
			   5'd0 :
			   5'd1)))) ;
  assign value__h34138 =
	     (!masterX_0_descriptor[31] && !masterX_0_descriptor[32] &&
	      !masterX_0_descriptor[33] &&
	      !masterX_0_descriptor[34] &&
	      !masterX_0_descriptor[35] &&
	      !masterX_0_descriptor[36] &&
	      !masterX_0_descriptor[37] &&
	      !masterX_0_descriptor[38]) ?
	       (masterX_0_descriptor[39] ? 5'd8 : 5'd9) :
	       ((!masterX_0_descriptor[31] && !masterX_0_descriptor[32] &&
		 !masterX_0_descriptor[33] &&
		 !masterX_0_descriptor[34]) ?
		  ((!masterX_0_descriptor[35] && !masterX_0_descriptor[36]) ?
		     (masterX_0_descriptor[37] ? 5'd6 : 5'd7) :
		     (masterX_0_descriptor[35] ? 5'd4 : 5'd5)) :
		  ((!masterX_0_descriptor[31] && !masterX_0_descriptor[32]) ?
		     (masterX_0_descriptor[33] ? 5'd2 : 5'd3) :
		     (masterX_0_descriptor[31] ? 5'd0 : 5'd1))) ;
  assign value__h53788 =
	     (masterX_1_fifo_rx_rv[26:25] == 2'd2) ?
	       3'd0 :
	       { 1'd0, masterX_1_fifo_rx_rv[24:23] } + 3'd1 ;
  assign value__h59113 =
	     (!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[0] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[1] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[2] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[3] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[4] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[5] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[6] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[7] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[8] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[9] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[10] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[11] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[12] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[13] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[14] &&
	      !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[15]) ?
	       ((!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[16] &&
		 !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[17] &&
		 !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[18] &&
		 !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[19] &&
		 !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[20] &&
		 !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[21] &&
		 !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[22] &&
		 !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[23]) ?
		  ((!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[24] &&
		    !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[25] &&
		    !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[26] &&
		    !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[27]) ?
		     ((!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[28] &&
		       !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[29]) ?
			(_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[30] ?
			   5'd30 :
			   5'd31) :
			(_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[28] ?
			   5'd28 :
			   5'd29)) :
		     ((!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[24] &&
		       !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[25]) ?
			(_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[26] ?
			   5'd26 :
			   5'd27) :
			(_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[24] ?
			   5'd24 :
			   5'd25))) :
		  ((!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[16] &&
		    !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[17] &&
		    !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[18] &&
		    !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[19]) ?
		     ((!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[20] &&
		       !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[21]) ?
			(_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[22] ?
			   5'd22 :
			   5'd23) :
			(_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[20] ?
			   5'd20 :
			   5'd21)) :
		     ((!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[16] &&
		       !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[17]) ?
			(_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[18] ?
			   5'd18 :
			   5'd19) :
			(_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[16] ?
			   5'd16 :
			   5'd17)))) :
	       ((!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[0] &&
		 !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[1] &&
		 !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[2] &&
		 !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[3] &&
		 !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[4] &&
		 !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[5] &&
		 !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[6] &&
		 !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[7]) ?
		  ((!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[8] &&
		    !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[9] &&
		    !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[10] &&
		    !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[11]) ?
		     ((!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[12] &&
		       !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[13]) ?
			(_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[14] ?
			   5'd14 :
			   5'd15) :
			(_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[12] ?
			   5'd12 :
			   5'd13)) :
		     ((!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[8] &&
		       !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[9]) ?
			(_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[10] ?
			   5'd10 :
			   5'd11) :
			(_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[8] ?
			   5'd8 :
			   5'd9))) :
		  ((!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[0] &&
		    !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[1] &&
		    !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[2] &&
		    !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[3]) ?
		     ((!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[4] &&
		       !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[5]) ?
			(_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[6] ?
			   5'd6 :
			   5'd7) :
			(_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[4] ?
			   5'd4 :
			   5'd5)) :
		     ((!_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[0] &&
		       !_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[1]) ?
			(_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[2] ?
			   5'd2 :
			   5'd3) :
			(_0_CONCAT_masterX_1_fifo_rx_rv_port1__read__49__ETC___d985[0] ?
			   5'd0 :
			   5'd1)))) ;
  assign value__h65025 =
	     (!masterX_1_fifo_rx_rv[31] && !masterX_1_fifo_rx_rv[32] &&
	      !masterX_1_fifo_rx_rv[33] &&
	      !masterX_1_fifo_rx_rv[34] &&
	      !masterX_1_fifo_rx_rv[35] &&
	      !masterX_1_fifo_rx_rv[36] &&
	      !masterX_1_fifo_rx_rv[37] &&
	      !masterX_1_fifo_rx_rv[38]) ?
	       (masterX_1_fifo_rx_rv[39] ? 5'd8 : 5'd9) :
	       ((!masterX_1_fifo_rx_rv[31] && !masterX_1_fifo_rx_rv[32] &&
		 !masterX_1_fifo_rx_rv[33] &&
		 !masterX_1_fifo_rx_rv[34]) ?
		  ((!masterX_1_fifo_rx_rv[35] && !masterX_1_fifo_rx_rv[36]) ?
		     (masterX_1_fifo_rx_rv[37] ? 5'd6 : 5'd7) :
		     (masterX_1_fifo_rx_rv[35] ? 5'd4 : 5'd5)) :
		  ((!masterX_1_fifo_rx_rv[31] && !masterX_1_fifo_rx_rv[32]) ?
		     (masterX_1_fifo_rx_rv[33] ? 5'd2 : 5'd3) :
		     (masterX_1_fifo_rx_rv[31] ? 5'd0 : 5'd1))) ;
  assign value__h66902 =
	     (masterX_1_descriptor[26:25] == 2'd2) ?
	       3'd0 :
	       { 1'd0, masterX_1_descriptor[24:23] } + 3'd1 ;
  assign value__h72226 =
	     (!_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[0] &&
	      !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[1] &&
	      !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[2] &&
	      !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[3] &&
	      !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[4] &&
	      !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[5] &&
	      !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[6] &&
	      !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[7] &&
	      !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[8] &&
	      !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[9] &&
	      !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[10] &&
	      !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[11] &&
	      !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[12] &&
	      !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[13] &&
	      !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[14] &&
	      !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[15]) ?
	       ((!_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[16] &&
		 !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[17] &&
		 !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[18] &&
		 !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[19] &&
		 !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[20] &&
		 !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[21] &&
		 !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[22] &&
		 !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[23]) ?
		  ((!_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[24] &&
		    !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[25] &&
		    !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[26] &&
		    !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[27]) ?
		     ((!_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[28] &&
		       !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[29]) ?
			(_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[30] ?
			   5'd30 :
			   5'd31) :
			(_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[28] ?
			   5'd28 :
			   5'd29)) :
		     ((!_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[24] &&
		       !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[25]) ?
			(_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[26] ?
			   5'd26 :
			   5'd27) :
			(_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[24] ?
			   5'd24 :
			   5'd25))) :
		  ((!_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[16] &&
		    !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[17] &&
		    !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[18] &&
		    !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[19]) ?
		     ((!_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[20] &&
		       !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[21]) ?
			(_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[22] ?
			   5'd22 :
			   5'd23) :
			(_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[20] ?
			   5'd20 :
			   5'd21)) :
		     ((!_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[16] &&
		       !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[17]) ?
			(_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[18] ?
			   5'd18 :
			   5'd19) :
			(_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[16] ?
			   5'd16 :
			   5'd17)))) :
	       ((!_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[0] &&
		 !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[1] &&
		 !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[2] &&
		 !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[3] &&
		 !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[4] &&
		 !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[5] &&
		 !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[6] &&
		 !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[7]) ?
		  ((!_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[8] &&
		    !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[9] &&
		    !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[10] &&
		    !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[11]) ?
		     ((!_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[12] &&
		       !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[13]) ?
			(_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[14] ?
			   5'd14 :
			   5'd15) :
			(_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[12] ?
			   5'd12 :
			   5'd13)) :
		     ((!_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[8] &&
		       !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[9]) ?
			(_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[10] ?
			   5'd10 :
			   5'd11) :
			(_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[8] ?
			   5'd8 :
			   5'd9))) :
		  ((!_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[0] &&
		    !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[1] &&
		    !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[2] &&
		    !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[3]) ?
		     ((!_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[4] &&
		       !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[5]) ?
			(_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[6] ?
			   5'd6 :
			   5'd7) :
			(_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[4] ?
			   5'd4 :
			   5'd5)) :
		     ((!_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[0] &&
		       !_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[1]) ?
			(_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[2] ?
			   5'd2 :
			   5'd3) :
			(_0_CONCAT_masterX_1_descriptor_262_BITS_24_TO_2_ETC___d1284[0] ?
			   5'd0 :
			   5'd1)))) ;
  assign value__h78137 =
	     (!masterX_1_descriptor[31] && !masterX_1_descriptor[32] &&
	      !masterX_1_descriptor[33] &&
	      !masterX_1_descriptor[34] &&
	      !masterX_1_descriptor[35] &&
	      !masterX_1_descriptor[36] &&
	      !masterX_1_descriptor[37] &&
	      !masterX_1_descriptor[38]) ?
	       (masterX_1_descriptor[39] ? 5'd8 : 5'd9) :
	       ((!masterX_1_descriptor[31] && !masterX_1_descriptor[32] &&
		 !masterX_1_descriptor[33] &&
		 !masterX_1_descriptor[34]) ?
		  ((!masterX_1_descriptor[35] && !masterX_1_descriptor[36]) ?
		     (masterX_1_descriptor[37] ? 5'd6 : 5'd7) :
		     (masterX_1_descriptor[35] ? 5'd4 : 5'd5)) :
		  ((!masterX_1_descriptor[31] && !masterX_1_descriptor[32]) ?
		     (masterX_1_descriptor[33] ? 5'd2 : 5'd3) :
		     (masterX_1_descriptor[31] ? 5'd0 : 5'd1))) ;
  assign value__h9769 =
	     (masterX_0_fifo_rx_rv$port1__read[26:25] == 2'd2) ?
	       3'd0 :
	       { 1'd0, masterX_0_fifo_rx_rv$port1__read[24:23] } + 3'd1 ;
  assign writeen__h3631 =
	     CASE_config_memory_ff_reqs_rvport1__read_BITS_ETC__q9 <<
	     config_memory_ff_reqs_rv$port1__read[74:73] ;
  assign writeen__h5276 =
	     CASE_mem_ff_reqs_rvport1__read_BITS_24_TO_23__ETC__q8 <<
	     mem_ff_reqs_rv$port1__read[74:73] ;
  assign x__h114095 =
	     (SEL_ARR_masterX_0_ifc_request_reg_02_BITS_69_T_ETC___d1943 ==
	      2'd0) ?
	       SEL_ARR_masterX_0_ifc_request_reg_02_BITS_69_T_ETC___d1943 :
	       ((addr__h114118 < 32'h80000000) ?
		  ((addr__h114118 < 32'h40000000 ||
		    addr__h114118 > 32'h400000FF) ?
		     ((addr__h114118 >= 32'h0000100C &&
		       addr__h114118 <= 32'h0000FFFF) ?
			2'd3 :
			2'd0) :
		     2'd2) :
		  2'd1) ;
  assign x__h22894 = addr__h22811 & mask__h22881 ;
  assign x__h22902 = { 29'd0, value__h22903 } ;
  assign x__h4224 =
	     config_memory_ff_reqs_rv$port1__read[109] ?
	       4'd0 :
	       config_memory_ff_reqs_rv$port1__read[7:4] ;
  assign x__h53778 = addr__h53692 & mask__h53765 ;
  assign x__h53787 = { 29'd0, value__h53788 } ;
  assign x__h5869 =
	     mem_ff_reqs_rv$port1__read[109] ?
	       4'd0 :
	       mem_ff_reqs_rv$port1__read[7:4] ;
  assign x__h66893 = addr__h66810 & mask__h66880 ;
  assign x__h66901 = { 29'd0, value__h66902 } ;
  assign x__h9759 = addr__h9668 & mask__h9746 ;
  assign x__h9768 = { 29'd0, value__h9769 } ;
  assign x_bus_hRDATA__h110845 =
	     MUX_slave_mem_data_ctrl_reg$write_1__SEL_1 ?
	       slave_mem_data_ifc_response_wire$wget[33:2] :
	       32'h00000123 ;
  assign x_bus_hRDATA__h110857 =
	     MUX_slave_rtc_ctrl_reg$write_1__SEL_1 ?
	       slave_rtc_ifc_response_wire$wget[33:2] :
	       32'h00000123 ;
  assign x_bus_hRDATA__h110869 =
	     MUX_slave_mem_config_ctrl_reg$write_1__SEL_1 ?
	       slave_mem_config_ifc_response_wire$wget[33:2] :
	       32'h00000123 ;
  assign x_request__read_ctrl_addr__h102587 =
	     x_request__read_ctrl_addr__h96942 ;
  assign x_request__read_ctrl_addr__h99769 =
	     x_request__read_ctrl_addr__h96942 ;
  assign x_request__read_ctrl_prot__h102586 =
	     x_request__read_ctrl_prot__h96941 ;
  assign x_request__read_ctrl_prot__h99768 =
	     x_request__read_ctrl_prot__h96941 ;
  assign y__h21820 = ~mask__h9746 ;
  assign y__h22895 = masterX_0_descriptor[104:73] & y__h34952 ;
  assign y__h34952 = ~mask__h22881 ;
  assign y__h53779 = masterX_1_fifo_rx_rv[104:73] & y__h65839 ;
  assign y__h65839 = ~mask__h53765 ;
  assign y__h66894 = masterX_1_descriptor[104:73] & y__h78951 ;
  assign y__h78951 = ~mask__h66880 ;
  assign y__h9760 = masterX_0_fifo_rx_rv$port1__read[104:73] & y__h21820 ;
  always@(ahb_bus_hmaster_addr or
	  masterX_0_ifc_request_reg or masterX_1_ifc_request_reg)
  begin
    case (ahb_bus_hmaster_addr[1] && ahb_bus_hmaster_addr[0])
      1'd0:
	  x_request__read_ctrl_prot__h96941 =
	      masterX_0_ifc_request_reg[67:64];
      1'd1:
	  x_request__read_ctrl_prot__h96941 =
	      masterX_1_ifc_request_reg[67:64];
    endcase
  end
  always@(ahb_bus_hmaster_addr or
	  masterX_0_ifc_request_reg or masterX_1_ifc_request_reg)
  begin
    case (ahb_bus_hmaster_addr[1] && ahb_bus_hmaster_addr[0])
      1'd0:
	  x_request__read_ctrl_addr__h96942 =
	      masterX_0_ifc_request_reg[63:32];
      1'd1:
	  x_request__read_ctrl_addr__h96942 =
	      masterX_1_ifc_request_reg[63:32];
    endcase
  end
  always@(ahb_bus_hmaster_addr or
	  masterX_0_ifc_request_reg or masterX_1_ifc_request_reg)
  begin
    case (ahb_bus_hmaster_addr[1] && ahb_bus_hmaster_addr[0])
      1'd0: x_fabric_bus_hWDATA__h114104 = masterX_0_ifc_request_reg[31:0];
      1'd1: x_fabric_bus_hWDATA__h114104 = masterX_1_ifc_request_reg[31:0];
    endcase
  end
  always@(slave_mem_data_ctrl_reg)
  begin
    case (slave_mem_data_ctrl_reg[43:41])
      3'd0: value__h97435 = 8'd0;
      3'd1: value__h97435 = 8'd1;
      3'd2: value__h97435 = 8'd3;
      3'd3: value__h97435 = 8'd7;
      3'd4: value__h97435 = 8'd15;
      3'd5: value__h97435 = 8'd31;
      3'd6: value__h97435 = 8'd63;
      3'd7: value__h97435 = 8'd127;
    endcase
  end
  always@(slave_rtc_ctrl_reg)
  begin
    case (slave_rtc_ctrl_reg[43:41])
      3'd0: value__h100256 = 8'd0;
      3'd1: value__h100256 = 8'd1;
      3'd2: value__h100256 = 8'd3;
      3'd3: value__h100256 = 8'd7;
      3'd4: value__h100256 = 8'd15;
      3'd5: value__h100256 = 8'd31;
      3'd6: value__h100256 = 8'd63;
      3'd7: value__h100256 = 8'd127;
    endcase
  end
  always@(slave_mem_config_ctrl_reg)
  begin
    case (slave_mem_config_ctrl_reg[43:41])
      3'd0: value__h103074 = 8'd0;
      3'd1: value__h103074 = 8'd1;
      3'd2: value__h103074 = 8'd3;
      3'd3: value__h103074 = 8'd7;
      3'd4: value__h103074 = 8'd15;
      3'd5: value__h103074 = 8'd31;
      3'd6: value__h103074 = 8'd63;
      3'd7: value__h103074 = 8'd127;
    endcase
  end
  always@(masterX_0_descriptor)
  begin
    case (masterX_0_descriptor[24:23])
      2'd0, 2'd2:
	  IF_masterX_0_descriptor_25_BITS_24_TO_23_40_EQ_ETC___d765 = 3'd0;
      2'd1: IF_masterX_0_descriptor_25_BITS_24_TO_23_40_EQ_ETC___d765 = 3'd1;
      2'd3: IF_masterX_0_descriptor_25_BITS_24_TO_23_40_EQ_ETC___d765 = 3'd2;
    endcase
  end
  always@(masterX_0_descriptor)
  begin
    case (masterX_0_descriptor[26:25])
      2'd0: CASE_masterX_0_descriptor_BITS_26_TO_25_0_1_1__ETC__q1 = 3'd1;
      2'd1, 2'd2, 2'd3:
	  CASE_masterX_0_descriptor_BITS_26_TO_25_0_1_1__ETC__q1 = 3'd0;
    endcase
  end
  always@(masterX_1_descriptor)
  begin
    case (masterX_1_descriptor[24:23])
      2'd0, 2'd2:
	  IF_masterX_1_descriptor_262_BITS_24_TO_23_277__ETC___d1502 = 3'd0;
      2'd1: IF_masterX_1_descriptor_262_BITS_24_TO_23_277__ETC___d1502 = 3'd1;
      2'd3: IF_masterX_1_descriptor_262_BITS_24_TO_23_277__ETC___d1502 = 3'd2;
    endcase
  end
  always@(masterX_1_descriptor)
  begin
    case (masterX_1_descriptor[26:25])
      2'd0: CASE_masterX_1_descriptor_BITS_26_TO_25_0_1_1__ETC__q2 = 3'd1;
      2'd1, 2'd2, 2'd3:
	  CASE_masterX_1_descriptor_BITS_26_TO_25_0_1_1__ETC__q2 = 3'd0;
    endcase
  end
  always@(rtc_pendingReq or
	  rtc_timeRegLo or rtc_timeRegHi or rtc_timeCmpLo or rtc_timeCmpHi)
  begin
    case (rtc_pendingReq[3:0])
      4'h0:
	  IF_rtc_pendingReq_port0__read__879_BITS_3_TO_0_ETC___d1896 =
	      rtc_timeRegLo;
      4'h4:
	  IF_rtc_pendingReq_port0__read__879_BITS_3_TO_0_ETC___d1896 =
	      rtc_timeRegHi;
      4'h8:
	  IF_rtc_pendingReq_port0__read__879_BITS_3_TO_0_ETC___d1896 =
	      rtc_timeCmpLo;
      4'hC:
	  IF_rtc_pendingReq_port0__read__879_BITS_3_TO_0_ETC___d1896 =
	      rtc_timeCmpHi;
      default: IF_rtc_pendingReq_port0__read__879_BITS_3_TO_0_ETC___d1896 =
		   32'd0;
    endcase
  end
  always@(ahb_bus_hmaster_addr or
	  masterX_0_ifc_request_reg or masterX_1_ifc_request_reg)
  begin
    case (ahb_bus_hmaster_addr[1] && ahb_bus_hmaster_addr[0])
      1'd0:
	  SEL_ARR_masterX_0_ifc_request_reg_02_BITS_72_T_ETC___d1947 =
	      masterX_0_ifc_request_reg[72:70];
      1'd1:
	  SEL_ARR_masterX_0_ifc_request_reg_02_BITS_72_T_ETC___d1947 =
	      masterX_1_ifc_request_reg[72:70];
    endcase
  end
  always@(ahb_bus_hmaster_addr or
	  masterX_0_ifc_request_reg or masterX_1_ifc_request_reg)
  begin
    case (ahb_bus_hmaster_addr[1] && ahb_bus_hmaster_addr[0])
      1'd0:
	  SEL_ARR_masterX_0_ifc_request_reg_02_BITS_69_T_ETC___d1943 =
	      masterX_0_ifc_request_reg[69:68];
      1'd1:
	  SEL_ARR_masterX_0_ifc_request_reg_02_BITS_69_T_ETC___d1943 =
	      masterX_1_ifc_request_reg[69:68];
    endcase
  end
  always@(SEL_ARR_masterX_0_ifc_request_reg_02_BITS_72_T_ETC___d1947)
  begin
    case (SEL_ARR_masterX_0_ifc_request_reg_02_BITS_72_T_ETC___d1947)
      3'd0, 3'd1:
	  CASE_SEL_ARR_masterX_0_ifc_request_reg_02_BITS_ETC__q3 = 5'd1;
      3'd2, 3'd3:
	  CASE_SEL_ARR_masterX_0_ifc_request_reg_02_BITS_ETC__q3 = 5'd4;
      3'd4, 3'd5:
	  CASE_SEL_ARR_masterX_0_ifc_request_reg_02_BITS_ETC__q3 = 5'd8;
      3'd6, 3'd7:
	  CASE_SEL_ARR_masterX_0_ifc_request_reg_02_BITS_ETC__q3 = 5'd16;
    endcase
  end
  always@(m_num_data__h106327 or
	  masterX_0_ifc_request_reg or masterX_1_ifc_request_reg)
  begin
    case (m_num_data__h106327)
      1'd0:
	  SEL_ARR_masterX_0_ifc_request_reg_02_BITS_31_T_ETC___d2159 =
	      masterX_0_ifc_request_reg[31:0];
      1'd1:
	  SEL_ARR_masterX_0_ifc_request_reg_02_BITS_31_T_ETC___d2159 =
	      masterX_1_ifc_request_reg[31:0];
    endcase
  end
  always@(masterX_1_fifo_rx_rv)
  begin
    case (masterX_1_fifo_rx_rv[24:23])
      2'd0, 2'd2:
	  CASE_masterX_1_fifo_rx_rv_BITS_24_TO_23_0_0_1__ETC__q4 = 3'd0;
      2'd1: CASE_masterX_1_fifo_rx_rv_BITS_24_TO_23_0_0_1__ETC__q4 = 3'd1;
      2'd3: CASE_masterX_1_fifo_rx_rv_BITS_24_TO_23_0_0_1__ETC__q4 = 3'd2;
    endcase
  end
  always@(masterX_1_fifo_rx_rv)
  begin
    case (masterX_1_fifo_rx_rv[26:25])
      2'd0: CASE_masterX_1_fifo_rx_rv_BITS_26_TO_25_0_1_1__ETC__q5 = 3'd1;
      2'd1, 2'd2, 2'd3:
	  CASE_masterX_1_fifo_rx_rv_BITS_26_TO_25_0_1_1__ETC__q5 = 3'd0;
    endcase
  end
  always@(ahb_bus_hmaster_addr or
	  CAN_FIRE_RL_masterX_0_send_request or
	  masterX_0_req_reg or
	  CAN_FIRE_RL_masterX_1_send_request or masterX_1_req_reg)
  begin
    case (ahb_bus_hmaster_addr[1] && ahb_bus_hmaster_addr[0])
      1'd0:
	  SEL_ARR_NOT_masterX_0_req_wire_whas__928_950_O_ETC___d1961 =
	      !CAN_FIRE_RL_masterX_0_send_request && !masterX_0_req_reg;
      1'd1:
	  SEL_ARR_NOT_masterX_0_req_wire_whas__928_950_O_ETC___d1961 =
	      !CAN_FIRE_RL_masterX_1_send_request && !masterX_1_req_reg;
    endcase
  end
  always@(ahb_bus_hmaster_addr or
	  CAN_FIRE_RL_masterX_0_send_request or
	  masterX_0_req_reg or
	  CAN_FIRE_RL_masterX_1_send_request or masterX_1_req_reg)
  begin
    case (ahb_bus_hmaster_addr[1] && ahb_bus_hmaster_addr[0])
      1'd0:
	  SEL_ARR_masterX_0_req_wire_whas__928_AND_maste_ETC___d1941 =
	      CAN_FIRE_RL_masterX_0_send_request || masterX_0_req_reg;
      1'd1:
	  SEL_ARR_masterX_0_req_wire_whas__928_AND_maste_ETC___d1941 =
	      CAN_FIRE_RL_masterX_1_send_request || masterX_1_req_reg;
    endcase
  end
  always@(masterX_0_fifo_rx_rv$port1__read)
  begin
    case (masterX_0_fifo_rx_rv$port1__read[24:23])
      2'd0, 2'd2:
	  CASE_masterX_0_fifo_rx_rvport1__read_BITS_24__ETC__q6 = 3'd0;
      2'd1: CASE_masterX_0_fifo_rx_rvport1__read_BITS_24__ETC__q6 = 3'd1;
      2'd3: CASE_masterX_0_fifo_rx_rvport1__read_BITS_24__ETC__q6 = 3'd2;
    endcase
  end
  always@(masterX_0_fifo_rx_rv$port1__read)
  begin
    case (masterX_0_fifo_rx_rv$port1__read[26:25])
      2'd0: CASE_masterX_0_fifo_rx_rvport1__read_BITS_26__ETC__q7 = 3'd1;
      2'd1, 2'd2, 2'd3:
	  CASE_masterX_0_fifo_rx_rvport1__read_BITS_26__ETC__q7 = 3'd0;
    endcase
  end
  always@(mem_ff_reqs_rv$port1__read)
  begin
    case (mem_ff_reqs_rv$port1__read[24:23])
      2'd0: CASE_mem_ff_reqs_rvport1__read_BITS_24_TO_23__ETC__q8 = 4'b0001;
      2'd1: CASE_mem_ff_reqs_rvport1__read_BITS_24_TO_23__ETC__q8 = 4'b0011;
      2'd2: CASE_mem_ff_reqs_rvport1__read_BITS_24_TO_23__ETC__q8 = 4'b0;
      2'd3: CASE_mem_ff_reqs_rvport1__read_BITS_24_TO_23__ETC__q8 = 4'b1111;
    endcase
  end
  always@(config_memory_ff_reqs_rv$port1__read)
  begin
    case (config_memory_ff_reqs_rv$port1__read[24:23])
      2'd0: CASE_config_memory_ff_reqs_rvport1__read_BITS_ETC__q9 = 4'b0001;
      2'd1: CASE_config_memory_ff_reqs_rvport1__read_BITS_ETC__q9 = 4'b0011;
      2'd2: CASE_config_memory_ff_reqs_rvport1__read_BITS_ETC__q9 = 4'b0;
      2'd3: CASE_config_memory_ff_reqs_rvport1__read_BITS_ETC__q9 = 4'b1111;
    endcase
  end
  always@(ahb_bus_s_num_data or
	  ahb_bus_dummy_transfer_reg or
	  ahb_bus_dummy_select_reg or
	  MUX_slave_mem_data_ctrl_reg$write_1__SEL_1 or
	  MUX_slave_rtc_ctrl_reg$write_1__SEL_1 or
	  MUX_slave_mem_config_ctrl_reg$write_1__SEL_1)
  begin
    case (ahb_bus_s_num_data)
      2'd0:
	  SEL_ARR_ahb_bus_dummy_transfer_reg_916_EQ_0_91_ETC___d2064 =
	      ahb_bus_dummy_transfer_reg == 2'd0 ||
	      ahb_bus_dummy_transfer_reg == 2'd1 ||
	      !ahb_bus_dummy_select_reg;
      2'd1:
	  SEL_ARR_ahb_bus_dummy_transfer_reg_916_EQ_0_91_ETC___d2064 =
	      MUX_slave_mem_data_ctrl_reg$write_1__SEL_1;
      2'd2:
	  SEL_ARR_ahb_bus_dummy_transfer_reg_916_EQ_0_91_ETC___d2064 =
	      MUX_slave_rtc_ctrl_reg$write_1__SEL_1;
      2'd3:
	  SEL_ARR_ahb_bus_dummy_transfer_reg_916_EQ_0_91_ETC___d2064 =
	      MUX_slave_mem_config_ctrl_reg$write_1__SEL_1;
    endcase
  end
  always@(ahb_bus_s_map_data_0 or
	  ahb_bus_dummy_transfer_reg or
	  ahb_bus_dummy_select_reg or
	  MUX_slave_mem_data_ctrl_reg$write_1__SEL_1 or
	  MUX_slave_rtc_ctrl_reg$write_1__SEL_1 or
	  MUX_slave_mem_config_ctrl_reg$write_1__SEL_1)
  begin
    case (ahb_bus_s_map_data_0[1:0])
      2'd0:
	  SEL_ARR_ahb_bus_dummy_transfer_reg_916_EQ_0_91_ETC___d2108 =
	      ahb_bus_dummy_transfer_reg == 2'd0 ||
	      ahb_bus_dummy_transfer_reg == 2'd1 ||
	      !ahb_bus_dummy_select_reg;
      2'd1:
	  SEL_ARR_ahb_bus_dummy_transfer_reg_916_EQ_0_91_ETC___d2108 =
	      MUX_slave_mem_data_ctrl_reg$write_1__SEL_1;
      2'd2:
	  SEL_ARR_ahb_bus_dummy_transfer_reg_916_EQ_0_91_ETC___d2108 =
	      MUX_slave_rtc_ctrl_reg$write_1__SEL_1;
      2'd3:
	  SEL_ARR_ahb_bus_dummy_transfer_reg_916_EQ_0_91_ETC___d2108 =
	      MUX_slave_mem_config_ctrl_reg$write_1__SEL_1;
    endcase
  end
  always@(ahb_bus_s_map_data_1 or
	  ahb_bus_dummy_transfer_reg or
	  ahb_bus_dummy_select_reg or
	  MUX_slave_mem_data_ctrl_reg$write_1__SEL_1 or
	  MUX_slave_rtc_ctrl_reg$write_1__SEL_1 or
	  MUX_slave_mem_config_ctrl_reg$write_1__SEL_1)
  begin
    case (ahb_bus_s_map_data_1[1:0])
      2'd0:
	  SEL_ARR_ahb_bus_dummy_transfer_reg_916_EQ_0_91_ETC___d2118 =
	      ahb_bus_dummy_transfer_reg == 2'd0 ||
	      ahb_bus_dummy_transfer_reg == 2'd1 ||
	      !ahb_bus_dummy_select_reg;
      2'd1:
	  SEL_ARR_ahb_bus_dummy_transfer_reg_916_EQ_0_91_ETC___d2118 =
	      MUX_slave_mem_data_ctrl_reg$write_1__SEL_1;
      2'd2:
	  SEL_ARR_ahb_bus_dummy_transfer_reg_916_EQ_0_91_ETC___d2118 =
	      MUX_slave_rtc_ctrl_reg$write_1__SEL_1;
      2'd3:
	  SEL_ARR_ahb_bus_dummy_transfer_reg_916_EQ_0_91_ETC___d2118 =
	      MUX_slave_mem_config_ctrl_reg$write_1__SEL_1;
    endcase
  end
  always@(ahb_bus_s_map_data_0 or
	  x_bus_hRDATA__h110845 or
	  x_bus_hRDATA__h110857 or x_bus_hRDATA__h110869)
  begin
    case (ahb_bus_s_map_data_0[1:0])
      2'd0:
	  CASE_ahb_bus_s_map_data_0_BITS_1_TO_0_0_0x567__ETC__q10 =
	      32'h00000567;
      2'd1:
	  CASE_ahb_bus_s_map_data_0_BITS_1_TO_0_0_0x567__ETC__q10 =
	      x_bus_hRDATA__h110845;
      2'd2:
	  CASE_ahb_bus_s_map_data_0_BITS_1_TO_0_0_0x567__ETC__q10 =
	      x_bus_hRDATA__h110857;
      2'd3:
	  CASE_ahb_bus_s_map_data_0_BITS_1_TO_0_0_0x567__ETC__q10 =
	      x_bus_hRDATA__h110869;
    endcase
  end
  always@(ahb_bus_s_map_data_1 or
	  x_bus_hRDATA__h110845 or
	  x_bus_hRDATA__h110857 or x_bus_hRDATA__h110869)
  begin
    case (ahb_bus_s_map_data_1[1:0])
      2'd0:
	  CASE_ahb_bus_s_map_data_1_BITS_1_TO_0_0_0x567__ETC__q11 =
	      32'h00000567;
      2'd1:
	  CASE_ahb_bus_s_map_data_1_BITS_1_TO_0_0_0x567__ETC__q11 =
	      x_bus_hRDATA__h110845;
      2'd2:
	  CASE_ahb_bus_s_map_data_1_BITS_1_TO_0_0_0x567__ETC__q11 =
	      x_bus_hRDATA__h110857;
      2'd3:
	  CASE_ahb_bus_s_map_data_1_BITS_1_TO_0_0_0x567__ETC__q11 =
	      x_bus_hRDATA__h110869;
    endcase
  end
  always@(ahb_bus_s_map_data_0 or
	  IF_slave_mem_data_ifc_response_wire_whas__185__ETC___d2188 or
	  IF_slave_rtc_ifc_response_wire_whas__189_THEN__ETC___d2192 or
	  IF_slave_mem_config_ifc_response_wire_whas__19_ETC___d2196)
  begin
    case (ahb_bus_s_map_data_0[1:0])
      2'd0: CASE_ahb_bus_s_map_data_0_BITS_1_TO_0_0_0_1_IF_ETC__q12 = 2'd0;
      2'd1:
	  CASE_ahb_bus_s_map_data_0_BITS_1_TO_0_0_0_1_IF_ETC__q12 =
	      IF_slave_mem_data_ifc_response_wire_whas__185__ETC___d2188;
      2'd2:
	  CASE_ahb_bus_s_map_data_0_BITS_1_TO_0_0_0_1_IF_ETC__q12 =
	      IF_slave_rtc_ifc_response_wire_whas__189_THEN__ETC___d2192;
      2'd3:
	  CASE_ahb_bus_s_map_data_0_BITS_1_TO_0_0_0_1_IF_ETC__q12 =
	      IF_slave_mem_config_ifc_response_wire_whas__19_ETC___d2196;
    endcase
  end
  always@(ahb_bus_s_map_data_1 or
	  IF_slave_mem_data_ifc_response_wire_whas__185__ETC___d2188 or
	  IF_slave_rtc_ifc_response_wire_whas__189_THEN__ETC___d2192 or
	  IF_slave_mem_config_ifc_response_wire_whas__19_ETC___d2196)
  begin
    case (ahb_bus_s_map_data_1[1:0])
      2'd0: CASE_ahb_bus_s_map_data_1_BITS_1_TO_0_0_0_1_IF_ETC__q13 = 2'd0;
      2'd1:
	  CASE_ahb_bus_s_map_data_1_BITS_1_TO_0_0_0_1_IF_ETC__q13 =
	      IF_slave_mem_data_ifc_response_wire_whas__185__ETC___d2188;
      2'd2:
	  CASE_ahb_bus_s_map_data_1_BITS_1_TO_0_0_0_1_IF_ETC__q13 =
	      IF_slave_rtc_ifc_response_wire_whas__189_THEN__ETC___d2192;
      2'd3:
	  CASE_ahb_bus_s_map_data_1_BITS_1_TO_0_0_0_1_IF_ETC__q13 =
	      IF_slave_mem_config_ifc_response_wire_whas__19_ETC___d2196;
    endcase
  end
  always@(ahb_bus_hmaster_addr or
	  masterX_0_ifc_request_reg or masterX_1_ifc_request_reg)
  begin
    case (ahb_bus_hmaster_addr[1])
      1'd0:
	  CASE_ahb_bus_hmaster_addr_BIT_1_0_masterX_0_if_ETC__q14 =
	      masterX_0_ifc_request_reg[69:68];
      1'd1:
	  CASE_ahb_bus_hmaster_addr_BIT_1_0_masterX_0_if_ETC__q14 =
	      masterX_1_ifc_request_reg[69:68];
    endcase
  end
  always@(SEL_ARR_masterX_0_ifc_request_reg_02_BITS_69_T_ETC___d1943 or
	  ahb_bus_monitor_remaining_reg or
	  remaining__h107015 or remaining__h107089)
  begin
    case (SEL_ARR_masterX_0_ifc_request_reg_02_BITS_69_T_ETC___d1943)
      2'd2:
	  CASE_SEL_ARR_masterX_0_ifc_request_reg_02_BITS_ETC__q15 =
	      remaining__h107015;
      2'd3:
	  CASE_SEL_ARR_masterX_0_ifc_request_reg_02_BITS_ETC__q15 =
	      remaining__h107089;
      default: CASE_SEL_ARR_masterX_0_ifc_request_reg_02_BITS_ETC__q15 =
		   ahb_bus_monitor_remaining_reg;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        ahb_bus_arbiter_dgrant_vector_reg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ahb_bus_arbiter_grant_vector_reg <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ahb_bus_arbiter_hmaster_reg <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 1'b0 /* unspecified value */  };
	ahb_bus_arbiter_priority_vector <= `BSV_ASSIGNMENT_DELAY 2'd1;
	ahb_bus_dummy_select_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ahb_bus_dummy_transfer_reg <= `BSV_ASSIGNMENT_DELAY
	    2'b10 /* unspecified value */ ;
	ahb_bus_dummys_0_select_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ahb_bus_dummys_0_transfer_reg <= `BSV_ASSIGNMENT_DELAY
	    2'b10 /* unspecified value */ ;
	ahb_bus_dummys_1_select_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ahb_bus_dummys_1_transfer_reg <= `BSV_ASSIGNMENT_DELAY
	    2'b10 /* unspecified value */ ;
	ahb_bus_hmaster_addr <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 1'b0 /* unspecified value */  };
	ahb_bus_hmaster_data <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 1'b0 /* unspecified value */  };
	ahb_bus_monitor_hready_prev <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ahb_bus_monitor_remaining_reg <= `BSV_ASSIGNMENT_DELAY 5'd0;
	ahb_bus_monitor_request_prev <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ahb_bus_monitor_started <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ahb_bus_monitor_transfer_prev <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ahb_bus_s_map_data_0 <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 2'b10 /* unspecified value */  };
	ahb_bus_s_map_data_1 <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 2'b10 /* unspecified value */  };
	ahb_bus_s_num_addr_current <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ahb_bus_s_num_data <= `BSV_ASSIGNMENT_DELAY 2'd0;
	config_memory_ff_reqs_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      110'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  };
	config_memory_ff_rsps_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 58'h2AAAAAAAAAAAAAA /* unspecified value */  };
	config_memory_rg_mem_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	masterX_0_count <= `BSV_ASSIGNMENT_DELAY 10'd0;
	masterX_0_data_reg <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 32'hAAAAAAAA /* unspecified value */  };
	masterX_0_descriptor <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      109'h0AAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  };
	masterX_0_fifo_rx_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      110'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  };
	masterX_0_fifo_tx_count <= `BSV_ASSIGNMENT_DELAY 3'd0;
	masterX_0_grant_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	masterX_0_ifc_fifo_op_cntr_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	masterX_0_ifc_fifo_op_q_0 <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 1'b0 /* unspecified value */  };
	masterX_0_ifc_fifo_op_q_1 <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 1'b0 /* unspecified value */  };
	masterX_0_ifc_request_reg <= `BSV_ASSIGNMENT_DELAY 77'd0;
	masterX_0_req_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	masterX_1_count <= `BSV_ASSIGNMENT_DELAY 10'd0;
	masterX_1_data_reg <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 32'hAAAAAAAA /* unspecified value */  };
	masterX_1_descriptor <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      109'h0AAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  };
	masterX_1_fifo_rx_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      110'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  };
	masterX_1_fifo_tx_count <= `BSV_ASSIGNMENT_DELAY 3'd0;
	masterX_1_grant_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	masterX_1_ifc_fifo_op_cntr_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	masterX_1_ifc_fifo_op_q_0 <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 1'b0 /* unspecified value */  };
	masterX_1_ifc_fifo_op_q_1 <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 1'b0 /* unspecified value */  };
	masterX_1_ifc_request_reg <= `BSV_ASSIGNMENT_DELAY 77'd0;
	masterX_1_req_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mem_ff_reqs_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      110'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  };
	mem_ff_rsps_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 58'h2AAAAAAAAAAAAAA /* unspecified value */  };
	mem_rg_mem_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	proc_burst_length <= `BSV_ASSIGNMENT_DELAY 10'd0;
	proc_f_bus_reqs_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      110'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  };
	proc_f_bus_rsps_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 58'h2AAAAAAAAAAAAAA /* unspecified value */  };
	proc_who <= `BSV_ASSIGNMENT_DELAY 2'd2;
	rg_instret <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_prev_instret <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rtc_counter_cycle <= `BSV_ASSIGNMENT_DELAY 6'd0;
	rtc_pendingReq <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 5'b01010 /* unspecified value */  };
	rtc_timeCmpHi <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rtc_timeCmpLo <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rtc_timeRegHi <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rtc_timeRegLo <= `BSV_ASSIGNMENT_DELAY 32'd0;
	running <= `BSV_ASSIGNMENT_DELAY 1'd0;
	slave_mem_config_ctrl_reg <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 45'h0AAAAAAAAAAA /* unspecified value */  };
	slave_mem_config_fifo_op_rv <= `BSV_ASSIGNMENT_DELAY 1'd0;
	slave_mem_config_fifo_rx_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 58'h2AAAAAAAAAAAAAA /* unspecified value */  };
	slave_mem_config_fifo_tx_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      110'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  };
	slave_mem_config_first <= `BSV_ASSIGNMENT_DELAY 1'd0;
	slave_mem_config_start <= `BSV_ASSIGNMENT_DELAY 1'd1;
	slave_mem_data_ctrl_reg <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 45'h0AAAAAAAAAAA /* unspecified value */  };
	slave_mem_data_fifo_op_rv <= `BSV_ASSIGNMENT_DELAY 1'd0;
	slave_mem_data_fifo_rx_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 58'h2AAAAAAAAAAAAAA /* unspecified value */  };
	slave_mem_data_fifo_tx_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      110'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  };
	slave_mem_data_first <= `BSV_ASSIGNMENT_DELAY 1'd0;
	slave_mem_data_start <= `BSV_ASSIGNMENT_DELAY 1'd1;
	slave_rtc_ctrl_reg <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 45'h0AAAAAAAAAAA /* unspecified value */  };
	slave_rtc_fifo_op_rv <= `BSV_ASSIGNMENT_DELAY 1'd0;
	slave_rtc_fifo_rx_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 58'h2AAAAAAAAAAAAAA /* unspecified value */  };
	slave_rtc_fifo_tx_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      110'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  };
	slave_rtc_first <= `BSV_ASSIGNMENT_DELAY 1'd0;
	slave_rtc_start <= `BSV_ASSIGNMENT_DELAY 1'd1;
	start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 5'd0;
      end
    else
      begin
        if (ahb_bus_arbiter_dgrant_vector_reg$EN)
	  ahb_bus_arbiter_dgrant_vector_reg <= `BSV_ASSIGNMENT_DELAY
	      ahb_bus_arbiter_dgrant_vector_reg$D_IN;
	if (ahb_bus_arbiter_grant_vector_reg$EN)
	  ahb_bus_arbiter_grant_vector_reg <= `BSV_ASSIGNMENT_DELAY
	      ahb_bus_arbiter_grant_vector_reg$D_IN;
	if (ahb_bus_arbiter_hmaster_reg$EN)
	  ahb_bus_arbiter_hmaster_reg <= `BSV_ASSIGNMENT_DELAY
	      ahb_bus_arbiter_hmaster_reg$D_IN;
	if (ahb_bus_arbiter_priority_vector$EN)
	  ahb_bus_arbiter_priority_vector <= `BSV_ASSIGNMENT_DELAY
	      ahb_bus_arbiter_priority_vector$D_IN;
	if (ahb_bus_dummy_select_reg$EN)
	  ahb_bus_dummy_select_reg <= `BSV_ASSIGNMENT_DELAY
	      ahb_bus_dummy_select_reg$D_IN;
	if (ahb_bus_dummy_transfer_reg$EN)
	  ahb_bus_dummy_transfer_reg <= `BSV_ASSIGNMENT_DELAY
	      ahb_bus_dummy_transfer_reg$D_IN;
	if (ahb_bus_dummys_0_select_reg$EN)
	  ahb_bus_dummys_0_select_reg <= `BSV_ASSIGNMENT_DELAY
	      ahb_bus_dummys_0_select_reg$D_IN;
	if (ahb_bus_dummys_0_transfer_reg$EN)
	  ahb_bus_dummys_0_transfer_reg <= `BSV_ASSIGNMENT_DELAY
	      ahb_bus_dummys_0_transfer_reg$D_IN;
	if (ahb_bus_dummys_1_select_reg$EN)
	  ahb_bus_dummys_1_select_reg <= `BSV_ASSIGNMENT_DELAY
	      ahb_bus_dummys_1_select_reg$D_IN;
	if (ahb_bus_dummys_1_transfer_reg$EN)
	  ahb_bus_dummys_1_transfer_reg <= `BSV_ASSIGNMENT_DELAY
	      ahb_bus_dummys_1_transfer_reg$D_IN;
	if (ahb_bus_hmaster_addr$EN)
	  ahb_bus_hmaster_addr <= `BSV_ASSIGNMENT_DELAY
	      ahb_bus_hmaster_addr$D_IN;
	if (ahb_bus_hmaster_data$EN)
	  ahb_bus_hmaster_data <= `BSV_ASSIGNMENT_DELAY
	      ahb_bus_hmaster_data$D_IN;
	if (ahb_bus_monitor_hready_prev$EN)
	  ahb_bus_monitor_hready_prev <= `BSV_ASSIGNMENT_DELAY
	      ahb_bus_monitor_hready_prev$D_IN;
	if (ahb_bus_monitor_remaining_reg$EN)
	  ahb_bus_monitor_remaining_reg <= `BSV_ASSIGNMENT_DELAY
	      ahb_bus_monitor_remaining_reg$D_IN;
	if (ahb_bus_monitor_request_prev$EN)
	  ahb_bus_monitor_request_prev <= `BSV_ASSIGNMENT_DELAY
	      ahb_bus_monitor_request_prev$D_IN;
	if (ahb_bus_monitor_started$EN)
	  ahb_bus_monitor_started <= `BSV_ASSIGNMENT_DELAY
	      ahb_bus_monitor_started$D_IN;
	if (ahb_bus_monitor_transfer_prev$EN)
	  ahb_bus_monitor_transfer_prev <= `BSV_ASSIGNMENT_DELAY
	      ahb_bus_monitor_transfer_prev$D_IN;
	if (ahb_bus_s_map_data_0$EN)
	  ahb_bus_s_map_data_0 <= `BSV_ASSIGNMENT_DELAY
	      ahb_bus_s_map_data_0$D_IN;
	if (ahb_bus_s_map_data_1$EN)
	  ahb_bus_s_map_data_1 <= `BSV_ASSIGNMENT_DELAY
	      ahb_bus_s_map_data_1$D_IN;
	if (ahb_bus_s_num_addr_current$EN)
	  ahb_bus_s_num_addr_current <= `BSV_ASSIGNMENT_DELAY
	      ahb_bus_s_num_addr_current$D_IN;
	if (ahb_bus_s_num_data$EN)
	  ahb_bus_s_num_data <= `BSV_ASSIGNMENT_DELAY ahb_bus_s_num_data$D_IN;
	if (config_memory_ff_reqs_rv$EN)
	  config_memory_ff_reqs_rv <= `BSV_ASSIGNMENT_DELAY
	      config_memory_ff_reqs_rv$D_IN;
	if (config_memory_ff_rsps_rv$EN)
	  config_memory_ff_rsps_rv <= `BSV_ASSIGNMENT_DELAY
	      config_memory_ff_rsps_rv$D_IN;
	if (config_memory_rg_mem_state$EN)
	  config_memory_rg_mem_state <= `BSV_ASSIGNMENT_DELAY
	      config_memory_rg_mem_state$D_IN;
	if (masterX_0_count$EN)
	  masterX_0_count <= `BSV_ASSIGNMENT_DELAY masterX_0_count$D_IN;
	if (masterX_0_data_reg$EN)
	  masterX_0_data_reg <= `BSV_ASSIGNMENT_DELAY masterX_0_data_reg$D_IN;
	if (masterX_0_descriptor$EN)
	  masterX_0_descriptor <= `BSV_ASSIGNMENT_DELAY
	      masterX_0_descriptor$D_IN;
	if (masterX_0_fifo_rx_rv$EN)
	  masterX_0_fifo_rx_rv <= `BSV_ASSIGNMENT_DELAY
	      masterX_0_fifo_rx_rv$D_IN;
	if (masterX_0_fifo_tx_count$EN)
	  masterX_0_fifo_tx_count <= `BSV_ASSIGNMENT_DELAY
	      masterX_0_fifo_tx_count$D_IN;
	if (masterX_0_grant_reg$EN)
	  masterX_0_grant_reg <= `BSV_ASSIGNMENT_DELAY
	      masterX_0_grant_reg$D_IN;
	if (masterX_0_ifc_fifo_op_cntr_r$EN)
	  masterX_0_ifc_fifo_op_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      masterX_0_ifc_fifo_op_cntr_r$D_IN;
	if (masterX_0_ifc_fifo_op_q_0$EN)
	  masterX_0_ifc_fifo_op_q_0 <= `BSV_ASSIGNMENT_DELAY
	      masterX_0_ifc_fifo_op_q_0$D_IN;
	if (masterX_0_ifc_fifo_op_q_1$EN)
	  masterX_0_ifc_fifo_op_q_1 <= `BSV_ASSIGNMENT_DELAY
	      masterX_0_ifc_fifo_op_q_1$D_IN;
	if (masterX_0_ifc_request_reg$EN)
	  masterX_0_ifc_request_reg <= `BSV_ASSIGNMENT_DELAY
	      masterX_0_ifc_request_reg$D_IN;
	if (masterX_0_req_reg$EN)
	  masterX_0_req_reg <= `BSV_ASSIGNMENT_DELAY masterX_0_req_reg$D_IN;
	if (masterX_1_count$EN)
	  masterX_1_count <= `BSV_ASSIGNMENT_DELAY masterX_1_count$D_IN;
	if (masterX_1_data_reg$EN)
	  masterX_1_data_reg <= `BSV_ASSIGNMENT_DELAY masterX_1_data_reg$D_IN;
	if (masterX_1_descriptor$EN)
	  masterX_1_descriptor <= `BSV_ASSIGNMENT_DELAY
	      masterX_1_descriptor$D_IN;
	if (masterX_1_fifo_rx_rv$EN)
	  masterX_1_fifo_rx_rv <= `BSV_ASSIGNMENT_DELAY
	      masterX_1_fifo_rx_rv$D_IN;
	if (masterX_1_fifo_tx_count$EN)
	  masterX_1_fifo_tx_count <= `BSV_ASSIGNMENT_DELAY
	      masterX_1_fifo_tx_count$D_IN;
	if (masterX_1_grant_reg$EN)
	  masterX_1_grant_reg <= `BSV_ASSIGNMENT_DELAY
	      masterX_1_grant_reg$D_IN;
	if (masterX_1_ifc_fifo_op_cntr_r$EN)
	  masterX_1_ifc_fifo_op_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      masterX_1_ifc_fifo_op_cntr_r$D_IN;
	if (masterX_1_ifc_fifo_op_q_0$EN)
	  masterX_1_ifc_fifo_op_q_0 <= `BSV_ASSIGNMENT_DELAY
	      masterX_1_ifc_fifo_op_q_0$D_IN;
	if (masterX_1_ifc_fifo_op_q_1$EN)
	  masterX_1_ifc_fifo_op_q_1 <= `BSV_ASSIGNMENT_DELAY
	      masterX_1_ifc_fifo_op_q_1$D_IN;
	if (masterX_1_ifc_request_reg$EN)
	  masterX_1_ifc_request_reg <= `BSV_ASSIGNMENT_DELAY
	      masterX_1_ifc_request_reg$D_IN;
	if (masterX_1_req_reg$EN)
	  masterX_1_req_reg <= `BSV_ASSIGNMENT_DELAY masterX_1_req_reg$D_IN;
	if (mem_ff_reqs_rv$EN)
	  mem_ff_reqs_rv <= `BSV_ASSIGNMENT_DELAY mem_ff_reqs_rv$D_IN;
	if (mem_ff_rsps_rv$EN)
	  mem_ff_rsps_rv <= `BSV_ASSIGNMENT_DELAY mem_ff_rsps_rv$D_IN;
	if (mem_rg_mem_state$EN)
	  mem_rg_mem_state <= `BSV_ASSIGNMENT_DELAY mem_rg_mem_state$D_IN;
	if (proc_burst_length$EN)
	  proc_burst_length <= `BSV_ASSIGNMENT_DELAY proc_burst_length$D_IN;
	if (proc_f_bus_reqs_rv$EN)
	  proc_f_bus_reqs_rv <= `BSV_ASSIGNMENT_DELAY proc_f_bus_reqs_rv$D_IN;
	if (proc_f_bus_rsps_rv$EN)
	  proc_f_bus_rsps_rv <= `BSV_ASSIGNMENT_DELAY proc_f_bus_rsps_rv$D_IN;
	if (proc_who$EN) proc_who <= `BSV_ASSIGNMENT_DELAY proc_who$D_IN;
	if (rg_instret$EN)
	  rg_instret <= `BSV_ASSIGNMENT_DELAY rg_instret$D_IN;
	if (rg_prev_instret$EN)
	  rg_prev_instret <= `BSV_ASSIGNMENT_DELAY rg_prev_instret$D_IN;
	if (rtc_counter_cycle$EN)
	  rtc_counter_cycle <= `BSV_ASSIGNMENT_DELAY rtc_counter_cycle$D_IN;
	if (rtc_pendingReq$EN)
	  rtc_pendingReq <= `BSV_ASSIGNMENT_DELAY rtc_pendingReq$D_IN;
	if (rtc_timeCmpHi$EN)
	  rtc_timeCmpHi <= `BSV_ASSIGNMENT_DELAY rtc_timeCmpHi$D_IN;
	if (rtc_timeCmpLo$EN)
	  rtc_timeCmpLo <= `BSV_ASSIGNMENT_DELAY rtc_timeCmpLo$D_IN;
	if (rtc_timeRegHi$EN)
	  rtc_timeRegHi <= `BSV_ASSIGNMENT_DELAY rtc_timeRegHi$D_IN;
	if (rtc_timeRegLo$EN)
	  rtc_timeRegLo <= `BSV_ASSIGNMENT_DELAY rtc_timeRegLo$D_IN;
	if (running$EN) running <= `BSV_ASSIGNMENT_DELAY running$D_IN;
	if (slave_mem_config_ctrl_reg$EN)
	  slave_mem_config_ctrl_reg <= `BSV_ASSIGNMENT_DELAY
	      slave_mem_config_ctrl_reg$D_IN;
	if (slave_mem_config_fifo_op_rv$EN)
	  slave_mem_config_fifo_op_rv <= `BSV_ASSIGNMENT_DELAY
	      slave_mem_config_fifo_op_rv$D_IN;
	if (slave_mem_config_fifo_rx_rv$EN)
	  slave_mem_config_fifo_rx_rv <= `BSV_ASSIGNMENT_DELAY
	      slave_mem_config_fifo_rx_rv$D_IN;
	if (slave_mem_config_fifo_tx_rv$EN)
	  slave_mem_config_fifo_tx_rv <= `BSV_ASSIGNMENT_DELAY
	      slave_mem_config_fifo_tx_rv$D_IN;
	if (slave_mem_config_first$EN)
	  slave_mem_config_first <= `BSV_ASSIGNMENT_DELAY
	      slave_mem_config_first$D_IN;
	if (slave_mem_config_start$EN)
	  slave_mem_config_start <= `BSV_ASSIGNMENT_DELAY
	      slave_mem_config_start$D_IN;
	if (slave_mem_data_ctrl_reg$EN)
	  slave_mem_data_ctrl_reg <= `BSV_ASSIGNMENT_DELAY
	      slave_mem_data_ctrl_reg$D_IN;
	if (slave_mem_data_fifo_op_rv$EN)
	  slave_mem_data_fifo_op_rv <= `BSV_ASSIGNMENT_DELAY
	      slave_mem_data_fifo_op_rv$D_IN;
	if (slave_mem_data_fifo_rx_rv$EN)
	  slave_mem_data_fifo_rx_rv <= `BSV_ASSIGNMENT_DELAY
	      slave_mem_data_fifo_rx_rv$D_IN;
	if (slave_mem_data_fifo_tx_rv$EN)
	  slave_mem_data_fifo_tx_rv <= `BSV_ASSIGNMENT_DELAY
	      slave_mem_data_fifo_tx_rv$D_IN;
	if (slave_mem_data_first$EN)
	  slave_mem_data_first <= `BSV_ASSIGNMENT_DELAY
	      slave_mem_data_first$D_IN;
	if (slave_mem_data_start$EN)
	  slave_mem_data_start <= `BSV_ASSIGNMENT_DELAY
	      slave_mem_data_start$D_IN;
	if (slave_rtc_ctrl_reg$EN)
	  slave_rtc_ctrl_reg <= `BSV_ASSIGNMENT_DELAY slave_rtc_ctrl_reg$D_IN;
	if (slave_rtc_fifo_op_rv$EN)
	  slave_rtc_fifo_op_rv <= `BSV_ASSIGNMENT_DELAY
	      slave_rtc_fifo_op_rv$D_IN;
	if (slave_rtc_fifo_rx_rv$EN)
	  slave_rtc_fifo_rx_rv <= `BSV_ASSIGNMENT_DELAY
	      slave_rtc_fifo_rx_rv$D_IN;
	if (slave_rtc_fifo_tx_rv$EN)
	  slave_rtc_fifo_tx_rv <= `BSV_ASSIGNMENT_DELAY
	      slave_rtc_fifo_tx_rv$D_IN;
	if (slave_rtc_first$EN)
	  slave_rtc_first <= `BSV_ASSIGNMENT_DELAY slave_rtc_first$D_IN;
	if (slave_rtc_start$EN)
	  slave_rtc_start <= `BSV_ASSIGNMENT_DELAY slave_rtc_start$D_IN;
	if (start_reg$EN) start_reg <= `BSV_ASSIGNMENT_DELAY start_reg$D_IN;
	if (start_reg_1$EN)
	  start_reg_1 <= `BSV_ASSIGNMENT_DELAY start_reg_1$D_IN;
	if (state_can_overlap$EN)
	  state_can_overlap <= `BSV_ASSIGNMENT_DELAY state_can_overlap$D_IN;
	if (state_fired$EN)
	  state_fired <= `BSV_ASSIGNMENT_DELAY state_fired$D_IN;
	if (state_mkFSMstate$EN)
	  state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY state_mkFSMstate$D_IN;
      end
    if (file_arf_dump$EN)
      file_arf_dump <= `BSV_ASSIGNMENT_DELAY file_arf_dump$D_IN;
    if (rg_dump_gpr$EN) rg_dump_gpr <= `BSV_ASSIGNMENT_DELAY rg_dump_gpr$D_IN;
    if (rg_xi$EN) rg_xi <= `BSV_ASSIGNMENT_DELAY rg_xi$D_IN;
    if (rg_xj$EN) rg_xj <= `BSV_ASSIGNMENT_DELAY rg_xj$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    ahb_bus_arbiter_dgrant_vector_reg = 2'h2;
    ahb_bus_arbiter_grant_vector_reg = 2'h2;
    ahb_bus_arbiter_hmaster_reg = 2'h2;
    ahb_bus_arbiter_priority_vector = 2'h2;
    ahb_bus_dummy_select_reg = 1'h0;
    ahb_bus_dummy_transfer_reg = 2'h2;
    ahb_bus_dummys_0_select_reg = 1'h0;
    ahb_bus_dummys_0_transfer_reg = 2'h2;
    ahb_bus_dummys_1_select_reg = 1'h0;
    ahb_bus_dummys_1_transfer_reg = 2'h2;
    ahb_bus_hmaster_addr = 2'h2;
    ahb_bus_hmaster_data = 2'h2;
    ahb_bus_monitor_hready_prev = 1'h0;
    ahb_bus_monitor_remaining_reg = 5'h0A;
    ahb_bus_monitor_request_prev = 1'h0;
    ahb_bus_monitor_started = 1'h0;
    ahb_bus_monitor_transfer_prev = 2'h2;
    ahb_bus_s_map_data_0 = 3'h2;
    ahb_bus_s_map_data_1 = 3'h2;
    ahb_bus_s_num_addr_current = 2'h2;
    ahb_bus_s_num_data = 2'h2;
    config_memory_ff_reqs_rv = 111'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA;
    config_memory_ff_rsps_rv = 59'h2AAAAAAAAAAAAAA;
    config_memory_rg_mem_state = 1'h0;
    file_arf_dump = 32'hAAAAAAAA;
    masterX_0_count = 10'h2AA;
    masterX_0_data_reg = 33'h0AAAAAAAA;
    masterX_0_descriptor = 110'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA;
    masterX_0_fifo_rx_rv = 111'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA;
    masterX_0_fifo_tx_count = 3'h2;
    masterX_0_grant_reg = 1'h0;
    masterX_0_ifc_fifo_op_cntr_r = 2'h2;
    masterX_0_ifc_fifo_op_q_0 = 2'h2;
    masterX_0_ifc_fifo_op_q_1 = 2'h2;
    masterX_0_ifc_request_reg = 77'h0AAAAAAAAAAAAAAAAAAA;
    masterX_0_req_reg = 1'h0;
    masterX_1_count = 10'h2AA;
    masterX_1_data_reg = 33'h0AAAAAAAA;
    masterX_1_descriptor = 110'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA;
    masterX_1_fifo_rx_rv = 111'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA;
    masterX_1_fifo_tx_count = 3'h2;
    masterX_1_grant_reg = 1'h0;
    masterX_1_ifc_fifo_op_cntr_r = 2'h2;
    masterX_1_ifc_fifo_op_q_0 = 2'h2;
    masterX_1_ifc_fifo_op_q_1 = 2'h2;
    masterX_1_ifc_request_reg = 77'h0AAAAAAAAAAAAAAAAAAA;
    masterX_1_req_reg = 1'h0;
    mem_ff_reqs_rv = 111'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA;
    mem_ff_rsps_rv = 59'h2AAAAAAAAAAAAAA;
    mem_rg_mem_state = 1'h0;
    proc_burst_length = 10'h2AA;
    proc_f_bus_reqs_rv = 111'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA;
    proc_f_bus_rsps_rv = 59'h2AAAAAAAAAAAAAA;
    proc_who = 2'h2;
    rg_dump_gpr = 64'hAAAAAAAAAAAAAAAA;
    rg_instret = 64'hAAAAAAAAAAAAAAAA;
    rg_prev_instret = 64'hAAAAAAAAAAAAAAAA;
    rg_xi = 6'h2A;
    rg_xj = 6'h2A;
    rtc_counter_cycle = 6'h2A;
    rtc_pendingReq = 6'h2A;
    rtc_timeCmpHi = 32'hAAAAAAAA;
    rtc_timeCmpLo = 32'hAAAAAAAA;
    rtc_timeRegHi = 32'hAAAAAAAA;
    rtc_timeRegLo = 32'hAAAAAAAA;
    running = 1'h0;
    slave_mem_config_ctrl_reg = 46'h2AAAAAAAAAAA;
    slave_mem_config_fifo_op_rv = 1'h0;
    slave_mem_config_fifo_rx_rv = 59'h2AAAAAAAAAAAAAA;
    slave_mem_config_fifo_tx_rv = 111'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA;
    slave_mem_config_first = 1'h0;
    slave_mem_config_start = 1'h0;
    slave_mem_data_ctrl_reg = 46'h2AAAAAAAAAAA;
    slave_mem_data_fifo_op_rv = 1'h0;
    slave_mem_data_fifo_rx_rv = 59'h2AAAAAAAAAAAAAA;
    slave_mem_data_fifo_tx_rv = 111'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA;
    slave_mem_data_first = 1'h0;
    slave_mem_data_start = 1'h0;
    slave_rtc_ctrl_reg = 46'h2AAAAAAAAAAA;
    slave_rtc_fifo_op_rv = 1'h0;
    slave_rtc_fifo_rx_rv = 59'h2AAAAAAAAAAAAAA;
    slave_rtc_fifo_tx_rv = 111'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA;
    slave_rtc_first = 1'h0;
    slave_rtc_start = 1'h0;
    start_reg = 1'h0;
    start_reg_1 = 1'h0;
    state_can_overlap = 1'h0;
    state_fired = 1'h0;
    state_mkFSMstate = 5'h0A;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l281c17)
	begin
	  v__h151946 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l281c17)
	$display(v__h151946, " TB: Setting initial PC to: %0h", 32'h80000000);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l442c25)
	begin
	  TASK_fopen___d2281 = $fopen("rtl_register_dump.txt", "w");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l442c25 && TASK_fopen___d2281 == 32'd0)
	begin
	  v__h152467 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l442c25 && TASK_fopen___d2281 == 32'd0)
	$display(v__h152467,
		 " TB: Cannot open file '%s' for dumping state. Exiting!",
		 "rtl_register_dump.txt");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l442c25 && TASK_fopen___d2281 == 32'd0)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l259c18)
	$fwrite(file_arf_dump, "PC = %h\n", dump_pc__h116758);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l265c33)
	$fwrite(file_arf_dump, "REG %2d %h\n", rg_xi, rg_dump_gpr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l268c18) $fwrite(file_arf_dump, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l461c37 &&
	  (WILL_FIRE_RL_action_l464c52 || WILL_FIRE_RL_action_l259c18 ||
	   WILL_FIRE_RL_action_f_init_l263c25 ||
	   WILL_FIRE_RL_action_l264c37 ||
	   WILL_FIRE_RL_action_l265c33 ||
	   WILL_FIRE_RL_action_f_update_l263c25 ||
	   WILL_FIRE_RL_action_l268c18))
	$display("Error: \"BSV_src/CPU_src/SoC.bsv\", line 461, column 37: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l461c37] and\n  [RL_action_l464c52, RL_action_l259c18, RL_action_f_init_l263c25,\n  RL_action_l264c37, RL_action_l265c33, RL_action_f_update_l263c25,\n  RL_action_l268c18] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l464c52 &&
	  (WILL_FIRE_RL_action_l259c18 ||
	   WILL_FIRE_RL_action_f_init_l263c25 ||
	   WILL_FIRE_RL_action_l264c37 ||
	   WILL_FIRE_RL_action_l265c33 ||
	   WILL_FIRE_RL_action_f_update_l263c25 ||
	   WILL_FIRE_RL_action_l268c18))
	$display("Error: \"BSV_src/CPU_src/SoC.bsv\", line 464, column 52: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l464c52] and\n  [RL_action_l259c18, RL_action_f_init_l263c25, RL_action_l264c37,\n  RL_action_l265c33, RL_action_f_update_l263c25, RL_action_l268c18] ) fired in\n  the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l259c18 &&
	  (WILL_FIRE_RL_action_f_init_l263c25 ||
	   WILL_FIRE_RL_action_l264c37 ||
	   WILL_FIRE_RL_action_l265c33 ||
	   WILL_FIRE_RL_action_f_update_l263c25 ||
	   WILL_FIRE_RL_action_l268c18))
	$display("Error: \"BSV_src/CPU_src/SoC.bsv\", line 259, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l259c18] and\n  [RL_action_f_init_l263c25, RL_action_l264c37, RL_action_l265c33,\n  RL_action_f_update_l263c25, RL_action_l268c18] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_f_init_l263c25 &&
	  (WILL_FIRE_RL_action_l264c37 || WILL_FIRE_RL_action_l265c33 ||
	   WILL_FIRE_RL_action_f_update_l263c25 ||
	   WILL_FIRE_RL_action_l268c18))
	$display("Error: \"BSV_src/CPU_src/SoC.bsv\", line 263, column 36: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_f_init_l263c25] and\n  [RL_action_l264c37, RL_action_l265c33, RL_action_f_update_l263c25,\n  RL_action_l268c18] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l264c37 &&
	  (WILL_FIRE_RL_action_l265c33 ||
	   WILL_FIRE_RL_action_f_update_l263c25 ||
	   WILL_FIRE_RL_action_l268c18))
	$display("Error: \"BSV_src/CPU_src/SoC.bsv\", line 264, column 37: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l264c37] and\n  [RL_action_l265c33, RL_action_f_update_l263c25, RL_action_l268c18] ) fired\n  in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l265c33 &&
	  (WILL_FIRE_RL_action_f_update_l263c25 ||
	   WILL_FIRE_RL_action_l268c18))
	$display("Error: \"BSV_src/CPU_src/SoC.bsv\", line 265, column 33: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l265c33] and\n  [RL_action_f_update_l263c25, RL_action_l268c18] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_f_update_l263c25 && WILL_FIRE_RL_action_l268c18)
	$display("Error: \"BSV_src/CPU_src/SoC.bsv\", line 263, column 60: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_f_update_l263c25] and\n  [RL_action_l268c18] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l281c17 &&
	  (WILL_FIRE_RL_action_l290c17 || WILL_FIRE_RL_action_l442c25 ||
	   WILL_FIRE_RL_action_l460c49 ||
	   WILL_FIRE_RL_action_l461c37 ||
	   WILL_FIRE_RL_action_l464c52 ||
	   WILL_FIRE_RL_action_l259c18 ||
	   WILL_FIRE_RL_action_f_init_l263c25 ||
	   WILL_FIRE_RL_action_l264c37 ||
	   WILL_FIRE_RL_action_l265c33 ||
	   WILL_FIRE_RL_action_f_update_l263c25 ||
	   WILL_FIRE_RL_action_l268c18))
	$display("Error: \"BSV_src/CPU_src/SoC.bsv\", line 281, column 17: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l281c17] and\n  [RL_action_l290c17, RL_action_l442c25, RL_action_l460c49, RL_action_l461c37,\n  RL_action_l464c52, RL_action_l259c18, RL_action_f_init_l263c25,\n  RL_action_l264c37, RL_action_l265c33, RL_action_f_update_l263c25,\n  RL_action_l268c18] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l290c17 &&
	  (WILL_FIRE_RL_action_l442c25 || WILL_FIRE_RL_action_l460c49 ||
	   WILL_FIRE_RL_action_l461c37 ||
	   WILL_FIRE_RL_action_l464c52 ||
	   WILL_FIRE_RL_action_l259c18 ||
	   WILL_FIRE_RL_action_f_init_l263c25 ||
	   WILL_FIRE_RL_action_l264c37 ||
	   WILL_FIRE_RL_action_l265c33 ||
	   WILL_FIRE_RL_action_f_update_l263c25 ||
	   WILL_FIRE_RL_action_l268c18))
	$display("Error: \"BSV_src/CPU_src/SoC.bsv\", line 290, column 17: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l290c17] and\n  [RL_action_l442c25, RL_action_l460c49, RL_action_l461c37, RL_action_l464c52,\n  RL_action_l259c18, RL_action_f_init_l263c25, RL_action_l264c37,\n  RL_action_l265c33, RL_action_f_update_l263c25, RL_action_l268c18] ) fired in\n  the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l442c25 &&
	  (WILL_FIRE_RL_action_l460c49 || WILL_FIRE_RL_action_l461c37 ||
	   WILL_FIRE_RL_action_l464c52 ||
	   WILL_FIRE_RL_action_l259c18 ||
	   WILL_FIRE_RL_action_f_init_l263c25 ||
	   WILL_FIRE_RL_action_l264c37 ||
	   WILL_FIRE_RL_action_l265c33 ||
	   WILL_FIRE_RL_action_f_update_l263c25 ||
	   WILL_FIRE_RL_action_l268c18))
	$display("Error: \"BSV_src/CPU_src/SoC.bsv\", line 442, column 25: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l442c25] and\n  [RL_action_l460c49, RL_action_l461c37, RL_action_l464c52, RL_action_l259c18,\n  RL_action_f_init_l263c25, RL_action_l264c37, RL_action_l265c33,\n  RL_action_f_update_l263c25, RL_action_l268c18] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l460c49 &&
	  (WILL_FIRE_RL_action_l461c37 || WILL_FIRE_RL_action_l464c52 ||
	   WILL_FIRE_RL_action_l259c18 ||
	   WILL_FIRE_RL_action_f_init_l263c25 ||
	   WILL_FIRE_RL_action_l264c37 ||
	   WILL_FIRE_RL_action_l265c33 ||
	   WILL_FIRE_RL_action_f_update_l263c25 ||
	   WILL_FIRE_RL_action_l268c18))
	$display("Error: \"BSV_src/CPU_src/SoC.bsv\", line 460, column 49: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l460c49] and\n  [RL_action_l461c37, RL_action_l464c52, RL_action_l259c18,\n  RL_action_f_init_l263c25, RL_action_l264c37, RL_action_l265c33,\n  RL_action_f_update_l263c25, RL_action_l268c18] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_auto_finish) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l276c17)
	begin
	  v__h151632 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l276c17)
	$display(v__h151632, " TB: Initializing CPU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l276c17 &&
	  (WILL_FIRE_RL_action_l281c17 || WILL_FIRE_RL_action_l290c17 ||
	   WILL_FIRE_RL_action_l442c25 ||
	   WILL_FIRE_RL_action_l460c49 ||
	   WILL_FIRE_RL_action_l461c37 ||
	   WILL_FIRE_RL_action_l464c52 ||
	   WILL_FIRE_RL_action_l259c18 ||
	   WILL_FIRE_RL_action_f_init_l263c25 ||
	   WILL_FIRE_RL_action_l264c37 ||
	   WILL_FIRE_RL_action_l265c33 ||
	   WILL_FIRE_RL_action_f_update_l263c25 ||
	   WILL_FIRE_RL_action_l268c18))
	$display("Error: \"BSV_src/CPU_src/SoC.bsv\", line 276, column 17: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l276c17] and\n  [RL_action_l281c17, RL_action_l290c17, RL_action_l442c25, RL_action_l460c49,\n  RL_action_l461c37, RL_action_l464c52, RL_action_l259c18,\n  RL_action_f_init_l263c25, RL_action_l264c37, RL_action_l265c33,\n  RL_action_f_update_l263c25, RL_action_l268c18] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_masterX_0_grab_invalid_response) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ahb_bus_0_send_lock) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_masterX_1_grab_invalid_response) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ahb_bus_1_send_lock) $write("");
  end
  // synopsys translate_on
endmodule  // mkSoC

