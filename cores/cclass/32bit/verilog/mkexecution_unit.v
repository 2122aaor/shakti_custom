//
// Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
//
// On Tue Mar 28 10:03:38 IST 2017
//
//
// Ports:
// Name                         I/O  size props
// inputs                         O    81
// RDY_inputs                     O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// inputs__opcode                 I     5
// inputs__funct3                 I     3
// inputs__funct7                 I     7
// inputs__operand1               I    32
// inputs__operand2               I    32
// inputs__operand3               I    32
// inputs__immediate_value        I    20
// inputs_program_counter         I    32
// inputs_is_imm                  I     1
// EN_inputs                      I     1
//
// Combinational paths from inputs to outputs:
//   (inputs__opcode,
//    inputs__funct3,
//    inputs__funct7,
//    inputs__operand1,
//    inputs__operand2,
//    inputs__immediate_value,
//    inputs_program_counter,
//    inputs_is_imm,
//    EN_inputs) -> inputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkexecution_unit(CLK,
			RST_N,

			inputs__opcode,
			inputs__funct3,
			inputs__funct7,
			inputs__operand1,
			inputs__operand2,
			inputs__operand3,
			inputs__immediate_value,
			inputs_program_counter,
			inputs_is_imm,
			EN_inputs,
			inputs,
			RDY_inputs);
  input  CLK;
  input  RST_N;

  // actionvalue method inputs
  input  [4 : 0] inputs__opcode;
  input  [2 : 0] inputs__funct3;
  input  [6 : 0] inputs__funct7;
  input  [31 : 0] inputs__operand1;
  input  [31 : 0] inputs__operand2;
  input  [31 : 0] inputs__operand3;
  input  [19 : 0] inputs__immediate_value;
  input  [31 : 0] inputs_program_counter;
  input  inputs_is_imm;
  input  EN_inputs;
  output [80 : 0] inputs;
  output RDY_inputs;

  // signals for module outputs
  wire [80 : 0] inputs;
  wire RDY_inputs;

  // ports of submodule fpu
  wire [37 : 0] fpu$_start;
  wire [31 : 0] fpu$_start_fsr,
		fpu$_start_operand1,
		fpu$_start_operand2,
		fpu$_start_operand3;
  wire [6 : 0] fpu$_start_funct7;
  wire [4 : 0] fpu$_start_opcode, fpu$exception;
  wire [2 : 0] fpu$_start_funct3;
  wire [1 : 0] fpu$_start_immediate_value;
  wire fpu$EN__start, fpu$EN_exception;

  // ports of submodule muldiv
  wire [32 : 0] muldiv$_start;
  wire [31 : 0] muldiv$_start_inp1, muldiv$_start_inp2;
  wire [2 : 0] muldiv$_start_funct;
  wire muldiv$EN__start, muldiv$_start_word32;

  // rule scheduling signals
  wire CAN_FIRE_inputs, WILL_FIRE_inputs;

  // remaining internal signals
  reg [63 : 0] v__h273, v__h542, v__h774;
  reg [31 : 0] IF_inputs__funct3_EQ_0b111_3_THEN_IF_inputs__o_ETC___d245;
  reg [3 : 0] CASE_fpuexception_BITS_3_TO_0_0_fpuexception_ETC__q3;
  reg [1 : 0] CASE_inputs__opcode_0b1000_1_0b1001_1_0b1011_2_0__q2;
  wire [127 : 0] _0_CONCAT_IF_inputs__funct3_BIT_0_87_XOR_inputs_ETC___d219;
  wire [75 : 0] IF_NOT_inputs__opcode_EQ_0b1100_2_9_OR_NOT_inp_ETC___d269,
		_0_CONCAT_DONTCARE_CONCAT_IF_NOT_inputs__opcode_ETC___d254;
  wire [63 : 0] IF_IF_inputs__funct3_BITS_1_TO_0_02_EQ_1_03_TH_ETC___d223,
		op1__h6001,
		op2__h6002;
  wire [36 : 0] IF_inputs__opcode_EQ_0b1100_2_AND_inputs__func_ETC___d252;
  wire [32 : 0] IF_INV_inputs__funct3_BIT_2_5_6_THEN_IF_inputs_ETC___d131,
		theResult__58_BIT_31_AND_inputs__funct7_BIT_5__ETC__q1;
  wire [31 : 0] IF_inputs__funct3_BIT_0_87_XOR_inputs__funct3__ETC___d212,
		IF_inputs__opcode_EQ_0b101_6_OR_inputs__opcode_ETC___d239,
		IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68,
		IF_inputs__opcode_EQ_0b1100_2_AND_inputs__func_ETC___d236,
		_operand2__h815,
		_theResult_____4__h817,
		_theResult_____5__h816,
		_theResult_____9__h811,
		_theResult____h958,
		alu_result___1__h5795,
		alu_result___1__h5811,
		alu_result___1__h6000,
		alu_result___1__h6406,
		alu_result___1__h913,
		alu_result___1__h934,
		alu_result___1__h950,
		temp___1__h991,
		x__h6230,
		x__h6285,
		x__h6371;
  wire IF_inputs__opcode_EQ_0b1100_2_AND_inputs__func_ETC___d57,
       NOT_inputs__funct3_BIT_0_87_88_AND_IF_inputs___ETC___d198,
       NOT_inputs__opcode_EQ_0b1100_2_9_OR_NOT_inputs_ETC___d40,
       x__h5918;

  // actionvalue method inputs
  assign inputs =
	     { (NOT_inputs__opcode_EQ_0b1100_2_9_OR_NOT_inputs_ETC___d40 ?
		  inputs__opcode != 5'b0 && inputs__opcode != 5'b00001 &&
		  inputs__opcode != 5'b01001 &&
		  inputs__opcode != 5'b01000 &&
		  inputs__opcode != 5'b01011 :
		  IF_inputs__opcode_EQ_0b1100_2_AND_inputs__func_ETC___d57) ?
		 _0_CONCAT_DONTCARE_CONCAT_IF_NOT_inputs__opcode_ETC___d254 :
		 IF_NOT_inputs__opcode_EQ_0b1100_2_9_OR_NOT_inp_ETC___d269,
	       (inputs__opcode == 5'b10100 || inputs__opcode == 5'b10010 ||
		inputs__opcode == 5'b10011 ||
		inputs__opcode == 5'b10000 ||
		inputs__opcode == 5'b10001) &&
	       fpu$exception[4],
	       CASE_fpuexception_BITS_3_TO_0_0_fpuexception_ETC__q3 } ;
  assign RDY_inputs = 1'd1 ;
  assign CAN_FIRE_inputs = 1'd1 ;
  assign WILL_FIRE_inputs = EN_inputs ;

  // submodule fpu
  mkfpu fpu(.CLK(CLK),
	    .RST_N(RST_N),
	    ._start_fsr(fpu$_start_fsr),
	    ._start_funct3(fpu$_start_funct3),
	    ._start_funct7(fpu$_start_funct7),
	    ._start_immediate_value(fpu$_start_immediate_value),
	    ._start_opcode(fpu$_start_opcode),
	    ._start_operand1(fpu$_start_operand1),
	    ._start_operand2(fpu$_start_operand2),
	    ._start_operand3(fpu$_start_operand3),
	    .EN__start(fpu$EN__start),
	    .EN_exception(fpu$EN_exception),
	    ._start(fpu$_start),
	    .RDY__start(),
	    .exception(fpu$exception),
	    .RDY_exception());

  // submodule muldiv
  mkmuldiv muldiv(.CLK(CLK),
		  .RST_N(RST_N),
		  ._start_funct(muldiv$_start_funct),
		  ._start_inp1(muldiv$_start_inp1),
		  ._start_inp2(muldiv$_start_inp2),
		  ._start_word32(muldiv$_start_word32),
		  .EN__start(muldiv$EN__start),
		  ._start(muldiv$_start),
		  .RDY__start());

  // submodule fpu
  assign fpu$_start_fsr = 32'd0 ;
  assign fpu$_start_funct3 = inputs__funct3 ;
  assign fpu$_start_funct7 = inputs__funct7 ;
  assign fpu$_start_immediate_value = inputs__immediate_value[1:0] ;
  assign fpu$_start_opcode = inputs__opcode ;
  assign fpu$_start_operand1 = inputs__operand1 ;
  assign fpu$_start_operand2 = inputs__operand2 ;
  assign fpu$_start_operand3 = inputs__operand3 ;
  assign fpu$EN__start =
	     EN_inputs &&
	     (inputs__opcode == 5'b10100 || inputs__opcode == 5'b10010 ||
	      inputs__opcode == 5'b10011 ||
	      inputs__opcode == 5'b10000 ||
	      inputs__opcode == 5'b10001) ;
  assign fpu$EN_exception =
	     EN_inputs &&
	     (inputs__opcode == 5'b10100 || inputs__opcode == 5'b10010 ||
	      inputs__opcode == 5'b10011 ||
	      inputs__opcode == 5'b10000 ||
	      inputs__opcode == 5'b10001) ;

  // submodule muldiv
  assign muldiv$_start_funct = inputs__funct3 ;
  assign muldiv$_start_inp1 = inputs__operand1 ;
  assign muldiv$_start_inp2 = inputs__operand2 ;
  assign muldiv$_start_word32 = inputs__opcode[1] ;
  assign muldiv$EN__start =
	     EN_inputs && inputs__opcode == 5'b01100 &&
	     inputs__funct7 == 7'd1 &&
	     inputs__funct3[2] ;

  // remaining internal signals
  assign IF_IF_inputs__funct3_BITS_1_TO_0_02_EQ_1_03_TH_ETC___d223 =
	     ((inputs__funct3[1:0] == 2'd1) ?
		x__h5918 :
		inputs__funct3[1:0] == 2'd2 &&
		IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68[31]) ?
	       ~_0_CONCAT_IF_inputs__funct3_BIT_0_87_XOR_inputs_ETC___d219[63:0] +
	       64'd1 :
	       _0_CONCAT_IF_inputs__funct3_BIT_0_87_XOR_inputs_ETC___d219[63:0] ;
  assign IF_INV_inputs__funct3_BIT_2_5_6_THEN_IF_inputs_ETC___d131 =
	     { _theResult____h958[31] & inputs__funct7[5],
	       _theResult____h958 } >>
	     _operand2__h815[4:0] |
	     ~(33'h1FFFFFFFF >> _operand2__h815[4:0]) &
	     {33{theResult__58_BIT_31_AND_inputs__funct7_BIT_5__ETC__q1[32]}} ;
  assign IF_NOT_inputs__opcode_EQ_0b1100_2_9_OR_NOT_inp_ETC___d269 =
	     (NOT_inputs__opcode_EQ_0b1100_2_9_OR_NOT_inputs_ETC___d40 &&
	      (inputs__opcode == 5'b0 || inputs__opcode == 5'b00001 ||
	       inputs__opcode == 5'b01001 ||
	       inputs__opcode == 5'b01000 ||
	       inputs__opcode == 5'b01011)) ?
	       { 2'd1,
		 _theResult_____4__h817,
		 inputs__operand2,
		 inputs__funct3[1:0],
		 inputs__funct3[2],
		 CASE_inputs__opcode_0b1000_1_0b1001_1_0b1011_2_0__q2,
		 inputs__funct7[6:2] } :
	       { 2'd2, 74'h2AAAAAAAAAAAAAAAAAA /* unspecified value */  } ;
  assign IF_inputs__funct3_BIT_0_87_XOR_inputs__funct3__ETC___d212 =
	     (inputs__funct3[0] ^ inputs__funct3[1] &&
	      IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68[31]) ?
	       x__h6230 :
	       IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68 ;
  assign IF_inputs__opcode_EQ_0b101_6_OR_inputs__opcode_ETC___d239 =
	     (inputs__opcode == 5'b00101 || inputs__opcode == 5'b0 ||
	      inputs__opcode == 5'b00001 ||
	      inputs__opcode == 5'b01000 ||
	      inputs__opcode == 5'b01001 ||
	      (inputs__opcode == 5'b00100 || inputs__opcode == 5'b01100) &&
	      inputs__funct3 == 3'b0) ?
	       x__h6371 :
	       ((inputs__opcode == 5'b01101) ?
		  alu_result___1__h6406 :
		  32'd0) ;
  assign IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68 =
	     (inputs__opcode == 5'b00101) ?
	       alu_result___1__h6406 :
	       inputs__operand1 ;
  assign IF_inputs__opcode_EQ_0b1100_2_AND_inputs__func_ETC___d236 =
	     (inputs__opcode == 5'b01100 && inputs__funct3 == 3'b0 &&
	      inputs__funct7[5]) ?
	       x__h6285 :
	       _operand2__h815 ;
  assign IF_inputs__opcode_EQ_0b1100_2_AND_inputs__func_ETC___d252 =
	     (inputs__opcode == 5'b01100 && inputs__funct7 == 7'd1 &&
	      inputs__funct3[2]) ?
	       (muldiv$_start[32] ?
		  { muldiv$_start[31:0], 5'd0 } :
		  fpu$_start[36:0]) :
	       fpu$_start[36:0] ;
  assign IF_inputs__opcode_EQ_0b1100_2_AND_inputs__func_ETC___d57 =
	     (inputs__opcode == 5'b01100 && inputs__funct7 == 7'd1 &&
	      inputs__funct3[2]) ?
	       muldiv$_start[32] :
	       (inputs__opcode == 5'b10100 || inputs__opcode == 5'b10010 ||
		inputs__opcode == 5'b10011 ||
		inputs__opcode == 5'b10000 ||
		inputs__opcode == 5'b10001) &&
	       fpu$_start[37] ;
  assign NOT_inputs__funct3_BIT_0_87_88_AND_IF_inputs___ETC___d198 =
	     !inputs__funct3[0] &&
	     IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68[31] &&
	     !_operand2__h815[31] ||
	     (~x__h5918 || inputs__funct3[0]) &&
	     IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68 <
	     _operand2__h815 ;
  assign NOT_inputs__opcode_EQ_0b1100_2_9_OR_NOT_inputs_ETC___d40 =
	     (inputs__opcode != 5'b01100 || inputs__funct7 != 7'd1 ||
	      !inputs__funct3[2]) &&
	     (inputs__opcode == 5'b00100 || inputs__opcode == 5'b01100 ||
	      inputs__opcode == 5'b00001 ||
	      inputs__opcode == 5'b0 ||
	      inputs__opcode == 5'b01001 ||
	      inputs__opcode == 5'b01000 ||
	      inputs__opcode == 5'b01011 ||
	      inputs__opcode == 5'b00101 ||
	      inputs__opcode == 5'b01101) ;
  assign _0_CONCAT_DONTCARE_CONCAT_IF_NOT_inputs__opcode_ETC___d254 =
	     { 2'd0,
	       37'h0AAAAAAAAA /* unspecified value */ ,
	       NOT_inputs__opcode_EQ_0b1100_2_9_OR_NOT_inputs_ETC___d40 ?
		 { _theResult_____4__h817, 5'd0 } :
		 IF_inputs__opcode_EQ_0b1100_2_AND_inputs__func_ETC___d252 } ;
  assign _0_CONCAT_IF_inputs__funct3_BIT_0_87_XOR_inputs_ETC___d219 =
	     op1__h6001 * op2__h6002 ;
  assign _operand2__h815 =
	     (inputs__opcode == 5'b00101) ?
	       inputs_program_counter :
	       _theResult_____9__h811 ;
  assign _theResult_____4__h817 =
	     (inputs__opcode == 5'b01100 && !inputs__funct7[0] ||
	      inputs__opcode == 5'b00100) ?
	       IF_inputs__funct3_EQ_0b111_3_THEN_IF_inputs__o_ETC___d245 :
	       _theResult_____5__h816 ;
  assign _theResult_____5__h816 =
	     (inputs__opcode == 5'b01100 && inputs__funct7[0]) ?
	       alu_result___1__h6000 :
	       IF_inputs__opcode_EQ_0b101_6_OR_inputs__opcode_ETC___d239 ;
  assign _theResult_____9__h811 =
	     inputs_is_imm ?
	       { {12{inputs__immediate_value[19]}},
		 inputs__immediate_value } :
	       inputs__operand2 ;
  assign _theResult____h958 =
	     (~inputs__funct3[2]) ?
	       { IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68[0],
		 IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68[1],
		 IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68[2],
		 IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68[3],
		 IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68[4],
		 IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68[5],
		 IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68[6],
		 IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68[7],
		 IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68[8],
		 IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68[9],
		 IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68[10],
		 IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68[11],
		 IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68[12],
		 IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68[13],
		 IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68[14],
		 IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68[15],
		 IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68[16],
		 IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68[17],
		 IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68[18],
		 IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68[19],
		 IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68[20],
		 IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68[21],
		 IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68[22],
		 IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68[23],
		 IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68[24],
		 IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68[25],
		 IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68[26],
		 IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68[27],
		 IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68[28],
		 IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68[29],
		 IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68[30],
		 IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68[31] } :
	       IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68 ;
  assign alu_result___1__h5795 =
	     IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68 ^
	     _operand2__h815 ;
  assign alu_result___1__h5811 =
	     NOT_inputs__funct3_BIT_0_87_88_AND_IF_inputs___ETC___d198 ?
	       32'd1 :
	       32'd0 ;
  assign alu_result___1__h6000 =
	     (inputs__funct3 == 3'b0) ?
	       IF_IF_inputs__funct3_BITS_1_TO_0_02_EQ_1_03_TH_ETC___d223[31:0] :
	       IF_IF_inputs__funct3_BITS_1_TO_0_02_EQ_1_03_TH_ETC___d223[63:32] ;
  assign alu_result___1__h6406 = { _theResult_____9__h811[19:0], 12'd0 } ;
  assign alu_result___1__h913 =
	     IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68 &
	     _operand2__h815 ;
  assign alu_result___1__h934 =
	     IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68 |
	     _operand2__h815 ;
  assign alu_result___1__h950 =
	     (~inputs__funct3[2]) ?
	       temp___1__h991 :
	       IF_INV_inputs__funct3_BIT_2_5_6_THEN_IF_inputs_ETC___d131[31:0] ;
  assign op1__h6001 =
	     { 32'd0,
	       IF_inputs__funct3_BIT_0_87_XOR_inputs__funct3__ETC___d212 } ;
  assign op2__h6002 =
	     { 32'd0,
	       (inputs__funct3[1:0] == 2'd1 && _operand2__h815[31]) ?
		 x__h6285 :
		 _operand2__h815 } ;
  assign temp___1__h991 =
	     { IF_INV_inputs__funct3_BIT_2_5_6_THEN_IF_inputs_ETC___d131[0],
	       IF_INV_inputs__funct3_BIT_2_5_6_THEN_IF_inputs_ETC___d131[1],
	       IF_INV_inputs__funct3_BIT_2_5_6_THEN_IF_inputs_ETC___d131[2],
	       IF_INV_inputs__funct3_BIT_2_5_6_THEN_IF_inputs_ETC___d131[3],
	       IF_INV_inputs__funct3_BIT_2_5_6_THEN_IF_inputs_ETC___d131[4],
	       IF_INV_inputs__funct3_BIT_2_5_6_THEN_IF_inputs_ETC___d131[5],
	       IF_INV_inputs__funct3_BIT_2_5_6_THEN_IF_inputs_ETC___d131[6],
	       IF_INV_inputs__funct3_BIT_2_5_6_THEN_IF_inputs_ETC___d131[7],
	       IF_INV_inputs__funct3_BIT_2_5_6_THEN_IF_inputs_ETC___d131[8],
	       IF_INV_inputs__funct3_BIT_2_5_6_THEN_IF_inputs_ETC___d131[9],
	       IF_INV_inputs__funct3_BIT_2_5_6_THEN_IF_inputs_ETC___d131[10],
	       IF_INV_inputs__funct3_BIT_2_5_6_THEN_IF_inputs_ETC___d131[11],
	       IF_INV_inputs__funct3_BIT_2_5_6_THEN_IF_inputs_ETC___d131[12],
	       IF_INV_inputs__funct3_BIT_2_5_6_THEN_IF_inputs_ETC___d131[13],
	       IF_INV_inputs__funct3_BIT_2_5_6_THEN_IF_inputs_ETC___d131[14],
	       IF_INV_inputs__funct3_BIT_2_5_6_THEN_IF_inputs_ETC___d131[15],
	       IF_INV_inputs__funct3_BIT_2_5_6_THEN_IF_inputs_ETC___d131[16],
	       IF_INV_inputs__funct3_BIT_2_5_6_THEN_IF_inputs_ETC___d131[17],
	       IF_INV_inputs__funct3_BIT_2_5_6_THEN_IF_inputs_ETC___d131[18],
	       IF_INV_inputs__funct3_BIT_2_5_6_THEN_IF_inputs_ETC___d131[19],
	       IF_INV_inputs__funct3_BIT_2_5_6_THEN_IF_inputs_ETC___d131[20],
	       IF_INV_inputs__funct3_BIT_2_5_6_THEN_IF_inputs_ETC___d131[21],
	       IF_INV_inputs__funct3_BIT_2_5_6_THEN_IF_inputs_ETC___d131[22],
	       IF_INV_inputs__funct3_BIT_2_5_6_THEN_IF_inputs_ETC___d131[23],
	       IF_INV_inputs__funct3_BIT_2_5_6_THEN_IF_inputs_ETC___d131[24],
	       IF_INV_inputs__funct3_BIT_2_5_6_THEN_IF_inputs_ETC___d131[25],
	       IF_INV_inputs__funct3_BIT_2_5_6_THEN_IF_inputs_ETC___d131[26],
	       IF_INV_inputs__funct3_BIT_2_5_6_THEN_IF_inputs_ETC___d131[27],
	       IF_INV_inputs__funct3_BIT_2_5_6_THEN_IF_inputs_ETC___d131[28],
	       IF_INV_inputs__funct3_BIT_2_5_6_THEN_IF_inputs_ETC___d131[29],
	       IF_INV_inputs__funct3_BIT_2_5_6_THEN_IF_inputs_ETC___d131[30],
	       IF_INV_inputs__funct3_BIT_2_5_6_THEN_IF_inputs_ETC___d131[31] } ;
  assign theResult__58_BIT_31_AND_inputs__funct7_BIT_5__ETC__q1 =
	     { _theResult____h958[31] & inputs__funct7[5],
	       _theResult____h958 } ;
  assign x__h5918 =
	     IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68[31] ^
	     _operand2__h815[31] ;
  assign x__h6230 =
	     ~IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68 +
	     32'd1 ;
  assign x__h6285 = ~_operand2__h815 + 32'd1 ;
  assign x__h6371 =
	     IF_inputs__opcode_EQ_0b101_6_THEN_IF_inputs_is_ETC___d68 +
	     IF_inputs__opcode_EQ_0b1100_2_AND_inputs__func_ETC___d236 ;
  always@(inputs__funct3 or
	  _theResult_____5__h816 or
	  alu_result___1__h950 or
	  alu_result___1__h5811 or
	  alu_result___1__h5795 or
	  alu_result___1__h934 or alu_result___1__h913)
  begin
    case (inputs__funct3)
      3'd0:
	  IF_inputs__funct3_EQ_0b111_3_THEN_IF_inputs__o_ETC___d245 =
	      _theResult_____5__h816;
      3'b001, 3'b101:
	  IF_inputs__funct3_EQ_0b111_3_THEN_IF_inputs__o_ETC___d245 =
	      alu_result___1__h950;
      3'b010, 3'b011:
	  IF_inputs__funct3_EQ_0b111_3_THEN_IF_inputs__o_ETC___d245 =
	      alu_result___1__h5811;
      3'b100:
	  IF_inputs__funct3_EQ_0b111_3_THEN_IF_inputs__o_ETC___d245 =
	      alu_result___1__h5795;
      3'b110:
	  IF_inputs__funct3_EQ_0b111_3_THEN_IF_inputs__o_ETC___d245 =
	      alu_result___1__h934;
      3'b111:
	  IF_inputs__funct3_EQ_0b111_3_THEN_IF_inputs__o_ETC___d245 =
	      alu_result___1__h913;
    endcase
  end
  always@(inputs__opcode)
  begin
    case (inputs__opcode)
      5'b01000, 5'b01001:
	  CASE_inputs__opcode_0b1000_1_0b1001_1_0b1011_2_0__q2 = 2'd1;
      5'b01011: CASE_inputs__opcode_0b1000_1_0b1001_1_0b1011_2_0__q2 = 2'd2;
      default: CASE_inputs__opcode_0b1000_1_0b1001_1_0b1011_2_0__q2 = 2'd0;
    endcase
  end
  always@(fpu$exception)
  begin
    case (fpu$exception[3:0])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd4, 4'd5, 4'd6, 4'd7, 4'd8:
	  CASE_fpuexception_BITS_3_TO_0_0_fpuexception_ETC__q3 =
	      fpu$exception[3:0];
      default: CASE_fpuexception_BITS_3_TO_0_0_fpuexception_ETC__q3 = 4'd11;
    endcase
  end

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_inputs &&
	  (inputs__opcode == 5'b10100 || inputs__opcode == 5'b10010 ||
	   inputs__opcode == 5'b10011 ||
	   inputs__opcode == 5'b10000 ||
	   inputs__opcode == 5'b10001))
	begin
	  v__h273 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_inputs &&
	  (inputs__opcode == 5'b10100 || inputs__opcode == 5'b10010 ||
	   inputs__opcode == 5'b10011 ||
	   inputs__opcode == 5'b10000 ||
	   inputs__opcode == 5'b10001))
	$display(v__h273, "\tEXECUTION UNIT: Giving inputs to FPU ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_inputs && inputs__opcode == 5'b01100 && inputs__funct7 == 7'd1 &&
	  inputs__funct3[2])
	begin
	  v__h542 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_inputs && inputs__opcode == 5'b01100 && inputs__funct7 == 7'd1 &&
	  inputs__funct3[2])
	$display(v__h542, "\tEXECUTION UNIT: Giving inputs to MULDIV ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_inputs &&
	  NOT_inputs__opcode_EQ_0b1100_2_9_OR_NOT_inputs_ETC___d40)
	begin
	  v__h774 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_inputs &&
	  NOT_inputs__opcode_EQ_0b1100_2_9_OR_NOT_inputs_ETC___d40)
	$display(v__h774,
		 "\t Sending inputs to Arithmetic unit Op1: %h Op2: %h",
		 inputs__operand1,
		 inputs__operand2);
  end
  // synopsys translate_on
endmodule  // mkexecution_unit

