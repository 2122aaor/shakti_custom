//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// On Tue Sep 29 16:30:29 IST 2015
//
//
// Ports:
// Name                         I/O  size props
// RDY_update_rRAM_1              O     1 const
// RDY_update_rRAM_2              O     1 const
// return_val_in_rRAM_1           O     7
// RDY_return_val_in_rRAM_1       O     1 const
// return_val_in_rRAM_2           O     7
// RDY_return_val_in_rRAM_2       O     1 const
// return_whole_rRAM              O   224 reg
// RDY_return_whole_rRAM          O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// update_rRAM_1_entry_slot       I     5
// update_rRAM_1_entry_val        I     7
// update_rRAM_2_entry_slot       I     5
// update_rRAM_2_entry_val        I     7
// return_val_in_rRAM_1_entry_slot  I     5
// return_val_in_rRAM_2_entry_slot  I     5
// EN_update_rRAM_1               I     1
// EN_update_rRAM_2               I     1
//
// Combinational paths from inputs to outputs:
//   return_val_in_rRAM_1_entry_slot -> return_val_in_rRAM_1
//   return_val_in_rRAM_2_entry_slot -> return_val_in_rRAM_2
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkPrf_rRAM(CLK,
		  RST_N,

		  update_rRAM_1_entry_slot,
		  update_rRAM_1_entry_val,
		  EN_update_rRAM_1,
		  RDY_update_rRAM_1,

		  update_rRAM_2_entry_slot,
		  update_rRAM_2_entry_val,
		  EN_update_rRAM_2,
		  RDY_update_rRAM_2,

		  return_val_in_rRAM_1_entry_slot,
		  return_val_in_rRAM_1,
		  RDY_return_val_in_rRAM_1,

		  return_val_in_rRAM_2_entry_slot,
		  return_val_in_rRAM_2,
		  RDY_return_val_in_rRAM_2,

		  return_whole_rRAM,
		  RDY_return_whole_rRAM);
  input  CLK;
  input  RST_N;

  // action method update_rRAM_1
  input  [4 : 0] update_rRAM_1_entry_slot;
  input  [6 : 0] update_rRAM_1_entry_val;
  input  EN_update_rRAM_1;
  output RDY_update_rRAM_1;

  // action method update_rRAM_2
  input  [4 : 0] update_rRAM_2_entry_slot;
  input  [6 : 0] update_rRAM_2_entry_val;
  input  EN_update_rRAM_2;
  output RDY_update_rRAM_2;

  // value method return_val_in_rRAM_1
  input  [4 : 0] return_val_in_rRAM_1_entry_slot;
  output [6 : 0] return_val_in_rRAM_1;
  output RDY_return_val_in_rRAM_1;

  // value method return_val_in_rRAM_2
  input  [4 : 0] return_val_in_rRAM_2_entry_slot;
  output [6 : 0] return_val_in_rRAM_2;
  output RDY_return_val_in_rRAM_2;

  // value method return_whole_rRAM
  output [223 : 0] return_whole_rRAM;
  output RDY_return_whole_rRAM;

  // signals for module outputs
  reg [6 : 0] return_val_in_rRAM_1, return_val_in_rRAM_2;
  wire [223 : 0] return_whole_rRAM;
  wire RDY_return_val_in_rRAM_1,
       RDY_return_val_in_rRAM_2,
       RDY_return_whole_rRAM,
       RDY_update_rRAM_1,
       RDY_update_rRAM_2;

  // register rRAM_0
  reg [6 : 0] rRAM_0;
  wire [6 : 0] rRAM_0$D_IN;
  wire rRAM_0$EN;

  // register rRAM_1
  reg [6 : 0] rRAM_1;
  wire [6 : 0] rRAM_1$D_IN;
  wire rRAM_1$EN;

  // register rRAM_10
  reg [6 : 0] rRAM_10;
  wire [6 : 0] rRAM_10$D_IN;
  wire rRAM_10$EN;

  // register rRAM_11
  reg [6 : 0] rRAM_11;
  wire [6 : 0] rRAM_11$D_IN;
  wire rRAM_11$EN;

  // register rRAM_12
  reg [6 : 0] rRAM_12;
  wire [6 : 0] rRAM_12$D_IN;
  wire rRAM_12$EN;

  // register rRAM_13
  reg [6 : 0] rRAM_13;
  wire [6 : 0] rRAM_13$D_IN;
  wire rRAM_13$EN;

  // register rRAM_14
  reg [6 : 0] rRAM_14;
  wire [6 : 0] rRAM_14$D_IN;
  wire rRAM_14$EN;

  // register rRAM_15
  reg [6 : 0] rRAM_15;
  wire [6 : 0] rRAM_15$D_IN;
  wire rRAM_15$EN;

  // register rRAM_16
  reg [6 : 0] rRAM_16;
  wire [6 : 0] rRAM_16$D_IN;
  wire rRAM_16$EN;

  // register rRAM_17
  reg [6 : 0] rRAM_17;
  wire [6 : 0] rRAM_17$D_IN;
  wire rRAM_17$EN;

  // register rRAM_18
  reg [6 : 0] rRAM_18;
  wire [6 : 0] rRAM_18$D_IN;
  wire rRAM_18$EN;

  // register rRAM_19
  reg [6 : 0] rRAM_19;
  wire [6 : 0] rRAM_19$D_IN;
  wire rRAM_19$EN;

  // register rRAM_2
  reg [6 : 0] rRAM_2;
  wire [6 : 0] rRAM_2$D_IN;
  wire rRAM_2$EN;

  // register rRAM_20
  reg [6 : 0] rRAM_20;
  wire [6 : 0] rRAM_20$D_IN;
  wire rRAM_20$EN;

  // register rRAM_21
  reg [6 : 0] rRAM_21;
  wire [6 : 0] rRAM_21$D_IN;
  wire rRAM_21$EN;

  // register rRAM_22
  reg [6 : 0] rRAM_22;
  wire [6 : 0] rRAM_22$D_IN;
  wire rRAM_22$EN;

  // register rRAM_23
  reg [6 : 0] rRAM_23;
  wire [6 : 0] rRAM_23$D_IN;
  wire rRAM_23$EN;

  // register rRAM_24
  reg [6 : 0] rRAM_24;
  wire [6 : 0] rRAM_24$D_IN;
  wire rRAM_24$EN;

  // register rRAM_25
  reg [6 : 0] rRAM_25;
  wire [6 : 0] rRAM_25$D_IN;
  wire rRAM_25$EN;

  // register rRAM_26
  reg [6 : 0] rRAM_26;
  wire [6 : 0] rRAM_26$D_IN;
  wire rRAM_26$EN;

  // register rRAM_27
  reg [6 : 0] rRAM_27;
  wire [6 : 0] rRAM_27$D_IN;
  wire rRAM_27$EN;

  // register rRAM_28
  reg [6 : 0] rRAM_28;
  wire [6 : 0] rRAM_28$D_IN;
  wire rRAM_28$EN;

  // register rRAM_29
  reg [6 : 0] rRAM_29;
  wire [6 : 0] rRAM_29$D_IN;
  wire rRAM_29$EN;

  // register rRAM_3
  reg [6 : 0] rRAM_3;
  wire [6 : 0] rRAM_3$D_IN;
  wire rRAM_3$EN;

  // register rRAM_30
  reg [6 : 0] rRAM_30;
  wire [6 : 0] rRAM_30$D_IN;
  wire rRAM_30$EN;

  // register rRAM_31
  reg [6 : 0] rRAM_31;
  wire [6 : 0] rRAM_31$D_IN;
  wire rRAM_31$EN;

  // register rRAM_4
  reg [6 : 0] rRAM_4;
  wire [6 : 0] rRAM_4$D_IN;
  wire rRAM_4$EN;

  // register rRAM_5
  reg [6 : 0] rRAM_5;
  wire [6 : 0] rRAM_5$D_IN;
  wire rRAM_5$EN;

  // register rRAM_6
  reg [6 : 0] rRAM_6;
  wire [6 : 0] rRAM_6$D_IN;
  wire rRAM_6$EN;

  // register rRAM_7
  reg [6 : 0] rRAM_7;
  wire [6 : 0] rRAM_7$D_IN;
  wire rRAM_7$EN;

  // register rRAM_8
  reg [6 : 0] rRAM_8;
  wire [6 : 0] rRAM_8$D_IN;
  wire rRAM_8$EN;

  // register rRAM_9
  reg [6 : 0] rRAM_9;
  wire [6 : 0] rRAM_9$D_IN;
  wire rRAM_9$EN;

  // rule scheduling signals
  wire CAN_FIRE_update_rRAM_1,
       CAN_FIRE_update_rRAM_2,
       WILL_FIRE_update_rRAM_1,
       WILL_FIRE_update_rRAM_2;

  // inputs to muxes for submodule ports
  wire MUX_rRAM_0$write_1__SEL_1,
       MUX_rRAM_1$write_1__SEL_1,
       MUX_rRAM_10$write_1__SEL_1,
       MUX_rRAM_11$write_1__SEL_1,
       MUX_rRAM_12$write_1__SEL_1,
       MUX_rRAM_13$write_1__SEL_1,
       MUX_rRAM_14$write_1__SEL_1,
       MUX_rRAM_15$write_1__SEL_1,
       MUX_rRAM_16$write_1__SEL_1,
       MUX_rRAM_17$write_1__SEL_1,
       MUX_rRAM_18$write_1__SEL_1,
       MUX_rRAM_19$write_1__SEL_1,
       MUX_rRAM_2$write_1__SEL_1,
       MUX_rRAM_20$write_1__SEL_1,
       MUX_rRAM_21$write_1__SEL_1,
       MUX_rRAM_22$write_1__SEL_1,
       MUX_rRAM_23$write_1__SEL_1,
       MUX_rRAM_24$write_1__SEL_1,
       MUX_rRAM_25$write_1__SEL_1,
       MUX_rRAM_26$write_1__SEL_1,
       MUX_rRAM_27$write_1__SEL_1,
       MUX_rRAM_28$write_1__SEL_1,
       MUX_rRAM_29$write_1__SEL_1,
       MUX_rRAM_3$write_1__SEL_1,
       MUX_rRAM_30$write_1__SEL_1,
       MUX_rRAM_31$write_1__SEL_1,
       MUX_rRAM_4$write_1__SEL_1,
       MUX_rRAM_5$write_1__SEL_1,
       MUX_rRAM_6$write_1__SEL_1,
       MUX_rRAM_7$write_1__SEL_1,
       MUX_rRAM_8$write_1__SEL_1,
       MUX_rRAM_9$write_1__SEL_1;

  // action method update_rRAM_1
  assign RDY_update_rRAM_1 = 1'd1 ;
  assign CAN_FIRE_update_rRAM_1 = 1'd1 ;
  assign WILL_FIRE_update_rRAM_1 = EN_update_rRAM_1 ;

  // action method update_rRAM_2
  assign RDY_update_rRAM_2 = 1'd1 ;
  assign CAN_FIRE_update_rRAM_2 = 1'd1 ;
  assign WILL_FIRE_update_rRAM_2 = EN_update_rRAM_2 ;

  // value method return_val_in_rRAM_1
  always@(return_val_in_rRAM_1_entry_slot or
	  rRAM_0 or
	  rRAM_1 or
	  rRAM_2 or
	  rRAM_3 or
	  rRAM_4 or
	  rRAM_5 or
	  rRAM_6 or
	  rRAM_7 or
	  rRAM_8 or
	  rRAM_9 or
	  rRAM_10 or
	  rRAM_11 or
	  rRAM_12 or
	  rRAM_13 or
	  rRAM_14 or
	  rRAM_15 or
	  rRAM_16 or
	  rRAM_17 or
	  rRAM_18 or
	  rRAM_19 or
	  rRAM_20 or
	  rRAM_21 or
	  rRAM_22 or
	  rRAM_23 or
	  rRAM_24 or
	  rRAM_25 or
	  rRAM_26 or rRAM_27 or rRAM_28 or rRAM_29 or rRAM_30 or rRAM_31)
  begin
    case (return_val_in_rRAM_1_entry_slot)
      5'd0: return_val_in_rRAM_1 = rRAM_0;
      5'd1: return_val_in_rRAM_1 = rRAM_1;
      5'd2: return_val_in_rRAM_1 = rRAM_2;
      5'd3: return_val_in_rRAM_1 = rRAM_3;
      5'd4: return_val_in_rRAM_1 = rRAM_4;
      5'd5: return_val_in_rRAM_1 = rRAM_5;
      5'd6: return_val_in_rRAM_1 = rRAM_6;
      5'd7: return_val_in_rRAM_1 = rRAM_7;
      5'd8: return_val_in_rRAM_1 = rRAM_8;
      5'd9: return_val_in_rRAM_1 = rRAM_9;
      5'd10: return_val_in_rRAM_1 = rRAM_10;
      5'd11: return_val_in_rRAM_1 = rRAM_11;
      5'd12: return_val_in_rRAM_1 = rRAM_12;
      5'd13: return_val_in_rRAM_1 = rRAM_13;
      5'd14: return_val_in_rRAM_1 = rRAM_14;
      5'd15: return_val_in_rRAM_1 = rRAM_15;
      5'd16: return_val_in_rRAM_1 = rRAM_16;
      5'd17: return_val_in_rRAM_1 = rRAM_17;
      5'd18: return_val_in_rRAM_1 = rRAM_18;
      5'd19: return_val_in_rRAM_1 = rRAM_19;
      5'd20: return_val_in_rRAM_1 = rRAM_20;
      5'd21: return_val_in_rRAM_1 = rRAM_21;
      5'd22: return_val_in_rRAM_1 = rRAM_22;
      5'd23: return_val_in_rRAM_1 = rRAM_23;
      5'd24: return_val_in_rRAM_1 = rRAM_24;
      5'd25: return_val_in_rRAM_1 = rRAM_25;
      5'd26: return_val_in_rRAM_1 = rRAM_26;
      5'd27: return_val_in_rRAM_1 = rRAM_27;
      5'd28: return_val_in_rRAM_1 = rRAM_28;
      5'd29: return_val_in_rRAM_1 = rRAM_29;
      5'd30: return_val_in_rRAM_1 = rRAM_30;
      5'd31: return_val_in_rRAM_1 = rRAM_31;
    endcase
  end
  assign RDY_return_val_in_rRAM_1 = 1'd1 ;

  // value method return_val_in_rRAM_2
  always@(return_val_in_rRAM_2_entry_slot or
	  rRAM_0 or
	  rRAM_1 or
	  rRAM_2 or
	  rRAM_3 or
	  rRAM_4 or
	  rRAM_5 or
	  rRAM_6 or
	  rRAM_7 or
	  rRAM_8 or
	  rRAM_9 or
	  rRAM_10 or
	  rRAM_11 or
	  rRAM_12 or
	  rRAM_13 or
	  rRAM_14 or
	  rRAM_15 or
	  rRAM_16 or
	  rRAM_17 or
	  rRAM_18 or
	  rRAM_19 or
	  rRAM_20 or
	  rRAM_21 or
	  rRAM_22 or
	  rRAM_23 or
	  rRAM_24 or
	  rRAM_25 or
	  rRAM_26 or rRAM_27 or rRAM_28 or rRAM_29 or rRAM_30 or rRAM_31)
  begin
    case (return_val_in_rRAM_2_entry_slot)
      5'd0: return_val_in_rRAM_2 = rRAM_0;
      5'd1: return_val_in_rRAM_2 = rRAM_1;
      5'd2: return_val_in_rRAM_2 = rRAM_2;
      5'd3: return_val_in_rRAM_2 = rRAM_3;
      5'd4: return_val_in_rRAM_2 = rRAM_4;
      5'd5: return_val_in_rRAM_2 = rRAM_5;
      5'd6: return_val_in_rRAM_2 = rRAM_6;
      5'd7: return_val_in_rRAM_2 = rRAM_7;
      5'd8: return_val_in_rRAM_2 = rRAM_8;
      5'd9: return_val_in_rRAM_2 = rRAM_9;
      5'd10: return_val_in_rRAM_2 = rRAM_10;
      5'd11: return_val_in_rRAM_2 = rRAM_11;
      5'd12: return_val_in_rRAM_2 = rRAM_12;
      5'd13: return_val_in_rRAM_2 = rRAM_13;
      5'd14: return_val_in_rRAM_2 = rRAM_14;
      5'd15: return_val_in_rRAM_2 = rRAM_15;
      5'd16: return_val_in_rRAM_2 = rRAM_16;
      5'd17: return_val_in_rRAM_2 = rRAM_17;
      5'd18: return_val_in_rRAM_2 = rRAM_18;
      5'd19: return_val_in_rRAM_2 = rRAM_19;
      5'd20: return_val_in_rRAM_2 = rRAM_20;
      5'd21: return_val_in_rRAM_2 = rRAM_21;
      5'd22: return_val_in_rRAM_2 = rRAM_22;
      5'd23: return_val_in_rRAM_2 = rRAM_23;
      5'd24: return_val_in_rRAM_2 = rRAM_24;
      5'd25: return_val_in_rRAM_2 = rRAM_25;
      5'd26: return_val_in_rRAM_2 = rRAM_26;
      5'd27: return_val_in_rRAM_2 = rRAM_27;
      5'd28: return_val_in_rRAM_2 = rRAM_28;
      5'd29: return_val_in_rRAM_2 = rRAM_29;
      5'd30: return_val_in_rRAM_2 = rRAM_30;
      5'd31: return_val_in_rRAM_2 = rRAM_31;
    endcase
  end
  assign RDY_return_val_in_rRAM_2 = 1'd1 ;

  // value method return_whole_rRAM
  assign return_whole_rRAM =
	     { rRAM_31,
	       rRAM_30,
	       rRAM_29,
	       rRAM_28,
	       rRAM_27,
	       rRAM_26,
	       rRAM_25,
	       rRAM_24,
	       rRAM_23,
	       rRAM_22,
	       rRAM_21,
	       rRAM_20,
	       rRAM_19,
	       rRAM_18,
	       rRAM_17,
	       rRAM_16,
	       rRAM_15,
	       rRAM_14,
	       rRAM_13,
	       rRAM_12,
	       rRAM_11,
	       rRAM_10,
	       rRAM_9,
	       rRAM_8,
	       rRAM_7,
	       rRAM_6,
	       rRAM_5,
	       rRAM_4,
	       rRAM_3,
	       rRAM_2,
	       rRAM_1,
	       rRAM_0 } ;
  assign RDY_return_whole_rRAM = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_rRAM_0$write_1__SEL_1 =
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd0 ;
  assign MUX_rRAM_1$write_1__SEL_1 =
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd1 ;
  assign MUX_rRAM_10$write_1__SEL_1 =
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd10 ;
  assign MUX_rRAM_11$write_1__SEL_1 =
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd11 ;
  assign MUX_rRAM_12$write_1__SEL_1 =
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd12 ;
  assign MUX_rRAM_13$write_1__SEL_1 =
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd13 ;
  assign MUX_rRAM_14$write_1__SEL_1 =
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd14 ;
  assign MUX_rRAM_15$write_1__SEL_1 =
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd15 ;
  assign MUX_rRAM_16$write_1__SEL_1 =
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd16 ;
  assign MUX_rRAM_17$write_1__SEL_1 =
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd17 ;
  assign MUX_rRAM_18$write_1__SEL_1 =
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd18 ;
  assign MUX_rRAM_19$write_1__SEL_1 =
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd19 ;
  assign MUX_rRAM_2$write_1__SEL_1 =
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd2 ;
  assign MUX_rRAM_20$write_1__SEL_1 =
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd20 ;
  assign MUX_rRAM_21$write_1__SEL_1 =
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd21 ;
  assign MUX_rRAM_22$write_1__SEL_1 =
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd22 ;
  assign MUX_rRAM_23$write_1__SEL_1 =
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd23 ;
  assign MUX_rRAM_24$write_1__SEL_1 =
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd24 ;
  assign MUX_rRAM_25$write_1__SEL_1 =
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd25 ;
  assign MUX_rRAM_26$write_1__SEL_1 =
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd26 ;
  assign MUX_rRAM_27$write_1__SEL_1 =
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd27 ;
  assign MUX_rRAM_28$write_1__SEL_1 =
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd28 ;
  assign MUX_rRAM_29$write_1__SEL_1 =
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd29 ;
  assign MUX_rRAM_3$write_1__SEL_1 =
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd3 ;
  assign MUX_rRAM_30$write_1__SEL_1 =
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd30 ;
  assign MUX_rRAM_31$write_1__SEL_1 =
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd31 ;
  assign MUX_rRAM_4$write_1__SEL_1 =
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd4 ;
  assign MUX_rRAM_5$write_1__SEL_1 =
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd5 ;
  assign MUX_rRAM_6$write_1__SEL_1 =
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd6 ;
  assign MUX_rRAM_7$write_1__SEL_1 =
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd7 ;
  assign MUX_rRAM_8$write_1__SEL_1 =
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd8 ;
  assign MUX_rRAM_9$write_1__SEL_1 =
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd9 ;

  // register rRAM_0
  assign rRAM_0$D_IN =
	     MUX_rRAM_0$write_1__SEL_1 ?
	       update_rRAM_2_entry_val :
	       update_rRAM_1_entry_val ;
  assign rRAM_0$EN =
	     EN_update_rRAM_1 && update_rRAM_1_entry_slot == 5'd0 ||
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd0 ;

  // register rRAM_1
  assign rRAM_1$D_IN =
	     MUX_rRAM_1$write_1__SEL_1 ?
	       update_rRAM_2_entry_val :
	       update_rRAM_1_entry_val ;
  assign rRAM_1$EN =
	     EN_update_rRAM_1 && update_rRAM_1_entry_slot == 5'd1 ||
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd1 ;

  // register rRAM_10
  assign rRAM_10$D_IN =
	     MUX_rRAM_10$write_1__SEL_1 ?
	       update_rRAM_2_entry_val :
	       update_rRAM_1_entry_val ;
  assign rRAM_10$EN =
	     EN_update_rRAM_1 && update_rRAM_1_entry_slot == 5'd10 ||
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd10 ;

  // register rRAM_11
  assign rRAM_11$D_IN =
	     MUX_rRAM_11$write_1__SEL_1 ?
	       update_rRAM_2_entry_val :
	       update_rRAM_1_entry_val ;
  assign rRAM_11$EN =
	     EN_update_rRAM_1 && update_rRAM_1_entry_slot == 5'd11 ||
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd11 ;

  // register rRAM_12
  assign rRAM_12$D_IN =
	     MUX_rRAM_12$write_1__SEL_1 ?
	       update_rRAM_2_entry_val :
	       update_rRAM_1_entry_val ;
  assign rRAM_12$EN =
	     EN_update_rRAM_1 && update_rRAM_1_entry_slot == 5'd12 ||
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd12 ;

  // register rRAM_13
  assign rRAM_13$D_IN =
	     MUX_rRAM_13$write_1__SEL_1 ?
	       update_rRAM_2_entry_val :
	       update_rRAM_1_entry_val ;
  assign rRAM_13$EN =
	     EN_update_rRAM_1 && update_rRAM_1_entry_slot == 5'd13 ||
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd13 ;

  // register rRAM_14
  assign rRAM_14$D_IN =
	     MUX_rRAM_14$write_1__SEL_1 ?
	       update_rRAM_2_entry_val :
	       update_rRAM_1_entry_val ;
  assign rRAM_14$EN =
	     EN_update_rRAM_1 && update_rRAM_1_entry_slot == 5'd14 ||
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd14 ;

  // register rRAM_15
  assign rRAM_15$D_IN =
	     MUX_rRAM_15$write_1__SEL_1 ?
	       update_rRAM_2_entry_val :
	       update_rRAM_1_entry_val ;
  assign rRAM_15$EN =
	     EN_update_rRAM_1 && update_rRAM_1_entry_slot == 5'd15 ||
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd15 ;

  // register rRAM_16
  assign rRAM_16$D_IN =
	     MUX_rRAM_16$write_1__SEL_1 ?
	       update_rRAM_2_entry_val :
	       update_rRAM_1_entry_val ;
  assign rRAM_16$EN =
	     EN_update_rRAM_1 && update_rRAM_1_entry_slot == 5'd16 ||
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd16 ;

  // register rRAM_17
  assign rRAM_17$D_IN =
	     MUX_rRAM_17$write_1__SEL_1 ?
	       update_rRAM_2_entry_val :
	       update_rRAM_1_entry_val ;
  assign rRAM_17$EN =
	     EN_update_rRAM_1 && update_rRAM_1_entry_slot == 5'd17 ||
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd17 ;

  // register rRAM_18
  assign rRAM_18$D_IN =
	     MUX_rRAM_18$write_1__SEL_1 ?
	       update_rRAM_2_entry_val :
	       update_rRAM_1_entry_val ;
  assign rRAM_18$EN =
	     EN_update_rRAM_1 && update_rRAM_1_entry_slot == 5'd18 ||
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd18 ;

  // register rRAM_19
  assign rRAM_19$D_IN =
	     MUX_rRAM_19$write_1__SEL_1 ?
	       update_rRAM_2_entry_val :
	       update_rRAM_1_entry_val ;
  assign rRAM_19$EN =
	     EN_update_rRAM_1 && update_rRAM_1_entry_slot == 5'd19 ||
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd19 ;

  // register rRAM_2
  assign rRAM_2$D_IN =
	     MUX_rRAM_2$write_1__SEL_1 ?
	       update_rRAM_2_entry_val :
	       update_rRAM_1_entry_val ;
  assign rRAM_2$EN =
	     EN_update_rRAM_1 && update_rRAM_1_entry_slot == 5'd2 ||
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd2 ;

  // register rRAM_20
  assign rRAM_20$D_IN =
	     MUX_rRAM_20$write_1__SEL_1 ?
	       update_rRAM_2_entry_val :
	       update_rRAM_1_entry_val ;
  assign rRAM_20$EN =
	     EN_update_rRAM_1 && update_rRAM_1_entry_slot == 5'd20 ||
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd20 ;

  // register rRAM_21
  assign rRAM_21$D_IN =
	     MUX_rRAM_21$write_1__SEL_1 ?
	       update_rRAM_2_entry_val :
	       update_rRAM_1_entry_val ;
  assign rRAM_21$EN =
	     EN_update_rRAM_1 && update_rRAM_1_entry_slot == 5'd21 ||
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd21 ;

  // register rRAM_22
  assign rRAM_22$D_IN =
	     MUX_rRAM_22$write_1__SEL_1 ?
	       update_rRAM_2_entry_val :
	       update_rRAM_1_entry_val ;
  assign rRAM_22$EN =
	     EN_update_rRAM_1 && update_rRAM_1_entry_slot == 5'd22 ||
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd22 ;

  // register rRAM_23
  assign rRAM_23$D_IN =
	     MUX_rRAM_23$write_1__SEL_1 ?
	       update_rRAM_2_entry_val :
	       update_rRAM_1_entry_val ;
  assign rRAM_23$EN =
	     EN_update_rRAM_1 && update_rRAM_1_entry_slot == 5'd23 ||
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd23 ;

  // register rRAM_24
  assign rRAM_24$D_IN =
	     MUX_rRAM_24$write_1__SEL_1 ?
	       update_rRAM_2_entry_val :
	       update_rRAM_1_entry_val ;
  assign rRAM_24$EN =
	     EN_update_rRAM_1 && update_rRAM_1_entry_slot == 5'd24 ||
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd24 ;

  // register rRAM_25
  assign rRAM_25$D_IN =
	     MUX_rRAM_25$write_1__SEL_1 ?
	       update_rRAM_2_entry_val :
	       update_rRAM_1_entry_val ;
  assign rRAM_25$EN =
	     EN_update_rRAM_1 && update_rRAM_1_entry_slot == 5'd25 ||
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd25 ;

  // register rRAM_26
  assign rRAM_26$D_IN =
	     MUX_rRAM_26$write_1__SEL_1 ?
	       update_rRAM_2_entry_val :
	       update_rRAM_1_entry_val ;
  assign rRAM_26$EN =
	     EN_update_rRAM_1 && update_rRAM_1_entry_slot == 5'd26 ||
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd26 ;

  // register rRAM_27
  assign rRAM_27$D_IN =
	     MUX_rRAM_27$write_1__SEL_1 ?
	       update_rRAM_2_entry_val :
	       update_rRAM_1_entry_val ;
  assign rRAM_27$EN =
	     EN_update_rRAM_1 && update_rRAM_1_entry_slot == 5'd27 ||
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd27 ;

  // register rRAM_28
  assign rRAM_28$D_IN =
	     MUX_rRAM_28$write_1__SEL_1 ?
	       update_rRAM_2_entry_val :
	       update_rRAM_1_entry_val ;
  assign rRAM_28$EN =
	     EN_update_rRAM_1 && update_rRAM_1_entry_slot == 5'd28 ||
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd28 ;

  // register rRAM_29
  assign rRAM_29$D_IN =
	     MUX_rRAM_29$write_1__SEL_1 ?
	       update_rRAM_2_entry_val :
	       update_rRAM_1_entry_val ;
  assign rRAM_29$EN =
	     EN_update_rRAM_1 && update_rRAM_1_entry_slot == 5'd29 ||
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd29 ;

  // register rRAM_3
  assign rRAM_3$D_IN =
	     MUX_rRAM_3$write_1__SEL_1 ?
	       update_rRAM_2_entry_val :
	       update_rRAM_1_entry_val ;
  assign rRAM_3$EN =
	     EN_update_rRAM_1 && update_rRAM_1_entry_slot == 5'd3 ||
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd3 ;

  // register rRAM_30
  assign rRAM_30$D_IN =
	     MUX_rRAM_30$write_1__SEL_1 ?
	       update_rRAM_2_entry_val :
	       update_rRAM_1_entry_val ;
  assign rRAM_30$EN =
	     EN_update_rRAM_1 && update_rRAM_1_entry_slot == 5'd30 ||
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd30 ;

  // register rRAM_31
  assign rRAM_31$D_IN =
	     MUX_rRAM_31$write_1__SEL_1 ?
	       update_rRAM_2_entry_val :
	       update_rRAM_1_entry_val ;
  assign rRAM_31$EN =
	     EN_update_rRAM_1 && update_rRAM_1_entry_slot == 5'd31 ||
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd31 ;

  // register rRAM_4
  assign rRAM_4$D_IN =
	     MUX_rRAM_4$write_1__SEL_1 ?
	       update_rRAM_2_entry_val :
	       update_rRAM_1_entry_val ;
  assign rRAM_4$EN =
	     EN_update_rRAM_1 && update_rRAM_1_entry_slot == 5'd4 ||
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd4 ;

  // register rRAM_5
  assign rRAM_5$D_IN =
	     MUX_rRAM_5$write_1__SEL_1 ?
	       update_rRAM_2_entry_val :
	       update_rRAM_1_entry_val ;
  assign rRAM_5$EN =
	     EN_update_rRAM_1 && update_rRAM_1_entry_slot == 5'd5 ||
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd5 ;

  // register rRAM_6
  assign rRAM_6$D_IN =
	     MUX_rRAM_6$write_1__SEL_1 ?
	       update_rRAM_2_entry_val :
	       update_rRAM_1_entry_val ;
  assign rRAM_6$EN =
	     EN_update_rRAM_1 && update_rRAM_1_entry_slot == 5'd6 ||
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd6 ;

  // register rRAM_7
  assign rRAM_7$D_IN =
	     MUX_rRAM_7$write_1__SEL_1 ?
	       update_rRAM_2_entry_val :
	       update_rRAM_1_entry_val ;
  assign rRAM_7$EN =
	     EN_update_rRAM_1 && update_rRAM_1_entry_slot == 5'd7 ||
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd7 ;

  // register rRAM_8
  assign rRAM_8$D_IN =
	     MUX_rRAM_8$write_1__SEL_1 ?
	       update_rRAM_2_entry_val :
	       update_rRAM_1_entry_val ;
  assign rRAM_8$EN =
	     EN_update_rRAM_1 && update_rRAM_1_entry_slot == 5'd8 ||
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd8 ;

  // register rRAM_9
  assign rRAM_9$D_IN =
	     MUX_rRAM_9$write_1__SEL_1 ?
	       update_rRAM_2_entry_val :
	       update_rRAM_1_entry_val ;
  assign rRAM_9$EN =
	     EN_update_rRAM_1 && update_rRAM_1_entry_slot == 5'd9 ||
	     EN_update_rRAM_2 && update_rRAM_2_entry_slot == 5'd9 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rRAM_0 <= `BSV_ASSIGNMENT_DELAY 7'd0;
	rRAM_1 <= `BSV_ASSIGNMENT_DELAY 7'd1;
	rRAM_10 <= `BSV_ASSIGNMENT_DELAY 7'd10;
	rRAM_11 <= `BSV_ASSIGNMENT_DELAY 7'd11;
	rRAM_12 <= `BSV_ASSIGNMENT_DELAY 7'd12;
	rRAM_13 <= `BSV_ASSIGNMENT_DELAY 7'd13;
	rRAM_14 <= `BSV_ASSIGNMENT_DELAY 7'd14;
	rRAM_15 <= `BSV_ASSIGNMENT_DELAY 7'd15;
	rRAM_16 <= `BSV_ASSIGNMENT_DELAY 7'd16;
	rRAM_17 <= `BSV_ASSIGNMENT_DELAY 7'd17;
	rRAM_18 <= `BSV_ASSIGNMENT_DELAY 7'd18;
	rRAM_19 <= `BSV_ASSIGNMENT_DELAY 7'd19;
	rRAM_2 <= `BSV_ASSIGNMENT_DELAY 7'd2;
	rRAM_20 <= `BSV_ASSIGNMENT_DELAY 7'd20;
	rRAM_21 <= `BSV_ASSIGNMENT_DELAY 7'd21;
	rRAM_22 <= `BSV_ASSIGNMENT_DELAY 7'd22;
	rRAM_23 <= `BSV_ASSIGNMENT_DELAY 7'd23;
	rRAM_24 <= `BSV_ASSIGNMENT_DELAY 7'd24;
	rRAM_25 <= `BSV_ASSIGNMENT_DELAY 7'd25;
	rRAM_26 <= `BSV_ASSIGNMENT_DELAY 7'd26;
	rRAM_27 <= `BSV_ASSIGNMENT_DELAY 7'd27;
	rRAM_28 <= `BSV_ASSIGNMENT_DELAY 7'd28;
	rRAM_29 <= `BSV_ASSIGNMENT_DELAY 7'd29;
	rRAM_3 <= `BSV_ASSIGNMENT_DELAY 7'd3;
	rRAM_30 <= `BSV_ASSIGNMENT_DELAY 7'd30;
	rRAM_31 <= `BSV_ASSIGNMENT_DELAY 7'd31;
	rRAM_4 <= `BSV_ASSIGNMENT_DELAY 7'd4;
	rRAM_5 <= `BSV_ASSIGNMENT_DELAY 7'd5;
	rRAM_6 <= `BSV_ASSIGNMENT_DELAY 7'd6;
	rRAM_7 <= `BSV_ASSIGNMENT_DELAY 7'd7;
	rRAM_8 <= `BSV_ASSIGNMENT_DELAY 7'd8;
	rRAM_9 <= `BSV_ASSIGNMENT_DELAY 7'd9;
      end
    else
      begin
        if (rRAM_0$EN) rRAM_0 <= `BSV_ASSIGNMENT_DELAY rRAM_0$D_IN;
	if (rRAM_1$EN) rRAM_1 <= `BSV_ASSIGNMENT_DELAY rRAM_1$D_IN;
	if (rRAM_10$EN) rRAM_10 <= `BSV_ASSIGNMENT_DELAY rRAM_10$D_IN;
	if (rRAM_11$EN) rRAM_11 <= `BSV_ASSIGNMENT_DELAY rRAM_11$D_IN;
	if (rRAM_12$EN) rRAM_12 <= `BSV_ASSIGNMENT_DELAY rRAM_12$D_IN;
	if (rRAM_13$EN) rRAM_13 <= `BSV_ASSIGNMENT_DELAY rRAM_13$D_IN;
	if (rRAM_14$EN) rRAM_14 <= `BSV_ASSIGNMENT_DELAY rRAM_14$D_IN;
	if (rRAM_15$EN) rRAM_15 <= `BSV_ASSIGNMENT_DELAY rRAM_15$D_IN;
	if (rRAM_16$EN) rRAM_16 <= `BSV_ASSIGNMENT_DELAY rRAM_16$D_IN;
	if (rRAM_17$EN) rRAM_17 <= `BSV_ASSIGNMENT_DELAY rRAM_17$D_IN;
	if (rRAM_18$EN) rRAM_18 <= `BSV_ASSIGNMENT_DELAY rRAM_18$D_IN;
	if (rRAM_19$EN) rRAM_19 <= `BSV_ASSIGNMENT_DELAY rRAM_19$D_IN;
	if (rRAM_2$EN) rRAM_2 <= `BSV_ASSIGNMENT_DELAY rRAM_2$D_IN;
	if (rRAM_20$EN) rRAM_20 <= `BSV_ASSIGNMENT_DELAY rRAM_20$D_IN;
	if (rRAM_21$EN) rRAM_21 <= `BSV_ASSIGNMENT_DELAY rRAM_21$D_IN;
	if (rRAM_22$EN) rRAM_22 <= `BSV_ASSIGNMENT_DELAY rRAM_22$D_IN;
	if (rRAM_23$EN) rRAM_23 <= `BSV_ASSIGNMENT_DELAY rRAM_23$D_IN;
	if (rRAM_24$EN) rRAM_24 <= `BSV_ASSIGNMENT_DELAY rRAM_24$D_IN;
	if (rRAM_25$EN) rRAM_25 <= `BSV_ASSIGNMENT_DELAY rRAM_25$D_IN;
	if (rRAM_26$EN) rRAM_26 <= `BSV_ASSIGNMENT_DELAY rRAM_26$D_IN;
	if (rRAM_27$EN) rRAM_27 <= `BSV_ASSIGNMENT_DELAY rRAM_27$D_IN;
	if (rRAM_28$EN) rRAM_28 <= `BSV_ASSIGNMENT_DELAY rRAM_28$D_IN;
	if (rRAM_29$EN) rRAM_29 <= `BSV_ASSIGNMENT_DELAY rRAM_29$D_IN;
	if (rRAM_3$EN) rRAM_3 <= `BSV_ASSIGNMENT_DELAY rRAM_3$D_IN;
	if (rRAM_30$EN) rRAM_30 <= `BSV_ASSIGNMENT_DELAY rRAM_30$D_IN;
	if (rRAM_31$EN) rRAM_31 <= `BSV_ASSIGNMENT_DELAY rRAM_31$D_IN;
	if (rRAM_4$EN) rRAM_4 <= `BSV_ASSIGNMENT_DELAY rRAM_4$D_IN;
	if (rRAM_5$EN) rRAM_5 <= `BSV_ASSIGNMENT_DELAY rRAM_5$D_IN;
	if (rRAM_6$EN) rRAM_6 <= `BSV_ASSIGNMENT_DELAY rRAM_6$D_IN;
	if (rRAM_7$EN) rRAM_7 <= `BSV_ASSIGNMENT_DELAY rRAM_7$D_IN;
	if (rRAM_8$EN) rRAM_8 <= `BSV_ASSIGNMENT_DELAY rRAM_8$D_IN;
	if (rRAM_9$EN) rRAM_9 <= `BSV_ASSIGNMENT_DELAY rRAM_9$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rRAM_0 = 7'h2A;
    rRAM_1 = 7'h2A;
    rRAM_10 = 7'h2A;
    rRAM_11 = 7'h2A;
    rRAM_12 = 7'h2A;
    rRAM_13 = 7'h2A;
    rRAM_14 = 7'h2A;
    rRAM_15 = 7'h2A;
    rRAM_16 = 7'h2A;
    rRAM_17 = 7'h2A;
    rRAM_18 = 7'h2A;
    rRAM_19 = 7'h2A;
    rRAM_2 = 7'h2A;
    rRAM_20 = 7'h2A;
    rRAM_21 = 7'h2A;
    rRAM_22 = 7'h2A;
    rRAM_23 = 7'h2A;
    rRAM_24 = 7'h2A;
    rRAM_25 = 7'h2A;
    rRAM_26 = 7'h2A;
    rRAM_27 = 7'h2A;
    rRAM_28 = 7'h2A;
    rRAM_29 = 7'h2A;
    rRAM_3 = 7'h2A;
    rRAM_30 = 7'h2A;
    rRAM_31 = 7'h2A;
    rRAM_4 = 7'h2A;
    rRAM_5 = 7'h2A;
    rRAM_6 = 7'h2A;
    rRAM_7 = 7'h2A;
    rRAM_8 = 7'h2A;
    rRAM_9 = 7'h2A;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkPrf_rRAM

