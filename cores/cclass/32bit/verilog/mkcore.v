//
// Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
//
// On Tue Mar 28 10:03:41 IST 2017
//
//
// Ports:
// Name                         I/O  size props
// RDY_sin                        O     1 const
// sout                           O     1 reg
// RDY_sout                       O     1 const
// RDY_mtip                       O     1 const
// bus_rd_ifc_tx_get              O   100
// RDY_bus_rd_ifc_tx_get          O     1
// RDY_bus_rd_ifc_rx_put          O     1
// bus_wr_ifc_tx_get              O   100
// RDY_bus_wr_ifc_tx_get          O     1
// RDY_bus_wr_ifc_rx_put          O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// sin_in                         I     1 reg
// mtip_mtip                      I     1
// bus_rd_ifc_rx_put              I    53
// bus_wr_ifc_rx_put              I    53
// EN_sin                         I     1
// EN_mtip                        I     1
// EN_bus_rd_ifc_rx_put           I     1
// EN_bus_wr_ifc_rx_put           I     1
// EN_bus_rd_ifc_tx_get           I     1
// EN_bus_wr_ifc_tx_get           I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkcore(CLK,
	      RST_N,

	      sin_in,
	      EN_sin,
	      RDY_sin,

	      sout,
	      RDY_sout,

	      mtip_mtip,
	      EN_mtip,
	      RDY_mtip,

	      EN_bus_rd_ifc_tx_get,
	      bus_rd_ifc_tx_get,
	      RDY_bus_rd_ifc_tx_get,

	      bus_rd_ifc_rx_put,
	      EN_bus_rd_ifc_rx_put,
	      RDY_bus_rd_ifc_rx_put,

	      EN_bus_wr_ifc_tx_get,
	      bus_wr_ifc_tx_get,
	      RDY_bus_wr_ifc_tx_get,

	      bus_wr_ifc_rx_put,
	      EN_bus_wr_ifc_rx_put,
	      RDY_bus_wr_ifc_rx_put);
  input  CLK;
  input  RST_N;

  // action method sin
  input  sin_in;
  input  EN_sin;
  output RDY_sin;

  // value method sout
  output sout;
  output RDY_sout;

  // action method mtip
  input  mtip_mtip;
  input  EN_mtip;
  output RDY_mtip;

  // actionvalue method bus_rd_ifc_tx_get
  input  EN_bus_rd_ifc_tx_get;
  output [99 : 0] bus_rd_ifc_tx_get;
  output RDY_bus_rd_ifc_tx_get;

  // action method bus_rd_ifc_rx_put
  input  [52 : 0] bus_rd_ifc_rx_put;
  input  EN_bus_rd_ifc_rx_put;
  output RDY_bus_rd_ifc_rx_put;

  // actionvalue method bus_wr_ifc_tx_get
  input  EN_bus_wr_ifc_tx_get;
  output [99 : 0] bus_wr_ifc_tx_get;
  output RDY_bus_wr_ifc_tx_get;

  // action method bus_wr_ifc_rx_put
  input  [52 : 0] bus_wr_ifc_rx_put;
  input  EN_bus_wr_ifc_rx_put;
  output RDY_bus_wr_ifc_rx_put;

  // signals for module outputs
  wire [99 : 0] bus_rd_ifc_tx_get, bus_wr_ifc_tx_get;
  wire RDY_bus_rd_ifc_rx_put,
       RDY_bus_rd_ifc_tx_get,
       RDY_bus_wr_ifc_rx_put,
       RDY_bus_wr_ifc_tx_get,
       RDY_mtip,
       RDY_sin,
       RDY_sout,
       sout;

  // inlined wires
  wire [100 : 0] req_to_memory_read_rv$port0__write_1,
		 req_to_memory_read_rv$port1__read,
		 req_to_memory_read_rv$port1__write_1,
		 req_to_memory_read_rv$port2__read,
		 req_to_memory_write_rv$port0__write_1,
		 req_to_memory_write_rv$port1__read,
		 req_to_memory_write_rv$port2__read;
  wire [53 : 0] rsp_to_core_read_rv$port0__write_1,
		rsp_to_core_read_rv$port1__read,
		rsp_to_core_read_rv$port1__write_1,
		rsp_to_core_read_rv$port2__read,
		rsp_to_core_write_rv$port0__write_1,
		rsp_to_core_write_rv$port1__read,
		rsp_to_core_write_rv$port2__read;
  wire [3 : 0] count$port0__write_1, count$port1__write_1, count$port2__read;
  wire count$EN_port0__write,
       req_to_memory_read_rv$EN_port0__write,
       req_to_memory_write_rv$EN_port0__write;

  // register count
  reg [3 : 0] count;
  wire [3 : 0] count$D_IN;
  wire count$EN;

  // register req_to_memory_read_rv
  reg [100 : 0] req_to_memory_read_rv;
  wire [100 : 0] req_to_memory_read_rv$D_IN;
  wire req_to_memory_read_rv$EN;

  // register req_to_memory_write_rv
  reg [100 : 0] req_to_memory_write_rv;
  wire [100 : 0] req_to_memory_write_rv$D_IN;
  wire req_to_memory_write_rv$EN;

  // register rg_address
  reg [31 : 0] rg_address;
  reg [31 : 0] rg_address$D_IN;
  wire rg_address$EN;

  // register rg_burst_length
  reg [4 : 0] rg_burst_length;
  wire [4 : 0] rg_burst_length$D_IN;
  wire rg_burst_length$EN;

  // register rg_burst_mode
  reg [1 : 0] rg_burst_mode;
  wire [1 : 0] rg_burst_mode$D_IN;
  wire rg_burst_mode$EN;

  // register rg_burst_size
  reg [1 : 0] rg_burst_size;
  wire [1 : 0] rg_burst_size$D_IN;
  wire rg_burst_size$EN;

  // register rg_data_line
  reg [256 : 0] rg_data_line;
  wire [256 : 0] rg_data_line$D_IN;
  wire rg_data_line$EN;

  // register rg_need_to_drop_incoming_data
  reg rg_need_to_drop_incoming_data;
  wire rg_need_to_drop_incoming_data$D_IN, rg_need_to_drop_incoming_data$EN;

  // register rg_state
  reg [1 : 0] rg_state;
  reg [1 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // register rg_write_burst
  reg [4 : 0] rg_write_burst;
  wire [4 : 0] rg_write_burst$D_IN;
  wire rg_write_burst$EN;

  // register rsp_to_core_read_rv
  reg [53 : 0] rsp_to_core_read_rv;
  wire [53 : 0] rsp_to_core_read_rv$D_IN;
  wire rsp_to_core_read_rv$EN;

  // register rsp_to_core_write_rv
  reg [53 : 0] rsp_to_core_write_rv;
  wire [53 : 0] rsp_to_core_write_rv$D_IN;
  wire rsp_to_core_write_rv$EN;

  // ports of submodule core
  wire [296 : 0] core$dcache_request_to_memory_read,
		 core$dcache_request_to_memory_write;
  wire [65 : 0] core$dcache_response_from_memory_read_mem_data,
		core$dcache_response_from_memory_write_mem_data;
  wire [64 : 0] core$_instruction_inputs_mem_data;
  wire [38 : 0] core$instruction_outputs_;
  wire core$EN__instruction_inputs,
       core$EN_dcache_request_to_memory_read,
       core$EN_dcache_request_to_memory_write,
       core$EN_dcache_response_from_memory_read,
       core$EN_dcache_response_from_memory_write,
       core$EN_instruction_outputs_,
       core$EN_mtip,
       core$EN_sin,
       core$RDY__instruction_inputs,
       core$RDY_dcache_request_to_memory_read,
       core$RDY_dcache_request_to_memory_write,
       core$RDY_dcache_response_from_memory_read,
       core$RDY_dcache_response_from_memory_write,
       core$RDY_instruction_outputs_,
       core$_instruction_inputs,
       core$dcache_response_from_memory_read,
       core$mtip_mtip1,
       core$sin_in,
       core$sout;

  // rule scheduling signals
  wire CAN_FIRE_RL_check_read_request_to_memory_from_dcache,
       CAN_FIRE_RL_check_write_request_to_memory_from_dcache,
       CAN_FIRE_RL_read_request_from_icache,
       CAN_FIRE_RL_send_next_data_words,
       CAN_FIRE_RL_send_read_response_from_memory_to_data,
       CAN_FIRE_RL_send_response_from_memory_to_instruction,
       CAN_FIRE_RL_send_write_response_from_memory_to_data,
       CAN_FIRE_bus_rd_ifc_rx_put,
       CAN_FIRE_bus_rd_ifc_tx_get,
       CAN_FIRE_bus_wr_ifc_rx_put,
       CAN_FIRE_bus_wr_ifc_tx_get,
       CAN_FIRE_mtip,
       CAN_FIRE_sin,
       WILL_FIRE_RL_check_read_request_to_memory_from_dcache,
       WILL_FIRE_RL_check_write_request_to_memory_from_dcache,
       WILL_FIRE_RL_read_request_from_icache,
       WILL_FIRE_RL_send_next_data_words,
       WILL_FIRE_RL_send_read_response_from_memory_to_data,
       WILL_FIRE_RL_send_response_from_memory_to_instruction,
       WILL_FIRE_RL_send_write_response_from_memory_to_data,
       WILL_FIRE_bus_rd_ifc_rx_put,
       WILL_FIRE_bus_rd_ifc_tx_get,
       WILL_FIRE_bus_wr_ifc_rx_put,
       WILL_FIRE_bus_wr_ifc_tx_get,
       WILL_FIRE_mtip,
       WILL_FIRE_sin;

  // inputs to muxes for submodule ports
  wire [256 : 0] MUX_rg_data_line$write_1__VAL_1,
		 MUX_rg_data_line$write_1__VAL_2;
  wire [100 : 0] MUX_req_to_memory_read_rv$port0__write_1__VAL_1,
		 MUX_req_to_memory_read_rv$port0__write_1__VAL_2,
		 MUX_req_to_memory_write_rv$port0__write_1__VAL_1,
		 MUX_req_to_memory_write_rv$port0__write_1__VAL_2;
  wire [31 : 0] MUX_rg_address$write_1__VAL_3;
  wire [4 : 0] MUX_rg_write_burst$write_1__VAL_1;
  wire MUX_req_to_memory_write_rv$port0__write_1__SEL_1,
       MUX_rg_address$write_1__SEL_3,
       MUX_rg_state$write_1__SEL_1,
       MUX_rg_state$write_1__SEL_2;

  // remaining internal signals
  reg [63 : 0] v__h1842,
	       v__h2388,
	       v__h2696,
	       v__h3322,
	       v__h3974,
	       v__h4281,
	       v__h4956;
  reg [31 : 0] CASE_rg_burst_length_4_IF_rg_burst_size_00_EQ__ETC__q1,
	       IF_rg_burst_size_00_EQ_0_06_THEN_rg_address_9__ETC___d125,
	       IF_rg_burst_size_00_EQ_0_06_THEN_rg_address_9__ETC___d138;
  wire [31 : 0] IF_rg_burst_mode_6_EQ_1_04_THEN_IF_rg_burst_le_ETC___d141,
		new_addr___1__h4469,
		x__h4486,
		y__h4488;
  wire [3 : 0] x__h2519;
  wire [2 : 0] spliced_bits__h4498, spliced_bits__h4569, spliced_bits__h4642;
  wire [1 : 0] burst_size__h1661,
	       request_to_mem_burst_size__h2196,
	       spliced_bits__h4719,
	       spliced_bits__h4790,
	       spliced_bits__h4863;
  wire x__h4340;

  // action method sin
  assign RDY_sin = 1'd1 ;
  assign CAN_FIRE_sin = 1'd1 ;
  assign WILL_FIRE_sin = EN_sin ;

  // value method sout
  assign sout = core$sout ;
  assign RDY_sout = 1'd1 ;

  // action method mtip
  assign RDY_mtip = 1'd1 ;
  assign CAN_FIRE_mtip = 1'd1 ;
  assign WILL_FIRE_mtip = EN_mtip ;

  // actionvalue method bus_rd_ifc_tx_get
  assign bus_rd_ifc_tx_get = req_to_memory_read_rv$port1__read[99:0] ;
  assign RDY_bus_rd_ifc_tx_get = req_to_memory_read_rv$port1__read[100] ;
  assign CAN_FIRE_bus_rd_ifc_tx_get = req_to_memory_read_rv$port1__read[100] ;
  assign WILL_FIRE_bus_rd_ifc_tx_get = EN_bus_rd_ifc_tx_get ;

  // action method bus_rd_ifc_rx_put
  assign RDY_bus_rd_ifc_rx_put = !rsp_to_core_read_rv[53] ;
  assign CAN_FIRE_bus_rd_ifc_rx_put = !rsp_to_core_read_rv[53] ;
  assign WILL_FIRE_bus_rd_ifc_rx_put = EN_bus_rd_ifc_rx_put ;

  // actionvalue method bus_wr_ifc_tx_get
  assign bus_wr_ifc_tx_get = req_to_memory_write_rv$port1__read[99:0] ;
  assign RDY_bus_wr_ifc_tx_get = req_to_memory_write_rv$port1__read[100] ;
  assign CAN_FIRE_bus_wr_ifc_tx_get =
	     req_to_memory_write_rv$port1__read[100] ;
  assign WILL_FIRE_bus_wr_ifc_tx_get = EN_bus_wr_ifc_tx_get ;

  // action method bus_wr_ifc_rx_put
  assign RDY_bus_wr_ifc_rx_put = !rsp_to_core_write_rv[53] ;
  assign CAN_FIRE_bus_wr_ifc_rx_put = !rsp_to_core_write_rv[53] ;
  assign WILL_FIRE_bus_wr_ifc_rx_put = EN_bus_wr_ifc_rx_put ;

  // submodule core
  mkriscv core(.CLK(CLK),
	       .RST_N(RST_N),
	       ._instruction_inputs_mem_data(core$_instruction_inputs_mem_data),
	       .dcache_response_from_memory_read_mem_data(core$dcache_response_from_memory_read_mem_data),
	       .dcache_response_from_memory_write_mem_data(core$dcache_response_from_memory_write_mem_data),
	       .mtip_mtip1(core$mtip_mtip1),
	       .sin_in(core$sin_in),
	       .EN__instruction_inputs(core$EN__instruction_inputs),
	       .EN_instruction_outputs_(core$EN_instruction_outputs_),
	       .EN_dcache_response_from_memory_read(core$EN_dcache_response_from_memory_read),
	       .EN_dcache_response_from_memory_write(core$EN_dcache_response_from_memory_write),
	       .EN_dcache_request_to_memory_read(core$EN_dcache_request_to_memory_read),
	       .EN_dcache_request_to_memory_write(core$EN_dcache_request_to_memory_write),
	       .EN_sin(core$EN_sin),
	       .EN_mtip(core$EN_mtip),
	       ._instruction_inputs(core$_instruction_inputs),
	       .RDY__instruction_inputs(core$RDY__instruction_inputs),
	       .instruction_outputs_(core$instruction_outputs_),
	       .RDY_instruction_outputs_(core$RDY_instruction_outputs_),
	       .dcache_response_from_memory_read(core$dcache_response_from_memory_read),
	       .RDY_dcache_response_from_memory_read(core$RDY_dcache_response_from_memory_read),
	       .dcache_response_from_memory_write(),
	       .RDY_dcache_response_from_memory_write(core$RDY_dcache_response_from_memory_write),
	       .dcache_request_to_memory_read(core$dcache_request_to_memory_read),
	       .RDY_dcache_request_to_memory_read(core$RDY_dcache_request_to_memory_read),
	       .dcache_request_to_memory_write(core$dcache_request_to_memory_write),
	       .RDY_dcache_request_to_memory_write(core$RDY_dcache_request_to_memory_write),
	       .RDY_sin(),
	       .sout(core$sout),
	       .RDY_sout(),
	       .RDY_mtip());

  // rule RL_check_read_request_to_memory_from_dcache
  assign CAN_FIRE_RL_check_read_request_to_memory_from_dcache =
	     core$RDY_dcache_request_to_memory_read &&
	     !req_to_memory_read_rv[100] &&
	     rg_state == 2'd2 ;
  assign WILL_FIRE_RL_check_read_request_to_memory_from_dcache =
	     CAN_FIRE_RL_check_read_request_to_memory_from_dcache ;

  // rule RL_send_next_data_words
  assign CAN_FIRE_RL_send_next_data_words =
	     !req_to_memory_write_rv[100] && rg_data_line[256] ;
  assign WILL_FIRE_RL_send_next_data_words =
	     CAN_FIRE_RL_send_next_data_words ;

  // rule RL_read_request_from_icache
  assign CAN_FIRE_RL_read_request_from_icache =
	     core$RDY_instruction_outputs_ && !req_to_memory_read_rv[100] &&
	     rg_state == 2'd2 ;
  assign WILL_FIRE_RL_read_request_from_icache =
	     CAN_FIRE_RL_read_request_from_icache &&
	     !WILL_FIRE_RL_check_read_request_to_memory_from_dcache ;

  // rule RL_check_write_request_to_memory_from_dcache
  assign CAN_FIRE_RL_check_write_request_to_memory_from_dcache =
	     core$RDY_dcache_request_to_memory_write &&
	     !req_to_memory_write_rv[100] &&
	     !rg_data_line[256] ;
  assign WILL_FIRE_RL_check_write_request_to_memory_from_dcache =
	     CAN_FIRE_RL_check_write_request_to_memory_from_dcache ;

  // rule RL_send_write_response_from_memory_to_data
  assign CAN_FIRE_RL_send_write_response_from_memory_to_data =
	     rsp_to_core_write_rv$port1__read[53] &&
	     core$RDY_dcache_response_from_memory_write &&
	     rg_state == 2'd0 ;
  assign WILL_FIRE_RL_send_write_response_from_memory_to_data =
	     CAN_FIRE_RL_send_write_response_from_memory_to_data ;

  // rule RL_send_read_response_from_memory_to_data
  assign CAN_FIRE_RL_send_read_response_from_memory_to_data =
	     rsp_to_core_read_rv$port1__read[53] &&
	     core$RDY_dcache_response_from_memory_read &&
	     rg_state == 2'd0 ;
  assign WILL_FIRE_RL_send_read_response_from_memory_to_data =
	     CAN_FIRE_RL_send_read_response_from_memory_to_data ;

  // rule RL_send_response_from_memory_to_instruction
  assign CAN_FIRE_RL_send_response_from_memory_to_instruction =
	     rsp_to_core_read_rv$port1__read[53] &&
	     core$RDY__instruction_inputs &&
	     rg_state == 2'd1 ;
  assign WILL_FIRE_RL_send_response_from_memory_to_instruction =
	     CAN_FIRE_RL_send_response_from_memory_to_instruction ;

  // inputs to muxes for submodule ports
  assign MUX_req_to_memory_write_rv$port0__write_1__SEL_1 =
	     WILL_FIRE_RL_send_next_data_words && rg_write_burst != 5'd1 ;
  assign MUX_rg_address$write_1__SEL_3 =
	     WILL_FIRE_RL_send_response_from_memory_to_instruction ||
	     WILL_FIRE_RL_send_read_response_from_memory_to_data ;
  assign MUX_rg_state$write_1__SEL_1 =
	     WILL_FIRE_RL_send_read_response_from_memory_to_data &&
	     (core$dcache_response_from_memory_read ||
	      rg_burst_length == 5'd1) ;
  assign MUX_rg_state$write_1__SEL_2 =
	     WILL_FIRE_RL_send_response_from_memory_to_instruction &&
	     (core$_instruction_inputs || rg_burst_length == 5'd1) ;
  assign MUX_req_to_memory_read_rv$port0__write_1__VAL_1 =
	     { 4'd8,
	       2'b10 /* unspecified value */ ,
	       core$dcache_request_to_memory_read[296:265],
	       32'hAAAAAAAA /* unspecified value */ ,
	       core$dcache_request_to_memory_read[264:260],
	       4'b1010 /* unspecified value */ ,
	       2'd1,
	       burst_size__h1661,
	       5'b01010 /* unspecified value */ ,
	       1'b0 /* unspecified value */ ,
	       4'b1010 /* unspecified value */ ,
	       count,
	       4'b1010 /* unspecified value */  } ;
  assign MUX_req_to_memory_read_rv$port0__write_1__VAL_2 =
	     { 6'd32,
	       core$instruction_outputs_[38:7],
	       32'd0,
	       core$instruction_outputs_[6:2],
	       18'd252944,
	       count,
	       4'd0 } ;
  assign MUX_req_to_memory_write_rv$port0__write_1__VAL_1 =
	     { 2'd3,
	       63'h2AAAAAAAAAAAAAAA /* unspecified value */ ,
	       rg_data_line[31:0],
	       4'b1010 /* unspecified value */  } ;
  assign MUX_req_to_memory_write_rv$port0__write_1__VAL_2 =
	     { 4'd9,
	       2'b10 /* unspecified value */ ,
	       core$dcache_request_to_memory_write[296:265],
	       core$dcache_request_to_memory_write[35:4],
	       core$dcache_request_to_memory_write[264:260],
	       4'b1010 /* unspecified value */ ,
	       2'd1,
	       request_to_mem_burst_size__h2196,
	       5'b01010 /* unspecified value */ ,
	       1'b0 /* unspecified value */ ,
	       4'b1010 /* unspecified value */ ,
	       x__h2519,
	       4'b1010 /* unspecified value */  } ;
  assign MUX_rg_address$write_1__VAL_3 =
	     (rg_burst_length == 5'd1 || rg_burst_mode == 2'd0) ?
	       new_addr___1__h4469 :
	       IF_rg_burst_mode_6_EQ_1_04_THEN_IF_rg_burst_le_ETC___d141 ;
  assign MUX_rg_data_line$write_1__VAL_1 =
	     { 33'h100000000, core$dcache_request_to_memory_write[259:36] } ;
  assign MUX_rg_data_line$write_1__VAL_2 =
	     (rg_write_burst == 5'd1) ?
	       { 1'd0,
		 256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  } :
	       { 33'h100000000, rg_data_line[255:32] } ;
  assign MUX_rg_write_burst$write_1__VAL_1 = rg_write_burst - 5'd1 ;

  // inlined wires
  assign req_to_memory_read_rv$EN_port0__write =
	     WILL_FIRE_RL_check_read_request_to_memory_from_dcache ||
	     WILL_FIRE_RL_read_request_from_icache ;
  assign req_to_memory_read_rv$port0__write_1 =
	     WILL_FIRE_RL_check_read_request_to_memory_from_dcache ?
	       MUX_req_to_memory_read_rv$port0__write_1__VAL_1 :
	       MUX_req_to_memory_read_rv$port0__write_1__VAL_2 ;
  assign req_to_memory_read_rv$port1__read =
	     req_to_memory_read_rv$EN_port0__write ?
	       req_to_memory_read_rv$port0__write_1 :
	       req_to_memory_read_rv ;
  assign req_to_memory_read_rv$port1__write_1 =
	     { 1'd0,
	       100'hAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  } ;
  assign req_to_memory_read_rv$port2__read =
	     EN_bus_rd_ifc_tx_get ?
	       req_to_memory_read_rv$port1__write_1 :
	       req_to_memory_read_rv$port1__read ;
  assign req_to_memory_write_rv$EN_port0__write =
	     WILL_FIRE_RL_send_next_data_words && rg_write_burst != 5'd1 ||
	     WILL_FIRE_RL_check_write_request_to_memory_from_dcache ;
  assign req_to_memory_write_rv$port0__write_1 =
	     MUX_req_to_memory_write_rv$port0__write_1__SEL_1 ?
	       MUX_req_to_memory_write_rv$port0__write_1__VAL_1 :
	       MUX_req_to_memory_write_rv$port0__write_1__VAL_2 ;
  assign req_to_memory_write_rv$port1__read =
	     req_to_memory_write_rv$EN_port0__write ?
	       req_to_memory_write_rv$port0__write_1 :
	       req_to_memory_write_rv ;
  assign req_to_memory_write_rv$port2__read =
	     EN_bus_wr_ifc_tx_get ?
	       req_to_memory_read_rv$port1__write_1 :
	       req_to_memory_write_rv$port1__read ;
  assign rsp_to_core_read_rv$port0__write_1 = { 1'd1, bus_rd_ifc_rx_put } ;
  assign rsp_to_core_read_rv$port1__read =
	     EN_bus_rd_ifc_rx_put ?
	       rsp_to_core_read_rv$port0__write_1 :
	       rsp_to_core_read_rv ;
  assign rsp_to_core_read_rv$port1__write_1 =
	     { 1'd0, 53'h0AAAAAAAAAAAAA /* unspecified value */  } ;
  assign rsp_to_core_read_rv$port2__read =
	     MUX_rg_address$write_1__SEL_3 ?
	       rsp_to_core_read_rv$port1__write_1 :
	       rsp_to_core_read_rv$port1__read ;
  assign rsp_to_core_write_rv$port0__write_1 = { 1'd1, bus_wr_ifc_rx_put } ;
  assign rsp_to_core_write_rv$port1__read =
	     EN_bus_wr_ifc_rx_put ?
	       rsp_to_core_write_rv$port0__write_1 :
	       rsp_to_core_write_rv ;
  assign rsp_to_core_write_rv$port2__read =
	     CAN_FIRE_RL_send_write_response_from_memory_to_data ?
	       rsp_to_core_read_rv$port1__write_1 :
	       rsp_to_core_write_rv$port1__read ;
  assign count$EN_port0__write =
	     WILL_FIRE_RL_read_request_from_icache ||
	     WILL_FIRE_RL_check_read_request_to_memory_from_dcache ;
  assign count$port0__write_1 = count + 4'd1 ;
  assign count$port1__write_1 = x__h2519 + 4'd1 ;
  assign count$port2__read =
	     CAN_FIRE_RL_check_write_request_to_memory_from_dcache ?
	       count$port1__write_1 :
	       x__h2519 ;

  // register count
  assign count$D_IN = count$port2__read ;
  assign count$EN = 1'b1 ;

  // register req_to_memory_read_rv
  assign req_to_memory_read_rv$D_IN = req_to_memory_read_rv$port2__read ;
  assign req_to_memory_read_rv$EN = 1'b1 ;

  // register req_to_memory_write_rv
  assign req_to_memory_write_rv$D_IN = req_to_memory_write_rv$port2__read ;
  assign req_to_memory_write_rv$EN = 1'b1 ;

  // register rg_address
  always@(WILL_FIRE_RL_check_read_request_to_memory_from_dcache or
	  core$dcache_request_to_memory_read or
	  WILL_FIRE_RL_read_request_from_icache or
	  core$instruction_outputs_ or
	  MUX_rg_address$write_1__SEL_3 or MUX_rg_address$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_check_read_request_to_memory_from_dcache:
	  rg_address$D_IN = core$dcache_request_to_memory_read[296:265];
      WILL_FIRE_RL_read_request_from_icache:
	  rg_address$D_IN = core$instruction_outputs_[38:7];
      MUX_rg_address$write_1__SEL_3:
	  rg_address$D_IN = MUX_rg_address$write_1__VAL_3;
      default: rg_address$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_address$EN =
	     WILL_FIRE_RL_check_read_request_to_memory_from_dcache ||
	     WILL_FIRE_RL_read_request_from_icache ||
	     WILL_FIRE_RL_send_response_from_memory_to_instruction ||
	     WILL_FIRE_RL_send_read_response_from_memory_to_data ;

  // register rg_burst_length
  assign rg_burst_length$D_IN =
	     WILL_FIRE_RL_read_request_from_icache ?
	       core$instruction_outputs_[6:2] :
	       core$dcache_request_to_memory_read[264:260] ;
  assign rg_burst_length$EN =
	     WILL_FIRE_RL_read_request_from_icache ||
	     WILL_FIRE_RL_check_read_request_to_memory_from_dcache ;

  // register rg_burst_mode
  assign rg_burst_mode$D_IN = 2'd1 ;
  assign rg_burst_mode$EN =
	     WILL_FIRE_RL_read_request_from_icache ||
	     WILL_FIRE_RL_check_read_request_to_memory_from_dcache ;

  // register rg_burst_size
  assign rg_burst_size$D_IN = 2'd3 ;
  assign rg_burst_size$EN = WILL_FIRE_RL_read_request_from_icache ;

  // register rg_data_line
  assign rg_data_line$D_IN =
	     WILL_FIRE_RL_check_write_request_to_memory_from_dcache ?
	       MUX_rg_data_line$write_1__VAL_1 :
	       MUX_rg_data_line$write_1__VAL_2 ;
  assign rg_data_line$EN =
	     WILL_FIRE_RL_check_write_request_to_memory_from_dcache ||
	     WILL_FIRE_RL_send_next_data_words ;

  // register rg_need_to_drop_incoming_data
  assign rg_need_to_drop_incoming_data$D_IN = 1'b0 ;
  assign rg_need_to_drop_incoming_data$EN = 1'b0 ;

  // register rg_state
  always@(WILL_FIRE_RL_check_read_request_to_memory_from_dcache or
	  WILL_FIRE_RL_read_request_from_icache or
	  MUX_rg_state$write_1__SEL_1 or MUX_rg_state$write_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_check_read_request_to_memory_from_dcache:
	  rg_state$D_IN = 2'd0;
      WILL_FIRE_RL_read_request_from_icache: rg_state$D_IN = 2'd1;
      MUX_rg_state$write_1__SEL_1 || MUX_rg_state$write_1__SEL_2:
	  rg_state$D_IN = 2'd2;
      default: rg_state$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign rg_state$EN =
	     WILL_FIRE_RL_send_read_response_from_memory_to_data &&
	     (core$dcache_response_from_memory_read ||
	      rg_burst_length == 5'd1) ||
	     WILL_FIRE_RL_send_response_from_memory_to_instruction &&
	     (core$_instruction_inputs || rg_burst_length == 5'd1) ||
	     WILL_FIRE_RL_check_read_request_to_memory_from_dcache ||
	     WILL_FIRE_RL_read_request_from_icache ;

  // register rg_write_burst
  assign rg_write_burst$D_IN =
	     MUX_req_to_memory_write_rv$port0__write_1__SEL_1 ?
	       MUX_rg_write_burst$write_1__VAL_1 :
	       core$dcache_request_to_memory_write[264:260] ;
  assign rg_write_burst$EN =
	     WILL_FIRE_RL_send_next_data_words && rg_write_burst != 5'd1 ||
	     WILL_FIRE_RL_check_write_request_to_memory_from_dcache ;

  // register rsp_to_core_read_rv
  assign rsp_to_core_read_rv$D_IN = rsp_to_core_read_rv$port2__read ;
  assign rsp_to_core_read_rv$EN = 1'b1 ;

  // register rsp_to_core_write_rv
  assign rsp_to_core_write_rv$D_IN = rsp_to_core_write_rv$port2__read ;
  assign rsp_to_core_write_rv$EN = 1'b1 ;

  // submodule core
  assign core$_instruction_inputs_mem_data =
	     { rsp_to_core_read_rv$port1__read[50:19],
	       rsp_to_core_read_rv$port1__read[18:17] == 2'd1,
	       rg_address } ;
  assign core$dcache_response_from_memory_read_mem_data =
	     { rsp_to_core_read_rv$port1__read[50:19],
	       rsp_to_core_read_rv$port1__read[18:17] == 2'd1,
	       1'd0,
	       rg_address } ;
  assign core$dcache_response_from_memory_write_mem_data =
	     { 32'hAAAAAAAA /* unspecified value */ ,
	       x__h4340,
	       1'd0,
	       32'hAAAAAAAA /* unspecified value */  } ;
  assign core$mtip_mtip1 = mtip_mtip ;
  assign core$sin_in = sin_in ;
  assign core$EN__instruction_inputs =
	     CAN_FIRE_RL_send_response_from_memory_to_instruction ;
  assign core$EN_instruction_outputs_ =
	     WILL_FIRE_RL_read_request_from_icache ;
  assign core$EN_dcache_response_from_memory_read =
	     CAN_FIRE_RL_send_read_response_from_memory_to_data ;
  assign core$EN_dcache_response_from_memory_write =
	     CAN_FIRE_RL_send_write_response_from_memory_to_data ;
  assign core$EN_dcache_request_to_memory_read =
	     CAN_FIRE_RL_check_read_request_to_memory_from_dcache ;
  assign core$EN_dcache_request_to_memory_write =
	     CAN_FIRE_RL_check_write_request_to_memory_from_dcache ;
  assign core$EN_sin = EN_sin ;
  assign core$EN_mtip = EN_mtip ;

  // remaining internal signals
  assign IF_rg_burst_mode_6_EQ_1_04_THEN_IF_rg_burst_le_ETC___d141 =
	     (rg_burst_mode == 2'd1) ?
	       CASE_rg_burst_length_4_IF_rg_burst_size_00_EQ__ETC__q1 :
	       rg_address ;
  assign burst_size__h1661 =
	     (core$dcache_request_to_memory_read[1:0] == 2'd2) ?
	       2'd3 :
	       core$dcache_request_to_memory_read[1:0] ;
  assign new_addr___1__h4469 = x__h4486 + 32'd1 ;
  assign request_to_mem_burst_size__h2196 =
	     (core$dcache_request_to_memory_write[1:0] == 2'd2) ?
	       2'd3 :
	       core$dcache_request_to_memory_write[1:0] ;
  assign spliced_bits__h4498 = rg_address[2:0] + 3'd1 ;
  assign spliced_bits__h4569 = rg_address[3:1] + 3'd1 ;
  assign spliced_bits__h4642 = rg_address[4:2] + 3'd1 ;
  assign spliced_bits__h4719 = rg_address[1:0] + 2'd1 ;
  assign spliced_bits__h4790 = rg_address[2:1] + 2'd1 ;
  assign spliced_bits__h4863 = rg_address[3:2] + 2'd1 ;
  assign x__h2519 = count$EN_port0__write ? count$port0__write_1 : count ;
  assign x__h4340 = rsp_to_core_write_rv$port1__read[18:17] == 2'd1 ;
  assign x__h4486 = rg_address + y__h4488 ;
  assign y__h4488 = { 30'd0, rg_burst_size } ;
  always@(rg_burst_size or
	  rg_address or
	  spliced_bits__h4498 or spliced_bits__h4569 or spliced_bits__h4642)
  begin
    case (rg_burst_size)
      2'd0:
	  IF_rg_burst_size_00_EQ_0_06_THEN_rg_address_9__ETC___d125 =
	      { rg_address[31:3], spliced_bits__h4498 };
      2'd1:
	  IF_rg_burst_size_00_EQ_0_06_THEN_rg_address_9__ETC___d125 =
	      { rg_address[31:4], spliced_bits__h4569, rg_address[0] };
      2'd2:
	  IF_rg_burst_size_00_EQ_0_06_THEN_rg_address_9__ETC___d125 =
	      rg_address;
      2'd3:
	  IF_rg_burst_size_00_EQ_0_06_THEN_rg_address_9__ETC___d125 =
	      { rg_address[31:5], spliced_bits__h4642, rg_address[1:0] };
    endcase
  end
  always@(rg_burst_size or
	  rg_address or
	  spliced_bits__h4719 or spliced_bits__h4790 or spliced_bits__h4863)
  begin
    case (rg_burst_size)
      2'd0:
	  IF_rg_burst_size_00_EQ_0_06_THEN_rg_address_9__ETC___d138 =
	      { rg_address[31:2], spliced_bits__h4719 };
      2'd1:
	  IF_rg_burst_size_00_EQ_0_06_THEN_rg_address_9__ETC___d138 =
	      { rg_address[31:3], spliced_bits__h4790, rg_address[0] };
      2'd2:
	  IF_rg_burst_size_00_EQ_0_06_THEN_rg_address_9__ETC___d138 =
	      rg_address;
      2'd3:
	  IF_rg_burst_size_00_EQ_0_06_THEN_rg_address_9__ETC___d138 =
	      { rg_address[31:4], spliced_bits__h4863, rg_address[1:0] };
    endcase
  end
  always@(rg_burst_length or
	  rg_address or
	  IF_rg_burst_size_00_EQ_0_06_THEN_rg_address_9__ETC___d138 or
	  IF_rg_burst_size_00_EQ_0_06_THEN_rg_address_9__ETC___d125)
  begin
    case (rg_burst_length)
      5'd4:
	  CASE_rg_burst_length_4_IF_rg_burst_size_00_EQ__ETC__q1 =
	      IF_rg_burst_size_00_EQ_0_06_THEN_rg_address_9__ETC___d138;
      5'd8:
	  CASE_rg_burst_length_4_IF_rg_burst_size_00_EQ__ETC__q1 =
	      IF_rg_burst_size_00_EQ_0_06_THEN_rg_address_9__ETC___d125;
      default: CASE_rg_burst_length_4_IF_rg_burst_size_00_EQ__ETC__q1 =
		   rg_address;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        count <= `BSV_ASSIGNMENT_DELAY 4'd0;
	req_to_memory_read_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 100'hAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  };
	req_to_memory_write_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 100'hAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  };
	rg_address <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_burst_length <= `BSV_ASSIGNMENT_DELAY 5'd1;
	rg_burst_mode <= `BSV_ASSIGNMENT_DELAY 2'd3;
	rg_burst_size <= `BSV_ASSIGNMENT_DELAY 2'd0;
	rg_data_line <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  };
	rg_need_to_drop_incoming_data <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 2'd2;
	rg_write_burst <= `BSV_ASSIGNMENT_DELAY 5'd1;
	rsp_to_core_read_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 53'h0AAAAAAAAAAAAA /* unspecified value */  };
	rsp_to_core_write_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 53'h0AAAAAAAAAAAAA /* unspecified value */  };
      end
    else
      begin
        if (count$EN) count <= `BSV_ASSIGNMENT_DELAY count$D_IN;
	if (req_to_memory_read_rv$EN)
	  req_to_memory_read_rv <= `BSV_ASSIGNMENT_DELAY
	      req_to_memory_read_rv$D_IN;
	if (req_to_memory_write_rv$EN)
	  req_to_memory_write_rv <= `BSV_ASSIGNMENT_DELAY
	      req_to_memory_write_rv$D_IN;
	if (rg_address$EN)
	  rg_address <= `BSV_ASSIGNMENT_DELAY rg_address$D_IN;
	if (rg_burst_length$EN)
	  rg_burst_length <= `BSV_ASSIGNMENT_DELAY rg_burst_length$D_IN;
	if (rg_burst_mode$EN)
	  rg_burst_mode <= `BSV_ASSIGNMENT_DELAY rg_burst_mode$D_IN;
	if (rg_burst_size$EN)
	  rg_burst_size <= `BSV_ASSIGNMENT_DELAY rg_burst_size$D_IN;
	if (rg_data_line$EN)
	  rg_data_line <= `BSV_ASSIGNMENT_DELAY rg_data_line$D_IN;
	if (rg_need_to_drop_incoming_data$EN)
	  rg_need_to_drop_incoming_data <= `BSV_ASSIGNMENT_DELAY
	      rg_need_to_drop_incoming_data$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
	if (rg_write_burst$EN)
	  rg_write_burst <= `BSV_ASSIGNMENT_DELAY rg_write_burst$D_IN;
	if (rsp_to_core_read_rv$EN)
	  rsp_to_core_read_rv <= `BSV_ASSIGNMENT_DELAY
	      rsp_to_core_read_rv$D_IN;
	if (rsp_to_core_write_rv$EN)
	  rsp_to_core_write_rv <= `BSV_ASSIGNMENT_DELAY
	      rsp_to_core_write_rv$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    count = 4'hA;
    req_to_memory_read_rv = 101'h0AAAAAAAAAAAAAAAAAAAAAAAAA;
    req_to_memory_write_rv = 101'h0AAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_address = 32'hAAAAAAAA;
    rg_burst_length = 5'h0A;
    rg_burst_mode = 2'h2;
    rg_burst_size = 2'h2;
    rg_data_line =
	257'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_need_to_drop_incoming_data = 1'h0;
    rg_state = 2'h2;
    rg_write_burst = 5'h0A;
    rsp_to_core_read_rv = 54'h2AAAAAAAAAAAAA;
    rsp_to_core_write_rv = 54'h2AAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_read_request_to_memory_from_dcache)
	begin
	  v__h1842 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_read_request_to_memory_from_dcache)
	$write(v__h1842,
	       "\tCORE: Sending DCACHE READ request to Memory for Addr: %h Burst: %d Access type: ",
	       core$dcache_request_to_memory_read[296:265],
	       core$dcache_request_to_memory_read[264:260]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_read_request_to_memory_from_dcache &&
	  core$dcache_request_to_memory_read[3:2] == 2'd0)
	$write("Load");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_read_request_to_memory_from_dcache &&
	  core$dcache_request_to_memory_read[3:2] == 2'd1)
	$write("Store");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_read_request_to_memory_from_dcache &&
	  core$dcache_request_to_memory_read[3:2] != 2'd0 &&
	  core$dcache_request_to_memory_read[3:2] != 2'd1)
	$write("Atomic");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_read_request_to_memory_from_dcache) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send_next_data_words && rg_write_burst != 5'd1)
	begin
	  v__h2696 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send_next_data_words && rg_write_burst != 5'd1)
	$display(v__h2696,
		 "\tCORE: Sending DATA packets for WRITE Burst: %d Data: %h",
		 rg_write_burst,
		 rg_data_line[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_read_request_from_icache)
	begin
	  v__h3322 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_read_request_from_icache)
	$display(v__h3322,
		 "\tCORE: Sending ICACHE request to Memory. Address: %h burst_length: ",
		 core$instruction_outputs_[38:7],
		 core$instruction_outputs_[6:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_write_request_to_memory_from_dcache)
	begin
	  v__h2388 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_write_request_to_memory_from_dcache)
	$write(v__h2388,
	       "\tCORE: Sending DCACHE WRITE request to Memory for Addr: %h Data: %h Burst: %d Access type: ",
	       core$dcache_request_to_memory_write[296:265],
	       core$dcache_request_to_memory_write[35:4],
	       core$dcache_request_to_memory_write[264:260]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_write_request_to_memory_from_dcache &&
	  core$dcache_request_to_memory_write[3:2] == 2'd0)
	$write("Load");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_write_request_to_memory_from_dcache &&
	  core$dcache_request_to_memory_write[3:2] == 2'd1)
	$write("Store");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_write_request_to_memory_from_dcache &&
	  core$dcache_request_to_memory_write[3:2] != 2'd0 &&
	  core$dcache_request_to_memory_write[3:2] != 2'd1)
	$write("Atomic");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_check_write_request_to_memory_from_dcache)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send_write_response_from_memory_to_data)
	begin
	  v__h4281 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send_write_response_from_memory_to_data)
	$display(v__h4281,
		 " CORE : Sending WRITE ACKNOWLEDGEMENT back to the DCACHE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send_read_response_from_memory_to_data)
	begin
	  v__h3974 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send_read_response_from_memory_to_data)
	$write(v__h3974,
	       " CORE : Sending the data back to the DCACHE data:%h for address: %h current_burst: %d status: ",
	       rsp_to_core_read_rv$port1__read[50:19],
	       rg_address,
	       rg_burst_length);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send_read_response_from_memory_to_data &&
	  rsp_to_core_read_rv$port1__read[18:17] == 2'd0)
	$write("SUCCESS");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send_read_response_from_memory_to_data &&
	  rsp_to_core_read_rv$port1__read[18:17] == 2'd1)
	$write("ERROR  ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send_read_response_from_memory_to_data &&
	  rsp_to_core_read_rv$port1__read[18:17] == 2'd2)
	$write("NO_RESP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send_read_response_from_memory_to_data &&
	  rsp_to_core_read_rv$port1__read[18:17] != 2'd0 &&
	  rsp_to_core_read_rv$port1__read[18:17] != 2'd1 &&
	  rsp_to_core_read_rv$port1__read[18:17] != 2'd2)
	$write("UNKNOWN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send_read_response_from_memory_to_data) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send_response_from_memory_to_instruction)
	begin
	  v__h4956 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send_response_from_memory_to_instruction)
	$display(v__h4956,
		 " CORE : Sending the data back to the ICACHE data:%h for address: %h current_burst: %d",
		 rsp_to_core_read_rv$port1__read[50:19],
		 rg_address,
		 rg_burst_length);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send_response_from_memory_to_instruction &&
	  (core$_instruction_inputs || rg_burst_length == 5'd1))
	$display("GOTCHA");
  end
  // synopsys translate_on
endmodule  // mkcore

