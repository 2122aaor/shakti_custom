//
// Generated by Bluespec Compiler, version 2017.03.beta1 (build 35049, 2017-03-16)
//
// On Thu Apr  6 04:41:16 IST 2017
//
//
// Ports:
// Name                         I/O  size props
// RDY_request_from_cpu           O     1
// response_to_cpu                O    69
// RDY_response_to_cpu            O     1
// request_to_memory              O   297
// RDY_request_to_memory          O     1
// response_from_memory           O     1
// RDY_response_from_memory       O     1
// RDY_clear_all                  O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// request_from_cpu_req           I    68
// response_from_memory_resp      I    66 reg
// EN_request_from_cpu            I     1
// EN_clear_all                   I     1 unused
// EN_response_to_cpu             I     1 unused
// EN_request_to_memory           I     1
// EN_response_from_memory        I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkdcache(CLK,
		RST_N,

		request_from_cpu_req,
		EN_request_from_cpu,
		RDY_request_from_cpu,

		EN_response_to_cpu,
		response_to_cpu,
		RDY_response_to_cpu,

		EN_request_to_memory,
		request_to_memory,
		RDY_request_to_memory,

		response_from_memory_resp,
		EN_response_from_memory,
		response_from_memory,
		RDY_response_from_memory,

		EN_clear_all,
		RDY_clear_all);
  input  CLK;
  input  RST_N;

  // action method request_from_cpu
  input  [67 : 0] request_from_cpu_req;
  input  EN_request_from_cpu;
  output RDY_request_from_cpu;

  // actionvalue method response_to_cpu
  input  EN_response_to_cpu;
  output [68 : 0] response_to_cpu;
  output RDY_response_to_cpu;

  // actionvalue method request_to_memory
  input  EN_request_to_memory;
  output [296 : 0] request_to_memory;
  output RDY_request_to_memory;

  // actionvalue method response_from_memory
  input  [65 : 0] response_from_memory_resp;
  input  EN_response_from_memory;
  output response_from_memory;
  output RDY_response_from_memory;

  // action method clear_all
  input  EN_clear_all;
  output RDY_clear_all;

  // signals for module outputs
  wire [296 : 0] request_to_memory;
  wire [68 : 0] response_to_cpu;
  wire RDY_clear_all,
       RDY_request_from_cpu,
       RDY_request_to_memory,
       RDY_response_from_memory,
       RDY_response_to_cpu,
       response_from_memory;

  // inlined wires
  reg [296 : 0] cache_ff_request_to_memory_enqw$wget;
  reg [1 : 0] cache_rg_state$port0__write_1;
  wire [68 : 0] cache_wr_response_to_cpu$wget;
  wire [1 : 0] cache_rg_state$port1__read,
	       cache_rg_state$port1__write_1,
	       cache_rg_state$port2__read,
	       cache_rg_state$port3__read;
  wire cache_ff_request_to_memory_enqw$whas,
       cache_rg_state$EN_port0__write,
       cache_rg_state$EN_port1__write,
       cache_wr_line_done$whas,
       cache_wr_response_to_cpu$whas;

  // register cache_pseudo_lru_0
  reg [2 : 0] cache_pseudo_lru_0;
  wire [2 : 0] cache_pseudo_lru_0$D_IN;
  wire cache_pseudo_lru_0$EN;

  // register cache_pseudo_lru_1
  reg [2 : 0] cache_pseudo_lru_1;
  wire [2 : 0] cache_pseudo_lru_1$D_IN;
  wire cache_pseudo_lru_1$EN;

  // register cache_pseudo_lru_10
  reg [2 : 0] cache_pseudo_lru_10;
  wire [2 : 0] cache_pseudo_lru_10$D_IN;
  wire cache_pseudo_lru_10$EN;

  // register cache_pseudo_lru_11
  reg [2 : 0] cache_pseudo_lru_11;
  wire [2 : 0] cache_pseudo_lru_11$D_IN;
  wire cache_pseudo_lru_11$EN;

  // register cache_pseudo_lru_12
  reg [2 : 0] cache_pseudo_lru_12;
  wire [2 : 0] cache_pseudo_lru_12$D_IN;
  wire cache_pseudo_lru_12$EN;

  // register cache_pseudo_lru_13
  reg [2 : 0] cache_pseudo_lru_13;
  wire [2 : 0] cache_pseudo_lru_13$D_IN;
  wire cache_pseudo_lru_13$EN;

  // register cache_pseudo_lru_14
  reg [2 : 0] cache_pseudo_lru_14;
  wire [2 : 0] cache_pseudo_lru_14$D_IN;
  wire cache_pseudo_lru_14$EN;

  // register cache_pseudo_lru_15
  reg [2 : 0] cache_pseudo_lru_15;
  wire [2 : 0] cache_pseudo_lru_15$D_IN;
  wire cache_pseudo_lru_15$EN;

  // register cache_pseudo_lru_16
  reg [2 : 0] cache_pseudo_lru_16;
  wire [2 : 0] cache_pseudo_lru_16$D_IN;
  wire cache_pseudo_lru_16$EN;

  // register cache_pseudo_lru_17
  reg [2 : 0] cache_pseudo_lru_17;
  wire [2 : 0] cache_pseudo_lru_17$D_IN;
  wire cache_pseudo_lru_17$EN;

  // register cache_pseudo_lru_18
  reg [2 : 0] cache_pseudo_lru_18;
  wire [2 : 0] cache_pseudo_lru_18$D_IN;
  wire cache_pseudo_lru_18$EN;

  // register cache_pseudo_lru_19
  reg [2 : 0] cache_pseudo_lru_19;
  wire [2 : 0] cache_pseudo_lru_19$D_IN;
  wire cache_pseudo_lru_19$EN;

  // register cache_pseudo_lru_2
  reg [2 : 0] cache_pseudo_lru_2;
  wire [2 : 0] cache_pseudo_lru_2$D_IN;
  wire cache_pseudo_lru_2$EN;

  // register cache_pseudo_lru_20
  reg [2 : 0] cache_pseudo_lru_20;
  wire [2 : 0] cache_pseudo_lru_20$D_IN;
  wire cache_pseudo_lru_20$EN;

  // register cache_pseudo_lru_21
  reg [2 : 0] cache_pseudo_lru_21;
  wire [2 : 0] cache_pseudo_lru_21$D_IN;
  wire cache_pseudo_lru_21$EN;

  // register cache_pseudo_lru_22
  reg [2 : 0] cache_pseudo_lru_22;
  wire [2 : 0] cache_pseudo_lru_22$D_IN;
  wire cache_pseudo_lru_22$EN;

  // register cache_pseudo_lru_23
  reg [2 : 0] cache_pseudo_lru_23;
  wire [2 : 0] cache_pseudo_lru_23$D_IN;
  wire cache_pseudo_lru_23$EN;

  // register cache_pseudo_lru_24
  reg [2 : 0] cache_pseudo_lru_24;
  wire [2 : 0] cache_pseudo_lru_24$D_IN;
  wire cache_pseudo_lru_24$EN;

  // register cache_pseudo_lru_25
  reg [2 : 0] cache_pseudo_lru_25;
  wire [2 : 0] cache_pseudo_lru_25$D_IN;
  wire cache_pseudo_lru_25$EN;

  // register cache_pseudo_lru_26
  reg [2 : 0] cache_pseudo_lru_26;
  wire [2 : 0] cache_pseudo_lru_26$D_IN;
  wire cache_pseudo_lru_26$EN;

  // register cache_pseudo_lru_27
  reg [2 : 0] cache_pseudo_lru_27;
  wire [2 : 0] cache_pseudo_lru_27$D_IN;
  wire cache_pseudo_lru_27$EN;

  // register cache_pseudo_lru_28
  reg [2 : 0] cache_pseudo_lru_28;
  wire [2 : 0] cache_pseudo_lru_28$D_IN;
  wire cache_pseudo_lru_28$EN;

  // register cache_pseudo_lru_29
  reg [2 : 0] cache_pseudo_lru_29;
  wire [2 : 0] cache_pseudo_lru_29$D_IN;
  wire cache_pseudo_lru_29$EN;

  // register cache_pseudo_lru_3
  reg [2 : 0] cache_pseudo_lru_3;
  wire [2 : 0] cache_pseudo_lru_3$D_IN;
  wire cache_pseudo_lru_3$EN;

  // register cache_pseudo_lru_30
  reg [2 : 0] cache_pseudo_lru_30;
  wire [2 : 0] cache_pseudo_lru_30$D_IN;
  wire cache_pseudo_lru_30$EN;

  // register cache_pseudo_lru_31
  reg [2 : 0] cache_pseudo_lru_31;
  wire [2 : 0] cache_pseudo_lru_31$D_IN;
  wire cache_pseudo_lru_31$EN;

  // register cache_pseudo_lru_32
  reg [2 : 0] cache_pseudo_lru_32;
  wire [2 : 0] cache_pseudo_lru_32$D_IN;
  wire cache_pseudo_lru_32$EN;

  // register cache_pseudo_lru_33
  reg [2 : 0] cache_pseudo_lru_33;
  wire [2 : 0] cache_pseudo_lru_33$D_IN;
  wire cache_pseudo_lru_33$EN;

  // register cache_pseudo_lru_34
  reg [2 : 0] cache_pseudo_lru_34;
  wire [2 : 0] cache_pseudo_lru_34$D_IN;
  wire cache_pseudo_lru_34$EN;

  // register cache_pseudo_lru_35
  reg [2 : 0] cache_pseudo_lru_35;
  wire [2 : 0] cache_pseudo_lru_35$D_IN;
  wire cache_pseudo_lru_35$EN;

  // register cache_pseudo_lru_36
  reg [2 : 0] cache_pseudo_lru_36;
  wire [2 : 0] cache_pseudo_lru_36$D_IN;
  wire cache_pseudo_lru_36$EN;

  // register cache_pseudo_lru_37
  reg [2 : 0] cache_pseudo_lru_37;
  wire [2 : 0] cache_pseudo_lru_37$D_IN;
  wire cache_pseudo_lru_37$EN;

  // register cache_pseudo_lru_38
  reg [2 : 0] cache_pseudo_lru_38;
  wire [2 : 0] cache_pseudo_lru_38$D_IN;
  wire cache_pseudo_lru_38$EN;

  // register cache_pseudo_lru_39
  reg [2 : 0] cache_pseudo_lru_39;
  wire [2 : 0] cache_pseudo_lru_39$D_IN;
  wire cache_pseudo_lru_39$EN;

  // register cache_pseudo_lru_4
  reg [2 : 0] cache_pseudo_lru_4;
  wire [2 : 0] cache_pseudo_lru_4$D_IN;
  wire cache_pseudo_lru_4$EN;

  // register cache_pseudo_lru_40
  reg [2 : 0] cache_pseudo_lru_40;
  wire [2 : 0] cache_pseudo_lru_40$D_IN;
  wire cache_pseudo_lru_40$EN;

  // register cache_pseudo_lru_41
  reg [2 : 0] cache_pseudo_lru_41;
  wire [2 : 0] cache_pseudo_lru_41$D_IN;
  wire cache_pseudo_lru_41$EN;

  // register cache_pseudo_lru_42
  reg [2 : 0] cache_pseudo_lru_42;
  wire [2 : 0] cache_pseudo_lru_42$D_IN;
  wire cache_pseudo_lru_42$EN;

  // register cache_pseudo_lru_43
  reg [2 : 0] cache_pseudo_lru_43;
  wire [2 : 0] cache_pseudo_lru_43$D_IN;
  wire cache_pseudo_lru_43$EN;

  // register cache_pseudo_lru_44
  reg [2 : 0] cache_pseudo_lru_44;
  wire [2 : 0] cache_pseudo_lru_44$D_IN;
  wire cache_pseudo_lru_44$EN;

  // register cache_pseudo_lru_45
  reg [2 : 0] cache_pseudo_lru_45;
  wire [2 : 0] cache_pseudo_lru_45$D_IN;
  wire cache_pseudo_lru_45$EN;

  // register cache_pseudo_lru_46
  reg [2 : 0] cache_pseudo_lru_46;
  wire [2 : 0] cache_pseudo_lru_46$D_IN;
  wire cache_pseudo_lru_46$EN;

  // register cache_pseudo_lru_47
  reg [2 : 0] cache_pseudo_lru_47;
  wire [2 : 0] cache_pseudo_lru_47$D_IN;
  wire cache_pseudo_lru_47$EN;

  // register cache_pseudo_lru_48
  reg [2 : 0] cache_pseudo_lru_48;
  wire [2 : 0] cache_pseudo_lru_48$D_IN;
  wire cache_pseudo_lru_48$EN;

  // register cache_pseudo_lru_49
  reg [2 : 0] cache_pseudo_lru_49;
  wire [2 : 0] cache_pseudo_lru_49$D_IN;
  wire cache_pseudo_lru_49$EN;

  // register cache_pseudo_lru_5
  reg [2 : 0] cache_pseudo_lru_5;
  wire [2 : 0] cache_pseudo_lru_5$D_IN;
  wire cache_pseudo_lru_5$EN;

  // register cache_pseudo_lru_50
  reg [2 : 0] cache_pseudo_lru_50;
  wire [2 : 0] cache_pseudo_lru_50$D_IN;
  wire cache_pseudo_lru_50$EN;

  // register cache_pseudo_lru_51
  reg [2 : 0] cache_pseudo_lru_51;
  wire [2 : 0] cache_pseudo_lru_51$D_IN;
  wire cache_pseudo_lru_51$EN;

  // register cache_pseudo_lru_52
  reg [2 : 0] cache_pseudo_lru_52;
  wire [2 : 0] cache_pseudo_lru_52$D_IN;
  wire cache_pseudo_lru_52$EN;

  // register cache_pseudo_lru_53
  reg [2 : 0] cache_pseudo_lru_53;
  wire [2 : 0] cache_pseudo_lru_53$D_IN;
  wire cache_pseudo_lru_53$EN;

  // register cache_pseudo_lru_54
  reg [2 : 0] cache_pseudo_lru_54;
  wire [2 : 0] cache_pseudo_lru_54$D_IN;
  wire cache_pseudo_lru_54$EN;

  // register cache_pseudo_lru_55
  reg [2 : 0] cache_pseudo_lru_55;
  wire [2 : 0] cache_pseudo_lru_55$D_IN;
  wire cache_pseudo_lru_55$EN;

  // register cache_pseudo_lru_56
  reg [2 : 0] cache_pseudo_lru_56;
  wire [2 : 0] cache_pseudo_lru_56$D_IN;
  wire cache_pseudo_lru_56$EN;

  // register cache_pseudo_lru_57
  reg [2 : 0] cache_pseudo_lru_57;
  wire [2 : 0] cache_pseudo_lru_57$D_IN;
  wire cache_pseudo_lru_57$EN;

  // register cache_pseudo_lru_58
  reg [2 : 0] cache_pseudo_lru_58;
  wire [2 : 0] cache_pseudo_lru_58$D_IN;
  wire cache_pseudo_lru_58$EN;

  // register cache_pseudo_lru_59
  reg [2 : 0] cache_pseudo_lru_59;
  wire [2 : 0] cache_pseudo_lru_59$D_IN;
  wire cache_pseudo_lru_59$EN;

  // register cache_pseudo_lru_6
  reg [2 : 0] cache_pseudo_lru_6;
  wire [2 : 0] cache_pseudo_lru_6$D_IN;
  wire cache_pseudo_lru_6$EN;

  // register cache_pseudo_lru_60
  reg [2 : 0] cache_pseudo_lru_60;
  wire [2 : 0] cache_pseudo_lru_60$D_IN;
  wire cache_pseudo_lru_60$EN;

  // register cache_pseudo_lru_61
  reg [2 : 0] cache_pseudo_lru_61;
  wire [2 : 0] cache_pseudo_lru_61$D_IN;
  wire cache_pseudo_lru_61$EN;

  // register cache_pseudo_lru_62
  reg [2 : 0] cache_pseudo_lru_62;
  wire [2 : 0] cache_pseudo_lru_62$D_IN;
  wire cache_pseudo_lru_62$EN;

  // register cache_pseudo_lru_63
  reg [2 : 0] cache_pseudo_lru_63;
  wire [2 : 0] cache_pseudo_lru_63$D_IN;
  wire cache_pseudo_lru_63$EN;

  // register cache_pseudo_lru_7
  reg [2 : 0] cache_pseudo_lru_7;
  wire [2 : 0] cache_pseudo_lru_7$D_IN;
  wire cache_pseudo_lru_7$EN;

  // register cache_pseudo_lru_8
  reg [2 : 0] cache_pseudo_lru_8;
  wire [2 : 0] cache_pseudo_lru_8$D_IN;
  wire cache_pseudo_lru_8$EN;

  // register cache_pseudo_lru_9
  reg [2 : 0] cache_pseudo_lru_9;
  wire [2 : 0] cache_pseudo_lru_9$D_IN;
  wire cache_pseudo_lru_9$EN;

  // register cache_rg_dirty_line_addr
  reg [31 : 0] cache_rg_dirty_line_addr;
  wire [31 : 0] cache_rg_dirty_line_addr$D_IN;
  wire cache_rg_dirty_line_addr$EN;

  // register cache_rg_dirty_line_data
  reg [255 : 0] cache_rg_dirty_line_data;
  wire [255 : 0] cache_rg_dirty_line_data$D_IN;
  wire cache_rg_dirty_line_data$EN;

  // register cache_rg_dirty_line_write_back
  reg cache_rg_dirty_line_write_back;
  wire cache_rg_dirty_line_write_back$D_IN, cache_rg_dirty_line_write_back$EN;

  // register cache_rg_enable
  reg cache_rg_enable;
  wire cache_rg_enable$D_IN, cache_rg_enable$EN;

  // register cache_rg_index
  reg [6 : 0] cache_rg_index;
  wire [6 : 0] cache_rg_index$D_IN;
  wire cache_rg_index$EN;

  // register cache_rg_initialize
  reg cache_rg_initialize;
  wire cache_rg_initialize$D_IN, cache_rg_initialize$EN;

  // register cache_rg_line_write_stall
  reg cache_rg_line_write_stall;
  wire cache_rg_line_write_stall$D_IN, cache_rg_line_write_stall$EN;

  // register cache_rg_offset
  reg [2 : 0] cache_rg_offset;
  wire [2 : 0] cache_rg_offset$D_IN;
  wire cache_rg_offset$EN;

  // register cache_rg_replace_block
  reg [1 : 0] cache_rg_replace_block;
  wire [1 : 0] cache_rg_replace_block$D_IN;
  wire cache_rg_replace_block$EN;

  // register cache_rg_state
  reg [1 : 0] cache_rg_state;
  wire [1 : 0] cache_rg_state$D_IN;
  wire cache_rg_state$EN;

  // register cache_rg_word_count
  reg [2 : 0] cache_rg_word_count;
  wire [2 : 0] cache_rg_word_count$D_IN;
  wire cache_rg_word_count$EN;

  // ports of submodule cache_data_0_0
  wire [31 : 0] cache_data_0_0$DIA, cache_data_0_0$DIB, cache_data_0_0$DOA;
  wire [5 : 0] cache_data_0_0$ADDRA, cache_data_0_0$ADDRB;
  wire cache_data_0_0$ENA,
       cache_data_0_0$ENB,
       cache_data_0_0$WEA,
       cache_data_0_0$WEB;

  // ports of submodule cache_data_0_1
  wire [31 : 0] cache_data_0_1$DIA, cache_data_0_1$DIB, cache_data_0_1$DOA;
  wire [5 : 0] cache_data_0_1$ADDRA, cache_data_0_1$ADDRB;
  wire cache_data_0_1$ENA,
       cache_data_0_1$ENB,
       cache_data_0_1$WEA,
       cache_data_0_1$WEB;

  // ports of submodule cache_data_0_2
  wire [31 : 0] cache_data_0_2$DIA, cache_data_0_2$DIB, cache_data_0_2$DOA;
  wire [5 : 0] cache_data_0_2$ADDRA, cache_data_0_2$ADDRB;
  wire cache_data_0_2$ENA,
       cache_data_0_2$ENB,
       cache_data_0_2$WEA,
       cache_data_0_2$WEB;

  // ports of submodule cache_data_0_3
  wire [31 : 0] cache_data_0_3$DIA, cache_data_0_3$DIB, cache_data_0_3$DOA;
  wire [5 : 0] cache_data_0_3$ADDRA, cache_data_0_3$ADDRB;
  wire cache_data_0_3$ENA,
       cache_data_0_3$ENB,
       cache_data_0_3$WEA,
       cache_data_0_3$WEB;

  // ports of submodule cache_data_0_4
  wire [31 : 0] cache_data_0_4$DIA, cache_data_0_4$DIB, cache_data_0_4$DOA;
  wire [5 : 0] cache_data_0_4$ADDRA, cache_data_0_4$ADDRB;
  wire cache_data_0_4$ENA,
       cache_data_0_4$ENB,
       cache_data_0_4$WEA,
       cache_data_0_4$WEB;

  // ports of submodule cache_data_0_5
  wire [31 : 0] cache_data_0_5$DIA, cache_data_0_5$DIB, cache_data_0_5$DOA;
  wire [5 : 0] cache_data_0_5$ADDRA, cache_data_0_5$ADDRB;
  wire cache_data_0_5$ENA,
       cache_data_0_5$ENB,
       cache_data_0_5$WEA,
       cache_data_0_5$WEB;

  // ports of submodule cache_data_0_6
  wire [31 : 0] cache_data_0_6$DIA, cache_data_0_6$DIB, cache_data_0_6$DOA;
  wire [5 : 0] cache_data_0_6$ADDRA, cache_data_0_6$ADDRB;
  wire cache_data_0_6$ENA,
       cache_data_0_6$ENB,
       cache_data_0_6$WEA,
       cache_data_0_6$WEB;

  // ports of submodule cache_data_0_7
  wire [31 : 0] cache_data_0_7$DIA, cache_data_0_7$DIB, cache_data_0_7$DOA;
  wire [5 : 0] cache_data_0_7$ADDRA, cache_data_0_7$ADDRB;
  wire cache_data_0_7$ENA,
       cache_data_0_7$ENB,
       cache_data_0_7$WEA,
       cache_data_0_7$WEB;

  // ports of submodule cache_data_1_0
  wire [31 : 0] cache_data_1_0$DIA, cache_data_1_0$DIB, cache_data_1_0$DOA;
  wire [5 : 0] cache_data_1_0$ADDRA, cache_data_1_0$ADDRB;
  wire cache_data_1_0$ENA,
       cache_data_1_0$ENB,
       cache_data_1_0$WEA,
       cache_data_1_0$WEB;

  // ports of submodule cache_data_1_1
  wire [31 : 0] cache_data_1_1$DIA, cache_data_1_1$DIB, cache_data_1_1$DOA;
  wire [5 : 0] cache_data_1_1$ADDRA, cache_data_1_1$ADDRB;
  wire cache_data_1_1$ENA,
       cache_data_1_1$ENB,
       cache_data_1_1$WEA,
       cache_data_1_1$WEB;

  // ports of submodule cache_data_1_2
  wire [31 : 0] cache_data_1_2$DIA, cache_data_1_2$DIB, cache_data_1_2$DOA;
  wire [5 : 0] cache_data_1_2$ADDRA, cache_data_1_2$ADDRB;
  wire cache_data_1_2$ENA,
       cache_data_1_2$ENB,
       cache_data_1_2$WEA,
       cache_data_1_2$WEB;

  // ports of submodule cache_data_1_3
  wire [31 : 0] cache_data_1_3$DIA, cache_data_1_3$DIB, cache_data_1_3$DOA;
  wire [5 : 0] cache_data_1_3$ADDRA, cache_data_1_3$ADDRB;
  wire cache_data_1_3$ENA,
       cache_data_1_3$ENB,
       cache_data_1_3$WEA,
       cache_data_1_3$WEB;

  // ports of submodule cache_data_1_4
  wire [31 : 0] cache_data_1_4$DIA, cache_data_1_4$DIB, cache_data_1_4$DOA;
  wire [5 : 0] cache_data_1_4$ADDRA, cache_data_1_4$ADDRB;
  wire cache_data_1_4$ENA,
       cache_data_1_4$ENB,
       cache_data_1_4$WEA,
       cache_data_1_4$WEB;

  // ports of submodule cache_data_1_5
  wire [31 : 0] cache_data_1_5$DIA, cache_data_1_5$DIB, cache_data_1_5$DOA;
  wire [5 : 0] cache_data_1_5$ADDRA, cache_data_1_5$ADDRB;
  wire cache_data_1_5$ENA,
       cache_data_1_5$ENB,
       cache_data_1_5$WEA,
       cache_data_1_5$WEB;

  // ports of submodule cache_data_1_6
  wire [31 : 0] cache_data_1_6$DIA, cache_data_1_6$DIB, cache_data_1_6$DOA;
  wire [5 : 0] cache_data_1_6$ADDRA, cache_data_1_6$ADDRB;
  wire cache_data_1_6$ENA,
       cache_data_1_6$ENB,
       cache_data_1_6$WEA,
       cache_data_1_6$WEB;

  // ports of submodule cache_data_1_7
  wire [31 : 0] cache_data_1_7$DIA, cache_data_1_7$DIB, cache_data_1_7$DOA;
  wire [5 : 0] cache_data_1_7$ADDRA, cache_data_1_7$ADDRB;
  wire cache_data_1_7$ENA,
       cache_data_1_7$ENB,
       cache_data_1_7$WEA,
       cache_data_1_7$WEB;

  // ports of submodule cache_data_2_0
  wire [31 : 0] cache_data_2_0$DIA, cache_data_2_0$DIB, cache_data_2_0$DOA;
  wire [5 : 0] cache_data_2_0$ADDRA, cache_data_2_0$ADDRB;
  wire cache_data_2_0$ENA,
       cache_data_2_0$ENB,
       cache_data_2_0$WEA,
       cache_data_2_0$WEB;

  // ports of submodule cache_data_2_1
  wire [31 : 0] cache_data_2_1$DIA, cache_data_2_1$DIB, cache_data_2_1$DOA;
  wire [5 : 0] cache_data_2_1$ADDRA, cache_data_2_1$ADDRB;
  wire cache_data_2_1$ENA,
       cache_data_2_1$ENB,
       cache_data_2_1$WEA,
       cache_data_2_1$WEB;

  // ports of submodule cache_data_2_2
  wire [31 : 0] cache_data_2_2$DIA, cache_data_2_2$DIB, cache_data_2_2$DOA;
  wire [5 : 0] cache_data_2_2$ADDRA, cache_data_2_2$ADDRB;
  wire cache_data_2_2$ENA,
       cache_data_2_2$ENB,
       cache_data_2_2$WEA,
       cache_data_2_2$WEB;

  // ports of submodule cache_data_2_3
  wire [31 : 0] cache_data_2_3$DIA, cache_data_2_3$DIB, cache_data_2_3$DOA;
  wire [5 : 0] cache_data_2_3$ADDRA, cache_data_2_3$ADDRB;
  wire cache_data_2_3$ENA,
       cache_data_2_3$ENB,
       cache_data_2_3$WEA,
       cache_data_2_3$WEB;

  // ports of submodule cache_data_2_4
  wire [31 : 0] cache_data_2_4$DIA, cache_data_2_4$DIB, cache_data_2_4$DOA;
  wire [5 : 0] cache_data_2_4$ADDRA, cache_data_2_4$ADDRB;
  wire cache_data_2_4$ENA,
       cache_data_2_4$ENB,
       cache_data_2_4$WEA,
       cache_data_2_4$WEB;

  // ports of submodule cache_data_2_5
  wire [31 : 0] cache_data_2_5$DIA, cache_data_2_5$DIB, cache_data_2_5$DOA;
  wire [5 : 0] cache_data_2_5$ADDRA, cache_data_2_5$ADDRB;
  wire cache_data_2_5$ENA,
       cache_data_2_5$ENB,
       cache_data_2_5$WEA,
       cache_data_2_5$WEB;

  // ports of submodule cache_data_2_6
  wire [31 : 0] cache_data_2_6$DIA, cache_data_2_6$DIB, cache_data_2_6$DOA;
  wire [5 : 0] cache_data_2_6$ADDRA, cache_data_2_6$ADDRB;
  wire cache_data_2_6$ENA,
       cache_data_2_6$ENB,
       cache_data_2_6$WEA,
       cache_data_2_6$WEB;

  // ports of submodule cache_data_2_7
  wire [31 : 0] cache_data_2_7$DIA, cache_data_2_7$DIB, cache_data_2_7$DOA;
  wire [5 : 0] cache_data_2_7$ADDRA, cache_data_2_7$ADDRB;
  wire cache_data_2_7$ENA,
       cache_data_2_7$ENB,
       cache_data_2_7$WEA,
       cache_data_2_7$WEB;

  // ports of submodule cache_data_3_0
  wire [31 : 0] cache_data_3_0$DIA, cache_data_3_0$DIB, cache_data_3_0$DOA;
  wire [5 : 0] cache_data_3_0$ADDRA, cache_data_3_0$ADDRB;
  wire cache_data_3_0$ENA,
       cache_data_3_0$ENB,
       cache_data_3_0$WEA,
       cache_data_3_0$WEB;

  // ports of submodule cache_data_3_1
  wire [31 : 0] cache_data_3_1$DIA, cache_data_3_1$DIB, cache_data_3_1$DOA;
  wire [5 : 0] cache_data_3_1$ADDRA, cache_data_3_1$ADDRB;
  wire cache_data_3_1$ENA,
       cache_data_3_1$ENB,
       cache_data_3_1$WEA,
       cache_data_3_1$WEB;

  // ports of submodule cache_data_3_2
  wire [31 : 0] cache_data_3_2$DIA, cache_data_3_2$DIB, cache_data_3_2$DOA;
  wire [5 : 0] cache_data_3_2$ADDRA, cache_data_3_2$ADDRB;
  wire cache_data_3_2$ENA,
       cache_data_3_2$ENB,
       cache_data_3_2$WEA,
       cache_data_3_2$WEB;

  // ports of submodule cache_data_3_3
  wire [31 : 0] cache_data_3_3$DIA, cache_data_3_3$DIB, cache_data_3_3$DOA;
  wire [5 : 0] cache_data_3_3$ADDRA, cache_data_3_3$ADDRB;
  wire cache_data_3_3$ENA,
       cache_data_3_3$ENB,
       cache_data_3_3$WEA,
       cache_data_3_3$WEB;

  // ports of submodule cache_data_3_4
  wire [31 : 0] cache_data_3_4$DIA, cache_data_3_4$DIB, cache_data_3_4$DOA;
  wire [5 : 0] cache_data_3_4$ADDRA, cache_data_3_4$ADDRB;
  wire cache_data_3_4$ENA,
       cache_data_3_4$ENB,
       cache_data_3_4$WEA,
       cache_data_3_4$WEB;

  // ports of submodule cache_data_3_5
  wire [31 : 0] cache_data_3_5$DIA, cache_data_3_5$DIB, cache_data_3_5$DOA;
  wire [5 : 0] cache_data_3_5$ADDRA, cache_data_3_5$ADDRB;
  wire cache_data_3_5$ENA,
       cache_data_3_5$ENB,
       cache_data_3_5$WEA,
       cache_data_3_5$WEB;

  // ports of submodule cache_data_3_6
  wire [31 : 0] cache_data_3_6$DIA, cache_data_3_6$DIB, cache_data_3_6$DOA;
  wire [5 : 0] cache_data_3_6$ADDRA, cache_data_3_6$ADDRB;
  wire cache_data_3_6$ENA,
       cache_data_3_6$ENB,
       cache_data_3_6$WEA,
       cache_data_3_6$WEB;

  // ports of submodule cache_data_3_7
  wire [31 : 0] cache_data_3_7$DIA, cache_data_3_7$DIB, cache_data_3_7$DOA;
  wire [5 : 0] cache_data_3_7$ADDRA, cache_data_3_7$ADDRB;
  wire cache_data_3_7$ENA,
       cache_data_3_7$ENB,
       cache_data_3_7$WEA,
       cache_data_3_7$WEB;

  // ports of submodule cache_dirty_0
  wire [5 : 0] cache_dirty_0$ADDRA, cache_dirty_0$ADDRB;
  wire cache_dirty_0$DIA,
       cache_dirty_0$DIB,
       cache_dirty_0$DOA,
       cache_dirty_0$ENA,
       cache_dirty_0$ENB,
       cache_dirty_0$WEA,
       cache_dirty_0$WEB;

  // ports of submodule cache_dirty_1
  wire [5 : 0] cache_dirty_1$ADDRA, cache_dirty_1$ADDRB;
  wire cache_dirty_1$DIA,
       cache_dirty_1$DIB,
       cache_dirty_1$DOA,
       cache_dirty_1$ENA,
       cache_dirty_1$ENB,
       cache_dirty_1$WEA,
       cache_dirty_1$WEB;

  // ports of submodule cache_dirty_2
  wire [5 : 0] cache_dirty_2$ADDRA, cache_dirty_2$ADDRB;
  wire cache_dirty_2$DIA,
       cache_dirty_2$DIB,
       cache_dirty_2$DOA,
       cache_dirty_2$ENA,
       cache_dirty_2$ENB,
       cache_dirty_2$WEA,
       cache_dirty_2$WEB;

  // ports of submodule cache_dirty_3
  wire [5 : 0] cache_dirty_3$ADDRA, cache_dirty_3$ADDRB;
  wire cache_dirty_3$DIA,
       cache_dirty_3$DIB,
       cache_dirty_3$DOA,
       cache_dirty_3$ENA,
       cache_dirty_3$ENB,
       cache_dirty_3$WEA,
       cache_dirty_3$WEB;

  // ports of submodule cache_ff_request_from_cpu
  wire [67 : 0] cache_ff_request_from_cpu$D_IN,
		cache_ff_request_from_cpu$D_OUT;
  wire cache_ff_request_from_cpu$CLR,
       cache_ff_request_from_cpu$DEQ,
       cache_ff_request_from_cpu$EMPTY_N,
       cache_ff_request_from_cpu$ENQ,
       cache_ff_request_from_cpu$FULL_N;

  // ports of submodule cache_ff_request_to_memory_ff
  wire [296 : 0] cache_ff_request_to_memory_ff$D_IN,
		 cache_ff_request_to_memory_ff$D_OUT;
  wire cache_ff_request_to_memory_ff$CLR,
       cache_ff_request_to_memory_ff$DEQ,
       cache_ff_request_to_memory_ff$EMPTY_N,
       cache_ff_request_to_memory_ff$ENQ,
       cache_ff_request_to_memory_ff$FULL_N;

  // ports of submodule cache_ff_request_to_memory_firstValid
  wire cache_ff_request_to_memory_firstValid$D_IN,
       cache_ff_request_to_memory_firstValid$EN,
       cache_ff_request_to_memory_firstValid$Q_OUT;

  // ports of submodule cache_ff_response_from_memory
  wire [65 : 0] cache_ff_response_from_memory$D_IN,
		cache_ff_response_from_memory$D_OUT;
  wire cache_ff_response_from_memory$CLR,
       cache_ff_response_from_memory$DEQ,
       cache_ff_response_from_memory$EMPTY_N,
       cache_ff_response_from_memory$ENQ,
       cache_ff_response_from_memory$FULL_N;

  // ports of submodule cache_tag_0
  wire [20 : 0] cache_tag_0$DIA, cache_tag_0$DIB, cache_tag_0$DOA;
  wire [5 : 0] cache_tag_0$ADDRA, cache_tag_0$ADDRB;
  wire cache_tag_0$ENA, cache_tag_0$ENB, cache_tag_0$WEA, cache_tag_0$WEB;

  // ports of submodule cache_tag_1
  wire [20 : 0] cache_tag_1$DIA, cache_tag_1$DIB, cache_tag_1$DOA;
  wire [5 : 0] cache_tag_1$ADDRA, cache_tag_1$ADDRB;
  wire cache_tag_1$ENA, cache_tag_1$ENB, cache_tag_1$WEA, cache_tag_1$WEB;

  // ports of submodule cache_tag_2
  wire [20 : 0] cache_tag_2$DIA, cache_tag_2$DIB, cache_tag_2$DOA;
  wire [5 : 0] cache_tag_2$ADDRA, cache_tag_2$ADDRB;
  wire cache_tag_2$ENA, cache_tag_2$ENB, cache_tag_2$WEA, cache_tag_2$WEB;

  // ports of submodule cache_tag_3
  wire [20 : 0] cache_tag_3$DIA, cache_tag_3$DIB, cache_tag_3$DOA;
  wire [5 : 0] cache_tag_3$ADDRA, cache_tag_3$ADDRB;
  wire cache_tag_3$ENA, cache_tag_3$ENB, cache_tag_3$WEA, cache_tag_3$WEB;

  // ports of submodule cache_valid_0
  wire [5 : 0] cache_valid_0$ADDRA, cache_valid_0$ADDRB;
  wire cache_valid_0$DIA,
       cache_valid_0$DIB,
       cache_valid_0$DOA,
       cache_valid_0$ENA,
       cache_valid_0$ENB,
       cache_valid_0$WEA,
       cache_valid_0$WEB;

  // ports of submodule cache_valid_1
  wire [5 : 0] cache_valid_1$ADDRA, cache_valid_1$ADDRB;
  wire cache_valid_1$DIA,
       cache_valid_1$DIB,
       cache_valid_1$DOA,
       cache_valid_1$ENA,
       cache_valid_1$ENB,
       cache_valid_1$WEA,
       cache_valid_1$WEB;

  // ports of submodule cache_valid_2
  wire [5 : 0] cache_valid_2$ADDRA, cache_valid_2$ADDRB;
  wire cache_valid_2$DIA,
       cache_valid_2$DIB,
       cache_valid_2$DOA,
       cache_valid_2$ENA,
       cache_valid_2$ENB,
       cache_valid_2$WEA,
       cache_valid_2$WEB;

  // ports of submodule cache_valid_3
  wire [5 : 0] cache_valid_3$ADDRA, cache_valid_3$ADDRB;
  wire cache_valid_3$DIA,
       cache_valid_3$DIB,
       cache_valid_3$DOA,
       cache_valid_3$ENA,
       cache_valid_3$ENB,
       cache_valid_3$WEA,
       cache_valid_3$WEB;

  // rule scheduling signals
  wire CAN_FIRE_RL_cache_cache_is_disabled,
       CAN_FIRE_RL_cache_empty_response_from_memory_after_dirty_line_write,
       CAN_FIRE_RL_cache_ff_request_to_memory_dequeue,
       CAN_FIRE_RL_cache_ff_request_to_memory_enqueue,
       CAN_FIRE_RL_cache_got_response_from_memory,
       CAN_FIRE_RL_cache_initialize_cache,
       CAN_FIRE_RL_cache_read_from_bram,
       CAN_FIRE_RL_cache_stall_for_write_to_take_effect,
       CAN_FIRE_clear_all,
       CAN_FIRE_request_from_cpu,
       CAN_FIRE_request_to_memory,
       CAN_FIRE_response_from_memory,
       CAN_FIRE_response_to_cpu,
       WILL_FIRE_RL_cache_cache_is_disabled,
       WILL_FIRE_RL_cache_empty_response_from_memory_after_dirty_line_write,
       WILL_FIRE_RL_cache_ff_request_to_memory_dequeue,
       WILL_FIRE_RL_cache_ff_request_to_memory_enqueue,
       WILL_FIRE_RL_cache_got_response_from_memory,
       WILL_FIRE_RL_cache_initialize_cache,
       WILL_FIRE_RL_cache_read_from_bram,
       WILL_FIRE_RL_cache_stall_for_write_to_take_effect,
       WILL_FIRE_clear_all,
       WILL_FIRE_request_from_cpu,
       WILL_FIRE_request_to_memory,
       WILL_FIRE_response_from_memory,
       WILL_FIRE_response_to_cpu;

  // inputs to muxes for submodule ports
  wire [296 : 0] MUX_cache_ff_request_to_memory_enqw$wset_1__VAL_1,
		 MUX_cache_ff_request_to_memory_enqw$wset_1__VAL_2,
		 MUX_cache_ff_request_to_memory_enqw$wset_1__VAL_3;
  wire [68 : 0] MUX_cache_wr_response_to_cpu$wset_1__VAL_1,
		MUX_cache_wr_response_to_cpu$wset_1__VAL_2;
  wire [2 : 0] MUX_cache_rg_word_count$write_1__VAL_1;
  wire [1 : 0] MUX_cache_rg_state$port0__write_1__VAL_1;
  wire MUX_cache_data_0_0$b_put_1__SEL_1,
       MUX_cache_data_0_1$b_put_1__SEL_1,
       MUX_cache_data_0_2$b_put_1__SEL_1,
       MUX_cache_data_0_3$b_put_1__SEL_1,
       MUX_cache_data_0_4$b_put_1__SEL_1,
       MUX_cache_data_0_5$b_put_1__SEL_1,
       MUX_cache_data_0_6$b_put_1__SEL_1,
       MUX_cache_data_0_7$b_put_1__SEL_1,
       MUX_cache_data_1_0$b_put_1__SEL_1,
       MUX_cache_data_1_1$b_put_1__SEL_1,
       MUX_cache_data_1_2$b_put_1__SEL_1,
       MUX_cache_data_1_3$b_put_1__SEL_1,
       MUX_cache_data_1_4$b_put_1__SEL_1,
       MUX_cache_data_1_5$b_put_1__SEL_1,
       MUX_cache_data_1_6$b_put_1__SEL_1,
       MUX_cache_data_1_7$b_put_1__SEL_1,
       MUX_cache_data_2_0$b_put_1__SEL_1,
       MUX_cache_data_2_1$b_put_1__SEL_1,
       MUX_cache_data_2_2$b_put_1__SEL_1,
       MUX_cache_data_2_3$b_put_1__SEL_1,
       MUX_cache_data_2_4$b_put_1__SEL_1,
       MUX_cache_data_2_5$b_put_1__SEL_1,
       MUX_cache_data_2_6$b_put_1__SEL_1,
       MUX_cache_data_2_7$b_put_1__SEL_1,
       MUX_cache_data_3_0$b_put_1__SEL_1,
       MUX_cache_data_3_1$b_put_1__SEL_1,
       MUX_cache_data_3_2$b_put_1__SEL_1,
       MUX_cache_data_3_3$b_put_1__SEL_1,
       MUX_cache_data_3_4$b_put_1__SEL_1,
       MUX_cache_data_3_5$b_put_1__SEL_1,
       MUX_cache_data_3_6$b_put_1__SEL_1,
       MUX_cache_data_3_7$b_put_1__SEL_1,
       MUX_cache_dirty_0$b_put_1__SEL_1,
       MUX_cache_dirty_1$b_put_1__SEL_1,
       MUX_cache_dirty_2$b_put_1__SEL_1,
       MUX_cache_dirty_3$b_put_1__SEL_1,
       MUX_cache_dirty_3$b_put_1__SEL_2,
       MUX_cache_ff_request_to_memory_enqw$wset_1__SEL_1,
       MUX_cache_ff_request_to_memory_enqw$wset_1__SEL_2,
       MUX_cache_rg_dirty_line_write_back$write_1__SEL_1,
       MUX_cache_rg_line_write_stall$write_1__SEL_1,
       MUX_cache_rg_state$port0__write_1__SEL_1,
       MUX_cache_rg_word_count$write_1__SEL_1,
       MUX_cache_valid_0$a_put_1__SEL_1,
       MUX_cache_wr_response_to_cpu$wset_1__SEL_1;

  // remaining internal signals
  reg [63 : 0] v__h12082,
	       v__h12824,
	       v__h15920,
	       v__h15998,
	       v__h18628,
	       v__h19170,
	       v__h19388,
	       v__h21110,
	       v__h21149,
	       v__h21431,
	       v__h21572,
	       v__h21783,
	       v__h22291,
	       v__h23716,
	       v__h24589,
	       v__h28379;
  reg [31 : 0] CASE_cache_ff_request_from_cpuD_OUT_BITS_37_T_ETC__q2,
	       CASE_cache_ff_response_from_memoryD_OUT_BITS__ETC__q1,
	       SEL_ARR_cache_data_0_0_a_read__2_cache_data_0__ETC___d82,
	       SEL_ARR_cache_data_0_0_a_read__2_cache_data_1__ETC___d357,
	       SEL_ARR_cache_data_0_1_a_read__3_cache_data_1__ETC___d355,
	       SEL_ARR_cache_data_0_2_a_read__4_cache_data_1__ETC___d352,
	       SEL_ARR_cache_data_0_3_a_read__5_cache_data_1__ETC___d350,
	       SEL_ARR_cache_data_0_4_a_read__6_cache_data_1__ETC___d347,
	       SEL_ARR_cache_data_0_5_a_read__7_cache_data_1__ETC___d345,
	       SEL_ARR_cache_data_0_6_a_read__8_cache_data_1__ETC___d342,
	       SEL_ARR_cache_data_0_7_a_read__9_cache_data_1__ETC___d340,
	       SEL_ARR_cache_data_1_0_a_read__3_cache_data_1__ETC___d92,
	       SEL_ARR_cache_data_2_0_a_read__3_cache_data_2__ETC___d102,
	       SEL_ARR_cache_data_3_0_a_read__03_cache_data_3_ETC___d112,
	       accessed_word1__h15951,
	       accessed_word__h15952,
	       v__h21768;
  reg [20 : 0] SEL_ARR_cache_tag_0_a_read__9_cache_tag_1_a_re_ETC___d327;
  reg [2 : 0] lru_bits__h11978;
  reg SEL_ARR_cache_dirty_0_a_read__30_cache_dirty_1_ETC___d335;
  wire [255 : 0] x_data_line__h11892;
  wire [31 : 0] IF_NOT_cache_valid_0_a_read__8_55_OR_NOT_cache_ETC___d401,
		IF_NOT_cache_valid_1_a_read__4_52_OR_NOT_cache_ETC___d411,
		IF_SEL_ARR_cache_pseudo_lru_0_38_cache_pseudo__ETC___d305,
		IF_SEL_ARR_cache_pseudo_lru_0_38_cache_pseudo__ETC___d409,
		IF_cache_ff_request_from_cpu_first__3_BITS_1_T_ETC___d428,
		IF_cache_valid_0_a_read__8_AND_cache_valid_1_a_ETC___d324,
		IF_cache_valid_0_a_read__8_AND_cache_valid_1_a_ETC___d413,
		IF_cache_valid_0_a_read__8_AND_cache_valid_1_a_ETC___d427,
		IF_cache_valid_1_a_read__4_AND_cache_tag_1_a_r_ETC___d115,
		IF_cache_valid_1_a_read__4_AND_cache_tag_1_a_r_ETC___d397,
		IF_cache_valid_1_a_read__4_THEN_IF_cache_valid_ETC___d322,
		IF_cache_valid_2_a_read__0_AND_cache_tag_2_a_r_ETC___d406,
		IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117,
		IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d398,
		old_address__h19157,
		v__h21720,
		v__h21754,
		x__h20895,
		x__h20971,
		x__h21073,
		x_address__h24666;
  wire [2 : 0] IF_IF_cache_ff_request_from_cpu_first__3_BITS__ETC___d418,
	       _theResult_____1_snd__h20526,
	       _theResult_____1_snd__h20561,
	       _theResult_____1_snd__h20727,
	       _theResult_____1_snd__h20774,
	       lru_bits___1__h19789,
	       x__h20865,
	       x__h20940,
	       x__h21042,
	       x__h23621,
	       y__h20968,
	       y__h21070;
  wire [1 : 0] IF_cache_valid_1_a_read__4_THEN_IF_cache_valid_ETC___d313,
	       IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d164,
	       x__h21376,
	       x__h24857;
  wire IF_IF_cache_ff_request_from_cpu_first__3_BITS__ETC___d381,
       IF_IF_cache_ff_request_from_cpu_first__3_BITS__ETC___d396,
       IF_cache_ff_request_from_cpu_first__3_BITS_1_T_ETC___d369,
       IF_cache_valid_0_a_read__8_AND_cache_valid_1_a_ETC___d379,
       IF_cache_valid_0_a_read__8_AND_cache_valid_1_a_ETC___d389,
       IF_cache_valid_0_a_read__8_AND_cache_valid_1_a_ETC___d394,
       NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d175,
       NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179,
       NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d231,
       NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d337,
       NOT_cache_valid_0_a_read__8_55_OR_cache_valid__ETC___d367,
       NOT_cache_valid_2_a_read__0_49_OR_NOT_cache_ta_ETC___d159,
       NOT_cache_valid_3_a_read__5_46_OR_NOT_cache_ta_ETC___d383,
       NOT_cache_valid_3_a_read__5_46_OR_NOT_cache_ta_ETC___d391,
       SEL_ARR_cache_pseudo_lru_0_38_cache_pseudo_lru_ETC___d307,
       _dfoo1,
       _dfoo13,
       _dfoo5,
       _dfoo9,
       cache_ff_request_from_cpu_first__3_BITS_1_TO_0_ETC___d162,
       cache_ff_request_from_cpu_first__3_BITS_1_TO_0_ETC___d360,
       cache_ff_request_from_cpu_first__3_BITS_1_TO_0_ETC___d69,
       cache_ff_request_from_cpu_first__3_BITS_35_TO__ETC___d161,
       cache_ff_response_from_memory_first__17_BITS_4_ETC___d523,
       cache_rg_offset_22_EQ_cache_ff_response_from_m_ETC___d533,
       cache_rg_replace_block_64_EQ_0_65_AND_cache_rg_ETC___d622,
       cache_rg_replace_block_64_EQ_1_83_AND_cache_rg_ETC___d623,
       cache_rg_replace_block_64_EQ_2_93_AND_cache_rg_ETC___d624,
       cache_rg_replace_block_64_EQ_3_03_AND_cache_rg_ETC___d625,
       cache_tag_0_a_read__9_EQ_cache_ff_request_from_ETC___d60,
       cache_tag_1_a_read__5_EQ_cache_ff_request_from_ETC___d56,
       cache_tag_2_a_read__1_EQ_cache_ff_request_from_ETC___d52,
       cache_tag_3_a_read__6_EQ_cache_ff_request_from_ETC___d48,
       cache_valid_0_a_read__8_AND_cache_valid_1_a_re_ETC___d237,
       cache_valid_2_a_read__0_AND_cache_tag_2_a_read_ETC___d362,
       cache_valid_2_a_read__0_AND_cache_tag_2_a_read_ETC___d63,
       cache_valid_3_a_read__5_AND_cache_tag_3_a_read_ETC___d174,
       cache_valid_3_a_read__5_AND_cache_tag_3_a_read_ETC___d178,
       cache_valid_3_a_read__5_AND_cache_tag_3_a_read_ETC___d371,
       cache_valid_3_a_read__5_AND_cache_tag_3_a_read_ETC___d374,
       cache_valid_3_a_read__5_AND_cache_tag_3_a_read_ETC___d68;

  // action method request_from_cpu
  assign RDY_request_from_cpu =
	     !cache_rg_initialize && x__h24857 == 2'd0 &&
	     cache_ff_request_from_cpu$FULL_N ;
  assign CAN_FIRE_request_from_cpu =
	     !cache_rg_initialize && x__h24857 == 2'd0 &&
	     cache_ff_request_from_cpu$FULL_N ;
  assign WILL_FIRE_request_from_cpu = EN_request_from_cpu ;

  // actionvalue method response_to_cpu
  assign response_to_cpu =
	     { cache_wr_response_to_cpu$whas &&
	       cache_wr_response_to_cpu$wget[68],
	       cache_wr_response_to_cpu$wget[67:0] } ;
  assign RDY_response_to_cpu = !cache_rg_initialize ;
  assign CAN_FIRE_response_to_cpu = !cache_rg_initialize ;
  assign WILL_FIRE_response_to_cpu = EN_response_to_cpu ;

  // actionvalue method request_to_memory
  assign request_to_memory =
	     cache_ff_request_to_memory_ff$EMPTY_N ?
	       cache_ff_request_to_memory_ff$D_OUT :
	       cache_ff_request_to_memory_enqw$wget ;
  assign RDY_request_to_memory =
	     !cache_rg_initialize &&
	     cache_ff_request_to_memory_firstValid$Q_OUT &&
	     (cache_ff_request_to_memory_ff$EMPTY_N ||
	      cache_ff_request_to_memory_enqw$whas) ;
  assign CAN_FIRE_request_to_memory =
	     !cache_rg_initialize &&
	     cache_ff_request_to_memory_firstValid$Q_OUT &&
	     (cache_ff_request_to_memory_ff$EMPTY_N ||
	      cache_ff_request_to_memory_enqw$whas) ;
  assign WILL_FIRE_request_to_memory = EN_request_to_memory ;

  // actionvalue method response_from_memory
  assign response_from_memory = cache_wr_line_done$whas ;
  assign RDY_response_from_memory =
	     !cache_rg_initialize && cache_ff_response_from_memory$FULL_N ;
  assign CAN_FIRE_response_from_memory =
	     !cache_rg_initialize && cache_ff_response_from_memory$FULL_N ;
  assign WILL_FIRE_response_from_memory = EN_response_from_memory ;

  // action method clear_all
  assign RDY_clear_all = 1'd1 ;
  assign CAN_FIRE_clear_all = 1'd1 ;
  assign WILL_FIRE_clear_all = EN_clear_all ;

  // submodule cache_data_0_0
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(7'd64)) cache_data_0_0(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(cache_data_0_0$ADDRA),
					  .ADDRB(cache_data_0_0$ADDRB),
					  .DIA(cache_data_0_0$DIA),
					  .DIB(cache_data_0_0$DIB),
					  .WEA(cache_data_0_0$WEA),
					  .WEB(cache_data_0_0$WEB),
					  .ENA(cache_data_0_0$ENA),
					  .ENB(cache_data_0_0$ENB),
					  .DOA(cache_data_0_0$DOA),
					  .DOB());

  // submodule cache_data_0_1
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(7'd64)) cache_data_0_1(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(cache_data_0_1$ADDRA),
					  .ADDRB(cache_data_0_1$ADDRB),
					  .DIA(cache_data_0_1$DIA),
					  .DIB(cache_data_0_1$DIB),
					  .WEA(cache_data_0_1$WEA),
					  .WEB(cache_data_0_1$WEB),
					  .ENA(cache_data_0_1$ENA),
					  .ENB(cache_data_0_1$ENB),
					  .DOA(cache_data_0_1$DOA),
					  .DOB());

  // submodule cache_data_0_2
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(7'd64)) cache_data_0_2(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(cache_data_0_2$ADDRA),
					  .ADDRB(cache_data_0_2$ADDRB),
					  .DIA(cache_data_0_2$DIA),
					  .DIB(cache_data_0_2$DIB),
					  .WEA(cache_data_0_2$WEA),
					  .WEB(cache_data_0_2$WEB),
					  .ENA(cache_data_0_2$ENA),
					  .ENB(cache_data_0_2$ENB),
					  .DOA(cache_data_0_2$DOA),
					  .DOB());

  // submodule cache_data_0_3
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(7'd64)) cache_data_0_3(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(cache_data_0_3$ADDRA),
					  .ADDRB(cache_data_0_3$ADDRB),
					  .DIA(cache_data_0_3$DIA),
					  .DIB(cache_data_0_3$DIB),
					  .WEA(cache_data_0_3$WEA),
					  .WEB(cache_data_0_3$WEB),
					  .ENA(cache_data_0_3$ENA),
					  .ENB(cache_data_0_3$ENB),
					  .DOA(cache_data_0_3$DOA),
					  .DOB());

  // submodule cache_data_0_4
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(7'd64)) cache_data_0_4(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(cache_data_0_4$ADDRA),
					  .ADDRB(cache_data_0_4$ADDRB),
					  .DIA(cache_data_0_4$DIA),
					  .DIB(cache_data_0_4$DIB),
					  .WEA(cache_data_0_4$WEA),
					  .WEB(cache_data_0_4$WEB),
					  .ENA(cache_data_0_4$ENA),
					  .ENB(cache_data_0_4$ENB),
					  .DOA(cache_data_0_4$DOA),
					  .DOB());

  // submodule cache_data_0_5
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(7'd64)) cache_data_0_5(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(cache_data_0_5$ADDRA),
					  .ADDRB(cache_data_0_5$ADDRB),
					  .DIA(cache_data_0_5$DIA),
					  .DIB(cache_data_0_5$DIB),
					  .WEA(cache_data_0_5$WEA),
					  .WEB(cache_data_0_5$WEB),
					  .ENA(cache_data_0_5$ENA),
					  .ENB(cache_data_0_5$ENB),
					  .DOA(cache_data_0_5$DOA),
					  .DOB());

  // submodule cache_data_0_6
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(7'd64)) cache_data_0_6(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(cache_data_0_6$ADDRA),
					  .ADDRB(cache_data_0_6$ADDRB),
					  .DIA(cache_data_0_6$DIA),
					  .DIB(cache_data_0_6$DIB),
					  .WEA(cache_data_0_6$WEA),
					  .WEB(cache_data_0_6$WEB),
					  .ENA(cache_data_0_6$ENA),
					  .ENB(cache_data_0_6$ENB),
					  .DOA(cache_data_0_6$DOA),
					  .DOB());

  // submodule cache_data_0_7
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(7'd64)) cache_data_0_7(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(cache_data_0_7$ADDRA),
					  .ADDRB(cache_data_0_7$ADDRB),
					  .DIA(cache_data_0_7$DIA),
					  .DIB(cache_data_0_7$DIB),
					  .WEA(cache_data_0_7$WEA),
					  .WEB(cache_data_0_7$WEB),
					  .ENA(cache_data_0_7$ENA),
					  .ENB(cache_data_0_7$ENB),
					  .DOA(cache_data_0_7$DOA),
					  .DOB());

  // submodule cache_data_1_0
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(7'd64)) cache_data_1_0(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(cache_data_1_0$ADDRA),
					  .ADDRB(cache_data_1_0$ADDRB),
					  .DIA(cache_data_1_0$DIA),
					  .DIB(cache_data_1_0$DIB),
					  .WEA(cache_data_1_0$WEA),
					  .WEB(cache_data_1_0$WEB),
					  .ENA(cache_data_1_0$ENA),
					  .ENB(cache_data_1_0$ENB),
					  .DOA(cache_data_1_0$DOA),
					  .DOB());

  // submodule cache_data_1_1
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(7'd64)) cache_data_1_1(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(cache_data_1_1$ADDRA),
					  .ADDRB(cache_data_1_1$ADDRB),
					  .DIA(cache_data_1_1$DIA),
					  .DIB(cache_data_1_1$DIB),
					  .WEA(cache_data_1_1$WEA),
					  .WEB(cache_data_1_1$WEB),
					  .ENA(cache_data_1_1$ENA),
					  .ENB(cache_data_1_1$ENB),
					  .DOA(cache_data_1_1$DOA),
					  .DOB());

  // submodule cache_data_1_2
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(7'd64)) cache_data_1_2(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(cache_data_1_2$ADDRA),
					  .ADDRB(cache_data_1_2$ADDRB),
					  .DIA(cache_data_1_2$DIA),
					  .DIB(cache_data_1_2$DIB),
					  .WEA(cache_data_1_2$WEA),
					  .WEB(cache_data_1_2$WEB),
					  .ENA(cache_data_1_2$ENA),
					  .ENB(cache_data_1_2$ENB),
					  .DOA(cache_data_1_2$DOA),
					  .DOB());

  // submodule cache_data_1_3
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(7'd64)) cache_data_1_3(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(cache_data_1_3$ADDRA),
					  .ADDRB(cache_data_1_3$ADDRB),
					  .DIA(cache_data_1_3$DIA),
					  .DIB(cache_data_1_3$DIB),
					  .WEA(cache_data_1_3$WEA),
					  .WEB(cache_data_1_3$WEB),
					  .ENA(cache_data_1_3$ENA),
					  .ENB(cache_data_1_3$ENB),
					  .DOA(cache_data_1_3$DOA),
					  .DOB());

  // submodule cache_data_1_4
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(7'd64)) cache_data_1_4(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(cache_data_1_4$ADDRA),
					  .ADDRB(cache_data_1_4$ADDRB),
					  .DIA(cache_data_1_4$DIA),
					  .DIB(cache_data_1_4$DIB),
					  .WEA(cache_data_1_4$WEA),
					  .WEB(cache_data_1_4$WEB),
					  .ENA(cache_data_1_4$ENA),
					  .ENB(cache_data_1_4$ENB),
					  .DOA(cache_data_1_4$DOA),
					  .DOB());

  // submodule cache_data_1_5
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(7'd64)) cache_data_1_5(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(cache_data_1_5$ADDRA),
					  .ADDRB(cache_data_1_5$ADDRB),
					  .DIA(cache_data_1_5$DIA),
					  .DIB(cache_data_1_5$DIB),
					  .WEA(cache_data_1_5$WEA),
					  .WEB(cache_data_1_5$WEB),
					  .ENA(cache_data_1_5$ENA),
					  .ENB(cache_data_1_5$ENB),
					  .DOA(cache_data_1_5$DOA),
					  .DOB());

  // submodule cache_data_1_6
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(7'd64)) cache_data_1_6(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(cache_data_1_6$ADDRA),
					  .ADDRB(cache_data_1_6$ADDRB),
					  .DIA(cache_data_1_6$DIA),
					  .DIB(cache_data_1_6$DIB),
					  .WEA(cache_data_1_6$WEA),
					  .WEB(cache_data_1_6$WEB),
					  .ENA(cache_data_1_6$ENA),
					  .ENB(cache_data_1_6$ENB),
					  .DOA(cache_data_1_6$DOA),
					  .DOB());

  // submodule cache_data_1_7
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(7'd64)) cache_data_1_7(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(cache_data_1_7$ADDRA),
					  .ADDRB(cache_data_1_7$ADDRB),
					  .DIA(cache_data_1_7$DIA),
					  .DIB(cache_data_1_7$DIB),
					  .WEA(cache_data_1_7$WEA),
					  .WEB(cache_data_1_7$WEB),
					  .ENA(cache_data_1_7$ENA),
					  .ENB(cache_data_1_7$ENB),
					  .DOA(cache_data_1_7$DOA),
					  .DOB());

  // submodule cache_data_2_0
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(7'd64)) cache_data_2_0(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(cache_data_2_0$ADDRA),
					  .ADDRB(cache_data_2_0$ADDRB),
					  .DIA(cache_data_2_0$DIA),
					  .DIB(cache_data_2_0$DIB),
					  .WEA(cache_data_2_0$WEA),
					  .WEB(cache_data_2_0$WEB),
					  .ENA(cache_data_2_0$ENA),
					  .ENB(cache_data_2_0$ENB),
					  .DOA(cache_data_2_0$DOA),
					  .DOB());

  // submodule cache_data_2_1
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(7'd64)) cache_data_2_1(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(cache_data_2_1$ADDRA),
					  .ADDRB(cache_data_2_1$ADDRB),
					  .DIA(cache_data_2_1$DIA),
					  .DIB(cache_data_2_1$DIB),
					  .WEA(cache_data_2_1$WEA),
					  .WEB(cache_data_2_1$WEB),
					  .ENA(cache_data_2_1$ENA),
					  .ENB(cache_data_2_1$ENB),
					  .DOA(cache_data_2_1$DOA),
					  .DOB());

  // submodule cache_data_2_2
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(7'd64)) cache_data_2_2(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(cache_data_2_2$ADDRA),
					  .ADDRB(cache_data_2_2$ADDRB),
					  .DIA(cache_data_2_2$DIA),
					  .DIB(cache_data_2_2$DIB),
					  .WEA(cache_data_2_2$WEA),
					  .WEB(cache_data_2_2$WEB),
					  .ENA(cache_data_2_2$ENA),
					  .ENB(cache_data_2_2$ENB),
					  .DOA(cache_data_2_2$DOA),
					  .DOB());

  // submodule cache_data_2_3
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(7'd64)) cache_data_2_3(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(cache_data_2_3$ADDRA),
					  .ADDRB(cache_data_2_3$ADDRB),
					  .DIA(cache_data_2_3$DIA),
					  .DIB(cache_data_2_3$DIB),
					  .WEA(cache_data_2_3$WEA),
					  .WEB(cache_data_2_3$WEB),
					  .ENA(cache_data_2_3$ENA),
					  .ENB(cache_data_2_3$ENB),
					  .DOA(cache_data_2_3$DOA),
					  .DOB());

  // submodule cache_data_2_4
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(7'd64)) cache_data_2_4(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(cache_data_2_4$ADDRA),
					  .ADDRB(cache_data_2_4$ADDRB),
					  .DIA(cache_data_2_4$DIA),
					  .DIB(cache_data_2_4$DIB),
					  .WEA(cache_data_2_4$WEA),
					  .WEB(cache_data_2_4$WEB),
					  .ENA(cache_data_2_4$ENA),
					  .ENB(cache_data_2_4$ENB),
					  .DOA(cache_data_2_4$DOA),
					  .DOB());

  // submodule cache_data_2_5
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(7'd64)) cache_data_2_5(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(cache_data_2_5$ADDRA),
					  .ADDRB(cache_data_2_5$ADDRB),
					  .DIA(cache_data_2_5$DIA),
					  .DIB(cache_data_2_5$DIB),
					  .WEA(cache_data_2_5$WEA),
					  .WEB(cache_data_2_5$WEB),
					  .ENA(cache_data_2_5$ENA),
					  .ENB(cache_data_2_5$ENB),
					  .DOA(cache_data_2_5$DOA),
					  .DOB());

  // submodule cache_data_2_6
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(7'd64)) cache_data_2_6(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(cache_data_2_6$ADDRA),
					  .ADDRB(cache_data_2_6$ADDRB),
					  .DIA(cache_data_2_6$DIA),
					  .DIB(cache_data_2_6$DIB),
					  .WEA(cache_data_2_6$WEA),
					  .WEB(cache_data_2_6$WEB),
					  .ENA(cache_data_2_6$ENA),
					  .ENB(cache_data_2_6$ENB),
					  .DOA(cache_data_2_6$DOA),
					  .DOB());

  // submodule cache_data_2_7
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(7'd64)) cache_data_2_7(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(cache_data_2_7$ADDRA),
					  .ADDRB(cache_data_2_7$ADDRB),
					  .DIA(cache_data_2_7$DIA),
					  .DIB(cache_data_2_7$DIB),
					  .WEA(cache_data_2_7$WEA),
					  .WEB(cache_data_2_7$WEB),
					  .ENA(cache_data_2_7$ENA),
					  .ENB(cache_data_2_7$ENB),
					  .DOA(cache_data_2_7$DOA),
					  .DOB());

  // submodule cache_data_3_0
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(7'd64)) cache_data_3_0(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(cache_data_3_0$ADDRA),
					  .ADDRB(cache_data_3_0$ADDRB),
					  .DIA(cache_data_3_0$DIA),
					  .DIB(cache_data_3_0$DIB),
					  .WEA(cache_data_3_0$WEA),
					  .WEB(cache_data_3_0$WEB),
					  .ENA(cache_data_3_0$ENA),
					  .ENB(cache_data_3_0$ENB),
					  .DOA(cache_data_3_0$DOA),
					  .DOB());

  // submodule cache_data_3_1
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(7'd64)) cache_data_3_1(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(cache_data_3_1$ADDRA),
					  .ADDRB(cache_data_3_1$ADDRB),
					  .DIA(cache_data_3_1$DIA),
					  .DIB(cache_data_3_1$DIB),
					  .WEA(cache_data_3_1$WEA),
					  .WEB(cache_data_3_1$WEB),
					  .ENA(cache_data_3_1$ENA),
					  .ENB(cache_data_3_1$ENB),
					  .DOA(cache_data_3_1$DOA),
					  .DOB());

  // submodule cache_data_3_2
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(7'd64)) cache_data_3_2(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(cache_data_3_2$ADDRA),
					  .ADDRB(cache_data_3_2$ADDRB),
					  .DIA(cache_data_3_2$DIA),
					  .DIB(cache_data_3_2$DIB),
					  .WEA(cache_data_3_2$WEA),
					  .WEB(cache_data_3_2$WEB),
					  .ENA(cache_data_3_2$ENA),
					  .ENB(cache_data_3_2$ENB),
					  .DOA(cache_data_3_2$DOA),
					  .DOB());

  // submodule cache_data_3_3
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(7'd64)) cache_data_3_3(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(cache_data_3_3$ADDRA),
					  .ADDRB(cache_data_3_3$ADDRB),
					  .DIA(cache_data_3_3$DIA),
					  .DIB(cache_data_3_3$DIB),
					  .WEA(cache_data_3_3$WEA),
					  .WEB(cache_data_3_3$WEB),
					  .ENA(cache_data_3_3$ENA),
					  .ENB(cache_data_3_3$ENB),
					  .DOA(cache_data_3_3$DOA),
					  .DOB());

  // submodule cache_data_3_4
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(7'd64)) cache_data_3_4(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(cache_data_3_4$ADDRA),
					  .ADDRB(cache_data_3_4$ADDRB),
					  .DIA(cache_data_3_4$DIA),
					  .DIB(cache_data_3_4$DIB),
					  .WEA(cache_data_3_4$WEA),
					  .WEB(cache_data_3_4$WEB),
					  .ENA(cache_data_3_4$ENA),
					  .ENB(cache_data_3_4$ENB),
					  .DOA(cache_data_3_4$DOA),
					  .DOB());

  // submodule cache_data_3_5
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(7'd64)) cache_data_3_5(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(cache_data_3_5$ADDRA),
					  .ADDRB(cache_data_3_5$ADDRB),
					  .DIA(cache_data_3_5$DIA),
					  .DIB(cache_data_3_5$DIB),
					  .WEA(cache_data_3_5$WEA),
					  .WEB(cache_data_3_5$WEB),
					  .ENA(cache_data_3_5$ENA),
					  .ENB(cache_data_3_5$ENB),
					  .DOA(cache_data_3_5$DOA),
					  .DOB());

  // submodule cache_data_3_6
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(7'd64)) cache_data_3_6(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(cache_data_3_6$ADDRA),
					  .ADDRB(cache_data_3_6$ADDRB),
					  .DIA(cache_data_3_6$DIA),
					  .DIB(cache_data_3_6$DIB),
					  .WEA(cache_data_3_6$WEA),
					  .WEB(cache_data_3_6$WEB),
					  .ENA(cache_data_3_6$ENA),
					  .ENB(cache_data_3_6$ENB),
					  .DOA(cache_data_3_6$DOA),
					  .DOB());

  // submodule cache_data_3_7
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(7'd64)) cache_data_3_7(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(cache_data_3_7$ADDRA),
					  .ADDRB(cache_data_3_7$ADDRB),
					  .DIA(cache_data_3_7$DIA),
					  .DIB(cache_data_3_7$DIB),
					  .WEA(cache_data_3_7$WEA),
					  .WEB(cache_data_3_7$WEB),
					  .ENA(cache_data_3_7$ENA),
					  .ENB(cache_data_3_7$ENB),
					  .DOA(cache_data_3_7$DOA),
					  .DOB());

  // submodule cache_dirty_0
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd1),
	  .MEMSIZE(7'd64)) cache_dirty_0(.CLKA(CLK),
					 .CLKB(CLK),
					 .ADDRA(cache_dirty_0$ADDRA),
					 .ADDRB(cache_dirty_0$ADDRB),
					 .DIA(cache_dirty_0$DIA),
					 .DIB(cache_dirty_0$DIB),
					 .WEA(cache_dirty_0$WEA),
					 .WEB(cache_dirty_0$WEB),
					 .ENA(cache_dirty_0$ENA),
					 .ENB(cache_dirty_0$ENB),
					 .DOA(cache_dirty_0$DOA),
					 .DOB());

  // submodule cache_dirty_1
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd1),
	  .MEMSIZE(7'd64)) cache_dirty_1(.CLKA(CLK),
					 .CLKB(CLK),
					 .ADDRA(cache_dirty_1$ADDRA),
					 .ADDRB(cache_dirty_1$ADDRB),
					 .DIA(cache_dirty_1$DIA),
					 .DIB(cache_dirty_1$DIB),
					 .WEA(cache_dirty_1$WEA),
					 .WEB(cache_dirty_1$WEB),
					 .ENA(cache_dirty_1$ENA),
					 .ENB(cache_dirty_1$ENB),
					 .DOA(cache_dirty_1$DOA),
					 .DOB());

  // submodule cache_dirty_2
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd1),
	  .MEMSIZE(7'd64)) cache_dirty_2(.CLKA(CLK),
					 .CLKB(CLK),
					 .ADDRA(cache_dirty_2$ADDRA),
					 .ADDRB(cache_dirty_2$ADDRB),
					 .DIA(cache_dirty_2$DIA),
					 .DIB(cache_dirty_2$DIB),
					 .WEA(cache_dirty_2$WEA),
					 .WEB(cache_dirty_2$WEB),
					 .ENA(cache_dirty_2$ENA),
					 .ENB(cache_dirty_2$ENB),
					 .DOA(cache_dirty_2$DOA),
					 .DOB());

  // submodule cache_dirty_3
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd1),
	  .MEMSIZE(7'd64)) cache_dirty_3(.CLKA(CLK),
					 .CLKB(CLK),
					 .ADDRA(cache_dirty_3$ADDRA),
					 .ADDRB(cache_dirty_3$ADDRB),
					 .DIA(cache_dirty_3$DIA),
					 .DIB(cache_dirty_3$DIB),
					 .WEA(cache_dirty_3$WEA),
					 .WEB(cache_dirty_3$WEB),
					 .ENA(cache_dirty_3$ENA),
					 .ENB(cache_dirty_3$ENB),
					 .DOA(cache_dirty_3$DOA),
					 .DOB());

  // submodule cache_ff_request_from_cpu
  FIFO1 #(.width(32'd68),
	  .guarded(32'd1)) cache_ff_request_from_cpu(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(cache_ff_request_from_cpu$D_IN),
						     .ENQ(cache_ff_request_from_cpu$ENQ),
						     .DEQ(cache_ff_request_from_cpu$DEQ),
						     .CLR(cache_ff_request_from_cpu$CLR),
						     .D_OUT(cache_ff_request_from_cpu$D_OUT),
						     .FULL_N(cache_ff_request_from_cpu$FULL_N),
						     .EMPTY_N(cache_ff_request_from_cpu$EMPTY_N));

  // submodule cache_ff_request_to_memory_ff
  FIFO1 #(.width(32'd297),
	  .guarded(32'd0)) cache_ff_request_to_memory_ff(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(cache_ff_request_to_memory_ff$D_IN),
							 .ENQ(cache_ff_request_to_memory_ff$ENQ),
							 .DEQ(cache_ff_request_to_memory_ff$DEQ),
							 .CLR(cache_ff_request_to_memory_ff$CLR),
							 .D_OUT(cache_ff_request_to_memory_ff$D_OUT),
							 .FULL_N(cache_ff_request_to_memory_ff$FULL_N),
							 .EMPTY_N(cache_ff_request_to_memory_ff$EMPTY_N));

  // submodule cache_ff_request_to_memory_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) cache_ff_request_to_memory_firstValid(.CLK(CLK),
								 .D_IN(cache_ff_request_to_memory_firstValid$D_IN),
								 .EN(cache_ff_request_to_memory_firstValid$EN),
								 .Q_OUT(cache_ff_request_to_memory_firstValid$Q_OUT));

  // submodule cache_ff_response_from_memory
  FIFOL1 #(.width(32'd66)) cache_ff_response_from_memory(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(cache_ff_response_from_memory$D_IN),
							 .ENQ(cache_ff_response_from_memory$ENQ),
							 .DEQ(cache_ff_response_from_memory$DEQ),
							 .CLR(cache_ff_response_from_memory$CLR),
							 .D_OUT(cache_ff_response_from_memory$D_OUT),
							 .FULL_N(cache_ff_response_from_memory$FULL_N),
							 .EMPTY_N(cache_ff_response_from_memory$EMPTY_N));

  // submodule cache_tag_0
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd21),
	  .MEMSIZE(7'd64)) cache_tag_0(.CLKA(CLK),
				       .CLKB(CLK),
				       .ADDRA(cache_tag_0$ADDRA),
				       .ADDRB(cache_tag_0$ADDRB),
				       .DIA(cache_tag_0$DIA),
				       .DIB(cache_tag_0$DIB),
				       .WEA(cache_tag_0$WEA),
				       .WEB(cache_tag_0$WEB),
				       .ENA(cache_tag_0$ENA),
				       .ENB(cache_tag_0$ENB),
				       .DOA(cache_tag_0$DOA),
				       .DOB());

  // submodule cache_tag_1
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd21),
	  .MEMSIZE(7'd64)) cache_tag_1(.CLKA(CLK),
				       .CLKB(CLK),
				       .ADDRA(cache_tag_1$ADDRA),
				       .ADDRB(cache_tag_1$ADDRB),
				       .DIA(cache_tag_1$DIA),
				       .DIB(cache_tag_1$DIB),
				       .WEA(cache_tag_1$WEA),
				       .WEB(cache_tag_1$WEB),
				       .ENA(cache_tag_1$ENA),
				       .ENB(cache_tag_1$ENB),
				       .DOA(cache_tag_1$DOA),
				       .DOB());

  // submodule cache_tag_2
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd21),
	  .MEMSIZE(7'd64)) cache_tag_2(.CLKA(CLK),
				       .CLKB(CLK),
				       .ADDRA(cache_tag_2$ADDRA),
				       .ADDRB(cache_tag_2$ADDRB),
				       .DIA(cache_tag_2$DIA),
				       .DIB(cache_tag_2$DIB),
				       .WEA(cache_tag_2$WEA),
				       .WEB(cache_tag_2$WEB),
				       .ENA(cache_tag_2$ENA),
				       .ENB(cache_tag_2$ENB),
				       .DOA(cache_tag_2$DOA),
				       .DOB());

  // submodule cache_tag_3
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd21),
	  .MEMSIZE(7'd64)) cache_tag_3(.CLKA(CLK),
				       .CLKB(CLK),
				       .ADDRA(cache_tag_3$ADDRA),
				       .ADDRB(cache_tag_3$ADDRB),
				       .DIA(cache_tag_3$DIA),
				       .DIB(cache_tag_3$DIB),
				       .WEA(cache_tag_3$WEA),
				       .WEB(cache_tag_3$WEB),
				       .ENA(cache_tag_3$ENA),
				       .ENB(cache_tag_3$ENB),
				       .DOA(cache_tag_3$DOA),
				       .DOB());

  // submodule cache_valid_0
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd1),
	  .MEMSIZE(7'd64)) cache_valid_0(.CLKA(CLK),
					 .CLKB(CLK),
					 .ADDRA(cache_valid_0$ADDRA),
					 .ADDRB(cache_valid_0$ADDRB),
					 .DIA(cache_valid_0$DIA),
					 .DIB(cache_valid_0$DIB),
					 .WEA(cache_valid_0$WEA),
					 .WEB(cache_valid_0$WEB),
					 .ENA(cache_valid_0$ENA),
					 .ENB(cache_valid_0$ENB),
					 .DOA(cache_valid_0$DOA),
					 .DOB());

  // submodule cache_valid_1
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd1),
	  .MEMSIZE(7'd64)) cache_valid_1(.CLKA(CLK),
					 .CLKB(CLK),
					 .ADDRA(cache_valid_1$ADDRA),
					 .ADDRB(cache_valid_1$ADDRB),
					 .DIA(cache_valid_1$DIA),
					 .DIB(cache_valid_1$DIB),
					 .WEA(cache_valid_1$WEA),
					 .WEB(cache_valid_1$WEB),
					 .ENA(cache_valid_1$ENA),
					 .ENB(cache_valid_1$ENB),
					 .DOA(cache_valid_1$DOA),
					 .DOB());

  // submodule cache_valid_2
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd1),
	  .MEMSIZE(7'd64)) cache_valid_2(.CLKA(CLK),
					 .CLKB(CLK),
					 .ADDRA(cache_valid_2$ADDRA),
					 .ADDRB(cache_valid_2$ADDRB),
					 .DIA(cache_valid_2$DIA),
					 .DIB(cache_valid_2$DIB),
					 .WEA(cache_valid_2$WEA),
					 .WEB(cache_valid_2$WEB),
					 .ENA(cache_valid_2$ENA),
					 .ENB(cache_valid_2$ENB),
					 .DOA(cache_valid_2$DOA),
					 .DOB());

  // submodule cache_valid_3
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd1),
	  .MEMSIZE(7'd64)) cache_valid_3(.CLKA(CLK),
					 .CLKB(CLK),
					 .ADDRA(cache_valid_3$ADDRA),
					 .ADDRB(cache_valid_3$ADDRB),
					 .DIA(cache_valid_3$DIA),
					 .DIB(cache_valid_3$DIB),
					 .WEA(cache_valid_3$WEA),
					 .WEB(cache_valid_3$WEB),
					 .ENA(cache_valid_3$ENA),
					 .ENB(cache_valid_3$ENB),
					 .DOA(cache_valid_3$DOA),
					 .DOB());

  // rule RL_cache_initialize_cache
  assign CAN_FIRE_RL_cache_initialize_cache = cache_rg_initialize ;
  assign WILL_FIRE_RL_cache_initialize_cache = cache_rg_initialize ;

  // rule RL_cache_cache_is_disabled
  assign CAN_FIRE_RL_cache_cache_is_disabled =
	     cache_ff_request_to_memory_ff$FULL_N &&
	     cache_ff_request_from_cpu$EMPTY_N &&
	     !cache_rg_enable &&
	     cache_rg_state == 2'd2 ;
  assign WILL_FIRE_RL_cache_cache_is_disabled =
	     CAN_FIRE_RL_cache_cache_is_disabled ;

  // rule RL_cache_read_from_bram
  assign CAN_FIRE_RL_cache_read_from_bram =
	     cache_ff_request_from_cpu$EMPTY_N &&
	     cache_ff_request_to_memory_ff$FULL_N &&
	     !cache_rg_initialize &&
	     cache_rg_enable &&
	     cache_rg_state == 2'd2 ;
  assign WILL_FIRE_RL_cache_read_from_bram =
	     CAN_FIRE_RL_cache_read_from_bram ;

  // rule RL_cache_empty_response_from_memory_after_dirty_line_write
  assign CAN_FIRE_RL_cache_empty_response_from_memory_after_dirty_line_write =
	     cache_ff_response_from_memory$EMPTY_N &&
	     cache_rg_line_write_stall &&
	     !cache_rg_initialize ;
  assign WILL_FIRE_RL_cache_empty_response_from_memory_after_dirty_line_write =
	     CAN_FIRE_RL_cache_empty_response_from_memory_after_dirty_line_write ;

  // rule RL_cache_stall_for_write_to_take_effect
  assign CAN_FIRE_RL_cache_stall_for_write_to_take_effect =
	     cache_rg_state == 2'd1 ;
  assign WILL_FIRE_RL_cache_stall_for_write_to_take_effect =
	     CAN_FIRE_RL_cache_stall_for_write_to_take_effect ;

  // rule RL_cache_got_response_from_memory
  assign CAN_FIRE_RL_cache_got_response_from_memory =
	     cache_ff_response_from_memory$EMPTY_N &&
	     cache_ff_request_to_memory_ff$FULL_N &&
	     cache_ff_request_from_cpu$EMPTY_N &&
	     !cache_rg_initialize &&
	     x__h21376 == 2'd3 &&
	     !cache_rg_line_write_stall ;
  assign WILL_FIRE_RL_cache_got_response_from_memory =
	     CAN_FIRE_RL_cache_got_response_from_memory &&
	     !WILL_FIRE_RL_cache_read_from_bram &&
	     !WILL_FIRE_RL_cache_cache_is_disabled ;

  // rule RL_cache_ff_request_to_memory_enqueue
  assign CAN_FIRE_RL_cache_ff_request_to_memory_enqueue =
	     cache_ff_request_to_memory_enqw$whas &&
	     (!EN_request_to_memory ||
	      cache_ff_request_to_memory_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_cache_ff_request_to_memory_enqueue =
	     CAN_FIRE_RL_cache_ff_request_to_memory_enqueue ;

  // rule RL_cache_ff_request_to_memory_dequeue
  assign CAN_FIRE_RL_cache_ff_request_to_memory_dequeue =
	     EN_request_to_memory && cache_ff_request_to_memory_ff$EMPTY_N ;
  assign WILL_FIRE_RL_cache_ff_request_to_memory_dequeue =
	     CAN_FIRE_RL_cache_ff_request_to_memory_dequeue ;

  // inputs to muxes for submodule ports
  assign MUX_cache_data_0_0$b_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd0 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd0 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ;
  assign MUX_cache_data_0_1$b_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd1 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd0 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ;
  assign MUX_cache_data_0_2$b_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd2 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd0 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ;
  assign MUX_cache_data_0_3$b_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd3 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd0 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ;
  assign MUX_cache_data_0_4$b_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd4 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd0 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ;
  assign MUX_cache_data_0_5$b_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd5 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd0 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ;
  assign MUX_cache_data_0_6$b_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd6 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd0 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ;
  assign MUX_cache_data_0_7$b_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd7 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd0 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ;
  assign MUX_cache_data_1_0$b_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd0 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd1 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ;
  assign MUX_cache_data_1_1$b_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd1 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd1 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ;
  assign MUX_cache_data_1_2$b_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd2 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd1 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ;
  assign MUX_cache_data_1_3$b_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd3 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd1 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ;
  assign MUX_cache_data_1_4$b_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd4 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd1 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ;
  assign MUX_cache_data_1_5$b_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd5 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd1 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ;
  assign MUX_cache_data_1_6$b_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd6 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd1 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ;
  assign MUX_cache_data_1_7$b_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd7 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd1 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ;
  assign MUX_cache_data_2_0$b_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd0 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd2 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ;
  assign MUX_cache_data_2_1$b_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd1 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd2 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ;
  assign MUX_cache_data_2_2$b_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd2 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd2 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ;
  assign MUX_cache_data_2_3$b_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd3 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd2 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ;
  assign MUX_cache_data_2_4$b_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd4 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd2 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ;
  assign MUX_cache_data_2_5$b_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd5 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd2 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ;
  assign MUX_cache_data_2_6$b_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd6 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd2 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ;
  assign MUX_cache_data_2_7$b_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd7 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd2 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ;
  assign MUX_cache_data_3_0$b_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd0 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd3 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ;
  assign MUX_cache_data_3_1$b_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd1 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd3 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ;
  assign MUX_cache_data_3_2$b_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd2 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd3 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ;
  assign MUX_cache_data_3_3$b_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd3 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd3 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ;
  assign MUX_cache_data_3_4$b_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd4 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd3 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ;
  assign MUX_cache_data_3_5$b_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd5 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd3 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ;
  assign MUX_cache_data_3_6$b_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd6 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd3 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ;
  assign MUX_cache_data_3_7$b_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd7 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd3 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ;
  assign MUX_cache_dirty_0$b_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd0 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ;
  assign MUX_cache_dirty_1$b_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd1 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ;
  assign MUX_cache_dirty_2$b_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd2 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ;
  assign MUX_cache_dirty_3$b_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_got_response_from_memory && _dfoo1 ;
  assign MUX_cache_dirty_3$b_put_1__SEL_2 =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd3 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ;
  assign MUX_cache_ff_request_to_memory_enqw$wset_1__SEL_1 =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d231 ;
  assign MUX_cache_ff_request_to_memory_enqw$wset_1__SEL_2 =
	     WILL_FIRE_RL_cache_got_response_from_memory && cache_rg_enable &&
	     cache_rg_word_count == 3'd7 &&
	     cache_rg_dirty_line_write_back ;
  assign MUX_cache_rg_dirty_line_write_back$write_1__SEL_1 =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d337 ;
  assign MUX_cache_rg_line_write_stall$write_1__SEL_1 =
	     WILL_FIRE_RL_cache_empty_response_from_memory_after_dirty_line_write &&
	     cache_rg_word_count == 3'd7 ;
  assign MUX_cache_rg_state$port0__write_1__SEL_1 =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu_first__3_BITS_1_TO_0_ETC___d162 ;
  assign MUX_cache_rg_word_count$write_1__SEL_1 =
	     WILL_FIRE_RL_cache_got_response_from_memory && cache_rg_enable ;
  assign MUX_cache_valid_0$a_put_1__SEL_1 =
	     EN_request_from_cpu &&
	     (request_from_cpu_req[67:36] < 32'h40000000 ||
	      request_from_cpu_req[67:36] > 32'h4000000F) ;
  assign MUX_cache_wr_response_to_cpu$wset_1__SEL_1 =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu_first__3_BITS_1_TO_0_ETC___d69 ;
  assign MUX_cache_ff_request_to_memory_enqw$wset_1__VAL_1 =
	     { cache_ff_request_from_cpu$D_OUT[67:36],
	       5'd8,
	       256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ,
	       4'd2 } ;
  assign MUX_cache_ff_request_to_memory_enqw$wset_1__VAL_2 =
	     { x_address__h24666, 5'd8, cache_rg_dirty_line_data, 4'd6 } ;
  assign MUX_cache_ff_request_to_memory_enqw$wset_1__VAL_3 =
	     { cache_ff_request_from_cpu$D_OUT[67:36],
	       5'd1,
	       x_data_line__h11892,
	       cache_ff_request_from_cpu$D_OUT[35:34],
	       cache_ff_request_from_cpu$D_OUT[1:0] } ;
  assign MUX_cache_rg_state$port0__write_1__VAL_1 =
	     (cache_ff_request_from_cpu$D_OUT[1:0] == 2'b10 &&
	      cache_ff_request_from_cpu$D_OUT[37:36] != 2'd0 ||
	      cache_ff_request_from_cpu$D_OUT[1:0] == 2'b01 &&
	      cache_ff_request_from_cpu$D_OUT[36]) ?
	       2'd0 :
	       IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d164 ;
  assign MUX_cache_rg_word_count$write_1__VAL_1 =
	     (cache_rg_word_count == 3'd7) ? 3'd0 : x__h23621 ;
  assign MUX_cache_wr_response_to_cpu$wset_1__VAL_1 =
	     (cache_ff_request_from_cpu$D_OUT[1:0] == 2'b10 &&
	      cache_ff_request_from_cpu$D_OUT[37:36] != 2'd0 ||
	      cache_ff_request_from_cpu$D_OUT[1:0] == 2'b01 &&
	      cache_ff_request_from_cpu$D_OUT[36]) ?
	       { 35'h400000001, cache_ff_request_from_cpu$D_OUT[67:34] } :
	       { 1'd1,
		 (cache_ff_request_from_cpu$D_OUT[35:34] == 2'd0) ?
		   accessed_word1__h15951 :
		   accessed_word__h15952,
		 2'd0,
		 cache_ff_request_from_cpu$D_OUT[67:34] } ;
  assign MUX_cache_wr_response_to_cpu$wset_1__VAL_2 =
	     { 1'd1,
	       cache_ff_response_from_memory$D_OUT[65:33],
	       1'd0,
	       cache_ff_response_from_memory$D_OUT[31:0],
	       cache_ff_request_from_cpu$D_OUT[35:34] } ;

  // inlined wires
  assign cache_wr_response_to_cpu$wget =
	     MUX_cache_wr_response_to_cpu$wset_1__SEL_1 ?
	       MUX_cache_wr_response_to_cpu$wset_1__VAL_1 :
	       MUX_cache_wr_response_to_cpu$wset_1__VAL_2 ;
  assign cache_wr_response_to_cpu$whas =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu_first__3_BITS_1_TO_0_ETC___d69 ||
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     (cache_ff_response_from_memory_first__17_BITS_4_ETC___d523 ||
	      !cache_rg_enable) ;
  assign cache_wr_line_done$whas =
	     WILL_FIRE_RL_cache_empty_response_from_memory_after_dirty_line_write &&
	     cache_rg_word_count == 3'd6 ||
	     WILL_FIRE_RL_cache_got_response_from_memory && cache_rg_enable &&
	     cache_rg_word_count == 3'd6 ;
  always@(MUX_cache_ff_request_to_memory_enqw$wset_1__SEL_1 or
	  MUX_cache_ff_request_to_memory_enqw$wset_1__VAL_1 or
	  MUX_cache_ff_request_to_memory_enqw$wset_1__SEL_2 or
	  MUX_cache_ff_request_to_memory_enqw$wset_1__VAL_2 or
	  WILL_FIRE_RL_cache_cache_is_disabled or
	  MUX_cache_ff_request_to_memory_enqw$wset_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ff_request_to_memory_enqw$wset_1__SEL_1:
	  cache_ff_request_to_memory_enqw$wget =
	      MUX_cache_ff_request_to_memory_enqw$wset_1__VAL_1;
      MUX_cache_ff_request_to_memory_enqw$wset_1__SEL_2:
	  cache_ff_request_to_memory_enqw$wget =
	      MUX_cache_ff_request_to_memory_enqw$wset_1__VAL_2;
      WILL_FIRE_RL_cache_cache_is_disabled:
	  cache_ff_request_to_memory_enqw$wget =
	      MUX_cache_ff_request_to_memory_enqw$wset_1__VAL_3;
      default: cache_ff_request_to_memory_enqw$wget =
		   297'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_ff_request_to_memory_enqw$whas =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d231 ||
	     WILL_FIRE_RL_cache_got_response_from_memory && cache_rg_enable &&
	     cache_rg_word_count == 3'd7 &&
	     cache_rg_dirty_line_write_back ||
	     WILL_FIRE_RL_cache_cache_is_disabled ;
  assign cache_rg_state$EN_port0__write =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu_first__3_BITS_1_TO_0_ETC___d162 ||
	     WILL_FIRE_RL_cache_stall_for_write_to_take_effect ||
	     WILL_FIRE_RL_cache_cache_is_disabled ;
  always@(MUX_cache_rg_state$port0__write_1__SEL_1 or
	  MUX_cache_rg_state$port0__write_1__VAL_1 or
	  WILL_FIRE_RL_cache_stall_for_write_to_take_effect or
	  WILL_FIRE_RL_cache_cache_is_disabled)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_rg_state$port0__write_1__SEL_1:
	  cache_rg_state$port0__write_1 =
	      MUX_cache_rg_state$port0__write_1__VAL_1;
      WILL_FIRE_RL_cache_stall_for_write_to_take_effect:
	  cache_rg_state$port0__write_1 = 2'd0;
      WILL_FIRE_RL_cache_cache_is_disabled:
	  cache_rg_state$port0__write_1 = 2'd3;
      default: cache_rg_state$port0__write_1 = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign cache_rg_state$port1__read =
	     cache_rg_state$EN_port0__write ?
	       cache_rg_state$port0__write_1 :
	       cache_rg_state ;
  assign cache_rg_state$EN_port1__write =
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     (cache_rg_word_count == 3'd7 || !cache_rg_enable) ;
  assign cache_rg_state$port1__write_1 = cache_rg_enable ? 2'd1 : 2'd0 ;
  assign cache_rg_state$port2__read =
	     cache_rg_state$EN_port1__write ?
	       cache_rg_state$port1__write_1 :
	       cache_rg_state$port1__read ;
  assign cache_rg_state$port3__read =
	     EN_request_from_cpu ? 2'd2 : cache_rg_state$port2__read ;

  // register cache_pseudo_lru_0
  assign cache_pseudo_lru_0$D_IN =
	     IF_IF_cache_ff_request_from_cpu_first__3_BITS__ETC___d381 ?
	       (IF_IF_cache_ff_request_from_cpu_first__3_BITS__ETC___d396 ?
		  _theResult_____1_snd__h20727 :
		  _theResult_____1_snd__h20774) :
	       IF_IF_cache_ff_request_from_cpu_first__3_BITS__ETC___d418 ;
  assign cache_pseudo_lru_0$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd0 ;

  // register cache_pseudo_lru_1
  assign cache_pseudo_lru_1$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_1$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd1 ;

  // register cache_pseudo_lru_10
  assign cache_pseudo_lru_10$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_10$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd10 ;

  // register cache_pseudo_lru_11
  assign cache_pseudo_lru_11$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_11$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd11 ;

  // register cache_pseudo_lru_12
  assign cache_pseudo_lru_12$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_12$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd12 ;

  // register cache_pseudo_lru_13
  assign cache_pseudo_lru_13$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_13$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd13 ;

  // register cache_pseudo_lru_14
  assign cache_pseudo_lru_14$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_14$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd14 ;

  // register cache_pseudo_lru_15
  assign cache_pseudo_lru_15$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_15$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd15 ;

  // register cache_pseudo_lru_16
  assign cache_pseudo_lru_16$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_16$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd16 ;

  // register cache_pseudo_lru_17
  assign cache_pseudo_lru_17$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_17$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd17 ;

  // register cache_pseudo_lru_18
  assign cache_pseudo_lru_18$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_18$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd18 ;

  // register cache_pseudo_lru_19
  assign cache_pseudo_lru_19$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_19$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd19 ;

  // register cache_pseudo_lru_2
  assign cache_pseudo_lru_2$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_2$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd2 ;

  // register cache_pseudo_lru_20
  assign cache_pseudo_lru_20$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_20$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd20 ;

  // register cache_pseudo_lru_21
  assign cache_pseudo_lru_21$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_21$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd21 ;

  // register cache_pseudo_lru_22
  assign cache_pseudo_lru_22$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_22$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd22 ;

  // register cache_pseudo_lru_23
  assign cache_pseudo_lru_23$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_23$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd23 ;

  // register cache_pseudo_lru_24
  assign cache_pseudo_lru_24$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_24$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd24 ;

  // register cache_pseudo_lru_25
  assign cache_pseudo_lru_25$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_25$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd25 ;

  // register cache_pseudo_lru_26
  assign cache_pseudo_lru_26$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_26$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd26 ;

  // register cache_pseudo_lru_27
  assign cache_pseudo_lru_27$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_27$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd27 ;

  // register cache_pseudo_lru_28
  assign cache_pseudo_lru_28$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_28$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd28 ;

  // register cache_pseudo_lru_29
  assign cache_pseudo_lru_29$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_29$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd29 ;

  // register cache_pseudo_lru_3
  assign cache_pseudo_lru_3$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_3$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd3 ;

  // register cache_pseudo_lru_30
  assign cache_pseudo_lru_30$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_30$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd30 ;

  // register cache_pseudo_lru_31
  assign cache_pseudo_lru_31$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_31$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd31 ;

  // register cache_pseudo_lru_32
  assign cache_pseudo_lru_32$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_32$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd32 ;

  // register cache_pseudo_lru_33
  assign cache_pseudo_lru_33$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_33$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd33 ;

  // register cache_pseudo_lru_34
  assign cache_pseudo_lru_34$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_34$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd34 ;

  // register cache_pseudo_lru_35
  assign cache_pseudo_lru_35$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_35$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd35 ;

  // register cache_pseudo_lru_36
  assign cache_pseudo_lru_36$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_36$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd36 ;

  // register cache_pseudo_lru_37
  assign cache_pseudo_lru_37$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_37$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd37 ;

  // register cache_pseudo_lru_38
  assign cache_pseudo_lru_38$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_38$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd38 ;

  // register cache_pseudo_lru_39
  assign cache_pseudo_lru_39$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_39$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd39 ;

  // register cache_pseudo_lru_4
  assign cache_pseudo_lru_4$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_4$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd4 ;

  // register cache_pseudo_lru_40
  assign cache_pseudo_lru_40$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_40$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd40 ;

  // register cache_pseudo_lru_41
  assign cache_pseudo_lru_41$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_41$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd41 ;

  // register cache_pseudo_lru_42
  assign cache_pseudo_lru_42$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_42$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd42 ;

  // register cache_pseudo_lru_43
  assign cache_pseudo_lru_43$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_43$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd43 ;

  // register cache_pseudo_lru_44
  assign cache_pseudo_lru_44$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_44$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd44 ;

  // register cache_pseudo_lru_45
  assign cache_pseudo_lru_45$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_45$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd45 ;

  // register cache_pseudo_lru_46
  assign cache_pseudo_lru_46$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_46$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd46 ;

  // register cache_pseudo_lru_47
  assign cache_pseudo_lru_47$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_47$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd47 ;

  // register cache_pseudo_lru_48
  assign cache_pseudo_lru_48$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_48$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd48 ;

  // register cache_pseudo_lru_49
  assign cache_pseudo_lru_49$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_49$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd49 ;

  // register cache_pseudo_lru_5
  assign cache_pseudo_lru_5$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_5$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd5 ;

  // register cache_pseudo_lru_50
  assign cache_pseudo_lru_50$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_50$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd50 ;

  // register cache_pseudo_lru_51
  assign cache_pseudo_lru_51$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_51$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd51 ;

  // register cache_pseudo_lru_52
  assign cache_pseudo_lru_52$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_52$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd52 ;

  // register cache_pseudo_lru_53
  assign cache_pseudo_lru_53$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_53$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd53 ;

  // register cache_pseudo_lru_54
  assign cache_pseudo_lru_54$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_54$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd54 ;

  // register cache_pseudo_lru_55
  assign cache_pseudo_lru_55$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_55$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd55 ;

  // register cache_pseudo_lru_56
  assign cache_pseudo_lru_56$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_56$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd56 ;

  // register cache_pseudo_lru_57
  assign cache_pseudo_lru_57$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_57$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd57 ;

  // register cache_pseudo_lru_58
  assign cache_pseudo_lru_58$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_58$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd58 ;

  // register cache_pseudo_lru_59
  assign cache_pseudo_lru_59$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_59$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd59 ;

  // register cache_pseudo_lru_6
  assign cache_pseudo_lru_6$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_6$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd6 ;

  // register cache_pseudo_lru_60
  assign cache_pseudo_lru_60$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_60$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd60 ;

  // register cache_pseudo_lru_61
  assign cache_pseudo_lru_61$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_61$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd61 ;

  // register cache_pseudo_lru_62
  assign cache_pseudo_lru_62$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_62$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd62 ;

  // register cache_pseudo_lru_63
  assign cache_pseudo_lru_63$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_63$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd63 ;

  // register cache_pseudo_lru_7
  assign cache_pseudo_lru_7$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_7$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd7 ;

  // register cache_pseudo_lru_8
  assign cache_pseudo_lru_8$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_8$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd8 ;

  // register cache_pseudo_lru_9
  assign cache_pseudo_lru_9$D_IN = cache_pseudo_lru_0$D_IN ;
  assign cache_pseudo_lru_9$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[46:41] == 6'd9 ;

  // register cache_rg_dirty_line_addr
  assign cache_rg_dirty_line_addr$D_IN = old_address__h19157 ;
  assign cache_rg_dirty_line_addr$EN =
	     MUX_cache_rg_dirty_line_write_back$write_1__SEL_1 ;

  // register cache_rg_dirty_line_data
  assign cache_rg_dirty_line_data$D_IN =
	     { SEL_ARR_cache_data_0_7_a_read__9_cache_data_1__ETC___d340,
	       SEL_ARR_cache_data_0_6_a_read__8_cache_data_1__ETC___d342,
	       SEL_ARR_cache_data_0_5_a_read__7_cache_data_1__ETC___d345,
	       SEL_ARR_cache_data_0_4_a_read__6_cache_data_1__ETC___d347,
	       SEL_ARR_cache_data_0_3_a_read__5_cache_data_1__ETC___d350,
	       SEL_ARR_cache_data_0_2_a_read__4_cache_data_1__ETC___d352,
	       SEL_ARR_cache_data_0_1_a_read__3_cache_data_1__ETC___d355,
	       SEL_ARR_cache_data_0_0_a_read__2_cache_data_1__ETC___d357 } ;
  assign cache_rg_dirty_line_data$EN =
	     MUX_cache_rg_dirty_line_write_back$write_1__SEL_1 ;

  // register cache_rg_dirty_line_write_back
  assign cache_rg_dirty_line_write_back$D_IN =
	     MUX_cache_rg_dirty_line_write_back$write_1__SEL_1 ;
  assign cache_rg_dirty_line_write_back$EN =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d337 ||
	     WILL_FIRE_RL_cache_got_response_from_memory && cache_rg_enable &&
	     cache_rg_word_count == 3'd7 &&
	     cache_rg_dirty_line_write_back ;

  // register cache_rg_enable
  assign cache_rg_enable$D_IN =
	     request_from_cpu_req[67:36] < 32'h40000000 ||
	     request_from_cpu_req[67:36] > 32'h4000000F ;
  assign cache_rg_enable$EN = EN_request_from_cpu ;

  // register cache_rg_index
  assign cache_rg_index$D_IN = cache_rg_index + 7'd1 ;
  assign cache_rg_index$EN = cache_rg_initialize ;

  // register cache_rg_initialize
  assign cache_rg_initialize$D_IN = 1'd0 ;
  assign cache_rg_initialize$EN =
	     cache_rg_initialize && cache_rg_index == 7'd63 ;

  // register cache_rg_line_write_stall
  assign cache_rg_line_write_stall$D_IN =
	     !MUX_cache_rg_line_write_stall$write_1__SEL_1 ;
  assign cache_rg_line_write_stall$EN =
	     WILL_FIRE_RL_cache_empty_response_from_memory_after_dirty_line_write &&
	     cache_rg_word_count == 3'd7 ||
	     WILL_FIRE_RL_cache_got_response_from_memory && cache_rg_enable &&
	     cache_rg_word_count == 3'd7 &&
	     cache_rg_dirty_line_write_back ;

  // register cache_rg_offset
  assign cache_rg_offset$D_IN = cache_ff_request_from_cpu$D_OUT[40:38] ;
  assign cache_rg_offset$EN =
	     MUX_cache_ff_request_to_memory_enqw$wset_1__SEL_1 ;

  // register cache_rg_replace_block
  assign cache_rg_replace_block$D_IN =
	     cache_valid_0_a_read__8_AND_cache_valid_1_a_re_ETC___d237 ?
	       (SEL_ARR_cache_pseudo_lru_0_38_cache_pseudo_lru_ETC___d307 ?
		  (lru_bits__h11978[2] ? 2'd3 : 2'd1) :
		  (lru_bits__h11978[2] ? 2'd2 : 2'd0)) :
	       (cache_valid_0$DOA ?
		  IF_cache_valid_1_a_read__4_THEN_IF_cache_valid_ETC___d313 :
		  2'd0) ;
  assign cache_rg_replace_block$EN =
	     MUX_cache_ff_request_to_memory_enqw$wset_1__SEL_1 ;

  // register cache_rg_state
  assign cache_rg_state$D_IN = cache_rg_state$port3__read ;
  assign cache_rg_state$EN = 1'b1 ;

  // register cache_rg_word_count
  assign cache_rg_word_count$D_IN =
	     MUX_cache_rg_word_count$write_1__SEL_1 ?
	       MUX_cache_rg_word_count$write_1__VAL_1 :
	       MUX_cache_rg_word_count$write_1__VAL_1 ;
  assign cache_rg_word_count$EN =
	     WILL_FIRE_RL_cache_got_response_from_memory && cache_rg_enable ||
	     WILL_FIRE_RL_cache_empty_response_from_memory_after_dirty_line_write ;

  // submodule cache_data_0_0
  assign cache_data_0_0$ADDRA = request_from_cpu_req[46:41] ;
  assign cache_data_0_0$ADDRB =
	     MUX_cache_data_0_0$b_put_1__SEL_1 ?
	       cache_ff_request_from_cpu$D_OUT[46:41] :
	       cache_ff_response_from_memory$D_OUT[10:5] ;
  assign cache_data_0_0$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_0_0$DIB =
	     MUX_cache_data_0_0$b_put_1__SEL_1 ?
	       accessed_word__h15952 :
	       v__h21720 ;
  assign cache_data_0_0$WEA = 1'd0 ;
  assign cache_data_0_0$WEB = 1'd1 ;
  assign cache_data_0_0$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_0_0$ENB =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd0 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd0 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ||
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd0 &&
	     cache_rg_replace_block == 2'd0 &&
	     cache_rg_enable ;

  // submodule cache_data_0_1
  assign cache_data_0_1$ADDRA = request_from_cpu_req[46:41] ;
  assign cache_data_0_1$ADDRB =
	     MUX_cache_data_0_1$b_put_1__SEL_1 ?
	       cache_ff_request_from_cpu$D_OUT[46:41] :
	       cache_ff_response_from_memory$D_OUT[10:5] ;
  assign cache_data_0_1$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_0_1$DIB =
	     MUX_cache_data_0_1$b_put_1__SEL_1 ?
	       accessed_word__h15952 :
	       v__h21720 ;
  assign cache_data_0_1$WEA = 1'd0 ;
  assign cache_data_0_1$WEB = 1'd1 ;
  assign cache_data_0_1$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_0_1$ENB =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd1 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd0 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ||
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd1 &&
	     cache_rg_replace_block == 2'd0 &&
	     cache_rg_enable ;

  // submodule cache_data_0_2
  assign cache_data_0_2$ADDRA = request_from_cpu_req[46:41] ;
  assign cache_data_0_2$ADDRB =
	     MUX_cache_data_0_2$b_put_1__SEL_1 ?
	       cache_ff_request_from_cpu$D_OUT[46:41] :
	       cache_ff_response_from_memory$D_OUT[10:5] ;
  assign cache_data_0_2$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_0_2$DIB =
	     MUX_cache_data_0_2$b_put_1__SEL_1 ?
	       accessed_word__h15952 :
	       v__h21720 ;
  assign cache_data_0_2$WEA = 1'd0 ;
  assign cache_data_0_2$WEB = 1'd1 ;
  assign cache_data_0_2$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_0_2$ENB =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd2 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd0 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ||
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd2 &&
	     cache_rg_replace_block == 2'd0 &&
	     cache_rg_enable ;

  // submodule cache_data_0_3
  assign cache_data_0_3$ADDRA = request_from_cpu_req[46:41] ;
  assign cache_data_0_3$ADDRB =
	     MUX_cache_data_0_3$b_put_1__SEL_1 ?
	       cache_ff_request_from_cpu$D_OUT[46:41] :
	       cache_ff_response_from_memory$D_OUT[10:5] ;
  assign cache_data_0_3$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_0_3$DIB =
	     MUX_cache_data_0_3$b_put_1__SEL_1 ?
	       accessed_word__h15952 :
	       v__h21720 ;
  assign cache_data_0_3$WEA = 1'd0 ;
  assign cache_data_0_3$WEB = 1'd1 ;
  assign cache_data_0_3$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_0_3$ENB =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd3 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd0 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ||
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd3 &&
	     cache_rg_replace_block == 2'd0 &&
	     cache_rg_enable ;

  // submodule cache_data_0_4
  assign cache_data_0_4$ADDRA = request_from_cpu_req[46:41] ;
  assign cache_data_0_4$ADDRB =
	     MUX_cache_data_0_4$b_put_1__SEL_1 ?
	       cache_ff_request_from_cpu$D_OUT[46:41] :
	       cache_ff_response_from_memory$D_OUT[10:5] ;
  assign cache_data_0_4$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_0_4$DIB =
	     MUX_cache_data_0_4$b_put_1__SEL_1 ?
	       accessed_word__h15952 :
	       v__h21720 ;
  assign cache_data_0_4$WEA = 1'd0 ;
  assign cache_data_0_4$WEB = 1'd1 ;
  assign cache_data_0_4$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_0_4$ENB =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd4 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd0 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ||
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd4 &&
	     cache_rg_replace_block == 2'd0 &&
	     cache_rg_enable ;

  // submodule cache_data_0_5
  assign cache_data_0_5$ADDRA = request_from_cpu_req[46:41] ;
  assign cache_data_0_5$ADDRB =
	     MUX_cache_data_0_5$b_put_1__SEL_1 ?
	       cache_ff_request_from_cpu$D_OUT[46:41] :
	       cache_ff_response_from_memory$D_OUT[10:5] ;
  assign cache_data_0_5$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_0_5$DIB =
	     MUX_cache_data_0_5$b_put_1__SEL_1 ?
	       accessed_word__h15952 :
	       v__h21720 ;
  assign cache_data_0_5$WEA = 1'd0 ;
  assign cache_data_0_5$WEB = 1'd1 ;
  assign cache_data_0_5$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_0_5$ENB =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd5 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd0 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ||
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd5 &&
	     cache_rg_replace_block == 2'd0 &&
	     cache_rg_enable ;

  // submodule cache_data_0_6
  assign cache_data_0_6$ADDRA = request_from_cpu_req[46:41] ;
  assign cache_data_0_6$ADDRB =
	     MUX_cache_data_0_6$b_put_1__SEL_1 ?
	       cache_ff_request_from_cpu$D_OUT[46:41] :
	       cache_ff_response_from_memory$D_OUT[10:5] ;
  assign cache_data_0_6$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_0_6$DIB =
	     MUX_cache_data_0_6$b_put_1__SEL_1 ?
	       accessed_word__h15952 :
	       v__h21720 ;
  assign cache_data_0_6$WEA = 1'd0 ;
  assign cache_data_0_6$WEB = 1'd1 ;
  assign cache_data_0_6$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_0_6$ENB =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd6 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd0 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ||
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd6 &&
	     cache_rg_replace_block == 2'd0 &&
	     cache_rg_enable ;

  // submodule cache_data_0_7
  assign cache_data_0_7$ADDRA = request_from_cpu_req[46:41] ;
  assign cache_data_0_7$ADDRB =
	     MUX_cache_data_0_7$b_put_1__SEL_1 ?
	       cache_ff_request_from_cpu$D_OUT[46:41] :
	       cache_ff_response_from_memory$D_OUT[10:5] ;
  assign cache_data_0_7$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_0_7$DIB =
	     MUX_cache_data_0_7$b_put_1__SEL_1 ?
	       accessed_word__h15952 :
	       v__h21720 ;
  assign cache_data_0_7$WEA = 1'd0 ;
  assign cache_data_0_7$WEB = 1'd1 ;
  assign cache_data_0_7$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_0_7$ENB =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd7 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd0 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ||
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd7 &&
	     cache_rg_replace_block == 2'd0 &&
	     cache_rg_enable ;

  // submodule cache_data_1_0
  assign cache_data_1_0$ADDRA = request_from_cpu_req[46:41] ;
  assign cache_data_1_0$ADDRB =
	     MUX_cache_data_1_0$b_put_1__SEL_1 ?
	       cache_ff_request_from_cpu$D_OUT[46:41] :
	       cache_ff_response_from_memory$D_OUT[10:5] ;
  assign cache_data_1_0$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_1_0$DIB =
	     MUX_cache_data_1_0$b_put_1__SEL_1 ?
	       accessed_word__h15952 :
	       v__h21720 ;
  assign cache_data_1_0$WEA = 1'd0 ;
  assign cache_data_1_0$WEB = 1'd1 ;
  assign cache_data_1_0$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_1_0$ENB =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd0 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd1 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ||
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd0 &&
	     cache_rg_replace_block == 2'd1 &&
	     cache_rg_enable ;

  // submodule cache_data_1_1
  assign cache_data_1_1$ADDRA = request_from_cpu_req[46:41] ;
  assign cache_data_1_1$ADDRB =
	     MUX_cache_data_1_1$b_put_1__SEL_1 ?
	       cache_ff_request_from_cpu$D_OUT[46:41] :
	       cache_ff_response_from_memory$D_OUT[10:5] ;
  assign cache_data_1_1$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_1_1$DIB =
	     MUX_cache_data_1_1$b_put_1__SEL_1 ?
	       accessed_word__h15952 :
	       v__h21720 ;
  assign cache_data_1_1$WEA = 1'd0 ;
  assign cache_data_1_1$WEB = 1'd1 ;
  assign cache_data_1_1$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_1_1$ENB =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd1 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd1 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ||
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd1 &&
	     cache_rg_replace_block == 2'd1 &&
	     cache_rg_enable ;

  // submodule cache_data_1_2
  assign cache_data_1_2$ADDRA = request_from_cpu_req[46:41] ;
  assign cache_data_1_2$ADDRB =
	     MUX_cache_data_1_2$b_put_1__SEL_1 ?
	       cache_ff_request_from_cpu$D_OUT[46:41] :
	       cache_ff_response_from_memory$D_OUT[10:5] ;
  assign cache_data_1_2$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_1_2$DIB =
	     MUX_cache_data_1_2$b_put_1__SEL_1 ?
	       accessed_word__h15952 :
	       v__h21720 ;
  assign cache_data_1_2$WEA = 1'd0 ;
  assign cache_data_1_2$WEB = 1'd1 ;
  assign cache_data_1_2$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_1_2$ENB =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd2 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd1 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ||
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd2 &&
	     cache_rg_replace_block == 2'd1 &&
	     cache_rg_enable ;

  // submodule cache_data_1_3
  assign cache_data_1_3$ADDRA = request_from_cpu_req[46:41] ;
  assign cache_data_1_3$ADDRB =
	     MUX_cache_data_1_3$b_put_1__SEL_1 ?
	       cache_ff_request_from_cpu$D_OUT[46:41] :
	       cache_ff_response_from_memory$D_OUT[10:5] ;
  assign cache_data_1_3$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_1_3$DIB =
	     MUX_cache_data_1_3$b_put_1__SEL_1 ?
	       accessed_word__h15952 :
	       v__h21720 ;
  assign cache_data_1_3$WEA = 1'd0 ;
  assign cache_data_1_3$WEB = 1'd1 ;
  assign cache_data_1_3$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_1_3$ENB =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd3 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd1 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ||
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd3 &&
	     cache_rg_replace_block == 2'd1 &&
	     cache_rg_enable ;

  // submodule cache_data_1_4
  assign cache_data_1_4$ADDRA = request_from_cpu_req[46:41] ;
  assign cache_data_1_4$ADDRB =
	     MUX_cache_data_1_4$b_put_1__SEL_1 ?
	       cache_ff_request_from_cpu$D_OUT[46:41] :
	       cache_ff_response_from_memory$D_OUT[10:5] ;
  assign cache_data_1_4$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_1_4$DIB =
	     MUX_cache_data_1_4$b_put_1__SEL_1 ?
	       accessed_word__h15952 :
	       v__h21720 ;
  assign cache_data_1_4$WEA = 1'd0 ;
  assign cache_data_1_4$WEB = 1'd1 ;
  assign cache_data_1_4$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_1_4$ENB =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd4 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd1 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ||
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd4 &&
	     cache_rg_replace_block == 2'd1 &&
	     cache_rg_enable ;

  // submodule cache_data_1_5
  assign cache_data_1_5$ADDRA = request_from_cpu_req[46:41] ;
  assign cache_data_1_5$ADDRB =
	     MUX_cache_data_1_5$b_put_1__SEL_1 ?
	       cache_ff_request_from_cpu$D_OUT[46:41] :
	       cache_ff_response_from_memory$D_OUT[10:5] ;
  assign cache_data_1_5$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_1_5$DIB =
	     MUX_cache_data_1_5$b_put_1__SEL_1 ?
	       accessed_word__h15952 :
	       v__h21720 ;
  assign cache_data_1_5$WEA = 1'd0 ;
  assign cache_data_1_5$WEB = 1'd1 ;
  assign cache_data_1_5$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_1_5$ENB =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd5 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd1 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ||
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd5 &&
	     cache_rg_replace_block == 2'd1 &&
	     cache_rg_enable ;

  // submodule cache_data_1_6
  assign cache_data_1_6$ADDRA = request_from_cpu_req[46:41] ;
  assign cache_data_1_6$ADDRB =
	     MUX_cache_data_1_6$b_put_1__SEL_1 ?
	       cache_ff_request_from_cpu$D_OUT[46:41] :
	       cache_ff_response_from_memory$D_OUT[10:5] ;
  assign cache_data_1_6$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_1_6$DIB =
	     MUX_cache_data_1_6$b_put_1__SEL_1 ?
	       accessed_word__h15952 :
	       v__h21720 ;
  assign cache_data_1_6$WEA = 1'd0 ;
  assign cache_data_1_6$WEB = 1'd1 ;
  assign cache_data_1_6$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_1_6$ENB =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd6 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd1 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ||
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd6 &&
	     cache_rg_replace_block == 2'd1 &&
	     cache_rg_enable ;

  // submodule cache_data_1_7
  assign cache_data_1_7$ADDRA = request_from_cpu_req[46:41] ;
  assign cache_data_1_7$ADDRB =
	     MUX_cache_data_1_7$b_put_1__SEL_1 ?
	       cache_ff_request_from_cpu$D_OUT[46:41] :
	       cache_ff_response_from_memory$D_OUT[10:5] ;
  assign cache_data_1_7$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_1_7$DIB =
	     MUX_cache_data_1_7$b_put_1__SEL_1 ?
	       accessed_word__h15952 :
	       v__h21720 ;
  assign cache_data_1_7$WEA = 1'd0 ;
  assign cache_data_1_7$WEB = 1'd1 ;
  assign cache_data_1_7$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_1_7$ENB =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd7 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd1 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ||
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd7 &&
	     cache_rg_replace_block == 2'd1 &&
	     cache_rg_enable ;

  // submodule cache_data_2_0
  assign cache_data_2_0$ADDRA = request_from_cpu_req[46:41] ;
  assign cache_data_2_0$ADDRB =
	     MUX_cache_data_2_0$b_put_1__SEL_1 ?
	       cache_ff_request_from_cpu$D_OUT[46:41] :
	       cache_ff_response_from_memory$D_OUT[10:5] ;
  assign cache_data_2_0$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_2_0$DIB =
	     MUX_cache_data_2_0$b_put_1__SEL_1 ?
	       accessed_word__h15952 :
	       v__h21720 ;
  assign cache_data_2_0$WEA = 1'd0 ;
  assign cache_data_2_0$WEB = 1'd1 ;
  assign cache_data_2_0$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_2_0$ENB =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd0 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd2 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ||
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd0 &&
	     cache_rg_replace_block == 2'd2 &&
	     cache_rg_enable ;

  // submodule cache_data_2_1
  assign cache_data_2_1$ADDRA = request_from_cpu_req[46:41] ;
  assign cache_data_2_1$ADDRB =
	     MUX_cache_data_2_1$b_put_1__SEL_1 ?
	       cache_ff_request_from_cpu$D_OUT[46:41] :
	       cache_ff_response_from_memory$D_OUT[10:5] ;
  assign cache_data_2_1$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_2_1$DIB =
	     MUX_cache_data_2_1$b_put_1__SEL_1 ?
	       accessed_word__h15952 :
	       v__h21720 ;
  assign cache_data_2_1$WEA = 1'd0 ;
  assign cache_data_2_1$WEB = 1'd1 ;
  assign cache_data_2_1$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_2_1$ENB =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd1 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd2 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ||
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd1 &&
	     cache_rg_replace_block == 2'd2 &&
	     cache_rg_enable ;

  // submodule cache_data_2_2
  assign cache_data_2_2$ADDRA = request_from_cpu_req[46:41] ;
  assign cache_data_2_2$ADDRB =
	     MUX_cache_data_2_2$b_put_1__SEL_1 ?
	       cache_ff_request_from_cpu$D_OUT[46:41] :
	       cache_ff_response_from_memory$D_OUT[10:5] ;
  assign cache_data_2_2$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_2_2$DIB =
	     MUX_cache_data_2_2$b_put_1__SEL_1 ?
	       accessed_word__h15952 :
	       v__h21720 ;
  assign cache_data_2_2$WEA = 1'd0 ;
  assign cache_data_2_2$WEB = 1'd1 ;
  assign cache_data_2_2$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_2_2$ENB =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd2 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd2 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ||
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd2 &&
	     cache_rg_replace_block == 2'd2 &&
	     cache_rg_enable ;

  // submodule cache_data_2_3
  assign cache_data_2_3$ADDRA = request_from_cpu_req[46:41] ;
  assign cache_data_2_3$ADDRB =
	     MUX_cache_data_2_3$b_put_1__SEL_1 ?
	       cache_ff_request_from_cpu$D_OUT[46:41] :
	       cache_ff_response_from_memory$D_OUT[10:5] ;
  assign cache_data_2_3$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_2_3$DIB =
	     MUX_cache_data_2_3$b_put_1__SEL_1 ?
	       accessed_word__h15952 :
	       v__h21720 ;
  assign cache_data_2_3$WEA = 1'd0 ;
  assign cache_data_2_3$WEB = 1'd1 ;
  assign cache_data_2_3$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_2_3$ENB =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd3 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd2 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ||
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd3 &&
	     cache_rg_replace_block == 2'd2 &&
	     cache_rg_enable ;

  // submodule cache_data_2_4
  assign cache_data_2_4$ADDRA = request_from_cpu_req[46:41] ;
  assign cache_data_2_4$ADDRB =
	     MUX_cache_data_2_4$b_put_1__SEL_1 ?
	       cache_ff_request_from_cpu$D_OUT[46:41] :
	       cache_ff_response_from_memory$D_OUT[10:5] ;
  assign cache_data_2_4$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_2_4$DIB =
	     MUX_cache_data_2_4$b_put_1__SEL_1 ?
	       accessed_word__h15952 :
	       v__h21720 ;
  assign cache_data_2_4$WEA = 1'd0 ;
  assign cache_data_2_4$WEB = 1'd1 ;
  assign cache_data_2_4$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_2_4$ENB =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd4 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd2 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ||
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd4 &&
	     cache_rg_replace_block == 2'd2 &&
	     cache_rg_enable ;

  // submodule cache_data_2_5
  assign cache_data_2_5$ADDRA = request_from_cpu_req[46:41] ;
  assign cache_data_2_5$ADDRB =
	     MUX_cache_data_2_5$b_put_1__SEL_1 ?
	       cache_ff_request_from_cpu$D_OUT[46:41] :
	       cache_ff_response_from_memory$D_OUT[10:5] ;
  assign cache_data_2_5$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_2_5$DIB =
	     MUX_cache_data_2_5$b_put_1__SEL_1 ?
	       accessed_word__h15952 :
	       v__h21720 ;
  assign cache_data_2_5$WEA = 1'd0 ;
  assign cache_data_2_5$WEB = 1'd1 ;
  assign cache_data_2_5$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_2_5$ENB =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd5 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd2 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ||
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd5 &&
	     cache_rg_replace_block == 2'd2 &&
	     cache_rg_enable ;

  // submodule cache_data_2_6
  assign cache_data_2_6$ADDRA = request_from_cpu_req[46:41] ;
  assign cache_data_2_6$ADDRB =
	     MUX_cache_data_2_6$b_put_1__SEL_1 ?
	       cache_ff_request_from_cpu$D_OUT[46:41] :
	       cache_ff_response_from_memory$D_OUT[10:5] ;
  assign cache_data_2_6$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_2_6$DIB =
	     MUX_cache_data_2_6$b_put_1__SEL_1 ?
	       accessed_word__h15952 :
	       v__h21720 ;
  assign cache_data_2_6$WEA = 1'd0 ;
  assign cache_data_2_6$WEB = 1'd1 ;
  assign cache_data_2_6$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_2_6$ENB =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd6 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd2 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ||
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd6 &&
	     cache_rg_replace_block == 2'd2 &&
	     cache_rg_enable ;

  // submodule cache_data_2_7
  assign cache_data_2_7$ADDRA = request_from_cpu_req[46:41] ;
  assign cache_data_2_7$ADDRB =
	     MUX_cache_data_2_7$b_put_1__SEL_1 ?
	       cache_ff_request_from_cpu$D_OUT[46:41] :
	       cache_ff_response_from_memory$D_OUT[10:5] ;
  assign cache_data_2_7$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_2_7$DIB =
	     MUX_cache_data_2_7$b_put_1__SEL_1 ?
	       accessed_word__h15952 :
	       v__h21720 ;
  assign cache_data_2_7$WEA = 1'd0 ;
  assign cache_data_2_7$WEB = 1'd1 ;
  assign cache_data_2_7$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_2_7$ENB =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd7 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd2 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ||
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd7 &&
	     cache_rg_replace_block == 2'd2 &&
	     cache_rg_enable ;

  // submodule cache_data_3_0
  assign cache_data_3_0$ADDRA = request_from_cpu_req[46:41] ;
  assign cache_data_3_0$ADDRB =
	     MUX_cache_data_3_0$b_put_1__SEL_1 ?
	       cache_ff_request_from_cpu$D_OUT[46:41] :
	       cache_ff_response_from_memory$D_OUT[10:5] ;
  assign cache_data_3_0$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_3_0$DIB =
	     MUX_cache_data_3_0$b_put_1__SEL_1 ?
	       accessed_word__h15952 :
	       v__h21720 ;
  assign cache_data_3_0$WEA = 1'd0 ;
  assign cache_data_3_0$WEB = 1'd1 ;
  assign cache_data_3_0$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_3_0$ENB =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd0 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd3 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ||
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd0 &&
	     cache_rg_replace_block == 2'd3 &&
	     cache_rg_enable ;

  // submodule cache_data_3_1
  assign cache_data_3_1$ADDRA = request_from_cpu_req[46:41] ;
  assign cache_data_3_1$ADDRB =
	     MUX_cache_data_3_1$b_put_1__SEL_1 ?
	       cache_ff_request_from_cpu$D_OUT[46:41] :
	       cache_ff_response_from_memory$D_OUT[10:5] ;
  assign cache_data_3_1$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_3_1$DIB =
	     MUX_cache_data_3_1$b_put_1__SEL_1 ?
	       accessed_word__h15952 :
	       v__h21720 ;
  assign cache_data_3_1$WEA = 1'd0 ;
  assign cache_data_3_1$WEB = 1'd1 ;
  assign cache_data_3_1$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_3_1$ENB =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd1 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd3 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ||
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd1 &&
	     cache_rg_replace_block == 2'd3 &&
	     cache_rg_enable ;

  // submodule cache_data_3_2
  assign cache_data_3_2$ADDRA = request_from_cpu_req[46:41] ;
  assign cache_data_3_2$ADDRB =
	     MUX_cache_data_3_2$b_put_1__SEL_1 ?
	       cache_ff_request_from_cpu$D_OUT[46:41] :
	       cache_ff_response_from_memory$D_OUT[10:5] ;
  assign cache_data_3_2$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_3_2$DIB =
	     MUX_cache_data_3_2$b_put_1__SEL_1 ?
	       accessed_word__h15952 :
	       v__h21720 ;
  assign cache_data_3_2$WEA = 1'd0 ;
  assign cache_data_3_2$WEB = 1'd1 ;
  assign cache_data_3_2$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_3_2$ENB =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd2 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd3 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ||
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd2 &&
	     cache_rg_replace_block == 2'd3 &&
	     cache_rg_enable ;

  // submodule cache_data_3_3
  assign cache_data_3_3$ADDRA = request_from_cpu_req[46:41] ;
  assign cache_data_3_3$ADDRB =
	     MUX_cache_data_3_3$b_put_1__SEL_1 ?
	       cache_ff_request_from_cpu$D_OUT[46:41] :
	       cache_ff_response_from_memory$D_OUT[10:5] ;
  assign cache_data_3_3$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_3_3$DIB =
	     MUX_cache_data_3_3$b_put_1__SEL_1 ?
	       accessed_word__h15952 :
	       v__h21720 ;
  assign cache_data_3_3$WEA = 1'd0 ;
  assign cache_data_3_3$WEB = 1'd1 ;
  assign cache_data_3_3$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_3_3$ENB =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd3 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd3 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ||
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd3 &&
	     cache_rg_replace_block == 2'd3 &&
	     cache_rg_enable ;

  // submodule cache_data_3_4
  assign cache_data_3_4$ADDRA = request_from_cpu_req[46:41] ;
  assign cache_data_3_4$ADDRB =
	     MUX_cache_data_3_4$b_put_1__SEL_1 ?
	       cache_ff_request_from_cpu$D_OUT[46:41] :
	       cache_ff_response_from_memory$D_OUT[10:5] ;
  assign cache_data_3_4$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_3_4$DIB =
	     MUX_cache_data_3_4$b_put_1__SEL_1 ?
	       accessed_word__h15952 :
	       v__h21720 ;
  assign cache_data_3_4$WEA = 1'd0 ;
  assign cache_data_3_4$WEB = 1'd1 ;
  assign cache_data_3_4$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_3_4$ENB =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd4 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd3 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ||
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd4 &&
	     cache_rg_replace_block == 2'd3 &&
	     cache_rg_enable ;

  // submodule cache_data_3_5
  assign cache_data_3_5$ADDRA = request_from_cpu_req[46:41] ;
  assign cache_data_3_5$ADDRB =
	     MUX_cache_data_3_5$b_put_1__SEL_1 ?
	       cache_ff_request_from_cpu$D_OUT[46:41] :
	       cache_ff_response_from_memory$D_OUT[10:5] ;
  assign cache_data_3_5$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_3_5$DIB =
	     MUX_cache_data_3_5$b_put_1__SEL_1 ?
	       accessed_word__h15952 :
	       v__h21720 ;
  assign cache_data_3_5$WEA = 1'd0 ;
  assign cache_data_3_5$WEB = 1'd1 ;
  assign cache_data_3_5$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_3_5$ENB =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd5 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd3 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ||
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd5 &&
	     cache_rg_replace_block == 2'd3 &&
	     cache_rg_enable ;

  // submodule cache_data_3_6
  assign cache_data_3_6$ADDRA = request_from_cpu_req[46:41] ;
  assign cache_data_3_6$ADDRB =
	     MUX_cache_data_3_6$b_put_1__SEL_1 ?
	       cache_ff_request_from_cpu$D_OUT[46:41] :
	       cache_ff_response_from_memory$D_OUT[10:5] ;
  assign cache_data_3_6$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_3_6$DIB =
	     MUX_cache_data_3_6$b_put_1__SEL_1 ?
	       accessed_word__h15952 :
	       v__h21720 ;
  assign cache_data_3_6$WEA = 1'd0 ;
  assign cache_data_3_6$WEB = 1'd1 ;
  assign cache_data_3_6$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_3_6$ENB =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd6 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd3 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ||
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd6 &&
	     cache_rg_replace_block == 2'd3 &&
	     cache_rg_enable ;

  // submodule cache_data_3_7
  assign cache_data_3_7$ADDRA = request_from_cpu_req[46:41] ;
  assign cache_data_3_7$ADDRB =
	     MUX_cache_data_3_7$b_put_1__SEL_1 ?
	       cache_ff_request_from_cpu$D_OUT[46:41] :
	       cache_ff_response_from_memory$D_OUT[10:5] ;
  assign cache_data_3_7$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign cache_data_3_7$DIB =
	     MUX_cache_data_3_7$b_put_1__SEL_1 ?
	       accessed_word__h15952 :
	       v__h21720 ;
  assign cache_data_3_7$WEA = 1'd0 ;
  assign cache_data_3_7$WEB = 1'd1 ;
  assign cache_data_3_7$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_data_3_7$ENB =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     cache_ff_request_from_cpu$D_OUT[40:38] == 3'd7 &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd3 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ||
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_ff_response_from_memory$D_OUT[4:2] == 3'd7 &&
	     cache_rg_replace_block == 2'd3 &&
	     cache_rg_enable ;

  // submodule cache_dirty_0
  assign cache_dirty_0$ADDRA =
	     MUX_cache_valid_0$a_put_1__SEL_1 ?
	       request_from_cpu_req[46:41] :
	       cache_rg_index[5:0] ;
  assign cache_dirty_0$ADDRB =
	     MUX_cache_dirty_0$b_put_1__SEL_1 ?
	       cache_ff_request_from_cpu$D_OUT[46:41] :
	       cache_ff_response_from_memory$D_OUT[10:5] ;
  assign cache_dirty_0$DIA =
	     MUX_cache_valid_0$a_put_1__SEL_1 &&
	     1'b0 /* unspecified value */  ;
  assign cache_dirty_0$DIB =
	     MUX_cache_dirty_0$b_put_1__SEL_1 ||
	     cache_rg_replace_block_64_EQ_0_65_AND_cache_rg_ETC___d622 ;
  assign cache_dirty_0$WEA = !MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_dirty_0$WEB = 1'd1 ;
  assign cache_dirty_0$ENA =
	     EN_request_from_cpu &&
	     (request_from_cpu_req[67:36] < 32'h40000000 ||
	      request_from_cpu_req[67:36] > 32'h4000000F) ||
	     cache_rg_initialize ;
  assign cache_dirty_0$ENB =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd0 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ||
	     WILL_FIRE_RL_cache_got_response_from_memory && _dfoo13 ;

  // submodule cache_dirty_1
  assign cache_dirty_1$ADDRA =
	     MUX_cache_valid_0$a_put_1__SEL_1 ?
	       request_from_cpu_req[46:41] :
	       cache_rg_index[5:0] ;
  assign cache_dirty_1$ADDRB =
	     MUX_cache_dirty_1$b_put_1__SEL_1 ?
	       cache_ff_request_from_cpu$D_OUT[46:41] :
	       cache_ff_response_from_memory$D_OUT[10:5] ;
  assign cache_dirty_1$DIA =
	     MUX_cache_valid_0$a_put_1__SEL_1 &&
	     1'b0 /* unspecified value */  ;
  assign cache_dirty_1$DIB =
	     MUX_cache_dirty_1$b_put_1__SEL_1 ||
	     cache_rg_replace_block_64_EQ_1_83_AND_cache_rg_ETC___d623 ;
  assign cache_dirty_1$WEA = !MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_dirty_1$WEB = 1'd1 ;
  assign cache_dirty_1$ENA =
	     EN_request_from_cpu &&
	     (request_from_cpu_req[67:36] < 32'h40000000 ||
	      request_from_cpu_req[67:36] > 32'h4000000F) ||
	     cache_rg_initialize ;
  assign cache_dirty_1$ENB =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd1 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ||
	     WILL_FIRE_RL_cache_got_response_from_memory && _dfoo9 ;

  // submodule cache_dirty_2
  assign cache_dirty_2$ADDRA =
	     MUX_cache_valid_0$a_put_1__SEL_1 ?
	       request_from_cpu_req[46:41] :
	       cache_rg_index[5:0] ;
  assign cache_dirty_2$ADDRB =
	     MUX_cache_dirty_2$b_put_1__SEL_1 ?
	       cache_ff_request_from_cpu$D_OUT[46:41] :
	       cache_ff_response_from_memory$D_OUT[10:5] ;
  assign cache_dirty_2$DIA =
	     MUX_cache_valid_0$a_put_1__SEL_1 &&
	     1'b0 /* unspecified value */  ;
  assign cache_dirty_2$DIB =
	     MUX_cache_dirty_2$b_put_1__SEL_1 ||
	     cache_rg_replace_block_64_EQ_2_93_AND_cache_rg_ETC___d624 ;
  assign cache_dirty_2$WEA = !MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_dirty_2$WEB = 1'd1 ;
  assign cache_dirty_2$ENA =
	     EN_request_from_cpu &&
	     (request_from_cpu_req[67:36] < 32'h40000000 ||
	      request_from_cpu_req[67:36] > 32'h4000000F) ||
	     cache_rg_initialize ;
  assign cache_dirty_2$ENB =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd2 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ||
	     WILL_FIRE_RL_cache_got_response_from_memory && _dfoo5 ;

  // submodule cache_dirty_3
  assign cache_dirty_3$ADDRA =
	     MUX_cache_valid_0$a_put_1__SEL_1 ?
	       request_from_cpu_req[46:41] :
	       cache_rg_index[5:0] ;
  assign cache_dirty_3$ADDRB =
	     MUX_cache_dirty_3$b_put_1__SEL_1 ?
	       cache_ff_response_from_memory$D_OUT[10:5] :
	       cache_ff_request_from_cpu$D_OUT[46:41] ;
  assign cache_dirty_3$DIA =
	     MUX_cache_valid_0$a_put_1__SEL_1 &&
	     1'b0 /* unspecified value */  ;
  assign cache_dirty_3$DIB =
	     !MUX_cache_dirty_3$b_put_1__SEL_1 ||
	     cache_rg_replace_block_64_EQ_3_03_AND_cache_rg_ETC___d625 ;
  assign cache_dirty_3$WEA = !MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_dirty_3$WEB = 1'd1 ;
  assign cache_dirty_3$ENA =
	     EN_request_from_cpu &&
	     (request_from_cpu_req[67:36] < 32'h40000000 ||
	      request_from_cpu_req[67:36] > 32'h4000000F) ||
	     cache_rg_initialize ;
  assign cache_dirty_3$ENB =
	     WILL_FIRE_RL_cache_got_response_from_memory && _dfoo1 ||
	     WILL_FIRE_RL_cache_read_from_bram &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd3 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ;

  // submodule cache_ff_request_from_cpu
  assign cache_ff_request_from_cpu$D_IN = request_from_cpu_req ;
  assign cache_ff_request_from_cpu$ENQ = EN_request_from_cpu ;
  assign cache_ff_request_from_cpu$DEQ =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     (cache_ff_request_from_cpu$D_OUT[1:0] != 2'b10 ||
	      cache_ff_request_from_cpu$D_OUT[37:36] == 2'd0) &&
	     (cache_ff_request_from_cpu$D_OUT[1:0] != 2'b01 ||
	      !cache_ff_request_from_cpu$D_OUT[36]) &&
	     cache_valid_3_a_read__5_AND_cache_tag_3_a_read_ETC___d68 ||
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     (cache_rg_word_count == 3'd7 || !cache_rg_enable) ;
  assign cache_ff_request_from_cpu$CLR = 1'b0 ;

  // submodule cache_ff_request_to_memory_ff
  assign cache_ff_request_to_memory_ff$D_IN =
	     cache_ff_request_to_memory_enqw$wget ;
  assign cache_ff_request_to_memory_ff$ENQ =
	     CAN_FIRE_RL_cache_ff_request_to_memory_enqueue ;
  assign cache_ff_request_to_memory_ff$DEQ =
	     CAN_FIRE_RL_cache_ff_request_to_memory_dequeue ;
  assign cache_ff_request_to_memory_ff$CLR = 1'b0 ;

  // submodule cache_ff_request_to_memory_firstValid
  assign cache_ff_request_to_memory_firstValid$D_IN = 1'd1 ;
  assign cache_ff_request_to_memory_firstValid$EN = EN_request_to_memory ;

  // submodule cache_ff_response_from_memory
  assign cache_ff_response_from_memory$D_IN = response_from_memory_resp ;
  assign cache_ff_response_from_memory$ENQ = EN_response_from_memory ;
  assign cache_ff_response_from_memory$DEQ =
	     WILL_FIRE_RL_cache_empty_response_from_memory_after_dirty_line_write ||
	     WILL_FIRE_RL_cache_got_response_from_memory ;
  assign cache_ff_response_from_memory$CLR = 1'b0 ;

  // submodule cache_tag_0
  assign cache_tag_0$ADDRA = request_from_cpu_req[46:41] ;
  assign cache_tag_0$ADDRB =
	     MUX_cache_dirty_0$b_put_1__SEL_1 ?
	       cache_ff_request_from_cpu$D_OUT[46:41] :
	       cache_ff_response_from_memory$D_OUT[10:5] ;
  assign cache_tag_0$DIA =
	     21'b010101010101010101010 /* unspecified value */  ;
  assign cache_tag_0$DIB =
	     MUX_cache_dirty_0$b_put_1__SEL_1 ?
	       cache_ff_request_from_cpu$D_OUT[67:47] :
	       cache_ff_response_from_memory$D_OUT[31:11] ;
  assign cache_tag_0$WEA = 1'd0 ;
  assign cache_tag_0$WEB = 1'd1 ;
  assign cache_tag_0$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_tag_0$ENB =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd0 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ||
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_rg_replace_block == 2'd0 &&
	     cache_rg_enable &&
	     cache_rg_word_count == 3'd7 ;

  // submodule cache_tag_1
  assign cache_tag_1$ADDRA = request_from_cpu_req[46:41] ;
  assign cache_tag_1$ADDRB =
	     MUX_cache_dirty_1$b_put_1__SEL_1 ?
	       cache_ff_request_from_cpu$D_OUT[46:41] :
	       cache_ff_response_from_memory$D_OUT[10:5] ;
  assign cache_tag_1$DIA =
	     21'b010101010101010101010 /* unspecified value */  ;
  assign cache_tag_1$DIB =
	     MUX_cache_dirty_1$b_put_1__SEL_1 ?
	       cache_ff_request_from_cpu$D_OUT[67:47] :
	       cache_ff_response_from_memory$D_OUT[31:11] ;
  assign cache_tag_1$WEA = 1'd0 ;
  assign cache_tag_1$WEB = 1'd1 ;
  assign cache_tag_1$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_tag_1$ENB =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd1 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ||
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_rg_replace_block == 2'd1 &&
	     cache_rg_enable &&
	     cache_rg_word_count == 3'd7 ;

  // submodule cache_tag_2
  assign cache_tag_2$ADDRA = request_from_cpu_req[46:41] ;
  assign cache_tag_2$ADDRB =
	     MUX_cache_dirty_2$b_put_1__SEL_1 ?
	       cache_ff_request_from_cpu$D_OUT[46:41] :
	       cache_ff_response_from_memory$D_OUT[10:5] ;
  assign cache_tag_2$DIA =
	     21'b010101010101010101010 /* unspecified value */  ;
  assign cache_tag_2$DIB =
	     MUX_cache_dirty_2$b_put_1__SEL_1 ?
	       cache_ff_request_from_cpu$D_OUT[67:47] :
	       cache_ff_response_from_memory$D_OUT[31:11] ;
  assign cache_tag_2$WEA = 1'd0 ;
  assign cache_tag_2$WEB = 1'd1 ;
  assign cache_tag_2$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_tag_2$ENB =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd2 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ||
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_rg_replace_block == 2'd2 &&
	     cache_rg_enable &&
	     cache_rg_word_count == 3'd7 ;

  // submodule cache_tag_3
  assign cache_tag_3$ADDRA = request_from_cpu_req[46:41] ;
  assign cache_tag_3$ADDRB =
	     MUX_cache_dirty_3$b_put_1__SEL_2 ?
	       cache_ff_request_from_cpu$D_OUT[46:41] :
	       cache_ff_response_from_memory$D_OUT[10:5] ;
  assign cache_tag_3$DIA =
	     21'b010101010101010101010 /* unspecified value */  ;
  assign cache_tag_3$DIB =
	     MUX_cache_dirty_3$b_put_1__SEL_2 ?
	       cache_ff_request_from_cpu$D_OUT[67:47] :
	       cache_ff_response_from_memory$D_OUT[31:11] ;
  assign cache_tag_3$WEA = 1'd0 ;
  assign cache_tag_3$WEB = 1'd1 ;
  assign cache_tag_3$ENA = MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_tag_3$ENB =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd3 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ||
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_rg_replace_block == 2'd3 &&
	     cache_rg_enable &&
	     cache_rg_word_count == 3'd7 ;

  // submodule cache_valid_0
  assign cache_valid_0$ADDRA =
	     MUX_cache_valid_0$a_put_1__SEL_1 ?
	       request_from_cpu_req[46:41] :
	       cache_rg_index[5:0] ;
  assign cache_valid_0$ADDRB =
	     MUX_cache_dirty_0$b_put_1__SEL_1 ?
	       cache_ff_request_from_cpu$D_OUT[46:41] :
	       cache_ff_response_from_memory$D_OUT[10:5] ;
  assign cache_valid_0$DIA =
	     MUX_cache_valid_0$a_put_1__SEL_1 &&
	     1'b0 /* unspecified value */  ;
  assign cache_valid_0$DIB = 1'd1 ;
  assign cache_valid_0$WEA = !MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_valid_0$WEB = 1'd1 ;
  assign cache_valid_0$ENA =
	     EN_request_from_cpu &&
	     (request_from_cpu_req[67:36] < 32'h40000000 ||
	      request_from_cpu_req[67:36] > 32'h4000000F) ||
	     cache_rg_initialize ;
  assign cache_valid_0$ENB =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd0 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ||
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_rg_replace_block == 2'd0 &&
	     cache_rg_enable &&
	     cache_rg_word_count == 3'd7 ;

  // submodule cache_valid_1
  assign cache_valid_1$ADDRA =
	     MUX_cache_valid_0$a_put_1__SEL_1 ?
	       request_from_cpu_req[46:41] :
	       cache_rg_index[5:0] ;
  assign cache_valid_1$ADDRB =
	     MUX_cache_dirty_1$b_put_1__SEL_1 ?
	       cache_ff_request_from_cpu$D_OUT[46:41] :
	       cache_ff_response_from_memory$D_OUT[10:5] ;
  assign cache_valid_1$DIA =
	     MUX_cache_valid_0$a_put_1__SEL_1 &&
	     1'b0 /* unspecified value */  ;
  assign cache_valid_1$DIB = 1'd1 ;
  assign cache_valid_1$WEA = !MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_valid_1$WEB = 1'd1 ;
  assign cache_valid_1$ENA =
	     EN_request_from_cpu &&
	     (request_from_cpu_req[67:36] < 32'h40000000 ||
	      request_from_cpu_req[67:36] > 32'h4000000F) ||
	     cache_rg_initialize ;
  assign cache_valid_1$ENB =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd1 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ||
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_rg_replace_block == 2'd1 &&
	     cache_rg_enable &&
	     cache_rg_word_count == 3'd7 ;

  // submodule cache_valid_2
  assign cache_valid_2$ADDRA =
	     MUX_cache_valid_0$a_put_1__SEL_1 ?
	       request_from_cpu_req[46:41] :
	       cache_rg_index[5:0] ;
  assign cache_valid_2$ADDRB =
	     MUX_cache_dirty_2$b_put_1__SEL_1 ?
	       cache_ff_request_from_cpu$D_OUT[46:41] :
	       cache_ff_response_from_memory$D_OUT[10:5] ;
  assign cache_valid_2$DIA =
	     MUX_cache_valid_0$a_put_1__SEL_1 &&
	     1'b0 /* unspecified value */  ;
  assign cache_valid_2$DIB = 1'd1 ;
  assign cache_valid_2$WEA = !MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_valid_2$WEB = 1'd1 ;
  assign cache_valid_2$ENA =
	     EN_request_from_cpu &&
	     (request_from_cpu_req[67:36] < 32'h40000000 ||
	      request_from_cpu_req[67:36] > 32'h4000000F) ||
	     cache_rg_initialize ;
  assign cache_valid_2$ENB =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd2 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ||
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_rg_replace_block == 2'd2 &&
	     cache_rg_enable &&
	     cache_rg_word_count == 3'd7 ;

  // submodule cache_valid_3
  assign cache_valid_3$ADDRA =
	     MUX_cache_valid_0$a_put_1__SEL_1 ?
	       request_from_cpu_req[46:41] :
	       cache_rg_index[5:0] ;
  assign cache_valid_3$ADDRB =
	     MUX_cache_dirty_3$b_put_1__SEL_2 ?
	       cache_ff_request_from_cpu$D_OUT[46:41] :
	       cache_ff_response_from_memory$D_OUT[10:5] ;
  assign cache_valid_3$DIA =
	     MUX_cache_valid_0$a_put_1__SEL_1 &&
	     1'b0 /* unspecified value */  ;
  assign cache_valid_3$DIB = 1'd1 ;
  assign cache_valid_3$WEA = !MUX_cache_valid_0$a_put_1__SEL_1 ;
  assign cache_valid_3$WEB = 1'd1 ;
  assign cache_valid_3$ENA =
	     EN_request_from_cpu &&
	     (request_from_cpu_req[67:36] < 32'h40000000 ||
	      request_from_cpu_req[67:36] > 32'h4000000F) ||
	     cache_rg_initialize ;
  assign cache_valid_3$ENB =
	     WILL_FIRE_RL_cache_read_from_bram &&
	     IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 ==
	     32'd3 &&
	     NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 ||
	     WILL_FIRE_RL_cache_got_response_from_memory &&
	     cache_rg_replace_block == 2'd3 &&
	     cache_rg_enable &&
	     cache_rg_word_count == 3'd7 ;

  // remaining internal signals
  assign IF_IF_cache_ff_request_from_cpu_first__3_BITS__ETC___d381 =
	     IF_cache_ff_request_from_cpu_first__3_BITS_1_T_ETC___d369 ?
	       (cache_ff_request_from_cpu$D_OUT[1:0] != 2'b10 ||
		cache_ff_request_from_cpu$D_OUT[37:36] == 2'd0) &&
	       (cache_ff_request_from_cpu$D_OUT[1:0] != 2'b01 ||
		!cache_ff_request_from_cpu$D_OUT[36]) ||
	       cache_valid_3_a_read__5_AND_cache_tag_3_a_read_ETC___d371 :
	       (cache_ff_request_from_cpu_first__3_BITS_1_TO_0_ETC___d360 ?
		  cache_valid_3_a_read__5_AND_cache_tag_3_a_read_ETC___d374 :
		  IF_cache_valid_0_a_read__8_AND_cache_valid_1_a_ETC___d379) ;
  assign IF_IF_cache_ff_request_from_cpu_first__3_BITS__ETC___d396 =
	     IF_cache_ff_request_from_cpu_first__3_BITS_1_T_ETC___d369 ?
	       (cache_ff_request_from_cpu_first__3_BITS_1_TO_0_ETC___d360 ?
		  NOT_cache_valid_3_a_read__5_46_OR_NOT_cache_ta_ETC___d383 :
		  IF_cache_valid_0_a_read__8_AND_cache_valid_1_a_ETC___d389) :
	       (cache_ff_request_from_cpu_first__3_BITS_1_TO_0_ETC___d360 ?
		  NOT_cache_valid_3_a_read__5_46_OR_NOT_cache_ta_ETC___d391 :
		  IF_cache_valid_0_a_read__8_AND_cache_valid_1_a_ETC___d394) ;
  assign IF_IF_cache_ff_request_from_cpu_first__3_BITS__ETC___d418 =
	     IF_cache_ff_request_from_cpu_first__3_BITS_1_T_ETC___d369 ?
	       _theResult_____1_snd__h20526 :
	       _theResult_____1_snd__h20561 ;
  assign IF_NOT_cache_valid_0_a_read__8_55_OR_NOT_cache_ETC___d401 =
	     (!cache_valid_0$DOA || !cache_valid_1$DOA) ?
	       32'd1 :
	       ((!cache_valid_2$DOA || !cache_valid_3$DOA) ? 32'd0 : 32'd1) ;
  assign IF_NOT_cache_valid_1_a_read__4_52_OR_NOT_cache_ETC___d411 =
	     (!cache_valid_1$DOA || !cache_valid_2$DOA) ?
	       32'd1 :
	       (cache_valid_3$DOA ? 32'd2 : 32'd0) ;
  assign IF_SEL_ARR_cache_pseudo_lru_0_38_cache_pseudo__ETC___d305 =
	     lru_bits__h11978[2] ? 32'd0 : 32'd1 ;
  assign IF_SEL_ARR_cache_pseudo_lru_0_38_cache_pseudo__ETC___d409 =
	     SEL_ARR_cache_pseudo_lru_0_38_cache_pseudo_lru_ETC___d307 ?
	       IF_SEL_ARR_cache_pseudo_lru_0_38_cache_pseudo__ETC___d305 :
	       (lru_bits__h11978[2] ? 32'd1 : 32'd2) ;
  assign IF_cache_ff_request_from_cpu_first__3_BITS_1_T_ETC___d369 =
	     cache_ff_request_from_cpu_first__3_BITS_1_TO_0_ETC___d360 ?
	       (!cache_valid_3$DOA ||
		!cache_tag_3_a_read__6_EQ_cache_ff_request_from_ETC___d48) &&
	       cache_valid_2_a_read__0_AND_cache_tag_2_a_read_ETC___d362 :
	       (cache_valid_0_a_read__8_AND_cache_valid_1_a_re_ETC___d237 ?
		  !SEL_ARR_cache_pseudo_lru_0_38_cache_pseudo_lru_ETC___d307 :
		  NOT_cache_valid_0_a_read__8_55_OR_cache_valid__ETC___d367) ;
  assign IF_cache_ff_request_from_cpu_first__3_BITS_1_T_ETC___d428 =
	     cache_ff_request_from_cpu_first__3_BITS_1_TO_0_ETC___d360 ?
	       (cache_valid_3_a_read__5_AND_cache_tag_3_a_read_ETC___d374 ?
		  32'd2 :
		  32'd3) :
	       IF_cache_valid_0_a_read__8_AND_cache_valid_1_a_ETC___d427 ;
  assign IF_cache_valid_0_a_read__8_AND_cache_valid_1_a_ETC___d324 =
	     cache_valid_0_a_read__8_AND_cache_valid_1_a_re_ETC___d237 ?
	       (SEL_ARR_cache_pseudo_lru_0_38_cache_pseudo_lru_ETC___d307 ?
		  (lru_bits__h11978[2] ? 32'd3 : 32'd1) :
		  (lru_bits__h11978[2] ? 32'd2 : 32'd0)) :
	       (cache_valid_0$DOA ?
		  IF_cache_valid_1_a_read__4_THEN_IF_cache_valid_ETC___d322 :
		  32'd0) ;
  assign IF_cache_valid_0_a_read__8_AND_cache_valid_1_a_ETC___d379 =
	     cache_valid_0_a_read__8_AND_cache_valid_1_a_re_ETC___d237 ?
	       SEL_ARR_cache_pseudo_lru_0_38_cache_pseudo_lru_ETC___d307 ||
	       lru_bits__h11978[2] :
	       cache_valid_0$DOA &&
	       (!cache_valid_1$DOA || !cache_valid_2$DOA ||
		!cache_valid_3$DOA) ;
  assign IF_cache_valid_0_a_read__8_AND_cache_valid_1_a_ETC___d389 =
	     cache_valid_0_a_read__8_AND_cache_valid_1_a_re_ETC___d237 ?
	       !lru_bits__h11978[2] :
	       !cache_valid_0$DOA || !cache_valid_1$DOA ||
	       cache_valid_2$DOA && cache_valid_3$DOA ;
  assign IF_cache_valid_0_a_read__8_AND_cache_valid_1_a_ETC___d394 =
	     cache_valid_0_a_read__8_AND_cache_valid_1_a_re_ETC___d237 ?
	       SEL_ARR_cache_pseudo_lru_0_38_cache_pseudo_lru_ETC___d307 ^
	       lru_bits__h11978[2] :
	       cache_valid_0$DOA &&
	       (!cache_valid_1$DOA || !cache_valid_2$DOA) ;
  assign IF_cache_valid_0_a_read__8_AND_cache_valid_1_a_ETC___d413 =
	     cache_valid_0_a_read__8_AND_cache_valid_1_a_re_ETC___d237 ?
	       IF_SEL_ARR_cache_pseudo_lru_0_38_cache_pseudo__ETC___d409 :
	       (cache_valid_0$DOA ?
		  IF_NOT_cache_valid_1_a_read__4_52_OR_NOT_cache_ETC___d411 :
		  32'd2) ;
  assign IF_cache_valid_0_a_read__8_AND_cache_valid_1_a_ETC___d427 =
	     cache_valid_0_a_read__8_AND_cache_valid_1_a_re_ETC___d237 ?
	       ((SEL_ARR_cache_pseudo_lru_0_38_cache_pseudo_lru_ETC___d307 ||
		 lru_bits__h11978[2]) ?
		  32'd2 :
		  32'd3) :
	       (cache_valid_0$DOA ?
		  ((!cache_valid_1$DOA || !cache_valid_2$DOA ||
		    !cache_valid_3$DOA) ?
		     32'd2 :
		     32'd3) :
		  32'd3) ;
  assign IF_cache_valid_1_a_read__4_AND_cache_tag_1_a_r_ETC___d115 =
	     (cache_valid_1$DOA &&
	      cache_tag_1_a_read__5_EQ_cache_ff_request_from_ETC___d56) ?
	       32'd1 :
	       ((cache_valid_0$DOA &&
		 cache_tag_0_a_read__9_EQ_cache_ff_request_from_ETC___d60) ?
		  32'd0 :
		  32'hFFFFFFFF) ;
  assign IF_cache_valid_1_a_read__4_AND_cache_tag_1_a_r_ETC___d397 =
	     (cache_valid_1$DOA &&
	      cache_tag_1_a_read__5_EQ_cache_ff_request_from_ETC___d56 ||
	      cache_valid_0$DOA &&
	      cache_tag_0_a_read__9_EQ_cache_ff_request_from_ETC___d60) ?
	       32'd1 :
	       32'd2 ;
  assign IF_cache_valid_1_a_read__4_THEN_IF_cache_valid_ETC___d313 =
	     cache_valid_1$DOA ?
	       (cache_valid_2$DOA ?
		  (cache_valid_3$DOA ? 2'd0 : 2'd3) :
		  2'd2) :
	       2'd1 ;
  assign IF_cache_valid_1_a_read__4_THEN_IF_cache_valid_ETC___d322 =
	     cache_valid_1$DOA ?
	       (cache_valid_2$DOA ?
		  (cache_valid_3$DOA ? 32'd0 : 32'd3) :
		  32'd2) :
	       32'd1 ;
  assign IF_cache_valid_2_a_read__0_AND_cache_tag_2_a_r_ETC___d406 =
	     (cache_valid_2$DOA &&
	      cache_tag_2_a_read__1_EQ_cache_ff_request_from_ETC___d52 ||
	      cache_valid_1$DOA &&
	      cache_tag_1_a_read__5_EQ_cache_ff_request_from_ETC___d56) ?
	       32'd1 :
	       32'd2 ;
  assign IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 =
	     (cache_valid_3$DOA &&
	      cache_tag_3_a_read__6_EQ_cache_ff_request_from_ETC___d48) ?
	       32'd3 :
	       ((cache_valid_2$DOA &&
		 cache_tag_2_a_read__1_EQ_cache_ff_request_from_ETC___d52) ?
		  32'd2 :
		  IF_cache_valid_1_a_read__4_AND_cache_tag_1_a_r_ETC___d115) ;
  assign IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d164 =
	     (cache_valid_3$DOA &&
	      cache_tag_3_a_read__6_EQ_cache_ff_request_from_ETC___d48 ||
	      cache_valid_2_a_read__0_AND_cache_tag_2_a_read_ETC___d63) ?
	       ((cache_ff_request_from_cpu$D_OUT[35:34] == 2'd0) ?
		  cache_ff_request_from_cpu$D_OUT[35:34] :
		  2'd1) :
	       2'd3 ;
  assign IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d398 =
	     (cache_valid_3$DOA &&
	      cache_tag_3_a_read__6_EQ_cache_ff_request_from_ETC___d48 ||
	      cache_valid_2$DOA &&
	      cache_tag_2_a_read__1_EQ_cache_ff_request_from_ETC___d52) ?
	       32'd0 :
	       IF_cache_valid_1_a_read__4_AND_cache_tag_1_a_r_ETC___d397 ;
  assign NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d175 =
	     (cache_ff_request_from_cpu$D_OUT[1:0] != 2'b10 ||
	      cache_ff_request_from_cpu$D_OUT[37:36] == 2'd0) &&
	     (cache_ff_request_from_cpu$D_OUT[1:0] != 2'b01 ||
	      !cache_ff_request_from_cpu$D_OUT[36]) &&
	     cache_valid_3_a_read__5_AND_cache_tag_3_a_read_ETC___d174 ;
  assign NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179 =
	     (cache_ff_request_from_cpu$D_OUT[1:0] != 2'b10 ||
	      cache_ff_request_from_cpu$D_OUT[37:36] == 2'd0) &&
	     (cache_ff_request_from_cpu$D_OUT[1:0] != 2'b01 ||
	      !cache_ff_request_from_cpu$D_OUT[36]) &&
	     cache_valid_3_a_read__5_AND_cache_tag_3_a_read_ETC___d178 ;
  assign NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d231 =
	     (cache_ff_request_from_cpu$D_OUT[1:0] != 2'b10 ||
	      cache_ff_request_from_cpu$D_OUT[37:36] == 2'd0) &&
	     (cache_ff_request_from_cpu$D_OUT[1:0] != 2'b01 ||
	      !cache_ff_request_from_cpu$D_OUT[36]) &&
	     (!cache_valid_3$DOA ||
	      !cache_tag_3_a_read__6_EQ_cache_ff_request_from_ETC___d48) &&
	     NOT_cache_valid_2_a_read__0_49_OR_NOT_cache_ta_ETC___d159 ;
  assign NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d337 =
	     (cache_ff_request_from_cpu$D_OUT[1:0] != 2'b10 ||
	      cache_ff_request_from_cpu$D_OUT[37:36] == 2'd0) &&
	     (cache_ff_request_from_cpu$D_OUT[1:0] != 2'b01 ||
	      !cache_ff_request_from_cpu$D_OUT[36]) &&
	     (!cache_valid_3$DOA ||
	      !cache_tag_3_a_read__6_EQ_cache_ff_request_from_ETC___d48) &&
	     NOT_cache_valid_2_a_read__0_49_OR_NOT_cache_ta_ETC___d159 &&
	     SEL_ARR_cache_dirty_0_a_read__30_cache_dirty_1_ETC___d335 ;
  assign NOT_cache_valid_0_a_read__8_55_OR_cache_valid__ETC___d367 =
	     !cache_valid_0$DOA ||
	     cache_valid_1$DOA && (!cache_valid_2$DOA || cache_valid_3$DOA) ;
  assign NOT_cache_valid_2_a_read__0_49_OR_NOT_cache_ta_ETC___d159 =
	     (!cache_valid_2$DOA ||
	      !cache_tag_2_a_read__1_EQ_cache_ff_request_from_ETC___d52) &&
	     (!cache_valid_1$DOA ||
	      !cache_tag_1_a_read__5_EQ_cache_ff_request_from_ETC___d56) &&
	     (!cache_valid_0$DOA ||
	      !cache_tag_0_a_read__9_EQ_cache_ff_request_from_ETC___d60) ;
  assign NOT_cache_valid_3_a_read__5_46_OR_NOT_cache_ta_ETC___d383 =
	     (!cache_valid_3$DOA ||
	      !cache_tag_3_a_read__6_EQ_cache_ff_request_from_ETC___d48) &&
	     (!cache_valid_2$DOA ||
	      !cache_tag_2_a_read__1_EQ_cache_ff_request_from_ETC___d52) &&
	     (cache_valid_1$DOA &&
	      cache_tag_1_a_read__5_EQ_cache_ff_request_from_ETC___d56 ||
	      cache_valid_0$DOA &&
	      cache_tag_0_a_read__9_EQ_cache_ff_request_from_ETC___d60) ;
  assign NOT_cache_valid_3_a_read__5_46_OR_NOT_cache_ta_ETC___d391 =
	     (!cache_valid_3$DOA ||
	      !cache_tag_3_a_read__6_EQ_cache_ff_request_from_ETC___d48) &&
	     (cache_valid_2$DOA &&
	      cache_tag_2_a_read__1_EQ_cache_ff_request_from_ETC___d52 ||
	      cache_valid_1$DOA &&
	      cache_tag_1_a_read__5_EQ_cache_ff_request_from_ETC___d56) ;
  assign SEL_ARR_cache_pseudo_lru_0_38_cache_pseudo_lru_ETC___d307 =
	     lru_bits__h11978[IF_SEL_ARR_cache_pseudo_lru_0_38_cache_pseudo__ETC___d305[1:0]] ;
  assign _dfoo1 =
	     cache_rg_replace_block_64_EQ_3_03_AND_cache_rg_ETC___d625 ||
	     cache_rg_replace_block == 2'd3 && cache_rg_enable &&
	     cache_rg_word_count == 3'd7 &&
	     cache_ff_request_from_cpu$D_OUT[35:34] != 2'd1 ;
  assign _dfoo13 =
	     cache_rg_replace_block_64_EQ_0_65_AND_cache_rg_ETC___d622 ||
	     cache_rg_replace_block == 2'd0 && cache_rg_enable &&
	     cache_rg_word_count == 3'd7 &&
	     cache_ff_request_from_cpu$D_OUT[35:34] != 2'd1 ;
  assign _dfoo5 =
	     cache_rg_replace_block_64_EQ_2_93_AND_cache_rg_ETC___d624 ||
	     cache_rg_replace_block == 2'd2 && cache_rg_enable &&
	     cache_rg_word_count == 3'd7 &&
	     cache_ff_request_from_cpu$D_OUT[35:34] != 2'd1 ;
  assign _dfoo9 =
	     cache_rg_replace_block_64_EQ_1_83_AND_cache_rg_ETC___d623 ||
	     cache_rg_replace_block == 2'd1 && cache_rg_enable &&
	     cache_rg_word_count == 3'd7 &&
	     cache_ff_request_from_cpu$D_OUT[35:34] != 2'd1 ;
  assign _theResult_____1_snd__h20526 = lru_bits__h11978 | x__h20865 ;
  assign _theResult_____1_snd__h20561 = lru_bits__h11978 & y__h20968 ;
  assign _theResult_____1_snd__h20727 =
	     { 1'd1,
	       IF_IF_cache_ff_request_from_cpu_first__3_BITS__ETC___d418[1:0] } ;
  assign _theResult_____1_snd__h20774 =
	     IF_IF_cache_ff_request_from_cpu_first__3_BITS__ETC___d418 &
	     y__h21070 ;
  assign cache_ff_request_from_cpu_first__3_BITS_1_TO_0_ETC___d162 =
	     cache_ff_request_from_cpu$D_OUT[1:0] == 2'b10 &&
	     cache_ff_request_from_cpu$D_OUT[37:36] != 2'd0 ||
	     cache_ff_request_from_cpu$D_OUT[1:0] == 2'b01 &&
	     cache_ff_request_from_cpu$D_OUT[36] ||
	     cache_ff_request_from_cpu_first__3_BITS_35_TO__ETC___d161 ;
  assign cache_ff_request_from_cpu_first__3_BITS_1_TO_0_ETC___d360 =
	     cache_ff_request_from_cpu$D_OUT[1:0] == 2'b10 &&
	     cache_ff_request_from_cpu$D_OUT[37:36] != 2'd0 ||
	     cache_ff_request_from_cpu$D_OUT[1:0] == 2'b01 &&
	     cache_ff_request_from_cpu$D_OUT[36] ||
	     cache_valid_3$DOA &&
	     cache_tag_3_a_read__6_EQ_cache_ff_request_from_ETC___d48 ||
	     cache_valid_2_a_read__0_AND_cache_tag_2_a_read_ETC___d63 ;
  assign cache_ff_request_from_cpu_first__3_BITS_1_TO_0_ETC___d69 =
	     cache_ff_request_from_cpu$D_OUT[1:0] == 2'b10 &&
	     cache_ff_request_from_cpu$D_OUT[37:36] != 2'd0 ||
	     cache_ff_request_from_cpu$D_OUT[1:0] == 2'b01 &&
	     cache_ff_request_from_cpu$D_OUT[36] ||
	     cache_valid_3_a_read__5_AND_cache_tag_3_a_read_ETC___d68 ;
  assign cache_ff_request_from_cpu_first__3_BITS_35_TO__ETC___d161 =
	     cache_ff_request_from_cpu$D_OUT[35:34] == 2'd0 ||
	     cache_ff_request_from_cpu$D_OUT[35:34] == 2'd1 ||
	     (!cache_valid_3$DOA ||
	      !cache_tag_3_a_read__6_EQ_cache_ff_request_from_ETC___d48) &&
	     NOT_cache_valid_2_a_read__0_49_OR_NOT_cache_ta_ETC___d159 ;
  assign cache_ff_response_from_memory_first__17_BITS_4_ETC___d523 =
	     cache_ff_response_from_memory$D_OUT[4:2] == cache_rg_offset ;
  assign cache_rg_offset_22_EQ_cache_ff_response_from_m_ETC___d533 =
	     cache_rg_offset == cache_ff_response_from_memory$D_OUT[4:2] ;
  assign cache_rg_replace_block_64_EQ_0_65_AND_cache_rg_ETC___d622 =
	     cache_rg_replace_block == 2'd0 && cache_rg_enable &&
	     cache_rg_word_count == 3'd7 &&
	     cache_ff_request_from_cpu$D_OUT[35:34] == 2'd1 ;
  assign cache_rg_replace_block_64_EQ_1_83_AND_cache_rg_ETC___d623 =
	     cache_rg_replace_block == 2'd1 && cache_rg_enable &&
	     cache_rg_word_count == 3'd7 &&
	     cache_ff_request_from_cpu$D_OUT[35:34] == 2'd1 ;
  assign cache_rg_replace_block_64_EQ_2_93_AND_cache_rg_ETC___d624 =
	     cache_rg_replace_block == 2'd2 && cache_rg_enable &&
	     cache_rg_word_count == 3'd7 &&
	     cache_ff_request_from_cpu$D_OUT[35:34] == 2'd1 ;
  assign cache_rg_replace_block_64_EQ_3_03_AND_cache_rg_ETC___d625 =
	     cache_rg_replace_block == 2'd3 && cache_rg_enable &&
	     cache_rg_word_count == 3'd7 &&
	     cache_ff_request_from_cpu$D_OUT[35:34] == 2'd1 ;
  assign cache_tag_0_a_read__9_EQ_cache_ff_request_from_ETC___d60 =
	     cache_tag_0$DOA == cache_ff_request_from_cpu$D_OUT[67:47] ;
  assign cache_tag_1_a_read__5_EQ_cache_ff_request_from_ETC___d56 =
	     cache_tag_1$DOA == cache_ff_request_from_cpu$D_OUT[67:47] ;
  assign cache_tag_2_a_read__1_EQ_cache_ff_request_from_ETC___d52 =
	     cache_tag_2$DOA == cache_ff_request_from_cpu$D_OUT[67:47] ;
  assign cache_tag_3_a_read__6_EQ_cache_ff_request_from_ETC___d48 =
	     cache_tag_3$DOA == cache_ff_request_from_cpu$D_OUT[67:47] ;
  assign cache_valid_0_a_read__8_AND_cache_valid_1_a_re_ETC___d237 =
	     cache_valid_0$DOA && cache_valid_1$DOA && cache_valid_2$DOA &&
	     cache_valid_3$DOA ;
  assign cache_valid_2_a_read__0_AND_cache_tag_2_a_read_ETC___d362 =
	     cache_valid_2$DOA &&
	     cache_tag_2_a_read__1_EQ_cache_ff_request_from_ETC___d52 ||
	     (!cache_valid_1$DOA ||
	      !cache_tag_1_a_read__5_EQ_cache_ff_request_from_ETC___d56) &&
	     cache_valid_0$DOA &&
	     cache_tag_0_a_read__9_EQ_cache_ff_request_from_ETC___d60 ;
  assign cache_valid_2_a_read__0_AND_cache_tag_2_a_read_ETC___d63 =
	     cache_valid_2$DOA &&
	     cache_tag_2_a_read__1_EQ_cache_ff_request_from_ETC___d52 ||
	     cache_valid_1$DOA &&
	     cache_tag_1_a_read__5_EQ_cache_ff_request_from_ETC___d56 ||
	     cache_valid_0$DOA &&
	     cache_tag_0_a_read__9_EQ_cache_ff_request_from_ETC___d60 ;
  assign cache_valid_3_a_read__5_AND_cache_tag_3_a_read_ETC___d174 =
	     (cache_valid_3$DOA &&
	      cache_tag_3_a_read__6_EQ_cache_ff_request_from_ETC___d48 ||
	      cache_valid_2_a_read__0_AND_cache_tag_2_a_read_ETC___d63) &&
	     cache_ff_request_from_cpu$D_OUT[35:34] == 2'd0 ;
  assign cache_valid_3_a_read__5_AND_cache_tag_3_a_read_ETC___d178 =
	     (cache_valid_3$DOA &&
	      cache_tag_3_a_read__6_EQ_cache_ff_request_from_ETC___d48 ||
	      cache_valid_2_a_read__0_AND_cache_tag_2_a_read_ETC___d63) &&
	     cache_ff_request_from_cpu$D_OUT[35:34] == 2'd1 ;
  assign cache_valid_3_a_read__5_AND_cache_tag_3_a_read_ETC___d371 =
	     cache_valid_3$DOA &&
	     cache_tag_3_a_read__6_EQ_cache_ff_request_from_ETC___d48 ||
	     cache_valid_2$DOA &&
	     cache_tag_2_a_read__1_EQ_cache_ff_request_from_ETC___d52 ||
	     cache_valid_1$DOA &&
	     cache_tag_1_a_read__5_EQ_cache_ff_request_from_ETC___d56 ||
	     cache_valid_0$DOA &&
	     cache_tag_0_a_read__9_EQ_cache_ff_request_from_ETC___d60 ;
  assign cache_valid_3_a_read__5_AND_cache_tag_3_a_read_ETC___d374 =
	     cache_valid_3$DOA &&
	     cache_tag_3_a_read__6_EQ_cache_ff_request_from_ETC___d48 ||
	     cache_valid_2$DOA &&
	     cache_tag_2_a_read__1_EQ_cache_ff_request_from_ETC___d52 ||
	     cache_valid_1$DOA &&
	     cache_tag_1_a_read__5_EQ_cache_ff_request_from_ETC___d56 ;
  assign cache_valid_3_a_read__5_AND_cache_tag_3_a_read_ETC___d68 =
	     (cache_valid_3$DOA &&
	      cache_tag_3_a_read__6_EQ_cache_ff_request_from_ETC___d48 ||
	      cache_valid_2_a_read__0_AND_cache_tag_2_a_read_ETC___d63) &&
	     (cache_ff_request_from_cpu$D_OUT[35:34] == 2'd0 ||
	      cache_ff_request_from_cpu$D_OUT[35:34] == 2'd1) ;
  assign lru_bits___1__h19789 = cache_pseudo_lru_0$D_IN ;
  assign old_address__h19157 =
	     { SEL_ARR_cache_tag_0_a_read__9_cache_tag_1_a_re_ETC___d327,
	       cache_ff_request_from_cpu$D_OUT[46:36] } ;
  assign v__h21720 =
	     cache_rg_offset_22_EQ_cache_ff_response_from_m_ETC___d533 ?
	       v__h21754 :
	       cache_ff_response_from_memory$D_OUT[65:34] ;
  assign v__h21754 =
	     (cache_ff_request_from_cpu$D_OUT[35:34] == 2'd1) ?
	       v__h21768 :
	       cache_ff_response_from_memory$D_OUT[65:34] ;
  assign x__h20865 = 3'd1 << x__h20895 ;
  assign x__h20895 =
	     cache_ff_request_from_cpu_first__3_BITS_1_TO_0_ETC___d360 ?
	       IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d398 :
	       (cache_valid_0_a_read__8_AND_cache_valid_1_a_re_ETC___d237 ?
		  IF_SEL_ARR_cache_pseudo_lru_0_38_cache_pseudo__ETC___d305 :
		  IF_NOT_cache_valid_0_a_read__8_55_OR_NOT_cache_ETC___d401) ;
  assign x__h20940 = 3'd1 << x__h20971 ;
  assign x__h20971 =
	     cache_ff_request_from_cpu_first__3_BITS_1_TO_0_ETC___d360 ?
	       ((cache_valid_3$DOA &&
		 cache_tag_3_a_read__6_EQ_cache_ff_request_from_ETC___d48) ?
		  32'd0 :
		  IF_cache_valid_2_a_read__0_AND_cache_tag_2_a_r_ETC___d406) :
	       IF_cache_valid_0_a_read__8_AND_cache_valid_1_a_ETC___d413 ;
  assign x__h21042 = 3'd1 << x__h21073 ;
  assign x__h21073 =
	     IF_cache_ff_request_from_cpu_first__3_BITS_1_T_ETC___d369 ?
	       (cache_ff_request_from_cpu_first__3_BITS_1_TO_0_ETC___d360 ?
		  (cache_valid_3_a_read__5_AND_cache_tag_3_a_read_ETC___d371 ?
		     32'd2 :
		     32'd3) :
		  32'd2) :
	       IF_cache_ff_request_from_cpu_first__3_BITS_1_T_ETC___d428 ;
  assign x__h21376 = cache_rg_state$port1__read ;
  assign x__h23621 = cache_rg_word_count + 3'd1 ;
  assign x__h24857 = cache_rg_state$port2__read ;
  assign x_address__h24666 = { cache_rg_dirty_line_addr[31:5], 5'd0 } ;
  assign x_data_line__h11892 =
	     { 224'd0, cache_ff_request_from_cpu$D_OUT[33:2] } ;
  assign y__h20968 = ~x__h20940 ;
  assign y__h21070 = ~x__h21042 ;
  always@(cache_ff_request_from_cpu$D_OUT or
	  cache_pseudo_lru_0 or
	  cache_pseudo_lru_1 or
	  cache_pseudo_lru_2 or
	  cache_pseudo_lru_3 or
	  cache_pseudo_lru_4 or
	  cache_pseudo_lru_5 or
	  cache_pseudo_lru_6 or
	  cache_pseudo_lru_7 or
	  cache_pseudo_lru_8 or
	  cache_pseudo_lru_9 or
	  cache_pseudo_lru_10 or
	  cache_pseudo_lru_11 or
	  cache_pseudo_lru_12 or
	  cache_pseudo_lru_13 or
	  cache_pseudo_lru_14 or
	  cache_pseudo_lru_15 or
	  cache_pseudo_lru_16 or
	  cache_pseudo_lru_17 or
	  cache_pseudo_lru_18 or
	  cache_pseudo_lru_19 or
	  cache_pseudo_lru_20 or
	  cache_pseudo_lru_21 or
	  cache_pseudo_lru_22 or
	  cache_pseudo_lru_23 or
	  cache_pseudo_lru_24 or
	  cache_pseudo_lru_25 or
	  cache_pseudo_lru_26 or
	  cache_pseudo_lru_27 or
	  cache_pseudo_lru_28 or
	  cache_pseudo_lru_29 or
	  cache_pseudo_lru_30 or
	  cache_pseudo_lru_31 or
	  cache_pseudo_lru_32 or
	  cache_pseudo_lru_33 or
	  cache_pseudo_lru_34 or
	  cache_pseudo_lru_35 or
	  cache_pseudo_lru_36 or
	  cache_pseudo_lru_37 or
	  cache_pseudo_lru_38 or
	  cache_pseudo_lru_39 or
	  cache_pseudo_lru_40 or
	  cache_pseudo_lru_41 or
	  cache_pseudo_lru_42 or
	  cache_pseudo_lru_43 or
	  cache_pseudo_lru_44 or
	  cache_pseudo_lru_45 or
	  cache_pseudo_lru_46 or
	  cache_pseudo_lru_47 or
	  cache_pseudo_lru_48 or
	  cache_pseudo_lru_49 or
	  cache_pseudo_lru_50 or
	  cache_pseudo_lru_51 or
	  cache_pseudo_lru_52 or
	  cache_pseudo_lru_53 or
	  cache_pseudo_lru_54 or
	  cache_pseudo_lru_55 or
	  cache_pseudo_lru_56 or
	  cache_pseudo_lru_57 or
	  cache_pseudo_lru_58 or
	  cache_pseudo_lru_59 or
	  cache_pseudo_lru_60 or
	  cache_pseudo_lru_61 or cache_pseudo_lru_62 or cache_pseudo_lru_63)
  begin
    case (cache_ff_request_from_cpu$D_OUT[46:41])
      6'd0: lru_bits__h11978 = cache_pseudo_lru_0;
      6'd1: lru_bits__h11978 = cache_pseudo_lru_1;
      6'd2: lru_bits__h11978 = cache_pseudo_lru_2;
      6'd3: lru_bits__h11978 = cache_pseudo_lru_3;
      6'd4: lru_bits__h11978 = cache_pseudo_lru_4;
      6'd5: lru_bits__h11978 = cache_pseudo_lru_5;
      6'd6: lru_bits__h11978 = cache_pseudo_lru_6;
      6'd7: lru_bits__h11978 = cache_pseudo_lru_7;
      6'd8: lru_bits__h11978 = cache_pseudo_lru_8;
      6'd9: lru_bits__h11978 = cache_pseudo_lru_9;
      6'd10: lru_bits__h11978 = cache_pseudo_lru_10;
      6'd11: lru_bits__h11978 = cache_pseudo_lru_11;
      6'd12: lru_bits__h11978 = cache_pseudo_lru_12;
      6'd13: lru_bits__h11978 = cache_pseudo_lru_13;
      6'd14: lru_bits__h11978 = cache_pseudo_lru_14;
      6'd15: lru_bits__h11978 = cache_pseudo_lru_15;
      6'd16: lru_bits__h11978 = cache_pseudo_lru_16;
      6'd17: lru_bits__h11978 = cache_pseudo_lru_17;
      6'd18: lru_bits__h11978 = cache_pseudo_lru_18;
      6'd19: lru_bits__h11978 = cache_pseudo_lru_19;
      6'd20: lru_bits__h11978 = cache_pseudo_lru_20;
      6'd21: lru_bits__h11978 = cache_pseudo_lru_21;
      6'd22: lru_bits__h11978 = cache_pseudo_lru_22;
      6'd23: lru_bits__h11978 = cache_pseudo_lru_23;
      6'd24: lru_bits__h11978 = cache_pseudo_lru_24;
      6'd25: lru_bits__h11978 = cache_pseudo_lru_25;
      6'd26: lru_bits__h11978 = cache_pseudo_lru_26;
      6'd27: lru_bits__h11978 = cache_pseudo_lru_27;
      6'd28: lru_bits__h11978 = cache_pseudo_lru_28;
      6'd29: lru_bits__h11978 = cache_pseudo_lru_29;
      6'd30: lru_bits__h11978 = cache_pseudo_lru_30;
      6'd31: lru_bits__h11978 = cache_pseudo_lru_31;
      6'd32: lru_bits__h11978 = cache_pseudo_lru_32;
      6'd33: lru_bits__h11978 = cache_pseudo_lru_33;
      6'd34: lru_bits__h11978 = cache_pseudo_lru_34;
      6'd35: lru_bits__h11978 = cache_pseudo_lru_35;
      6'd36: lru_bits__h11978 = cache_pseudo_lru_36;
      6'd37: lru_bits__h11978 = cache_pseudo_lru_37;
      6'd38: lru_bits__h11978 = cache_pseudo_lru_38;
      6'd39: lru_bits__h11978 = cache_pseudo_lru_39;
      6'd40: lru_bits__h11978 = cache_pseudo_lru_40;
      6'd41: lru_bits__h11978 = cache_pseudo_lru_41;
      6'd42: lru_bits__h11978 = cache_pseudo_lru_42;
      6'd43: lru_bits__h11978 = cache_pseudo_lru_43;
      6'd44: lru_bits__h11978 = cache_pseudo_lru_44;
      6'd45: lru_bits__h11978 = cache_pseudo_lru_45;
      6'd46: lru_bits__h11978 = cache_pseudo_lru_46;
      6'd47: lru_bits__h11978 = cache_pseudo_lru_47;
      6'd48: lru_bits__h11978 = cache_pseudo_lru_48;
      6'd49: lru_bits__h11978 = cache_pseudo_lru_49;
      6'd50: lru_bits__h11978 = cache_pseudo_lru_50;
      6'd51: lru_bits__h11978 = cache_pseudo_lru_51;
      6'd52: lru_bits__h11978 = cache_pseudo_lru_52;
      6'd53: lru_bits__h11978 = cache_pseudo_lru_53;
      6'd54: lru_bits__h11978 = cache_pseudo_lru_54;
      6'd55: lru_bits__h11978 = cache_pseudo_lru_55;
      6'd56: lru_bits__h11978 = cache_pseudo_lru_56;
      6'd57: lru_bits__h11978 = cache_pseudo_lru_57;
      6'd58: lru_bits__h11978 = cache_pseudo_lru_58;
      6'd59: lru_bits__h11978 = cache_pseudo_lru_59;
      6'd60: lru_bits__h11978 = cache_pseudo_lru_60;
      6'd61: lru_bits__h11978 = cache_pseudo_lru_61;
      6'd62: lru_bits__h11978 = cache_pseudo_lru_62;
      6'd63: lru_bits__h11978 = cache_pseudo_lru_63;
    endcase
  end
  always@(cache_ff_response_from_memory$D_OUT or
	  cache_ff_request_from_cpu$D_OUT)
  begin
    case (cache_ff_response_from_memory$D_OUT[1:0])
      2'd0:
	  CASE_cache_ff_response_from_memoryD_OUT_BITS__ETC__q1 =
	      { cache_ff_response_from_memory$D_OUT[65:42],
		cache_ff_request_from_cpu$D_OUT[9:2] };
      2'd1:
	  CASE_cache_ff_response_from_memoryD_OUT_BITS__ETC__q1 =
	      { cache_ff_response_from_memory$D_OUT[65:50],
		cache_ff_request_from_cpu$D_OUT[9:2],
		cache_ff_response_from_memory$D_OUT[41:34] };
      2'd2:
	  CASE_cache_ff_response_from_memoryD_OUT_BITS__ETC__q1 =
	      { cache_ff_response_from_memory$D_OUT[65:58],
		cache_ff_request_from_cpu$D_OUT[9:2],
		cache_ff_response_from_memory$D_OUT[49:34] };
      2'd3:
	  CASE_cache_ff_response_from_memoryD_OUT_BITS__ETC__q1 =
	      { cache_ff_request_from_cpu$D_OUT[9:2],
		cache_ff_response_from_memory$D_OUT[57:34] };
    endcase
  end
  always@(cache_ff_request_from_cpu$D_OUT or
	  CASE_cache_ff_response_from_memoryD_OUT_BITS__ETC__q1 or
	  cache_ff_response_from_memory$D_OUT)
  begin
    case (cache_ff_request_from_cpu$D_OUT[1:0])
      2'd0: v__h21768 = CASE_cache_ff_response_from_memoryD_OUT_BITS__ETC__q1;
      2'b01:
	  v__h21768 =
	      (cache_ff_response_from_memory$D_OUT[1:0] == 2'd0) ?
		{ cache_ff_response_from_memory$D_OUT[65:50],
		  cache_ff_request_from_cpu$D_OUT[17:2] } :
		{ cache_ff_request_from_cpu$D_OUT[17:2],
		  cache_ff_response_from_memory$D_OUT[49:34] };
      default: v__h21768 = cache_ff_request_from_cpu$D_OUT[33:2];
    endcase
  end
  always@(cache_ff_request_from_cpu$D_OUT or
	  cache_data_1_0$DOA or
	  cache_data_1_1$DOA or
	  cache_data_1_2$DOA or
	  cache_data_1_3$DOA or
	  cache_data_1_4$DOA or
	  cache_data_1_5$DOA or cache_data_1_6$DOA or cache_data_1_7$DOA)
  begin
    case (cache_ff_request_from_cpu$D_OUT[40:38])
      3'd0:
	  SEL_ARR_cache_data_1_0_a_read__3_cache_data_1__ETC___d92 =
	      cache_data_1_0$DOA;
      3'd1:
	  SEL_ARR_cache_data_1_0_a_read__3_cache_data_1__ETC___d92 =
	      cache_data_1_1$DOA;
      3'd2:
	  SEL_ARR_cache_data_1_0_a_read__3_cache_data_1__ETC___d92 =
	      cache_data_1_2$DOA;
      3'd3:
	  SEL_ARR_cache_data_1_0_a_read__3_cache_data_1__ETC___d92 =
	      cache_data_1_3$DOA;
      3'd4:
	  SEL_ARR_cache_data_1_0_a_read__3_cache_data_1__ETC___d92 =
	      cache_data_1_4$DOA;
      3'd5:
	  SEL_ARR_cache_data_1_0_a_read__3_cache_data_1__ETC___d92 =
	      cache_data_1_5$DOA;
      3'd6:
	  SEL_ARR_cache_data_1_0_a_read__3_cache_data_1__ETC___d92 =
	      cache_data_1_6$DOA;
      3'd7:
	  SEL_ARR_cache_data_1_0_a_read__3_cache_data_1__ETC___d92 =
	      cache_data_1_7$DOA;
    endcase
  end
  always@(cache_ff_request_from_cpu$D_OUT or
	  cache_data_2_0$DOA or
	  cache_data_2_1$DOA or
	  cache_data_2_2$DOA or
	  cache_data_2_3$DOA or
	  cache_data_2_4$DOA or
	  cache_data_2_5$DOA or cache_data_2_6$DOA or cache_data_2_7$DOA)
  begin
    case (cache_ff_request_from_cpu$D_OUT[40:38])
      3'd0:
	  SEL_ARR_cache_data_2_0_a_read__3_cache_data_2__ETC___d102 =
	      cache_data_2_0$DOA;
      3'd1:
	  SEL_ARR_cache_data_2_0_a_read__3_cache_data_2__ETC___d102 =
	      cache_data_2_1$DOA;
      3'd2:
	  SEL_ARR_cache_data_2_0_a_read__3_cache_data_2__ETC___d102 =
	      cache_data_2_2$DOA;
      3'd3:
	  SEL_ARR_cache_data_2_0_a_read__3_cache_data_2__ETC___d102 =
	      cache_data_2_3$DOA;
      3'd4:
	  SEL_ARR_cache_data_2_0_a_read__3_cache_data_2__ETC___d102 =
	      cache_data_2_4$DOA;
      3'd5:
	  SEL_ARR_cache_data_2_0_a_read__3_cache_data_2__ETC___d102 =
	      cache_data_2_5$DOA;
      3'd6:
	  SEL_ARR_cache_data_2_0_a_read__3_cache_data_2__ETC___d102 =
	      cache_data_2_6$DOA;
      3'd7:
	  SEL_ARR_cache_data_2_0_a_read__3_cache_data_2__ETC___d102 =
	      cache_data_2_7$DOA;
    endcase
  end
  always@(cache_ff_request_from_cpu$D_OUT or
	  cache_data_0_0$DOA or
	  cache_data_0_1$DOA or
	  cache_data_0_2$DOA or
	  cache_data_0_3$DOA or
	  cache_data_0_4$DOA or
	  cache_data_0_5$DOA or cache_data_0_6$DOA or cache_data_0_7$DOA)
  begin
    case (cache_ff_request_from_cpu$D_OUT[40:38])
      3'd0:
	  SEL_ARR_cache_data_0_0_a_read__2_cache_data_0__ETC___d82 =
	      cache_data_0_0$DOA;
      3'd1:
	  SEL_ARR_cache_data_0_0_a_read__2_cache_data_0__ETC___d82 =
	      cache_data_0_1$DOA;
      3'd2:
	  SEL_ARR_cache_data_0_0_a_read__2_cache_data_0__ETC___d82 =
	      cache_data_0_2$DOA;
      3'd3:
	  SEL_ARR_cache_data_0_0_a_read__2_cache_data_0__ETC___d82 =
	      cache_data_0_3$DOA;
      3'd4:
	  SEL_ARR_cache_data_0_0_a_read__2_cache_data_0__ETC___d82 =
	      cache_data_0_4$DOA;
      3'd5:
	  SEL_ARR_cache_data_0_0_a_read__2_cache_data_0__ETC___d82 =
	      cache_data_0_5$DOA;
      3'd6:
	  SEL_ARR_cache_data_0_0_a_read__2_cache_data_0__ETC___d82 =
	      cache_data_0_6$DOA;
      3'd7:
	  SEL_ARR_cache_data_0_0_a_read__2_cache_data_0__ETC___d82 =
	      cache_data_0_7$DOA;
    endcase
  end
  always@(cache_ff_request_from_cpu$D_OUT or
	  cache_data_3_0$DOA or
	  cache_data_3_1$DOA or
	  cache_data_3_2$DOA or
	  cache_data_3_3$DOA or
	  cache_data_3_4$DOA or
	  cache_data_3_5$DOA or cache_data_3_6$DOA or cache_data_3_7$DOA)
  begin
    case (cache_ff_request_from_cpu$D_OUT[40:38])
      3'd0:
	  SEL_ARR_cache_data_3_0_a_read__03_cache_data_3_ETC___d112 =
	      cache_data_3_0$DOA;
      3'd1:
	  SEL_ARR_cache_data_3_0_a_read__03_cache_data_3_ETC___d112 =
	      cache_data_3_1$DOA;
      3'd2:
	  SEL_ARR_cache_data_3_0_a_read__03_cache_data_3_ETC___d112 =
	      cache_data_3_2$DOA;
      3'd3:
	  SEL_ARR_cache_data_3_0_a_read__03_cache_data_3_ETC___d112 =
	      cache_data_3_3$DOA;
      3'd4:
	  SEL_ARR_cache_data_3_0_a_read__03_cache_data_3_ETC___d112 =
	      cache_data_3_4$DOA;
      3'd5:
	  SEL_ARR_cache_data_3_0_a_read__03_cache_data_3_ETC___d112 =
	      cache_data_3_5$DOA;
      3'd6:
	  SEL_ARR_cache_data_3_0_a_read__03_cache_data_3_ETC___d112 =
	      cache_data_3_6$DOA;
      3'd7:
	  SEL_ARR_cache_data_3_0_a_read__03_cache_data_3_ETC___d112 =
	      cache_data_3_7$DOA;
    endcase
  end
  always@(IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117 or
	  SEL_ARR_cache_data_0_0_a_read__2_cache_data_0__ETC___d82 or
	  SEL_ARR_cache_data_1_0_a_read__3_cache_data_1__ETC___d92 or
	  SEL_ARR_cache_data_2_0_a_read__3_cache_data_2__ETC___d102 or
	  SEL_ARR_cache_data_3_0_a_read__03_cache_data_3_ETC___d112)
  begin
    case (IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117)
      32'd0:
	  accessed_word1__h15951 =
	      SEL_ARR_cache_data_0_0_a_read__2_cache_data_0__ETC___d82;
      32'd1:
	  accessed_word1__h15951 =
	      SEL_ARR_cache_data_1_0_a_read__3_cache_data_1__ETC___d92;
      32'd2:
	  accessed_word1__h15951 =
	      SEL_ARR_cache_data_2_0_a_read__3_cache_data_2__ETC___d102;
      32'd3:
	  accessed_word1__h15951 =
	      SEL_ARR_cache_data_3_0_a_read__03_cache_data_3_ETC___d112;
      default: accessed_word1__h15951 = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(cache_ff_request_from_cpu$D_OUT or accessed_word1__h15951)
  begin
    case (cache_ff_request_from_cpu$D_OUT[37:36])
      2'd0:
	  CASE_cache_ff_request_from_cpuD_OUT_BITS_37_T_ETC__q2 =
	      { accessed_word1__h15951[31:8],
		cache_ff_request_from_cpu$D_OUT[9:2] };
      2'd1:
	  CASE_cache_ff_request_from_cpuD_OUT_BITS_37_T_ETC__q2 =
	      { accessed_word1__h15951[31:16],
		cache_ff_request_from_cpu$D_OUT[9:2],
		accessed_word1__h15951[7:0] };
      2'd2:
	  CASE_cache_ff_request_from_cpuD_OUT_BITS_37_T_ETC__q2 =
	      { accessed_word1__h15951[31:24],
		cache_ff_request_from_cpu$D_OUT[9:2],
		accessed_word1__h15951[15:0] };
      2'd3:
	  CASE_cache_ff_request_from_cpuD_OUT_BITS_37_T_ETC__q2 =
	      { cache_ff_request_from_cpu$D_OUT[9:2],
		accessed_word1__h15951[23:0] };
    endcase
  end
  always@(cache_ff_request_from_cpu$D_OUT or
	  CASE_cache_ff_request_from_cpuD_OUT_BITS_37_T_ETC__q2 or
	  accessed_word1__h15951)
  begin
    case (cache_ff_request_from_cpu$D_OUT[1:0])
      2'd0:
	  accessed_word__h15952 =
	      CASE_cache_ff_request_from_cpuD_OUT_BITS_37_T_ETC__q2;
      2'b01:
	  accessed_word__h15952 =
	      (cache_ff_request_from_cpu$D_OUT[37:36] == 2'd0) ?
		{ accessed_word1__h15951[31:16],
		  cache_ff_request_from_cpu$D_OUT[17:2] } :
		{ cache_ff_request_from_cpu$D_OUT[17:2],
		  accessed_word1__h15951[15:0] };
      default: accessed_word__h15952 = cache_ff_request_from_cpu$D_OUT[33:2];
    endcase
  end
  always@(IF_cache_valid_0_a_read__8_AND_cache_valid_1_a_ETC___d324 or
	  cache_dirty_0$DOA or
	  cache_dirty_1$DOA or cache_dirty_2$DOA or cache_dirty_3$DOA)
  begin
    case (IF_cache_valid_0_a_read__8_AND_cache_valid_1_a_ETC___d324)
      32'd0:
	  SEL_ARR_cache_dirty_0_a_read__30_cache_dirty_1_ETC___d335 =
	      cache_dirty_0$DOA;
      32'd1:
	  SEL_ARR_cache_dirty_0_a_read__30_cache_dirty_1_ETC___d335 =
	      cache_dirty_1$DOA;
      32'd2:
	  SEL_ARR_cache_dirty_0_a_read__30_cache_dirty_1_ETC___d335 =
	      cache_dirty_2$DOA;
      32'd3:
	  SEL_ARR_cache_dirty_0_a_read__30_cache_dirty_1_ETC___d335 =
	      cache_dirty_3$DOA;
      default: SEL_ARR_cache_dirty_0_a_read__30_cache_dirty_1_ETC___d335 =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  always@(IF_cache_valid_0_a_read__8_AND_cache_valid_1_a_ETC___d324 or
	  cache_data_0_7$DOA or
	  cache_data_1_7$DOA or cache_data_2_7$DOA or cache_data_3_7$DOA)
  begin
    case (IF_cache_valid_0_a_read__8_AND_cache_valid_1_a_ETC___d324)
      32'd0:
	  SEL_ARR_cache_data_0_7_a_read__9_cache_data_1__ETC___d340 =
	      cache_data_0_7$DOA;
      32'd1:
	  SEL_ARR_cache_data_0_7_a_read__9_cache_data_1__ETC___d340 =
	      cache_data_1_7$DOA;
      32'd2:
	  SEL_ARR_cache_data_0_7_a_read__9_cache_data_1__ETC___d340 =
	      cache_data_2_7$DOA;
      32'd3:
	  SEL_ARR_cache_data_0_7_a_read__9_cache_data_1__ETC___d340 =
	      cache_data_3_7$DOA;
      default: SEL_ARR_cache_data_0_7_a_read__9_cache_data_1__ETC___d340 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(IF_cache_valid_0_a_read__8_AND_cache_valid_1_a_ETC___d324 or
	  cache_data_0_5$DOA or
	  cache_data_1_5$DOA or cache_data_2_5$DOA or cache_data_3_5$DOA)
  begin
    case (IF_cache_valid_0_a_read__8_AND_cache_valid_1_a_ETC___d324)
      32'd0:
	  SEL_ARR_cache_data_0_5_a_read__7_cache_data_1__ETC___d345 =
	      cache_data_0_5$DOA;
      32'd1:
	  SEL_ARR_cache_data_0_5_a_read__7_cache_data_1__ETC___d345 =
	      cache_data_1_5$DOA;
      32'd2:
	  SEL_ARR_cache_data_0_5_a_read__7_cache_data_1__ETC___d345 =
	      cache_data_2_5$DOA;
      32'd3:
	  SEL_ARR_cache_data_0_5_a_read__7_cache_data_1__ETC___d345 =
	      cache_data_3_5$DOA;
      default: SEL_ARR_cache_data_0_5_a_read__7_cache_data_1__ETC___d345 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(IF_cache_valid_0_a_read__8_AND_cache_valid_1_a_ETC___d324 or
	  cache_data_0_6$DOA or
	  cache_data_1_6$DOA or cache_data_2_6$DOA or cache_data_3_6$DOA)
  begin
    case (IF_cache_valid_0_a_read__8_AND_cache_valid_1_a_ETC___d324)
      32'd0:
	  SEL_ARR_cache_data_0_6_a_read__8_cache_data_1__ETC___d342 =
	      cache_data_0_6$DOA;
      32'd1:
	  SEL_ARR_cache_data_0_6_a_read__8_cache_data_1__ETC___d342 =
	      cache_data_1_6$DOA;
      32'd2:
	  SEL_ARR_cache_data_0_6_a_read__8_cache_data_1__ETC___d342 =
	      cache_data_2_6$DOA;
      32'd3:
	  SEL_ARR_cache_data_0_6_a_read__8_cache_data_1__ETC___d342 =
	      cache_data_3_6$DOA;
      default: SEL_ARR_cache_data_0_6_a_read__8_cache_data_1__ETC___d342 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(IF_cache_valid_0_a_read__8_AND_cache_valid_1_a_ETC___d324 or
	  cache_data_0_4$DOA or
	  cache_data_1_4$DOA or cache_data_2_4$DOA or cache_data_3_4$DOA)
  begin
    case (IF_cache_valid_0_a_read__8_AND_cache_valid_1_a_ETC___d324)
      32'd0:
	  SEL_ARR_cache_data_0_4_a_read__6_cache_data_1__ETC___d347 =
	      cache_data_0_4$DOA;
      32'd1:
	  SEL_ARR_cache_data_0_4_a_read__6_cache_data_1__ETC___d347 =
	      cache_data_1_4$DOA;
      32'd2:
	  SEL_ARR_cache_data_0_4_a_read__6_cache_data_1__ETC___d347 =
	      cache_data_2_4$DOA;
      32'd3:
	  SEL_ARR_cache_data_0_4_a_read__6_cache_data_1__ETC___d347 =
	      cache_data_3_4$DOA;
      default: SEL_ARR_cache_data_0_4_a_read__6_cache_data_1__ETC___d347 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(IF_cache_valid_0_a_read__8_AND_cache_valid_1_a_ETC___d324 or
	  cache_data_0_3$DOA or
	  cache_data_1_3$DOA or cache_data_2_3$DOA or cache_data_3_3$DOA)
  begin
    case (IF_cache_valid_0_a_read__8_AND_cache_valid_1_a_ETC___d324)
      32'd0:
	  SEL_ARR_cache_data_0_3_a_read__5_cache_data_1__ETC___d350 =
	      cache_data_0_3$DOA;
      32'd1:
	  SEL_ARR_cache_data_0_3_a_read__5_cache_data_1__ETC___d350 =
	      cache_data_1_3$DOA;
      32'd2:
	  SEL_ARR_cache_data_0_3_a_read__5_cache_data_1__ETC___d350 =
	      cache_data_2_3$DOA;
      32'd3:
	  SEL_ARR_cache_data_0_3_a_read__5_cache_data_1__ETC___d350 =
	      cache_data_3_3$DOA;
      default: SEL_ARR_cache_data_0_3_a_read__5_cache_data_1__ETC___d350 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(IF_cache_valid_0_a_read__8_AND_cache_valid_1_a_ETC___d324 or
	  cache_data_0_2$DOA or
	  cache_data_1_2$DOA or cache_data_2_2$DOA or cache_data_3_2$DOA)
  begin
    case (IF_cache_valid_0_a_read__8_AND_cache_valid_1_a_ETC___d324)
      32'd0:
	  SEL_ARR_cache_data_0_2_a_read__4_cache_data_1__ETC___d352 =
	      cache_data_0_2$DOA;
      32'd1:
	  SEL_ARR_cache_data_0_2_a_read__4_cache_data_1__ETC___d352 =
	      cache_data_1_2$DOA;
      32'd2:
	  SEL_ARR_cache_data_0_2_a_read__4_cache_data_1__ETC___d352 =
	      cache_data_2_2$DOA;
      32'd3:
	  SEL_ARR_cache_data_0_2_a_read__4_cache_data_1__ETC___d352 =
	      cache_data_3_2$DOA;
      default: SEL_ARR_cache_data_0_2_a_read__4_cache_data_1__ETC___d352 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(IF_cache_valid_0_a_read__8_AND_cache_valid_1_a_ETC___d324 or
	  cache_data_0_1$DOA or
	  cache_data_1_1$DOA or cache_data_2_1$DOA or cache_data_3_1$DOA)
  begin
    case (IF_cache_valid_0_a_read__8_AND_cache_valid_1_a_ETC___d324)
      32'd0:
	  SEL_ARR_cache_data_0_1_a_read__3_cache_data_1__ETC___d355 =
	      cache_data_0_1$DOA;
      32'd1:
	  SEL_ARR_cache_data_0_1_a_read__3_cache_data_1__ETC___d355 =
	      cache_data_1_1$DOA;
      32'd2:
	  SEL_ARR_cache_data_0_1_a_read__3_cache_data_1__ETC___d355 =
	      cache_data_2_1$DOA;
      32'd3:
	  SEL_ARR_cache_data_0_1_a_read__3_cache_data_1__ETC___d355 =
	      cache_data_3_1$DOA;
      default: SEL_ARR_cache_data_0_1_a_read__3_cache_data_1__ETC___d355 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(IF_cache_valid_0_a_read__8_AND_cache_valid_1_a_ETC___d324 or
	  cache_data_0_0$DOA or
	  cache_data_1_0$DOA or cache_data_2_0$DOA or cache_data_3_0$DOA)
  begin
    case (IF_cache_valid_0_a_read__8_AND_cache_valid_1_a_ETC___d324)
      32'd0:
	  SEL_ARR_cache_data_0_0_a_read__2_cache_data_1__ETC___d357 =
	      cache_data_0_0$DOA;
      32'd1:
	  SEL_ARR_cache_data_0_0_a_read__2_cache_data_1__ETC___d357 =
	      cache_data_1_0$DOA;
      32'd2:
	  SEL_ARR_cache_data_0_0_a_read__2_cache_data_1__ETC___d357 =
	      cache_data_2_0$DOA;
      32'd3:
	  SEL_ARR_cache_data_0_0_a_read__2_cache_data_1__ETC___d357 =
	      cache_data_3_0$DOA;
      default: SEL_ARR_cache_data_0_0_a_read__2_cache_data_1__ETC___d357 =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(IF_cache_valid_0_a_read__8_AND_cache_valid_1_a_ETC___d324 or
	  cache_tag_0$DOA or
	  cache_tag_1$DOA or cache_tag_2$DOA or cache_tag_3$DOA)
  begin
    case (IF_cache_valid_0_a_read__8_AND_cache_valid_1_a_ETC___d324)
      32'd0:
	  SEL_ARR_cache_tag_0_a_read__9_cache_tag_1_a_re_ETC___d327 =
	      cache_tag_0$DOA;
      32'd1:
	  SEL_ARR_cache_tag_0_a_read__9_cache_tag_1_a_re_ETC___d327 =
	      cache_tag_1$DOA;
      32'd2:
	  SEL_ARR_cache_tag_0_a_read__9_cache_tag_1_a_re_ETC___d327 =
	      cache_tag_2$DOA;
      32'd3:
	  SEL_ARR_cache_tag_0_a_read__9_cache_tag_1_a_re_ETC___d327 =
	      cache_tag_3$DOA;
      default: SEL_ARR_cache_tag_0_a_read__9_cache_tag_1_a_re_ETC___d327 =
		   21'b010101010101010101010 /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cache_pseudo_lru_0 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_1 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_10 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_11 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_12 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_13 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_14 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_15 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_16 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_17 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_18 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_19 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_2 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_20 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_21 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_22 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_23 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_24 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_25 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_26 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_27 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_28 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_29 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_3 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_30 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_31 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_32 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_33 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_34 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_35 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_36 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_37 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_38 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_39 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_4 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_40 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_41 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_42 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_43 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_44 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_45 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_46 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_47 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_48 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_49 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_5 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_50 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_51 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_52 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_53 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_54 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_55 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_56 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_57 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_58 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_59 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_6 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_60 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_61 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_62 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_63 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_7 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_8 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_pseudo_lru_9 <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_rg_dirty_line_addr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cache_rg_dirty_line_data <= `BSV_ASSIGNMENT_DELAY 256'd0;
	cache_rg_dirty_line_write_back <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_enable <= `BSV_ASSIGNMENT_DELAY 1'd1;
	cache_rg_index <= `BSV_ASSIGNMENT_DELAY 7'd0;
	cache_rg_initialize <= `BSV_ASSIGNMENT_DELAY 1'd1;
	cache_rg_line_write_stall <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_offset <= `BSV_ASSIGNMENT_DELAY 3'd0;
	cache_rg_replace_block <= `BSV_ASSIGNMENT_DELAY 2'd0;
	cache_rg_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	cache_rg_word_count <= `BSV_ASSIGNMENT_DELAY 3'd0;
      end
    else
      begin
        if (cache_pseudo_lru_0$EN)
	  cache_pseudo_lru_0 <= `BSV_ASSIGNMENT_DELAY cache_pseudo_lru_0$D_IN;
	if (cache_pseudo_lru_1$EN)
	  cache_pseudo_lru_1 <= `BSV_ASSIGNMENT_DELAY cache_pseudo_lru_1$D_IN;
	if (cache_pseudo_lru_10$EN)
	  cache_pseudo_lru_10 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_10$D_IN;
	if (cache_pseudo_lru_11$EN)
	  cache_pseudo_lru_11 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_11$D_IN;
	if (cache_pseudo_lru_12$EN)
	  cache_pseudo_lru_12 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_12$D_IN;
	if (cache_pseudo_lru_13$EN)
	  cache_pseudo_lru_13 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_13$D_IN;
	if (cache_pseudo_lru_14$EN)
	  cache_pseudo_lru_14 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_14$D_IN;
	if (cache_pseudo_lru_15$EN)
	  cache_pseudo_lru_15 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_15$D_IN;
	if (cache_pseudo_lru_16$EN)
	  cache_pseudo_lru_16 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_16$D_IN;
	if (cache_pseudo_lru_17$EN)
	  cache_pseudo_lru_17 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_17$D_IN;
	if (cache_pseudo_lru_18$EN)
	  cache_pseudo_lru_18 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_18$D_IN;
	if (cache_pseudo_lru_19$EN)
	  cache_pseudo_lru_19 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_19$D_IN;
	if (cache_pseudo_lru_2$EN)
	  cache_pseudo_lru_2 <= `BSV_ASSIGNMENT_DELAY cache_pseudo_lru_2$D_IN;
	if (cache_pseudo_lru_20$EN)
	  cache_pseudo_lru_20 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_20$D_IN;
	if (cache_pseudo_lru_21$EN)
	  cache_pseudo_lru_21 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_21$D_IN;
	if (cache_pseudo_lru_22$EN)
	  cache_pseudo_lru_22 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_22$D_IN;
	if (cache_pseudo_lru_23$EN)
	  cache_pseudo_lru_23 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_23$D_IN;
	if (cache_pseudo_lru_24$EN)
	  cache_pseudo_lru_24 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_24$D_IN;
	if (cache_pseudo_lru_25$EN)
	  cache_pseudo_lru_25 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_25$D_IN;
	if (cache_pseudo_lru_26$EN)
	  cache_pseudo_lru_26 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_26$D_IN;
	if (cache_pseudo_lru_27$EN)
	  cache_pseudo_lru_27 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_27$D_IN;
	if (cache_pseudo_lru_28$EN)
	  cache_pseudo_lru_28 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_28$D_IN;
	if (cache_pseudo_lru_29$EN)
	  cache_pseudo_lru_29 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_29$D_IN;
	if (cache_pseudo_lru_3$EN)
	  cache_pseudo_lru_3 <= `BSV_ASSIGNMENT_DELAY cache_pseudo_lru_3$D_IN;
	if (cache_pseudo_lru_30$EN)
	  cache_pseudo_lru_30 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_30$D_IN;
	if (cache_pseudo_lru_31$EN)
	  cache_pseudo_lru_31 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_31$D_IN;
	if (cache_pseudo_lru_32$EN)
	  cache_pseudo_lru_32 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_32$D_IN;
	if (cache_pseudo_lru_33$EN)
	  cache_pseudo_lru_33 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_33$D_IN;
	if (cache_pseudo_lru_34$EN)
	  cache_pseudo_lru_34 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_34$D_IN;
	if (cache_pseudo_lru_35$EN)
	  cache_pseudo_lru_35 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_35$D_IN;
	if (cache_pseudo_lru_36$EN)
	  cache_pseudo_lru_36 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_36$D_IN;
	if (cache_pseudo_lru_37$EN)
	  cache_pseudo_lru_37 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_37$D_IN;
	if (cache_pseudo_lru_38$EN)
	  cache_pseudo_lru_38 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_38$D_IN;
	if (cache_pseudo_lru_39$EN)
	  cache_pseudo_lru_39 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_39$D_IN;
	if (cache_pseudo_lru_4$EN)
	  cache_pseudo_lru_4 <= `BSV_ASSIGNMENT_DELAY cache_pseudo_lru_4$D_IN;
	if (cache_pseudo_lru_40$EN)
	  cache_pseudo_lru_40 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_40$D_IN;
	if (cache_pseudo_lru_41$EN)
	  cache_pseudo_lru_41 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_41$D_IN;
	if (cache_pseudo_lru_42$EN)
	  cache_pseudo_lru_42 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_42$D_IN;
	if (cache_pseudo_lru_43$EN)
	  cache_pseudo_lru_43 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_43$D_IN;
	if (cache_pseudo_lru_44$EN)
	  cache_pseudo_lru_44 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_44$D_IN;
	if (cache_pseudo_lru_45$EN)
	  cache_pseudo_lru_45 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_45$D_IN;
	if (cache_pseudo_lru_46$EN)
	  cache_pseudo_lru_46 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_46$D_IN;
	if (cache_pseudo_lru_47$EN)
	  cache_pseudo_lru_47 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_47$D_IN;
	if (cache_pseudo_lru_48$EN)
	  cache_pseudo_lru_48 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_48$D_IN;
	if (cache_pseudo_lru_49$EN)
	  cache_pseudo_lru_49 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_49$D_IN;
	if (cache_pseudo_lru_5$EN)
	  cache_pseudo_lru_5 <= `BSV_ASSIGNMENT_DELAY cache_pseudo_lru_5$D_IN;
	if (cache_pseudo_lru_50$EN)
	  cache_pseudo_lru_50 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_50$D_IN;
	if (cache_pseudo_lru_51$EN)
	  cache_pseudo_lru_51 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_51$D_IN;
	if (cache_pseudo_lru_52$EN)
	  cache_pseudo_lru_52 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_52$D_IN;
	if (cache_pseudo_lru_53$EN)
	  cache_pseudo_lru_53 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_53$D_IN;
	if (cache_pseudo_lru_54$EN)
	  cache_pseudo_lru_54 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_54$D_IN;
	if (cache_pseudo_lru_55$EN)
	  cache_pseudo_lru_55 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_55$D_IN;
	if (cache_pseudo_lru_56$EN)
	  cache_pseudo_lru_56 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_56$D_IN;
	if (cache_pseudo_lru_57$EN)
	  cache_pseudo_lru_57 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_57$D_IN;
	if (cache_pseudo_lru_58$EN)
	  cache_pseudo_lru_58 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_58$D_IN;
	if (cache_pseudo_lru_59$EN)
	  cache_pseudo_lru_59 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_59$D_IN;
	if (cache_pseudo_lru_6$EN)
	  cache_pseudo_lru_6 <= `BSV_ASSIGNMENT_DELAY cache_pseudo_lru_6$D_IN;
	if (cache_pseudo_lru_60$EN)
	  cache_pseudo_lru_60 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_60$D_IN;
	if (cache_pseudo_lru_61$EN)
	  cache_pseudo_lru_61 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_61$D_IN;
	if (cache_pseudo_lru_62$EN)
	  cache_pseudo_lru_62 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_62$D_IN;
	if (cache_pseudo_lru_63$EN)
	  cache_pseudo_lru_63 <= `BSV_ASSIGNMENT_DELAY
	      cache_pseudo_lru_63$D_IN;
	if (cache_pseudo_lru_7$EN)
	  cache_pseudo_lru_7 <= `BSV_ASSIGNMENT_DELAY cache_pseudo_lru_7$D_IN;
	if (cache_pseudo_lru_8$EN)
	  cache_pseudo_lru_8 <= `BSV_ASSIGNMENT_DELAY cache_pseudo_lru_8$D_IN;
	if (cache_pseudo_lru_9$EN)
	  cache_pseudo_lru_9 <= `BSV_ASSIGNMENT_DELAY cache_pseudo_lru_9$D_IN;
	if (cache_rg_dirty_line_addr$EN)
	  cache_rg_dirty_line_addr <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_dirty_line_addr$D_IN;
	if (cache_rg_dirty_line_data$EN)
	  cache_rg_dirty_line_data <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_dirty_line_data$D_IN;
	if (cache_rg_dirty_line_write_back$EN)
	  cache_rg_dirty_line_write_back <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_dirty_line_write_back$D_IN;
	if (cache_rg_enable$EN)
	  cache_rg_enable <= `BSV_ASSIGNMENT_DELAY cache_rg_enable$D_IN;
	if (cache_rg_index$EN)
	  cache_rg_index <= `BSV_ASSIGNMENT_DELAY cache_rg_index$D_IN;
	if (cache_rg_initialize$EN)
	  cache_rg_initialize <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_initialize$D_IN;
	if (cache_rg_line_write_stall$EN)
	  cache_rg_line_write_stall <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_line_write_stall$D_IN;
	if (cache_rg_offset$EN)
	  cache_rg_offset <= `BSV_ASSIGNMENT_DELAY cache_rg_offset$D_IN;
	if (cache_rg_replace_block$EN)
	  cache_rg_replace_block <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_replace_block$D_IN;
	if (cache_rg_state$EN)
	  cache_rg_state <= `BSV_ASSIGNMENT_DELAY cache_rg_state$D_IN;
	if (cache_rg_word_count$EN)
	  cache_rg_word_count <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_word_count$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cache_pseudo_lru_0 = 3'h2;
    cache_pseudo_lru_1 = 3'h2;
    cache_pseudo_lru_10 = 3'h2;
    cache_pseudo_lru_11 = 3'h2;
    cache_pseudo_lru_12 = 3'h2;
    cache_pseudo_lru_13 = 3'h2;
    cache_pseudo_lru_14 = 3'h2;
    cache_pseudo_lru_15 = 3'h2;
    cache_pseudo_lru_16 = 3'h2;
    cache_pseudo_lru_17 = 3'h2;
    cache_pseudo_lru_18 = 3'h2;
    cache_pseudo_lru_19 = 3'h2;
    cache_pseudo_lru_2 = 3'h2;
    cache_pseudo_lru_20 = 3'h2;
    cache_pseudo_lru_21 = 3'h2;
    cache_pseudo_lru_22 = 3'h2;
    cache_pseudo_lru_23 = 3'h2;
    cache_pseudo_lru_24 = 3'h2;
    cache_pseudo_lru_25 = 3'h2;
    cache_pseudo_lru_26 = 3'h2;
    cache_pseudo_lru_27 = 3'h2;
    cache_pseudo_lru_28 = 3'h2;
    cache_pseudo_lru_29 = 3'h2;
    cache_pseudo_lru_3 = 3'h2;
    cache_pseudo_lru_30 = 3'h2;
    cache_pseudo_lru_31 = 3'h2;
    cache_pseudo_lru_32 = 3'h2;
    cache_pseudo_lru_33 = 3'h2;
    cache_pseudo_lru_34 = 3'h2;
    cache_pseudo_lru_35 = 3'h2;
    cache_pseudo_lru_36 = 3'h2;
    cache_pseudo_lru_37 = 3'h2;
    cache_pseudo_lru_38 = 3'h2;
    cache_pseudo_lru_39 = 3'h2;
    cache_pseudo_lru_4 = 3'h2;
    cache_pseudo_lru_40 = 3'h2;
    cache_pseudo_lru_41 = 3'h2;
    cache_pseudo_lru_42 = 3'h2;
    cache_pseudo_lru_43 = 3'h2;
    cache_pseudo_lru_44 = 3'h2;
    cache_pseudo_lru_45 = 3'h2;
    cache_pseudo_lru_46 = 3'h2;
    cache_pseudo_lru_47 = 3'h2;
    cache_pseudo_lru_48 = 3'h2;
    cache_pseudo_lru_49 = 3'h2;
    cache_pseudo_lru_5 = 3'h2;
    cache_pseudo_lru_50 = 3'h2;
    cache_pseudo_lru_51 = 3'h2;
    cache_pseudo_lru_52 = 3'h2;
    cache_pseudo_lru_53 = 3'h2;
    cache_pseudo_lru_54 = 3'h2;
    cache_pseudo_lru_55 = 3'h2;
    cache_pseudo_lru_56 = 3'h2;
    cache_pseudo_lru_57 = 3'h2;
    cache_pseudo_lru_58 = 3'h2;
    cache_pseudo_lru_59 = 3'h2;
    cache_pseudo_lru_6 = 3'h2;
    cache_pseudo_lru_60 = 3'h2;
    cache_pseudo_lru_61 = 3'h2;
    cache_pseudo_lru_62 = 3'h2;
    cache_pseudo_lru_63 = 3'h2;
    cache_pseudo_lru_7 = 3'h2;
    cache_pseudo_lru_8 = 3'h2;
    cache_pseudo_lru_9 = 3'h2;
    cache_rg_dirty_line_addr = 32'hAAAAAAAA;
    cache_rg_dirty_line_data =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    cache_rg_dirty_line_write_back = 1'h0;
    cache_rg_enable = 1'h0;
    cache_rg_index = 7'h2A;
    cache_rg_initialize = 1'h0;
    cache_rg_line_write_stall = 1'h0;
    cache_rg_offset = 3'h2;
    cache_rg_replace_block = 2'h2;
    cache_rg_state = 2'h2;
    cache_rg_word_count = 3'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_read_from_bram &&
	  (cache_ff_request_from_cpu$D_OUT[1:0] == 2'b10 &&
	   cache_ff_request_from_cpu$D_OUT[37:36] != 2'd0 ||
	   cache_ff_request_from_cpu$D_OUT[1:0] == 2'b01 &&
	   cache_ff_request_from_cpu$D_OUT[36]))
	begin
	  v__h12082 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_read_from_bram &&
	  (cache_ff_request_from_cpu$D_OUT[1:0] == 2'b10 &&
	   cache_ff_request_from_cpu$D_OUT[37:36] != 2'd0 ||
	   cache_ff_request_from_cpu$D_OUT[1:0] == 2'b01 &&
	   cache_ff_request_from_cpu$D_OUT[36]))
	$display(v__h12082,
		 "\t",
		 "DCACHE",
		 "\t Misaligned Error due to Address: %h",
		 cache_ff_request_from_cpu$D_OUT[67:36]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_read_from_bram &&
	  NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d175)
	begin
	  v__h12824 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_read_from_bram &&
	  NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d175)
	$display(v__h12824,
		 "\t",
		 "DCACHE",
		 "\tLoad Hit for address : %h Line: %h",
		 cache_ff_request_from_cpu$D_OUT[67:36],
		 $signed(IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_read_from_bram &&
	  NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179)
	begin
	  v__h15920 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_read_from_bram &&
	  NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179)
	$display(v__h15920,
		 "\t",
		 "DCACHE",
		 "\t Store Hit for address : %h Line: %h",
		 cache_ff_request_from_cpu$D_OUT[67:36],
		 $signed(IF_cache_valid_3_a_read__5_AND_cache_tag_3_a_r_ETC___d117));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_read_from_bram &&
	  NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179)
	begin
	  v__h15998 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_read_from_bram &&
	  NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d179)
	$display(v__h15998,
		 "\t",
		 "DCACHE",
		 "\t Changed word : %h to word: %h",
		 accessed_word1__h15951,
		 accessed_word__h15952);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_read_from_bram &&
	  NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d231)
	begin
	  v__h18628 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_read_from_bram &&
	  NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d231)
	$display(v__h18628,
		 "\t",
		 "DCACHE",
		 "\tMiss for address : %h",
		 cache_ff_request_from_cpu$D_OUT[67:36]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_read_from_bram &&
	  NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d231)
	begin
	  v__h19170 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_read_from_bram &&
	  NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d231)
	$display(v__h19170,
		 "\t",
		 "DCACHE",
		 "\t Replacing line: %d of address: %h",
		 $signed(IF_cache_valid_0_a_read__8_AND_cache_valid_1_a_ETC___d324),
		 old_address__h19157);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_read_from_bram &&
	  NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d337)
	begin
	  v__h19388 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_read_from_bram &&
	  NOT_cache_ff_request_from_cpu_first__3_BITS_1__ETC___d337)
	$display(v__h19388,
		 "\t line : %d is dirty",
		 $signed(IF_cache_valid_0_a_read__8_AND_cache_valid_1_a_ETC___d324));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_read_from_bram)
	begin
	  v__h21110 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_read_from_bram)
	$display(v__h21110,
		 "\t",
		 "DCACHE",
		 "\tChanged PLRU for set : %d with bits :%b",
		 cache_ff_request_from_cpu$D_OUT[46:41],
		 lru_bits___1__h19789);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_empty_response_from_memory_after_dirty_line_write)
	begin
	  v__h21149 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_empty_response_from_memory_after_dirty_line_write)
	$display(v__h21149, "\t", "DCACHE", "\tEmptying the response FIFO");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_got_response_from_memory)
	begin
	  v__h21431 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_got_response_from_memory)
	$display(v__h21431,
		 "\t",
		 "DCACHE",
		 "\tRecieved response from the memory. Address: :%h Tag : %h Data: %h ",
		 cache_ff_response_from_memory$D_OUT[31:0],
		 cache_ff_response_from_memory$D_OUT[31:5],
		 cache_ff_response_from_memory$D_OUT[65:34]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_got_response_from_memory && cache_rg_enable &&
	  cache_ff_response_from_memory_first__17_BITS_4_ETC___d523)
	begin
	  v__h21572 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_got_response_from_memory && cache_rg_enable &&
	  cache_ff_response_from_memory_first__17_BITS_4_ETC___d523)
	$display(v__h21572,
		 "\t",
		 "DCACHE",
		 "\tRg_word: %d Address Word: %d",
		 cache_rg_word_count,
		 cache_ff_request_from_cpu$D_OUT[39:38]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_got_response_from_memory && cache_rg_enable &&
	  cache_rg_offset_22_EQ_cache_ff_response_from_m_ETC___d533 &&
	  cache_ff_request_from_cpu$D_OUT[35:34] == 2'd1)
	begin
	  v__h21783 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_got_response_from_memory && cache_rg_enable &&
	  cache_rg_offset_22_EQ_cache_ff_response_from_m_ETC___d533 &&
	  cache_ff_request_from_cpu$D_OUT[35:34] == 2'd1)
	$display(v__h21783, "\tupdating word for store");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_got_response_from_memory && cache_rg_enable)
	begin
	  v__h22291 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_got_response_from_memory && cache_rg_enable)
	$display(v__h22291, "\tUpdated word is :%h", v__h21720);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_got_response_from_memory && cache_rg_enable &&
	  cache_rg_word_count == 3'd7)
	begin
	  v__h23716 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_got_response_from_memory && cache_rg_enable &&
	  cache_rg_word_count == 3'd7)
	$display(v__h23716,
		 "\t",
		 "DCACHE",
		 "\tWriting Word :%h in cache",
		 v__h21720);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_got_response_from_memory && cache_rg_enable &&
	  cache_rg_word_count == 3'd7 &&
	  cache_rg_dirty_line_write_back)
	begin
	  v__h24589 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_got_response_from_memory && cache_rg_enable &&
	  cache_rg_word_count == 3'd7 &&
	  cache_rg_dirty_line_write_back)
	$display(v__h24589,
		 "\t",
		 "DCACHE",
		 "\t Sending Write request to Memory for dirty line Addr: %h Data: %h",
		 cache_rg_dirty_line_addr,
		 cache_rg_dirty_line_data);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_request_from_cpu)
	begin
	  v__h28379 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_request_from_cpu)
	$write("\n",
	       v__h28379,
	       "\t",
	       "DCACHE",
	       "\tBRAM: recieved request for Address :%h Data: %h tag %h: Set : %d Offset :%h ",
	       request_from_cpu_req[67:36],
	       request_from_cpu_req[33:2],
	       request_from_cpu_req[67:47],
	       request_from_cpu_req[46:41],
	       request_from_cpu_req[40:36]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_request_from_cpu && request_from_cpu_req[35:34] == 2'd0)
	$write("Load");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_request_from_cpu && request_from_cpu_req[35:34] == 2'd1)
	$write("Store");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_request_from_cpu && request_from_cpu_req[35:34] != 2'd0 &&
	  request_from_cpu_req[35:34] != 2'd1)
	$write("Atomic");
    if (RST_N != `BSV_RESET_VALUE) if (EN_request_from_cpu) $write("\n");
  end
  // synopsys translate_on
endmodule  // mkdcache

