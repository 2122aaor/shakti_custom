//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// On Tue Sep 29 16:30:48 IST 2015
//
//
// Ports:
// Name                         I/O  size props
// RDY_update_frq_1               O     1 const
// RDY_update_frq_2               O     1 const
// RDY_update_tail                O     1 const
// RDY_update_head                O     1 const
// RDY_get_rob_head               O     1 const
// RDY_reset_head                 O     1 const
// RDY_reset_tail                 O     1 const
// RDY_reset_entries_of_FRQ       O     1 const
// to_map_get                     O    16
// RDY_to_map_get                 O     1 const
// if_frq_empty                   O     1
// RDY_if_frq_empty               O     1 const
// return_whole_frq               O   128 reg
// RDY_return_whole_frq           O     1 const
// return_frq_head                O     4 reg
// RDY_return_frq_head            O     1 const
// return_frq_tail                O     4 reg
// RDY_return_frq_tail            O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// update_frq_1_entry             I     8
// update_frq_2_entry             I     8
// update_tail_tail               I     2
// update_head_head               I     2
// get_rob_head_rob_head          I     4
// EN_update_frq_1                I     1
// EN_update_frq_2                I     1
// EN_update_tail                 I     1
// EN_update_head                 I     1
// EN_get_rob_head                I     1
// EN_reset_head                  I     1
// EN_reset_tail                  I     1
// EN_reset_entries_of_FRQ        I     1
// EN_to_map_get                  I     1 unused
//
// Combinational paths from inputs to outputs:
//   (get_rob_head_rob_head, EN_get_rob_head) -> if_frq_empty
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkPrf_frq(CLK,
		 RST_N,

		 update_frq_1_entry,
		 EN_update_frq_1,
		 RDY_update_frq_1,

		 update_frq_2_entry,
		 EN_update_frq_2,
		 RDY_update_frq_2,

		 update_tail_tail,
		 EN_update_tail,
		 RDY_update_tail,

		 update_head_head,
		 EN_update_head,
		 RDY_update_head,

		 get_rob_head_rob_head,
		 EN_get_rob_head,
		 RDY_get_rob_head,

		 EN_reset_head,
		 RDY_reset_head,

		 EN_reset_tail,
		 RDY_reset_tail,

		 EN_reset_entries_of_FRQ,
		 RDY_reset_entries_of_FRQ,

		 EN_to_map_get,
		 to_map_get,
		 RDY_to_map_get,

		 if_frq_empty,
		 RDY_if_frq_empty,

		 return_whole_frq,
		 RDY_return_whole_frq,

		 return_frq_head,
		 RDY_return_frq_head,

		 return_frq_tail,
		 RDY_return_frq_tail);
  input  CLK;
  input  RST_N;

  // action method update_frq_1
  input  [7 : 0] update_frq_1_entry;
  input  EN_update_frq_1;
  output RDY_update_frq_1;

  // action method update_frq_2
  input  [7 : 0] update_frq_2_entry;
  input  EN_update_frq_2;
  output RDY_update_frq_2;

  // action method update_tail
  input  [1 : 0] update_tail_tail;
  input  EN_update_tail;
  output RDY_update_tail;

  // action method update_head
  input  [1 : 0] update_head_head;
  input  EN_update_head;
  output RDY_update_head;

  // action method get_rob_head
  input  [3 : 0] get_rob_head_rob_head;
  input  EN_get_rob_head;
  output RDY_get_rob_head;

  // action method reset_head
  input  EN_reset_head;
  output RDY_reset_head;

  // action method reset_tail
  input  EN_reset_tail;
  output RDY_reset_tail;

  // action method reset_entries_of_FRQ
  input  EN_reset_entries_of_FRQ;
  output RDY_reset_entries_of_FRQ;

  // actionvalue method to_map_get
  input  EN_to_map_get;
  output [15 : 0] to_map_get;
  output RDY_to_map_get;

  // value method if_frq_empty
  output if_frq_empty;
  output RDY_if_frq_empty;

  // value method return_whole_frq
  output [127 : 0] return_whole_frq;
  output RDY_return_whole_frq;

  // value method return_frq_head
  output [3 : 0] return_frq_head;
  output RDY_return_frq_head;

  // value method return_frq_tail
  output [3 : 0] return_frq_tail;
  output RDY_return_frq_tail;

  // signals for module outputs
  wire [127 : 0] return_whole_frq;
  wire [15 : 0] to_map_get;
  wire [3 : 0] return_frq_head, return_frq_tail;
  wire RDY_get_rob_head,
       RDY_if_frq_empty,
       RDY_reset_entries_of_FRQ,
       RDY_reset_head,
       RDY_reset_tail,
       RDY_return_frq_head,
       RDY_return_frq_tail,
       RDY_return_whole_frq,
       RDY_to_map_get,
       RDY_update_frq_1,
       RDY_update_frq_2,
       RDY_update_head,
       RDY_update_tail,
       if_frq_empty;

  // register frq_0
  reg [7 : 0] frq_0;
  reg [7 : 0] frq_0$D_IN;
  wire frq_0$EN;

  // register frq_1
  reg [7 : 0] frq_1;
  reg [7 : 0] frq_1$D_IN;
  wire frq_1$EN;

  // register frq_10
  reg [7 : 0] frq_10;
  reg [7 : 0] frq_10$D_IN;
  wire frq_10$EN;

  // register frq_11
  reg [7 : 0] frq_11;
  reg [7 : 0] frq_11$D_IN;
  wire frq_11$EN;

  // register frq_12
  reg [7 : 0] frq_12;
  reg [7 : 0] frq_12$D_IN;
  wire frq_12$EN;

  // register frq_13
  reg [7 : 0] frq_13;
  reg [7 : 0] frq_13$D_IN;
  wire frq_13$EN;

  // register frq_14
  reg [7 : 0] frq_14;
  reg [7 : 0] frq_14$D_IN;
  wire frq_14$EN;

  // register frq_15
  reg [7 : 0] frq_15;
  reg [7 : 0] frq_15$D_IN;
  wire frq_15$EN;

  // register frq_2
  reg [7 : 0] frq_2;
  reg [7 : 0] frq_2$D_IN;
  wire frq_2$EN;

  // register frq_3
  reg [7 : 0] frq_3;
  reg [7 : 0] frq_3$D_IN;
  wire frq_3$EN;

  // register frq_4
  reg [7 : 0] frq_4;
  reg [7 : 0] frq_4$D_IN;
  wire frq_4$EN;

  // register frq_5
  reg [7 : 0] frq_5;
  reg [7 : 0] frq_5$D_IN;
  wire frq_5$EN;

  // register frq_6
  reg [7 : 0] frq_6;
  reg [7 : 0] frq_6$D_IN;
  wire frq_6$EN;

  // register frq_7
  reg [7 : 0] frq_7;
  reg [7 : 0] frq_7$D_IN;
  wire frq_7$EN;

  // register frq_8
  reg [7 : 0] frq_8;
  reg [7 : 0] frq_8$D_IN;
  wire frq_8$EN;

  // register frq_9
  reg [7 : 0] frq_9;
  reg [7 : 0] frq_9$D_IN;
  wire frq_9$EN;

  // register rg_frq_head
  reg [3 : 0] rg_frq_head;
  wire [3 : 0] rg_frq_head$D_IN;
  wire rg_frq_head$EN;

  // register rg_frq_tail
  reg [3 : 0] rg_frq_tail;
  wire [3 : 0] rg_frq_tail$D_IN;
  wire rg_frq_tail$EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_check_frq_empty,
       CAN_FIRE_get_rob_head,
       CAN_FIRE_reset_entries_of_FRQ,
       CAN_FIRE_reset_head,
       CAN_FIRE_reset_tail,
       CAN_FIRE_to_map_get,
       CAN_FIRE_update_frq_1,
       CAN_FIRE_update_frq_2,
       CAN_FIRE_update_head,
       CAN_FIRE_update_tail,
       WILL_FIRE_RL_rl_check_frq_empty,
       WILL_FIRE_get_rob_head,
       WILL_FIRE_reset_entries_of_FRQ,
       WILL_FIRE_reset_head,
       WILL_FIRE_reset_tail,
       WILL_FIRE_to_map_get,
       WILL_FIRE_update_frq_1,
       WILL_FIRE_update_frq_2,
       WILL_FIRE_update_head,
       WILL_FIRE_update_tail;

  // inputs to muxes for submodule ports
  wire [7 : 0] MUX_frq_0$write_1__VAL_1,
	       MUX_frq_1$write_1__VAL_1,
	       MUX_frq_10$write_1__VAL_1,
	       MUX_frq_11$write_1__VAL_1,
	       MUX_frq_12$write_1__VAL_1,
	       MUX_frq_13$write_1__VAL_1,
	       MUX_frq_14$write_1__VAL_1,
	       MUX_frq_15$write_1__VAL_1,
	       MUX_frq_2$write_1__VAL_1,
	       MUX_frq_3$write_1__VAL_1,
	       MUX_frq_4$write_1__VAL_1,
	       MUX_frq_5$write_1__VAL_1,
	       MUX_frq_6$write_1__VAL_1,
	       MUX_frq_7$write_1__VAL_1,
	       MUX_frq_8$write_1__VAL_1,
	       MUX_frq_9$write_1__VAL_1;
  wire [3 : 0] MUX_rg_frq_head$write_1__VAL_2, MUX_rg_frq_tail$write_1__VAL_2;
  wire MUX_frq_0$write_1__SEL_2,
       MUX_frq_0$write_1__SEL_3,
       MUX_frq_1$write_1__SEL_2,
       MUX_frq_1$write_1__SEL_3,
       MUX_frq_10$write_1__SEL_2,
       MUX_frq_10$write_1__SEL_3,
       MUX_frq_11$write_1__SEL_2,
       MUX_frq_11$write_1__SEL_3,
       MUX_frq_12$write_1__SEL_2,
       MUX_frq_12$write_1__SEL_3,
       MUX_frq_13$write_1__SEL_2,
       MUX_frq_13$write_1__SEL_3,
       MUX_frq_14$write_1__SEL_2,
       MUX_frq_14$write_1__SEL_3,
       MUX_frq_15$write_1__SEL_2,
       MUX_frq_15$write_1__SEL_3,
       MUX_frq_2$write_1__SEL_2,
       MUX_frq_2$write_1__SEL_3,
       MUX_frq_3$write_1__SEL_2,
       MUX_frq_3$write_1__SEL_3,
       MUX_frq_4$write_1__SEL_2,
       MUX_frq_4$write_1__SEL_3,
       MUX_frq_5$write_1__SEL_2,
       MUX_frq_5$write_1__SEL_3,
       MUX_frq_6$write_1__SEL_2,
       MUX_frq_6$write_1__SEL_3,
       MUX_frq_7$write_1__SEL_2,
       MUX_frq_7$write_1__SEL_3,
       MUX_frq_8$write_1__SEL_2,
       MUX_frq_8$write_1__SEL_3,
       MUX_frq_9$write_1__SEL_2,
       MUX_frq_9$write_1__SEL_3;

  // remaining internal signals
  reg [63 : 0] v__h1795;
  reg [6 : 0] SEL_ARR_frq_0_read_BITS_7_TO_1_18_frq_1_read_B_ETC___d151,
	      SEL_ARR_frq_0_read_BITS_7_TO_1_18_frq_1_read_B_ETC___d153;
  reg SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d152,
      SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d154,
      SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d40;
  wire [3 : 0] x__h1601, x__h1747, x__h2010;
  wire rg_frq_head_read_EQ_rg_frq_tail_read_AND_NOT_S_ETC___d45;

  // action method update_frq_1
  assign RDY_update_frq_1 = 1'd1 ;
  assign CAN_FIRE_update_frq_1 = 1'd1 ;
  assign WILL_FIRE_update_frq_1 = EN_update_frq_1 ;

  // action method update_frq_2
  assign RDY_update_frq_2 = 1'd1 ;
  assign CAN_FIRE_update_frq_2 = 1'd1 ;
  assign WILL_FIRE_update_frq_2 = EN_update_frq_2 ;

  // action method update_tail
  assign RDY_update_tail = 1'd1 ;
  assign CAN_FIRE_update_tail = 1'd1 ;
  assign WILL_FIRE_update_tail = EN_update_tail ;

  // action method update_head
  assign RDY_update_head = 1'd1 ;
  assign CAN_FIRE_update_head = 1'd1 ;
  assign WILL_FIRE_update_head = EN_update_head ;

  // action method get_rob_head
  assign RDY_get_rob_head = 1'd1 ;
  assign CAN_FIRE_get_rob_head = 1'd1 ;
  assign WILL_FIRE_get_rob_head = EN_get_rob_head ;

  // action method reset_head
  assign RDY_reset_head = 1'd1 ;
  assign CAN_FIRE_reset_head = 1'd1 ;
  assign WILL_FIRE_reset_head = EN_reset_head ;

  // action method reset_tail
  assign RDY_reset_tail = 1'd1 ;
  assign CAN_FIRE_reset_tail = 1'd1 ;
  assign WILL_FIRE_reset_tail = EN_reset_tail ;

  // action method reset_entries_of_FRQ
  assign RDY_reset_entries_of_FRQ = 1'd1 ;
  assign CAN_FIRE_reset_entries_of_FRQ = 1'd1 ;
  assign WILL_FIRE_reset_entries_of_FRQ = EN_reset_entries_of_FRQ ;

  // actionvalue method to_map_get
  assign to_map_get =
	     { SEL_ARR_frq_0_read_BITS_7_TO_1_18_frq_1_read_B_ETC___d151,
	       SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d152,
	       SEL_ARR_frq_0_read_BITS_7_TO_1_18_frq_1_read_B_ETC___d153,
	       SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d154 } ;
  assign RDY_to_map_get = 1'd1 ;
  assign CAN_FIRE_to_map_get = 1'd1 ;
  assign WILL_FIRE_to_map_get = EN_to_map_get ;

  // value method if_frq_empty
  assign if_frq_empty =
	     rg_frq_head_read_EQ_rg_frq_tail_read_AND_NOT_S_ETC___d45 ;
  assign RDY_if_frq_empty = 1'd1 ;

  // value method return_whole_frq
  assign return_whole_frq =
	     { frq_15,
	       frq_14,
	       frq_13,
	       frq_12,
	       frq_11,
	       frq_10,
	       frq_9,
	       frq_8,
	       frq_7,
	       frq_6,
	       frq_5,
	       frq_4,
	       frq_3,
	       frq_2,
	       frq_1,
	       frq_0 } ;
  assign RDY_return_whole_frq = 1'd1 ;

  // value method return_frq_head
  assign return_frq_head = rg_frq_head ;
  assign RDY_return_frq_head = 1'd1 ;

  // value method return_frq_tail
  assign return_frq_tail = rg_frq_tail ;
  assign RDY_return_frq_tail = 1'd1 ;

  // rule RL_rl_check_frq_empty
  assign CAN_FIRE_RL_rl_check_frq_empty = 1'd1 ;
  assign WILL_FIRE_RL_rl_check_frq_empty = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_frq_0$write_1__SEL_2 =
	     EN_update_frq_2 && x__h2010 == 4'd0 && update_frq_2_entry[0] ;
  assign MUX_frq_0$write_1__SEL_3 =
	     EN_update_frq_1 && rg_frq_tail == 4'd0 && update_frq_1_entry[0] ;
  assign MUX_frq_1$write_1__SEL_2 =
	     EN_update_frq_2 && x__h2010 == 4'd1 && update_frq_2_entry[0] ;
  assign MUX_frq_1$write_1__SEL_3 =
	     EN_update_frq_1 && rg_frq_tail == 4'd1 && update_frq_1_entry[0] ;
  assign MUX_frq_10$write_1__SEL_2 =
	     EN_update_frq_2 && x__h2010 == 4'd10 && update_frq_2_entry[0] ;
  assign MUX_frq_10$write_1__SEL_3 =
	     EN_update_frq_1 && rg_frq_tail == 4'd10 &&
	     update_frq_1_entry[0] ;
  assign MUX_frq_11$write_1__SEL_2 =
	     EN_update_frq_2 && x__h2010 == 4'd11 && update_frq_2_entry[0] ;
  assign MUX_frq_11$write_1__SEL_3 =
	     EN_update_frq_1 && rg_frq_tail == 4'd11 &&
	     update_frq_1_entry[0] ;
  assign MUX_frq_12$write_1__SEL_2 =
	     EN_update_frq_2 && x__h2010 == 4'd12 && update_frq_2_entry[0] ;
  assign MUX_frq_12$write_1__SEL_3 =
	     EN_update_frq_1 && rg_frq_tail == 4'd12 &&
	     update_frq_1_entry[0] ;
  assign MUX_frq_13$write_1__SEL_2 =
	     EN_update_frq_2 && x__h2010 == 4'd13 && update_frq_2_entry[0] ;
  assign MUX_frq_13$write_1__SEL_3 =
	     EN_update_frq_1 && rg_frq_tail == 4'd13 &&
	     update_frq_1_entry[0] ;
  assign MUX_frq_14$write_1__SEL_2 =
	     EN_update_frq_2 && x__h2010 == 4'd14 && update_frq_2_entry[0] ;
  assign MUX_frq_14$write_1__SEL_3 =
	     EN_update_frq_1 && rg_frq_tail == 4'd14 &&
	     update_frq_1_entry[0] ;
  assign MUX_frq_15$write_1__SEL_2 =
	     EN_update_frq_2 && x__h2010 == 4'd15 && update_frq_2_entry[0] ;
  assign MUX_frq_15$write_1__SEL_3 =
	     EN_update_frq_1 && rg_frq_tail == 4'd15 &&
	     update_frq_1_entry[0] ;
  assign MUX_frq_2$write_1__SEL_2 =
	     EN_update_frq_2 && x__h2010 == 4'd2 && update_frq_2_entry[0] ;
  assign MUX_frq_2$write_1__SEL_3 =
	     EN_update_frq_1 && rg_frq_tail == 4'd2 && update_frq_1_entry[0] ;
  assign MUX_frq_3$write_1__SEL_2 =
	     EN_update_frq_2 && x__h2010 == 4'd3 && update_frq_2_entry[0] ;
  assign MUX_frq_3$write_1__SEL_3 =
	     EN_update_frq_1 && rg_frq_tail == 4'd3 && update_frq_1_entry[0] ;
  assign MUX_frq_4$write_1__SEL_2 =
	     EN_update_frq_2 && x__h2010 == 4'd4 && update_frq_2_entry[0] ;
  assign MUX_frq_4$write_1__SEL_3 =
	     EN_update_frq_1 && rg_frq_tail == 4'd4 && update_frq_1_entry[0] ;
  assign MUX_frq_5$write_1__SEL_2 =
	     EN_update_frq_2 && x__h2010 == 4'd5 && update_frq_2_entry[0] ;
  assign MUX_frq_5$write_1__SEL_3 =
	     EN_update_frq_1 && rg_frq_tail == 4'd5 && update_frq_1_entry[0] ;
  assign MUX_frq_6$write_1__SEL_2 =
	     EN_update_frq_2 && x__h2010 == 4'd6 && update_frq_2_entry[0] ;
  assign MUX_frq_6$write_1__SEL_3 =
	     EN_update_frq_1 && rg_frq_tail == 4'd6 && update_frq_1_entry[0] ;
  assign MUX_frq_7$write_1__SEL_2 =
	     EN_update_frq_2 && x__h2010 == 4'd7 && update_frq_2_entry[0] ;
  assign MUX_frq_7$write_1__SEL_3 =
	     EN_update_frq_1 && rg_frq_tail == 4'd7 && update_frq_1_entry[0] ;
  assign MUX_frq_8$write_1__SEL_2 =
	     EN_update_frq_2 && x__h2010 == 4'd8 && update_frq_2_entry[0] ;
  assign MUX_frq_8$write_1__SEL_3 =
	     EN_update_frq_1 && rg_frq_tail == 4'd8 && update_frq_1_entry[0] ;
  assign MUX_frq_9$write_1__SEL_2 =
	     EN_update_frq_2 && x__h2010 == 4'd9 && update_frq_2_entry[0] ;
  assign MUX_frq_9$write_1__SEL_3 =
	     EN_update_frq_1 && rg_frq_tail == 4'd9 && update_frq_1_entry[0] ;
  assign MUX_frq_0$write_1__VAL_1 = { frq_0[7:1], 1'd1 } ;
  assign MUX_frq_1$write_1__VAL_1 = { frq_1[7:1], 1'd1 } ;
  assign MUX_frq_10$write_1__VAL_1 = { frq_10[7:1], 1'd1 } ;
  assign MUX_frq_11$write_1__VAL_1 = { frq_11[7:1], 1'd1 } ;
  assign MUX_frq_12$write_1__VAL_1 = { frq_12[7:1], 1'd1 } ;
  assign MUX_frq_13$write_1__VAL_1 = { frq_13[7:1], 1'd1 } ;
  assign MUX_frq_14$write_1__VAL_1 = { frq_14[7:1], 1'd1 } ;
  assign MUX_frq_15$write_1__VAL_1 = { frq_15[7:1], 1'd1 } ;
  assign MUX_frq_2$write_1__VAL_1 = { frq_2[7:1], 1'd1 } ;
  assign MUX_frq_3$write_1__VAL_1 = { frq_3[7:1], 1'd1 } ;
  assign MUX_frq_4$write_1__VAL_1 = { frq_4[7:1], 1'd1 } ;
  assign MUX_frq_5$write_1__VAL_1 = { frq_5[7:1], 1'd1 } ;
  assign MUX_frq_6$write_1__VAL_1 = { frq_6[7:1], 1'd1 } ;
  assign MUX_frq_7$write_1__VAL_1 = { frq_7[7:1], 1'd1 } ;
  assign MUX_frq_8$write_1__VAL_1 = { frq_8[7:1], 1'd1 } ;
  assign MUX_frq_9$write_1__VAL_1 = { frq_9[7:1], 1'd1 } ;
  assign MUX_rg_frq_head$write_1__VAL_2 =
	     rg_frq_head + { 2'd0, update_head_head } ;
  assign MUX_rg_frq_tail$write_1__VAL_2 =
	     rg_frq_tail + { 2'd0, update_tail_tail } ;

  // register frq_0
  always@(EN_reset_entries_of_FRQ or
	  MUX_frq_0$write_1__VAL_1 or
	  MUX_frq_0$write_1__SEL_2 or
	  update_frq_2_entry or
	  MUX_frq_0$write_1__SEL_3 or update_frq_1_entry)
  case (1'b1)
    EN_reset_entries_of_FRQ: frq_0$D_IN = MUX_frq_0$write_1__VAL_1;
    MUX_frq_0$write_1__SEL_2: frq_0$D_IN = update_frq_2_entry;
    MUX_frq_0$write_1__SEL_3: frq_0$D_IN = update_frq_1_entry;
    default: frq_0$D_IN = 8'b10101010 /* unspecified value */ ;
  endcase
  assign frq_0$EN =
	     EN_update_frq_1 && rg_frq_tail == 4'd0 &&
	     update_frq_1_entry[0] ||
	     EN_update_frq_2 && x__h2010 == 4'd0 && update_frq_2_entry[0] ||
	     EN_reset_entries_of_FRQ ;

  // register frq_1
  always@(EN_reset_entries_of_FRQ or
	  MUX_frq_1$write_1__VAL_1 or
	  MUX_frq_1$write_1__SEL_2 or
	  update_frq_2_entry or
	  MUX_frq_1$write_1__SEL_3 or update_frq_1_entry)
  case (1'b1)
    EN_reset_entries_of_FRQ: frq_1$D_IN = MUX_frq_1$write_1__VAL_1;
    MUX_frq_1$write_1__SEL_2: frq_1$D_IN = update_frq_2_entry;
    MUX_frq_1$write_1__SEL_3: frq_1$D_IN = update_frq_1_entry;
    default: frq_1$D_IN = 8'b10101010 /* unspecified value */ ;
  endcase
  assign frq_1$EN =
	     EN_update_frq_1 && rg_frq_tail == 4'd1 &&
	     update_frq_1_entry[0] ||
	     EN_update_frq_2 && x__h2010 == 4'd1 && update_frq_2_entry[0] ||
	     EN_reset_entries_of_FRQ ;

  // register frq_10
  always@(EN_reset_entries_of_FRQ or
	  MUX_frq_10$write_1__VAL_1 or
	  MUX_frq_10$write_1__SEL_2 or
	  update_frq_2_entry or
	  MUX_frq_10$write_1__SEL_3 or update_frq_1_entry)
  case (1'b1)
    EN_reset_entries_of_FRQ: frq_10$D_IN = MUX_frq_10$write_1__VAL_1;
    MUX_frq_10$write_1__SEL_2: frq_10$D_IN = update_frq_2_entry;
    MUX_frq_10$write_1__SEL_3: frq_10$D_IN = update_frq_1_entry;
    default: frq_10$D_IN = 8'b10101010 /* unspecified value */ ;
  endcase
  assign frq_10$EN =
	     EN_update_frq_1 && rg_frq_tail == 4'd10 &&
	     update_frq_1_entry[0] ||
	     EN_update_frq_2 && x__h2010 == 4'd10 && update_frq_2_entry[0] ||
	     EN_reset_entries_of_FRQ ;

  // register frq_11
  always@(EN_reset_entries_of_FRQ or
	  MUX_frq_11$write_1__VAL_1 or
	  MUX_frq_11$write_1__SEL_2 or
	  update_frq_2_entry or
	  MUX_frq_11$write_1__SEL_3 or update_frq_1_entry)
  case (1'b1)
    EN_reset_entries_of_FRQ: frq_11$D_IN = MUX_frq_11$write_1__VAL_1;
    MUX_frq_11$write_1__SEL_2: frq_11$D_IN = update_frq_2_entry;
    MUX_frq_11$write_1__SEL_3: frq_11$D_IN = update_frq_1_entry;
    default: frq_11$D_IN = 8'b10101010 /* unspecified value */ ;
  endcase
  assign frq_11$EN =
	     EN_update_frq_1 && rg_frq_tail == 4'd11 &&
	     update_frq_1_entry[0] ||
	     EN_update_frq_2 && x__h2010 == 4'd11 && update_frq_2_entry[0] ||
	     EN_reset_entries_of_FRQ ;

  // register frq_12
  always@(EN_reset_entries_of_FRQ or
	  MUX_frq_12$write_1__VAL_1 or
	  MUX_frq_12$write_1__SEL_2 or
	  update_frq_2_entry or
	  MUX_frq_12$write_1__SEL_3 or update_frq_1_entry)
  case (1'b1)
    EN_reset_entries_of_FRQ: frq_12$D_IN = MUX_frq_12$write_1__VAL_1;
    MUX_frq_12$write_1__SEL_2: frq_12$D_IN = update_frq_2_entry;
    MUX_frq_12$write_1__SEL_3: frq_12$D_IN = update_frq_1_entry;
    default: frq_12$D_IN = 8'b10101010 /* unspecified value */ ;
  endcase
  assign frq_12$EN =
	     EN_update_frq_1 && rg_frq_tail == 4'd12 &&
	     update_frq_1_entry[0] ||
	     EN_update_frq_2 && x__h2010 == 4'd12 && update_frq_2_entry[0] ||
	     EN_reset_entries_of_FRQ ;

  // register frq_13
  always@(EN_reset_entries_of_FRQ or
	  MUX_frq_13$write_1__VAL_1 or
	  MUX_frq_13$write_1__SEL_2 or
	  update_frq_2_entry or
	  MUX_frq_13$write_1__SEL_3 or update_frq_1_entry)
  case (1'b1)
    EN_reset_entries_of_FRQ: frq_13$D_IN = MUX_frq_13$write_1__VAL_1;
    MUX_frq_13$write_1__SEL_2: frq_13$D_IN = update_frq_2_entry;
    MUX_frq_13$write_1__SEL_3: frq_13$D_IN = update_frq_1_entry;
    default: frq_13$D_IN = 8'b10101010 /* unspecified value */ ;
  endcase
  assign frq_13$EN =
	     EN_update_frq_1 && rg_frq_tail == 4'd13 &&
	     update_frq_1_entry[0] ||
	     EN_update_frq_2 && x__h2010 == 4'd13 && update_frq_2_entry[0] ||
	     EN_reset_entries_of_FRQ ;

  // register frq_14
  always@(EN_reset_entries_of_FRQ or
	  MUX_frq_14$write_1__VAL_1 or
	  MUX_frq_14$write_1__SEL_2 or
	  update_frq_2_entry or
	  MUX_frq_14$write_1__SEL_3 or update_frq_1_entry)
  case (1'b1)
    EN_reset_entries_of_FRQ: frq_14$D_IN = MUX_frq_14$write_1__VAL_1;
    MUX_frq_14$write_1__SEL_2: frq_14$D_IN = update_frq_2_entry;
    MUX_frq_14$write_1__SEL_3: frq_14$D_IN = update_frq_1_entry;
    default: frq_14$D_IN = 8'b10101010 /* unspecified value */ ;
  endcase
  assign frq_14$EN =
	     EN_update_frq_1 && rg_frq_tail == 4'd14 &&
	     update_frq_1_entry[0] ||
	     EN_update_frq_2 && x__h2010 == 4'd14 && update_frq_2_entry[0] ||
	     EN_reset_entries_of_FRQ ;

  // register frq_15
  always@(EN_reset_entries_of_FRQ or
	  MUX_frq_15$write_1__VAL_1 or
	  MUX_frq_15$write_1__SEL_2 or
	  update_frq_2_entry or
	  MUX_frq_15$write_1__SEL_3 or update_frq_1_entry)
  case (1'b1)
    EN_reset_entries_of_FRQ: frq_15$D_IN = MUX_frq_15$write_1__VAL_1;
    MUX_frq_15$write_1__SEL_2: frq_15$D_IN = update_frq_2_entry;
    MUX_frq_15$write_1__SEL_3: frq_15$D_IN = update_frq_1_entry;
    default: frq_15$D_IN = 8'b10101010 /* unspecified value */ ;
  endcase
  assign frq_15$EN =
	     EN_update_frq_1 && rg_frq_tail == 4'd15 &&
	     update_frq_1_entry[0] ||
	     EN_update_frq_2 && x__h2010 == 4'd15 && update_frq_2_entry[0] ||
	     EN_reset_entries_of_FRQ ;

  // register frq_2
  always@(EN_reset_entries_of_FRQ or
	  MUX_frq_2$write_1__VAL_1 or
	  MUX_frq_2$write_1__SEL_2 or
	  update_frq_2_entry or
	  MUX_frq_2$write_1__SEL_3 or update_frq_1_entry)
  case (1'b1)
    EN_reset_entries_of_FRQ: frq_2$D_IN = MUX_frq_2$write_1__VAL_1;
    MUX_frq_2$write_1__SEL_2: frq_2$D_IN = update_frq_2_entry;
    MUX_frq_2$write_1__SEL_3: frq_2$D_IN = update_frq_1_entry;
    default: frq_2$D_IN = 8'b10101010 /* unspecified value */ ;
  endcase
  assign frq_2$EN =
	     EN_update_frq_1 && rg_frq_tail == 4'd2 &&
	     update_frq_1_entry[0] ||
	     EN_update_frq_2 && x__h2010 == 4'd2 && update_frq_2_entry[0] ||
	     EN_reset_entries_of_FRQ ;

  // register frq_3
  always@(EN_reset_entries_of_FRQ or
	  MUX_frq_3$write_1__VAL_1 or
	  MUX_frq_3$write_1__SEL_2 or
	  update_frq_2_entry or
	  MUX_frq_3$write_1__SEL_3 or update_frq_1_entry)
  case (1'b1)
    EN_reset_entries_of_FRQ: frq_3$D_IN = MUX_frq_3$write_1__VAL_1;
    MUX_frq_3$write_1__SEL_2: frq_3$D_IN = update_frq_2_entry;
    MUX_frq_3$write_1__SEL_3: frq_3$D_IN = update_frq_1_entry;
    default: frq_3$D_IN = 8'b10101010 /* unspecified value */ ;
  endcase
  assign frq_3$EN =
	     EN_update_frq_1 && rg_frq_tail == 4'd3 &&
	     update_frq_1_entry[0] ||
	     EN_update_frq_2 && x__h2010 == 4'd3 && update_frq_2_entry[0] ||
	     EN_reset_entries_of_FRQ ;

  // register frq_4
  always@(EN_reset_entries_of_FRQ or
	  MUX_frq_4$write_1__VAL_1 or
	  MUX_frq_4$write_1__SEL_2 or
	  update_frq_2_entry or
	  MUX_frq_4$write_1__SEL_3 or update_frq_1_entry)
  case (1'b1)
    EN_reset_entries_of_FRQ: frq_4$D_IN = MUX_frq_4$write_1__VAL_1;
    MUX_frq_4$write_1__SEL_2: frq_4$D_IN = update_frq_2_entry;
    MUX_frq_4$write_1__SEL_3: frq_4$D_IN = update_frq_1_entry;
    default: frq_4$D_IN = 8'b10101010 /* unspecified value */ ;
  endcase
  assign frq_4$EN =
	     EN_update_frq_1 && rg_frq_tail == 4'd4 &&
	     update_frq_1_entry[0] ||
	     EN_update_frq_2 && x__h2010 == 4'd4 && update_frq_2_entry[0] ||
	     EN_reset_entries_of_FRQ ;

  // register frq_5
  always@(EN_reset_entries_of_FRQ or
	  MUX_frq_5$write_1__VAL_1 or
	  MUX_frq_5$write_1__SEL_2 or
	  update_frq_2_entry or
	  MUX_frq_5$write_1__SEL_3 or update_frq_1_entry)
  case (1'b1)
    EN_reset_entries_of_FRQ: frq_5$D_IN = MUX_frq_5$write_1__VAL_1;
    MUX_frq_5$write_1__SEL_2: frq_5$D_IN = update_frq_2_entry;
    MUX_frq_5$write_1__SEL_3: frq_5$D_IN = update_frq_1_entry;
    default: frq_5$D_IN = 8'b10101010 /* unspecified value */ ;
  endcase
  assign frq_5$EN =
	     EN_update_frq_1 && rg_frq_tail == 4'd5 &&
	     update_frq_1_entry[0] ||
	     EN_update_frq_2 && x__h2010 == 4'd5 && update_frq_2_entry[0] ||
	     EN_reset_entries_of_FRQ ;

  // register frq_6
  always@(EN_reset_entries_of_FRQ or
	  MUX_frq_6$write_1__VAL_1 or
	  MUX_frq_6$write_1__SEL_2 or
	  update_frq_2_entry or
	  MUX_frq_6$write_1__SEL_3 or update_frq_1_entry)
  case (1'b1)
    EN_reset_entries_of_FRQ: frq_6$D_IN = MUX_frq_6$write_1__VAL_1;
    MUX_frq_6$write_1__SEL_2: frq_6$D_IN = update_frq_2_entry;
    MUX_frq_6$write_1__SEL_3: frq_6$D_IN = update_frq_1_entry;
    default: frq_6$D_IN = 8'b10101010 /* unspecified value */ ;
  endcase
  assign frq_6$EN =
	     EN_update_frq_1 && rg_frq_tail == 4'd6 &&
	     update_frq_1_entry[0] ||
	     EN_update_frq_2 && x__h2010 == 4'd6 && update_frq_2_entry[0] ||
	     EN_reset_entries_of_FRQ ;

  // register frq_7
  always@(EN_reset_entries_of_FRQ or
	  MUX_frq_7$write_1__VAL_1 or
	  MUX_frq_7$write_1__SEL_2 or
	  update_frq_2_entry or
	  MUX_frq_7$write_1__SEL_3 or update_frq_1_entry)
  case (1'b1)
    EN_reset_entries_of_FRQ: frq_7$D_IN = MUX_frq_7$write_1__VAL_1;
    MUX_frq_7$write_1__SEL_2: frq_7$D_IN = update_frq_2_entry;
    MUX_frq_7$write_1__SEL_3: frq_7$D_IN = update_frq_1_entry;
    default: frq_7$D_IN = 8'b10101010 /* unspecified value */ ;
  endcase
  assign frq_7$EN =
	     EN_update_frq_1 && rg_frq_tail == 4'd7 &&
	     update_frq_1_entry[0] ||
	     EN_update_frq_2 && x__h2010 == 4'd7 && update_frq_2_entry[0] ||
	     EN_reset_entries_of_FRQ ;

  // register frq_8
  always@(EN_reset_entries_of_FRQ or
	  MUX_frq_8$write_1__VAL_1 or
	  MUX_frq_8$write_1__SEL_2 or
	  update_frq_2_entry or
	  MUX_frq_8$write_1__SEL_3 or update_frq_1_entry)
  case (1'b1)
    EN_reset_entries_of_FRQ: frq_8$D_IN = MUX_frq_8$write_1__VAL_1;
    MUX_frq_8$write_1__SEL_2: frq_8$D_IN = update_frq_2_entry;
    MUX_frq_8$write_1__SEL_3: frq_8$D_IN = update_frq_1_entry;
    default: frq_8$D_IN = 8'b10101010 /* unspecified value */ ;
  endcase
  assign frq_8$EN =
	     EN_update_frq_1 && rg_frq_tail == 4'd8 &&
	     update_frq_1_entry[0] ||
	     EN_update_frq_2 && x__h2010 == 4'd8 && update_frq_2_entry[0] ||
	     EN_reset_entries_of_FRQ ;

  // register frq_9
  always@(EN_reset_entries_of_FRQ or
	  MUX_frq_9$write_1__VAL_1 or
	  MUX_frq_9$write_1__SEL_2 or
	  update_frq_2_entry or
	  MUX_frq_9$write_1__SEL_3 or update_frq_1_entry)
  case (1'b1)
    EN_reset_entries_of_FRQ: frq_9$D_IN = MUX_frq_9$write_1__VAL_1;
    MUX_frq_9$write_1__SEL_2: frq_9$D_IN = update_frq_2_entry;
    MUX_frq_9$write_1__SEL_3: frq_9$D_IN = update_frq_1_entry;
    default: frq_9$D_IN = 8'b10101010 /* unspecified value */ ;
  endcase
  assign frq_9$EN =
	     EN_update_frq_1 && rg_frq_tail == 4'd9 &&
	     update_frq_1_entry[0] ||
	     EN_update_frq_2 && x__h2010 == 4'd9 && update_frq_2_entry[0] ||
	     EN_reset_entries_of_FRQ ;

  // register rg_frq_head
  assign rg_frq_head$D_IN =
	     EN_reset_head ? 4'd0 : MUX_rg_frq_head$write_1__VAL_2 ;
  assign rg_frq_head$EN = EN_update_head || EN_reset_head ;

  // register rg_frq_tail
  assign rg_frq_tail$D_IN =
	     EN_reset_tail ? 4'd0 : MUX_rg_frq_tail$write_1__VAL_2 ;
  assign rg_frq_tail$EN = EN_update_tail || EN_reset_tail ;

  // remaining internal signals
  assign rg_frq_head_read_EQ_rg_frq_tail_read_AND_NOT_S_ETC___d45 =
	     rg_frq_head == rg_frq_tail &&
	     !SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d40 ||
	     x__h1747 == rg_frq_tail ;
  assign x__h1601 = EN_get_rob_head ? get_rob_head_rob_head : 4'd0 ;
  assign x__h1747 = rg_frq_head + 4'd1 ;
  assign x__h2010 = rg_frq_tail + 4'd1 ;
  always@(x__h1601 or
	  frq_0 or
	  frq_1 or
	  frq_2 or
	  frq_3 or
	  frq_4 or
	  frq_5 or
	  frq_6 or
	  frq_7 or
	  frq_8 or
	  frq_9 or frq_10 or frq_11 or frq_12 or frq_13 or frq_14 or frq_15)
  begin
    case (x__h1601)
      4'd0:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d40 = frq_0[0];
      4'd1:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d40 = frq_1[0];
      4'd2:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d40 = frq_2[0];
      4'd3:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d40 = frq_3[0];
      4'd4:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d40 = frq_4[0];
      4'd5:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d40 = frq_5[0];
      4'd6:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d40 = frq_6[0];
      4'd7:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d40 = frq_7[0];
      4'd8:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d40 = frq_8[0];
      4'd9:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d40 = frq_9[0];
      4'd10:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d40 =
	      frq_10[0];
      4'd11:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d40 =
	      frq_11[0];
      4'd12:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d40 =
	      frq_12[0];
      4'd13:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d40 =
	      frq_13[0];
      4'd14:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d40 =
	      frq_14[0];
      4'd15:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d40 =
	      frq_15[0];
    endcase
  end
  always@(rg_frq_head or
	  frq_0 or
	  frq_1 or
	  frq_2 or
	  frq_3 or
	  frq_4 or
	  frq_5 or
	  frq_6 or
	  frq_7 or
	  frq_8 or
	  frq_9 or frq_10 or frq_11 or frq_12 or frq_13 or frq_14 or frq_15)
  begin
    case (rg_frq_head)
      4'd0:
	  SEL_ARR_frq_0_read_BITS_7_TO_1_18_frq_1_read_B_ETC___d151 =
	      frq_0[7:1];
      4'd1:
	  SEL_ARR_frq_0_read_BITS_7_TO_1_18_frq_1_read_B_ETC___d151 =
	      frq_1[7:1];
      4'd2:
	  SEL_ARR_frq_0_read_BITS_7_TO_1_18_frq_1_read_B_ETC___d151 =
	      frq_2[7:1];
      4'd3:
	  SEL_ARR_frq_0_read_BITS_7_TO_1_18_frq_1_read_B_ETC___d151 =
	      frq_3[7:1];
      4'd4:
	  SEL_ARR_frq_0_read_BITS_7_TO_1_18_frq_1_read_B_ETC___d151 =
	      frq_4[7:1];
      4'd5:
	  SEL_ARR_frq_0_read_BITS_7_TO_1_18_frq_1_read_B_ETC___d151 =
	      frq_5[7:1];
      4'd6:
	  SEL_ARR_frq_0_read_BITS_7_TO_1_18_frq_1_read_B_ETC___d151 =
	      frq_6[7:1];
      4'd7:
	  SEL_ARR_frq_0_read_BITS_7_TO_1_18_frq_1_read_B_ETC___d151 =
	      frq_7[7:1];
      4'd8:
	  SEL_ARR_frq_0_read_BITS_7_TO_1_18_frq_1_read_B_ETC___d151 =
	      frq_8[7:1];
      4'd9:
	  SEL_ARR_frq_0_read_BITS_7_TO_1_18_frq_1_read_B_ETC___d151 =
	      frq_9[7:1];
      4'd10:
	  SEL_ARR_frq_0_read_BITS_7_TO_1_18_frq_1_read_B_ETC___d151 =
	      frq_10[7:1];
      4'd11:
	  SEL_ARR_frq_0_read_BITS_7_TO_1_18_frq_1_read_B_ETC___d151 =
	      frq_11[7:1];
      4'd12:
	  SEL_ARR_frq_0_read_BITS_7_TO_1_18_frq_1_read_B_ETC___d151 =
	      frq_12[7:1];
      4'd13:
	  SEL_ARR_frq_0_read_BITS_7_TO_1_18_frq_1_read_B_ETC___d151 =
	      frq_13[7:1];
      4'd14:
	  SEL_ARR_frq_0_read_BITS_7_TO_1_18_frq_1_read_B_ETC___d151 =
	      frq_14[7:1];
      4'd15:
	  SEL_ARR_frq_0_read_BITS_7_TO_1_18_frq_1_read_B_ETC___d151 =
	      frq_15[7:1];
    endcase
  end
  always@(rg_frq_head or
	  frq_0 or
	  frq_1 or
	  frq_2 or
	  frq_3 or
	  frq_4 or
	  frq_5 or
	  frq_6 or
	  frq_7 or
	  frq_8 or
	  frq_9 or frq_10 or frq_11 or frq_12 or frq_13 or frq_14 or frq_15)
  begin
    case (rg_frq_head)
      4'd0:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d152 =
	      frq_0[0];
      4'd1:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d152 =
	      frq_1[0];
      4'd2:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d152 =
	      frq_2[0];
      4'd3:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d152 =
	      frq_3[0];
      4'd4:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d152 =
	      frq_4[0];
      4'd5:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d152 =
	      frq_5[0];
      4'd6:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d152 =
	      frq_6[0];
      4'd7:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d152 =
	      frq_7[0];
      4'd8:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d152 =
	      frq_8[0];
      4'd9:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d152 =
	      frq_9[0];
      4'd10:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d152 =
	      frq_10[0];
      4'd11:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d152 =
	      frq_11[0];
      4'd12:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d152 =
	      frq_12[0];
      4'd13:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d152 =
	      frq_13[0];
      4'd14:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d152 =
	      frq_14[0];
      4'd15:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d152 =
	      frq_15[0];
    endcase
  end
  always@(x__h1747 or
	  frq_0 or
	  frq_1 or
	  frq_2 or
	  frq_3 or
	  frq_4 or
	  frq_5 or
	  frq_6 or
	  frq_7 or
	  frq_8 or
	  frq_9 or frq_10 or frq_11 or frq_12 or frq_13 or frq_14 or frq_15)
  begin
    case (x__h1747)
      4'd0:
	  SEL_ARR_frq_0_read_BITS_7_TO_1_18_frq_1_read_B_ETC___d153 =
	      frq_0[7:1];
      4'd1:
	  SEL_ARR_frq_0_read_BITS_7_TO_1_18_frq_1_read_B_ETC___d153 =
	      frq_1[7:1];
      4'd2:
	  SEL_ARR_frq_0_read_BITS_7_TO_1_18_frq_1_read_B_ETC___d153 =
	      frq_2[7:1];
      4'd3:
	  SEL_ARR_frq_0_read_BITS_7_TO_1_18_frq_1_read_B_ETC___d153 =
	      frq_3[7:1];
      4'd4:
	  SEL_ARR_frq_0_read_BITS_7_TO_1_18_frq_1_read_B_ETC___d153 =
	      frq_4[7:1];
      4'd5:
	  SEL_ARR_frq_0_read_BITS_7_TO_1_18_frq_1_read_B_ETC___d153 =
	      frq_5[7:1];
      4'd6:
	  SEL_ARR_frq_0_read_BITS_7_TO_1_18_frq_1_read_B_ETC___d153 =
	      frq_6[7:1];
      4'd7:
	  SEL_ARR_frq_0_read_BITS_7_TO_1_18_frq_1_read_B_ETC___d153 =
	      frq_7[7:1];
      4'd8:
	  SEL_ARR_frq_0_read_BITS_7_TO_1_18_frq_1_read_B_ETC___d153 =
	      frq_8[7:1];
      4'd9:
	  SEL_ARR_frq_0_read_BITS_7_TO_1_18_frq_1_read_B_ETC___d153 =
	      frq_9[7:1];
      4'd10:
	  SEL_ARR_frq_0_read_BITS_7_TO_1_18_frq_1_read_B_ETC___d153 =
	      frq_10[7:1];
      4'd11:
	  SEL_ARR_frq_0_read_BITS_7_TO_1_18_frq_1_read_B_ETC___d153 =
	      frq_11[7:1];
      4'd12:
	  SEL_ARR_frq_0_read_BITS_7_TO_1_18_frq_1_read_B_ETC___d153 =
	      frq_12[7:1];
      4'd13:
	  SEL_ARR_frq_0_read_BITS_7_TO_1_18_frq_1_read_B_ETC___d153 =
	      frq_13[7:1];
      4'd14:
	  SEL_ARR_frq_0_read_BITS_7_TO_1_18_frq_1_read_B_ETC___d153 =
	      frq_14[7:1];
      4'd15:
	  SEL_ARR_frq_0_read_BITS_7_TO_1_18_frq_1_read_B_ETC___d153 =
	      frq_15[7:1];
    endcase
  end
  always@(x__h1747 or
	  frq_0 or
	  frq_1 or
	  frq_2 or
	  frq_3 or
	  frq_4 or
	  frq_5 or
	  frq_6 or
	  frq_7 or
	  frq_8 or
	  frq_9 or frq_10 or frq_11 or frq_12 or frq_13 or frq_14 or frq_15)
  begin
    case (x__h1747)
      4'd0:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d154 =
	      frq_0[0];
      4'd1:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d154 =
	      frq_1[0];
      4'd2:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d154 =
	      frq_2[0];
      4'd3:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d154 =
	      frq_3[0];
      4'd4:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d154 =
	      frq_4[0];
      4'd5:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d154 =
	      frq_5[0];
      4'd6:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d154 =
	      frq_6[0];
      4'd7:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d154 =
	      frq_7[0];
      4'd8:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d154 =
	      frq_8[0];
      4'd9:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d154 =
	      frq_9[0];
      4'd10:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d154 =
	      frq_10[0];
      4'd11:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d154 =
	      frq_11[0];
      4'd12:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d154 =
	      frq_12[0];
      4'd13:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d154 =
	      frq_13[0];
      4'd14:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d154 =
	      frq_14[0];
      4'd15:
	  SEL_ARR_frq_0_read_BIT_0_frq_1_read_BIT_0_frq__ETC___d154 =
	      frq_15[0];
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        frq_0 <= `BSV_ASSIGNMENT_DELAY 8'd65;
	frq_1 <= `BSV_ASSIGNMENT_DELAY 8'd67;
	frq_10 <= `BSV_ASSIGNMENT_DELAY 8'd85;
	frq_11 <= `BSV_ASSIGNMENT_DELAY 8'd87;
	frq_12 <= `BSV_ASSIGNMENT_DELAY 8'd89;
	frq_13 <= `BSV_ASSIGNMENT_DELAY 8'd91;
	frq_14 <= `BSV_ASSIGNMENT_DELAY 8'd93;
	frq_15 <= `BSV_ASSIGNMENT_DELAY 8'd95;
	frq_2 <= `BSV_ASSIGNMENT_DELAY 8'd69;
	frq_3 <= `BSV_ASSIGNMENT_DELAY 8'd71;
	frq_4 <= `BSV_ASSIGNMENT_DELAY 8'd73;
	frq_5 <= `BSV_ASSIGNMENT_DELAY 8'd75;
	frq_6 <= `BSV_ASSIGNMENT_DELAY 8'd77;
	frq_7 <= `BSV_ASSIGNMENT_DELAY 8'd79;
	frq_8 <= `BSV_ASSIGNMENT_DELAY 8'd81;
	frq_9 <= `BSV_ASSIGNMENT_DELAY 8'd83;
	rg_frq_head <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rg_frq_tail <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (frq_0$EN) frq_0 <= `BSV_ASSIGNMENT_DELAY frq_0$D_IN;
	if (frq_1$EN) frq_1 <= `BSV_ASSIGNMENT_DELAY frq_1$D_IN;
	if (frq_10$EN) frq_10 <= `BSV_ASSIGNMENT_DELAY frq_10$D_IN;
	if (frq_11$EN) frq_11 <= `BSV_ASSIGNMENT_DELAY frq_11$D_IN;
	if (frq_12$EN) frq_12 <= `BSV_ASSIGNMENT_DELAY frq_12$D_IN;
	if (frq_13$EN) frq_13 <= `BSV_ASSIGNMENT_DELAY frq_13$D_IN;
	if (frq_14$EN) frq_14 <= `BSV_ASSIGNMENT_DELAY frq_14$D_IN;
	if (frq_15$EN) frq_15 <= `BSV_ASSIGNMENT_DELAY frq_15$D_IN;
	if (frq_2$EN) frq_2 <= `BSV_ASSIGNMENT_DELAY frq_2$D_IN;
	if (frq_3$EN) frq_3 <= `BSV_ASSIGNMENT_DELAY frq_3$D_IN;
	if (frq_4$EN) frq_4 <= `BSV_ASSIGNMENT_DELAY frq_4$D_IN;
	if (frq_5$EN) frq_5 <= `BSV_ASSIGNMENT_DELAY frq_5$D_IN;
	if (frq_6$EN) frq_6 <= `BSV_ASSIGNMENT_DELAY frq_6$D_IN;
	if (frq_7$EN) frq_7 <= `BSV_ASSIGNMENT_DELAY frq_7$D_IN;
	if (frq_8$EN) frq_8 <= `BSV_ASSIGNMENT_DELAY frq_8$D_IN;
	if (frq_9$EN) frq_9 <= `BSV_ASSIGNMENT_DELAY frq_9$D_IN;
	if (rg_frq_head$EN)
	  rg_frq_head <= `BSV_ASSIGNMENT_DELAY rg_frq_head$D_IN;
	if (rg_frq_tail$EN)
	  rg_frq_tail <= `BSV_ASSIGNMENT_DELAY rg_frq_tail$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    frq_0 = 8'hAA;
    frq_1 = 8'hAA;
    frq_10 = 8'hAA;
    frq_11 = 8'hAA;
    frq_12 = 8'hAA;
    frq_13 = 8'hAA;
    frq_14 = 8'hAA;
    frq_15 = 8'hAA;
    frq_2 = 8'hAA;
    frq_3 = 8'hAA;
    frq_4 = 8'hAA;
    frq_5 = 8'hAA;
    frq_6 = 8'hAA;
    frq_7 = 8'hAA;
    frq_8 = 8'hAA;
    frq_9 = 8'hAA;
    rg_frq_head = 4'hA;
    rg_frq_tail = 4'hA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_frq_head_read_EQ_rg_frq_tail_read_AND_NOT_S_ETC___d45)
	begin
	  v__h1795 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_frq_head_read_EQ_rg_frq_tail_read_AND_NOT_S_ETC___d45)
	$display("Time%d\nFRQ is empty", v__h1795);
  end
  // synopsys translate_on
endmodule  // mkPrf_frq

