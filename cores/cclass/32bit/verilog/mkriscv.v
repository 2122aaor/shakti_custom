//
// Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
//
// On Tue Mar 28 10:03:39 IST 2017
//
//
// Ports:
// Name                         I/O  size props
// _instruction_inputs            O     1
// RDY__instruction_inputs        O     1
// instruction_outputs_           O    39
// RDY_instruction_outputs_       O     1
// dcache_response_from_memory_read  O     1
// RDY_dcache_response_from_memory_read  O     1
// dcache_response_from_memory_write  O     1 const
// RDY_dcache_response_from_memory_write  O     1
// dcache_request_to_memory_read  O   297
// RDY_dcache_request_to_memory_read  O     1
// dcache_request_to_memory_write  O   297
// RDY_dcache_request_to_memory_write  O     1
// RDY_sin                        O     1 const
// sout                           O     1 reg
// RDY_sout                       O     1 const
// RDY_mtip                       O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// _instruction_inputs_mem_data   I    65 reg
// dcache_response_from_memory_read_mem_data  I    66 reg
// dcache_response_from_memory_write_mem_data  I    66 reg
// sin_in                         I     1 reg
// mtip_mtip1                     I     1
// EN_sin                         I     1
// EN_mtip                        I     1
// EN__instruction_inputs         I     1
// EN_instruction_outputs_        I     1
// EN_dcache_response_from_memory_read  I     1
// EN_dcache_response_from_memory_write  I     1
// EN_dcache_request_to_memory_read  I     1
// EN_dcache_request_to_memory_write  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkriscv(CLK,
	       RST_N,

	       _instruction_inputs_mem_data,
	       EN__instruction_inputs,
	       _instruction_inputs,
	       RDY__instruction_inputs,

	       EN_instruction_outputs_,
	       instruction_outputs_,
	       RDY_instruction_outputs_,

	       dcache_response_from_memory_read_mem_data,
	       EN_dcache_response_from_memory_read,
	       dcache_response_from_memory_read,
	       RDY_dcache_response_from_memory_read,

	       dcache_response_from_memory_write_mem_data,
	       EN_dcache_response_from_memory_write,
	       dcache_response_from_memory_write,
	       RDY_dcache_response_from_memory_write,

	       EN_dcache_request_to_memory_read,
	       dcache_request_to_memory_read,
	       RDY_dcache_request_to_memory_read,

	       EN_dcache_request_to_memory_write,
	       dcache_request_to_memory_write,
	       RDY_dcache_request_to_memory_write,

	       sin_in,
	       EN_sin,
	       RDY_sin,

	       sout,
	       RDY_sout,

	       mtip_mtip1,
	       EN_mtip,
	       RDY_mtip);
  input  CLK;
  input  RST_N;

  // actionvalue method _instruction_inputs
  input  [64 : 0] _instruction_inputs_mem_data;
  input  EN__instruction_inputs;
  output _instruction_inputs;
  output RDY__instruction_inputs;

  // actionvalue method instruction_outputs_
  input  EN_instruction_outputs_;
  output [38 : 0] instruction_outputs_;
  output RDY_instruction_outputs_;

  // actionvalue method dcache_response_from_memory_read
  input  [65 : 0] dcache_response_from_memory_read_mem_data;
  input  EN_dcache_response_from_memory_read;
  output dcache_response_from_memory_read;
  output RDY_dcache_response_from_memory_read;

  // actionvalue method dcache_response_from_memory_write
  input  [65 : 0] dcache_response_from_memory_write_mem_data;
  input  EN_dcache_response_from_memory_write;
  output dcache_response_from_memory_write;
  output RDY_dcache_response_from_memory_write;

  // actionvalue method dcache_request_to_memory_read
  input  EN_dcache_request_to_memory_read;
  output [296 : 0] dcache_request_to_memory_read;
  output RDY_dcache_request_to_memory_read;

  // actionvalue method dcache_request_to_memory_write
  input  EN_dcache_request_to_memory_write;
  output [296 : 0] dcache_request_to_memory_write;
  output RDY_dcache_request_to_memory_write;

  // action method sin
  input  sin_in;
  input  EN_sin;
  output RDY_sin;

  // value method sout
  output sout;
  output RDY_sout;

  // action method mtip
  input  mtip_mtip1;
  input  EN_mtip;
  output RDY_mtip;

  // signals for module outputs
  wire [296 : 0] dcache_request_to_memory_read,
		 dcache_request_to_memory_write;
  wire [38 : 0] instruction_outputs_;
  wire RDY__instruction_inputs,
       RDY_dcache_request_to_memory_read,
       RDY_dcache_request_to_memory_write,
       RDY_dcache_response_from_memory_read,
       RDY_dcache_response_from_memory_write,
       RDY_instruction_outputs_,
       RDY_mtip,
       RDY_sin,
       RDY_sout,
       _instruction_inputs,
       dcache_response_from_memory_read,
       dcache_response_from_memory_write,
       sout;

  // inlined wires
  wire [39 : 0] wr_forward_from_EXE$wget, wr_forward_from_MEM$wget;
  wire [32 : 0] wr_write_back_pc$wget;
  wire rg_increment_pc$EN_port0__write,
       rg_increment_pc$port1__read,
       rg_increment_pc$port2__read,
       wr_flush_all_1$whas,
       wr_flush_decode_cache_1$whas,
       wr_forward_from_EXE$whas,
       wr_forward_from_MEM$whas;

  // register rg_increment_pc
  reg rg_increment_pc;
  wire rg_increment_pc$D_IN, rg_increment_pc$EN;

  // register wr_effective_address
  reg [31 : 0] wr_effective_address;
  wire [31 : 0] wr_effective_address$D_IN;
  wire wr_effective_address$EN;

  // register wr_effective_address1
  reg [31 : 0] wr_effective_address1;
  wire [31 : 0] wr_effective_address1$D_IN;
  wire wr_effective_address1$EN;

  // register wr_flush_all
  reg wr_flush_all;
  wire wr_flush_all$D_IN, wr_flush_all$EN;

  // register wr_flush_decode_cache
  reg wr_flush_decode_cache;
  wire wr_flush_decode_cache$D_IN, wr_flush_decode_cache$EN;

  // ports of submodule alu_unit
  wire [80 : 0] alu_unit$inputs;
  wire [31 : 0] alu_unit$inputs__operand1,
		alu_unit$inputs__operand2,
		alu_unit$inputs__operand3,
		alu_unit$inputs_program_counter;
  wire [19 : 0] alu_unit$inputs__immediate_value;
  wire [6 : 0] alu_unit$inputs__funct7;
  wire [4 : 0] alu_unit$inputs__opcode;
  wire [2 : 0] alu_unit$inputs__funct3;
  wire alu_unit$EN_inputs, alu_unit$inputs_is_imm;

  // ports of submodule bpu
  wire [32 : 0] bpu$send_output_;
  wire [31 : 0] bpu$_flush_new_pc_, bpu$_training_addr, bpu$_training_pc;
  wire bpu$EN__flush,
       bpu$EN__training,
       bpu$EN_deq_fifo,
       bpu$EN_send_output_,
       bpu$RDY_send_output_,
       bpu$_training_branch_taken_or_not,
       bpu$pred_type;

  // ports of submodule ff_id_ie
  wire [176 : 0] ff_id_ie$D_IN, ff_id_ie$D_OUT;
  wire ff_id_ie$CLR,
       ff_id_ie$DEQ,
       ff_id_ie$EMPTY_N,
       ff_id_ie$ENQ,
       ff_id_ie$FULL_N;

  // ports of submodule ff_ie_imem
  wire [119 : 0] ff_ie_imem$D_IN, ff_ie_imem$D_OUT;
  wire ff_ie_imem$CLR,
       ff_ie_imem$DEQ,
       ff_ie_imem$EMPTY_N,
       ff_ie_imem$ENQ,
       ff_ie_imem$FULL_N;

  // ports of submodule ff_if_id
  wire [69 : 0] ff_if_id$D_IN, ff_if_id$D_OUT;
  wire ff_if_id$CLR,
       ff_if_id$DEQ,
       ff_if_id$EMPTY_N,
       ff_if_id$ENQ,
       ff_if_id$FULL_N;

  // ports of submodule ff_imem_iwb
  wire [112 : 0] ff_imem_iwb$D_IN, ff_imem_iwb$D_OUT;
  wire ff_imem_iwb$CLR,
       ff_imem_iwb$DEQ,
       ff_imem_iwb$EMPTY_N,
       ff_imem_iwb$ENQ,
       ff_imem_iwb$FULL_N;

  // ports of submodule icache
  wire [65 : 0] icache$response_to_cpu;
  wire [64 : 0] icache$response_from_memory_resp;
  wire [38 : 0] icache$request_to_memory;
  wire [31 : 0] icache$request_from_cpu_req;
  wire icache$EN_cache_enable,
       icache$EN_flush,
       icache$EN_request_from_cpu,
       icache$EN_request_to_memory,
       icache$EN_response_from_memory,
       icache$EN_response_to_cpu,
       icache$RDY_request_from_cpu,
       icache$RDY_request_to_memory,
       icache$RDY_response_from_memory,
       icache$RDY_response_to_cpu,
       icache$cache_enable_enable_,
       icache$response_from_memory;

  // ports of submodule mem_unit
  wire [296 : 0] mem_unit$request_to_memory_read,
		 mem_unit$request_to_memory_write;
  wire [73 : 0] mem_unit$communicate_with_core_execdata;
  wire [69 : 0] mem_unit$communicate_with_core;
  wire [65 : 0] mem_unit$response_from_memory_read_mem_data,
		mem_unit$response_from_memory_write_mem_data;
  wire mem_unit$EN_communicate_with_core,
       mem_unit$EN_request_to_memory_read,
       mem_unit$EN_request_to_memory_write,
       mem_unit$EN_response_from_memory_read,
       mem_unit$EN_response_from_memory_write,
       mem_unit$RDY_request_to_memory_read,
       mem_unit$RDY_request_to_memory_write,
       mem_unit$RDY_response_from_memory_read,
       mem_unit$RDY_response_from_memory_write,
       mem_unit$response_from_memory_read,
       mem_unit$response_from_memory_write;

  // ports of submodule register_file
  wire [138 : 0] register_file$csr_access_inst;
  wire [96 : 0] register_file$_inputs_from_decode_stage;
  wire [64 : 0] register_file$csr_access;
  wire [39 : 0] register_file$_forwarding_from_execution_data,
		register_file$_forwarding_from_memory_data;
  wire [31 : 0] register_file$_print_all_rf_pc;
  wire [4 : 0] register_file$_inputs_from_decode_stage_rs1_addr,
	       register_file$_inputs_from_decode_stage_rs2_addr,
	       register_file$_inputs_from_decode_stage_rs3_addr,
	       register_file$csr_access_destination;
  wire register_file$EN__forwarding_from_execution,
       register_file$EN__forwarding_from_memory,
       register_file$EN__inputs_from_decode_stage,
       register_file$EN__print_all_rf,
       register_file$EN_csr_access,
       register_file$EN_mtip,
       register_file$EN_sin,
       register_file$RDY__print_all_rf,
       register_file$_inputs_from_decode_stage_rs1_type,
       register_file$_inputs_from_decode_stage_rs2_type,
       register_file$csr_access_rd_type,
       register_file$mtip_mtip1,
       register_file$sin_in,
       register_file$sout;

  // rule scheduling signals
  wire CAN_FIRE_RL_check_full,
       CAN_FIRE_RL_rg_receive_instruction,
       CAN_FIRE_RL_rl_clock,
       CAN_FIRE_RL_rl_decode_and_operand_fetch,
       CAN_FIRE_RL_rl_execute,
       CAN_FIRE_RL_rl_flush_all_stages,
       CAN_FIRE_RL_rl_flush_first_two_stages,
       CAN_FIRE_RL_rl_forwarding_data_to_decode,
       CAN_FIRE_RL_rl_forwarding_data_to_decode_from_exe,
       CAN_FIRE_RL_rl_memory_stage,
       CAN_FIRE_RL_rl_send_pc_fetch_request,
       CAN_FIRE_RL_rl_write_back,
       CAN_FIRE_RL_wr_effective_address1__dreg_update,
       CAN_FIRE_RL_wr_effective_address__dreg_update,
       CAN_FIRE_RL_wr_flush_all__dreg_update,
       CAN_FIRE_RL_wr_flush_decode_cache__dreg_update,
       CAN_FIRE__instruction_inputs,
       CAN_FIRE_dcache_request_to_memory_read,
       CAN_FIRE_dcache_request_to_memory_write,
       CAN_FIRE_dcache_response_from_memory_read,
       CAN_FIRE_dcache_response_from_memory_write,
       CAN_FIRE_instruction_outputs_,
       CAN_FIRE_mtip,
       CAN_FIRE_sin,
       WILL_FIRE_RL_check_full,
       WILL_FIRE_RL_rg_receive_instruction,
       WILL_FIRE_RL_rl_clock,
       WILL_FIRE_RL_rl_decode_and_operand_fetch,
       WILL_FIRE_RL_rl_execute,
       WILL_FIRE_RL_rl_flush_all_stages,
       WILL_FIRE_RL_rl_flush_first_two_stages,
       WILL_FIRE_RL_rl_forwarding_data_to_decode,
       WILL_FIRE_RL_rl_forwarding_data_to_decode_from_exe,
       WILL_FIRE_RL_rl_memory_stage,
       WILL_FIRE_RL_rl_send_pc_fetch_request,
       WILL_FIRE_RL_rl_write_back,
       WILL_FIRE_RL_wr_effective_address1__dreg_update,
       WILL_FIRE_RL_wr_effective_address__dreg_update,
       WILL_FIRE_RL_wr_flush_all__dreg_update,
       WILL_FIRE_RL_wr_flush_decode_cache__dreg_update,
       WILL_FIRE__instruction_inputs,
       WILL_FIRE_dcache_request_to_memory_read,
       WILL_FIRE_dcache_request_to_memory_write,
       WILL_FIRE_dcache_response_from_memory_read,
       WILL_FIRE_dcache_response_from_memory_write,
       WILL_FIRE_instruction_outputs_,
       WILL_FIRE_mtip,
       WILL_FIRE_sin;

  // remaining internal signals
  reg [133 : 0] CASE_fn_decoder_7_BITS_36_TO_32_0b11000_0_CONC_ETC__q1,
		CASE_fn_decoder_7_BITS_61_TO_60_1_0_CONCAT_DON_ETC__q2;
  reg [63 : 0] v__h2166,
	       v__h2464,
	       v__h2561,
	       v__h2609,
	       v__h2936,
	       v__h3501,
	       v__h3587,
	       v__h3720,
	       v__h3843,
	       v__h4404,
	       v__h4526,
	       v__h4566,
	       v__h4629,
	       v__h4864,
	       v__h4900,
	       v__h4934,
	       v__h4977,
	       v__h5017,
	       v__h5905,
	       v__h6179,
	       v__h6637,
	       v__h6675,
	       v__h7231,
	       v__h7535;
  reg [3 : 0] CASE_ff_id_ieD_OUT_BITS_9_TO_6_0_ff_id_ieD_O_ETC__q4,
	      CASE_ff_ie_imemD_OUT_BITS_9_TO_6_0_ff_ie_imem_ETC__q5,
	      CASE_ff_if_idD_OUT_BITS_3_TO_0_0_ff_if_idD_O_ETC__q3,
	      CASE_ff_imem_iwbD_OUT_BITS_9_TO_6_0_ff_imem_i_ETC__q6;
  wire [134 : 0] fn_branch___d98;
  wire [61 : 0] fn_decoder___d67;
  wire [31 : 0] aluresult__h3110, x_program_counter__h2992;
  wire [24 : 0] x__h3114;
  wire [4 : 0] x_opcode__h2828;
  wire [2 : 0] x_funct3__h2829;
  wire NOT_fn_decoder_7_BITS_61_TO_60_8_EQ_2_1_35_AND_ETC___d147,
       register_file__inputs_from_decode_stage_2_BIT__ETC___d153,
       register_file__inputs_from_decode_stage_2_BIT__ETC___d160;

  // actionvalue method _instruction_inputs
  assign _instruction_inputs = icache$response_from_memory ;
  assign RDY__instruction_inputs = icache$RDY_response_from_memory ;
  assign CAN_FIRE__instruction_inputs = icache$RDY_response_from_memory ;
  assign WILL_FIRE__instruction_inputs = EN__instruction_inputs ;

  // actionvalue method instruction_outputs_
  assign instruction_outputs_ = icache$request_to_memory ;
  assign RDY_instruction_outputs_ = icache$RDY_request_to_memory ;
  assign CAN_FIRE_instruction_outputs_ = icache$RDY_request_to_memory ;
  assign WILL_FIRE_instruction_outputs_ = EN_instruction_outputs_ ;

  // actionvalue method dcache_response_from_memory_read
  assign dcache_response_from_memory_read =
	     mem_unit$response_from_memory_read ;
  assign RDY_dcache_response_from_memory_read =
	     mem_unit$RDY_response_from_memory_read ;
  assign CAN_FIRE_dcache_response_from_memory_read =
	     mem_unit$RDY_response_from_memory_read ;
  assign WILL_FIRE_dcache_response_from_memory_read =
	     EN_dcache_response_from_memory_read ;

  // actionvalue method dcache_response_from_memory_write
  assign dcache_response_from_memory_write =
	     mem_unit$response_from_memory_write ;
  assign RDY_dcache_response_from_memory_write =
	     mem_unit$RDY_response_from_memory_write ;
  assign CAN_FIRE_dcache_response_from_memory_write =
	     mem_unit$RDY_response_from_memory_write ;
  assign WILL_FIRE_dcache_response_from_memory_write =
	     EN_dcache_response_from_memory_write ;

  // actionvalue method dcache_request_to_memory_read
  assign dcache_request_to_memory_read = mem_unit$request_to_memory_read ;
  assign RDY_dcache_request_to_memory_read =
	     mem_unit$RDY_request_to_memory_read ;
  assign CAN_FIRE_dcache_request_to_memory_read =
	     mem_unit$RDY_request_to_memory_read ;
  assign WILL_FIRE_dcache_request_to_memory_read =
	     EN_dcache_request_to_memory_read ;

  // actionvalue method dcache_request_to_memory_write
  assign dcache_request_to_memory_write = mem_unit$request_to_memory_write ;
  assign RDY_dcache_request_to_memory_write =
	     mem_unit$RDY_request_to_memory_write ;
  assign CAN_FIRE_dcache_request_to_memory_write =
	     mem_unit$RDY_request_to_memory_write ;
  assign WILL_FIRE_dcache_request_to_memory_write =
	     EN_dcache_request_to_memory_write ;

  // action method sin
  assign RDY_sin = 1'd1 ;
  assign CAN_FIRE_sin = 1'd1 ;
  assign WILL_FIRE_sin = EN_sin ;

  // value method sout
  assign sout = register_file$sout ;
  assign RDY_sout = 1'd1 ;

  // action method mtip
  assign RDY_mtip = 1'd1 ;
  assign CAN_FIRE_mtip = 1'd1 ;
  assign WILL_FIRE_mtip = EN_mtip ;

  // submodule alu_unit
  mkexecution_unit alu_unit(.CLK(CLK),
			    .RST_N(RST_N),
			    .inputs__funct3(alu_unit$inputs__funct3),
			    .inputs__funct7(alu_unit$inputs__funct7),
			    .inputs__immediate_value(alu_unit$inputs__immediate_value),
			    .inputs__opcode(alu_unit$inputs__opcode),
			    .inputs__operand1(alu_unit$inputs__operand1),
			    .inputs__operand2(alu_unit$inputs__operand2),
			    .inputs__operand3(alu_unit$inputs__operand3),
			    .inputs_is_imm(alu_unit$inputs_is_imm),
			    .inputs_program_counter(alu_unit$inputs_program_counter),
			    .EN_inputs(alu_unit$EN_inputs),
			    .inputs(alu_unit$inputs),
			    .RDY_inputs());

  // submodule bpu
  mkbpu_bimodal bpu(.CLK(CLK),
		    .RST_N(RST_N),
		    ._flush_new_pc_(bpu$_flush_new_pc_),
		    ._training_addr(bpu$_training_addr),
		    ._training_branch_taken_or_not(bpu$_training_branch_taken_or_not),
		    ._training_pc(bpu$_training_pc),
		    .EN__training(bpu$EN__training),
		    .EN_send_output_(bpu$EN_send_output_),
		    .EN_deq_fifo(bpu$EN_deq_fifo),
		    .EN__flush(bpu$EN__flush),
		    .RDY__training(),
		    .send_output_(bpu$send_output_),
		    .RDY_send_output_(bpu$RDY_send_output_),
		    .RDY_deq_fifo(),
		    .RDY__flush(),
		    .pred_type(bpu$pred_type),
		    .RDY_pred_type());

  // submodule ff_id_ie
  FIFOL1 #(.width(32'd177)) ff_id_ie(.RST(RST_N),
				     .CLK(CLK),
				     .D_IN(ff_id_ie$D_IN),
				     .ENQ(ff_id_ie$ENQ),
				     .DEQ(ff_id_ie$DEQ),
				     .CLR(ff_id_ie$CLR),
				     .D_OUT(ff_id_ie$D_OUT),
				     .FULL_N(ff_id_ie$FULL_N),
				     .EMPTY_N(ff_id_ie$EMPTY_N));

  // submodule ff_ie_imem
  FIFOL1 #(.width(32'd120)) ff_ie_imem(.RST(RST_N),
				       .CLK(CLK),
				       .D_IN(ff_ie_imem$D_IN),
				       .ENQ(ff_ie_imem$ENQ),
				       .DEQ(ff_ie_imem$DEQ),
				       .CLR(ff_ie_imem$CLR),
				       .D_OUT(ff_ie_imem$D_OUT),
				       .FULL_N(ff_ie_imem$FULL_N),
				       .EMPTY_N(ff_ie_imem$EMPTY_N));

  // submodule ff_if_id
  FIFOL1 #(.width(32'd70)) ff_if_id(.RST(RST_N),
				    .CLK(CLK),
				    .D_IN(ff_if_id$D_IN),
				    .ENQ(ff_if_id$ENQ),
				    .DEQ(ff_if_id$DEQ),
				    .CLR(ff_if_id$CLR),
				    .D_OUT(ff_if_id$D_OUT),
				    .FULL_N(ff_if_id$FULL_N),
				    .EMPTY_N(ff_if_id$EMPTY_N));

  // submodule ff_imem_iwb
  FIFOL1 #(.width(32'd113)) ff_imem_iwb(.RST(RST_N),
					.CLK(CLK),
					.D_IN(ff_imem_iwb$D_IN),
					.ENQ(ff_imem_iwb$ENQ),
					.DEQ(ff_imem_iwb$DEQ),
					.CLR(ff_imem_iwb$CLR),
					.D_OUT(ff_imem_iwb$D_OUT),
					.FULL_N(ff_imem_iwb$FULL_N),
					.EMPTY_N(ff_imem_iwb$EMPTY_N));

  // submodule icache
  mkicache icache(.CLK(CLK),
		  .RST_N(RST_N),
		  .cache_enable_enable_(icache$cache_enable_enable_),
		  .request_from_cpu_req(icache$request_from_cpu_req),
		  .response_from_memory_resp(icache$response_from_memory_resp),
		  .EN_request_from_cpu(icache$EN_request_from_cpu),
		  .EN_response_to_cpu(icache$EN_response_to_cpu),
		  .EN_request_to_memory(icache$EN_request_to_memory),
		  .EN_response_from_memory(icache$EN_response_from_memory),
		  .EN_cache_enable(icache$EN_cache_enable),
		  .EN_flush(icache$EN_flush),
		  .RDY_request_from_cpu(icache$RDY_request_from_cpu),
		  .response_to_cpu(icache$response_to_cpu),
		  .RDY_response_to_cpu(icache$RDY_response_to_cpu),
		  .request_to_memory(icache$request_to_memory),
		  .RDY_request_to_memory(icache$RDY_request_to_memory),
		  .response_from_memory(icache$response_from_memory),
		  .RDY_response_from_memory(icache$RDY_response_from_memory),
		  .RDY_cache_enable(),
		  .RDY_flush());

  // submodule mem_unit
  mkmemory_unit mem_unit(.CLK(CLK),
			 .RST_N(RST_N),
			 .communicate_with_core_execdata(mem_unit$communicate_with_core_execdata),
			 .response_from_memory_read_mem_data(mem_unit$response_from_memory_read_mem_data),
			 .response_from_memory_write_mem_data(mem_unit$response_from_memory_write_mem_data),
			 .EN_response_from_memory_write(mem_unit$EN_response_from_memory_write),
			 .EN_response_from_memory_read(mem_unit$EN_response_from_memory_read),
			 .EN_request_to_memory_read(mem_unit$EN_request_to_memory_read),
			 .EN_request_to_memory_write(mem_unit$EN_request_to_memory_write),
			 .EN_communicate_with_core(mem_unit$EN_communicate_with_core),
			 .response_from_memory_write(mem_unit$response_from_memory_write),
			 .RDY_response_from_memory_write(mem_unit$RDY_response_from_memory_write),
			 .response_from_memory_read(mem_unit$response_from_memory_read),
			 .RDY_response_from_memory_read(mem_unit$RDY_response_from_memory_read),
			 .request_to_memory_read(mem_unit$request_to_memory_read),
			 .RDY_request_to_memory_read(mem_unit$RDY_request_to_memory_read),
			 .request_to_memory_write(mem_unit$request_to_memory_write),
			 .RDY_request_to_memory_write(mem_unit$RDY_request_to_memory_write),
			 .communicate_with_core(mem_unit$communicate_with_core),
			 .RDY_communicate_with_core());

  // submodule register_file
  mkregisterfile register_file(.CLK(CLK),
			       .RST_N(RST_N),
			       ._forwarding_from_execution_data(register_file$_forwarding_from_execution_data),
			       ._forwarding_from_memory_data(register_file$_forwarding_from_memory_data),
			       ._inputs_from_decode_stage_rs1_addr(register_file$_inputs_from_decode_stage_rs1_addr),
			       ._inputs_from_decode_stage_rs1_type(register_file$_inputs_from_decode_stage_rs1_type),
			       ._inputs_from_decode_stage_rs2_addr(register_file$_inputs_from_decode_stage_rs2_addr),
			       ._inputs_from_decode_stage_rs2_type(register_file$_inputs_from_decode_stage_rs2_type),
			       ._inputs_from_decode_stage_rs3_addr(register_file$_inputs_from_decode_stage_rs3_addr),
			       ._print_all_rf_pc(register_file$_print_all_rf_pc),
			       .csr_access_destination(register_file$csr_access_destination),
			       .csr_access_inst(register_file$csr_access_inst),
			       .csr_access_rd_type(register_file$csr_access_rd_type),
			       .mtip_mtip1(register_file$mtip_mtip1),
			       .sin_in(register_file$sin_in),
			       .EN__inputs_from_decode_stage(register_file$EN__inputs_from_decode_stage),
			       .EN__forwarding_from_memory(register_file$EN__forwarding_from_memory),
			       .EN__forwarding_from_execution(register_file$EN__forwarding_from_execution),
			       .EN_sin(register_file$EN_sin),
			       .EN__print_all_rf(register_file$EN__print_all_rf),
			       .EN_csr_access(register_file$EN_csr_access),
			       .EN_mtip(register_file$EN_mtip),
			       ._inputs_from_decode_stage(register_file$_inputs_from_decode_stage),
			       .RDY__inputs_from_decode_stage(),
			       .RDY__forwarding_from_memory(),
			       .RDY__forwarding_from_execution(),
			       .RDY_sin(),
			       .sout(register_file$sout),
			       .RDY_sout(),
			       .RDY__print_all_rf(register_file$RDY__print_all_rf),
			       .csr_access(register_file$csr_access),
			       .RDY_csr_access(),
			       .RDY_mtip());

  // rule RL_rl_write_back
  assign CAN_FIRE_RL_rl_write_back = ff_imem_iwb$EMPTY_N ;
  assign WILL_FIRE_RL_rl_write_back = ff_imem_iwb$EMPTY_N ;

  // rule RL_rl_memory_stage
  assign CAN_FIRE_RL_rl_memory_stage =
	     ff_ie_imem$EMPTY_N && ff_imem_iwb$FULL_N && !wr_flush_all &&
	     !wr_flush_all_1$whas ;
  assign WILL_FIRE_RL_rl_memory_stage = CAN_FIRE_RL_rl_memory_stage ;

  // rule RL_rl_execute
  assign CAN_FIRE_RL_rl_execute =
	     ff_id_ie$EMPTY_N && ff_ie_imem$FULL_N && !wr_flush_all ;
  assign WILL_FIRE_RL_rl_execute = CAN_FIRE_RL_rl_execute ;

  // rule RL_rl_forwarding_data_to_decode_from_exe
  assign CAN_FIRE_RL_rl_forwarding_data_to_decode_from_exe = 1'd1 ;
  assign WILL_FIRE_RL_rl_forwarding_data_to_decode_from_exe = 1'd1 ;

  // rule RL_rl_forwarding_data_to_decode
  assign CAN_FIRE_RL_rl_forwarding_data_to_decode = 1'd1 ;
  assign WILL_FIRE_RL_rl_forwarding_data_to_decode = 1'd1 ;

  // rule RL_rl_decode_and_operand_fetch
  assign CAN_FIRE_RL_rl_decode_and_operand_fetch =
	     ff_if_id$EMPTY_N && ff_id_ie$FULL_N && !wr_flush_all &&
	     !wr_flush_decode_cache ;
  assign WILL_FIRE_RL_rl_decode_and_operand_fetch =
	     CAN_FIRE_RL_rl_decode_and_operand_fetch ;

  // rule RL_check_full
  assign CAN_FIRE_RL_check_full = 1'd1 ;
  assign WILL_FIRE_RL_check_full = 1'd1 ;

  // rule RL_rl_flush_first_two_stages
  assign CAN_FIRE_RL_rl_flush_first_two_stages =
	     wr_flush_decode_cache && !wr_flush_all ;
  assign WILL_FIRE_RL_rl_flush_first_two_stages =
	     CAN_FIRE_RL_rl_flush_first_two_stages ;

  // rule RL_rl_flush_all_stages
  assign CAN_FIRE_RL_rl_flush_all_stages = wr_flush_all ;
  assign WILL_FIRE_RL_rl_flush_all_stages = wr_flush_all ;

  // rule RL_rg_receive_instruction
  assign CAN_FIRE_RL_rg_receive_instruction =
	     icache$RDY_response_to_cpu && ff_if_id$FULL_N &&
	     !wr_flush_decode_cache &&
	     !wr_flush_all ;
  assign WILL_FIRE_RL_rg_receive_instruction =
	     CAN_FIRE_RL_rg_receive_instruction ;

  // rule RL_rl_send_pc_fetch_request
  assign CAN_FIRE_RL_rl_send_pc_fetch_request =
	     icache$RDY_request_from_cpu && bpu$RDY_send_output_ &&
	     !wr_flush_decode_cache &&
	     !wr_flush_all &&
	     ff_if_id$FULL_N ;
  assign WILL_FIRE_RL_rl_send_pc_fetch_request =
	     CAN_FIRE_RL_rl_send_pc_fetch_request ;

  // rule RL_rl_clock
  assign CAN_FIRE_RL_rl_clock = register_file$RDY__print_all_rf ;
  assign WILL_FIRE_RL_rl_clock = register_file$RDY__print_all_rf ;

  // rule RL_wr_flush_decode_cache__dreg_update
  assign CAN_FIRE_RL_wr_flush_decode_cache__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wr_flush_decode_cache__dreg_update = 1'd1 ;

  // rule RL_wr_flush_all__dreg_update
  assign CAN_FIRE_RL_wr_flush_all__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wr_flush_all__dreg_update = 1'd1 ;

  // rule RL_wr_effective_address__dreg_update
  assign CAN_FIRE_RL_wr_effective_address__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wr_effective_address__dreg_update = 1'd1 ;

  // rule RL_wr_effective_address1__dreg_update
  assign CAN_FIRE_RL_wr_effective_address1__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_wr_effective_address1__dreg_update = 1'd1 ;

  // inlined wires
  assign wr_flush_decode_cache_1$whas =
	     WILL_FIRE_RL_rl_decode_and_operand_fetch &&
	     fn_decoder___d67[61:60] != 2'd3 &&
	     fn_decoder___d67[61:60] != 2'd1 &&
	     fn_decoder___d67[61:60] != 2'd2 &&
	     register_file__inputs_from_decode_stage_2_BIT__ETC___d160 ;
  assign wr_flush_all_1$whas =
	     ff_imem_iwb$EMPTY_N && register_file$csr_access[32] ;
  assign wr_forward_from_MEM$wget =
	     { 1'd1,
	       (ff_ie_imem$D_OUT[119:118] == 2'd1) ?
		 { mem_unit$communicate_with_core[68:37],
		   ff_ie_imem$D_OUT[5:1],
		   mem_unit$communicate_with_core[69],
		   ff_ie_imem$D_OUT[0] } :
		 { ff_ie_imem$D_OUT[80:49],
		   ff_ie_imem$D_OUT[5:1],
		   !ff_ie_imem$D_OUT[43],
		   ff_ie_imem$D_OUT[0] } } ;
  assign wr_forward_from_MEM$whas =
	     WILL_FIRE_RL_rl_memory_stage &&
	     (ff_ie_imem$D_OUT[119:118] == 2'd1 ||
	      ff_ie_imem$D_OUT[119:118] == 2'd0) ;
  assign wr_forward_from_EXE$wget =
	     { 1'd1,
	       (ff_id_ie$D_OUT[176:175] != 2'd0 &&
		ff_id_ie$D_OUT[176:175] != 2'd1) ?
		 { alu_unit$inputs[41:10],
		   ff_id_ie$D_OUT[5:1],
		   alu_unit$inputs[80:79] == 2'd0,
		   ff_id_ie$D_OUT[0] } :
		 ((ff_id_ie$D_OUT[176:175] == 2'd0) ?
		    { ff_id_ie$D_OUT[79:48],
		      ff_id_ie$D_OUT[5:1],
		      1'd1,
		      ff_id_ie$D_OUT[0] } :
		    { 32'hAAAAAAAA /* unspecified value */ ,
		      ff_id_ie$D_OUT[5:1],
		      1'd0,
		      ff_id_ie$D_OUT[0] }) } ;
  assign wr_forward_from_EXE$whas =
	     WILL_FIRE_RL_rl_execute &&
	     (alu_unit$inputs[80:79] != 2'd1 ||
	      alu_unit$inputs[11:10] != 2'd1 ||
	      ff_id_ie$D_OUT[176:175] == 2'd0 ||
	      ff_id_ie$D_OUT[176:175] == 2'd1) ;
  assign wr_write_back_pc$wget = { 1'd1, ff_imem_iwb$D_OUT[42:11] } ;
  assign rg_increment_pc$EN_port0__write =
	     WILL_FIRE_RL_rg_receive_instruction && rg_increment_pc ;
  assign rg_increment_pc$port1__read =
	     !rg_increment_pc$EN_port0__write && rg_increment_pc ;
  assign rg_increment_pc$port2__read =
	     CAN_FIRE_RL_rl_send_pc_fetch_request ||
	     rg_increment_pc$port1__read ;

  // register rg_increment_pc
  assign rg_increment_pc$D_IN = rg_increment_pc$port2__read ;
  assign rg_increment_pc$EN = 1'b1 ;

  // register wr_effective_address
  assign wr_effective_address$D_IN =
	     wr_flush_decode_cache_1$whas ? fn_branch___d98[36:5] : 32'd0 ;
  assign wr_effective_address$EN = 1'd1 ;

  // register wr_effective_address1
  assign wr_effective_address1$D_IN =
	     wr_flush_all_1$whas ? register_file$csr_access[64:33] : 32'd0 ;
  assign wr_effective_address1$EN = 1'd1 ;

  // register wr_flush_all
  assign wr_flush_all$D_IN = wr_flush_all_1$whas ;
  assign wr_flush_all$EN = 1'd1 ;

  // register wr_flush_decode_cache
  assign wr_flush_decode_cache$D_IN = wr_flush_decode_cache_1$whas ;
  assign wr_flush_decode_cache$EN = 1'd1 ;

  // submodule alu_unit
  assign alu_unit$inputs__funct3 = ff_id_ie$D_OUT[73:71] ;
  assign alu_unit$inputs__funct7 = ff_id_ie$D_OUT[70:64] ;
  assign alu_unit$inputs__immediate_value = ff_id_ie$D_OUT[63:44] ;
  assign alu_unit$inputs__opcode = ff_id_ie$D_OUT[78:74] ;
  assign alu_unit$inputs__operand1 = ff_id_ie$D_OUT[174:143] ;
  assign alu_unit$inputs__operand2 = ff_id_ie$D_OUT[142:111] ;
  assign alu_unit$inputs__operand3 = ff_id_ie$D_OUT[110:79] ;
  assign alu_unit$inputs_is_imm = ff_id_ie$D_OUT[43] ;
  assign alu_unit$inputs_program_counter = ff_id_ie$D_OUT[42:11] ;
  assign alu_unit$EN_inputs =
	     WILL_FIRE_RL_rl_execute && ff_id_ie$D_OUT[176:175] != 2'd0 &&
	     ff_id_ie$D_OUT[176:175] != 2'd1 ;

  // submodule bpu
  assign bpu$_flush_new_pc_ =
	     WILL_FIRE_RL_rl_flush_first_two_stages ?
	       wr_effective_address :
	       wr_effective_address1 ;
  assign bpu$_training_addr = fn_branch___d98[70:39] ;
  assign bpu$_training_branch_taken_or_not = fn_branch___d98[38] ;
  assign bpu$_training_pc = x_program_counter__h2992 ;
  assign bpu$EN__training =
	     WILL_FIRE_RL_rl_decode_and_operand_fetch &&
	     fn_decoder___d67[61:60] != 2'd3 &&
	     fn_decoder___d67[61:60] != 2'd1 &&
	     NOT_fn_decoder_7_BITS_61_TO_60_8_EQ_2_1_35_AND_ETC___d147 ;
  assign bpu$EN_send_output_ = CAN_FIRE_RL_rl_send_pc_fetch_request ;
  assign bpu$EN_deq_fifo =
	     WILL_FIRE_RL_rg_receive_instruction && !rg_increment_pc ;
  assign bpu$EN__flush =
	     WILL_FIRE_RL_rl_flush_first_two_stages || wr_flush_all ;

  // submodule ff_id_ie
  assign ff_id_ie$D_IN =
	     { CASE_fn_decoder_7_BITS_61_TO_60_1_0_CONCAT_DON_ETC__q2,
	       ff_if_id$D_OUT[69:38],
	       (fn_decoder___d67[61:60] == 2'd1) ?
		 11'd1152 :
		 { ff_if_id$D_OUT[4],
		   CASE_ff_if_idD_OUT_BITS_3_TO_0_0_ff_if_idD_O_ETC__q3,
		   fn_decoder___d67[44:39] } } ;
  assign ff_id_ie$ENQ =
	     WILL_FIRE_RL_rl_decode_and_operand_fetch &&
	     fn_decoder___d67[61:60] != 2'd3 &&
	     (fn_decoder___d67[61:60] == 2'd1 ||
	      fn_decoder___d67[61:60] == 2'd2 ||
	      register_file$_inputs_from_decode_stage[96]) ;
  assign ff_id_ie$DEQ =
	     WILL_FIRE_RL_rl_execute &&
	     (alu_unit$inputs[80:79] == 2'd0 ||
	      alu_unit$inputs[80:79] == 2'd1 ||
	      ff_id_ie$D_OUT[176:175] == 2'd0 ||
	      ff_id_ie$D_OUT[176:175] == 2'd1) ;
  assign ff_id_ie$CLR = wr_flush_all ;

  // submodule ff_ie_imem
  assign ff_ie_imem$D_IN =
	     { (ff_id_ie$D_OUT[176:175] != 2'd0 &&
		ff_id_ie$D_OUT[176:175] != 2'd1) ?
		 alu_unit$inputs[80:5] :
		 { 2'd0, ff_id_ie$D_OUT[116:43] },
	       ff_id_ie$D_OUT[176:175] == 2'd1,
	       ff_id_ie$D_OUT[42:11],
	       (ff_id_ie$D_OUT[176:175] != 2'd0 &&
		ff_id_ie$D_OUT[176:175] != 2'd1) ?
		 { (alu_unit$inputs[80:79] == 2'd0) ?
		     ff_id_ie$D_OUT[10] || alu_unit$inputs[4] :
		     ff_id_ie$D_OUT[10],
		   ((alu_unit$inputs[80:79] == 2'd0) ?
		      (ff_id_ie$D_OUT[10] ?
			 ff_id_ie$D_OUT[9:6] == 4'd0 :
			 alu_unit$inputs[3:0] == 4'd0) :
		      ff_id_ie$D_OUT[9:6] == 4'd0) ?
		     4'd0 :
		     (((alu_unit$inputs[80:79] == 2'd0) ?
			 (ff_id_ie$D_OUT[10] ?
			    ff_id_ie$D_OUT[9:6] == 4'd1 :
			    alu_unit$inputs[3:0] == 4'd1) :
			 ff_id_ie$D_OUT[9:6] == 4'd1) ?
			4'd1 :
			(((alu_unit$inputs[80:79] == 2'd0) ?
			    (ff_id_ie$D_OUT[10] ?
			       ff_id_ie$D_OUT[9:6] == 4'd2 :
			       alu_unit$inputs[3:0] == 4'd2) :
			    ff_id_ie$D_OUT[9:6] == 4'd2) ?
			   4'd2 :
			   (((alu_unit$inputs[80:79] == 2'd0) ?
			       (ff_id_ie$D_OUT[10] ?
				  ff_id_ie$D_OUT[9:6] == 4'd3 :
				  alu_unit$inputs[3:0] == 4'd3) :
			       ff_id_ie$D_OUT[9:6] == 4'd3) ?
			      4'd3 :
			      (((alu_unit$inputs[80:79] == 2'd0) ?
				  (ff_id_ie$D_OUT[10] ?
				     ff_id_ie$D_OUT[9:6] == 4'd4 :
				     alu_unit$inputs[3:0] == 4'd4) :
				  ff_id_ie$D_OUT[9:6] == 4'd4) ?
				 4'd4 :
				 (((alu_unit$inputs[80:79] == 2'd0) ?
				     (ff_id_ie$D_OUT[10] ?
					ff_id_ie$D_OUT[9:6] == 4'd5 :
					alu_unit$inputs[3:0] == 4'd5) :
				     ff_id_ie$D_OUT[9:6] == 4'd5) ?
				    4'd5 :
				    (((alu_unit$inputs[80:79] == 2'd0) ?
					(ff_id_ie$D_OUT[10] ?
					   ff_id_ie$D_OUT[9:6] == 4'd6 :
					   alu_unit$inputs[3:0] == 4'd6) :
					ff_id_ie$D_OUT[9:6] == 4'd6) ?
				       4'd6 :
				       (((alu_unit$inputs[80:79] == 2'd0) ?
					   (ff_id_ie$D_OUT[10] ?
					      ff_id_ie$D_OUT[9:6] == 4'd7 :
					      alu_unit$inputs[3:0] == 4'd7) :
					   ff_id_ie$D_OUT[9:6] == 4'd7) ?
					  4'd7 :
					  (((alu_unit$inputs[80:79] == 2'd0) ?
					      (ff_id_ie$D_OUT[10] ?
						 ff_id_ie$D_OUT[9:6] == 4'd8 :
						 alu_unit$inputs[3:0] ==
						 4'd8) :
					      ff_id_ie$D_OUT[9:6] == 4'd8) ?
					     4'd8 :
					     4'd11)))))))) } :
		 { ff_id_ie$D_OUT[10],
		   CASE_ff_id_ieD_OUT_BITS_9_TO_6_0_ff_id_ieD_O_ETC__q4 },
	       ff_id_ie$D_OUT[5:0] } ;
  assign ff_ie_imem$ENQ =
	     WILL_FIRE_RL_rl_execute &&
	     (alu_unit$inputs[80:79] == 2'd0 ||
	      alu_unit$inputs[80:79] == 2'd1 ||
	      ff_id_ie$D_OUT[176:175] == 2'd0 ||
	      ff_id_ie$D_OUT[176:175] == 2'd1) ;
  assign ff_ie_imem$DEQ =
	     WILL_FIRE_RL_rl_memory_stage &&
	     (ff_ie_imem$D_OUT[119:118] == 2'd1 &&
	      mem_unit$communicate_with_core[69] ||
	      ff_ie_imem$D_OUT[119:118] == 2'd0) ;
  assign ff_ie_imem$CLR = wr_flush_all ;

  // submodule ff_if_id
  assign ff_if_id$D_IN =
	     { icache$response_to_cpu[31:0],
	       icache$response_to_cpu[65:34],
	       bpu$pred_type,
	       icache$response_to_cpu[32] || icache$response_to_cpu[33],
	       icache$response_to_cpu[32] ? 4'd0 : 4'd1 } ;
  assign ff_if_id$ENQ = CAN_FIRE_RL_rg_receive_instruction ;
  assign ff_if_id$DEQ =
	     WILL_FIRE_RL_rl_decode_and_operand_fetch &&
	     (fn_decoder___d67[61:60] == 2'd3 ||
	      fn_decoder___d67[61:60] == 2'd1 ||
	      fn_decoder___d67[61:60] == 2'd2 ||
	      register_file$_inputs_from_decode_stage[96]) ;
  assign ff_if_id$CLR =
	     wr_flush_all || WILL_FIRE_RL_rl_flush_first_two_stages ;

  // submodule ff_imem_iwb
  assign ff_imem_iwb$D_IN =
	     (ff_ie_imem$D_OUT[119:118] == 2'd1) ?
	       { mem_unit$communicate_with_core[31:0],
		 mem_unit$communicate_with_core[68:37],
		 5'd0,
		 ff_ie_imem$D_OUT[43:11],
		 ff_ie_imem$D_OUT[10] || mem_unit$communicate_with_core[36],
		 (ff_ie_imem$D_OUT[10] ?
		    ff_ie_imem$D_OUT[9:6] == 4'd0 :
		    mem_unit$communicate_with_core[35:32] == 4'd0) ?
		   4'd0 :
		   ((ff_ie_imem$D_OUT[10] ?
		       ff_ie_imem$D_OUT[9:6] == 4'd1 :
		       mem_unit$communicate_with_core[35:32] == 4'd1) ?
		      4'd1 :
		      ((ff_ie_imem$D_OUT[10] ?
			  ff_ie_imem$D_OUT[9:6] == 4'd2 :
			  mem_unit$communicate_with_core[35:32] == 4'd2) ?
			 4'd2 :
			 ((ff_ie_imem$D_OUT[10] ?
			     ff_ie_imem$D_OUT[9:6] == 4'd3 :
			     mem_unit$communicate_with_core[35:32] == 4'd3) ?
			    4'd3 :
			    ((ff_ie_imem$D_OUT[10] ?
				ff_ie_imem$D_OUT[9:6] == 4'd4 :
				mem_unit$communicate_with_core[35:32] ==
				4'd4) ?
			       4'd4 :
			       ((ff_ie_imem$D_OUT[10] ?
				   ff_ie_imem$D_OUT[9:6] == 4'd5 :
				   mem_unit$communicate_with_core[35:32] ==
				   4'd5) ?
				  4'd5 :
				  ((ff_ie_imem$D_OUT[10] ?
				      ff_ie_imem$D_OUT[9:6] == 4'd6 :
				      mem_unit$communicate_with_core[35:32] ==
				      4'd6) ?
				     4'd6 :
				     ((ff_ie_imem$D_OUT[10] ?
					 ff_ie_imem$D_OUT[9:6] == 4'd7 :
					 mem_unit$communicate_with_core[35:32] ==
					 4'd7) ?
					4'd7 :
					((ff_ie_imem$D_OUT[10] ?
					    ff_ie_imem$D_OUT[9:6] == 4'd8 :
					    mem_unit$communicate_with_core[35:32] ==
					    4'd8) ?
					   4'd8 :
					   4'd11)))))))),
		 ff_ie_imem$D_OUT[5:0] } :
	       { 32'hAAAAAAAA /* unspecified value */ ,
		 ff_ie_imem$D_OUT[80:10],
		 CASE_ff_ie_imemD_OUT_BITS_9_TO_6_0_ff_ie_imem_ETC__q5,
		 ff_ie_imem$D_OUT[5:0] } ;
  assign ff_imem_iwb$ENQ =
	     WILL_FIRE_RL_rl_memory_stage &&
	     (ff_ie_imem$D_OUT[119:118] == 2'd1 &&
	      mem_unit$communicate_with_core[69] ||
	      ff_ie_imem$D_OUT[119:118] == 2'd0) ;
  assign ff_imem_iwb$DEQ = ff_imem_iwb$EMPTY_N ;
  assign ff_imem_iwb$CLR = 1'b0 ;

  // submodule icache
  assign icache$cache_enable_enable_ = 1'b0 ;
  assign icache$request_from_cpu_req = bpu$send_output_[32:1] ;
  assign icache$response_from_memory_resp = _instruction_inputs_mem_data ;
  assign icache$EN_request_from_cpu = CAN_FIRE_RL_rl_send_pc_fetch_request ;
  assign icache$EN_response_to_cpu = CAN_FIRE_RL_rg_receive_instruction ;
  assign icache$EN_request_to_memory = EN_instruction_outputs_ ;
  assign icache$EN_response_from_memory = EN__instruction_inputs ;
  assign icache$EN_cache_enable = 1'b0 ;
  assign icache$EN_flush =
	     wr_flush_all || WILL_FIRE_RL_rl_flush_first_two_stages ;

  // submodule mem_unit
  assign mem_unit$communicate_with_core_execdata = ff_ie_imem$D_OUT[117:44] ;
  assign mem_unit$response_from_memory_read_mem_data =
	     dcache_response_from_memory_read_mem_data ;
  assign mem_unit$response_from_memory_write_mem_data =
	     dcache_response_from_memory_write_mem_data ;
  assign mem_unit$EN_response_from_memory_write =
	     EN_dcache_response_from_memory_write ;
  assign mem_unit$EN_response_from_memory_read =
	     EN_dcache_response_from_memory_read ;
  assign mem_unit$EN_request_to_memory_read =
	     EN_dcache_request_to_memory_read ;
  assign mem_unit$EN_request_to_memory_write =
	     EN_dcache_request_to_memory_write ;
  assign mem_unit$EN_communicate_with_core =
	     WILL_FIRE_RL_rl_memory_stage &&
	     ff_ie_imem$D_OUT[119:118] == 2'd1 ;

  // submodule register_file
  assign register_file$_forwarding_from_execution_data =
	     { wr_forward_from_EXE$whas && wr_forward_from_EXE$wget[39],
	       wr_forward_from_EXE$wget[38:0] } ;
  assign register_file$_forwarding_from_memory_data =
	     { wr_forward_from_MEM$whas && wr_forward_from_MEM$wget[39],
	       wr_forward_from_MEM$wget[38:0] } ;
  assign register_file$_inputs_from_decode_stage_rs1_addr =
	     fn_decoder___d67[59:55] ;
  assign register_file$_inputs_from_decode_stage_rs1_type =
	     fn_decoder___d67[38] ;
  assign register_file$_inputs_from_decode_stage_rs2_addr =
	     fn_decoder___d67[54:50] ;
  assign register_file$_inputs_from_decode_stage_rs2_type =
	     fn_decoder___d67[37] ;
  assign register_file$_inputs_from_decode_stage_rs3_addr =
	     fn_decoder___d67[49:45] ;
  assign register_file$_print_all_rf_pc = wr_write_back_pc$wget[31:0] ;
  assign register_file$csr_access_destination = ff_imem_iwb$D_OUT[5:1] ;
  assign register_file$csr_access_inst =
	     { 32'd0,
	       ff_imem_iwb$D_OUT[43],
	       ff_imem_iwb$D_OUT[10],
	       CASE_ff_imem_iwbD_OUT_BITS_9_TO_6_0_ff_imem_i_ETC__q6,
	       ff_imem_iwb$D_OUT[42:11],
	       ff_imem_iwb$D_OUT[112:44] } ;
  assign register_file$csr_access_rd_type = ff_imem_iwb$D_OUT[0] ;
  assign register_file$mtip_mtip1 = mtip_mtip1 ;
  assign register_file$sin_in = sin_in ;
  assign register_file$EN__inputs_from_decode_stage =
	     WILL_FIRE_RL_rl_decode_and_operand_fetch &&
	     fn_decoder___d67[61:60] != 2'd3 &&
	     fn_decoder___d67[61:60] != 2'd1 &&
	     fn_decoder___d67[61:60] != 2'd2 ;
  assign register_file$EN__forwarding_from_memory = 1'd1 ;
  assign register_file$EN__forwarding_from_execution = 1'd1 ;
  assign register_file$EN_sin = EN_sin ;
  assign register_file$EN__print_all_rf =
	     register_file$RDY__print_all_rf && ff_imem_iwb$EMPTY_N &&
	     wr_write_back_pc$wget[32] ;
  assign register_file$EN_csr_access = ff_imem_iwb$EMPTY_N ;
  assign register_file$EN_mtip = EN_mtip ;

  // remaining internal signals
  module_fn_decoder instance_fn_decoder_0(.fn_decoder__instruction(ff_if_id$D_OUT[37:6]),
					  .fn_decoder_pred_type(ff_if_id$D_OUT[5]),
					  .fn_decoder(fn_decoder___d67));
  module_fn_branch instance_fn_branch_1(.fn_branch__opcode(x_opcode__h2828),
					.fn_branch__funct3(x_funct3__h2829),
					.fn_branch__current_pc(x_program_counter__h2992),
					.fn_branch__immediate_value(fn_decoder___d67[21:2]),
					.fn_branch__operand1(register_file$_inputs_from_decode_stage[95:64]),
					.fn_branch__operand2(register_file$_inputs_from_decode_stage[63:32]),
					.fn_branch__prediction(ff_if_id$D_OUT[5]),
					.fn_branch(fn_branch___d98));
  assign NOT_fn_decoder_7_BITS_61_TO_60_8_EQ_2_1_35_AND_ETC___d147 =
	     fn_decoder___d67[61:60] != 2'd2 &&
	     register_file$_inputs_from_decode_stage[96] &&
	     (fn_decoder___d67[36:32] == 5'b11000 ||
	      fn_decoder___d67[36:32] == 5'b11011 ||
	      fn_decoder___d67[36:32] == 5'b11001) ;
  assign aluresult__h3110 = { 7'd0, x__h3114 } ;
  assign register_file__inputs_from_decode_stage_2_BIT__ETC___d153 =
	     register_file$_inputs_from_decode_stage[96] &&
	     (fn_decoder___d67[36:32] == 5'b11000 ||
	      fn_decoder___d67[36:32] == 5'b11011 ||
	      fn_decoder___d67[36:32] == 5'b11001) &&
	     fn_branch___d98[37] ;
  assign register_file__inputs_from_decode_stage_2_BIT__ETC___d160 =
	     register_file$_inputs_from_decode_stage[96] &&
	     (fn_decoder___d67[36:32] == 5'b11000 ||
	      fn_decoder___d67[36:32] == 5'b11011 ||
	      fn_decoder___d67[36:32] == 5'b11001) &&
	     !fn_branch___d98[37] ;
  assign x__h3114 =
	     { fn_decoder___d67[36:29],
	       fn_decoder___d67[13:2],
	       fn_decoder___d67[59:55] } ;
  assign x_funct3__h2829 = fn_decoder___d67[31:29] ;
  assign x_opcode__h2828 = fn_decoder___d67[36:32] ;
  assign x_program_counter__h2992 = ff_if_id$D_OUT[69:38] ;
  always@(fn_decoder___d67 or
	  register_file$_inputs_from_decode_stage or fn_branch___d98)
  begin
    case (fn_decoder___d67[36:32])
      5'b11000, 5'b11001, 5'b11011:
	  CASE_fn_decoder_7_BITS_36_TO_32_0b11000_0_CONC_ETC__q1 =
	      { 2'd0,
		95'h2AAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ,
		fn_branch___d98[134:103],
		5'd0 };
      default: CASE_fn_decoder_7_BITS_36_TO_32_0b11000_0_CONC_ETC__q1 =
		   { 2'd2,
		     register_file$_inputs_from_decode_stage[95:0],
		     fn_decoder___d67[36:1] };
    endcase
  end
  always@(fn_decoder___d67 or
	  CASE_fn_decoder_7_BITS_36_TO_32_0b11000_0_CONC_ETC__q1 or
	  aluresult__h3110)
  begin
    case (fn_decoder___d67[61:60])
      2'd1:
	  CASE_fn_decoder_7_BITS_61_TO_60_1_0_CONCAT_DON_ETC__q2 =
	      { 2'd0,
		95'h2AAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ,
		37'd0 };
      2'd2:
	  CASE_fn_decoder_7_BITS_61_TO_60_1_0_CONCAT_DON_ETC__q2 =
	      { 2'd1,
		95'h2AAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ,
		aluresult__h3110,
		5'd0 };
      default: CASE_fn_decoder_7_BITS_61_TO_60_1_0_CONCAT_DON_ETC__q2 =
		   CASE_fn_decoder_7_BITS_36_TO_32_0b11000_0_CONC_ETC__q1;
    endcase
  end
  always@(ff_if_id$D_OUT)
  begin
    case (ff_if_id$D_OUT[3:0])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd4, 4'd5, 4'd6, 4'd7, 4'd8:
	  CASE_ff_if_idD_OUT_BITS_3_TO_0_0_ff_if_idD_O_ETC__q3 =
	      ff_if_id$D_OUT[3:0];
      default: CASE_ff_if_idD_OUT_BITS_3_TO_0_0_ff_if_idD_O_ETC__q3 = 4'd11;
    endcase
  end
  always@(ff_id_ie$D_OUT)
  begin
    case (ff_id_ie$D_OUT[9:6])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd4, 4'd5, 4'd6, 4'd7, 4'd8:
	  CASE_ff_id_ieD_OUT_BITS_9_TO_6_0_ff_id_ieD_O_ETC__q4 =
	      ff_id_ie$D_OUT[9:6];
      default: CASE_ff_id_ieD_OUT_BITS_9_TO_6_0_ff_id_ieD_O_ETC__q4 = 4'd11;
    endcase
  end
  always@(ff_ie_imem$D_OUT)
  begin
    case (ff_ie_imem$D_OUT[9:6])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd4, 4'd5, 4'd6, 4'd7, 4'd8:
	  CASE_ff_ie_imemD_OUT_BITS_9_TO_6_0_ff_ie_imem_ETC__q5 =
	      ff_ie_imem$D_OUT[9:6];
      default: CASE_ff_ie_imemD_OUT_BITS_9_TO_6_0_ff_ie_imem_ETC__q5 = 4'd11;
    endcase
  end
  always@(ff_imem_iwb$D_OUT)
  begin
    case (ff_imem_iwb$D_OUT[9:6])
      4'd0, 4'd1, 4'd2, 4'd3, 4'd4, 4'd5, 4'd6, 4'd7, 4'd8:
	  CASE_ff_imem_iwbD_OUT_BITS_9_TO_6_0_ff_imem_i_ETC__q6 =
	      ff_imem_iwb$D_OUT[9:6];
      default: CASE_ff_imem_iwbD_OUT_BITS_9_TO_6_0_ff_imem_i_ETC__q6 = 4'd11;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_increment_pc <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wr_effective_address <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wr_effective_address1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	wr_flush_all <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wr_flush_decode_cache <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (rg_increment_pc$EN)
	  rg_increment_pc <= `BSV_ASSIGNMENT_DELAY rg_increment_pc$D_IN;
	if (wr_effective_address$EN)
	  wr_effective_address <= `BSV_ASSIGNMENT_DELAY
	      wr_effective_address$D_IN;
	if (wr_effective_address1$EN)
	  wr_effective_address1 <= `BSV_ASSIGNMENT_DELAY
	      wr_effective_address1$D_IN;
	if (wr_flush_all$EN)
	  wr_flush_all <= `BSV_ASSIGNMENT_DELAY wr_flush_all$D_IN;
	if (wr_flush_decode_cache$EN)
	  wr_flush_decode_cache <= `BSV_ASSIGNMENT_DELAY
	      wr_flush_decode_cache$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_increment_pc = 1'h0;
    wr_effective_address = 32'hAAAAAAAA;
    wr_effective_address1 = 32'hAAAAAAAA;
    wr_flush_all = 1'h0;
    wr_flush_decode_cache = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (ff_imem_iwb$EMPTY_N)
	begin
	  v__h7535 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (ff_imem_iwb$EMPTY_N)
	$display(v__h7535,
		 "\t*****************WRITE BACK STAGE*************************\t PC: %h",
		 ff_imem_iwb$D_OUT[42:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (ff_imem_iwb$EMPTY_N && register_file$csr_access[32])
	$display("Flushing the PIPE. Jumping to Address: %h",
		 register_file$csr_access[64:33]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_memory_stage && ff_ie_imem$D_OUT[119:118] == 2'd1)
	begin
	  v__h6637 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_memory_stage && ff_ie_imem$D_OUT[119:118] == 2'd1)
	$display(v__h6637,
		 "\t*****************MEMORY STAGE*************************\t PC: %h",
		 ff_ie_imem$D_OUT[42:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_memory_stage && ff_ie_imem$D_OUT[119:118] == 2'd0)
	begin
	  v__h6675 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_memory_stage && ff_ie_imem$D_OUT[119:118] == 2'd0)
	$display(v__h6675,
		 "\t*****************MEMORY STAGE BYPASSED********************\t PC: %h",
		 ff_ie_imem$D_OUT[42:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_memory_stage && ff_ie_imem$D_OUT[119:118] == 2'd0)
	begin
	  v__h7231 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_memory_stage && ff_ie_imem$D_OUT[119:118] == 2'd0)
	$write(v__h7231,
	       "\t MEM_STAGE: Forwarding: Rd: %d %h",
	       ff_ie_imem$D_OUT[5:1],
	       ff_ie_imem$D_OUT[80:49],
	       " ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_memory_stage && ff_ie_imem$D_OUT[119:118] == 2'd0 &&
	  ff_ie_imem$D_OUT[0])
	$write("FloatingRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_memory_stage && ff_ie_imem$D_OUT[119:118] == 2'd0 &&
	  !ff_ie_imem$D_OUT[0])
	$write("IntegerRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_memory_stage && ff_ie_imem$D_OUT[119:118] == 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_execute && ff_id_ie$D_OUT[176:175] != 2'd0 &&
	  ff_id_ie$D_OUT[176:175] != 2'd1)
	begin
	  v__h4864 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_execute && ff_id_ie$D_OUT[176:175] != 2'd0 &&
	  ff_id_ie$D_OUT[176:175] != 2'd1)
	$display(v__h4864,
		 "\t********** EXECUTION STAGE FIRING ************ PC: :%h",
		 ff_id_ie$D_OUT[42:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_execute && ff_id_ie$D_OUT[176:175] != 2'd0 &&
	  ff_id_ie$D_OUT[176:175] != 2'd1)
	begin
	  v__h4977 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_execute && ff_id_ie$D_OUT[176:175] != 2'd0 &&
	  ff_id_ie$D_OUT[176:175] != 2'd1)
	$display(v__h4977, "\tExecution: ALU Operation");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_execute && ff_id_ie$D_OUT[176:175] != 2'd0 &&
	  ff_id_ie$D_OUT[176:175] != 2'd1)
	begin
	  v__h5017 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_execute && ff_id_ie$D_OUT[176:175] != 2'd0 &&
	  ff_id_ie$D_OUT[176:175] != 2'd1)
	$display(v__h5017,
		 "\t Rs1: %h Rs2: %h Rs3: %h Immediate: %h",
		 ff_id_ie$D_OUT[174:143],
		 ff_id_ie$D_OUT[142:111],
		 ff_id_ie$D_OUT[110:79],
		 ff_id_ie$D_OUT[63:44]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_execute && ff_id_ie$D_OUT[176:175] == 2'd0)
	begin
	  v__h4900 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_execute && ff_id_ie$D_OUT[176:175] == 2'd0)
	$display(v__h4900,
		 "\t********** EXECUTION STAGE FIRING ************ PC: :%h",
		 ff_id_ie$D_OUT[42:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_execute && ff_id_ie$D_OUT[176:175] == 2'd0)
	begin
	  v__h5905 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_execute && ff_id_ie$D_OUT[176:175] == 2'd0)
	$display(v__h5905, "\tExecution: BRANCH Instruction");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_execute && ff_id_ie$D_OUT[176:175] == 2'd1)
	begin
	  v__h4934 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_execute && ff_id_ie$D_OUT[176:175] == 2'd1)
	$display(v__h4934,
		 "\t********** EXECUTION STAGE FIRING ************ PC: :%h",
		 ff_id_ie$D_OUT[42:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_execute && ff_id_ie$D_OUT[176:175] == 2'd1)
	begin
	  v__h6179 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_execute && ff_id_ie$D_OUT[176:175] == 2'd1)
	$display(v__h6179, "\tExecution: SYSTEM Instruction");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_decode_and_operand_fetch &&
	  fn_decoder___d67[61:60] == 2'd1)
	begin
	  v__h2936 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_decode_and_operand_fetch &&
	  fn_decoder___d67[61:60] == 2'd1)
	$display(v__h2936, "\tDC_STAGE: ILLEGAL INSTRUCTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_decode_and_operand_fetch &&
	  fn_decoder___d67[61:60] != 2'd3 &&
	  fn_decoder___d67[61:60] != 2'd1 &&
	  fn_decoder___d67[61:60] != 2'd2 &&
	  register_file$_inputs_from_decode_stage[96])
	begin
	  v__h3501 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_decode_and_operand_fetch &&
	  fn_decoder___d67[61:60] != 2'd3 &&
	  fn_decoder___d67[61:60] != 2'd1 &&
	  fn_decoder___d67[61:60] != 2'd2 &&
	  register_file$_inputs_from_decode_stage[96])
	$display(v__h3501, "\tGOT VALID OPERANDS");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_decode_and_operand_fetch &&
	  fn_decoder___d67[61:60] != 2'd3 &&
	  fn_decoder___d67[61:60] != 2'd1 &&
	  NOT_fn_decoder_7_BITS_61_TO_60_8_EQ_2_1_35_AND_ETC___d147)
	begin
	  v__h3587 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_decode_and_operand_fetch &&
	  fn_decoder___d67[61:60] != 2'd3 &&
	  fn_decoder___d67[61:60] != 2'd1 &&
	  NOT_fn_decoder_7_BITS_61_TO_60_8_EQ_2_1_35_AND_ETC___d147)
	$display(v__h3587, "\t Sending inputs to branch unit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_decode_and_operand_fetch &&
	  fn_decoder___d67[61:60] != 2'd3 &&
	  fn_decoder___d67[61:60] != 2'd1 &&
	  fn_decoder___d67[61:60] != 2'd2 &&
	  register_file__inputs_from_decode_stage_2_BIT__ETC___d153)
	begin
	  v__h3843 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_decode_and_operand_fetch &&
	  fn_decoder___d67[61:60] != 2'd3 &&
	  fn_decoder___d67[61:60] != 2'd1 &&
	  fn_decoder___d67[61:60] != 2'd2 &&
	  register_file__inputs_from_decode_stage_2_BIT__ETC___d153)
	$display(v__h3843,
		 " Correct Prediction PC: %h",
		 ff_if_id$D_OUT[69:38]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_decode_and_operand_fetch &&
	  fn_decoder___d67[61:60] != 2'd3 &&
	  fn_decoder___d67[61:60] != 2'd1 &&
	  fn_decoder___d67[61:60] != 2'd2 &&
	  register_file__inputs_from_decode_stage_2_BIT__ETC___d160)
	begin
	  v__h3720 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_decode_and_operand_fetch &&
	  fn_decoder___d67[61:60] != 2'd3 &&
	  fn_decoder___d67[61:60] != 2'd1 &&
	  fn_decoder___d67[61:60] != 2'd2 &&
	  register_file__inputs_from_decode_stage_2_BIT__ETC___d160)
	$display(v__h3720,
		 "\tMisprediction PC : %h New PC: %h",
		 ff_if_id$D_OUT[69:38],
		 fn_branch___d98[36:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_decode_and_operand_fetch &&
	  fn_decoder___d67[61:60] != 2'd3 &&
	  fn_decoder___d67[61:60] != 2'd1 &&
	  fn_decoder___d67[61:60] != 2'd2 &&
	  !register_file$_inputs_from_decode_stage[96])
	begin
	  v__h4404 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_decode_and_operand_fetch &&
	  fn_decoder___d67[61:60] != 2'd3 &&
	  fn_decoder___d67[61:60] != 2'd1 &&
	  fn_decoder___d67[61:60] != 2'd2 &&
	  !register_file$_inputs_from_decode_stage[96])
	$display(v__h4404, "\tWaiting for valid operands");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_decode_and_operand_fetch)
	begin
	  v__h4526 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_decode_and_operand_fetch)
	$display(v__h4526, "\t********** DECODE STAGE FIRING ************");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_decode_and_operand_fetch)
	begin
	  v__h4566 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_decode_and_operand_fetch)
	$write(v__h4566,
	       "\tDC_STAGE:\tInstruction : %h PC : %h is ",
	       ff_if_id$D_OUT[37:6],
	       ff_if_id$D_OUT[69:38],
	       " ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_decode_and_operand_fetch &&
	  fn_decoder___d67[61:60] == 2'd0)
	$write("ALU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_decode_and_operand_fetch &&
	  fn_decoder___d67[61:60] == 2'd1)
	$write("ILLEGAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_decode_and_operand_fetch &&
	  fn_decoder___d67[61:60] == 2'd2)
	$write("SYSTEM_INSTR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_decode_and_operand_fetch &&
	  fn_decoder___d67[61:60] != 2'd0 &&
	  fn_decoder___d67[61:60] != 2'd1 &&
	  fn_decoder___d67[61:60] != 2'd2)
	$write("NOP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_decode_and_operand_fetch) $write(" Rd_type: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_decode_and_operand_fetch && fn_decoder___d67[39])
	$write("FloatingRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_decode_and_operand_fetch && !fn_decoder___d67[39])
	$write("IntegerRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_decode_and_operand_fetch) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_decode_and_operand_fetch)
	begin
	  v__h4629 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_decode_and_operand_fetch)
	$write(v__h4629, "\tRs1: %d", fn_decoder___d67[59:55], " ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_decode_and_operand_fetch && fn_decoder___d67[38])
	$write("FloatingRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_decode_and_operand_fetch && !fn_decoder___d67[38])
	$write("IntegerRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_decode_and_operand_fetch)
	$write(" Rs2: %d", fn_decoder___d67[54:50], " ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_decode_and_operand_fetch && fn_decoder___d67[37])
	$write("FloatingRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_decode_and_operand_fetch && !fn_decoder___d67[37])
	$write("IntegerRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_decode_and_operand_fetch)
	$write(" Rs3: %d",
	       fn_decoder___d67[49:45],
	       " Rd: %d",
	       fn_decoder___d67[44:40],
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_flush_first_two_stages)
	begin
	  v__h2166 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_flush_first_two_stages)
	$display(v__h2166, "\tFlushing the fetch stage alone");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rg_receive_instruction)
	begin
	  v__h2561 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rg_receive_instruction)
	$display(v__h2561,
		 "\t************* FETCH STAGE FIRING ************ PC: %h",
		 icache$response_to_cpu[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rg_receive_instruction)
	begin
	  v__h2609 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rg_receive_instruction)
	$write(v__h2609,
	       "\tInstruction Fetched: %h \t PC: %h Prediction: ",
	       icache$response_to_cpu[65:34],
	       icache$response_to_cpu[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rg_receive_instruction && bpu$pred_type)
	$write("Predicted_notaken");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rg_receive_instruction && !bpu$pred_type)
	$write("Predicted_taken");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rg_receive_instruction) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_pc_fetch_request)
	begin
	  v__h2464 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_pc_fetch_request)
	$display(v__h2464,
		 "\tFETCH: Address sent to I-Cache: %h",
		 bpu$send_output_[32:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (register_file$RDY__print_all_rf) $display("\t\n\n");
  end
  // synopsys translate_on
endmodule  // mkriscv

