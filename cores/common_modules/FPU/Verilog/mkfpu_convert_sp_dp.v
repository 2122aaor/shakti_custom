//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// On Fri Jan 22 01:17:35 IST 2016
//
//
// Ports:
// Name                         I/O  size props
// RDY__start                     O     1
// result_                        O   105
// RDY_result_                    O     1
// RDY__deque_buffer              O     1
// RDY__set_flush                 O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// _start_input_fp                I    64
// _start_is_dp                   I     1
// _start_destination             I     5
// _start_fsr                     I    32
// _start_rob_number              I     4 unused
// _start_pc                      I    32 unused
// _set_flush_f                   I     1
// EN__start                      I     1
// EN__deque_buffer               I     1
// EN__set_flush                  I     1
//
// Combinational paths from inputs to outputs:
//   EN__deque_buffer -> RDY__start
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkfpu_convert_sp_dp(CLK,
			   RST_N,

			   _start_input_fp,
			   _start_is_dp,
			   _start_destination,
			   _start_fsr,
			   _start_rob_number,
			   _start_pc,
			   EN__start,
			   RDY__start,

			   result_,
			   RDY_result_,

			   EN__deque_buffer,
			   RDY__deque_buffer,

			   _set_flush_f,
			   EN__set_flush,
			   RDY__set_flush);
  input  CLK;
  input  RST_N;

  // action method _start
  input  [63 : 0] _start_input_fp;
  input  _start_is_dp;
  input  [4 : 0] _start_destination;
  input  [31 : 0] _start_fsr;
  input  [3 : 0] _start_rob_number;
  input  [31 : 0] _start_pc;
  input  EN__start;
  output RDY__start;

  // value method result_
  output [104 : 0] result_;
  output RDY_result_;

  // action method _deque_buffer
  input  EN__deque_buffer;
  output RDY__deque_buffer;

  // action method _set_flush
  input  _set_flush_f;
  input  EN__set_flush;
  output RDY__set_flush;

  // signals for module outputs
  wire [104 : 0] result_;
  wire RDY__deque_buffer, RDY__set_flush, RDY__start, RDY_result_;

  // inlined wires
  wire [105 : 0] ff_final_out_rv$port1__read,
		 ff_final_out_rv$port1__write_1,
		 ff_final_out_rv$port2__read,
		 ff_final_out_rv$port3__read;

  // register ff_final_out_rv
  reg [105 : 0] ff_final_out_rv;
  wire [105 : 0] ff_final_out_rv$D_IN;
  wire ff_final_out_rv$EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_flush_output_fifo,
       CAN_FIRE__deque_buffer,
       CAN_FIRE__set_flush,
       CAN_FIRE__start,
       WILL_FIRE_RL_rl_flush_output_fifo,
       WILL_FIRE__deque_buffer,
       WILL_FIRE__set_flush,
       WILL_FIRE__start;

  // remaining internal signals
  reg [2 : 0] CASE_ff_final_out_rv_BITS_3_TO_1_0_ff_final_ou_ETC__q1;
  reg IF_start_fsr_BITS_7_TO_5_7_EQ_0b0_8_THEN_IF_st_ETC___d76;
  wire [63 : 0] _theResult___snd_fst__h638,
		lv_result__h1882,
		v_final_result__h557;
  wire [52 : 0] IF_lv_is_denormal___2871_THEN_lv_mantissa___10_ETC__q2,
		IF_start_input_fp_BITS_62_TO_52_EQ_1_9_AND_NOT_ETC___d41,
		_theResult_____2_fst__h2060,
		_theResult_____2_fst__h2097,
		_theResult_____6_fst__h1117,
		_theResult_____6_fst__h962,
		_theResult_____6_fst__h992,
		_theResult_____6_fst__h999,
		lv_mantissa___1__h2028,
		lv_mantissa___1__h2100,
		lv_mantissa___2__h1875;
  wire [31 : 0] lv_fsr___1__h635, v_fsr__h556;
  wire [30 : 0] IF_IF_IF_start_fsr_BITS_7_TO_5_7_EQ_0b0_8_THEN_ETC___d125;
  wire [24 : 0] IF_IF_start_fsr_BITS_7_TO_5_7_EQ_0b0_8_THEN_IF_ETC___d122,
		spliced_bits__h1609;
  wire [10 : 0] IF_IF_start_fsr_BITS_7_TO_5_7_EQ_0b0_8_THEN_IF_ETC___d100,
		_theResult_____2_snd__h2061,
		_theResult_____2_snd__h2071,
		_theResult_____2_snd__h2098,
		_theResult_____3_snd_fst__h1572,
		_theResult_____6_snd_fst__h1293,
		_theResult_____6_snd_fst__h1297,
		_theResult_____6_snd_fst__h1301,
		_theResult_____6_snd_fst__h1305,
		_theResult_____6_snd_fst__h1313,
		lv_exponent___1__h1199,
		lv_exponent___1__h1776,
		lv_exponent___1__h2029,
		lv_exponent___1__h2099,
		lv_exponent___2__h1877,
		lv_exponent___2__h1881,
		lv_exponent__h614,
		lv_mantissa_shift_temp__h1121,
		x__h2046,
		y__h2048;
  wire [5 : 0] IF_IF_IF_INV_start_input_fp_BITS_30_TO_23_27_E_ETC___d267;
  wire [4 : 0] IF_IF_INV_start_input_fp_BITS_30_TO_23_27_EQ_0_ETC___d221,
	       IF_IF_start_input_fp_BIT_7_25_OR_start_input_f_ETC___d262;
  wire [3 : 0] IF_INV_start_input_fp_BITS_30_TO_23_27_EQ_0_33_ETC___d179,
	       IF_NOT_start_is_dp_84_OR_NOT_IF_IF_start_fsr_B_ETC___d299,
	       IF_start_input_fp_BIT_15_83_OR_start_input_fp__ETC___d216,
	       IF_start_input_fp_BIT_7_25_OR_start_input_fp_B_ETC___d258;
  wire [1 : 0] p0_l1__h2155,
	       p1_l1__h2157,
	       p2_l1__h2159,
	       p3_l1__h2161,
	       p4_l1__h2163,
	       p5_l1__h2165;
  wire NOT_IF_IF_start_fsr_BITS_7_TO_5_7_EQ_0b0_8_THE_ETC___d290,
       NOT_start_input_fp_BITS_51_TO_23_EQ_0_0_OR_NOT_ETC___d14,
       NOT_start_input_fp_BITS_62_TO_52_ULT_874_9_6_A_ETC___d53,
       _theResult_____3_snd_snd__h1573,
       _theResult_____5__h626,
       _theResult_____6_snd_snd_snd_snd_snd_snd__h1827,
       lv_is_denormal___2__h1871,
       lv_is_denormal__h620,
       lv_is_denormal__h631,
       lv_overflow__h633,
       lv_sign__h1878,
       lv_sign__h616,
       lv_sticky___1__h1123,
       lv_sticky__h618,
       lv_underflow__h634,
       lv_v_sticky__h603,
       p0__h2307,
       start_input_fp_BITS_62_TO_52_ULE_1150___d27,
       start_input_fp_BITS_62_TO_52_ULE_896___d31,
       start_input_fp_BITS_62_TO_52_ULT_874___d29,
       x__h1233,
       x__h1429,
       x__h1509,
       x__h2321,
       x__h2322,
       x__h2618,
       x__h2670,
       x__h2671,
       x__h2933,
       x__h2936,
       x__h3078,
       x__h3079,
       x__h3344,
       x__h3347,
       x__h3399,
       x__h3400,
       x__h3662,
       x__h3665,
       x__h3894,
       x__h3895,
       x__h4160,
       x__h4163,
       x__h4215,
       x__h4216,
       x__h4478,
       x__h4481,
       y__h1428,
       y__h1430,
       y__h2616,
       y__h2619,
       y__h2622,
       y__h2934,
       y__h2937,
       y__h2940,
       y__h3345,
       y__h3348,
       y__h3351,
       y__h3663,
       y__h3666,
       y__h3669,
       y__h4161,
       y__h4164,
       y__h4167,
       y__h4479,
       y__h4482,
       y__h4485,
       y__h900;

  // action method _start
  assign RDY__start = CAN_FIRE__start && !WILL_FIRE_RL_rl_flush_output_fifo ;
  assign CAN_FIRE__start = !ff_final_out_rv$port1__read[105] ;
  assign WILL_FIRE__start = EN__start ;

  // value method result_
  assign result_ =
	     { ff_final_out_rv[104:4],
	       CASE_ff_final_out_rv_BITS_3_TO_1_0_ff_final_ou_ETC__q1,
	       ff_final_out_rv[0] } ;
  assign RDY_result_ = ff_final_out_rv[105] ;

  // action method _deque_buffer
  assign RDY__deque_buffer = ff_final_out_rv[105] ;
  assign CAN_FIRE__deque_buffer = ff_final_out_rv[105] ;
  assign WILL_FIRE__deque_buffer = EN__deque_buffer ;

  // action method _set_flush
  assign RDY__set_flush = 1'd1 ;
  assign CAN_FIRE__set_flush = 1'd1 ;
  assign WILL_FIRE__set_flush = EN__set_flush ;

  // rule RL_rl_flush_output_fifo
  assign CAN_FIRE_RL_rl_flush_output_fifo = EN__set_flush && _set_flush_f ;
  assign WILL_FIRE_RL_rl_flush_output_fifo =
	     CAN_FIRE_RL_rl_flush_output_fifo ;

  // inlined wires
  assign ff_final_out_rv$port1__read =
	     EN__deque_buffer ?
	       106'h0AAAAAAAAAAAAAAAAAAAAAAAAAA :
	       ff_final_out_rv ;
  assign ff_final_out_rv$port1__write_1 =
	     { 1'd1,
	       _start_destination,
	       v_fsr__h556,
	       v_final_result__h557,
	       IF_NOT_start_is_dp_84_OR_NOT_IF_IF_start_fsr_B_ETC___d299 } ;
  assign ff_final_out_rv$port2__read =
	     EN__start ?
	       ff_final_out_rv$port1__write_1 :
	       ff_final_out_rv$port1__read ;
  assign ff_final_out_rv$port3__read =
	     CAN_FIRE_RL_rl_flush_output_fifo ?
	       106'h0AAAAAAAAAAAAAAAAAAAAAAAAAA :
	       ff_final_out_rv$port2__read ;

  // register ff_final_out_rv
  assign ff_final_out_rv$D_IN = ff_final_out_rv$port3__read ;
  assign ff_final_out_rv$EN = 1'b1 ;

  // remaining internal signals
  assign IF_IF_IF_INV_start_input_fp_BITS_30_TO_23_27_E_ETC___d267 =
	     IF_IF_INV_start_input_fp_BITS_30_TO_23_27_EQ_0_ETC___d221[4] ?
	       { 2'd2,
		 IF_IF_INV_start_input_fp_BITS_30_TO_23_27_EQ_0_ETC___d221[3:0] } :
	       (IF_IF_start_input_fp_BIT_7_25_OR_start_input_f_ETC___d262[4] ?
		  { 2'd3,
		    IF_IF_start_input_fp_BIT_7_25_OR_start_input_f_ETC___d262[3:0] } :
		  6'd0) ;
  assign IF_IF_IF_start_fsr_BITS_7_TO_5_7_EQ_0b0_8_THEN_ETC___d125 =
	     (IF_IF_start_fsr_BITS_7_TO_5_7_EQ_0b0_8_THEN_IF_ETC___d100[7:0] ==
	      8'd1 &&
	      _start_input_fp[62:52] != 11'd1 &&
	      (_start_input_fp[62:52] != 11'd0 ||
	       NOT_start_input_fp_BITS_51_TO_23_EQ_0_0_OR_NOT_ETC___d14)) ?
	       31'h7F800000 :
	       { IF_IF_start_fsr_BITS_7_TO_5_7_EQ_0b0_8_THEN_IF_ETC___d100[7:0],
		 IF_IF_start_fsr_BITS_7_TO_5_7_EQ_0b0_8_THEN_IF_ETC___d122[22:0] } ;
  assign IF_IF_INV_start_input_fp_BITS_30_TO_23_27_EQ_0_ETC___d221 =
	     IF_INV_start_input_fp_BITS_30_TO_23_27_EQ_0_33_ETC___d179[3] ?
	       { 2'd2,
		 IF_INV_start_input_fp_BITS_30_TO_23_27_EQ_0_33_ETC___d179[2:0] } :
	       (IF_start_input_fp_BIT_15_83_OR_start_input_fp__ETC___d216[3] ?
		  { 2'd3,
		    IF_start_input_fp_BIT_15_83_OR_start_input_fp__ETC___d216[2:0] } :
		  5'd0) ;
  assign IF_IF_start_fsr_BITS_7_TO_5_7_EQ_0b0_8_THEN_IF_ETC___d100 =
	     (IF_start_fsr_BITS_7_TO_5_7_EQ_0b0_8_THEN_IF_st_ETC___d76 &&
	      _start_input_fp[62:52] != 11'd1 &&
	      (_start_input_fp[62:52] != 11'd0 ||
	       NOT_start_input_fp_BITS_51_TO_23_EQ_0_0_OR_NOT_ETC___d14)) ?
	       _theResult_____3_snd_fst__h1572 :
	       lv_exponent__h614 ;
  assign IF_IF_start_fsr_BITS_7_TO_5_7_EQ_0b0_8_THEN_IF_ETC___d122 =
	     (IF_start_fsr_BITS_7_TO_5_7_EQ_0b0_8_THEN_IF_st_ETC___d76 &&
	      _start_input_fp[62:52] != 11'd1 &&
	      (_start_input_fp[62:52] != 11'd0 ||
	       NOT_start_input_fp_BITS_51_TO_23_EQ_0_0_OR_NOT_ETC___d14)) ?
	       spliced_bits__h1609 :
	       { 1'b0,
		 IF_start_input_fp_BITS_62_TO_52_EQ_1_9_AND_NOT_ETC___d41[52:29] } ;
  assign IF_IF_start_input_fp_BIT_7_25_OR_start_input_f_ETC___d262 =
	     IF_start_input_fp_BIT_7_25_OR_start_input_fp_B_ETC___d258[3] ?
	       { 2'd2,
		 IF_start_input_fp_BIT_7_25_OR_start_input_fp_B_ETC___d258[2:0] } :
	       5'd0 ;
  assign IF_INV_start_input_fp_BITS_30_TO_23_27_EQ_0_33_ETC___d179 =
	     (x__h2321 | _start_input_fp[20]) ?
	       { 2'd2, p0_l1__h2155 } :
	       ((x__h2670 | _start_input_fp[16]) ?
		  { 2'd3, p1_l1__h2157 } :
		  4'd0) ;
  assign IF_NOT_start_is_dp_84_OR_NOT_IF_IF_start_fsr_B_ETC___d299 =
	     (!_start_is_dp ||
	      NOT_IF_IF_start_fsr_BITS_7_TO_5_7_EQ_0b0_8_THE_ETC___d290 &&
	      !lv_underflow__h634 &&
	      !_theResult_____5__h626) ?
	       4'd0 :
	       (lv_overflow__h633 ?
		  4'd7 :
		  (lv_underflow__h634 ? 4'd9 : 4'd11)) ;
  assign IF_lv_is_denormal___2871_THEN_lv_mantissa___10_ETC__q2 =
	     lv_is_denormal___2__h1871 ?
	       lv_mantissa___1__h2028 :
	       lv_mantissa___2__h1875 ;
  assign IF_start_input_fp_BITS_62_TO_52_EQ_1_9_AND_NOT_ETC___d41 =
	     (_start_input_fp[62:52] == 11'd1 &&
	      NOT_start_input_fp_BITS_51_TO_23_EQ_0_0_OR_NOT_ETC___d14) ?
	       53'h18000000000000 :
	       _theResult_____6_fst__h962 ;
  assign IF_start_input_fp_BIT_15_83_OR_start_input_fp__ETC___d216 =
	     (x__h3078 | _start_input_fp[12]) ?
	       { 2'd2, p2_l1__h2159 } :
	       ((x__h3399 | _start_input_fp[8]) ?
		  { 2'd3, p3_l1__h2161 } :
		  4'd0) ;
  assign IF_start_input_fp_BIT_7_25_OR_start_input_fp_B_ETC___d258 =
	     (x__h3894 | _start_input_fp[4]) ?
	       { 2'd2, p4_l1__h2163 } :
	       ((x__h4215 | _start_input_fp[0]) ?
		  { 2'd3, p5_l1__h2165 } :
		  4'd0) ;
  assign NOT_IF_IF_start_fsr_BITS_7_TO_5_7_EQ_0b0_8_THE_ETC___d290 =
	     (IF_IF_start_fsr_BITS_7_TO_5_7_EQ_0b0_8_THEN_IF_ETC___d100[7:0] !=
	      8'd1 ||
	      _start_input_fp[62:52] == 11'd1 ||
	      _start_input_fp[62:52] == 11'd0 &&
	      !NOT_start_input_fp_BITS_51_TO_23_EQ_0_0_OR_NOT_ETC___d14) &&
	     (_start_input_fp[62:52] == 11'd0 &&
	      !NOT_start_input_fp_BITS_51_TO_23_EQ_0_0_OR_NOT_ETC___d14 ||
	      _start_input_fp[62:52] == 11'd1 ||
	      start_input_fp_BITS_62_TO_52_ULE_1150___d27) ;
  assign NOT_start_input_fp_BITS_51_TO_23_EQ_0_0_OR_NOT_ETC___d14 =
	     _start_input_fp[51:23] != 29'd0 |
	     _start_input_fp[22:0] != 23'd0 ;
  assign NOT_start_input_fp_BITS_62_TO_52_ULT_874_9_6_A_ETC___d53 =
	     !start_input_fp_BITS_62_TO_52_ULT_874___d29 &&
	     (start_input_fp_BITS_62_TO_52_ULE_896___d31 ?
		lv_sticky___1__h1123 :
		lv_v_sticky__h603) ;
  assign _theResult_____2_fst__h2060 =
	     ((_start_input_fp[30:23] == 8'd0 ||
	       _start_input_fp[30:23] == 8'd1) &&
	      _start_input_fp[22:0] == 23'd0) ?
	       53'd0 :
	       _theResult_____2_fst__h2097 ;
  assign _theResult_____2_fst__h2097 =
	     (lv_is_denormal___2__h1871 ||
	      _start_input_fp[30:23] != 8'd1 &&
	      _start_input_fp[30:23] != 8'd0) ?
	       lv_mantissa___1__h2100 :
	       53'd0 ;
  assign _theResult_____2_snd__h2061 =
	     (_start_input_fp[30:23] == 8'd0 &&
	      _start_input_fp[22:0] == 23'd0) ?
	       11'd0 :
	       _theResult_____2_snd__h2071 ;
  assign _theResult_____2_snd__h2071 =
	     (_start_input_fp[30:23] == 8'd1 &&
	      _start_input_fp[22:0] == 23'd0) ?
	       11'd2047 :
	       _theResult_____2_snd__h2098 ;
  assign _theResult_____2_snd__h2098 =
	     (lv_is_denormal___2__h1871 ||
	      _start_input_fp[30:23] != 8'd1 &&
	      _start_input_fp[30:23] != 8'd0) ?
	       lv_exponent___1__h2099 :
	       11'd0 ;
  assign _theResult_____3_snd_fst__h1572 =
	     (spliced_bits__h1609[24] ||
	      spliced_bits__h1609[23] && lv_is_denormal__h620) ?
	       lv_exponent___1__h1776 :
	       lv_exponent__h614 ;
  assign _theResult_____3_snd_snd__h1573 =
	     !spliced_bits__h1609[24] && !spliced_bits__h1609[23] &&
	     lv_is_denormal__h620 ;
  assign _theResult_____5__h626 = x__h1509 | lv_sticky__h618 ;
  assign _theResult_____6_fst__h1117 =
	     { !start_input_fp_BITS_62_TO_52_ULE_896___d31,
	       start_input_fp_BITS_62_TO_52_ULE_896___d31 ?
		 _start_input_fp[51:0] >> lv_mantissa_shift_temp__h1121 :
		 _start_input_fp[51:0] } ;
  assign _theResult_____6_fst__h962 =
	     ((_start_input_fp[62:52] == 11'd0 ||
	       _start_input_fp[62:52] == 11'd1) &&
	      !NOT_start_input_fp_BITS_51_TO_23_EQ_0_0_OR_NOT_ETC___d14) ?
	       53'd0 :
	       _theResult_____6_fst__h992 ;
  assign _theResult_____6_fst__h992 =
	     (_start_input_fp[62:52] != 11'd1 &&
	      (_start_input_fp[62:52] != 11'd0 ||
	       NOT_start_input_fp_BITS_51_TO_23_EQ_0_0_OR_NOT_ETC___d14)) ?
	       _theResult_____6_fst__h999 :
	       53'd0 ;
  assign _theResult_____6_fst__h999 =
	     (!start_input_fp_BITS_62_TO_52_ULE_1150___d27 ||
	      start_input_fp_BITS_62_TO_52_ULT_874___d29) ?
	       53'd0 :
	       _theResult_____6_fst__h1117 ;
  assign _theResult_____6_snd_fst__h1293 =
	     (_start_input_fp[62:52] == 11'd0 &&
	      !NOT_start_input_fp_BITS_51_TO_23_EQ_0_0_OR_NOT_ETC___d14) ?
	       11'd0 :
	       _theResult_____6_snd_fst__h1297 ;
  assign _theResult_____6_snd_fst__h1297 =
	     (_start_input_fp[62:52] == 11'd1 &&
	      !NOT_start_input_fp_BITS_51_TO_23_EQ_0_0_OR_NOT_ETC___d14) ?
	       11'd2047 :
	       _theResult_____6_snd_fst__h1301 ;
  assign _theResult_____6_snd_fst__h1301 =
	     (_start_input_fp[62:52] != 11'd1 &&
	      (_start_input_fp[62:52] != 11'd0 ||
	       NOT_start_input_fp_BITS_51_TO_23_EQ_0_0_OR_NOT_ETC___d14)) ?
	       _theResult_____6_snd_fst__h1305 :
	       11'd0 ;
  assign _theResult_____6_snd_fst__h1305 =
	     start_input_fp_BITS_62_TO_52_ULE_1150___d27 ?
	       _theResult_____6_snd_fst__h1313 :
	       11'd2047 ;
  assign _theResult_____6_snd_fst__h1313 =
	     (start_input_fp_BITS_62_TO_52_ULT_874___d29 ||
	      start_input_fp_BITS_62_TO_52_ULE_896___d31) ?
	       11'd0 :
	       lv_exponent___1__h1199 ;
  assign _theResult_____6_snd_snd_snd_snd_snd_snd__h1827 =
	     (_start_input_fp[62:52] != 11'd0 ||
	      NOT_start_input_fp_BITS_51_TO_23_EQ_0_0_OR_NOT_ETC___d14) &&
	     _start_input_fp[62:52] != 11'd1 &&
	     start_input_fp_BITS_62_TO_52_ULE_1150___d27 &&
	     start_input_fp_BITS_62_TO_52_ULT_874___d29 ;
  assign _theResult___snd_fst__h638 =
	     { 32'd0,
	       lv_sign__h616,
	       IF_IF_IF_start_fsr_BITS_7_TO_5_7_EQ_0b0_8_THEN_ETC___d125 } ;
  assign lv_exponent___1__h1199 = _start_input_fp[62:52] - 11'd896 ;
  assign lv_exponent___1__h1776 = lv_exponent__h614 + 11'd1 ;
  assign lv_exponent___1__h2029 = x__h2046 + 11'd1 ;
  assign lv_exponent___1__h2099 = { 3'd0, _start_input_fp[30:23] } + 11'd896 ;
  assign lv_exponent___2__h1877 =
	     (_start_input_fp[30:23] == 8'd1 &&
	      _start_input_fp[22:0] != 23'd0) ?
	       11'd2047 :
	       _theResult_____2_snd__h2061 ;
  assign lv_exponent___2__h1881 =
	     lv_is_denormal___2__h1871 ?
	       lv_exponent___1__h2029 :
	       lv_exponent___2__h1877 ;
  assign lv_exponent__h614 =
	     (_start_input_fp[62:52] == 11'd1 &&
	      NOT_start_input_fp_BITS_51_TO_23_EQ_0_0_OR_NOT_ETC___d14) ?
	       11'd2047 :
	       _theResult_____6_snd_fst__h1293 ;
  assign lv_fsr___1__h635 =
	     { _start_fsr[31:10],
	       1'b0,
	       _start_input_fp[62:52] == 11'd0 &&
	       !NOT_start_input_fp_BITS_51_TO_23_EQ_0_0_OR_NOT_ETC___d14,
	       _start_fsr[7:5],
	       2'b0,
	       lv_overflow__h633,
	       lv_underflow__h634,
	       _theResult_____5__h626 } ;
  assign lv_is_denormal___2__h1871 =
	     _start_input_fp[30:23] == 8'd0 &&
	     _start_input_fp[22:0] != 23'd0 ;
  assign lv_is_denormal__h620 =
	     (_start_input_fp[62:52] != 11'd0 ||
	      NOT_start_input_fp_BITS_51_TO_23_EQ_0_0_OR_NOT_ETC___d14) &&
	     _start_input_fp[62:52] != 11'd1 &&
	     start_input_fp_BITS_62_TO_52_ULE_1150___d27 &&
	     !start_input_fp_BITS_62_TO_52_ULT_874___d29 &&
	     start_input_fp_BITS_62_TO_52_ULE_896___d31 ;
  assign lv_is_denormal__h631 =
	     (IF_start_fsr_BITS_7_TO_5_7_EQ_0b0_8_THEN_IF_st_ETC___d76 &&
	      _start_input_fp[62:52] != 11'd1 &&
	      (_start_input_fp[62:52] != 11'd0 ||
	       NOT_start_input_fp_BITS_51_TO_23_EQ_0_0_OR_NOT_ETC___d14)) ?
	       _theResult_____3_snd_snd__h1573 :
	       lv_is_denormal__h620 ;
  assign lv_mantissa___1__h2028 =
	     lv_mantissa___2__h1875 <<
	     IF_IF_IF_INV_start_input_fp_BITS_30_TO_23_27_E_ETC___d267[4:0] ;
  assign lv_mantissa___1__h2100 = { 1'b0, _start_input_fp[22:0], 29'd0 } ;
  assign lv_mantissa___2__h1875 =
	     (_start_input_fp[30:23] == 8'd1 &&
	      _start_input_fp[22:0] != 23'd0) ?
	       53'h18000000000000 :
	       _theResult_____2_fst__h2060 ;
  assign lv_mantissa_shift_temp__h1121 = 11'd896 - _start_input_fp[62:52] ;
  assign lv_overflow__h633 =
	     IF_IF_start_fsr_BITS_7_TO_5_7_EQ_0b0_8_THEN_IF_ETC___d100[7:0] ==
	     8'd1 &&
	     _start_input_fp[62:52] != 11'd1 &&
	     (_start_input_fp[62:52] != 11'd0 ||
	      NOT_start_input_fp_BITS_51_TO_23_EQ_0_0_OR_NOT_ETC___d14) ||
	     (_start_input_fp[62:52] != 11'd0 ||
	      NOT_start_input_fp_BITS_51_TO_23_EQ_0_0_OR_NOT_ETC___d14) &&
	     _start_input_fp[62:52] != 11'd1 &&
	     !start_input_fp_BITS_62_TO_52_ULE_1150___d27 ;
  assign lv_result__h1882 =
	     { lv_sign__h1878,
	       lv_exponent___2__h1881,
	       IF_lv_is_denormal___2871_THEN_lv_mantissa___10_ETC__q2[51:0] } ;
  assign lv_sign__h1878 =
	     (_start_input_fp[30:23] != 8'd1 ||
	      _start_input_fp[22:0] == 23'd0) &&
	     _start_input_fp[31] ;
  assign lv_sign__h616 =
	     (_start_input_fp[62:52] != 11'd1 ||
	      !NOT_start_input_fp_BITS_51_TO_23_EQ_0_0_OR_NOT_ETC___d14) &&
	     _start_input_fp[63] ;
  assign lv_sticky___1__h1123 = lv_v_sticky__h603 | _start_input_fp[27] ;
  assign lv_sticky__h618 =
	     (_start_input_fp[62:52] != 11'd0 ||
	      NOT_start_input_fp_BITS_51_TO_23_EQ_0_0_OR_NOT_ETC___d14) &&
	     _start_input_fp[62:52] != 11'd1 &&
	     start_input_fp_BITS_62_TO_52_ULE_1150___d27 &&
	     NOT_start_input_fp_BITS_62_TO_52_ULT_874_9_6_A_ETC___d53 ;
  assign lv_underflow__h634 =
	     _theResult_____6_snd_snd_snd_snd_snd_snd__h1827 |
	     lv_is_denormal__h631 ;
  assign lv_v_sticky__h603 = _start_input_fp[26:0] != 27'd0 ;
  assign p0__h2307 = ~lv_is_denormal___2__h1871 ;
  assign p0_l1__h2155 =
	     { lv_is_denormal___2__h1871 & y__h2616, x__h2618 | y__h2619 } ;
  assign p1_l1__h2157 = { x__h2933 & y__h2934, x__h2936 | y__h2937 } ;
  assign p2_l1__h2159 = { x__h3344 & y__h3345, x__h3347 | y__h3348 } ;
  assign p3_l1__h2161 = { x__h3662 & y__h3663, x__h3665 | y__h3666 } ;
  assign p4_l1__h2163 = { x__h4160 & y__h4161, x__h4163 | y__h4164 } ;
  assign p5_l1__h2165 = { x__h4478 & y__h4479, x__h4481 | y__h4482 } ;
  assign spliced_bits__h1609 =
	     { 1'b0,
	       IF_start_input_fp_BITS_62_TO_52_EQ_1_9_AND_NOT_ETC___d41[52:29] } +
	     25'd1 ;
  assign start_input_fp_BITS_62_TO_52_ULE_1150___d27 =
	     _start_input_fp[62:52] <= 11'd1150 ;
  assign start_input_fp_BITS_62_TO_52_ULE_896___d31 =
	     _start_input_fp[62:52] <= 11'd896 ;
  assign start_input_fp_BITS_62_TO_52_ULT_874___d29 =
	     _start_input_fp[62:52] < 11'd874 ;
  assign v_final_result__h557 =
	     _start_is_dp ? _theResult___snd_fst__h638 : lv_result__h1882 ;
  assign v_fsr__h556 = _start_is_dp ? lv_fsr___1__h635 : _start_fsr ;
  assign x__h1233 =
	     IF_start_input_fp_BITS_62_TO_52_EQ_1_9_AND_NOT_ETC___d41[29] |
	     IF_start_input_fp_BITS_62_TO_52_EQ_1_9_AND_NOT_ETC___d41[27] ;
  assign x__h1429 =
	     IF_start_input_fp_BITS_62_TO_52_EQ_1_9_AND_NOT_ETC___d41[27] |
	     lv_sticky__h618 ;
  assign x__h1509 =
	     IF_start_input_fp_BITS_62_TO_52_EQ_1_9_AND_NOT_ETC___d41[28] |
	     IF_start_input_fp_BITS_62_TO_52_EQ_1_9_AND_NOT_ETC___d41[27] ;
  assign x__h2046 = lv_exponent___2__h1877 - y__h2048 ;
  assign x__h2321 = x__h2322 | _start_input_fp[21] ;
  assign x__h2322 = p0__h2307 | _start_input_fp[22] ;
  assign x__h2618 = lv_is_denormal___2__h1871 & _start_input_fp[22] ;
  assign x__h2670 = x__h2671 | _start_input_fp[17] ;
  assign x__h2671 = _start_input_fp[19] | _start_input_fp[18] ;
  assign x__h2933 = ~_start_input_fp[19] ;
  assign x__h2936 = x__h2933 & _start_input_fp[18] ;
  assign x__h3078 = x__h3079 | _start_input_fp[13] ;
  assign x__h3079 = _start_input_fp[15] | _start_input_fp[14] ;
  assign x__h3344 = ~_start_input_fp[15] ;
  assign x__h3347 = x__h3344 & _start_input_fp[14] ;
  assign x__h3399 = x__h3400 | _start_input_fp[9] ;
  assign x__h3400 = _start_input_fp[11] | _start_input_fp[10] ;
  assign x__h3662 = ~_start_input_fp[11] ;
  assign x__h3665 = x__h3662 & _start_input_fp[10] ;
  assign x__h3894 = x__h3895 | _start_input_fp[5] ;
  assign x__h3895 = _start_input_fp[7] | _start_input_fp[6] ;
  assign x__h4160 = ~_start_input_fp[7] ;
  assign x__h4163 = x__h4160 & _start_input_fp[6] ;
  assign x__h4215 = x__h4216 | _start_input_fp[1] ;
  assign x__h4216 = _start_input_fp[3] | _start_input_fp[2] ;
  assign x__h4478 = ~_start_input_fp[3] ;
  assign x__h4481 = x__h4478 & _start_input_fp[2] ;
  assign y__h1428 = x__h1429 | y__h1430 ;
  assign y__h1430 = ~lv_sign__h616 ;
  assign y__h2048 =
	     { 6'd0,
	       IF_IF_IF_INV_start_input_fp_BITS_30_TO_23_27_E_ETC___d267[4:0] } ;
  assign y__h2616 = ~_start_input_fp[22] ;
  assign y__h2619 = lv_is_denormal___2__h1871 & y__h2622 ;
  assign y__h2622 = ~_start_input_fp[21] ;
  assign y__h2934 = ~_start_input_fp[18] ;
  assign y__h2937 = x__h2933 & y__h2940 ;
  assign y__h2940 = ~_start_input_fp[17] ;
  assign y__h3345 = ~_start_input_fp[14] ;
  assign y__h3348 = x__h3344 & y__h3351 ;
  assign y__h3351 = ~_start_input_fp[13] ;
  assign y__h3663 = ~_start_input_fp[10] ;
  assign y__h3666 = x__h3662 & y__h3669 ;
  assign y__h3669 = ~_start_input_fp[9] ;
  assign y__h4161 = ~_start_input_fp[6] ;
  assign y__h4164 = x__h4160 & y__h4167 ;
  assign y__h4167 = ~_start_input_fp[5] ;
  assign y__h4479 = ~_start_input_fp[2] ;
  assign y__h4482 = x__h4478 & y__h4485 ;
  assign y__h4485 = ~_start_input_fp[1] ;
  assign y__h900 = x__h1233 | lv_sticky__h618 ;
  always@(ff_final_out_rv)
  begin
    case (ff_final_out_rv[3:1])
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4:
	  CASE_ff_final_out_rv_BITS_3_TO_1_0_ff_final_ou_ETC__q1 =
	      ff_final_out_rv[3:1];
      default: CASE_ff_final_out_rv_BITS_3_TO_1_0_ff_final_ou_ETC__q1 = 3'd5;
    endcase
  end
  always@(_start_fsr or
	  _theResult_____5__h626 or
	  lv_sign__h616 or
	  IF_start_input_fp_BITS_62_TO_52_EQ_1_9_AND_NOT_ETC___d41 or
	  y__h900 or y__h1430 or y__h1428)
  begin
    case (_start_fsr[7:5])
      3'b0:
	  IF_start_fsr_BITS_7_TO_5_7_EQ_0b0_8_THEN_IF_st_ETC___d76 =
	      IF_start_input_fp_BITS_62_TO_52_EQ_1_9_AND_NOT_ETC___d41[28] &
	      y__h900;
      3'b011:
	  IF_start_fsr_BITS_7_TO_5_7_EQ_0b0_8_THEN_IF_st_ETC___d76 =
	      _theResult_____5__h626 & y__h1430;
      3'b100:
	  IF_start_fsr_BITS_7_TO_5_7_EQ_0b0_8_THEN_IF_st_ETC___d76 =
	      IF_start_input_fp_BITS_62_TO_52_EQ_1_9_AND_NOT_ETC___d41[28] &
	      y__h1428;
      default: IF_start_fsr_BITS_7_TO_5_7_EQ_0b0_8_THEN_IF_st_ETC___d76 =
		   _start_fsr[7:5] == 3'b010 &&
		   _theResult_____5__h626 & lv_sign__h616;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        ff_final_out_rv <= `BSV_ASSIGNMENT_DELAY
	    106'h0AAAAAAAAAAAAAAAAAAAAAAAAAA;
      end
    else
      begin
        if (ff_final_out_rv$EN)
	  ff_final_out_rv <= `BSV_ASSIGNMENT_DELAY ff_final_out_rv$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    ff_final_out_rv = 106'h2AAAAAAAAAAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkfpu_convert_sp_dp

